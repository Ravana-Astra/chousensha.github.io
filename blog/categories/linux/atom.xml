<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-02-17T12:41:34-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Configure an SMTP mail service]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/17/lfcs-prep-configure-an-smtp-mail-service/"/>
    <updated>2018-02-17T12:16:33-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/17/lfcs-prep-configure-an-smtp-mail-service</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll look at configuring a mail service for LFCS objectives. We&rsquo;ll use the Postfix implementation that already comes preinstalled  on CentOS.</p>

<!-- more -->


<p>The configuration file with all Postfix parameters is <code>/etc/postfix/main.cf</code> and it is massive. Instead of manually editing it, it&rsquo;s easier to use <strong>postconf</strong>. Without arguments, it displays all parameters. If given a parameter name, it will show that parameter&rsquo;s value, and with the <strong>-e</strong> flag it can modify parameters.</p>

<p>Another important file for mail configuration is <code>/etc/aliases</code>. If you want a mail destined to a user to be delivered to another user, you can set an alias:</p>

<p><code>
username: alias
</code></p>

<p>The alias will get the mails destined for the user. I&rsquo;ve added an alias on my system so that root&rsquo;s mail will be delivered to nixhat:</p>

<p><code>
root: nixhat
</code></p>

<p>After changing any alias settings, you have to refresh the alias DB with the command <code>postalias /etc/aliases</code></p>

<p>Now it&rsquo;s time to edit some parameters in order to setup a working mail configuration.</p>

<ul>
<li>The <strong>myorigin</strong> parameter specifies the domain that locally-posted mail appears to come from</li>
</ul>


<p>The default is to use the hostname for this, but I will change it to use just the domain (example.com in this case)</p>

<p><code>
postconf -e 'myorigin=$mydomain'
[root@centos ~]# postconf myorigin
myorigin = $mydomain
</code></p>

<ul>
<li>The <strong>inet_interfaces</strong> parameter specifies the network interface addresses that this mail system receives mail on</li>
</ul>


<p>Here I have mine listening on the Ethernet interface in addition to localhost:</p>

<p><code>
postconf inet_interfaces
inet_interfaces = 192.168.217.131, localhost
</code></p>

<ul>
<li>The <strong>relayhost</strong> parameter specifies the default host to send mail to when no entry is matched in the optional transport(5) table. When no relayhost is given, mail is routed directly to the destination. On an intranet, specify the organizational domain name. In the case of SMTP, specify a domain, host, host:port, [host]:port, [address] or [address]:port; the form [host] turns off MX lookups.</li>
</ul>


<p>If you want to forward mail to a central host, use the <strong>relayhost</strong> parameter</p>

<ul>
<li>The <strong>mydestination</strong> parameter specifies the list of domains that this machine considers itself the final destination for. This parameter is important for receiving messages</li>
</ul>


<p><code>
postconf mydestination
mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain
</code></p>

<ul>
<li>The <strong>mynetworks</strong> parameter specifies the list of &ldquo;trusted&rdquo; SMTP clients that are allowed to relay mail through Postfix. It can allow clients on the local subnet, in a range, just a host, or manually specified.</li>
</ul>


<p><code>
postconf mynetworks
mynetworks = 192.168.217.0/24 127.0.0.0/8 [::1]/128
</code></p>

<h2>Restricting access to the server</h2>

<p>For receiving mail, you can add some settings to harden the security of your server:</p>

<ul>
<li><strong>smtpd_helo_required</strong> &ndash; Require that a remote SMTP client sends HELO or EHLO before commencing a MAIL transaction</li>
</ul>


<p><code>
postconf smtpd_helo_required
smtpd_helo_required = yes
</code></p>

<ul>
<li><strong>smtpd_helo_restrictions</strong> &ndash; other optional restrictions:</li>
</ul>


<p><strong>permit_mynetworks</strong> &ndash; Permit the request when the client IP address matches any network or network address listed in $mynetworks</p>

<p> <strong>reject_invalid_helo_hostname</strong> &ndash; Reject the request when the HELO or EHLO hostname is malformed</p>

<p><code>
postconf smtpd_helo_restrictions
smtpd_helo_restrictions = permit_mynetworks, reject_invalid_helo_hostname
</code></p>

<ul>
<li><strong>smtpd_sender_restrictions</strong> &ndash; Optional restrictions that the Postfix SMTP server applies in the context of a client MAIL FROM command:</li>
</ul>


<p><strong>reject_unknown_sender_domain</strong> &ndash; Reject the request when Postfix is not final destination for the sender address, and the MAIL FROM domain has 1) no DNS MX and no DNS A record, or 2) a malformed MX record such as a record with a zero-length MX hostname</p>

<p><code>
postconf smtpd_sender_restrictions
smtpd_sender_restrictions = permit_mynetworks, reject_unknown_sender_domain
</code></p>

<ul>
<li><strong>smtpd_recipient_restrictions</strong> &ndash; Optional restrictions that the Postfix SMTP server applies in the context of a client RCPT TO command</li>
</ul>


<p><strong>reject_unauth_destination</strong> &ndash; reject the request unless 1) Postfix is the mail forwarder; or 2) Postfix is the final destination</p>

<p><code>
postconf smtpd_recipient_restrictions
smtpd_recipient_restrictions = permit_mynetworks, reject_unauth_destination
</code></p>

<p>After changing Postfix settings, it is a good idea to run <code>postfix check</code> to check the validity of the config file. Then restart Postfix.</p>

<p>Now to test it:</p>

<p><code>
echo "This is a test" | mail -s "test" root@example.com
</code></p>

<p>On user nixhat:</p>

<p>```
mail
Heirloom Mail version 12.5 7/5/10.  Type ? for help.
&ldquo;/var/spool/mail/nixhat&rdquo;: 1 message 1 new</p>

<blockquote><p>N  1 root                  Sat Feb 17 18:08  18/569   &ldquo;test&rdquo;
cat  /var/spool/mail/nixhat
From <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#114;&#111;&#x6f;&#116;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;">&#114;&#111;&#111;&#x74;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#109;</a>  Sat Feb 17 18:08:09 2018
Return-Path: <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x72;&#x6f;&#111;&#116;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#x72;&#111;&#x6f;&#116;&#64;&#x65;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a>
X-Original-To: <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x72;&#111;&#111;&#116;&#64;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#x63;&#111;&#109;">&#x72;&#111;&#x6f;&#116;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a>
Delivered-To: <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#114;&#x6f;&#111;&#116;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#46;&#x63;&#111;&#x6d;">&#x72;&#x6f;&#x6f;&#116;&#64;&#101;&#120;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>
Received: by centos.example.com (Postfix, from userid 0)</p>

<pre><code>id 51255218FED7; Sat, 17 Feb 2018 18:08:09 +0200 (EET)
</code></pre>

<p>Date: Sat, 17 Feb 2018 18:08:09 +0200
To: <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x72;&#111;&#111;&#x74;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;">&#x72;&#x6f;&#x6f;&#116;&#64;&#101;&#x78;&#97;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>
Subject: test
User-Agent: Heirloom mailx 12.5 7/5/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#50;&#48;&#49;&#56;&#x30;&#50;&#x31;&#55;&#x31;&#x36;&#x30;&#x38;&#x30;&#x39;&#46;&#x35;&#x31;&#50;&#x35;&#53;&#50;&#49;&#x38;&#70;&#69;&#68;&#x37;&#64;&#99;&#101;&#x6e;&#116;&#111;&#115;&#x2e;&#x65;&#120;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#109;">&#50;&#x30;&#49;&#56;&#48;&#50;&#49;&#x37;&#49;&#54;&#48;&#x38;&#x30;&#57;&#x2e;&#53;&#x31;&#x32;&#53;&#53;&#50;&#49;&#56;&#x46;&#x45;&#68;&#55;&#x40;&#x63;&#101;&#x6e;&#x74;&#x6f;&#x73;&#x2e;&#x65;&#120;&#97;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>
From: <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x72;&#x6f;&#111;&#x74;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#x72;&#x6f;&#x6f;&#116;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a> (root)
Status: O</p></blockquote>

<p>This is a test
```</p>

<p>So it works. If you want to see more about the status of your mails, look inside <code>/var/log/maillog</code>:</p>

<p><code>
Feb 17 18:21:11 centos postfix/pickup[8896]: 4FADF218FED8: uid=0 from=&lt;root&gt;
Feb 17 18:21:11 centos postfix/cleanup[9359]: 4FADF218FED8: message-id=&lt;20180217162111.4FADF218FED8@centos.example.com&gt;
Feb 17 18:21:11 centos postfix/qmgr[8897]: 4FADF218FED8: from=&lt;root@example.com&gt;, size=431, nrcpt=1 (queue active)
Feb 17 18:21:11 centos postfix/local[9361]: 4FADF218FED8: to=&lt;nixhat@example.com&gt;, orig_to=&lt;root@example.com&gt;, relay=local, delay=0.08, delays=0.07/0.02/0/0, dsn=2.0.0, status=sent (delivered to mailbox)
Feb 17 18:21:11 centos postfix/qmgr[8897]: 4FADF218FED8: removed
</code></p>

<p>Some other useful actions with mail would be to view the mail queue with <strong>mailq</strong> and flush the queue with <strong>postfix flush</strong></p>

<p>Also see <strong>man 5 postconf</strong> for all Postfix parameters</p>

<p>```</p>

<hr />

<p>/ Q: What lies on the bottom of the ocean \
\ and twitches? A: A nervous wreck.       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Changing kernel parameters]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/15/lfcs-prep-changing-kernel-parameters/"/>
    <updated>2018-02-15T13:28:47-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/15/lfcs-prep-changing-kernel-parameters</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll look at changing kernel parameters both at runtime and at boot. Such changes can be made with the <strong>sysctl</strong> command or by inputting values in different files inside <code>/proc/sys</code></p>

<!-- more -->


<p>Let&rsquo;s see a sample /proc/sys folder, which can differ between systems:</p>

<p><code>
ls /proc/sys
abi  crypto  debug  dev  fs  kernel  net  sunrpc  vm
</code></p>

<p>The most important entries are:</p>

<ul>
<li><p>dev contains parameters for system devices</p></li>
<li><p>fs contains filesystem parameters</p></li>
<li><p>kernel is used for kernel parameters</p></li>
<li><p>net contains network parameters</p></li>
<li><p>vm contains virtual memory parameters</p></li>
</ul>


<p>To modify runtime parameters, we can use <strong>sysctl</strong>. Let&rsquo;s take a look at all the available parameters:</p>

<p><code>
sysctl -a | wc -l
951
</code></p>

<p>Too many to list here, so let&rsquo;s glance over a few random ipv4 parameters:</p>

<p><code>
sysctl -a | grep net.ipv4 | tail
net.ipv4.tcp_tso_win_divisor = 3
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 0
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_wmem = 4096    16384    4194304
net.ipv4.tcp_workaround_signed_windows = 0
net.ipv4.udp_mem = 43428    57905    86856
net.ipv4.udp_rmem_min = 4096
net.ipv4.udp_wmem_min = 4096
net.ipv4.xfrm4_gc_thresh = 32768
</code></p>

<p>The dots in the options represent actual slashes in the directory structure under /proc/sys. Now let&rsquo;s take a value and modify it. I will use the packet forwarding feature for this example</p>

<p><code>
cat /proc/sys/net/ipv4/ip_forward
1
</code></p>

<p>So the system is configured to forward packets as a router. To change this, we can put a 0 value in the file:</p>

<p><code>
echo 0 &gt; /proc/sys/net/ipv4/ip_forward
</code></p>

<p>Another option is to write a value with sysctl. Here I enable IP forwarding again:</p>

<p><code>
sysctl -w net.ipv4.ip_forward=1
net.ipv4.ip_forward = 1
</code></p>

<p>Changes made in this way won&rsquo;t persist a reboot. To make them permanent, you have to edit the configuration file.
This used to be <code>/etc/sysctl.conf</code> , and can still be used, but newer systems look for config files inside <strong>/etc/sysctl.d/</strong>, <strong>/run/sysctl.d/</strong>, and <strong>/usr/lib/sysctl.d/</strong> (in order of precedence). On such systems, you can modify the <code>/usr/lib/sysctl.d/00-system</code> file for your kernel settings.</p>

<p>I edited mine to disable IP forwarding:</p>

<p>```</p>

<h1>Disable IP forwarding</h1>

<p>net.ipv4.ip_forward = 0
```</p>

<p>If you don&rsquo;t want to reboot, you can have sysctl re-read its config files by doing <strong>sysctl -p</strong> with the config file of your choice (by default, it will read <strong>/etc/sysctl.conf</strong>)</p>

<p><code>
 sysctl -p /usr/lib/sysctl.d/00-system.conf
net.ipv4.ip_forward = 0
cat /proc/sys/net/ipv4/ip_forward
0
</code></p>

<p>```</p>

<hr />

<p>/ You&rsquo;re definitely on their list. The \
| question to ask next is what list it |
\ is.                                  /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - NTP configuration]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/14/lfcs-prep-ntp-configuration/"/>
    <updated>2018-02-14T14:50:41-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/14/lfcs-prep-ntp-configuration</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll look at NTP configuration by using chrony, which is installed by default on newer RedHat systems.</p>

<!-- more -->


<p>Ensure that the <strong>chronyd</strong> service is started and let&rsquo;s take a look at the current time setttings:</p>

<p>```
timedatectl</p>

<pre><code>  Local time: Thu 2018-02-15 02:15:51 JST
</code></pre>

<p>  Universal time: Wed 2018-02-14 17:15:51 UTC</p>

<pre><code>    RTC time: Wed 2018-02-14 17:15:52
   Time zone: Asia/Tokyo (JST, +0900)
 NTP enabled: no
</code></pre>

<p>NTP synchronized: no
 RTC in local TZ: no</p>

<pre><code>  DST active: n/a
</code></pre>

<p>```</p>

<p>Now look inside chrony&rsquo;s config file, which is <code>/etc/chrony.conf</code>:</p>

<p>```</p>

<h1>Use public servers from the pool.ntp.org project.</h1>

<h1>Please consider joining the pool (<a href="http://www.pool.ntp.org/join.html">http://www.pool.ntp.org/join.html</a>).</h1>

<p>server 0.rhel.pool.ntp.org iburst
server 1.rhel.pool.ntp.org iburst
server 2.rhel.pool.ntp.org iburst
server 3.rhel.pool.ntp.org iburst</p>

<h1>Ignore stratum in source selection.</h1>

<p>stratumweight 0</p>

<h1>Record the rate at which the system clock gains/losses time.</h1>

<p>driftfile /var/lib/chrony/drift</p>

<h1>Enable kernel RTC synchronization.</h1>

<p>rtcsync</p>

<h1>In first three updates step the system clock instead of slew</h1>

<h1>if the adjustment is larger than 10 seconds.</h1>

<p>makestep 10 3</p>

<h1>Allow NTP client access from local network.</h1>

<h1>allow 192.168/16</h1>

<h1>Listen for commands only on localhost.</h1>

<p>bindcmdaddress 127.0.0.1
bindcmdaddress ::1</p>

<h1>Serve time even if not synchronized to any NTP server.</h1>

<h1>local stratum 10</h1>

<p>keyfile /etc/chrony.keys</p>

<h1>Specify the key used as password for chronyc.</h1>

<p>commandkey 1</p>

<h1>Generate command key if missing.</h1>

<p>generatecommandkey</p>

<h1>Disable logging of client accesses.</h1>

<p>noclientlog</p>

<h1>Send a message to syslog if a clock adjustment is larger than 0.5 seconds.</h1>

<p>logchange 0.5</p>

<p>logdir /var/log/chrony</p>

<h1>log measurements statistics tracking</h1>

<p>```</p>

<p>There is a set of default servers configured, but you can add your own. You can also allow NTP client access in the local network by uncommenting or adding the <strong>allow</strong> directive with a range.</p>

<p>In the previous timedatectl output we saw that NTP and synchronization weren&rsquo;t enabled, so let&rsquo;s enable them:</p>

<p>```
timedatectl set-ntp 1
timedatectl | grep -i ntp</p>

<pre><code> NTP enabled: yes
</code></pre>

<p>NTP synchronized: no
```</p>

<p>We still have to manage the NTP synchronization. In the config file we have some server pools enabled, but we want to know exact names for the servers:</p>

<p>```
chronyc sources -v
210 Number of sources = 4</p>

<p>  .&mdash; Source mode  &lsquo;^&rsquo; = server, &lsquo;=&rsquo; = peer, &lsquo;#&rsquo; = local clock.
 / .&ndash; Source state &lsquo;*&rsquo; = current synced, &lsquo;+&rsquo; = combined , &lsquo;&ndash;&rsquo; = not combined,
| /   &lsquo;?&rsquo; = unreachable, &lsquo;x&rsquo; = time may be in error, &lsquo;~&rsquo; = time too variable.
||                                                 .&ndash; xxxx [ yyyy ] +/&ndash; zzzz
||      Reachability register (octal) &ndash;.           |  xxxx = adjusted offset,
||      Log2(Polling interval) &mdash;.      |          |  yyyy = measured offset,
||                                \     |          |  zzzz = estimated error.
||                                 |    |           \</p>

<h1>MS Name/IP address         Stratum Poll Reach LastRx Last sample</h1>

<p>^? ts1.sct.de                    0   8     0   10y     +0ns[   +0ns] +/&ndash;    0ns
^? greenstone-quarry.the-jad     0   8     0   10y     +0ns[   +0ns] +/&ndash;    0ns
^? 1b.ncomputers.org             0   8     0   10y     +0ns[   +0ns] +/&ndash;    0ns
^? shout.ovh                     0   8     0   10y     +0ns[   +0ns] +/&ndash;    0ns
```</p>

<p>Now we can pick a server to synchronize with:</p>

<p>```
ntpdate -vd ts1.sct.de
15 Feb 02:37:52 ntpdate[9511]: ntpdate 4.2.6<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#112;&#53;&#x40;&#x31;&#x2e;&#x32;&#51;&#52;&#57;&#45;&#x6f;">&#112;&#x35;&#64;&#x31;&#46;&#x32;&#x33;&#52;&#x39;&#45;&#111;</a> Wed Mar  1 09:00:52 UTC 2017 (1)
Looking for host ts1.sct.de and service ntp
host found : ts1.sct.de
transmit(193.141.27.1)
receive(193.141.27.1)
transmit(193.141.27.1)
receive(193.141.27.1)
transmit(193.141.27.1)
receive(193.141.27.1)
transmit(193.141.27.1)
receive(193.141.27.1)
server 193.141.27.1, port 123
stratum 2, precision -24, leap 00, trust 000
refid [193.141.27.1], delay 0.07736, dispersion 0.00209
transmitted 4, in filter 4
reference time:    de2ec48b.aba7efb5  Wed, Feb 14 2018 23:22:03.670
originate timestamp: de2ec847.3cbf5eb1  Wed, Feb 14 2018 23:37:59.237
transmit timestamp:  de2ef276.d94d8084  Thu, Feb 15 2018  2:37:58.848
filter delay:  0.07916  0.07736  0.08383  0.07954</p>

<pre><code>     0.00000  0.00000  0.00000  0.00000 
</code></pre>

<p>filter offset: -10799.6 -10799.6 -10799.6 -10799.6</p>

<pre><code>     0.000000 0.000000 0.000000 0.000000
</code></pre>

<p>delay 0.07736, dispersion 0.00209
offset -10799.642908</p>

<p>15 Feb 02:37:58 ntpdate[9511]: step time server 193.141.27.1 offset -10799.642908 sec
```</p>

<p>To get more information about the NTP status, check the tracking:</p>

<p><code>
chronyc tracking
Reference ID    : 193.141.27.1 (ts1.sct.de)
Stratum         : 3
Ref time (UTC)  : Wed Feb 14 14:41:11 2018
System time     : 0.000000000 seconds fast of NTP time
Last offset     : +10799.637695312 seconds
RMS offset      : 10799.637695312 seconds
Frequency       : 0.000 ppm fast
Residual freq   : -1.456 ppm
Skew            : 1000000.000 ppm
Root delay      : 0.069487 seconds
Root dispersion : 1528.844971 seconds
Update interval : 0.0 seconds
Leap status     : Normal
</code></p>

<p>You can see the server in the Reference ID and the Leap status that confirms the synchronization. Also re-check with timedatectl that NTP is working:</p>

<p>```
timedatectl | grep -i ntp</p>

<pre><code> NTP enabled: yes
</code></pre>

<p>NTP synchronized: yes
```</p>

<p>```</p>

<hr />

<p>/ Give thought to your reputation.       \
| Consider changing name and moving to a |
\ new town.                              /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Configuring SGID directories]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/13/lfcs-prep-configuring-sgid-directories/"/>
    <updated>2018-02-13T12:39:42-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/13/lfcs-prep-configuring-sgid-directories</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll see how to configure SGID directories to share files between members of the same group.</p>

<!-- more -->


<p>I created a group called saiyans with a GID of 9000 to separate it from the rest of the groups:</p>

<p><code>
groupadd -g 9000 saiyans
</code></p>

<p>I made a directory that will be used to share files within the group:</p>

<p><code>
mkdir /opt/invasion_plans
</code></p>

<p>Changed the ownership of the directory to the nobody user and the saiyans group.</p>

<p><code>
chown nobody:saiyans /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxr-xr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Set Group ID:</p>

<p><code>
chmod g+s /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxr-sr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>There are no write permissions yet, so have to assign them:</p>

<p><code>
chmod g+w /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxrwsr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Removed the permissions for the other users:</p>

<p><code>
chmod o-rwx /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxrws---. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Now I added 2 users to the saiyans group:</p>

<p><code>
useradd -G saiyans kakarot
useradd -G saiyans vegeta
cat /etc/group | grep saiyans
saiyans:x:9000:kakarot,vegeta
</code></p>

<p>And tested it:</p>

<p><code>
su - kakarot
echo kamehameha &gt; /opt/invasion_plans/boom
su - vegeta
echo 'final flash' &gt; /opt/invasion_plans/bang
[kakarot@rhel7 ~]$ cat /opt/invasion_plans/bang
final flash
[vegeta@rhel7 ~]$ cat /opt/invasion_plans/boom
kamehameha
</code></p>

<p>In case users need to be restricted from deleting files they didn&rsquo;t create, you can set the sticky bit with <code>chmod +t /opt/invasion_plans</code></p>

<p>```</p>

<hr />

<p>/ Your lucky number is 3552664958674928. \
\ Watch for it everywhere.               /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Managing encrypted partitions]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/12/lfcs-prep-managing-encrypted-partitions/"/>
    <updated>2018-02-12T12:39:28-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/12/lfcs-prep-managing-encrypted-partitions</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll go over creating LUKS-encrypted partitions with <strong>cryptsetup</strong>. LUKS (Linux Unified Key Setup) is a block device encryption format that is the standard on Linux systems. Also, because it stores all the necessary data in the partition header, it&rsquo;s easy to migrate partitions.</p>

<!-- more -->


<p>To get an overview of all the cryptographic ciphers that the system can use, look in <code>/proc/crypto</code>:</p>

<p><code>
 cat /proc/crypto | grep name
name         : crc32
name         : __ghash
name         : ghash
name         : __ghash
name         : xts(aes)
name         : lrw(aes)
name         : __xts-aes-aesni
name         : __lrw-aes-aesni
name         : pcbc(aes)
name         : rfc4106(gcm(aes))
name         : __gcm-aes-aesni
name         : ctr(aes)
name         : __ctr-aes-aesni
name         : cbc(aes)
name         : __ecb-aes-aesni
name         : ecb(aes)
name         : __cbc-aes-aesni
name         : __ecb-aes-aesni
name         : __aes-aesni
name         : aes
name         : crct10dif
name         : crct10dif
name         : crc32c
name         : hmac(sha256)
name         : hmac(sha1)
name         : lzo
name         : crc32c
name         : aes
name         : sha224
name         : sha256
name         : sha1
name         : md5
name         : sha224
name         : sha256
name         : sha1
name         : aes
</code></p>

<p>For this demo, I will be using a 200MB partition called /dev/sdb1. The below command initializes the partition as a LUKS device and you have to configure a passphrase at this step.</p>

<p>```
cryptsetup luksFormat /dev/sdb1</p>

<h1>WARNING!</h1>

<p>This will overwrite data on /dev/sdb1 irrevocably.</p>

<p>Are you sure? (Type uppercase yes): YES
Enter passphrase:
Verify passphrase:
```</p>

<p>You can check out the header:</p>

<p>```
cryptsetup luksDump /dev/sdb1
LUKS header information for /dev/sdb1</p>

<p>Version:           1
Cipher name:       aes
Cipher mode:       xts-plain64
Hash spec:         sha256
Payload offset:    4096
MK bits:           256
MK digest:         6b 5e c2 bb 77 f9 0a 0d d4 67 4d 6f 01 a1 df 33 ce d7 94 b2
MK salt:           42 9d d7 5f 3b 6c c1 0b 55 53 d1 fd 28 bd 73 27</p>

<pre><code>               64 63 bb 70 02 de 33 46 0c 4f 2e 07 a9 a7 28 52 
</code></pre>

<p>MK iterations:     68500
UUID:              85b6a404-b24e-4c31-baf3-75cb3f041054</p>

<p>Key Slot 0: ENABLED</p>

<pre><code>Iterations:             547007
Salt:                   4d 13 8b 20 74 cb 88 dd 8e dc b3 b0 2c ca 83 4b 
                          bd ab 12 2d 95 57 72 06 00 25 11 0e 43 b8 dc 81 
Key material offset:    8
AF stripes:                4000
</code></pre>

<p>Key Slot 1: DISABLED
Key Slot 2: DISABLED
Key Slot 3: DISABLED
Key Slot 4: DISABLED
Key Slot 5: DISABLED
Key Slot 6: DISABLED
Key Slot 7: DISABLED
```</p>

<p>Next, create a mapping between the opened LUKS partition and the device mapper.</p>

<p><code>
cryptsetup --verbose luksOpen /dev/sdb1 hidden
Enter passphrase for /dev/sdb1:
Key slot 0 unlocked.
Command successful.
</code></p>

<p>View the mapping details:</p>

<p><code>
ls -l /dev/mapper/hidden
lrwxrwxrwx. 1 root root 7 Feb  9 18:29 /dev/mapper/hidden -&gt; ../dm-2
</code></p>

<p>If you want to have more insight into the status of the mapping:</p>

<p><code>
cryptsetup -v status hidden
/dev/mapper/hidden is active.
  type:    LUKS1
  cipher:  aes-xts-plain64
  keysize: 256 bits
  device:  /dev/sdb1
  offset:  4096 sectors
  size:    405504 sectors
  mode:    read/write
Command successful.
</code></p>

<p>Format the partition with the filesystem of your choice:</p>

<p>```
mkfs -t ext4 /dev/mapper/hidden
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
50800 inodes, 202752 blocks
10137 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=33816576
25 block groups
8192 blocks per group, 8192 fragments per group
2032 inodes per group
Superblock backups stored on blocks:</p>

<pre><code>8193, 24577, 40961, 57345, 73729
</code></pre>

<p>Allocating group tables: done                          <br/>
Writing inode tables: done                          <br/>
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done
```</p>

<p>I made a folder for mounting the new encrypted partition and mounted it:</p>

<p>```
mount -v /dev/mapper/hidden /mnt/hidden
mount: /mnt/hidden does not contain SELinux labels.</p>

<pre><code>   You just mounted an file system that supports labels which does not
   contain labels, onto an SELinux box. It is likely that confined
   applications will generate AVC messages and not be allowed access to
   this file system.  For more details see restorecon(8) and mount(8).
</code></pre>

<p>mount: /dev/mapper/hidden mounted on /mnt/hidden.
```</p>

<p>When done working on it, you can unmount it:</p>

<p><code>
umount -v /mnt/hidden
umount: /mnt/hidden (/dev/mapper/hidden) unmounted
</code></p>

<p>And then remove the mapping:</p>

<p><code>
cryptsetup --verbose luksClose hidden
Command successful.
</code></p>

<p>To remount it, just go through the above steps again. If you want to mount it at boot, you need to take note of some UUIDS:</p>

<p><code>
lsblk -o name,uuid,mountpoint
NAME          UUID                                   MOUNTPOINT
sda                                                  
├─sda1        b8e2fb99-bf4c-4632-883b-8ed5c2350b1e   /boot
└─sda2        PLxZXl-aHBf-9VPQ-XOd1-eLMH-cWOW-NhjdcP
  ├─rhel-root 2c0268ac-c31a-462d-b5b9-41bdfbecd75d   /
  └─rhel-swap 6544d880-b634-4566-a68d-d3a58cec4cf6   [SWAP]
sdb                                                  
└─sdb1        85b6a404-b24e-4c31-baf3-75cb3f041054   
  └─hidden    ab98b274-9d34-41f0-9178-4f8c4b7e8a77   
sr0                                                  
</code></p>

<p>Then you need to edit <code>/etc/crypttab</code>:</p>

<p><code>
name device &lt;password&gt; &lt;options&gt;
</code></p>

<p>Device refers to the block device or its UUID. The entries between tags are optional. In my case, the entry would look like this (the UUID is of /dev/sdb1)</p>

<p><code>
cat /etc/crypttab
hidden UUID=85b6a404-b24e-4c31-baf3-75cb3f041054
</code></p>

<p>And edit /etc/fstab like you would for any other partition (UUID refers to the hidden mapping):</p>

<p><code>
UUID=ab98b274-9d34-41f0-9178-4f8c4b7e8a77 /mnt/hidden ext4 defaults 0 0
</code></p>

<p>Now you will be prompted at boot for the password. If you want to use a key for automatic unlocking, create a key file (here a random key of 4096 bytes length):</p>

<p><code>
dd if=/dev/urandom of=/root/key bs=1024 count=4
4+0 records in
4+0 records out
4096 bytes (4.1 kB) copied, 0.00100253 s, 4.1 MB/s
</code></p>

<p>Make it only readable by root with <code>chmod 400 /root/key</code></p>

<p>Add the key for the encrypted volume:</p>

<p><code>
cryptsetup -v luksAddKey /dev/sdb1 /root/key
Enter any existing passphrase:
Key slot 0 unlocked.
Key slot 0 unlocked.
Command successful.
</code></p>

<p>And add the path of the key file to /etc/crypttab</p>

<p><code>
cat /etc/crypttab
hidden UUID=85b6a404-b24e-4c31-baf3-75cb3f041054 /root/key
</code></p>

<p>Now the volume will be unlocked automatically without the need of entering a passphrase.</p>

<p>```</p>

<hr />

<p>/ You definitely intend to start living \
\ sometime soon.                        /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
