<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-06-19T12:53:58-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick shares with Samba on CentOS]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/09/quick-shares-with-samba-on-centos/"/>
    <updated>2017-06-09T05:47:05-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/09/quick-shares-with-samba-on-centos</id>
    <content type="html"><![CDATA[<p>The interwebz is thundering with doomsday predictions about the <a href="https://blog.qualys.com/securitylabs/2017/05/26/samba-vulnerability-cve-2017-7494">Samba CVE-2017-7494 exploit</a>, and here I am, deciding that now is the best time to make a post on setting up Samba shares! xD</p>

<p>On a related note, if for some reason you can&rsquo;t patch the vulnerability yet, there is a workaround (with some drawbacks). Edit the global section in smb.conf and add the line <code>nt pipe support = no</code>.</p>

<!-- more -->


<p>Back to the matter at hand. First, let&rsquo;s verify if Samba is installed on the CentOS system:</p>

<p><code>
rpm -q samba
package samba is not installed
</code></p>

<p>Since it&rsquo;s not installed on my machine, I installed it with <code>yum install samba</code>, and then ran the previous command again, to check the version:</p>

<p><code>
rpm -q samba
samba-4.4.4-14.el7_3.x86_64
</code></p>

<p>Now, let&rsquo;s start Samba and see it running:</p>

<p>```
service smb start
Redirecting to /bin/systemctl start  smb.service
service smb status
Redirecting to /bin/systemctl status  smb.service
● smb.service &ndash; Samba SMB Daemon
   Loaded: loaded (/usr/lib/systemd/system/smb.service; disabled; vendor preset: disabled)
   Active: active (running) since Thu 2017-06-08 10:56:54 EEST; 5s ago
 Main PID: 61874 (smbd)
   Status: &ldquo;smbd: ready to serve connections&hellip;&rdquo;
   CGroup: /system.slice/smb.service</p>

<pre><code>       ├─61874 /usr/sbin/smbd
       ├─61875 /usr/sbin/smbd
       ├─61876 /usr/sbin/smbd
       └─61879 /usr/sbin/smbd
</code></pre>

<p>Jun 08 10:56:52 localhost.localdomain systemd[1]: Starting Samba SMB Daemon&hellip;
Jun 08 10:56:54 localhost.localdomain smbd[61874]: [2017/06/08 10:56:54.513901,  0] ../lib/util/become_daemon.c:124(daemon_ready)
Jun 08 10:56:54 localhost.localdomain smbd[61874]:   STATUS=daemon &lsquo;smbd&rsquo; finished starting up and ready to serve connections
Jun 08 10:56:54 localhost.localdomain systemd[1]: Started Samba SMB Daemon.
```</p>

<h2>Samba daemons</h2>

<p>The Samba functionality is contained within 3 daemons:</p>

<ul>
<li><p><strong>smbd</strong> &ndash; file sharing, printing services, authentication. Default ports are 139 and 445</p></li>
<li><p><strong>nmbd</strong> &ndash; NetBIOS name service requests and browsing protocols</p></li>
<li><p><strong>winbindd</strong> &ndash; used for Windows domains membership</p></li>
</ul>


<h2>Samba configuration</h2>

<p>The Samba configuration file is <code>/etc/samba/smb.conf</code>. Here is how a fresh config file looks after installation:</p>

<p>```</p>

<h1>See smb.conf.example for a more detailed config file or</h1>

<h1>read the smb.conf manpage.</h1>

<h1>Run &lsquo;testparm&rsquo; to verify the config is correct after</h1>

<h1>you modified it.</h1>

<p>[global]</p>

<pre><code>workgroup = SAMBA
security = user

passdb backend = tdbsam

printing = cups
printcap name = cups
load printers = yes
cups options = raw
</code></pre>

<p>[homes]</p>

<pre><code>comment = Home Directories
valid users = %S, %D%w%S
browseable = No
read only = No
inherit acls = Yes
</code></pre>

<p>[printers]</p>

<pre><code>comment = All Printers
path = /var/tmp
printable = Yes
create mask = 0600
browseable = No
</code></pre>

<p>[print$]</p>

<pre><code>comment = Printer Drivers
path = /var/lib/samba/drivers
write list = root
create mask = 0664
directory mask = 0775
</code></pre>

<p>```</p>

<p>For much more detailed information and examples, see the <a href="/downloads/code/smb.conf.example">smb.conf.example file</a></p>

<h2>Create Samba share</h2>

<p>In this example, let&rsquo;s create a share that users can also write to. First, create the directory that you will share: <code>mkdir -p /srv/samba/myshare</code>. I placed a text file with some random stuff inside. Then I gave full access to the path and its subfolders with <code>chmod -R 777 /srv/samba</code></p>

<p>Next, we need to create a Samba user, but this account is not the same as a user account on the system. We have to make a user account on the system before assigning it to Samba:</p>

<p><code>
adduser smbuser -s /sbin/nologin
</code></p>

<p>Here I created a user just for Samba, with no login shell. Attempting to login will give the user a message that they are not allowed to login. If you prefer that the user is disconnected with no message, you can specify <code>/bin/false</code> instead.</p>

<p>Then, I gave the user account a description, which you can find inside <em>/etc/passwd</em>:</p>

<p><code>
usermod -c 'Samba access is allowed for this user' smbuser
[root@localhost ~]# cat /etc/passwd | grep smbuser
smbuser:x:1001:1001:Samba access is allowed for this user:/home/smbuser:/sbin/nologin
</code></p>

<p>Have to give the user account a password:</p>

<p><code>
[root@localhost ~]# passwd smbuser
Changing password for user smbuser.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.
</code></p>

<p>Next, we create a Samba user, by using the previously created account:</p>

<p><code>
[root@localhost ~]# smbpasswd -a smbuser
New SMB password:
Retype new SMB password:
Added user smbuser.
</code></p>

<p>To be safe, check that the Samba user was created:</p>

<p><code>
[root@localhost ~]# pdbedit -L
smbuser:1001:Samba access is allowed for this user
</code></p>

<p>We have the share location and the user, now we need to edit the smb.conf file with the relevant information:</p>

<p>```
[global]</p>

<pre><code># workgroup name or Windows NT domain name
workgroup = SAMBA
# default: user and password authentication
security = user
# optional comment for Windows
server string = Samba File Server
# default backend for user information
passdb backend = tdbsam
</code></pre>

<p>[sharename]</p>

<pre><code>path = /srv/samba/myshare
comment = Only authorized users
# allow these users
valid users = smbuser
# same can be achieved with writable = yes
read only = no  
# allow subnet range
allow hosts = 192.168.217.
# deny access
invalid users = root  
</code></pre>

<p>```</p>

<p>I used comments for easier understanding, but for performance reasons, you might want to keep your file to minimum size, by removing all those comment lines. You can do that by keeping a configuration file with all the additional remarks, while using a smb.conf with only the required configuration. All the comments will be stripped from the config file:</p>

<p><code>
[root@localhost samba]# testparm -s smb.conf.old &gt; smb.conf
Load smb config files from smb.conf.old
rlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)
Processing section "[sharename]"
Loaded services file OK.
Server role: ROLE_STANDALONE
</code></p>

<p>We checked that our config file is valid, so now it&rsquo;s time to test it. Restart Samba for the configurations to take effect with <code>service smb restart</code>. And now let&rsquo;s access the share! From another machine, I used <strong>smbclient</strong> to list the available services on the Samba server:</p>

<p>```
smbclient -L 192.168.217.131 -U smbuser
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Enter smbuser&rsquo;s password:
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]</p>

<pre><code>Sharename       Type      Comment
---------       ----      -------
sharename       Disk      Only authorized users
IPC$            IPC       IPC Service (Samba File Server)
</code></pre>

<p>Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]</p>

<pre><code>Server               Comment
---------            -------

Workgroup            Master
---------            -------
</code></pre>

<p>```</p>

<p>There is one last step that you need to accomplish if you have SELinux enabled. You have to label the directory you&rsquo;re sharing with the <strong>samba_share_t</strong> label:</p>

<p><code>
chcon -R -t samba_share_t /srv/samba
</code></p>

<p>Now the /srv/samba directory and everything it contains is labeled correctly, and SELinux won&rsquo;t interfere. View the security context of the path with:</p>

<p><code>
ls -ldZ /srv/samba/
drwxr-xr-x. root root unconfined_u:object_r:samba_share_t:s0 /srv/samba/
</code></p>

<p>Changes made with chcon are temporary. To survive a relabel or running <em>restorerecon</em>, make the changes permanent with:</p>

<p><code>
semanage fcontext -a -t samba_share_t "path(/.*)?"
</code></p>

<p>Then apply them with <code>restorecon -R -v /path</code>.</p>

<p>Finally, to connect to a share, use the syntax: <code>smbclient  //host/sharename -U username</code> (in the below examle, the name of my share is sharename, because laziness):</p>

<p>```
smbclient  //192.168.217.131/sharename -U smbuser
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Enter smbuser&rsquo;s password:
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]
smb: > ls</p>

<pre><code>  .                                   D        0  Thu Jun  8 09:39:42 2017
  ..                                  D        0  Thu Jun  8 09:26:38 2017
  read.txt                            N       11  Thu Jun  8 09:39:42 2017

        18307072 blocks of size 1024. 13091600 blocks available
</code></pre>

<p>```</p>

<p>List available commands:</p>

<p>```</p>

<pre><code>smb: \&gt; ?
?              allinfo        altname        archive        backup         
blocksize      cancel         case_sensitive cd             chmod          
chown          close          del            dir            du             
echo           exit           get            getfacl        geteas         
hardlink       help           history        iosize         lcd            
link           lock           lowercase      ls             l              
mask           md             mget           mkdir          more           
mput           newer          notify         open           posix          
posix_encrypt  posix_open     posix_mkdir    posix_rmdir    posix_unlink   
posix_whoami   print          prompt         put            pwd            
q              queue          quit           readlink       rd             
recurse        reget          rename         reput          rm             
rmdir          showacls       setea          setmode        scopy          
stat           symlink        tar            tarmode        timeout        
translate      unlock         volume         vuid           wdel           
logon          listconnect    showconnect    tcon           tdis           
tid            logoff         ..             !              
</code></pre>

<p>```</p>

<p>Download file:</p>

<p><code>
smb: \&gt; get read.txt
getting file \read.txt of size 11 as read.txt (3.6 KiloBytes/sec) (average 3.6 KiloBytes/sec)
</code></p>

<p>Delete file:</p>

<p><code>
smb: \&gt; del read.txt
</code></p>

<p>Upload file:</p>

<p>```
smb: > put test.png
putting file test.png as \test.png (0.2 kb/s) (average 0.2 kb/s)
smb: > ls
  .                                   D        0  Thu Jun  8 13:24:14 2017
  ..                                  D        0  Thu Jun  8 09:26:38 2017
  test.png                            A       35  Thu Jun  8 13:22:09 2017</p>

<pre><code>    18307072 blocks of size 1024. 13091480 blocks available
</code></pre>

<p>```</p>

<p>From a Windows system, you can run <code>\192.168.217.131\sharename</code> to connect to the share, or use the <em>net use</em> command.</p>

<p>View shares:</p>

<p>```
C:\Documents and Settings\admin>net use
New connections will be remembered.</p>

<p>Status       Local     Remote                    Network</p>

<hr />

<p>OK                     \192.168.217.131\sharename</p>

<pre><code>                                             Microsoft Windows Network
</code></pre>

<p>The command completed successfully.
```</p>

<p>Connect to shares:</p>

<p>```
C:\Documents and Settings\admin>net use S: \192.168.217.131\sharename
The command completed successfully.</p>

<p>C:\Documents and Settings\admin>s:</p>

<p>S:>dir
 Volume in drive S is sharename
 Volume Serial Number is DCCC-194F</p>

<p> Directory of S:\</p>

<p>06/09/2017  02:24 AM    <DIR>          .
06/08/2017  10:26 PM    <DIR>          ..
06/09/2017  02:22 AM                35 test.png</p>

<pre><code>           1 File(s)             35 bytes
           2 Dir(s)  13,405,708,288 bytes free
</code></pre>

<p>```</p>

<h3>Other useful options</h3>

<p>You can drill down into the smb.conf file and customize it to your liking. Here are a few options:</p>

<ul>
<li><p>read list = user1, user2 &ndash; set read only users on a writable share</p></li>
<li><p>write list = user1, user2 &ndash; set write access for users on a read only share</p></li>
<li><p>deny hosts  = ip &ndash; deny access to the specified IPs</p></li>
<li><p>hide unreadable = yes &ndash; don&rsquo;t let users see files they don&rsquo;t have access to</p></li>
<li><p>browseable = no &ndash; hide shares from Windows network</p></li>
</ul>


<p>Key takeaways:</p>

<ul>
<li><p>server and share security levels are deprecated, so best to avoid them</p></li>
<li><p>specifying a share in the smb.conf file is not enough. Ensure that you have created the path and gave it sufficient permissins</p></li>
<li><p>Samba users need to already exist on the system</p></li>
<li><p>you can have both a well documented config file and a minimal size one for performance, by using <code>testparm -s</code></p></li>
<li><p>if you use SELinux, don&rsquo;t forget to label your share with <code>samba_share_t</code></p></li>
</ul>


<p>Learn more:</p>

<ul>
<li><p><a href="http://linux-training.be/linuxsrv.pdf">Samba section in Paul Cobbaut&rsquo;s Linux Servers course</a></p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/smb.conf.5.html">smb.conf manpage</a> &ndash; The configuration file for the Samba suite</p></li>
<li><p><a href="https://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-samba.html">CentOS Samba guide</a></p></li>
<li><p><a href="smbpasswd%20-%20The%20Samba%20encrypted%20password%20file">smbpasswd man page</a> &ndash; The Samba encrypted password file</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages/pdbedit.8.html">pdbedit manpage</a> &ndash; manage the SAM database (Database of Samba Users)</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/testparm.1.html">testparm manpage</a> &ndash; check an smb.conf configuration file for internal correctness</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/smbclient.1.html">smbclient manpage</a> &ndash; ftp-like client to access SMB/CIFS resources on servers</p></li>
</ul>


<p>```
/ Nothing so needs reforming as other \
| people&rsquo;s habits.                    |
|                                     |
\ &mdash; Mark Twain                       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iptables firewall]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/23/iptables-firewall/"/>
    <updated>2017-05-23T12:27:45-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/23/iptables-firewall</id>
    <content type="html"><![CDATA[<p>iptables is a CLI tool for configuring firewall functionality in Linux. It operates on a series of tables, which on a CentOS 7 system are:</p>

<!-- more -->


<ul>
<li><p><strong>filter</strong> &ndash; the default table used for packet filtering</p></li>
<li><p><strong>nat</strong> &ndash; for nat</p></li>
<li><p><strong>mangle</strong> &ndash; specialized packet alteration</p></li>
<li><p><strong>raw</strong> &ndash; used mainly for configuring connection exemptions</p></li>
<li><p><strong>security</strong> &ndash; Mandatory Access Control networking rules</p></li>
</ul>


<p>For the purpose of this post, we will be focusing on the filter table, which uses sets of rules to send (or not) packets on their merry way. These rules are called chains and they are as follows:</p>

<ul>
<li><p>INPUT &ndash; incoming connections</p></li>
<li><p>OUTPUT &ndash; outbound connections</p></li>
<li><p>FORWARD &ndash; packets being forwarded through the system</p></li>
</ul>


<p>Let&rsquo;s see the currently configured rules:</p>

<p><code>plain
iptables -t filter -L | grep policy
Chain INPUT (policy ACCEPT)
Chain FORWARD (policy ACCEPT)
Chain OUTPUT (policy ACCEPT)
</code></p>

<p>Well, everything is set to ACCEPT. The opposite of accepting connections is DROP, where the packets are silently dropped. Let&rsquo;s see it in action. First, change the policy to drop the packets: <code>iptables -P INPUT DROP</code>. Then try to ping the machine:</p>

<p>``` plain
ping 192.168.217.131</p>

<p>Pinging 192.168.217.131 with 32 bytes of data:
Request timed out.
Request timed out.
Request timed out.
Request timed out.</p>

<p>Ping statistics for 192.168.217.131:</p>

<pre><code>Packets: Sent = 4, Received = 0, Lost = 4 (100% loss),
</code></pre>

<p>```</p>

<p>It is possible to also use the REJECT extension,  where packets are being dropped but the source host receives an error, thereby being notified that there may be filtering in place: <code>iptables -I INPUT -j REJECT</code>. Here the REJECT was inserted at the beginning of the INPUT chain, to ensure that it will be matched before anything else:</p>

<p>``` plain
ping 192.168.217.131</p>

<p>Pinging 192.168.217.131 with 32 bytes of data:
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.</p>

<p>Ping statistics for 192.168.217.131:</p>

<pre><code>Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
</code></pre>

<p>```</p>

<p>Some example scenarios:</p>

<h3>only allow SSH connections from specific IP</h3>

<p>Let&rsquo;s assume that a computer has to be locked down, and only accept SSH connections from a certain IP:</p>

<p><code>plain
iptables -I INPUT -p tcp --dport 22 -s 192.168.217.137 -j ACCEPT
</code></p>

<p>With a policy of dropping packets, running the above will allow TCP connections for port 22, from the 192.168.217.137 source address, while still denying everything else.</p>

<h3>traffic forwarding</h3>

<p>Next, we have a machine with the IP 192.168.217.131 that we want to use to forward traffic to 192.168.217.137. How would we accomplish that?</p>

<p>First, we enable forwarding in the forwarding machine&rsquo;s kernel by putting a 1 inside <code>/proc/sys/net/ipv4/ip_forward</code>. On the .137 machine, I have a netcat listener on port 8000. On the .131 box, I also have netcat listening on port 4444. All connections coming to port 4444 on this machine will be routed to port 8000 on .137. The iptables rules to make that happen are:</p>

<ul>
<li><p><code>iptables -t nat -A PREROUTING -p tcp &mdash;dport 4444 -j DNAT &mdash;to-destination 192.168.217.137:8000</code> &ndash; we operate on the nat table. PREROUTING is used for altering packets as soon as they  come  in. We append a rule to this chain, stating that for TCP packets coming to port 4444 on this host, the destination IP will be changed to 192.168.217.137, on port 8000</p></li>
<li><p><code>iptables -t nat -A POSTROUTING -j MASQUERADE</code> &ndash; next we append to the POSTROUTING chain, that alters packets as they are about to go out, telling iptables to masquerate packets: replacing the IP of the sender to the IP of the forwarding machine</p></li>
</ul>


<p>Now I connect to port 4444 on 192.168.217.131 and send some random text, and checking my 192.168.217.137 listener, I see the traffic:</p>

<p><code>plain
c -vnlp 8000
listening on [any] 8000 ...
connect to [192.168.217.137] from (UNKNOWN) [192.168.217.131] 1859
dasa
knock kncok
</code></p>

<h3>list rules of a table</h3>

<ul>
<li><code>iptables -L -n -v</code> &ndash; display the rules of the default filter table, also printing the number of packets and bytes processed by each chain, and use numerical format for ports and addresses</li>
</ul>


<p>``` plain
Chain INPUT (policy ACCEPT 172 packets, 21210 bytes)
 pkts bytes target     prot opt in     out     source               destination</p>

<p>Chain FORWARD (policy ACCEPT 37 packets, 1523 bytes)
 pkts bytes target     prot opt in     out     source               destination</p>

<p>Chain OUTPUT (policy ACCEPT 82 packets, 6554 bytes)
 pkts bytes target     prot opt in     out     source               destination <br/>
```</p>

<h3>flush all the rules</h3>

<ul>
<li><code>iptables -F</code> &ndash; delete your rules and start anew</li>
</ul>


<h3>save rules to survive reboots</h3>

<p><code>plain
service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]
</code></p>

<h3>block specific IP</h3>

<ul>
<li><code>iptables -A INPUT -s 192.168.217.137 -j DROP</code> &ndash; packets from .137 will be dropped</li>
</ul>


<h3>block outgoing connections to a host or range</h3>

<p>Let&rsquo;s imagine that you are tired of your users spending all their day on Twitter. First, find out Twitter&rsquo;s IPs:</p>

<p><code>plain
host twitter.com
twitter.com has address 104.244.42.65
twitter.com has address 104.244.42.1
twitter.com mail is handled by 20 alt1.aspmx.l.google.com.
twitter.com mail is handled by 30 aspmx2.googlemail.com.
twitter.com mail is handled by 20 alt2.aspmx.l.google.com.
twitter.com mail is handled by 10 aspmx.l.google.com.
twitter.com mail is handled by 30 aspmx3.googlemail.com.
</code></p>

<p>Next, do a whois lookup on the IP, looking for the CIDR range it belongs to:</p>

<p><code>plain
hois 104.244.42.65 | grep CIDR
CIDR:           104.244.40.0/21
</code></p>

<p>Block access to Twitter&rsquo;s IP range: <code>iptables -A OUTPUT -p tcp -d 66.220.144.0/20 -j DROP</code></p>

<h3>log dropped packets</h3>

<ul>
<li><code>iptables -A INPUT -i eth0 -j LOG &mdash;log-prefix &ldquo;Packets dropped by firewall:&rdquo;</code> &ndash; turn on kernel logging for matching packets and prefix the log messages with some text to make them stand out</li>
</ul>


<p><code>plain
root@pwnbox:~#grep "Packets dropped by firewall:" /var/log/messages
May 23 12:11:34 pwnbox kernel: [ 3285.154203] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=288 TOS=0x00 PREC=0x00 TTL=128 ID=20858 PROTO=UDP SPT=53 DPT=57477 LEN=268
May 23 12:11:34 pwnbox kernel: [ 3285.158231] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=356 TOS=0x00 PREC=0x00 TTL=128 ID=20859 PROTO=UDP SPT=53 DPT=36464 LEN=336
May 23 12:11:34 pwnbox kernel: [ 3285.162645] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=360 TOS=0x00 PREC=0x00 TTL=128 ID=20860 PROTO=UDP SPT=53 DPT=47777 LEN=340
...
</code></p>

<p>This post only scratched the tip of the iceberg when it comes to Linux firewalls. The key takeaway should be that iptables is a very powerful utility that can be customized to meet your specific networking needs.</p>

<p>``` plain</p>

<hr />

<p>&lt; You will wish you hadn&rsquo;t. ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DHCP server on CentOS]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/13/dhcp-server-on-centos/"/>
    <updated>2017-04-13T13:59:25-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/13/dhcp-server-on-centos</id>
    <content type="html"><![CDATA[<p>In this post I will continue the series on configuring various servers on the CentOS 7 distribution. Let&rsquo;s see how we can get a DHCP server up and running!</p>

<!-- more -->


<h2>Installing DHCP server</h2>

<p>First, we need to intall the server component, which can be done with the <code>yum install dhcp</code> command:</p>

<h1>``` plain</h1>

<h1> Package                       Arch                            Version                                           Repository                     Size</h1>

<p>Installing:
 dhcp                          x86_64                          12:4.2.5-47.el7.centos                            base                          511 k</p>

<h1>Transaction Summary</h1>

<p>Install  1 Package</p>

<p>Total download size: 511 k
Installed size: 1.4 M
Is this ok [y/d/N]: y
Downloading packages:
dhcp-4.2.5-47.el7.centos.x86_64.rpm                                                                                           | 511 kB  00:00:00   <br/>
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : 12:dhcp-4.2.5-47.el7.centos.x86_64                                                                                                1/1
  Verifying  : 12:dhcp-4.2.5-47.el7.centos.x86_64                                                                                                1/1</p>

<p>Installed:
  dhcp.x86_64 12:4.2.5-47.el7.centos</p>

<p>Complete!
```</p>

<p>We now have a <code>/etc/dhcp/dhcpd.conf</code> file for configuring the server. There isn&rsquo;t much in it to start with, except pointers to the <code>dhcpd.conf</code> man page and a sample config file in <code>/usr/share/doc/dhcp*/dhcpd.conf.example</code>:</p>

<p>``` plain</p>

<h1>dhcpd.conf</h1>

<p>#</p>

<h1>Sample configuration file for ISC dhcpd</h1>

<p>#</p>

<h1>option definitions common to all supported networks&hellip;</h1>

<p>option domain-name &ldquo;example.org&rdquo;;
option domain-name-servers ns1.example.org, ns2.example.org;</p>

<p>default-lease-time 600;
max-lease-time 7200;</p>

<h1>Use this to enble / disable dynamic dns updates globally.</h1>

<h1>ddns-update-style none;</h1>

<h1>If this DHCP server is the official DHCP server for the local</h1>

<h1>network, the authoritative directive should be uncommented.</h1>

<h1>authoritative;</h1>

<h1>Use this to send dhcp log messages to a different log file (you also</h1>

<h1>have to hack syslog.conf to complete the redirection).</h1>

<p>log-facility local7;</p>

<h1>No service will be given on this subnet, but declaring it helps the</h1>

<h1>DHCP server to understand the network topology.</h1>

<p>subnet 10.152.187.0 netmask 255.255.255.0 {
}</p>

<h1>This is a very basic subnet declaration.</h1>

<p>subnet 10.254.239.0 netmask 255.255.255.224 {
  range 10.254.239.10 10.254.239.20;
  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
}</p>

<h1>This declaration allows BOOTP clients to get dynamic addresses,</h1>

<h1>which we don&rsquo;t really recommend.</h1>

<p>subnet 10.254.239.32 netmask 255.255.255.224 {
  range dynamic-bootp 10.254.239.40 10.254.239.60;
  option broadcast-address 10.254.239.31;
  option routers rtr-239-32-1.example.org;
}</p>

<h1>A slightly different configuration for an internal subnet.</h1>

<p>subnet 10.5.5.0 netmask 255.255.255.224 {
  range 10.5.5.26 10.5.5.30;
  option domain-name-servers ns1.internal.example.org;
  option domain-name &ldquo;internal.example.org&rdquo;;
  option routers 10.5.5.1;
  option broadcast-address 10.5.5.31;
  default-lease-time 600;
  max-lease-time 7200;
}</p>

<h1>Hosts which require special configuration options can be listed in</h1>

<h1>host statements.   If no address is specified, the address will be</h1>

<h1>allocated dynamically (if possible), but the host-specific information</h1>

<h1>will still come from the host declaration.</h1>

<p>host passacaglia {
  hardware ethernet 0:0:c0:5d:bd:95;
  filename &ldquo;vmunix.passacaglia&rdquo;;
  server-name &ldquo;toccata.fugue.com&rdquo;;
}</p>

<h1>Fixed IP addresses can also be specified for hosts.   These addresses</h1>

<h1>should not also be listed as being available for dynamic assignment.</h1>

<h1>Hosts for which fixed IP addresses have been specified can boot using</h1>

<h1>BOOTP or DHCP.   Hosts for which no fixed address is specified can only</h1>

<h1>be booted with DHCP, unless there is an address range on the subnet</h1>

<h1>to which a BOOTP client is connected which has the dynamic-bootp flag</h1>

<h1>set.</h1>

<p>host fantasia {
  hardware ethernet 08:00:07:26:c0:a5;
  fixed-address fantasia.fugue.com;
}</p>

<h1>You can declare a class of clients and then do address allocation</h1>

<h1>based on that.   The example below shows a case where all clients</h1>

<h1>in a certain class get addresses on the 10.17.224/24 subnet, and all</h1>

<h1>other clients get addresses on the 10.0.29/24 subnet.</h1>

<p>class &ldquo;foo&rdquo; {
  match if substring (option vendor-class-identifier, 0, 4) = &ldquo;SUNW&rdquo;;
}</p>

<p>shared-network 224-29 {
  subnet 10.17.224.0 netmask 255.255.255.0 {</p>

<pre><code>option routers rtr-224.example.org;
</code></pre>

<p>  }
  subnet 10.0.29.0 netmask 255.255.255.0 {</p>

<pre><code>option routers rtr-29.example.org;
</code></pre>

<p>  }
  pool {</p>

<pre><code>allow members of "foo";
range 10.17.224.10 10.17.224.250;
</code></pre>

<p>  }
  pool {</p>

<pre><code>deny members of "foo";
range 10.0.29.10 10.0.29.230;
</code></pre>

<p>  }
}
```</p>

<p>This is how the config file looks like. We&rsquo;ll use this example as a basis for making our own. Copy the example file and name it <strong>dhcpd.conf</strong> file:</p>

<p><code>plain
cp /usr/share/doc/dhcp*/dhcpd.conf.example /etc/dhcp/dhcpd.conf
</code></p>

<p>Now edit it and make changes according to your network:</p>

<p>``` plain</p>

<h1>option definitions common to all supported networks&hellip;</h1>

<p>option domain-name &ldquo;localdomain.com&rdquo;;</p>

<h1>DNS server address &ndash; look in your /etc/resolv.conf</h1>

<p>option domain-name-servers 192.168.217.2;</p>

<p>default-lease-time 600;
max-lease-time 7200;</p>

<h1>declare your subnet config</h1>

<p>subnet 192.168.217.0 netmask 255.255.255.0 {
  # range of IPs to serve
  range 192.168.217.10 192.168.217.20;
  # the address of the routers &ndash; look for the gateway address in the route -n # command (entry containing UG)
  option routers 192.168.217.2;
}</p>

<p>host kaliclient {
hardware ethernet 00:0c:29:22:f9:ae;
fixed-address 192.168.217.12;
}
```</p>

<p>Here I declared the subnet for which the server would handle addresses, and I reserved an IP address for a client. For more options, you can look at the <code>dhcpd-options</code> man page.</p>

<p>Time to start the server. First, verify that the <code>/var/lib/dhcpd/dhcpd.leases</code> file exists, otherwise you will need to create an empty one before starting the server with the command <code>systemctl start dhcpd</code>. I changed my VMs connection settings to host-only, and then looked at the new IP configuration:</p>

<p>``` plain</p>

<h1>ifconfig on the host running the DHCP server</h1>

<p>inet 192.168.217.10  netmask 255.255.255.0  broadcast 192.168.217.255</p>

<h1>ifconfig on the kali client</h1>

<p>inet 192.168.217.12  netmask 255.255.255.0  broadcast 192.168.217.255
```</p>

<p>Success! Our DHCP server kicked in and gave addresses to 2 machines on the network!</p>

<p>``` plain
/ F.S. Fitzgerald to Hemingway:        \
|                                      |
| &ldquo;Ernest, the rich are different from |
| us.&rdquo; Hemingway:                      |
|                                      |
\ &ldquo;Yes. They have more money.&rdquo;         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up MySQL and PHP on Apache]]></title>
    <link href="http://chousensha.github.io/blog/2017/02/25/setting-up-mysql-and-php-on-apache/"/>
    <updated>2017-02-25T03:58:37-05:00</updated>
    <id>http://chousensha.github.io/blog/2017/02/25/setting-up-mysql-and-php-on-apache</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since my last post, but a full time job + the Cisco Cybersecurity scholarship are really eating into my time. But I will try to sneak a post here and there, whenever I can!</p>

<p>In a <a href="http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache/">previous post</a>, I made a tutorial about setting up Apache on CentOS. The next step is to fire a MySQL server and put some databases on that web server!</p>

<!-- more -->


<h2>Installing MySQL server</h2>

<p>First, we need to visit the <a href="https://dev.mysql.com/downloads/repo/yum/">MySQL community repository</a> to download the server package:</p>

<p>``` plain
wget <a href="https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm">https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm</a>
&mdash;2017-01-19 10:06:02&mdash;  <a href="https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm">https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm</a>
Resolving repo.mysql.com (repo.mysql.com)&hellip; 104.87.9.47
Connecting to repo.mysql.com (repo.mysql.com)|104.87.9.47|:443&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 9224 (9.0K) [application/x-redhat-package-manager]
Saving to: ‘mysql57-community-release-el7-9.noarch.rpm’</p>

<p>100%[===========================================================================================================>] 9,224       &mdash;.-K/s   in 0s</p>

<p>2017-01-19 10:06:02 (137 MB/s) &ndash; ‘mysql57-community-release-el7-9.noarch.rpm’ saved [9224/9224]
```</p>

<p>Next we install the package:</p>

<p><code>plain
rpm -ivh mysql57-community-release-el7-9.noarch.rpm
warning: mysql57-community-release-el7-9.noarch.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:mysql57-community-release-el7-9  ################################# [100%]
</code></p>

<p>After running <code>yum update</code> and waiting for a while, you can install MySQL server from the newly added repository with <code>yum install mysql-server</code>.</p>

<p>After the installation, a new user has been created in <code>/etc/passwd</code>, and a group in <code>/etc/group</code>:</p>

<p>``` plain
cat /etc/passwd | grep mysql
mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false</p>

<p>cat /etc/group | grep mysql
mysql:x:27:
```</p>

<h2>Configuration</h2>

<p>Next, start the service with <code>systemctl start mysqld</code>. The next step is to run the <code>mysql_secure_installation</code> binary to make some security configurations to your server, but for that you need the temporary root password that was generated during installation:</p>

<p><code>plain
grep 'password' /var/log/mysqld.log
2017-01-19T08:53:45.638708Z 1 [Note] A temporary password is generated for root@localhost: hoPAejdrk6_a
</code></p>

<p>After running <code>mysql_secure_installation</code>, you will be asked to change the root password in accordance with a policy that requires 12 characters, with a mix of uppercase, lowercase, numbers and special characters. Then you will be prompted to answer some questions regarding the removal of anonymous users, test databases, and disallowing remote root login.</p>

<p>To access your MySQL instance via the command line, log in as root and give your password:</p>

<p>``` plain
mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 16
Server version: 5.7.17 MySQL Community Server (GPL)</p>

<p>Copyright &copy; 2000, 2016, Oracle and/or its affiliates. All rights reserved.</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>mysql>
```</p>

<p>Let&rsquo;s look at what databases are available:</p>

<p><code>plain
show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)
</code></p>

<p>I created a new database to play with:</p>

<p><code>plain
mysql&gt; create database vip;
Query OK, 1 row affected (0.00 sec)
</code></p>

<p>Now change the current DB to point the one you created:</p>

<p><code>plain
mysql&gt; use vip;
Database changed
</code></p>

<h3>Backup and restoration</h3>

<p>Before throwing some data into it, let&rsquo;s first see how to back up data and restore it. For this, we have the <strong>mysqldump</strong> utility. To make a backup of my newly created DB, I typed: <code>mysqldump -u root -p vip > backup.sql</code>.</p>

<p>Then I deleted the DB with the <code>drop database vip;</code> command. For some reason though, I could not restore the DB without first creating a DB with the same name. The restore command is <code>mysql -u root -p vip &lt; backup.sql</code>.</p>

<h3>Adding data to DB</h3>

<p>The database is all well and good, but we need to put a table in there!</p>

<p><code>sql
create table users (
name VARCHAR(10)
);
</code></p>

<p>I made a <em>users</em> table with one column for the <em>name</em>. Let&rsquo;s confirm this:</p>

<p><code>plain
mysql&gt; show tables;
+---------------+
| Tables_in_vip |
+---------------+
| users         |
+---------------+
1 row in set (0.00 sec)
</code></p>

<p>Next, I made some users:</p>

<p>``` plain
mysql> insert into users values (&lsquo;root&rsquo;);
Query OK, 1 row affected (0.04 sec)</p>

<p>mysql> insert into users values (&lsquo;guest&rsquo;);
Query OK, 1 row affected (0.00 sec)</p>

<p>mysql> select * from users;
+&mdash;&mdash;&mdash;&ndash;+
| name  |
+&mdash;&mdash;&mdash;&ndash;+
| root  |
| guest |
+&mdash;&mdash;&mdash;&ndash;+
2 rows in set (0.00 sec)
```</p>

<p>Let&rsquo;s see the DB in action by integrating it with some PHP!</p>

<h2>Installing PHP</h2>

<p>Installing PHP on CentOS can be done with the following command: <code>yum install php php-mysql</code></p>

<p>The next step is to write some PHP code to connect to the DB. But this is not Debian, so nothing just works! There is the pesky SELinux to take into account, and it&rsquo;s not letting Apache to reach the MySQL DB. Use <strong>getsebool</strong> to see the boolean values for the web server:</p>

<p><code>plain
getsebool -a | grep httpd
httpd_anon_write --&gt; off
httpd_builtin_scripting --&gt; on
httpd_can_check_spam --&gt; off
httpd_can_connect_ftp --&gt; off
httpd_can_connect_ldap --&gt; off
httpd_can_connect_mythtv --&gt; off
httpd_can_connect_zabbix --&gt; off
httpd_can_network_connect --&gt; off
httpd_can_network_connect_cobbler --&gt; off
httpd_can_network_connect_db --&gt; off
httpd_can_network_memcache --&gt; off
httpd_can_network_relay --&gt; off
httpd_can_sendmail --&gt; off
httpd_dbus_avahi --&gt; off
httpd_dbus_sssd --&gt; off
httpd_dontaudit_search_dirs --&gt; off
httpd_enable_cgi --&gt; on
httpd_enable_ftp_server --&gt; off
httpd_enable_homedirs --&gt; off
httpd_execmem --&gt; off
httpd_graceful_shutdown --&gt; on
httpd_manage_ipa --&gt; off
httpd_mod_auth_ntlm_winbind --&gt; off
httpd_mod_auth_pam --&gt; off
httpd_read_user_content --&gt; off
httpd_run_ipa --&gt; off
httpd_run_preupgrade --&gt; off
httpd_run_stickshift --&gt; off
httpd_serve_cobbler_files --&gt; off
httpd_setrlimit --&gt; off
httpd_ssi_exec --&gt; off
httpd_sys_script_anon_write --&gt; off
httpd_tmp_exec --&gt; off
httpd_tty_comm --&gt; off
httpd_unified --&gt; off
httpd_use_cifs --&gt; off
httpd_use_fusefs --&gt; off
httpd_use_gpg --&gt; off
httpd_use_nfs --&gt; off
httpd_use_openstack --&gt; off
httpd_use_sasl --&gt; off
httpd_verify_dns --&gt; off
</code></p>

<p>As you can see, by default Apache is very limited in what it can do. Let&rsquo;s change that and allow it to connect to the DB server, and make the change persist across reboots:</p>

<p><code>plain
setsebool -P httpd_can_network_connect_db 1
</code></p>

<p>If you check again, you will see that the <code>httpd_can_network_connect_db</code> boolean is now set to on. I&rsquo;ve used the code from the <a href="http://php.net/manual/en/function.mysqli-connect.php">PHP mysqli_connect() documentation</a> to check the connection status, and finally, it went from failure to success.</p>

<p>``` php</p>

<p>&lt;?php
$link = mysqli_connect(&ldquo;127.0.0.1&rdquo;, &ldquo;my_user&rdquo;, &ldquo;my_password&rdquo;, &ldquo;my_db&rdquo;);</p>

<p>if (!$link) {</p>

<pre><code>echo "Error: Unable to connect to MySQL." . PHP_EOL;
echo "Debugging errno: " . mysqli_connect_errno() . PHP_EOL;
echo "Debugging error: " . mysqli_connect_error() . PHP_EOL;
exit;
</code></pre>

<p>}</p>

<p>echo &ldquo;Success: A proper connection to MySQL was made! The my_db database is great.&rdquo; . PHP_EOL;
echo &ldquo;Host information: &rdquo; . mysqli_get_host_info($link) . PHP_EOL;</p>

<p>mysqli_close($link);
?>
```</p>

<p>Next, I made a really basic, vulnerable page just to see if things are working. I placed the following PHP file in my web server directory:</p>

<p>``` php</p>

<p><html></p>

<p><form action="reallyproform.php" method="post">
   <p>Enter a name in this box to see if you know anyone in the VIP area: <input type="text" name="username" /></p>
   <input type="submit" name="submit" value="Submit" />
</form></p>

<p></body></p>

<p></html></p>

<p>&lt;?php
$link = mysqli_connect(&ldquo;127.0.0.1&rdquo;, &ldquo;username&rdquo;, &ldquo;password&rdquo;, &ldquo;database name&rdquo;);</p>

<p>$username = $_POST[&lsquo;username&rsquo;];</p>

<p>$query = &ldquo;SELECT * FROM users WHERE name = &lsquo;&rdquo;.$username.&ldquo;&rsquo;&rdquo;;
$result = mysqli_query($link,$query);</p>

<p>if(mysqli_num_rows($result)>=1)</p>

<pre><code>       {
        echo"Yes you are. Proceed";
       }
</code></pre>

<p>else
{
echo &ldquo;Are you sure you&rsquo;re supposed to be here?&rdquo;;
}</p>

<p>mysqli_close($link);
?></p>

<p>```</p>

<p><img class="center" src="/images/sysadmin/page.png" title="&lsquo;Sample PHP page&rsquo; &lsquo;PHP form&rsquo;" ></p>

<p>If you enter a valid username, you will just get a message, but this was just an example to show a working connection between the PHP code hosted on the server and the MySQL database.</p>

<h3>phpMyAdmin setup</h3>

<p>Chances are, you won&rsquo;t feel an urge to always interact with your DB via the command line. The last step in this post is to install and configure phpMyAdmin in order to do all the SQL operations from a web interface.</p>

<p>First, install it with the following command:</p>

<p><code>plain
yum install phpmyadmin
</code></p>

<p>Restart Apache and go to <a href="http://127.0.0.1/phpmyadmin">http://127.0.0.1/phpmyadmin</a> to see your new phpMyAdmin interface.</p>

<p>``` plain
/ You plan things that you do not even \
| attempt because of your extreme      |
\ caution.                             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Apache]]></title>
    <link href="http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache/"/>
    <updated>2016-08-05T07:26:16-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache</id>
    <content type="html"><![CDATA[<p>In this post I will go over the installation and configuration of an Apache web server on CentOS.</p>

<!-- more -->


<h1>Installation</h1>

<p>First, let&rsquo;s verify whether Apache is already installed. Note that on CentOS, the package (and process name) for Apache is called <strong>httpd</strong>.</p>

<p><code>plain
rpm -q httpd
package httpd is not installed
ls -l /var/www
ls: cannot access /var/www: No such file or directory
</code></p>

<p>Apache is not installed, so let&rsquo;s install it with <code>yum install httpd</code>. Now verify that it has been installed:</p>

<p><code>plain
rpm -q httpd
httpd-2.4.6-40.el7.centos.4.x86_64
ls -l /var/www
total 0
drwxr-xr-x. 2 root root 6 Jul 18 18:30 cgi-bin
drwxr-xr-x. 2 root root 6 Jul 18 18:30 html
</code></p>

<p>Remember that the directory for Apache configuration is <code>/etc/httpd</code>:</p>

<p><code>plain
[root@localhost ~]# ls /etc/httpd
conf  conf.d  conf.modules.d  logs  modules  run
</code></p>

<p>And the Apache configuration file is <code>/etc/httpd/conf/httpd.conf</code>. I included a snapshot of a fresh config file at the end of this post.</p>

<h1>Configuration</h1>

<p>Now we can start Apache and check that it is running with the <strong>apachectl</strong> command, that provides a front-end control interface for the httpd daemon. For reference, the man page for this utility is at the end of the post.</p>

<p>To start the web server, type <code>apachectl start</code> (alternatively, you can do it with <code>service httpd start</code>, and can use the httpd daemon directly to pass arguments, etc. At the end I&rsquo;ve also included the httpd man page.</p>

<p>If you&rsquo;re getting a message like &ldquo;Could not reliably determine the server&rsquo;s fully qualified domain name&rdquo;, you can modify the ServerName in the configuration file and then restart the server. After making changes to the config file, it&rsquo;s also a good idea to check if there are any errors in it:</p>

<p><code>plain
[root@freehat ~]# apachectl configtest
Syntax OK
</code></p>

<p>Now, let&rsquo;s check the status of the server:</p>

<p>``` plain
[root@localhost ~]# apachectl status
* httpd.service &ndash; The Apache HTTP Server
   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)
   Active: active (running) since Tue 2016-08-02 15:53:53 EEST; 1min 42s ago</p>

<pre><code> Docs: man:httpd(8)
       man:apachectl(8)
</code></pre>

<p> Main PID: 5941 (httpd)
   Status: &ldquo;Total requests: 0; Current requests/sec: 0; Current traffic:   0 B/sec&rdquo;
[snip]
```</p>

<p>Also, if you want Apache to start on boot, you need to specify it:</p>

<p><code>plain
chkconfig httpd on
Note: Forwarding request to 'systemctl enable httpd.service'.
Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.
</code></p>

<p>If you need to troubleshoot your Apache, you can consult the error log at <code>/var/log/httpd/error_log</code>.</p>

<h2>Site setup</h2>

<p>To add an index for your site, create an <em>index.html</em> file inside <code>/var/www/html/</code>. This is what you&rsquo;ll see when visiting your site.</p>

<p><code>plain
[root@localhost ~]# echo 'Hello interwebz!' &gt; /var/www/html/index.html
</code></p>

<p>When you navigate to your website, this page will be what you&rsquo;ll see. On other distributions, a default index.html may be present in the website root (identified by the DocumentRoot directive).</p>

<h3>Virtual hosts</h3>

<p>Virtual hosts allow you to run multiple websites on a single server. Let&rsquo;s see some examples of how we can do that.</p>

<h4>Port-based vhosts</h4>

<p>One option is to <strong>put each website on a different port</strong>. In addition to our main website on port 80, let&rsquo;s serve a different one on port 8080.</p>

<p>First, add a new Listen directive in <code>/etc/httpd/conf/httpd.conf</code>, to tell Apache to also listen on port 8080:</p>

<p><code>plain
Listen 80
Listen 8080
</code></p>

<p>We could add virtual hosts in the main configuration file, but if you plan to serve many websites, better to create separate configuration files for each virtual host. Check that the line telling Apache to load other config files is uncommented:</p>

<p>``` plain</p>

<h1>Load config files in the &ldquo;/etc/httpd/conf.d&rdquo; directory, if any.</h1>

<p>IncludeOptional conf.d/*.conf
```</p>

<p>Now, create a config file for a specific virtual host (it must end in .conf):</p>

<p>``` plain
[root@freehat ~]# nano /etc/httpd/conf.d/skynet.conf
[root@freehat ~]# cat /etc/httpd/conf.d/skynet.conf
<VirtualHost *:8080></p>

<pre><code>DocumentRoot "/var/www/html/skynet"
ServerName skynet.local
</code></pre>

<p></VirtualHost>
```</p>

<p>Next, create the necessary document root directory:</p>

<p><code>plain
[root@freehat ~]# mkdir /var/www/html/skynet
</code></p>

<p>Put some resource that you want to be server in the folder:</p>

<p><code>plain
[root@freehat ~]# echo 'You are marked for extermination' &gt;  /var/www/html/skynet/index.html
</code></p>

<p>The last step is to tell Apache to reload its configuration files with <code>service httpd reload</code>. However, now I ran into some SELinux alert. I looked in <code>/var/log/messages</code>:</p>

<p><code>plain
Aug  3 16:16:16 localhost setroubleshoot: SELinux is preventing /usr/sbin/httpd from name_connect access on the tcp_socket port 8080. For complete SELinux messages. run sealert -l bc571bd3-344f-4a4e-830a-ce744154d527
</code></p>

<p>I ran the mentioned command but was confused by my first brush with SELinux, so I did some google-fu which led me to <a href="https://www.certdepot.net/rhel7-use-selinux-port-labelling/">this post</a>. You can verify what ports are allowed by SELinux for HTTP traffic with the below command:</p>

<p><code>plain
[root@freehat ~]# semanage port -l | grep http
http_cache_port_t              tcp      8080, 8118, 8123, 10001-10010
http_cache_port_t              udp      3130
http_port_t                    tcp      80, 81, 443, 488, 8008, 8009, 8443, 9000
pegasus_http_port_t            tcp      5988
pegasus_https_port_t           tcp      5989
</code></p>

<p>To add port 8080 to http_port_t, I ran <code>semanage port -m -t http_port_t -p tcp 8080</code>, and then I checked it was added. Should be all good now. If you go visit your server on port 8080, you should get a friendly message. To differentiate it from the website on port 80, create another virtual host configuration for that respective server.</p>

<p>You can now access your sites from your own machine, but if you try navigating to them from another computer, it will be just like the websites don&rsquo;t exist! It turns out, iptables is blocking access, and you have to tell it to open the ports:</p>

<p><code>plain
[root@freehat sysconfig]# iptables -I INPUT -p tcp --dport 80 -j ACCEPT
[root@freehat sysconfig]# iptables -I INPUT -p tcp --dport 8080 -j ACCEPT
</code></p>

<p>And if you want these changes to survive a reboot, you should save them. I had to do some additional work for that. It turns out, <a href="https://stackoverflow.com/questions/24756240/how-can-i-use-iptables-on-centos-7">RHEL 7 and CentOS 7 use <em>firewalld</em></a> to manage iptables. So first I followed the instructions on StackOverflow to stop and mask the firewalld service:</p>

<p><code>plain
systemctl stop firewalld
[root@freehat ~]# systemctl mask firewalld
Created symlink from /etc/systemd/system/firewalld.service to /dev/null.
</code></p>

<p>Then I had to install <em>iptables-services</em>: <code>yum install iptables-services</code>. Next I enabled it at boot:</p>

<p><code>plain
systemctl enable iptables
Created symlink from /etc/systemd/system/basic.target.wants/iptables.service to /usr/lib/systemd/system/iptables.service.
</code></p>

<p>I also modified the &ldquo;no&rdquo; defaults in <code>/etc/sysconfig/iptables-config</code> to &ldquo;yes&rdquo;:</p>

<p>``` plain</p>

<h1>Save current firewall rules on stop.</h1>

<h1>Value: yes|no,  default: no</h1>

<h1>Saves all firewall rules to /etc/sysconfig/iptables if firewall gets stopped</h1>

<h1>(e.g. on system shutdown).</h1>

<p>IPTABLES_SAVE_ON_STOP=&ldquo;yes&rdquo;</p>

<h1>Save current firewall rules on restart.</h1>

<h1>Value: yes|no,  default: no</h1>

<h1>Saves all firewall rules to /etc/sysconfig/iptables if firewall gets</h1>

<h1>restarted.</h1>

<p>IPTABLES_SAVE_ON_RESTART=&ldquo;yes&rdquo;
```</p>

<p>Finally, I was able to save the changes and checked that they persisted after reboot:</p>

<p><code>plain
service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]
</code></p>

<h4>Name-based vhosts</h4>

<p>We&rsquo;ve seen the virtual hosts running on different ports, now let&rsquo;s see how we can <strong>serve them on the same port, but with different names</strong>. I modified one of the config files so that both sites will run on port 80.Let&rsquo;s see the current virtual host settings:</p>

<p>``` plain
httpd -S
VirtualHost configuration:
*:80                   is a NameVirtualHost</p>

<pre><code>     default server myweb.local (/etc/httpd/conf.d/myweb.conf:1)
     port 80 namevhost myweb.local (/etc/httpd/conf.d/myweb.conf:1)
     port 80 namevhost skynet.local (/etc/httpd/conf.d/skynet.conf:1)
</code></pre>

<p>ServerRoot: &ldquo;/etc/httpd&rdquo;
Main DocumentRoot: &ldquo;/var/www/html&rdquo;
Main ErrorLog: &ldquo;/etc/httpd/logs/error_log&rdquo;
[snip]
```</p>

<p>We will use the server names to navigate to those sites. Because I am testing locally with no DNS, I modified <code>/etc/hosts</code> and added these entries:</p>

<p><code>plain
192.168.80.153 myweb.local
192.168.80.153 skynet.local
</code></p>

<p>Now I was able to use the names of the sites in the web browser.</p>

<h3>Password protection</h3>

<p>It&rsquo;s time to restrict access to the skynet website! There are a number of ways that Apache can protect a resource with a password and ensure that is accessible only to certain users. In this example, I will want the skynet website to allow only a user called tx. First, I used the <em>htpasswd</em> utility to create a <em>.htpasswd</em> file (you can call it whatever you want), and placed it in <code>/etc/httpd</code>.</p>

<p><code>plain
htpasswd -c /etc/httpd/.htpasswd tx
New password:
Re-type new password:
Adding password for user tx
</code></p>

<p>This file holds the allowed user/password combination:</p>

<p><code>plain
cat /etc/httpd/.htpasswd
tx:$apr1$2FI77JZQ$IrMFnxvHzvtRhWGiQfvxL0
</code></p>

<p>The next step is to tell Apache to restrict access to a resource based on this file. If you have access to the main configuration file or the virtual host config file, the preferred way is to add a Directory directive there:</p>

<p>``` plain
nano /etc/httpd/conf.d/skynet.conf
<VirtualHost *:80></p>

<pre><code>DocumentRoot "/var/www/html/skynet"
ServerName skynet.local
&lt;Directory "/var/www/html/skynet"&gt;
    AuthType Basic
    AuthName "Authorized Only"
    AuthUserFile /etc/httpd/.htpasswd
    Require valid-user
&lt;/Directory&gt;
</code></pre>

<p></VirtualHost></p>

<p>```</p>

<p>The Directory specified is the one that will be password-protected. Next, we specify the type of authentication (basic in this case, so no super sensitive files should be stored there), the name which will be displayed on the prompt, the location where Apache can find the password file, and the allowed user(s). Maybe we&rsquo;ll want to add some terminators later, so instead of just specifying one user, I allowed any valid user/password combination from the password file.</p>

<p>Now if you try to go to the skynet website, you will see the window prompting for username and password.</p>

<p>Another way you can restrict directory access is via a <strong>.htaccess</strong> file. Due to performance and security reasons, you should avoid this, if possible.</p>

<p>First, create a .htaccess file in the directory you want to protect:</p>

<p><code>plain
nano /var/www/html/skynet/.htaccess
AuthType Basic
AuthName "Authorized Only"
AuthUserFile /etc/httpd/.htpasswd
Require valid-user
</code></p>

<p>For the .htaccess file to work, you need to edit the <code>/etc/httpd/conf/httpd.conf</code> file, and change the <a href="https://httpd.apache.org/docs/current/mod/core.html#allowoverride">AllowOverride directive</a> inside Directory. When set to None, as it is by default, .htaccess files are ignored. Change it to AuthConfig (I had to do it both under /var/www and /var/www/html).</p>

<h3>HTTPS with self-signed certificate</h3>

<p>In the next demo, I will encrypt the skynet website with SSL (removed all the authorization bits for demo purposes).</p>

<p>First, I installed <a href="https://httpd.apache.org/docs/current/mod/mod_ssl.html">mod_ssl</a> with <code>yum install mod_ssl</code>. Next, I created a directory for Apache to store its server key and certificate: <code>mkdir /etc/httpd/myssl</code></p>

<p>Inside this directory, I created a RSA private key of length 2048:</p>

<p><code>plain
[root@freehat myssl]# openssl genrsa -out https.key 2048
Generating RSA private key, 2048 bit long modulus
....................+++
..............+++
e is 65537 (0x10001)
</code></p>

<p>Then I created a Certificate Signing Request (CSR):</p>

<p>``` plain
[root@freehat myssl]# openssl req -new -key https.key -out server.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,</p>

<h2>If you enter &lsquo;.&rsquo;, the field will be left blank.</h2>

<p>Country Name (2 letter code) [XX]:
State or Province Name (full name) []:
Locality Name (eg, city) [Default City]:
Organization Name (eg, company) [Default Company Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server&rsquo;s hostname) []:
Email Address []:</p>

<p>Please enter the following &lsquo;extra&rsquo; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
```</p>

<p>Lastly, I generated an x509 certificate with a duration of an year:</p>

<p><code>plain
[root@freehat myssl]# openssl x509 -req -days 365 -in server.csr -signkey https.key -out mycert.crt
Signature ok
subject=/C=XX/L=Default City/O=Default Company Ltd
Getting Private key
</code></p>

<p>We&rsquo;re not done yet. Edit the file <code>/etc/httpd/conf.d/ssl.conf</code>, and comment the lines with the location of the server key and certificate, replacing them with new ones pointing at our previously created files:</p>

<p>``` plain</p>

<h1>SSLCertificateFile /etc/pki/tls/certs/localhost.crt</h1>

<p>SSLCertificateFile /etc/httpd/myssl/mycert.crt</p>

<h1>SSLCertificateKeyFile /etc/pki/tls/private/localhost.key</h1>

<p>SSLCertificateKeyFile /etc/httpd/myssl/https.key
```</p>

<p>Now restart the server and go to website (mine is at <a href="https://192.168.80.153/">https://192.168.80.153/</a> ). Your browser will warn you about the untrusted connection, add it to exceptions and now you have https on your site.</p>

<h3>Logging</h3>

<p>Lastly, let&rsquo;s go over Apache&rsquo;s logging system. There are 2 types of logs kept, error logs for when some error happens, and access logs, that provide information about incoming requests. By default, these logs are located at <code>/var/log/httpd/error_log</code> and <code>/var/log/httpd/access_log</code> on CentOS</p>

<p>For your sites, you can configure the logs and choose where to store them. I decided to separate the logs for my skynet website. I made a folder for them in /var/log/httpd/skynet-logs, and modified the skynet virtual host config file and added the path and format for the logs:</p>

<p><code>plain
CustomLog /var/log/httpd/skynet-logs/skynet-access.log combined
ErrorLog /var/log/httpd/skynet-logs/skynet-error.log
</code></p>

<p>I wanted the combined format instead of the common one, because it provides a bit more information, including also the User-agent and the Referer</p>

<p>Hopefully, this post has helped others in setting up an Apache web server. Since I&rsquo;ve installed it on CentOS 7, I also had to account for SELinux and some other differences from a Debian distro, so it&rsquo;s been a good learning experience.</p>

<p>If you want to become an Apache wizard, the <a href="https://httpd.apache.org/docs/2.4/">Apache 2.4 documentation</a> should be a good starting point.</p>

<p>``` plain</p>

<hr />

<p>/ Give thought to your reputation.       \
| Consider changing name and moving to a |
\ new town.                              /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>

<p><strong>Freshly installed httpd.conf file</strong></p>

<p>``` plain
#</p>

<h1>This is the main Apache HTTP server configuration file.  It contains the</h1>

<h1>configuration directives that give the server its instructions.</h1>

<h1>See &lt;URL:<a href="http://httpd.apache.org/docs/2.4/">http://httpd.apache.org/docs/2.4/</a>> for detailed information.</h1>

<h1>In particular, see</h1>

<h1>&lt;URL:<a href="http://httpd.apache.org/docs/2.4/mod/directives.html">http://httpd.apache.org/docs/2.4/mod/directives.html</a>></h1>

<h1>for a discussion of each configuration directive.</h1>

<p>#</p>

<h1>Do NOT simply read the instructions in here without understanding</h1>

<h1>what they do.  They&rsquo;re here only as hints or reminders.  If you are unsure</h1>

<h1>consult the online docs. You have been warned.</h1>

<p>#</p>

<h1>Configuration and logfile names: If the filenames you specify for many</h1>

<h1>of the server&rsquo;s control files begin with &ldquo;/&rdquo; (or &ldquo;drive:/&rdquo; for Win32), the</h1>

<h1>server will use that explicit path.  If the filenames do <em>not</em> begin</h1>

<h1>with &ldquo;/&rdquo;, the value of ServerRoot is prepended &mdash; so &lsquo;log/access_log&rsquo;</h1>

<h1>with ServerRoot set to &lsquo;/www&rsquo; will be interpreted by the</h1>

<h1>server as &lsquo;/www/log/access_log&rsquo;, where as &lsquo;/log/access_log&rsquo; will be</h1>

<h1>interpreted as &lsquo;/log/access_log&rsquo;.</h1>

<p>#</p>

<h1>ServerRoot: The top of the directory tree under which the server&rsquo;s</h1>

<h1>configuration, error, and log files are kept.</h1>

<p>#</p>

<h1>Do not add a slash at the end of the directory path.  If you point</h1>

<h1>ServerRoot at a non-local disk, be sure to specify a local disk on the</h1>

<h1>Mutex directive, if file-based mutexes are used.  If you wish to share the</h1>

<h1>same ServerRoot for multiple httpd daemons, you will need to change at</h1>

<h1>least PidFile.</h1>

<p>#
ServerRoot &ldquo;/etc/httpd&rdquo;</p>

<p>#</p>

<h1>Listen: Allows you to bind Apache to specific IP addresses and/or</h1>

<h1>ports, instead of the default. See also the <VirtualHost></h1>

<h1>directive.</h1>

<p>#</p>

<h1>Change this to Listen on specific IP addresses as shown below to</h1>

<h1>prevent Apache from glomming onto all bound IP addresses.</h1>

<p>#</p>

<h1>Listen 12.34.56.78:80</h1>

<p>Listen 80</p>

<p>#</p>

<h1>Dynamic Shared Object (DSO) Support</h1>

<p>#</p>

<h1>To be able to use the functionality of a module which was built as a DSO you</h1>

<h1>have to place corresponding `LoadModule' lines at this location so the</h1>

<h1>directives contained in it are actually available <em>before</em> they are used.</h1>

<h1>Statically compiled modules (those listed by `httpd -l') do not need</h1>

<h1>to be loaded here.</h1>

<p>#</p>

<h1>Example:</h1>

<h1>LoadModule foo_module modules/mod_foo.so</h1>

<p>#
Include conf.modules.d/*.conf</p>

<p>#</p>

<h1>If you wish httpd to run as a different user or group, you must run</h1>

<h1>httpd as root initially and it will switch.</h1>

<p>#</p>

<h1>User/Group: The name (or #number) of the user/group to run httpd as.</h1>

<h1>It is usually good practice to create a dedicated user and group for</h1>

<h1>running httpd, as with most system services.</h1>

<p>#
User apache
Group apache</p>

<h1>&lsquo;Main&rsquo; server configuration</h1>

<p>#</p>

<h1>The directives in this section set up the values used by the &lsquo;main&rsquo;</h1>

<h1>server, which responds to any requests that aren&rsquo;t handled by a</h1>

<h1><VirtualHost> definition.  These values also provide defaults for</h1>

<h1>any <VirtualHost> containers you may define later in the file.</h1>

<p>#</p>

<h1>All of these directives may appear inside <VirtualHost> containers,</h1>

<h1>in which case these default settings will be overridden for the</h1>

<h1>virtual host being defined.</h1>

<p>#</p>

<p>#</p>

<h1>ServerAdmin: Your address, where problems with the server should be</h1>

<h1>e-mailed.  This address appears on some server-generated pages, such</h1>

<h1>as error documents.  e.g. <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#97;&#100;&#109;&#105;&#x6e;&#x40;&#121;&#111;&#x75;&#114;&#x2d;&#100;&#111;&#x6d;&#x61;&#105;&#x6e;&#x2e;&#99;&#x6f;&#109;">&#97;&#x64;&#x6d;&#x69;&#110;&#x40;&#x79;&#x6f;&#117;&#114;&#x2d;&#100;&#x6f;&#109;&#x61;&#105;&#110;&#x2e;&#x63;&#111;&#x6d;</a></h1>

<p>#
ServerAdmin root@localhost</p>

<p>#</p>

<h1>ServerName gives the name and port that the server uses to identify itself.</h1>

<h1>This can often be determined automatically, but we recommend you specify</h1>

<h1>it explicitly to prevent problems during startup.</h1>

<p>#</p>

<h1>If your host doesn&rsquo;t have a registered DNS name, enter its IP address here.</h1>

<p>#</p>

<h1>ServerName www.example.com:80</h1>

<p>#</p>

<h1>Deny access to the entirety of your server&rsquo;s filesystem. You must</h1>

<h1>explicitly permit access to web content directories in other</h1>

<h1><Directory> blocks below.</h1>

<p>#
<Directory /></p>

<pre><code>AllowOverride none
Require all denied
</code></pre>

<p></Directory></p>

<p>#</p>

<h1>Note that from this point forward you must specifically allow</h1>

<h1>particular features to be enabled &ndash; so if something&rsquo;s not working as</h1>

<h1>you might expect, make sure that you have specifically enabled it</h1>

<h1>below.</h1>

<p>#</p>

<p>#</p>

<h1>DocumentRoot: The directory out of which you will serve your</h1>

<h1>documents. By default, all requests are taken from this directory, but</h1>

<h1>symbolic links and aliases may be used to point to other locations.</h1>

<p>#
DocumentRoot &ldquo;/var/www/html&rdquo;</p>

<p>#</p>

<h1>Relax access to content within /var/www.</h1>

<p>#
<Directory "/var/www"></p>

<pre><code>AllowOverride None
# Allow open access:
Require all granted
</code></pre>

<p></Directory></p>

<h1>Further relax access to the default document root:</h1>

<p><Directory "/var/www/html"></p>

<pre><code>#
# Possible values for the Options directive are "None", "All",
# or any combination of:
#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
#
# Note that "MultiViews" must be named *explicitly* --- "Options All"
# doesn't give it to you.
#
# The Options directive is both complicated and important.  Please see
# http://httpd.apache.org/docs/2.4/mod/core.html#options
# for more information.
#
Options Indexes FollowSymLinks

#
# AllowOverride controls what directives may be placed in .htaccess files.
# It can be "All", "None", or any combination of the keywords:
#   Options FileInfo AuthConfig Limit
#
AllowOverride None

#
# Controls who can get stuff from this server.
#
Require all granted
</code></pre>

<p></Directory></p>

<p>#</p>

<h1>DirectoryIndex: sets the file that Apache will serve if a directory</h1>

<h1>is requested.</h1>

<p>#
<IfModule dir_module></p>

<pre><code>DirectoryIndex index.html
</code></pre>

<p></IfModule></p>

<p>#</p>

<h1>The following lines prevent .htaccess and .htpasswd files from being</h1>

<h1>viewed by Web clients.</h1>

<p>#
<Files ".ht*"></p>

<pre><code>Require all denied
</code></pre>

<p></Files></p>

<p>#</p>

<h1>ErrorLog: The location of the error log file.</h1>

<h1>If you do not specify an ErrorLog directive within a <VirtualHost></h1>

<h1>container, error messages relating to that virtual host will be</h1>

<h1>logged here.  If you <em>do</em> define an error logfile for a <VirtualHost></h1>

<h1>container, that host&rsquo;s errors will be logged there and not here.</h1>

<p>#
ErrorLog &ldquo;logs/error_log&rdquo;</p>

<p>#</p>

<h1>LogLevel: Control the number of messages logged to the error_log.</h1>

<h1>Possible values include: debug, info, notice, warn, error, crit,</h1>

<h1>alert, emerg.</h1>

<p>#
LogLevel warn</p>

<p><IfModule log_config_module></p>

<pre><code>#
# The following directives define some format nicknames for use with
# a CustomLog directive (see below).
#
LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %&gt;s %b" common

&lt;IfModule logio_module&gt;
  # You need to enable mod_logio.c to use %I and %O
  LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
&lt;/IfModule&gt;

#
# The location and format of the access logfile (Common Logfile Format).
# If you do not define any access logfiles within a &lt;VirtualHost&gt;
# container, they will be logged here.  Contrariwise, if you *do*
# define per-&lt;VirtualHost&gt; access logfiles, transactions will be
# logged therein and *not* in this file.
#
#CustomLog "logs/access_log" common

#
# If you prefer a logfile with access, agent, and referer information
# (Combined Logfile Format) you can use the following directive.
#
CustomLog "logs/access_log" combined
</code></pre>

<p></IfModule></p>

<p><IfModule alias_module></p>

<pre><code>#
# Redirect: Allows you to tell clients about documents that used to 
# exist in your server's namespace, but do not anymore. The client 
# will make a new request for the document at its new location.
# Example:
# Redirect permanent /foo http://www.example.com/bar

#
# Alias: Maps web paths into filesystem paths and is used to
# access content that does not live under the DocumentRoot.
# Example:
# Alias /webpath /full/filesystem/path
#
# If you include a trailing / on /webpath then the server will
# require it to be present in the URL.  You will also likely
# need to provide a &lt;Directory&gt; section to allow access to
# the filesystem path.

#
# ScriptAlias: This controls which directories contain server scripts. 
# ScriptAliases are essentially the same as Aliases, except that
# documents in the target directory are treated as applications and
# run by the server when requested rather than as documents sent to the
# client.  The same rules about trailing "/" apply to ScriptAlias
# directives as to Alias.
#
ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
</code></pre>

<p></IfModule></p>

<p>#</p>

<h1>&ldquo;/var/www/cgi-bin&rdquo; should be changed to whatever your ScriptAliased</h1>

<h1>CGI directory exists, if you have that configured.</h1>

<p>#
<Directory "/var/www/cgi-bin"></p>

<pre><code>AllowOverride None
Options None
Require all granted
</code></pre>

<p></Directory></p>

<p><IfModule mime_module></p>

<pre><code>#
# TypesConfig points to the file containing the list of mappings from
# filename extension to MIME-type.
#
TypesConfig /etc/mime.types

#
# AddType allows you to add to or override the MIME configuration
# file specified in TypesConfig for specific file types.
#
#AddType application/x-gzip .tgz
#
# AddEncoding allows you to have certain browsers uncompress
# information on the fly. Note: Not all browsers support this.
#
#AddEncoding x-compress .Z
#AddEncoding x-gzip .gz .tgz
#
# If the AddEncoding directives above are commented-out, then you
# probably should define those extensions to indicate media types:
#
AddType application/x-compress .Z
AddType application/x-gzip .gz .tgz

#
# AddHandler allows you to map certain file extensions to "handlers":
# actions unrelated to filetype. These can be either built into the server
# or added with the Action directive (see below)
#
# To use CGI scripts outside of ScriptAliased directories:
# (You will also need to add "ExecCGI" to the "Options" directive.)
#
#AddHandler cgi-script .cgi

# For type maps (negotiated resources):
#AddHandler type-map var

#
# Filters allow you to process content before it is sent to the client.
#
# To parse .shtml files for server-side includes (SSI):
# (You will also need to add "Includes" to the "Options" directive.)
#
AddType text/html .shtml
AddOutputFilter INCLUDES .shtml
</code></pre>

<p></IfModule></p>

<p>#</p>

<h1>Specify a default charset for all content served; this enables</h1>

<h1>interpretation of all content as UTF-8 by default.  To use the</h1>

<h1>default browser choice (ISO-8859-1), or to allow the META tags</h1>

<h1>in HTML content to override this choice, comment out this</h1>

<h1>directive:</h1>

<p>#
AddDefaultCharset UTF-8</p>

<p><IfModule mime_magic_module></p>

<pre><code>#
# The mod_mime_magic module allows the server to use various hints from the
# contents of the file itself to determine its type.  The MIMEMagicFile
# directive tells the module where the hint definitions are located.
#
MIMEMagicFile conf/magic
</code></pre>

<p></IfModule></p>

<p>#</p>

<h1>Customizable error responses come in three flavors:</h1>

<h1>1) plain text 2) local redirects 3) external redirects</h1>

<p>#</p>

<h1>Some examples:</h1>

<h1>ErrorDocument 500 &ldquo;The server made a boo boo.&rdquo;</h1>

<h1>ErrorDocument 404 /missing.html</h1>

<h1>ErrorDocument 404 &ldquo;/cgi-bin/missing_handler.pl&rdquo;</h1>

<h1>ErrorDocument 402 <a href="http://www.example.com/subscription_info.html">http://www.example.com/subscription_info.html</a></h1>

<p>#</p>

<p>#</p>

<h1>EnableMMAP and EnableSendfile: On systems that support it,</h1>

<h1>memory-mapping or the sendfile syscall may be used to deliver</h1>

<h1>files.  This usually improves server performance, but must</h1>

<h1>be turned off when serving from networked-mounted</h1>

<h1>filesystems or if support for these functions is otherwise</h1>

<h1>broken on your system.</h1>

<h1>Defaults if commented: EnableMMAP On, EnableSendfile Off</h1>

<p>#</p>

<h1>EnableMMAP off</h1>

<p>EnableSendfile on</p>

<h1>Supplemental configuration</h1>

<p>#</p>

<h1>Load config files in the &ldquo;/etc/httpd/conf.d&rdquo; directory, if any.</h1>

<p>IncludeOptional conf.d/*.conf
```</p>

<p><strong>apachectl utility</strong></p>

<p>``` plain
APACHECTL(8)                 apachectl                APACHECTL(8)</p>

<p>NAME</p>

<pre><code>   apachectl - Apache HTTP Server Control Interface
</code></pre>

<p>SYNOPSIS</p>

<pre><code>   When  acting  in  pass-through  mode,  apachectl can take all the arguments
   available for the httpd binary.


   apachectl [ httpd-argument ]


   When acting in SysV init mode, apachectl takes simple,  one-word  commands,
   defined below.


   apachectl command
</code></pre>

<p>SUMMARY</p>

<pre><code>   apachectl  is  a front end to the Apache HyperText Transfer Protocol (HTTP)
   server. It is designed to help the administrator control the functioning of
   the Apache httpd daemon.


   The  apachectl script can operate in two modes. First, it can act as a sim‐
   ple front-end to the httpd command that simply sets any necessary  environ‐
   ment  variables  and  then  invokes httpd, passing through any command line
   arguments. Second, apachectl can act as a SysV init script,  taking  simple
   one-word arguments like start, restart, and stop, and translating them into
   appropriate signals to httpd.


   If your Apache installation uses non-standard paths, you will need to  edit
   the  apachectl script to set the appropriate paths to the httpd binary. You
   can also specify any necessary httpd command line arguments. See  the  com‐
   ments in the script for details.


   The  apachectl script returns a 0 exit value on success, and &gt;0 if an error
   occurs. For more details, view the comments in the script.
</code></pre>

<p>OPTIONS</p>

<pre><code>   Only the SysV init-style options are  defined  here.  Other  arguments  are
   defined on the httpd manual page.



   start  Start  the Apache httpd daemon. Gives an error if it is already run‐
      ning. This is equivalent to apachectl -k start.

   stop   Stops the Apache httpd daemon. This is equivalent  to  apachectl  -k
      stop.

   restart
      Restarts  the  Apache httpd daemon. If the daemon is not running, it
      is started. This  command  automatically  checks  the  configuration
      files  as  in  configtest before initiating the restart to make sure
      the daemon doesn't die. This is equivalent to apachectl -k restart.

   fullstatus
      Displays a full status report from mod_status. For this to work, you
      need  to  have  mod_status  enabled  on your server and a text-based
      browser such as lynx available on  your  system.  The  URL  used  to
      access  the  status report can be set by editing the STATUSURL vari‐
      able in the script.

   status Displays a brief status report using systemd.

   graceful
      Gracefully restarts the Apache httpd daemon. If the  daemon  is  not
      running,  it  is  not started. This differs from a normal restart in
      that currently open connections are not aborted. A  side  effect  is
      that  old  log files will not be closed immediately. This means that
      if used in a log rotation script, a substantial delay may be  neces‐
      sary  to  ensure that the old log files are closed before processing
      them. This command automatically checks the configuration  files  as
      in  configtest  before  initiating  the  restart to make sure Apache
      doesn't die. This is equivalent to apachectl -k graceful.

   graceful-stop
      Gracefully stops the Apache httpd daemon. This differs from a normal
      stop  in  that  currently  open  connections are not aborted. A side
      effect is that old log files will not be closed immediately. This is
      equivalent to apachectl -k graceful-stop.

   configtest
      Run  a  configuration  file syntax test. It parses the configuration
      files and either reports Syntax Ok or detailed information about the
      particular syntax error. This is equivalent to apachectl -t.


   The  following  option  was  available  in  earlier  versions  but has been
   removed.



   startssl
      To start httpd with SSL support, you should edit your  configuration
      file  to  include  the  relevant  directives and then use the normal
      apachectl start.
</code></pre>

<p>Apache HTTP Server          2005-08-26                APACHECTL(8)
```</p>

<p><strong>httpd reference</strong></p>

<p>``` plain
HTTPD(8)                   httpd                  HTTPD(8)</p>

<p>NAME</p>

<pre><code>   httpd - Apache Hypertext Transfer Protocol Server
</code></pre>

<p>SYNOPSIS</p>

<pre><code>   httpd  [  -d serverroot ] [ -f config ] [ -C directive ] [ -c directive ] [
   -D parameter ] [  -e  level  ]  [  -E  file  ]  [  -k  start|restart|grace‐
   ful|stop|graceful-stop  ] [ -R directory ] [ -h ] [ -l ] [ -L ] [ -S ] [ -t
   ] [ -v ] [ -V ] [ -X ] [ -M ] [ -T ]


   On Windows systems, the following additional arguments are available:


   httpd [ -k install|config|uninstall ] [ -n name ] [ -w ]
</code></pre>

<p>SUMMARY</p>

<pre><code>   httpd is the Apache HyperText Transfer Protocol (HTTP) server  program.  It
   is  designed  to be run as a standalone daemon process. When used like this
   it will create a pool of child processes or threads to handle requests.


   In general, httpd should not be invoked  directly,  but  rather  should  be
   invoked  via apachectl on Unix-based systems or as a service on Windows NT,
   2000 and XP and as a console application on Windows 9x and ME.
</code></pre>

<p>OPTIONS</p>

<pre><code>   -d serverroot
      Set the initial value for the ServerRoot  directive  to  serverroot.
      This can be overridden by the ServerRoot directive in the configura‐
      tion file. The default is /etc/httpd.

   -f config
      Uses the directives in the file config on startup.  If  config  does
      not  begin  with  a /, then it is taken to be a path relative to the
      ServerRoot. The default is conf/httpd.conf.

   -k start|restart|graceful|stop|graceful-stop
      Signals httpd to start, restart, or stop. See Stopping Apache  httpd
      for more information.

   -C directive
      Process the configuration directive before reading config files.

   -c directive
      Process the configuration directive after reading config files.

   -D parameter
      Sets  a  configuration  parameter  which can be used with &lt;IfDefine&gt;
      sections in the configuration files to conditionally skip or process
      commands at server startup and restart. Also can be used to set cer‐
      tain less-common startup parameters including  -DNO_DETACH  (prevent
      the  parent  from forking) and -DFOREGROUND (prevent the parent from
      calling setsid() et al).

   -e level
      Sets the LogLevel to level during server startup. This is useful for
      temporarily  increasing  the verbosity of the error messages to find
      problems during startup.

   -E file
      Send error messages during server startup to file.

   -h     Output a short summary of available command line options.

   -l     Output a list of modules compiled into the  server.  This  will  not
      list dynamically loaded modules included using the LoadModule direc‐
      tive.

   -L     Output a list of directives provided  by  static  modules,  together
      with  expected  arguments  and  places where the directive is valid.
      Directives provided by shared modules are not listed.

   -M     Dump a list of loaded Static and Shared Modules.

   -S     Show the settings as parsed from the  config  file  (currently  only
      shows the virtualhost settings).

   -T (Available in 2.3.8 and later)
      Skip document root check at startup/restart.

   -t     Run  syntax  tests for configuration files only. The program immedi‐
      ately exits after these syntax parsing tests with  either  a  return
      code  of 0 (Syntax OK) or return code not equal to 0 (Syntax Error).
      If -D DUMP_VHOSTS is also set, details of the virtual host  configu‐
      ration  will be printed. If -D DUMP_MODULES  is set, all loaded mod‐
      ules will be printed.

   -v     Print the version of httpd, and then exit.

   -V     Print the version and build parameters of httpd, and then exit.

   -X     Run httpd in debug mode. Only one worker will  be  started  and  the
      server will not detach from the console.


   The following arguments are available only on the Windows platform:



   -k install|config|uninstall
      Install Apache httpd as a Windows NT service; change startup options
      for the Apache httpd service; and uninstall the  Apache  httpd  ser‐
      vice.

   -n name
      The name of the Apache httpd service to signal.

   -w     Keep  the console window open on error so that the error message can
      be read.
</code></pre>

<p>Apache HTTP Server          2012-02-10                HTTPD(8)
```</p>
]]></content>
  </entry>
  
</feed>
