<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-09-10T07:53:37-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NFS shares on CentOS 7]]></title>
    <link href="http://chousensha.github.io/blog/2017/09/10/nfs-shares-on-centos-7/"/>
    <updated>2017-09-10T07:45:30-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/09/10/nfs-shares-on-centos-7</id>
    <content type="html"><![CDATA[<p>Today we will go over an alternate way of setting up shares on CentOS 7. In an <a href="https://chousensha.github.io/blog/2017/06/09/quick-shares-with-samba-on-centos/">earlier post</a> we saw how we can share stuff with Samba, which is the preferred way, especially if you have mixed environments. But today I also wanted to go through the process using the veteran: NFS! For this example, we&rsquo;ll be looking at the newest version, NFS4, which adds performance and security features, but also operates a little bit differently than its predecessors.</p>

<!-- more -->


<p>The Network File System allows clients to mount remote filesystems as if they were present locally. By default, the NFS server is listening on port 2049. In version 4, NFS requires the use of TCP.</p>

<h3>Server configuration</h3>

<p>If you don&rsquo;t have it already, install the <code>nfs-utils</code> package. Next, start NFS with the command: <code>systemctl start nfs</code>. For the share, I created some directory and put a file in it:</p>

<p><code>
mkdir /var/nfs-share
chmod 777 /var/nfs-share/
</code></p>

<p>Now we have to edit the <code>/etc/exports</code> file, which contains the configuration for the shares. The format is as follows:</p>

<p><code>
/sharepath client(options)
</code></p>

<p>You can specify the client by hostname, domain name, IP address or network range. In this example, I will allow all hosts on my local subnet to have read write access to the share, and permit root users to retain their privileges:</p>

<p><code>
/var/nfs-share 192.168.217.0/24(rw,no_root_squash)
</code></p>

<p>Now restart the server for the configuration to take effect: <code>systemctl restart nfs</code>. You can see NFS statistics with <strong>nfstat</strong>:</p>

<p>```
nfsstat
Server rpc stats:
calls      badcalls   badclnt    badauth    xdrcall
91         0          0          0          0</p>

<p>Server nfs v4:
null         compound   <br/>
2         2% 89       97%</p>

<p>Server nfs v4 operations:
op0-unused   op1-unused   op2-future   access       close        commit     <br/>
0         0% 0         0% 0         0% 7         2% 1         0% 0         0%
create       delegpurge   delegreturn  getattr      getfh        link       <br/>
0         0% 0         0% 1         0% 52       20% 8         3% 0         0%
lock         lockt        locku        lookup       lookup_root  nverify    <br/>
0         0% 0         0% 0         0% 16        6% 0         0% 0         0%
open         openattr     open_conf    open_dgrd    putfh        putpubfh   <br/>
1         0% 0         0% 0         0% 0         0% 63       25% 0         0%
putrootfh    read         readdir      readlink     remove       rename     <br/>
4         1% 1         0% 2         0% 0         0% 0         0% 0         0%
renew        restorefh    savefh       secinfo      setattr      setcltid   <br/>
0         0% 0         0% 0         0% 0         0% 0         0% 0         0%
setcltidconf verify       write        rellockowner bc_ctl       bind_conn  <br/>
0         0% 0         0% 0         0% 0         0% 0         0% 0         0%
exchange_id  create_ses   destroy_ses  free_stateid getdirdeleg  getdevinfo <br/>
2         0% 2         0% 1         0% 0         0% 0         0% 0         0%
getdevlist   layoutcommit layoutget    layoutreturn secinfononam sequence   <br/>
0         0% 0         0% 0         0% 0         0% 2         0% 83       33%
set_ssv      test_stateid want_deleg   destroy_clid reclaim_comp
0         0% 0         0% 0         0% 1         0% 2         0%
```</p>

<p>To see the available exports and their options, use <strong>exportfs</strong>:</p>

<p><code>
exportfs -v
/var/nfs-share  192.168.217.0/24(rw,wdelay,no_root_squash,no_subtree_check,sec=sys,rw,secure,no_root_squash,no_all_squash)
</code></p>

<h3>Client configuration</h3>

<p>On the client, I first made a directory for the shares:</p>

<p><code>
mkdir /mnt/nfs
</code></p>

<p>To mount the share, the command looks like this:</p>

<p><code>
mount -t nfs -o options server:/export /mount/directory
</code></p>

<p>In my case, I mounted the exported share with:</p>

<p><code>
mount -t nfs 192.168.217.131:/var/nfs-share /mnt/nfs/
</code></p>

<p>Then I went to the directory and read the file:</p>

<p><code>
root@kali:/mnt/nfs# ls
file.txt
root@kali:/mnt/nfs# cat file.txt
something here
</code></p>

<p>When done, unmount the filesystem:</p>

<p><code>
umount /mnt/nfs
</code></p>

<p>If instead of manually mounting the share, we would want it automatically mounted at boot, we&rsquo;d have to edit <code>/etc/fstab</code>:</p>

<p>```</p>

<h1>/etc/fstab: static file system information.</h1>

<p>#</p>

<h1>Use &lsquo;blkid&rsquo; to print the universally unique identifier for a</h1>

<h1>device; this may be used with UUID= as a more robust way to name devices</h1>

<h1>that works even if disks are added and removed. See fstab(5).</h1>

<p>#</p>

<h1><file system> <mount point>   <type>  <options>       <dump>  <pass></h1>

<p>192.168.217.131:/var/nfs-share /mnt/nfs nfs rw 0 0
```</p>

<p>Now reboot the client and check that the share was mounted:</p>

<p><code>
mount | grep nfs
192.168.217.131:/var/nfs-share on /mnt/nfs type nfs4 (rw,relatime,vers=4.2,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=0.0.0.0,local_lock=none,addr=192.168.217.131)
</code></p>

<p>So, it&rsquo;s pretty easy and fast to set up NFS shares, but keep in mind this tutorial only scratched the surface of the available configuration options.</p>

<p>```</p>

<hr />

<p>/ Q: What&rsquo;s tiny and yellow and very,   \
| very, dangerous? A: A canary with the |
\ super-user password.                  /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick shares with Samba on CentOS]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/09/quick-shares-with-samba-on-centos/"/>
    <updated>2017-06-09T05:47:05-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/09/quick-shares-with-samba-on-centos</id>
    <content type="html"><![CDATA[<p>The interwebz is thundering with doomsday predictions about the <a href="https://blog.qualys.com/securitylabs/2017/05/26/samba-vulnerability-cve-2017-7494">Samba CVE-2017-7494 exploit</a>, and here I am, deciding that now is the best time to make a post on setting up Samba shares! xD</p>

<p>On a related note, if for some reason you can&rsquo;t patch the vulnerability yet, there is a workaround (with some drawbacks). Edit the global section in smb.conf and add the line <code>nt pipe support = no</code>.</p>

<!-- more -->


<p>Back to the matter at hand. First, let&rsquo;s verify if Samba is installed on the CentOS system:</p>

<p><code>
rpm -q samba
package samba is not installed
</code></p>

<p>Since it&rsquo;s not installed on my machine, I installed it with <code>yum install samba</code>, and then ran the previous command again, to check the version:</p>

<p><code>
rpm -q samba
samba-4.4.4-14.el7_3.x86_64
</code></p>

<p>Now, let&rsquo;s start Samba and see it running:</p>

<p>```
service smb start
Redirecting to /bin/systemctl start  smb.service
service smb status
Redirecting to /bin/systemctl status  smb.service
● smb.service &ndash; Samba SMB Daemon
   Loaded: loaded (/usr/lib/systemd/system/smb.service; disabled; vendor preset: disabled)
   Active: active (running) since Thu 2017-06-08 10:56:54 EEST; 5s ago
 Main PID: 61874 (smbd)
   Status: &ldquo;smbd: ready to serve connections&hellip;&rdquo;
   CGroup: /system.slice/smb.service</p>

<pre><code>       ├─61874 /usr/sbin/smbd
       ├─61875 /usr/sbin/smbd
       ├─61876 /usr/sbin/smbd
       └─61879 /usr/sbin/smbd
</code></pre>

<p>Jun 08 10:56:52 localhost.localdomain systemd[1]: Starting Samba SMB Daemon&hellip;
Jun 08 10:56:54 localhost.localdomain smbd[61874]: [2017/06/08 10:56:54.513901,  0] ../lib/util/become_daemon.c:124(daemon_ready)
Jun 08 10:56:54 localhost.localdomain smbd[61874]:   STATUS=daemon &lsquo;smbd&rsquo; finished starting up and ready to serve connections
Jun 08 10:56:54 localhost.localdomain systemd[1]: Started Samba SMB Daemon.
```</p>

<h2>Samba daemons</h2>

<p>The Samba functionality is contained within 3 daemons:</p>

<ul>
<li><p><strong>smbd</strong> &ndash; file sharing, printing services, authentication. Default ports are 139 and 445</p></li>
<li><p><strong>nmbd</strong> &ndash; NetBIOS name service requests and browsing protocols</p></li>
<li><p><strong>winbindd</strong> &ndash; used for Windows domains membership</p></li>
</ul>


<h2>Samba configuration</h2>

<p>The Samba configuration file is <code>/etc/samba/smb.conf</code>. Here is how a fresh config file looks after installation:</p>

<p>```</p>

<h1>See smb.conf.example for a more detailed config file or</h1>

<h1>read the smb.conf manpage.</h1>

<h1>Run &lsquo;testparm&rsquo; to verify the config is correct after</h1>

<h1>you modified it.</h1>

<p>[global]</p>

<pre><code>workgroup = SAMBA
security = user

passdb backend = tdbsam

printing = cups
printcap name = cups
load printers = yes
cups options = raw
</code></pre>

<p>[homes]</p>

<pre><code>comment = Home Directories
valid users = %S, %D%w%S
browseable = No
read only = No
inherit acls = Yes
</code></pre>

<p>[printers]</p>

<pre><code>comment = All Printers
path = /var/tmp
printable = Yes
create mask = 0600
browseable = No
</code></pre>

<p>[print$]</p>

<pre><code>comment = Printer Drivers
path = /var/lib/samba/drivers
write list = root
create mask = 0664
directory mask = 0775
</code></pre>

<p>```</p>

<p>For much more detailed information and examples, see the <a href="/downloads/code/smb.conf.example">smb.conf.example file</a></p>

<h2>Create Samba share</h2>

<p>In this example, let&rsquo;s create a share that users can also write to. First, create the directory that you will share: <code>mkdir -p /srv/samba/myshare</code>. I placed a text file with some random stuff inside. Then I gave full access to the path and its subfolders with <code>chmod -R 777 /srv/samba</code></p>

<p>Next, we need to create a Samba user, but this account is not the same as a user account on the system. We have to make a user account on the system before assigning it to Samba:</p>

<p><code>
adduser smbuser -s /sbin/nologin
</code></p>

<p>Here I created a user just for Samba, with no login shell. Attempting to login will give the user a message that they are not allowed to login. If you prefer that the user is disconnected with no message, you can specify <code>/bin/false</code> instead.</p>

<p>Then, I gave the user account a description, which you can find inside <em>/etc/passwd</em>:</p>

<p><code>
usermod -c 'Samba access is allowed for this user' smbuser
[root@localhost ~]# cat /etc/passwd | grep smbuser
smbuser:x:1001:1001:Samba access is allowed for this user:/home/smbuser:/sbin/nologin
</code></p>

<p>Have to give the user account a password:</p>

<p><code>
[root@localhost ~]# passwd smbuser
Changing password for user smbuser.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.
</code></p>

<p>Next, we create a Samba user, by using the previously created account:</p>

<p><code>
[root@localhost ~]# smbpasswd -a smbuser
New SMB password:
Retype new SMB password:
Added user smbuser.
</code></p>

<p>To be safe, check that the Samba user was created:</p>

<p><code>
[root@localhost ~]# pdbedit -L
smbuser:1001:Samba access is allowed for this user
</code></p>

<p>We have the share location and the user, now we need to edit the smb.conf file with the relevant information:</p>

<p>```
[global]</p>

<pre><code># workgroup name or Windows NT domain name
workgroup = SAMBA
# default: user and password authentication
security = user
# optional comment for Windows
server string = Samba File Server
# default backend for user information
passdb backend = tdbsam
</code></pre>

<p>[sharename]</p>

<pre><code>path = /srv/samba/myshare
comment = Only authorized users
# allow these users
valid users = smbuser
# same can be achieved with writable = yes
read only = no  
# allow subnet range
allow hosts = 192.168.217.
# deny access
invalid users = root  
</code></pre>

<p>```</p>

<p>I used comments for easier understanding, but for performance reasons, you might want to keep your file to minimum size, by removing all those comment lines. You can do that by keeping a configuration file with all the additional remarks, while using a smb.conf with only the required configuration. All the comments will be stripped from the config file:</p>

<p><code>
[root@localhost samba]# testparm -s smb.conf.old &gt; smb.conf
Load smb config files from smb.conf.old
rlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)
Processing section "[sharename]"
Loaded services file OK.
Server role: ROLE_STANDALONE
</code></p>

<p>We checked that our config file is valid, so now it&rsquo;s time to test it. Restart Samba for the configurations to take effect with <code>service smb restart</code>. And now let&rsquo;s access the share! From another machine, I used <strong>smbclient</strong> to list the available services on the Samba server:</p>

<p>```
smbclient -L 192.168.217.131 -U smbuser
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Enter smbuser&rsquo;s password:
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]</p>

<pre><code>Sharename       Type      Comment
---------       ----      -------
sharename       Disk      Only authorized users
IPC$            IPC       IPC Service (Samba File Server)
</code></pre>

<p>Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]</p>

<pre><code>Server               Comment
---------            -------

Workgroup            Master
---------            -------
</code></pre>

<p>```</p>

<p>There is one last step that you need to accomplish if you have SELinux enabled. You have to label the directory you&rsquo;re sharing with the <strong>samba_share_t</strong> label:</p>

<p><code>
chcon -R -t samba_share_t /srv/samba
</code></p>

<p>Now the /srv/samba directory and everything it contains is labeled correctly, and SELinux won&rsquo;t interfere. View the security context of the path with:</p>

<p><code>
ls -ldZ /srv/samba/
drwxr-xr-x. root root unconfined_u:object_r:samba_share_t:s0 /srv/samba/
</code></p>

<p>Changes made with chcon are temporary. To survive a relabel or running <em>restorerecon</em>, make the changes permanent with:</p>

<p><code>
semanage fcontext -a -t samba_share_t "path(/.*)?"
</code></p>

<p>Then apply them with <code>restorecon -R -v /path</code>.</p>

<p>Finally, to connect to a share, use the syntax: <code>smbclient  //host/sharename -U username</code> (in the below examle, the name of my share is sharename, because laziness):</p>

<p>```
smbclient  //192.168.217.131/sharename -U smbuser
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Enter smbuser&rsquo;s password:
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]
smb: > ls</p>

<pre><code>  .                                   D        0  Thu Jun  8 09:39:42 2017
  ..                                  D        0  Thu Jun  8 09:26:38 2017
  read.txt                            N       11  Thu Jun  8 09:39:42 2017

        18307072 blocks of size 1024. 13091600 blocks available
</code></pre>

<p>```</p>

<p>List available commands:</p>

<p>```</p>

<pre><code>smb: \&gt; ?
?              allinfo        altname        archive        backup         
blocksize      cancel         case_sensitive cd             chmod          
chown          close          del            dir            du             
echo           exit           get            getfacl        geteas         
hardlink       help           history        iosize         lcd            
link           lock           lowercase      ls             l              
mask           md             mget           mkdir          more           
mput           newer          notify         open           posix          
posix_encrypt  posix_open     posix_mkdir    posix_rmdir    posix_unlink   
posix_whoami   print          prompt         put            pwd            
q              queue          quit           readlink       rd             
recurse        reget          rename         reput          rm             
rmdir          showacls       setea          setmode        scopy          
stat           symlink        tar            tarmode        timeout        
translate      unlock         volume         vuid           wdel           
logon          listconnect    showconnect    tcon           tdis           
tid            logoff         ..             !              
</code></pre>

<p>```</p>

<p>Download file:</p>

<p><code>
smb: \&gt; get read.txt
getting file \read.txt of size 11 as read.txt (3.6 KiloBytes/sec) (average 3.6 KiloBytes/sec)
</code></p>

<p>Delete file:</p>

<p><code>
smb: \&gt; del read.txt
</code></p>

<p>Upload file:</p>

<p>```
smb: > put test.png
putting file test.png as \test.png (0.2 kb/s) (average 0.2 kb/s)
smb: > ls
  .                                   D        0  Thu Jun  8 13:24:14 2017
  ..                                  D        0  Thu Jun  8 09:26:38 2017
  test.png                            A       35  Thu Jun  8 13:22:09 2017</p>

<pre><code>    18307072 blocks of size 1024. 13091480 blocks available
</code></pre>

<p>```</p>

<p>From a Windows system, you can run <code>\192.168.217.131\sharename</code> to connect to the share, or use the <em>net use</em> command.</p>

<p>View shares:</p>

<p>```
C:\Documents and Settings\admin>net use
New connections will be remembered.</p>

<p>Status       Local     Remote                    Network</p>

<hr />

<p>OK                     \192.168.217.131\sharename</p>

<pre><code>                                             Microsoft Windows Network
</code></pre>

<p>The command completed successfully.
```</p>

<p>Connect to shares:</p>

<p>```
C:\Documents and Settings\admin>net use S: \192.168.217.131\sharename
The command completed successfully.</p>

<p>C:\Documents and Settings\admin>s:</p>

<p>S:>dir
 Volume in drive S is sharename
 Volume Serial Number is DCCC-194F</p>

<p> Directory of S:\</p>

<p>06/09/2017  02:24 AM    <DIR>          .
06/08/2017  10:26 PM    <DIR>          ..
06/09/2017  02:22 AM                35 test.png</p>

<pre><code>           1 File(s)             35 bytes
           2 Dir(s)  13,405,708,288 bytes free
</code></pre>

<p>```</p>

<h3>Other useful options</h3>

<p>You can drill down into the smb.conf file and customize it to your liking. Here are a few options:</p>

<ul>
<li><p>read list = user1, user2 &ndash; set read only users on a writable share</p></li>
<li><p>write list = user1, user2 &ndash; set write access for users on a read only share</p></li>
<li><p>deny hosts  = ip &ndash; deny access to the specified IPs</p></li>
<li><p>hide unreadable = yes &ndash; don&rsquo;t let users see files they don&rsquo;t have access to</p></li>
<li><p>browseable = no &ndash; hide shares from Windows network</p></li>
</ul>


<p>Key takeaways:</p>

<ul>
<li><p>server and share security levels are deprecated, so best to avoid them</p></li>
<li><p>specifying a share in the smb.conf file is not enough. Ensure that you have created the path and gave it sufficient permissins</p></li>
<li><p>Samba users need to already exist on the system</p></li>
<li><p>you can have both a well documented config file and a minimal size one for performance, by using <code>testparm -s</code></p></li>
<li><p>if you use SELinux, don&rsquo;t forget to label your share with <code>samba_share_t</code></p></li>
</ul>


<p>Learn more:</p>

<ul>
<li><p><a href="http://linux-training.be/linuxsrv.pdf">Samba section in Paul Cobbaut&rsquo;s Linux Servers course</a></p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/smb.conf.5.html">smb.conf manpage</a> &ndash; The configuration file for the Samba suite</p></li>
<li><p><a href="https://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-samba.html">CentOS Samba guide</a></p></li>
<li><p><a href="smbpasswd%20-%20The%20Samba%20encrypted%20password%20file">smbpasswd man page</a> &ndash; The Samba encrypted password file</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages/pdbedit.8.html">pdbedit manpage</a> &ndash; manage the SAM database (Database of Samba Users)</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/testparm.1.html">testparm manpage</a> &ndash; check an smb.conf configuration file for internal correctness</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/smbclient.1.html">smbclient manpage</a> &ndash; ftp-like client to access SMB/CIFS resources on servers</p></li>
</ul>


<p>```
/ Nothing so needs reforming as other \
| people&rsquo;s habits.                    |
|                                     |
\ &mdash; Mark Twain                       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iptables firewall]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/23/iptables-firewall/"/>
    <updated>2017-05-23T12:27:45-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/23/iptables-firewall</id>
    <content type="html"><![CDATA[<p>iptables is a CLI tool for configuring firewall functionality in Linux. It operates on a series of tables, which on a CentOS 7 system are:</p>

<!-- more -->


<ul>
<li><p><strong>filter</strong> &ndash; the default table used for packet filtering</p></li>
<li><p><strong>nat</strong> &ndash; for nat</p></li>
<li><p><strong>mangle</strong> &ndash; specialized packet alteration</p></li>
<li><p><strong>raw</strong> &ndash; used mainly for configuring connection exemptions</p></li>
<li><p><strong>security</strong> &ndash; Mandatory Access Control networking rules</p></li>
</ul>


<p>For the purpose of this post, we will be focusing on the filter table, which uses sets of rules to send (or not) packets on their merry way. These rules are called chains and they are as follows:</p>

<ul>
<li><p>INPUT &ndash; incoming connections</p></li>
<li><p>OUTPUT &ndash; outbound connections</p></li>
<li><p>FORWARD &ndash; packets being forwarded through the system</p></li>
</ul>


<p>Let&rsquo;s see the currently configured rules:</p>

<p><code>plain
iptables -t filter -L | grep policy
Chain INPUT (policy ACCEPT)
Chain FORWARD (policy ACCEPT)
Chain OUTPUT (policy ACCEPT)
</code></p>

<p>Well, everything is set to ACCEPT. The opposite of accepting connections is DROP, where the packets are silently dropped. Let&rsquo;s see it in action. First, change the policy to drop the packets: <code>iptables -P INPUT DROP</code>. Then try to ping the machine:</p>

<p>``` plain
ping 192.168.217.131</p>

<p>Pinging 192.168.217.131 with 32 bytes of data:
Request timed out.
Request timed out.
Request timed out.
Request timed out.</p>

<p>Ping statistics for 192.168.217.131:</p>

<pre><code>Packets: Sent = 4, Received = 0, Lost = 4 (100% loss),
</code></pre>

<p>```</p>

<p>It is possible to also use the REJECT extension,  where packets are being dropped but the source host receives an error, thereby being notified that there may be filtering in place: <code>iptables -I INPUT -j REJECT</code>. Here the REJECT was inserted at the beginning of the INPUT chain, to ensure that it will be matched before anything else:</p>

<p>``` plain
ping 192.168.217.131</p>

<p>Pinging 192.168.217.131 with 32 bytes of data:
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.</p>

<p>Ping statistics for 192.168.217.131:</p>

<pre><code>Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
</code></pre>

<p>```</p>

<p>Some example scenarios:</p>

<h3>only allow SSH connections from specific IP</h3>

<p>Let&rsquo;s assume that a computer has to be locked down, and only accept SSH connections from a certain IP:</p>

<p><code>plain
iptables -I INPUT -p tcp --dport 22 -s 192.168.217.137 -j ACCEPT
</code></p>

<p>With a policy of dropping packets, running the above will allow TCP connections for port 22, from the 192.168.217.137 source address, while still denying everything else.</p>

<h3>traffic forwarding</h3>

<p>Next, we have a machine with the IP 192.168.217.131 that we want to use to forward traffic to 192.168.217.137. How would we accomplish that?</p>

<p>First, we enable forwarding in the forwarding machine&rsquo;s kernel by putting a 1 inside <code>/proc/sys/net/ipv4/ip_forward</code>. On the .137 machine, I have a netcat listener on port 8000. On the .131 box, I also have netcat listening on port 4444. All connections coming to port 4444 on this machine will be routed to port 8000 on .137. The iptables rules to make that happen are:</p>

<ul>
<li><p><code>iptables -t nat -A PREROUTING -p tcp &mdash;dport 4444 -j DNAT &mdash;to-destination 192.168.217.137:8000</code> &ndash; we operate on the nat table. PREROUTING is used for altering packets as soon as they  come  in. We append a rule to this chain, stating that for TCP packets coming to port 4444 on this host, the destination IP will be changed to 192.168.217.137, on port 8000</p></li>
<li><p><code>iptables -t nat -A POSTROUTING -j MASQUERADE</code> &ndash; next we append to the POSTROUTING chain, that alters packets as they are about to go out, telling iptables to masquerate packets: replacing the IP of the sender to the IP of the forwarding machine</p></li>
</ul>


<p>Now I connect to port 4444 on 192.168.217.131 and send some random text, and checking my 192.168.217.137 listener, I see the traffic:</p>

<p><code>plain
c -vnlp 8000
listening on [any] 8000 ...
connect to [192.168.217.137] from (UNKNOWN) [192.168.217.131] 1859
dasa
knock kncok
</code></p>

<h3>list rules of a table</h3>

<ul>
<li><code>iptables -L -n -v</code> &ndash; display the rules of the default filter table, also printing the number of packets and bytes processed by each chain, and use numerical format for ports and addresses</li>
</ul>


<p>``` plain
Chain INPUT (policy ACCEPT 172 packets, 21210 bytes)
 pkts bytes target     prot opt in     out     source               destination</p>

<p>Chain FORWARD (policy ACCEPT 37 packets, 1523 bytes)
 pkts bytes target     prot opt in     out     source               destination</p>

<p>Chain OUTPUT (policy ACCEPT 82 packets, 6554 bytes)
 pkts bytes target     prot opt in     out     source               destination <br/>
```</p>

<h3>flush all the rules</h3>

<ul>
<li><code>iptables -F</code> &ndash; delete your rules and start anew</li>
</ul>


<h3>save rules to survive reboots</h3>

<p><code>plain
service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]
</code></p>

<h3>block specific IP</h3>

<ul>
<li><code>iptables -A INPUT -s 192.168.217.137 -j DROP</code> &ndash; packets from .137 will be dropped</li>
</ul>


<h3>block outgoing connections to a host or range</h3>

<p>Let&rsquo;s imagine that you are tired of your users spending all their day on Twitter. First, find out Twitter&rsquo;s IPs:</p>

<p><code>plain
host twitter.com
twitter.com has address 104.244.42.65
twitter.com has address 104.244.42.1
twitter.com mail is handled by 20 alt1.aspmx.l.google.com.
twitter.com mail is handled by 30 aspmx2.googlemail.com.
twitter.com mail is handled by 20 alt2.aspmx.l.google.com.
twitter.com mail is handled by 10 aspmx.l.google.com.
twitter.com mail is handled by 30 aspmx3.googlemail.com.
</code></p>

<p>Next, do a whois lookup on the IP, looking for the CIDR range it belongs to:</p>

<p><code>plain
hois 104.244.42.65 | grep CIDR
CIDR:           104.244.40.0/21
</code></p>

<p>Block access to Twitter&rsquo;s IP range: <code>iptables -A OUTPUT -p tcp -d 66.220.144.0/20 -j DROP</code></p>

<h3>log dropped packets</h3>

<ul>
<li><code>iptables -A INPUT -i eth0 -j LOG &mdash;log-prefix &ldquo;Packets dropped by firewall:&rdquo;</code> &ndash; turn on kernel logging for matching packets and prefix the log messages with some text to make them stand out</li>
</ul>


<p><code>plain
root@pwnbox:~#grep "Packets dropped by firewall:" /var/log/messages
May 23 12:11:34 pwnbox kernel: [ 3285.154203] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=288 TOS=0x00 PREC=0x00 TTL=128 ID=20858 PROTO=UDP SPT=53 DPT=57477 LEN=268
May 23 12:11:34 pwnbox kernel: [ 3285.158231] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=356 TOS=0x00 PREC=0x00 TTL=128 ID=20859 PROTO=UDP SPT=53 DPT=36464 LEN=336
May 23 12:11:34 pwnbox kernel: [ 3285.162645] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=360 TOS=0x00 PREC=0x00 TTL=128 ID=20860 PROTO=UDP SPT=53 DPT=47777 LEN=340
...
</code></p>

<p>This post only scratched the tip of the iceberg when it comes to Linux firewalls. The key takeaway should be that iptables is a very powerful utility that can be customized to meet your specific networking needs.</p>

<p>``` plain</p>

<hr />

<p>&lt; You will wish you hadn&rsquo;t. ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DHCP server on CentOS]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/13/dhcp-server-on-centos/"/>
    <updated>2017-04-13T13:59:25-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/13/dhcp-server-on-centos</id>
    <content type="html"><![CDATA[<p>In this post I will continue the series on configuring various servers on the CentOS 7 distribution. Let&rsquo;s see how we can get a DHCP server up and running!</p>

<!-- more -->


<h2>Installing DHCP server</h2>

<p>First, we need to intall the server component, which can be done with the <code>yum install dhcp</code> command:</p>

<h1>``` plain</h1>

<h1> Package                       Arch                            Version                                           Repository                     Size</h1>

<p>Installing:
 dhcp                          x86_64                          12:4.2.5-47.el7.centos                            base                          511 k</p>

<h1>Transaction Summary</h1>

<p>Install  1 Package</p>

<p>Total download size: 511 k
Installed size: 1.4 M
Is this ok [y/d/N]: y
Downloading packages:
dhcp-4.2.5-47.el7.centos.x86_64.rpm                                                                                           | 511 kB  00:00:00   <br/>
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : 12:dhcp-4.2.5-47.el7.centos.x86_64                                                                                                1/1
  Verifying  : 12:dhcp-4.2.5-47.el7.centos.x86_64                                                                                                1/1</p>

<p>Installed:
  dhcp.x86_64 12:4.2.5-47.el7.centos</p>

<p>Complete!
```</p>

<p>We now have a <code>/etc/dhcp/dhcpd.conf</code> file for configuring the server. There isn&rsquo;t much in it to start with, except pointers to the <code>dhcpd.conf</code> man page and a sample config file in <code>/usr/share/doc/dhcp*/dhcpd.conf.example</code>:</p>

<p>``` plain</p>

<h1>dhcpd.conf</h1>

<p>#</p>

<h1>Sample configuration file for ISC dhcpd</h1>

<p>#</p>

<h1>option definitions common to all supported networks&hellip;</h1>

<p>option domain-name &ldquo;example.org&rdquo;;
option domain-name-servers ns1.example.org, ns2.example.org;</p>

<p>default-lease-time 600;
max-lease-time 7200;</p>

<h1>Use this to enble / disable dynamic dns updates globally.</h1>

<h1>ddns-update-style none;</h1>

<h1>If this DHCP server is the official DHCP server for the local</h1>

<h1>network, the authoritative directive should be uncommented.</h1>

<h1>authoritative;</h1>

<h1>Use this to send dhcp log messages to a different log file (you also</h1>

<h1>have to hack syslog.conf to complete the redirection).</h1>

<p>log-facility local7;</p>

<h1>No service will be given on this subnet, but declaring it helps the</h1>

<h1>DHCP server to understand the network topology.</h1>

<p>subnet 10.152.187.0 netmask 255.255.255.0 {
}</p>

<h1>This is a very basic subnet declaration.</h1>

<p>subnet 10.254.239.0 netmask 255.255.255.224 {
  range 10.254.239.10 10.254.239.20;
  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
}</p>

<h1>This declaration allows BOOTP clients to get dynamic addresses,</h1>

<h1>which we don&rsquo;t really recommend.</h1>

<p>subnet 10.254.239.32 netmask 255.255.255.224 {
  range dynamic-bootp 10.254.239.40 10.254.239.60;
  option broadcast-address 10.254.239.31;
  option routers rtr-239-32-1.example.org;
}</p>

<h1>A slightly different configuration for an internal subnet.</h1>

<p>subnet 10.5.5.0 netmask 255.255.255.224 {
  range 10.5.5.26 10.5.5.30;
  option domain-name-servers ns1.internal.example.org;
  option domain-name &ldquo;internal.example.org&rdquo;;
  option routers 10.5.5.1;
  option broadcast-address 10.5.5.31;
  default-lease-time 600;
  max-lease-time 7200;
}</p>

<h1>Hosts which require special configuration options can be listed in</h1>

<h1>host statements.   If no address is specified, the address will be</h1>

<h1>allocated dynamically (if possible), but the host-specific information</h1>

<h1>will still come from the host declaration.</h1>

<p>host passacaglia {
  hardware ethernet 0:0:c0:5d:bd:95;
  filename &ldquo;vmunix.passacaglia&rdquo;;
  server-name &ldquo;toccata.fugue.com&rdquo;;
}</p>

<h1>Fixed IP addresses can also be specified for hosts.   These addresses</h1>

<h1>should not also be listed as being available for dynamic assignment.</h1>

<h1>Hosts for which fixed IP addresses have been specified can boot using</h1>

<h1>BOOTP or DHCP.   Hosts for which no fixed address is specified can only</h1>

<h1>be booted with DHCP, unless there is an address range on the subnet</h1>

<h1>to which a BOOTP client is connected which has the dynamic-bootp flag</h1>

<h1>set.</h1>

<p>host fantasia {
  hardware ethernet 08:00:07:26:c0:a5;
  fixed-address fantasia.fugue.com;
}</p>

<h1>You can declare a class of clients and then do address allocation</h1>

<h1>based on that.   The example below shows a case where all clients</h1>

<h1>in a certain class get addresses on the 10.17.224/24 subnet, and all</h1>

<h1>other clients get addresses on the 10.0.29/24 subnet.</h1>

<p>class &ldquo;foo&rdquo; {
  match if substring (option vendor-class-identifier, 0, 4) = &ldquo;SUNW&rdquo;;
}</p>

<p>shared-network 224-29 {
  subnet 10.17.224.0 netmask 255.255.255.0 {</p>

<pre><code>option routers rtr-224.example.org;
</code></pre>

<p>  }
  subnet 10.0.29.0 netmask 255.255.255.0 {</p>

<pre><code>option routers rtr-29.example.org;
</code></pre>

<p>  }
  pool {</p>

<pre><code>allow members of "foo";
range 10.17.224.10 10.17.224.250;
</code></pre>

<p>  }
  pool {</p>

<pre><code>deny members of "foo";
range 10.0.29.10 10.0.29.230;
</code></pre>

<p>  }
}
```</p>

<p>This is how the config file looks like. We&rsquo;ll use this example as a basis for making our own. Copy the example file and name it <strong>dhcpd.conf</strong> file:</p>

<p><code>plain
cp /usr/share/doc/dhcp*/dhcpd.conf.example /etc/dhcp/dhcpd.conf
</code></p>

<p>Now edit it and make changes according to your network:</p>

<p>``` plain</p>

<h1>option definitions common to all supported networks&hellip;</h1>

<p>option domain-name &ldquo;localdomain.com&rdquo;;</p>

<h1>DNS server address &ndash; look in your /etc/resolv.conf</h1>

<p>option domain-name-servers 192.168.217.2;</p>

<p>default-lease-time 600;
max-lease-time 7200;</p>

<h1>declare your subnet config</h1>

<p>subnet 192.168.217.0 netmask 255.255.255.0 {
  # range of IPs to serve
  range 192.168.217.10 192.168.217.20;
  # the address of the routers &ndash; look for the gateway address in the route -n # command (entry containing UG)
  option routers 192.168.217.2;
}</p>

<p>host kaliclient {
hardware ethernet 00:0c:29:22:f9:ae;
fixed-address 192.168.217.12;
}
```</p>

<p>Here I declared the subnet for which the server would handle addresses, and I reserved an IP address for a client. For more options, you can look at the <code>dhcpd-options</code> man page.</p>

<p>Time to start the server. First, verify that the <code>/var/lib/dhcpd/dhcpd.leases</code> file exists, otherwise you will need to create an empty one before starting the server with the command <code>systemctl start dhcpd</code>. I changed my VMs connection settings to host-only, and then looked at the new IP configuration:</p>

<p>``` plain</p>

<h1>ifconfig on the host running the DHCP server</h1>

<p>inet 192.168.217.10  netmask 255.255.255.0  broadcast 192.168.217.255</p>

<h1>ifconfig on the kali client</h1>

<p>inet 192.168.217.12  netmask 255.255.255.0  broadcast 192.168.217.255
```</p>

<p>Success! Our DHCP server kicked in and gave addresses to 2 machines on the network!</p>

<p>``` plain
/ F.S. Fitzgerald to Hemingway:        \
|                                      |
| &ldquo;Ernest, the rich are different from |
| us.&rdquo; Hemingway:                      |
|                                      |
\ &ldquo;Yes. They have more money.&rdquo;         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up MySQL and PHP on Apache]]></title>
    <link href="http://chousensha.github.io/blog/2017/02/25/setting-up-mysql-and-php-on-apache/"/>
    <updated>2017-02-25T03:58:37-05:00</updated>
    <id>http://chousensha.github.io/blog/2017/02/25/setting-up-mysql-and-php-on-apache</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since my last post, but a full time job + the Cisco Cybersecurity scholarship are really eating into my time. But I will try to sneak a post here and there, whenever I can!</p>

<p>In a <a href="http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache/">previous post</a>, I made a tutorial about setting up Apache on CentOS. The next step is to fire a MySQL server and put some databases on that web server!</p>

<!-- more -->


<h2>Installing MySQL server</h2>

<p>First, we need to visit the <a href="https://dev.mysql.com/downloads/repo/yum/">MySQL community repository</a> to download the server package:</p>

<p>``` plain
wget <a href="https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm">https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm</a>
&mdash;2017-01-19 10:06:02&mdash;  <a href="https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm">https://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm</a>
Resolving repo.mysql.com (repo.mysql.com)&hellip; 104.87.9.47
Connecting to repo.mysql.com (repo.mysql.com)|104.87.9.47|:443&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 9224 (9.0K) [application/x-redhat-package-manager]
Saving to: ‘mysql57-community-release-el7-9.noarch.rpm’</p>

<p>100%[===========================================================================================================>] 9,224       &mdash;.-K/s   in 0s</p>

<p>2017-01-19 10:06:02 (137 MB/s) &ndash; ‘mysql57-community-release-el7-9.noarch.rpm’ saved [9224/9224]
```</p>

<p>Next we install the package:</p>

<p><code>plain
rpm -ivh mysql57-community-release-el7-9.noarch.rpm
warning: mysql57-community-release-el7-9.noarch.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:mysql57-community-release-el7-9  ################################# [100%]
</code></p>

<p>After running <code>yum update</code> and waiting for a while, you can install MySQL server from the newly added repository with <code>yum install mysql-server</code>.</p>

<p>After the installation, a new user has been created in <code>/etc/passwd</code>, and a group in <code>/etc/group</code>:</p>

<p>``` plain
cat /etc/passwd | grep mysql
mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false</p>

<p>cat /etc/group | grep mysql
mysql:x:27:
```</p>

<h2>Configuration</h2>

<p>Next, start the service with <code>systemctl start mysqld</code>. The next step is to run the <code>mysql_secure_installation</code> binary to make some security configurations to your server, but for that you need the temporary root password that was generated during installation:</p>

<p><code>plain
grep 'password' /var/log/mysqld.log
2017-01-19T08:53:45.638708Z 1 [Note] A temporary password is generated for root@localhost: hoPAejdrk6_a
</code></p>

<p>After running <code>mysql_secure_installation</code>, you will be asked to change the root password in accordance with a policy that requires 12 characters, with a mix of uppercase, lowercase, numbers and special characters. Then you will be prompted to answer some questions regarding the removal of anonymous users, test databases, and disallowing remote root login.</p>

<p>To access your MySQL instance via the command line, log in as root and give your password:</p>

<p>``` plain
mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 16
Server version: 5.7.17 MySQL Community Server (GPL)</p>

<p>Copyright &copy; 2000, 2016, Oracle and/or its affiliates. All rights reserved.</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>mysql>
```</p>

<p>Let&rsquo;s look at what databases are available:</p>

<p><code>plain
show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)
</code></p>

<p>I created a new database to play with:</p>

<p><code>plain
mysql&gt; create database vip;
Query OK, 1 row affected (0.00 sec)
</code></p>

<p>Now change the current DB to point the one you created:</p>

<p><code>plain
mysql&gt; use vip;
Database changed
</code></p>

<h3>Backup and restoration</h3>

<p>Before throwing some data into it, let&rsquo;s first see how to back up data and restore it. For this, we have the <strong>mysqldump</strong> utility. To make a backup of my newly created DB, I typed: <code>mysqldump -u root -p vip > backup.sql</code>.</p>

<p>Then I deleted the DB with the <code>drop database vip;</code> command. For some reason though, I could not restore the DB without first creating a DB with the same name. The restore command is <code>mysql -u root -p vip &lt; backup.sql</code>.</p>

<h3>Adding data to DB</h3>

<p>The database is all well and good, but we need to put a table in there!</p>

<p><code>sql
create table users (
name VARCHAR(10)
);
</code></p>

<p>I made a <em>users</em> table with one column for the <em>name</em>. Let&rsquo;s confirm this:</p>

<p><code>plain
mysql&gt; show tables;
+---------------+
| Tables_in_vip |
+---------------+
| users         |
+---------------+
1 row in set (0.00 sec)
</code></p>

<p>Next, I made some users:</p>

<p>``` plain
mysql> insert into users values (&lsquo;root&rsquo;);
Query OK, 1 row affected (0.04 sec)</p>

<p>mysql> insert into users values (&lsquo;guest&rsquo;);
Query OK, 1 row affected (0.00 sec)</p>

<p>mysql> select * from users;
+&mdash;&mdash;&mdash;&ndash;+
| name  |
+&mdash;&mdash;&mdash;&ndash;+
| root  |
| guest |
+&mdash;&mdash;&mdash;&ndash;+
2 rows in set (0.00 sec)
```</p>

<p>Let&rsquo;s see the DB in action by integrating it with some PHP!</p>

<h2>Installing PHP</h2>

<p>Installing PHP on CentOS can be done with the following command: <code>yum install php php-mysql</code></p>

<p>The next step is to write some PHP code to connect to the DB. But this is not Debian, so nothing just works! There is the pesky SELinux to take into account, and it&rsquo;s not letting Apache to reach the MySQL DB. Use <strong>getsebool</strong> to see the boolean values for the web server:</p>

<p><code>plain
getsebool -a | grep httpd
httpd_anon_write --&gt; off
httpd_builtin_scripting --&gt; on
httpd_can_check_spam --&gt; off
httpd_can_connect_ftp --&gt; off
httpd_can_connect_ldap --&gt; off
httpd_can_connect_mythtv --&gt; off
httpd_can_connect_zabbix --&gt; off
httpd_can_network_connect --&gt; off
httpd_can_network_connect_cobbler --&gt; off
httpd_can_network_connect_db --&gt; off
httpd_can_network_memcache --&gt; off
httpd_can_network_relay --&gt; off
httpd_can_sendmail --&gt; off
httpd_dbus_avahi --&gt; off
httpd_dbus_sssd --&gt; off
httpd_dontaudit_search_dirs --&gt; off
httpd_enable_cgi --&gt; on
httpd_enable_ftp_server --&gt; off
httpd_enable_homedirs --&gt; off
httpd_execmem --&gt; off
httpd_graceful_shutdown --&gt; on
httpd_manage_ipa --&gt; off
httpd_mod_auth_ntlm_winbind --&gt; off
httpd_mod_auth_pam --&gt; off
httpd_read_user_content --&gt; off
httpd_run_ipa --&gt; off
httpd_run_preupgrade --&gt; off
httpd_run_stickshift --&gt; off
httpd_serve_cobbler_files --&gt; off
httpd_setrlimit --&gt; off
httpd_ssi_exec --&gt; off
httpd_sys_script_anon_write --&gt; off
httpd_tmp_exec --&gt; off
httpd_tty_comm --&gt; off
httpd_unified --&gt; off
httpd_use_cifs --&gt; off
httpd_use_fusefs --&gt; off
httpd_use_gpg --&gt; off
httpd_use_nfs --&gt; off
httpd_use_openstack --&gt; off
httpd_use_sasl --&gt; off
httpd_verify_dns --&gt; off
</code></p>

<p>As you can see, by default Apache is very limited in what it can do. Let&rsquo;s change that and allow it to connect to the DB server, and make the change persist across reboots:</p>

<p><code>plain
setsebool -P httpd_can_network_connect_db 1
</code></p>

<p>If you check again, you will see that the <code>httpd_can_network_connect_db</code> boolean is now set to on. I&rsquo;ve used the code from the <a href="http://php.net/manual/en/function.mysqli-connect.php">PHP mysqli_connect() documentation</a> to check the connection status, and finally, it went from failure to success.</p>

<p>``` php</p>

<p>&lt;?php
$link = mysqli_connect(&ldquo;127.0.0.1&rdquo;, &ldquo;my_user&rdquo;, &ldquo;my_password&rdquo;, &ldquo;my_db&rdquo;);</p>

<p>if (!$link) {</p>

<pre><code>echo "Error: Unable to connect to MySQL." . PHP_EOL;
echo "Debugging errno: " . mysqli_connect_errno() . PHP_EOL;
echo "Debugging error: " . mysqli_connect_error() . PHP_EOL;
exit;
</code></pre>

<p>}</p>

<p>echo &ldquo;Success: A proper connection to MySQL was made! The my_db database is great.&rdquo; . PHP_EOL;
echo &ldquo;Host information: &rdquo; . mysqli_get_host_info($link) . PHP_EOL;</p>

<p>mysqli_close($link);
?>
```</p>

<p>Next, I made a really basic, vulnerable page just to see if things are working. I placed the following PHP file in my web server directory:</p>

<p>``` php</p>

<p><html></p>

<p><form action="reallyproform.php" method="post">
   <p>Enter a name in this box to see if you know anyone in the VIP area: <input type="text" name="username" /></p>
   <input type="submit" name="submit" value="Submit" />
</form></p>

<p></body></p>

<p></html></p>

<p>&lt;?php
$link = mysqli_connect(&ldquo;127.0.0.1&rdquo;, &ldquo;username&rdquo;, &ldquo;password&rdquo;, &ldquo;database name&rdquo;);</p>

<p>$username = $_POST[&lsquo;username&rsquo;];</p>

<p>$query = &ldquo;SELECT * FROM users WHERE name = &lsquo;&rdquo;.$username.&ldquo;&rsquo;&rdquo;;
$result = mysqli_query($link,$query);</p>

<p>if(mysqli_num_rows($result)>=1)</p>

<pre><code>       {
        echo"Yes you are. Proceed";
       }
</code></pre>

<p>else
{
echo &ldquo;Are you sure you&rsquo;re supposed to be here?&rdquo;;
}</p>

<p>mysqli_close($link);
?></p>

<p>```</p>

<p><img class="center" src="/images/sysadmin/page.png" title="&lsquo;Sample PHP page&rsquo; &lsquo;PHP form&rsquo;" ></p>

<p>If you enter a valid username, you will just get a message, but this was just an example to show a working connection between the PHP code hosted on the server and the MySQL database.</p>

<h3>phpMyAdmin setup</h3>

<p>Chances are, you won&rsquo;t feel an urge to always interact with your DB via the command line. The last step in this post is to install and configure phpMyAdmin in order to do all the SQL operations from a web interface.</p>

<p>First, install it with the following command:</p>

<p><code>plain
yum install phpmyadmin
</code></p>

<p>Restart Apache and go to <a href="http://127.0.0.1/phpmyadmin">http://127.0.0.1/phpmyadmin</a> to see your new phpMyAdmin interface.</p>

<p>``` plain
/ You plan things that you do not even \
| attempt because of your extreme      |
\ caution.                             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
