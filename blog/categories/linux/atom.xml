<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-02-13T12:48:13-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Configuring SGID directories]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/13/lfcs-prep-configuring-sgid-directories/"/>
    <updated>2018-02-13T12:39:42-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/13/lfcs-prep-configuring-sgid-directories</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll see how to configure SGID directories to share files between members of the same group.</p>

<!-- more -->


<p>I created a group called saiyans with a GID of 9000 to separate it from the rest of the groups:</p>

<p><code>
groupadd -g 9000 saiyans
</code></p>

<p>I made a directory that will be used to share files within the group:</p>

<p><code>
mkdir /opt/invasion_plans
</code></p>

<p>Changed the ownership of the directory to the nobody user and the saiyans group.</p>

<p><code>
chown nobody:saiyans /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxr-xr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Set Group ID:</p>

<p><code>
chmod g+s /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxr-sr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>There are no write permissions yet, so have to assign them:</p>

<p><code>
chmod g+w /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxrwsr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Removed the permissions for the other users:</p>

<p><code>
chmod o-rwx /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxrws---. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Now I added 2 users to the saiyans group:</p>

<p><code>
useradd -G saiyans kakarot
useradd -G saiyans vegeta
cat /etc/group | grep saiyans
saiyans:x:9000:kakarot,vegeta
</code></p>

<p>And tested it:</p>

<p><code>
su - kakarot
echo kamehameha &gt; /opt/invasion_plans/boom
su - vegeta
echo 'final flash' &gt; /opt/invasion_plans/bang
[kakarot@rhel7 ~]$ cat /opt/invasion_plans/bang
final flash
[vegeta@rhel7 ~]$ cat /opt/invasion_plans/boom
kamehameha
</code></p>

<p>In case users need to be restricted from deleting files they didn&rsquo;t create, you can set the sticky bit with <code>chmod +t /opt/invasion_plans</code></p>

<p>```</p>

<hr />

<p>/ Your lucky number is 3552664958674928. \
\ Watch for it everywhere.               /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Managing encrypted partitions]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/12/lfcs-prep-managing-encrypted-partitions/"/>
    <updated>2018-02-12T12:39:28-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/12/lfcs-prep-managing-encrypted-partitions</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll go over creating LUKS-encrypted partitions with <strong>cryptsetup</strong>. LUKS (Linux Unified Key Setup) is a block device encryption format that is the standard on Linux systems. Also, because it stores all the necessary data in the partition header, it&rsquo;s easy to migrate partitions.</p>

<!-- more -->


<p>To get an overview of all the cryptographic ciphers that the system can use, look in <code>/proc/crypto</code>:</p>

<p><code>
 cat /proc/crypto | grep name
name         : crc32
name         : __ghash
name         : ghash
name         : __ghash
name         : xts(aes)
name         : lrw(aes)
name         : __xts-aes-aesni
name         : __lrw-aes-aesni
name         : pcbc(aes)
name         : rfc4106(gcm(aes))
name         : __gcm-aes-aesni
name         : ctr(aes)
name         : __ctr-aes-aesni
name         : cbc(aes)
name         : __ecb-aes-aesni
name         : ecb(aes)
name         : __cbc-aes-aesni
name         : __ecb-aes-aesni
name         : __aes-aesni
name         : aes
name         : crct10dif
name         : crct10dif
name         : crc32c
name         : hmac(sha256)
name         : hmac(sha1)
name         : lzo
name         : crc32c
name         : aes
name         : sha224
name         : sha256
name         : sha1
name         : md5
name         : sha224
name         : sha256
name         : sha1
name         : aes
</code></p>

<p>For this demo, I will be using a 200MB partition called /dev/sdb1. The below command initializes the partition as a LUKS device and you have to configure a passphrase at this step.</p>

<p>```
cryptsetup luksFormat /dev/sdb1</p>

<h1>WARNING!</h1>

<p>This will overwrite data on /dev/sdb1 irrevocably.</p>

<p>Are you sure? (Type uppercase yes): YES
Enter passphrase:
Verify passphrase:
```</p>

<p>You can check out the header:</p>

<p>```
cryptsetup luksDump /dev/sdb1
LUKS header information for /dev/sdb1</p>

<p>Version:           1
Cipher name:       aes
Cipher mode:       xts-plain64
Hash spec:         sha256
Payload offset:    4096
MK bits:           256
MK digest:         6b 5e c2 bb 77 f9 0a 0d d4 67 4d 6f 01 a1 df 33 ce d7 94 b2
MK salt:           42 9d d7 5f 3b 6c c1 0b 55 53 d1 fd 28 bd 73 27</p>

<pre><code>               64 63 bb 70 02 de 33 46 0c 4f 2e 07 a9 a7 28 52 
</code></pre>

<p>MK iterations:     68500
UUID:              85b6a404-b24e-4c31-baf3-75cb3f041054</p>

<p>Key Slot 0: ENABLED</p>

<pre><code>Iterations:             547007
Salt:                   4d 13 8b 20 74 cb 88 dd 8e dc b3 b0 2c ca 83 4b 
                          bd ab 12 2d 95 57 72 06 00 25 11 0e 43 b8 dc 81 
Key material offset:    8
AF stripes:                4000
</code></pre>

<p>Key Slot 1: DISABLED
Key Slot 2: DISABLED
Key Slot 3: DISABLED
Key Slot 4: DISABLED
Key Slot 5: DISABLED
Key Slot 6: DISABLED
Key Slot 7: DISABLED
```</p>

<p>Next, create a mapping between the opened LUKS partition and the device mapper.</p>

<p><code>
cryptsetup --verbose luksOpen /dev/sdb1 hidden
Enter passphrase for /dev/sdb1:
Key slot 0 unlocked.
Command successful.
</code></p>

<p>View the mapping details:</p>

<p><code>
ls -l /dev/mapper/hidden
lrwxrwxrwx. 1 root root 7 Feb  9 18:29 /dev/mapper/hidden -&gt; ../dm-2
</code></p>

<p>If you want to have more insight into the status of the mapping:</p>

<p><code>
cryptsetup -v status hidden
/dev/mapper/hidden is active.
  type:    LUKS1
  cipher:  aes-xts-plain64
  keysize: 256 bits
  device:  /dev/sdb1
  offset:  4096 sectors
  size:    405504 sectors
  mode:    read/write
Command successful.
</code></p>

<p>Format the partition with the filesystem of your choice:</p>

<p>```
mkfs -t ext4 /dev/mapper/hidden
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
50800 inodes, 202752 blocks
10137 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=33816576
25 block groups
8192 blocks per group, 8192 fragments per group
2032 inodes per group
Superblock backups stored on blocks:</p>

<pre><code>8193, 24577, 40961, 57345, 73729
</code></pre>

<p>Allocating group tables: done                          <br/>
Writing inode tables: done                          <br/>
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done
```</p>

<p>I made a folder for mounting the new encrypted partition and mounted it:</p>

<p>```
mount -v /dev/mapper/hidden /mnt/hidden
mount: /mnt/hidden does not contain SELinux labels.</p>

<pre><code>   You just mounted an file system that supports labels which does not
   contain labels, onto an SELinux box. It is likely that confined
   applications will generate AVC messages and not be allowed access to
   this file system.  For more details see restorecon(8) and mount(8).
</code></pre>

<p>mount: /dev/mapper/hidden mounted on /mnt/hidden.
```</p>

<p>When done working on it, you can unmount it:</p>

<p><code>
umount -v /mnt/hidden
umount: /mnt/hidden (/dev/mapper/hidden) unmounted
</code></p>

<p>And then remove the mapping:</p>

<p><code>
cryptsetup --verbose luksClose hidden
Command successful.
</code></p>

<p>To remount it, just go through the above steps again. If you want to mount it at boot, you need to take note of some UUIDS:</p>

<p><code>
lsblk -o name,uuid,mountpoint
NAME          UUID                                   MOUNTPOINT
sda                                                  
├─sda1        b8e2fb99-bf4c-4632-883b-8ed5c2350b1e   /boot
└─sda2        PLxZXl-aHBf-9VPQ-XOd1-eLMH-cWOW-NhjdcP
  ├─rhel-root 2c0268ac-c31a-462d-b5b9-41bdfbecd75d   /
  └─rhel-swap 6544d880-b634-4566-a68d-d3a58cec4cf6   [SWAP]
sdb                                                  
└─sdb1        85b6a404-b24e-4c31-baf3-75cb3f041054   
  └─hidden    ab98b274-9d34-41f0-9178-4f8c4b7e8a77   
sr0                                                  
</code></p>

<p>Then you need to edit <code>/etc/crypttab</code>:</p>

<p><code>
name device &lt;password&gt; &lt;options&gt;
</code></p>

<p>Device refers to the block device or its UUID. The entries between tags are optional. In my case, the entry would look like this (the UUID is of /dev/sdb1)</p>

<p><code>
cat /etc/crypttab
hidden UUID=85b6a404-b24e-4c31-baf3-75cb3f041054
</code></p>

<p>And edit /etc/fstab like you would for any other partition (UUID refers to the hidden mapping):</p>

<p><code>
UUID=ab98b274-9d34-41f0-9178-4f8c4b7e8a77 /mnt/hidden ext4 defaults 0 0
</code></p>

<p>Now you will be prompted at boot for the password. If you want to use a key for automatic unlocking, create a key file (here a random key of 4096 bytes length):</p>

<p><code>
dd if=/dev/urandom of=/root/key bs=1024 count=4
4+0 records in
4+0 records out
4096 bytes (4.1 kB) copied, 0.00100253 s, 4.1 MB/s
</code></p>

<p>Make it only readable by root with <code>chmod 400 /root/key</code></p>

<p>Add the key for the encrypted volume:</p>

<p><code>
cryptsetup -v luksAddKey /dev/sdb1 /root/key
Enter any existing passphrase:
Key slot 0 unlocked.
Key slot 0 unlocked.
Command successful.
</code></p>

<p>And add the path of the key file to /etc/crypttab</p>

<p><code>
cat /etc/crypttab
hidden UUID=85b6a404-b24e-4c31-baf3-75cb3f041054 /root/key
</code></p>

<p>Now the volume will be unlocked automatically without the need of entering a passphrase.</p>

<p>```</p>

<hr />

<p>/ You definitely intend to start living \
\ sometime soon.                        /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - LDAP server and client configuration]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/11/lfcs-prep-ldap-server-and-client-configuration/"/>
    <updated>2018-02-11T10:37:49-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/11/lfcs-prep-ldap-server-and-client-configuration</id>
    <content type="html"><![CDATA[<p>Something that you may come up with in the exam and that I&rsquo;ve been avoiding is the LDAP topic. In this post we&rsquo;ll look at server and client configuration for LDAP.</p>

<p>For this scenario, the hostname of my LDAP server is centos.example.com. The domain is example.com and the entry is inside /etc/hosts</p>

<p>I used <a href="https://www.certdepot.net/rhel7-configure-ldap-directory-service-user-connection/">CertDepot</a> as inspiration..the LDAP syntax and topic really keeps me away from approaching it.</p>

<!-- more -->


<h2>Server configuration</h2>

<p>To get started, install these packages:</p>

<p><code>
yum install -y openldap openldap-clients openldap-servers migrationtools
</code></p>

<p>Some info about them:</p>

<ul>
<li><p>openldap is the open source implementation of LDAP</p></li>
<li><p>openldap-clients contains LDAP client utilities</p></li>
<li><p>openldap-servers is the server package</p></li>
<li><p>The MigrationTools are a set of Perl scripts for migrating users, groups, aliases, hosts, netgroups, networks, protocols, RPCs, and services from existing nameservices (flat files, NIS, and NetInfo) to LDAP.</p></li>
</ul>


<p>Create LDAP password from a key, (the string secret below):</p>

<p><code>
slappasswd -s secret -n &gt; /etc/openldap/passwd
</code></p>

<p>Inside the file take note of the generated password: <code>{SSHA}T4srVIBK+rJ9DXlVG7dvZnnAQhAZuO07</code></p>

<p>Generate an X509 certificate valid for 1 year (note the paths of the certificate and private key):</p>

<p><code>
openssl req -new -x509 -nodes -out /etc/openldap/certs/cert.pem -keyout /etc/openldap/certs/key.pem -days 365
</code></p>

<p>At the prompt, you can leave as blank the values except the below, where you put your server&rsquo;s hostname:</p>

<p><code>
Common Name (eg, your name or your server's hostname) []:centos.example.com
</code></p>

<p>Change the ownership of the files inside <code>/etc/openldap/certs</code> and change the permissions of the private key:</p>

<p><code>
cd /etc/openldap/certs
chown ldap:ldap *
chmod 600 key.pem
ll
total 88
-rw-r--r--. 1 ldap ldap 65536 Feb 11 14:08 cert8.db
-rw-r--r--. 1 ldap ldap  1298 Feb 11 14:27 cert.pem
-rw-r--r--. 1 ldap ldap 16384 Feb 11 14:08 key3.db
-rw-------. 1 ldap ldap  1704 Feb 11 14:27 key.pem
-r--r-----. 1 ldap ldap    45 Apr 26  2016 password
-rw-r--r--. 1 ldap ldap 16384 Apr 26  2016 secmod.db
</code></p>

<p>Copy the LDAP database:</p>

<p><code>
cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
</code></p>

<p>Check the slapd configuration (below errors are safe):</p>

<p><code>
slaptest
5a8038c4 hdb_db_open: database "dc=my-domain,dc=com": db_open(/var/lib/ldap/id2entry.bdb) failed: No such file or directory (2).
5a8038c4 backend_startup_one (type=hdb, suffix="dc=my-domain,dc=com"): bi_db_open failed! (2)
slap_startup failed (test would succeed using the -u switch)
</code></p>

<p>Change the ownership of the DB to ldap:</p>

<p><code>
chown ldap:ldap /var/lib/ldap/*
</code></p>

<p>Now start the service</p>

<p><code>
systemctl start slapd
</code></p>

<p>Check that the LDAP service is listening:</p>

<p><code>
netstat -lpt | grep ldap
tcp        0      0 0.0.0.0:ldap            0.0.0.0:*               LISTEN      5558/slapd          
tcp6       0      0 [::]:ldap               [::]:*                  LISTEN      5558/slapd    
</code></p>

<p>Next you have to add some LDAP schemas</p>

<p><code>
cd /etc/openldap/schema
</code></p>

<p>Mainly, add the following:</p>

<ul>
<li>cosine (Cosine and Internet X.500)</li>
</ul>


<p><code>
ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f cosine.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=cosine,cn=schema,cn=config"
</code></p>

<ul>
<li>nis (Network Information Services)</li>
</ul>


<p><code>
ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f nis.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=nis,cn=schema,cn=config"
</code></p>

<p>Create the <code>/etc/openldap/changes.ldif</code> file with the below content and remember the password value from earlier:</p>

<p>```
dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=example,dc=com</p>

<p>dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=example,dc=com</p>

<p>dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: {SSHA}T4srVIBK+rJ9DXlVG7dvZnnAQhAZuO07</p>

<p>dn: cn=config
changetype: modify
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/cert.pem</p>

<p>dn: cn=config
changetype: modify
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/key.pem</p>

<p>dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: -1</p>

<p>dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base=&ldquo;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&rdquo; read by dn.base=&ldquo;cn=Manager,dc=example,dc=com&rdquo; read by * none
```</p>

<p>In summary, here you have to be mindful of the certificate and key paths, and of your previously generated password.</p>

<p>Now create the configuration:</p>

<p>```
ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/openldap/changes.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry &ldquo;olcDatabase={2}hdb,cn=config&rdquo;</p>

<p>modifying entry &ldquo;olcDatabase={2}hdb,cn=config&rdquo;</p>

<p>modifying entry &ldquo;olcDatabase={2}hdb,cn=config&rdquo;</p>

<p>modifying entry &ldquo;cn=config&rdquo;</p>

<p>modifying entry &ldquo;cn=config&rdquo;</p>

<p>modifying entry &ldquo;cn=config&rdquo;</p>

<p>modifying entry &ldquo;olcDatabase={1}monitor,cn=config&rdquo;
```</p>

<p>Create the file <code>/etc/openldap/base.ldif</code> with the following content:</p>

<p>```
dn: dc=example,dc=com
dc: example
objectClass: top
objectClass: domain</p>

<p>dn: ou=People,dc=example,dc=com
ou: People
objectClass: top
objectClass: organizationalUnit</p>

<p>dn: ou=Group,dc=example,dc=com
ou: Group
objectClass: top
objectClass: organizationalUnit
```</p>

<p>Create the directory structure:</p>

<p>```
ldapadd -x -w secret -D cn=Manager,dc=example,dc=com -f /etc/openldap/base.ldif
adding new entry &ldquo;dc=example,dc=com&rdquo;</p>

<p>adding new entry &ldquo;ou=People,dc=example,dc=com&rdquo;</p>

<p>adding new entry &ldquo;ou=Group,dc=example,dc=com&rdquo;
```</p>

<p>This command uses simple authentication and reads the previously created file.</p>

<p>Now it&rsquo;s time to create a sample user account and see if things are working:</p>

<p><code>
mkdir /home/ldap
useradd -d /home/ldap/sam sam
passwd sam
</code></p>

<p>Some additional steps are needed for user account migration:</p>

<p><code>
cd /usr/share/migrationtools
</code></p>

<p>Edit <strong>migrate_common.ph</strong> to have your domain values:</p>

<p>```</p>

<h1>Default DNS domain</h1>

<p>$DEFAULT_MAIL_DOMAIN = &ldquo;example.com&rdquo;;</p>

<h1>Default base</h1>

<p>$DEFAULT_BASE = &ldquo;dc=example,dc=com&rdquo;;
```</p>

<p>Add the user to the directory:</p>

<p><code>
cat /etc/passwd | grep sam &gt; passwd
cat passwd
sam:x:1004:1004::/home/ldap/sam:/bin/bash
ldapadd -x -w secret -D cn=Manager,dc=example,dc=com -f users.ldif
./migrate_passwd.pl passwd users.ldif
</code></p>

<p>Check out the <em>users.ldif</em> file:</p>

<p><code>
cat users.ldif
dn: uid=sam,ou=People,dc=example,dc=com
uid: sam
cn: sam
objectClass: account
objectClass: posixAccount
objectClass: top
objectClass: shadowAccount
userPassword: {crypt}$6$L49gzmY1$n0RNoX86rhT4QMvmsKWkMruHT/BCh7yBm2cQOdb4pbOA7XM0RB4d4GsoDpSILQSjYduiPponzFDb8O7bIb1kA.
shadowLastChange: 17573
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
loginShell: /bin/bash
uidNumber: 1004
gidNumber: 1004
homeDirectory: /home/ldap/sam
</code></p>

<p>Add the user entry:</p>

<p><code>
ldapadd -x -w secret -D cn=Manager,dc=example,dc=com -f users.ldif
adding new entry "uid=sam,ou=People,dc=example,dc=com"
</code></p>

<p>Do the same for group:</p>

<p><code>
cat /etc/group | grep sam &gt; group
cat group
sam:x:1004:
</code></p>

<p>Migrate the group:</p>

<p><code>
./migrate_group.pl group groups.ldif
</code></p>

<p>Check the groups.ldif file:</p>

<p><code>
cat groups.ldif
dn: cn=sam,ou=Group,dc=example,dc=com
objectClass: posixGroup
objectClass: top
cn: sam
userPassword: {crypt}x
gidNumber: 1004
</code></p>

<p>Add the group:</p>

<p><code>
ldapadd -x -w secret -D cn=Manager,dc=example,dc=com -f groups.ldif
adding new entry "cn=sam,ou=Group,dc=example,dc=com"
</code></p>

<p>Now search for the user:</p>

<p>```
ldapsearch -x cn=sam -b dc=example,dc=com</p>

<h1>extended LDIF</h1>

<p>#</p>

<h1>LDAPv3</h1>

<h1>base &lt;dc=example,dc=com> with scope subtree</h1>

<h1>filter: cn=sam</h1>

<h1>requesting: ALL</h1>

<p>#</p>

<h1>sam, People, example.com</h1>

<p>dn: uid=sam,ou=People,dc=example,dc=com
uid: sam
cn: sam
objectClass: account
objectClass: posixAccount
objectClass: top
objectClass: shadowAccount
userPassword:: e2NyeXB0fSQ2JEw0OWd6bVkxJG4wUk5vWDg2cmhUNFFNdm1zS1drTXJ1SFQvQkN
 oN3lCbTJjUU9kYjRwYk9BN1hNMFJCNGQ0R3NvRHBTSUxRU2pZZHVpUHBvbnpGRGI4TzdiSWIxa0Eu
shadowLastChange: 17573
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
loginShell: /bin/bash
uidNumber: 1004
gidNumber: 1004
homeDirectory: /home/ldap/sam</p>

<h1>sam, Group, example.com</h1>

<p>dn: cn=sam,ou=Group,dc=example,dc=com
objectClass: posixGroup
objectClass: top
cn: sam
userPassword:: e2NyeXB0fXg=
gidNumber: 1004</p>

<h1>search result</h1>

<p>search: 2
result: 0 Success</p>

<h1>numResponses: 3</h1>

<h1>numEntries: 2</h1>

<p>```</p>

<p>You might also need to allow ldap in the firewall.</p>

<h2>Client configuration</h2>

<p>If you hoped it was over, we still have to verify the authentication from a client machine. On my client, I also added the server in /etc/hosts:</p>

<p><code>
192.168.217.131 centos.example.com
</code></p>

<p>The interface used for configuring authentication is <code>authconfig</code>. For this example I will go over the <strong>nslcd</strong> route.</p>

<p>On the client, install the needed packages:</p>

<p><code>
yum install -y openldap-clients nss-pam-ldapd
</code></p>

<p>Run the following:</p>

<p><code>
authconfig --enableforcelegacy --update
authconfig --enableldap --enableldapauth --ldapserver="centos.example.com" --ldapbasedn="dc=example,dc=com" --update
</code></p>

<p>Download the certificate:</p>

<p><code>
scp root@centos.example.com:/etc/openldap/certs/cert.pem /etc/openldap/cacerts/cert.pem
root@centos.example.com's password:
cert.pem                                      100% 1298   107.3KB/s   00:00    
</code></p>

<p>Enable TLS:</p>

<p><code>
authconfig --enableldaptls --update
</code></p>

<p>You can do a getent or try to login as the LDAP user to see if it works.</p>

<p>```</p>

<hr />

<p>/ Your temporary financial embarrassment \
| will be relieved in a surprising       |
\ manner.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Configure caching-only DNS]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/10/lfcs-prep-configure-caching-only-dns/"/>
    <updated>2018-02-10T14:04:48-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/10/lfcs-prep-configure-caching-only-dns</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll take a look at setting up a caching only DNS server for the LFCS exam objectives.</p>

<!-- more -->


<p>First, install the necessary DNS packages: <code>yum install -y bind bind-utils</code>.</p>

<p>Then you will have to do some editing in <code>/etc/named.conf</code>. In particular, you are interested in the below:</p>

<p><code>
listen-on port 53 { 127.0.0.1; any; };
allow-query     { localhost; any; };
allow-query-cache     { localhost; any; };
</code></p>

<p>The <em>allow-query</em> option deals with who can send queries to the server, while the <em>allow-query-cache</em> allows access to cached records</p>

<p>You have to ensure the named.conf file has the proper permissions. It needs to be owned by root and belong to the group named:</p>

<p><code>
ls -l /etc/named.conf
-rw-r-----. 1 root named 1754 Feb 10 19:46 /etc/named.conf
</code></p>

<p>Check the SELinux contexts:</p>

<p><code>
ls -lZ /etc/named.*
-rw-r-----. root named unconfined_u:object_r:etc_t:s0   /etc/named.conf
-rw-r--r--. root named system_u:object_r:etc_t:s0       /etc/named.iscdlv.key
-rw-r-----. root named system_u:object_r:named_conf_t:s0 /etc/named.rfc1912.zones
-rw-r--r--. root named system_u:object_r:etc_t:s0       /etc/named.root.key
</code></p>

<p>Check the config file for syntax errors before trying anything:</p>

<p><code>
named-checkconf /etc/named.conf
</code></p>

<p>Start the DNS service:</p>

<p><code>
systemctl start named
</code></p>

<p>Open port 53 on the firewall:</p>

<p><code>
firewall-cmd --add-port=53/udp
</code></p>

<p>On the client, add the DNS server:</p>

<p><code>
nmcli con mod ens33 ipv4.dns "192.168.217.131"
</code></p>

<p>Restart the connection and NetworkManager. Check that the nameserver has been added in <code>/etc/resolv.conf</code>. Now you can test it:</p>

<p>```
nslookup github.com
Server:     192.168.217.131
Address:    192.168.217.131#53</p>

<p>Non-authoritative answer:
Name:   github.com
Address: 192.30.253.113
Name:   github.com
Address: 192.30.253.112
```</p>

<p>If you need to add a zone to your DNS server, take a look at the sample zone directives in <em>/etc/named.rfc1912.zones</em>:</p>

<p>```
zone &ldquo;localhost.localdomain&rdquo; IN {</p>

<pre><code>type master;
file "named.localhost";
allow-update { none; };
</code></pre>

<p>};
```</p>

<p>You have to add a similar configuration for your zone inside <code>/etc/named.conf</code>. Then you also have to create a zone file inside <strong>/var/named</strong>. For reference, look at an existing one:</p>

<p>```
cat /var/named/named.localhost
$TTL 1D
@   IN SOA  @ rname.invalid. (</p>

<pre><code>                0   ; serial
                1D  ; refresh
                1H  ; retry
                1W  ; expire
                3H )    ; minimum
NS  @
A   127.0.0.1
AAAA    ::1
</code></pre>

<p>```</p>

<p>This should be all that is needed in terms of DNS configuration for LFCS objectives.</p>

<p>```</p>

<hr />

<p>/ This life is yours. Some of it was \
| given to you; the rest, you made   |
\ yourself.                          /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Runlevels and bootloader configuration]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/08/lfcs-prep-runlevels-and-bootloader-configuration/"/>
    <updated>2018-02-08T12:47:30-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/08/lfcs-prep-runlevels-and-bootloader-configuration</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll look at the following LFCS objectives:</p>

<ul>
<li><p>Log into graphical and text mode consoles</p></li>
<li><p>Boot systems into different runlevels manually</p></li>
<li><p>Install, configure and troubleshoot the  bootloader</p></li>
</ul>


<!-- more -->


<h2>systemd targets</h2>

<p>First, let&rsquo;s take a look at all the available targets:</p>

<p>```
systemctl list-units &mdash;type=target &mdash;all
  UNIT                   LOAD      ACTIVE   SUB    DESCRIPTION
  basic.target           loaded    active   active Basic System
  cryptsetup.target      loaded    active   active Encrypted Volumes
  emergency.target       loaded    inactive dead   Emergency Mode
  final.target           loaded    inactive dead   Final Step
  getty.target           loaded    active   active Login Prompts
  graphical.target       loaded    active   active Graphical Interface
  local-fs-pre.target    loaded    active   active Local File Systems (Pre)
  local-fs.target        loaded    active   active Local File Systems
  multi-user.target      loaded    active   active Multi-User System
  network-online.target  loaded    active   active Network is Online
  network-pre.target     loaded    inactive dead   Network (Pre)
  network.target         loaded    active   active Network
  nfs-client.target      loaded    active   active NFS client services
  nss-lookup.target      loaded    inactive dead   Host and Network Name Lookups
  nss-user-lookup.target loaded    active   active User and Group Name Lookups
  paths.target           loaded    active   active Paths
  remote-fs-pre.target   loaded    active   active Remote File Systems (Pre)
  remote-fs.target       loaded    active   active Remote File Systems
  rescue.target          loaded    inactive dead   Rescue Mode
  rpcbind.target         loaded    inactive dead   RPC Port Mapper
  shutdown.target        loaded    inactive dead   Shutdown
  slices.target          loaded    active   active Slices
  sockets.target         loaded    active   active Sockets
  swap.target            loaded    active   active Swap
  sysinit.target         loaded    active   active System Initialization
● syslog.target          not-found inactive dead   syslog.target
  time-sync.target       loaded    inactive dead   System Time Synchronized
  timers.target          loaded    active   active Timers
  umount.target          loaded    inactive dead   Unmount All Filesystems</p>

<p>LOAD   = Reflects whether the unit definition was properly loaded.
ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
SUB    = The low-level unit activation state, values depend on unit type.</p>

<p>29 loaded units listed.
To show all installed unit files use &lsquo;systemctl list-unit-files&rsquo;.
```</p>

<p>Out of these, we will only look at the most relevant ones:</p>

<ul>
<li><p><strong>emergency.target</strong> = emergency mode. All you have is systemd and a shell. This is what you use if, for instance, you experience disk failure</p></li>
<li><p><strong>rescue.target</strong> = single user mode. It&rsquo;s the equivalent of runlevel 1. In this mode, the early boot services are started and local mount points are mounted. No networking</p></li>
<li><p><strong>multi-user.target</strong> = multi-user text mode with networking. Equivalent to runlevel 3</p></li>
<li><p><strong>graphical.target</strong> = multi-user with GUI. Equivalent to runlevel 5</p></li>
</ul>


<p>Let&rsquo;s see what the default target is on my system:</p>

<p><code>
systemctl get-default
graphical.target
</code></p>

<p>You can set a new default target with <code>systemctl set-default</code></p>

<p>It is possible to switch to a different target without rebooting, by using <code>systemctl isolate <target name></code>. However, only targets with AllowIsolate=yes in their unit files can be isolated. Isolation will start or stop all necessary services for that particular target. You can use isolation to quickly switch between targets. You can achieve the same with the systemctl command:</p>

<p><code>
systemctl rescue
systemctl emergency
</code></p>

<p>Additionally, you can boot a desired target through the boot menu, by selecting <em>e</em> at the desired entry, and appending at the end of the kernel command line (the one starting with linux16) the entry <strong>systemd.unit=<target name></strong></p>

<h2>bootloader troubleshooting</h2>

<p>Here we&rsquo;re only going to look at the grub2 bootloader. Its main configuration file is <code>/boot/grub2/grub.cfg</code>, but you&rsquo;re not supposed to edit it directly, but use <code>grub2-mkconfig</code> to generate the configuration. So you first edit the GRUB parameters in <code>/etc/default/grub</code>, and then run grub2-mkconfig to create the cfg file. Let&rsquo;s see the defaults I have:</p>

<p><code>
cat /etc/default/grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="crashkernel=auto rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap rhgb quiet"
GRUB_DISABLE_RECOVERY="true"
</code></p>

<p>After editing those, you can run <code>grub2-mkconfig > /boot/grub2/grub.cfg</code> to create the new boot config file.</p>

<p>If you need to reinstall the bootloader, you can do so with <code>grub2-install</code></p>

<h3>Learn more</h3>

<p><a href="https://fedoraproject.org/wiki/SysVinit_to_Systemd_Cheatsheet">SysVinit to Systemd Cheatsheet</a></p>

<p><a href="https://lists.freedesktop.org/archives/systemd-devel/2016-February/035709.html">emergency mode vs rescue mode</a></p>

<p>```</p>

<hr />

<p>/ You will always get the greatest        \
\ recognition for the job you least like. /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
