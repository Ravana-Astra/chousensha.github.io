<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-01-12T15:03:16-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LFCS prep - NetworkManager configuration]]></title>
    <link href="http://chousensha.github.io/blog/2018/01/11/lfcs-prep-networkmanager-configuration/"/>
    <updated>2018-01-11T13:31:50-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/01/11/lfcs-prep-networkmanager-configuration</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll look over configuring various network settings with <strong>nmcli</strong>, the command line tool for NetworkManager.</p>

<!-- more -->


<p>The first step is to understand how network configuration settings look. Inside the <code>/etc/sysconfig/network-scripts/</code> directory, you can find config files for your network interfaces, under the format of <strong>ifcfg-name</strong>. On my system, it looks like this:</p>

<p><code>
cat ifcfg-Wired_connection_1
HWADDR=00:0C:29:47:D7:A8
TYPE=Ethernet
BOOTPROTO=dhcp
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME="Wired connection 1"
UUID=8d922966-5be4-4633-a99d-71e836e2b31a
ONBOOT=yes
DNS1=8.8.8.8
PEERDNS=yes
PEERROUTES=yes
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
</code></p>

<p>You can find a more complete overview of the options at <a href="https://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-networkscripts-interfaces.html">https://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-networkscripts-interfaces.html</a> , but from a glance at this file, we see the interface is an Ethernet device, it uses DHCP, it&rsquo;s set as the default route for both IPv4 and IPv6 traffic, it&rsquo;s activated at boot time, and also some other details like its MAC address and name.</p>

<p>nmcli is a very powerful tool, and you can press Tab to see options for its use at every stage.</p>

<p>```
nmcli help
Usage: nmcli [OPTIONS] OBJECT { COMMAND | help }</p>

<p>OPTIONS
  -t[erse]                                   terse output
  -p[retty]                                  pretty output
  -m[ode] tabular|multiline                  output mode
  -c[olors] auto|yes|no                      whether to use colors in output
  -f[ields] &lt;field1,field2,&hellip;>|all|common   specify fields to output
  -e[scape] yes|no                           escape columns separators in values
  -a[sk]                                     ask for missing parameters
  -s[how-secrets]                            allow displaying passwords
  -w[ait] <seconds>                          set timeout waiting for finishing operations
  -v[ersion]                                 show program version
  -h[elp]                                    print this help</p>

<p>OBJECT
  g[eneral]       NetworkManager&rsquo;s general status and operations
  n[etworking]    overall networking control
  r[adio]         NetworkManager radio switches
  c[onnection]    NetworkManager&rsquo;s connections
  d[evice]        devices managed by NetworkManager
  a[gent]         NetworkManager secret agent or polkit agent
  m[onitor]       monitor NetworkManager changes
```</p>

<p>Here we will go over a few examples:</p>

<h2>Device options</h2>

<p>```
nmcli device help
Usage: nmcli device { COMMAND | help }</p>

<p>COMMAND := { status | show | set | connect | reapply | modify | disconnect | delete | monitor | wifi | lldp }</p>

<p>  status</p>

<p>  show [<ifname>]</p>

<p>  set [ifname] <ifname> [autoconnect yes|no] [managed yes|no]</p>

<p>  connect <ifname></p>

<p>  reapply <ifname></p>

<p>  modify <ifname> ([+|&ndash;]<setting>.<property> <value>)+</p>

<p>  disconnect <ifname> &hellip;</p>

<p>  delete <ifname> &hellip;</p>

<p>  monitor <ifname> &hellip;</p>

<p>  wifi [list [ifname <ifname>] [bssid <BSSID>]]</p>

<p>  wifi connect &lt;(B)SSID> [password <password>] [wep-key-type key|phrase] [ifname <ifname>]</p>

<pre><code>                     [bssid &lt;BSSID&gt;] [name &lt;name&gt;] [private yes|no] [hidden yes|no]
</code></pre>

<p>  wifi hotspot [ifname <ifname>] [con-name <name>] [ssid <SSID>] [band a|bg] [channel <channel>] [password <password>]</p>

<p>  wifi rescan [ifname <ifname>] [[ssid <SSID to scan>] &hellip;]</p>

<p>  lldp [list [ifname <ifname>]]
```</p>

<ul>
<li>show device status</li>
</ul>


<p><code>
nmcli dev status
DEVICE      TYPE      STATE      CONNECTION         
virbr0      bridge    connected  virbr0             
enp0s3      ethernet  connected  Wired connection 1
lo          loopback  unmanaged  --                 
virbr0-nic  tun       unmanaged  --          
</code></p>

<ul>
<li>list device details</li>
</ul>


<p><code>
nmcli dev show enp0s3
GENERAL.DEVICE:                         enp0s3
GENERAL.TYPE:                           ethernet
GENERAL.HWADDR:                         00:0C:29:47:D7:A8
GENERAL.MTU:                            1500
GENERAL.STATE:                          100 (connected)
GENERAL.CONNECTION:                     Wired connection 1
GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/0
WIRED-PROPERTIES.CARRIER:               on
IP4.ADDRESS[1]:                         192.168.241.130/24
IP4.GATEWAY:                            192.168.241.2
IP4.DNS[1]:                             192.168.241.2
IP4.DNS[2]:                             8.8.8.8
IP4.DOMAIN[1]:                          localdomain
IP6.ADDRESS[1]:                         fe80::d7e8:7b48:831f:a1de/64
IP6.GATEWAY:                            
</code></p>

<h2>Connection options</h2>

<p>```
nmcli con help
Usage: nmcli connection { COMMAND | help }</p>

<p>COMMAND := { show | up | down | add | modify | clone | edit | delete | monitor | reload | load | import | export }</p>

<p>  show [&mdash;active] [&mdash;order <order spec>]
  show [&mdash;active] [id | uuid | path | apath] <ID> &hellip;</p>

<p>  up [[id | uuid | path] <ID>] [ifname <ifname>] [ap <BSSID>] [passwd-file <file with passwords>]</p>

<p>  down [id | uuid | path | apath] <ID> &hellip;</p>

<p>  add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [&mdash; ([+|&ndash;]<setting>.<property> <value>)+]</p>

<p>  modify [&mdash;temporary] [id | uuid | path] <ID> ([+|&ndash;]<setting>.<property> <value>)+</p>

<p>  clone [&mdash;temporary] [id | uuid | path ] <ID> <new name></p>

<p>  edit [id | uuid | path] <ID>
  edit [type &lt;new_con_type>] [con-name &lt;new_con_name>]</p>

<p>  delete [id | uuid | path] <ID></p>

<p>  monitor [id | uuid | path] <ID> &hellip;</p>

<p>  reload</p>

<p>  load <filename> [ <filename>&hellip; ]</p>

<p>  import [&mdash;temporary] type <type> file <file to import></p>

<p>  export [id | uuid | path] <ID> [<output file>]
```</p>

<ul>
<li>look at the available connections and list only the active ones</li>
</ul>


<p><code>
nmcli con show
NAME                UUID                                  TYPE            DEVICE
Wired connection 1  8d922966-5be4-4633-a99d-71e836e2b31a  802-3-ethernet  enp0s3
virbr0              321062a9-495a-4095-b4b5-d1af9c0cc65c  bridge          virbr0
enp0s3              b4c32cc7-c5ff-451c-8af2-9b9124050f99  802-3-ethernet  --  
nmcli con show --active
NAME                UUID                                  TYPE            DEVICE
Wired connection 1  8d922966-5be4-4633-a99d-71e836e2b31a  802-3-ethernet  enp0s3
virbr0              321062a9-495a-4095-b4b5-d1af9c0cc65c  bridge          virbr0
</code></p>

<ul>
<li>list the settings of a particular connection (the double quotes aren&rsquo;t mandatory)</li>
</ul>


<p><code>
nmcli con show "Wired connection 1"
connection.id:                          Wired connection 1
connection.uuid:                        8d922966-5be4-4633-a99d-71e836e2b31a
connection.stable-id:                   --
connection.interface-name:              --
connection.type:                        802-3-ethernet
connection.autoconnect:                 yes
connection.autoconnect-priority:        0
connection.timestamp:                   1515583502
connection.read-only:                   no
connection.permissions:                 
connection.zone:                        --
connection.master:                      --
connection.slave-type:                  --
connection.autoconnect-slaves:          -1 (default)
connection.secondaries:                 
connection.gateway-ping-timeout:        0
connection.metered:                     unknown
connection.lldp:                        -1 (default)
802-3-ethernet.port:                    --
802-3-ethernet.speed:                   0
802-3-ethernet.duplex:                  --
802-3-ethernet.auto-negotiate:          yes
802-3-ethernet.mac-address:             00:0C:29:47:D7:A8
802-3-ethernet.cloned-mac-address:      --
802-3-ethernet.generate-mac-address-mask:--
802-3-ethernet.mac-address-blacklist:   
802-3-ethernet.mtu:                     auto
802-3-ethernet.s390-subchannels:        
802-3-ethernet.s390-nettype:            --
802-3-ethernet.s390-options:            
802-3-ethernet.wake-on-lan:             1 (default)
802-3-ethernet.wake-on-lan-password:    --
ipv4.method:                            auto
ipv4.dns:                               8.8.8.8
ipv4.dns-search:                        
ipv4.dns-options:                       (default)
ipv4.dns-priority:                      0
ipv4.addresses:                         
ipv4.gateway:                           --
ipv4.routes:                            
ipv4.route-metric:                      -1
ipv4.ignore-auto-routes:                no
ipv4.ignore-auto-dns:                   no
ipv4.dhcp-client-id:                    --
ipv4.dhcp-timeout:                      0
ipv4.dhcp-send-hostname:                yes
ipv4.dhcp-hostname:                     --
ipv4.dhcp-fqdn:                         --
ipv4.never-default:                     no
ipv4.may-fail:                          yes
ipv4.dad-timeout:                       -1 (default)
ipv6.method:                            auto
ipv6.dns:                               
ipv6.dns-search:                        
ipv6.dns-options:                       (default)
ipv6.dns-priority:                      0
ipv6.addresses:                         
ipv6.gateway:                           --
ipv6.routes:                            
ipv6.route-metric:                      -1
ipv6.ignore-auto-routes:                no
ipv6.ignore-auto-dns:                   no
ipv6.never-default:                     no
ipv6.may-fail:                          yes
ipv6.ip6-privacy:                       -1 (unknown)
ipv6.addr-gen-mode:                     stable-privacy
ipv6.dhcp-send-hostname:                yes
ipv6.dhcp-hostname:                     --
ipv6.token:                             --
GENERAL.NAME:                           Wired connection 1
GENERAL.UUID:                           8d922966-5be4-4633-a99d-71e836e2b31a
GENERAL.DEVICES:                        enp0s3
GENERAL.STATE:                          activated
GENERAL.DEFAULT:                        yes
GENERAL.DEFAULT6:                       no
GENERAL.VPN:                            no
GENERAL.ZONE:                           --
GENERAL.DBUS-PATH:                      /org/freedesktop/NetworkManager/ActiveConnection/0
GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/Settings/0
GENERAL.SPEC-OBJECT:                    /
GENERAL.MASTER-PATH:                    --
IP4.ADDRESS[1]:                         192.168.241.130/24
IP4.GATEWAY:                            192.168.241.2
IP4.DNS[1]:                             192.168.241.2
IP4.DNS[2]:                             8.8.8.8
IP4.DOMAIN[1]:                          localdomain
DHCP4.OPTION[1]:                        requested_routers = 1
DHCP4.OPTION[2]:                        requested_domain_search = 1
DHCP4.OPTION[3]:                        requested_time_offset = 1
DHCP4.OPTION[4]:                        requested_domain_name = 1
DHCP4.OPTION[5]:                        requested_rfc3442_classless_static_routes = 1
DHCP4.OPTION[6]:                        requested_classless_static_routes = 1
DHCP4.OPTION[7]:                        requested_wpad = 1
DHCP4.OPTION[8]:                        requested_broadcast_address = 1
DHCP4.OPTION[9]:                        next_server = 192.168.241.254
DHCP4.OPTION[10]:                       expiry = 1515584826
DHCP4.OPTION[11]:                       requested_interface_mtu = 1
DHCP4.OPTION[12]:                       requested_subnet_mask = 1
DHCP4.OPTION[13]:                       domain_name = localdomain
DHCP4.OPTION[14]:                       dhcp_message_type = 5
DHCP4.OPTION[15]:                       ip_address = 192.168.241.130
DHCP4.OPTION[16]:                       routers = 192.168.241.2
DHCP4.OPTION[17]:                       requested_static_routes = 1
DHCP4.OPTION[18]:                       subnet_mask = 255.255.255.0
DHCP4.OPTION[19]:                       requested_domain_name_servers = 1
DHCP4.OPTION[20]:                       requested_nis_servers = 1
DHCP4.OPTION[21]:                       requested_ntp_servers = 1
DHCP4.OPTION[22]:                       domain_name_servers = 192.168.241.2
DHCP4.OPTION[23]:                       dhcp_lease_time = 1800
DHCP4.OPTION[24]:                       requested_ms_classless_static_routes = 1
DHCP4.OPTION[25]:                       broadcast_address = 192.168.241.255
DHCP4.OPTION[26]:                       requested_nis_domain = 1
DHCP4.OPTION[27]:                       network_number = 192.168.241.0
DHCP4.OPTION[28]:                       requested_host_name = 1
DHCP4.OPTION[29]:                       dhcp_server_identifier = 192.168.241.254
IP6.ADDRESS[1]:                         fe80::d7e8:7b48:831f:a1de/64
IP6.GATEWAY:                            
</code></p>

<ul>
<li>adding connections</li>
</ul>


<p>```
nmcli con add help
Usage: nmcli connection add { ARGUMENTS | help }</p>

<p>ARGUMENTS := COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [&mdash; ([+|&ndash;]<setting>.<property> <value>)+]</p>

<p>  COMMON_OPTIONS:</p>

<pre><code>              type &lt;type&gt;
              ifname &lt;interface name&gt; | "*"
              [con-name &lt;connection name&gt;]
              [autoconnect yes|no]
              [save yes|no]
              [master &lt;master (ifname, or connection UUID or name)&gt;]
              [slave-type &lt;master connection type&gt;]
</code></pre>

<p>  TYPE_SPECIFIC_OPTIONS:</p>

<pre><code>ethernet:     [mac &lt;MAC address&gt;]
              [cloned-mac &lt;cloned MAC address&gt;]
              [mtu &lt;MTU&gt;]

wifi:         ssid &lt;SSID&gt;
              [mac &lt;MAC address&gt;]
              [cloned-mac &lt;cloned MAC address&gt;]
              [mtu &lt;MTU&gt;]
              [mode infrastructure|ap|adhoc]

wimax:        [mac &lt;MAC address&gt;]
              [nsp &lt;NSP&gt;]

pppoe:        username &lt;PPPoE username&gt;
              [password &lt;PPPoE password&gt;]
              [service &lt;PPPoE service name&gt;]
              [mtu &lt;MTU&gt;]
              [mac &lt;MAC address&gt;]

gsm:          apn &lt;APN&gt;
              [user &lt;username&gt;]
              [password &lt;password&gt;]

cdma:         [user &lt;username&gt;]
              [password &lt;password&gt;]

infiniband:   [mac &lt;MAC address&gt;]
              [mtu &lt;MTU&gt;]
              [transport-mode datagram | connected]
              [parent &lt;ifname&gt;]
              [p-key &lt;IPoIB P_Key&gt;]

bluetooth:    [addr &lt;bluetooth address&gt;]
              [bt-type panu|dun-gsm|dun-cdma]

vlan:         dev &lt;parent device (connection UUID, ifname, or MAC)&gt;
              id &lt;VLAN ID&gt;
              [flags &lt;VLAN flags&gt;]
              [ingress &lt;ingress priority mapping&gt;]
              [egress &lt;egress priority mapping&gt;]
              [mtu &lt;MTU&gt;]

bond:         [mode balance-rr (0) | active-backup (1) | balance-xor (2) | broadcast (3) |
                    802.3ad    (4) | balance-tlb   (5) | balance-alb (6)]
              [primary &lt;ifname&gt;]
              [miimon &lt;num&gt;]
              [downdelay &lt;num&gt;]
              [updelay &lt;num&gt;]
              [arp-interval &lt;num&gt;]
              [arp-ip-target &lt;num&gt;]
              [lacp-rate slow (0) | fast (1)]

bond-slave:   master &lt;master (ifname, or connection UUID or name)&gt;

team:         [config &lt;file&gt;|&lt;raw JSON data&gt;]

team-slave:   master &lt;master (ifname, or connection UUID or name)&gt;
              [config &lt;file&gt;|&lt;raw JSON data&gt;]

bridge:       [stp yes|no]
              [priority &lt;num&gt;]
              [forward-delay &lt;2-30&gt;]
              [hello-time &lt;1-10&gt;]
              [max-age &lt;6-40&gt;]
              [ageing-time &lt;0-1000000&gt;]
              [multicast-snooping yes|no]
              [mac &lt;MAC address&gt;]

bridge-slave: master &lt;master (ifname, or connection UUID or name)&gt;
              [priority &lt;0-63&gt;]
              [path-cost &lt;1-65535&gt;]
              [hairpin yes|no]

vpn:          vpn-type vpnc|openvpn|pptp|openconnect|openswan|libreswan|ssh|l2tp|iodine|...
              [user &lt;username&gt;]

olpc-mesh:    ssid &lt;SSID&gt;
              [channel &lt;1-13&gt;]
              [dhcp-anycast &lt;MAC address&gt;]

adsl:         username &lt;username&gt;
              protocol pppoa|pppoe|ipoatm
              [password &lt;password&gt;]
              [encapsulation vcmux|llc]

tun:          mode tun|tap
              [owner &lt;UID&gt;]
              [group &lt;GID&gt;]
              [pi yes|no]
              [vnet-hdr yes|no]
              [multi-queue yes|no]

ip-tunnel:    mode ipip|gre|sit|isatap|vti|ip6ip6|ipip6|ip6gre|vti6
              remote &lt;remote endpoint IP&gt;
              [local &lt;local endpoint IP&gt;]
              [dev &lt;parent device (ifname or connection UUID)&gt;]

macvlan:      dev &lt;parent device (connection UUID, ifname, or MAC)&gt;
              mode vepa|bridge|private|passthru|source
              [tap yes|no]

vxlan:        id &lt;VXLAN ID&gt;
              remote &lt;IP of multicast group or remote address&gt;
              [local &lt;source IP&gt;]
              [dev &lt;parent device (ifname or connection UUID)&gt;]
              [source-port-min &lt;0-65535&gt;]
              [source-port-max &lt;0-65535&gt;]
              [destination-port &lt;0-65535&gt;]
</code></pre>

<p>  SLAVE_OPTIONS:</p>

<pre><code>bridge:       [priority &lt;0-63&gt;]
              [path-cost &lt;1-65535&gt;]
              [hairpin yes|no]

team:         [config &lt;file&gt;|&lt;raw JSON data&gt;]
</code></pre>

<p>  IP_OPTIONS:</p>

<pre><code>              [ip4 &lt;IPv4 address&gt;] [gw4 &lt;IPv4 gateway&gt;]
              [ip6 &lt;IPv6 address&gt;] [gw6 &lt;IPv6 gateway&gt;]
</code></pre>

<p>```</p>

<ul>
<li>add a new DHCP connection that will start on boot</li>
</ul>


<p><code>
nmcli con add con-name newdhcp type ethernet ifname enp0s3
Connection 'newdhcp' (8c90fcd7-5e40-43c6-819b-47cab3051b5e) successfully added.
nmcli con up newdhcp
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/3)
nmcli con show --active
NAME     UUID                                  TYPE            DEVICE
newdhcp  8c90fcd7-5e40-43c6-819b-47cab3051b5e  802-3-ethernet  enp0s3
virbr0   321062a9-495a-4095-b4b5-d1af9c0cc65c  bridge          virbr0
</code></p>

<ul>
<li>add a static connection</li>
</ul>


<p><code>
nmcli con add con-name static-con ifname enp0s3 autoconnect no type ethernet ip4 192.168.241.120/24 gw4 192.168.241.2
Connection 'static-con' (258c2964-ac43-4ed8-bffa-7ad09967b748) successfully added.
</code></p>

<p>Let&rsquo;s see the IP we started with:</p>

<p>```
ifconfig | grep inet</p>

<pre><code>    inet 192.168.241.130  netmask 255.255.255.0  broadcast 192.168.241.255
</code></pre>

<p>```</p>

<p>And after switching to the static connection:</p>

<p>```
nmcli con up static-con
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4)
nmcli con show &mdash;active
NAME        UUID                                  TYPE            DEVICE
static-con  258c2964-ac43-4ed8-bffa-7ad09967b748  802-3-ethernet  enp0s3
virbr0      321062a9-495a-4095-b4b5-d1af9c0cc65c  bridge          virbr0
ifconfig | grep inet</p>

<pre><code>    inet 192.168.241.120  netmask 255.255.255.0  broadcast 192.168.241.255
</code></pre>

<p>```</p>

<ul>
<li>modifying connections</li>
</ul>


<p>```
nmcli con mod help
Usage: nmcli connection modify { ARGUMENTS | help }</p>

<p>ARGUMENTS := [id | uuid | path] <ID> ([+|&ndash;]<setting>.<property> <value>)+</p>

<p>Modify one or more properties of the connection profile.
The profile is identified by its name, UUID or D-Bus path. For multi-valued
properties you can use optional &lsquo;+&rsquo; or &lsquo;&ndash;&rsquo; prefix to the property name.
The &lsquo;+&rsquo; sign allows appending items instead of overwriting the whole value.
The &lsquo;&ndash;&rsquo; sign allows removing selected items instead of the whole value.</p>

<p>Examples:
nmcli con mod home-wifi wifi.ssid rakosnicek
nmcli con mod em1-1 ipv4.method manual ipv4.addr &ldquo;192.168.1.2/24, 10.10.1.5/8&rdquo;
nmcli con mod em1-1 +ipv4.dns 8.8.4.4
nmcli con mod em1-1 -ipv4.dns 1
nmcli con mod em1-1 -ipv6.addr &ldquo;abbe::cafe/56&rdquo;
nmcli con mod bond0 +bond.options mii=500
nmcli con mod bond0 -bond.options downdelay
```</p>

<ul>
<li>add a DNS server to an existing connection</li>
</ul>


<p><code>
nmcli con show static-con | grep ipv4.dns
ipv4.dns:                               
ipv4.dns-search:                        
ipv4.dns-options:                       (default)
ipv4.dns-priority:                      0
nmcli con mod static-con ipv4.dns 8.8.8.8
nmcli con up static-con
nmcli con show static-con | grep ipv4.dns
ipv4.dns:                               8.8.8.8
ipv4.dns-search:                        
ipv4.dns-options:                       (default)
ipv4.dns-priority:                      0
</code></p>

<h3>Learn more</h3>

<ul>
<li><a href="https://developer.gnome.org/NetworkManager/">NetworkManager documentation</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/networking_guide/">RHEL7 networking guide</a></li>
<li><a href="https://www.certdepot.net/rhel7-get-started-nmcli/">CertDepot NetworkManager guide</a></li>
</ul>


<p>```</p>

<hr />

<p>/ You&rsquo;re currently going through a   \
| difficult transition period called |
\ &ldquo;Life.&rdquo;                            /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Securing SSH]]></title>
    <link href="http://chousensha.github.io/blog/2018/01/05/lfcs-prep-securing-ssh/"/>
    <updated>2018-01-05T16:30:55-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/01/05/lfcs-prep-securing-ssh</id>
    <content type="html"><![CDATA[<p>SSH-ing between various systems is something you will definitely be doing a lot in infosec. So today I&rsquo;ll quickly go over an exam objective of configuring SSH for key based authentication and disabling root logins for extra security.</p>

<!-- more -->


<p>First of all, let&rsquo;s confirm that I can SSH to my machine as root and login with root&rsquo;s password:</p>

<p><code>
ssh root@192.168.217.129
The authenticity of host '192.168.217.129 (192.168.217.129)' can't be established.
ECDSA key fingerprint is SHA256:20TtBMwQAz9KAEK2mApqOksugeZ2yi8oecLRKz8RwB4.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.217.129' (ECDSA) to the list of known hosts.
root@192.168.217.129's password:
Last login: Fri Jan  5 14:04:25 2018
[root@CentOS7 ~]#
</code></p>

<p>The CentOS server&rsquo;s public key has been added to <code>~/.ssh/known_hosts</code> on my client machine, and I was able to login as root with no problem. Now it&rsquo;s time to change these dangerous defaults. On the client, generate a new pair of keys:</p>

<p><code>
ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:OLHfszGKJK7wPNhc6OLZv8NeMKOIDuV0OHmBeynLLVI root@kali
The key's randomart image is:
+---[RSA 2048]----+
|                 |
|   .             |
|  . . .          |
|   + o +         |
|  E.=++ S        |
|.*oOo +o .       |
|=*=o+ ... =      |
|==Bo =.. . =     |
|.=+++++ . .      |
+----[SHA256]-----+
</code></p>

<p>Now you have a private and public key inside the .ssh directory. Take a look at their permissions:</p>

<p><code>
-rw-------  1 root root 1675 Jan  5 16:10 id_rsa
-rw-r--r--  1 root root  391 Jan  5 16:10 id_rsa.pub
</code></p>

<p>The private key has read and write permissions only for the owner (600), while the public key has read/write permissions for the owner, and read also for group and others (644).</p>

<p>The public key won&rsquo;t do any good sitting around on the client machine, it needs to be copied to the server:</p>

<p>```
ssh-copy-id <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#114;&#x6f;&#111;&#x74;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#56;&#46;&#50;&#x31;&#x37;&#46;&#x31;&#x32;&#x39;">&#114;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#x32;&#49;&#x37;&#46;&#x31;&#x32;&#57;</a>
The authenticity of host &lsquo;192.168.217.129 (192.168.217.129)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is SHA256:20TtBMwQAz9KAEK2mApqOksugeZ2yi8oecLRKz8RwB4.
Are you sure you want to continue connecting (yes/no)? yes
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed &mdash; if you are prompted now it is to install the new keys
<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#114;&#111;&#111;&#x74;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x32;&#x31;&#55;&#46;&#49;&#50;&#x39;">&#x72;&#111;&#111;&#x74;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#x32;&#x31;&#x37;&#46;&#49;&#50;&#x39;</a>&rsquo;s password:</p>

<p>Number of key(s) added: 1</p>

<p>Now try logging into the machine, with:   &ldquo;ssh &lsquo;<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x72;&#111;&#111;&#116;&#x40;&#49;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#x2e;&#50;&#49;&#x37;&#46;&#x31;&#50;&#x39;">&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#50;&#x31;&#x37;&#46;&#x31;&#50;&#x39;</a>&rsquo;&rdquo;
and check to make sure that only the key(s) you wanted were added.
```</p>

<p>If you get the error <strong>sign_and_send_pubkey: signing failed: agent refused operation</strong> when trying to SSH to the server, run <em>*ssh-add</em> to add the private key identities to the authentication agent. You can then verify they were added:</p>

<p><code>
ssh-add -l
2048 SHA256:OLHfszGKJK7wPNhc6OLZv8NeMKOIDuV0OHmBeynLLVI /root/.ssh/id_rsa (RSA)
2048 SHA256:OLHfszGKJK7wPNhc6OLZv8NeMKOIDuV0OHmBeynLLVI root@kali (RSA)
</code></p>

<p>Now you should be able to login with the public key:</p>

<p><code>
ssh root@192.168.217.129
Last login: Fri Jan  5 15:06:34 2018 from 192.168.217.132
[root@CentOS7 ~]#
</code></p>

<p>That worked, but we don&rsquo;t want root to be able to directly SSH into our host. So edit the <code>/etc/ssh/sshd_config</code> file on the server. The default settings are commented, and you can add your own changes and leave them uncommented to override the defaults. I added the following to disable root login and password authentication:</p>

<p><code>
PermitRootLogin no
PasswordAuthentication no
</code></p>

<p>Restart ssh and try to login again:</p>

<p><code>
ssh root@192.168.217.129
root@192.168.217.129: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
</code></p>

<p>In practice, you would generate your keys for an account that you will use on that system and if needed, give it sudo privileges to do the work you need.</p>

<p>```</p>

<hr />

<p>/ You learn to write as if to someone \
| else because NEXT YEAR YOU WILL BE  |
\ &ldquo;SOMEONE ELSE.&rdquo;                     /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Resetting root password on CentOS 7]]></title>
    <link href="http://chousensha.github.io/blog/2017/11/11/lfcs-prep-resetting-root-password-on-centos-7/"/>
    <updated>2017-11-11T16:53:18-05:00</updated>
    <id>http://chousensha.github.io/blog/2017/11/11/lfcs-prep-resetting-root-password-on-centos-7</id>
    <content type="html"><![CDATA[<p>So, you got physical access to a machine, but you don&rsquo;t remember (or never knew) the root password. This post will walk you through how to reset the root password on a CentOS 7 system.</p>

<!-- more -->


<p><img class="center" src="/images/sysadmin/rootreset/boot.png" title="&lsquo;boot&rsquo; &lsquo;edit grub boot entry&rsquo;" ></p>

<p>At the boot menu, press <strong>e</strong> to edit the desired boot entry</p>

<p><img class="center" src="/images/sysadmin/rootreset/initram.png" title="&lsquo;initram&rsquo; &lsquo;initram&rsquo;" ></p>

<p>Now go to the end of the line that starts with <strong>linux16</strong> (you can quickly do it with <strong>Ctrl-e</strong> or <strong>End</strong> key, <strong>Ctrl-a</strong> or <strong>Home</strong> for the beginning of a line) and add <code>rd.break enforcing=0</code> to it. The first paramenter will interrupt the boot process to drop into a shell, and the second one sets SELinux to permissive mode, needed for a quicker way of resetting the password that doesn&rsquo;t require file relabeling at the end.</p>

<p>Also remove the <strong>rhgb</strong> and <strong>quiet</strong> parameters to see more debugging information. These are described in <a href="https://www.redhat.com/archives/rhl-list/2004-May/msg07775.html">https://www.redhat.com/archives/rhl-list/2004-May/msg07775.html</a></p>

<blockquote><p>rhgb = redhat graphical boot &ndash; This is a GUI mode booting screen with most of the information hidden while the user
sees a rotating activity icon spining and brief information as to what the computer is doing.</p>

<p>quiet = hides the majority of boot messages before rhgb starts. These are supposed to make the common user more
comfortable. They get alarmed about seeing the kernel and initializing messages, so they hide them for their comfort.</p></blockquote>

<p>Next, press <strong>Ctrl-x</strong> to boot with the new options. You will be dropped into an initramfs switch_root shell.</p>

<p><img class="center" src="/images/sysadmin/rootreset/initramfs.png" title="&lsquo;initramfs switch_root&rsquo; &lsquo;initramfs switch_root shell&rsquo;" ></p>

<p>This could be confusing to someone new. Basically, initramfs is a temporary filesystem loaded into memory, that the kernel can access really early, in order to offload some startup tasks. It is also called early user space, and it takes care of steps that would be too cumbersome to include in the kernel, such as loading kernel modules and drivers needed for boot. This allows the kernel to remain relatively lean and not do by itself all the possible configurations. This initramfs image is a CPIO archive that gets unpacked into a tmpfs (a temporary filesystem stored in memory) and becomes the initial root filesystem.</p>

<p>Now, the filesystem is already mounted read-only inside <code>/sysroot</code>. To makey any changes, you have to mount it as read-write: <code>mount -o remount,rw /sysroot</code></p>

<p><img class="center" src="/images/sysadmin/rootreset/sysroot.png" title="&lsquo;sysroot&rsquo; &lsquo;sysroot mount&rsquo;" ></p>

<p>Finally, change the root directory to /sysroot in order to run a shell from it: <code>chroot /sysroot</code>. Now your prompt will change to <code>sh-4.2#</code> and from here you can change the password normally, by using <em>passwd</em>. You should get the message that all authentication tokens updated successfully. Since you updated the password, you changed <em>/etc/shadow</em> and now it won&rsquo;t be labeled correctly with a SELinux security context. You have to force a relabel of all the files at next boot, by creating an <em>.autorelabel</em> file: <code>touch /.autorelabel</code>.</p>

<p>Now type exit twice to exit the chroot environment first and then to exit the initramfs shell which will cause a reboot. The relabeling will take a while, and then you can use the system.</p>

<p>To skip the relabeling process, if you used <em>enforce=0</em>, you can restore the context of the shadow file with <code>restorecon /etc/shadow</code>. Then you have to remember to set SELinux back to enforcing, by running <code>setenforce 1</code></p>

<p>Apparently, when you have an RHCSA exam, you start from getting a machine that you have to reset the root password for, which is really cool. Don&rsquo;t get caught unprepared!</p>

<h3>Learn more</h3>

<p><a href="https://www.certdepot.net/rhel7-interrupt-boot-gain-access-system/">https://www.certdepot.net/rhel7-interrupt-boot-gain-access-system/</a></p>

<p><a href="http://man7.org/linux/man-pages/man7/dracut.cmdline.7.html">Kernel command line parameters</a></p>

<p><a href="https://unix.stackexchange.com/questions/126217/when-would-you-use-pivot-root-over-switch-root">switch_root and initramfs</a></p>

<p>```</p>

<hr />

<p>/ Be careful of reading health books, you \
| might die of a misprint.                |
|                                         |
\ &mdash; Mark Twain                           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVM virtualization on Linux hosts]]></title>
    <link href="http://chousensha.github.io/blog/2017/09/24/kvm-virtualization-on-linux-hosts/"/>
    <updated>2017-09-24T11:34:34-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/09/24/kvm-virtualization-on-linux-hosts</id>
    <content type="html"><![CDATA[<p>By now you probably noticed that the last topics were centered more around Linux than the usual. That&rsquo;s because I am studying for my LFCS certification, and creating posts as I go through the material. This time, we&rsquo;re going to look at using virtualization on a Linux physical host. Since my only physical Linux at the moment is Kali, this is what I&rsquo;m going to use for today&rsquo;s post.</p>

<!-- more -->


<p>The first step before starting anything else, is to check if virtualization is enabled on your machine. For this, you can query your <code>/proc/cpuinfo</code> file and look for the following flags:</p>

<ul>
<li><p><strong>vmx</strong> for Intel CPUs</p></li>
<li><p><strong>svm</strong> for AMD CPUs</p></li>
</ul>


<p>I already knew the result in my case, but I checked anyway with <code>grep &mdash;color vmx /proc/cpuinfo</code>:</p>

<p><img class="center" src="/images/sysadmin/kvm/vmx.png" title="&lsquo;vmx&rsquo; &lsquo;vmx enabled&rsquo;" ></p>

<p>Ok, the next step is to install the virtualization utilities:</p>

<p><code>
apt-get install qemu-kvm virt-manager libvirt0 qemu-system virt-viewer virt-top
</code></p>

<p>KVM (Kernel Virtual Machine) is a full virtualization solution for Linux on x86 and x64 hardware containing virtualization extensions (Intel VT or AMD-V). It consists of a loadable kernel module, kvm.ko, that provides the core virtualization infrastructure and a processor specific module, kvm-intel.ko or kvm-amd.ko.</p>

<p>libvirt is an API toolkit for managing virtualization hosts</p>

<p>The virt-manager application is a graphical tool for managing virtual machines through libvirt. It primarily targets KVM VMs, but also manages Xen and LXC (linux containers).</p>

<p>virt-viewer allows access to the virtual machine console</p>

<p>virt-top is for monitoring VMs performance</p>

<p>After installing everything, you can go to <code>/etc/libvirt/qemu/networks</code> and look inside the <strong>default.xml</strong> file to see how the default virtual network will be configured:</p>

<p>```</p>

<!--
WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE
OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:
  virsh net-edit default
or other application using the libvirt API.
-->


<p><network>
  <name>default</name>
  <uuid>d67cdb82-233e-44f1-a6ac-9293faa2258d</uuid>
  <forward mode='nat'/>
  <bridge name='virbr0' stp='on' delay='0'/>
  <mac address='52:54:00:b2:a7:6e'/>
  <ip address='192.168.122.1' netmask='255.255.255.0'></p>

<pre><code>&lt;dhcp&gt;
  &lt;range start='192.168.122.2' end='192.168.122.254'/&gt;
&lt;/dhcp&gt;
</code></pre>

<p>  </ip>
</network>
```</p>

<p>Let&rsquo;s see if the default network has been created. Don&rsquo;t forget to start the <strong>libvirtd</strong> daemon first, with <code>systemctl start libvirtd</code> and then use virsh to list the defined networks. <strong>virsh</strong> is a powerful command line interface tool for managing guests and the hypervisor. It can also be used as an interactive prompt.</p>

<p>```
virsh
Welcome to virsh, the virtualization interactive terminal.</p>

<p>Type:  &lsquo;help&rsquo; for help with commands</p>

<pre><code>   'quit' to quit
</code></pre>

<p>virsh # help
Grouped commands:</p>

<p> Domain Management (help keyword &lsquo;domain&rsquo;):</p>

<pre><code>attach-device                  attach device from an XML file
attach-disk                    attach disk device
attach-interface               attach network interface
autostart                      autostart a domain
blkdeviotune                   Set or query a block device I/O tuning parameters.
blkiotune                      Get or set blkio parameters
blockcommit                    Start a block commit operation.
blockcopy                      Start a block copy operation.
blockjob                       Manage active block operations
blockpull                      Populate a disk from its backing image.
blockresize                    Resize block device of domain.
change-media                   Change media of CD or floppy drive
console                        connect to the guest console
cpu-baseline                   compute baseline CPU
cpu-compare                    compare host CPU with a CPU described by an XML file
cpu-stats                      show domain cpu statistics
create                         create a domain from an XML file
define                         define (but don't start) a domain from an XML file
desc                           show or set domain's description or title
destroy                        destroy (stop) a domain
detach-device                  detach device from an XML file
detach-disk                    detach disk device
detach-interface               detach network interface
domdisplay                     domain display connection URI
domfsfreeze                    Freeze domain's mounted filesystems.
domfsthaw                      Thaw domain's mounted filesystems.
domfsinfo                      Get information of domain's mounted filesystems.
domfstrim                      Invoke fstrim on domain's mounted filesystems.
domhostname                    print the domain's hostname
domid                          convert a domain name or UUID to domain id
domif-setlink                  set link state of a virtual interface
domiftune                      get/set parameters of a virtual interface
domjobabort                    abort active domain job
domjobinfo                     domain job information
domname                        convert a domain id or UUID to domain name
domrename                      rename a domain
dompmsuspend                   suspend a domain gracefully using power management functions
dompmwakeup                    wakeup a domain from pmsuspended state
domuuid                        convert a domain name or id to domain UUID
domxml-from-native             Convert native config to domain XML
domxml-to-native               Convert domain XML to native config
dump                           dump the core of a domain to a file for analysis
dumpxml                        domain information in XML
edit                           edit XML configuration for a domain
event                          Domain Events
inject-nmi                     Inject NMI to the guest
iothreadinfo                   view domain IOThreads
iothreadpin                    control domain IOThread affinity
iothreadadd                    add an IOThread to the guest domain
iothreaddel                    delete an IOThread from the guest domain
send-key                       Send keycodes to the guest
send-process-signal            Send signals to processes
lxc-enter-namespace            LXC Guest Enter Namespace
managedsave                    managed save of a domain state
managedsave-remove             Remove managed save of a domain
memtune                        Get or set memory parameters
perf                           Get or set perf event
metadata                       show or set domain's custom XML metadata
migrate                        migrate domain to another host
migrate-setmaxdowntime         set maximum tolerable downtime
migrate-compcache              get/set compression cache size
migrate-setspeed               Set the maximum migration bandwidth
migrate-getspeed               Get the maximum migration bandwidth
migrate-postcopy               Switch running migration from pre-copy to post-copy
numatune                       Get or set numa parameters
qemu-attach                    QEMU Attach
qemu-monitor-command           QEMU Monitor Command
qemu-monitor-event             QEMU Monitor Events
qemu-agent-command             QEMU Guest Agent Command
reboot                         reboot a domain
reset                          reset a domain
restore                        restore a domain from a saved state in a file
resume                         resume a domain
save                           save a domain state to a file
save-image-define              redefine the XML for a domain's saved state file
save-image-dumpxml             saved state domain information in XML
save-image-edit                edit XML for a domain's saved state file
schedinfo                      show/set scheduler parameters
screenshot                     take a screenshot of a current domain console and store it into a file
set-user-password              set the user password inside the domain
setmaxmem                      change maximum memory limit
setmem                         change memory allocation
setvcpus                       change number of virtual CPUs
shutdown                       gracefully shutdown a domain
start                          start a (previously defined) inactive domain
suspend                        suspend a domain
ttyconsole                     tty console
undefine                       undefine a domain
update-device                  update device from an XML file
vcpucount                      domain vcpu counts
vcpuinfo                       detailed domain vcpu information
vcpupin                        control or query domain vcpu affinity
emulatorpin                    control or query domain emulator affinity
vncdisplay                     vnc display
guestvcpus                     query or modify state of vcpu in the guest (via agent)
setvcpu                        attach/detach vcpu or groups of threads
domblkthreshold                set the threshold for block-threshold event for a given block device or it's backing chain element
</code></pre>

<p> Domain Monitoring (help keyword &lsquo;monitor&rsquo;):</p>

<pre><code>domblkerror                    Show errors on block devices
domblkinfo                     domain block device size information
domblklist                     list all domain blocks
domblkstat                     get device block stats for a domain
domcontrol                     domain control interface state
domif-getlink                  get link state of a virtual interface
domifaddr                      Get network interfaces' addresses for a running domain
domiflist                      list all domain virtual interfaces
domifstat                      get network interface stats for a domain
dominfo                        domain information
dommemstat                     get memory statistics for a domain
domstate                       domain state
domstats                       get statistics about one or multiple domains
domtime                        domain time
list                           list domains
</code></pre>

<p> Host and Hypervisor (help keyword &lsquo;host&rsquo;):</p>

<pre><code>allocpages                     Manipulate pages pool size
capabilities                   capabilities
cpu-models                     CPU models
domcapabilities                domain capabilities
freecell                       NUMA free memory
freepages                      NUMA free pages
hostname                       print the hypervisor hostname
maxvcpus                       connection vcpu maximum
node-memory-tune               Get or set node memory parameters
nodecpumap                     node cpu map
nodecpustats                   Prints cpu stats of the node.
nodeinfo                       node information
nodememstats                   Prints memory stats of the node.
nodesuspend                    suspend the host node for a given time duration
sysinfo                        print the hypervisor sysinfo
uri                            print the hypervisor canonical URI
version                        show version
</code></pre>

<p> Interface (help keyword &lsquo;interface&rsquo;):</p>

<pre><code>iface-begin                    create a snapshot of current interfaces settings, which can be later committed (iface-commit) or restored (iface-rollback)
iface-bridge                   create a bridge device and attach an existing network device to it
iface-commit                   commit changes made since iface-begin and free restore point
iface-define                   define an inactive persistent physical host interface or modify an existing persistent one from an XML file
iface-destroy                  destroy a physical host interface (disable it / "if-down")
iface-dumpxml                  interface information in XML
iface-edit                     edit XML configuration for a physical host interface
iface-list                     list physical host interfaces
iface-mac                      convert an interface name to interface MAC address
iface-name                     convert an interface MAC address to interface name
iface-rollback                 rollback to previous saved configuration created via iface-begin
iface-start                    start a physical host interface (enable it / "if-up")
iface-unbridge                 undefine a bridge device after detaching its slave device
iface-undefine                 undefine a physical host interface (remove it from configuration)
</code></pre>

<p> Network Filter (help keyword &lsquo;filter&rsquo;):</p>

<pre><code>nwfilter-define                define or update a network filter from an XML file
nwfilter-dumpxml               network filter information in XML
nwfilter-edit                  edit XML configuration for a network filter
nwfilter-list                  list network filters
nwfilter-undefine              undefine a network filter
</code></pre>

<p> Networking (help keyword &lsquo;network&rsquo;):</p>

<pre><code>net-autostart                  autostart a network
net-create                     create a network from an XML file
net-define                     define an inactive persistent virtual network or modify an existing persistent one from an XML file
net-destroy                    destroy (stop) a network
net-dhcp-leases                print lease info for a given network
net-dumpxml                    network information in XML
net-edit                       edit XML configuration for a network
net-event                      Network Events
net-info                       network information
net-list                       list networks
net-name                       convert a network UUID to network name
net-start                      start a (previously defined) inactive network
net-undefine                   undefine a persistent network
net-update                     update parts of an existing network's configuration
net-uuid                       convert a network name to network UUID
</code></pre>

<p> Node Device (help keyword &lsquo;nodedev&rsquo;):</p>

<pre><code>nodedev-create                 create a device defined by an XML file on the node
nodedev-destroy                destroy (stop) a device on the node
nodedev-detach                 detach node device from its device driver
nodedev-dumpxml                node device details in XML
nodedev-list                   enumerate devices on this host
nodedev-reattach               reattach node device to its device driver
nodedev-reset                  reset node device
nodedev-event                  Node Device Events
</code></pre>

<p> Secret (help keyword &lsquo;secret&rsquo;):</p>

<pre><code>secret-define                  define or modify a secret from an XML file
secret-dumpxml                 secret attributes in XML
secret-event                   Secret Events
secret-get-value               Output a secret value
secret-list                    list secrets
secret-set-value               set a secret value
secret-undefine                undefine a secret
</code></pre>

<p> Snapshot (help keyword &lsquo;snapshot&rsquo;):</p>

<pre><code>snapshot-create                Create a snapshot from XML
snapshot-create-as             Create a snapshot from a set of args
snapshot-current               Get or set the current snapshot
snapshot-delete                Delete a domain snapshot
snapshot-dumpxml               Dump XML for a domain snapshot
snapshot-edit                  edit XML for a snapshot
snapshot-info                  snapshot information
snapshot-list                  List snapshots for a domain
snapshot-parent                Get the name of the parent of a snapshot
snapshot-revert                Revert a domain to a snapshot
</code></pre>

<p> Storage Pool (help keyword &lsquo;pool&rsquo;):</p>

<pre><code>find-storage-pool-sources-as   find potential storage pool sources
find-storage-pool-sources      discover potential storage pool sources
pool-autostart                 autostart a pool
pool-build                     build a pool
pool-create-as                 create a pool from a set of args
pool-create                    create a pool from an XML file
pool-define-as                 define a pool from a set of args
pool-define                    define an inactive persistent storage pool or modify an existing persistent one from an XML file
pool-delete                    delete a pool
pool-destroy                   destroy (stop) a pool
pool-dumpxml                   pool information in XML
pool-edit                      edit XML configuration for a storage pool
pool-info                      storage pool information
pool-list                      list pools
pool-name                      convert a pool UUID to pool name
pool-refresh                   refresh a pool
pool-start                     start a (previously defined) inactive pool
pool-undefine                  undefine an inactive pool
pool-uuid                      convert a pool name to pool UUID
pool-event                     Storage Pool Events
</code></pre>

<p> Storage Volume (help keyword &lsquo;volume&rsquo;):</p>

<pre><code>vol-clone                      clone a volume.
vol-create-as                  create a volume from a set of args
vol-create                     create a vol from an XML file
vol-create-from                create a vol, using another volume as input
vol-delete                     delete a vol
vol-download                   download volume contents to a file
vol-dumpxml                    vol information in XML
vol-info                       storage vol information
vol-key                        returns the volume key for a given volume name or path
vol-list                       list vols
vol-name                       returns the volume name for a given volume key or path
vol-path                       returns the volume path for a given volume name or key
vol-pool                       returns the storage pool for a given volume key or path
vol-resize                     resize a vol
vol-upload                     upload file contents to a volume
vol-wipe                       wipe a vol
</code></pre>

<p> Virsh itself (help keyword &lsquo;virsh&rsquo;):</p>

<pre><code>cd                             change the current directory
echo                           echo arguments
exit                           quit this interactive terminal
help                           print help
pwd                            print the current directory
quit                           quit this interactive terminal
connect                        (re)connect to hypervisor
</code></pre>

<p>```</p>

<p>Ok, default network check now:</p>

<p>```
virsh net-list &mdash;all</p>

<h2> Name                 State      Autostart     Persistent</h2>

<p> default              inactive   no            yes
```</p>

<p>The default network is inactive, so we have to enable it:</p>

<p><code>
virsh net-start default
Network default started
</code></p>

<p>Now, if you do an <em>ifconfig</em>, you should see the new bridge interface:</p>

<p>```
virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST>  mtu 1500</p>

<pre><code>    inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
    ether 52:54:00:b2:a7:6e  txqueuelen 1000  (Ethernet)
    RX packets 0  bytes 0 (0.0 B)
    RX errors 0  dropped 0  overruns 0  frame 0
    TX packets 0  bytes 0 (0.0 B)
    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre>

<p>```</p>

<p>To get more info about your bridge, you can use the <strong>brctl</strong> command:</p>

<p>```
brctl
Usage: brctl [commands]
commands:</p>

<pre><code>addbr       &lt;bridge&gt;        add bridge
delbr       &lt;bridge&gt;        delete bridge
addif       &lt;bridge&gt; &lt;device&gt;   add interface to bridge
delif       &lt;bridge&gt; &lt;device&gt;   delete interface from bridge
hairpin     &lt;bridge&gt; &lt;port&gt; {on|off}    turn hairpin on/off
setageing   &lt;bridge&gt; &lt;time&gt;     set ageing time
setbridgeprio   &lt;bridge&gt; &lt;prio&gt;     set bridge priority
setfd       &lt;bridge&gt; &lt;time&gt;     set bridge forward delay
sethello    &lt;bridge&gt; &lt;time&gt;     set hello time
setmaxage   &lt;bridge&gt; &lt;time&gt;     set max message age
setpathcost &lt;bridge&gt; &lt;port&gt; &lt;cost&gt;  set path cost
setportprio &lt;bridge&gt; &lt;port&gt; &lt;prio&gt;  set port priority
show        [ &lt;bridge&gt; ]        show a list of bridges
showmacs    &lt;bridge&gt;        show a list of mac addrs
showstp     &lt;bridge&gt;        show bridge stp info
stp         &lt;bridge&gt; {on|off}   turn stp on/off
</code></pre>

<p>```</p>

<blockquote><p>brctl is used to set up, maintain, and inspect the ethernet bridge configuration in the linux kernel.</p>

<p>An ethernet bridge is a device commonly used to connect different  networks of ethernets together, so that these
ethernets will appear as one ethernet to the participants.</p>

<p>Each of the ethernets  being  connected  corresponds  to  one  physical interface  in  the  bridge. These individual
ethernets are bundled into one bigger (&lsquo;logical&rsquo;) ethernet, this bigger  ethernet  corresponds  to the bridge
network interface.</p></blockquote>

<p><code>
brctl show
bridge name bridge id       STP enabled interfaces
virbr0      8000.525400b2a76e   yes     virbr0-nic
</code></p>

<p>Ok, now we have the default network set. It&rsquo;s time to actually start some VMs. In KVM, VMs can be managed both from the command line with virsh, and from the GUI, with Virtual Network Manager, which you can find under System Tools.</p>

<p><img class="center" src="/images/sysadmin/kvm/virtmanager.png" title="&lsquo;virtmanager&rsquo; &lsquo;virtmanager&rsquo;" ></p>

<p><strong>Before starting to create VMs, please reboot your host to save you time and headaches</strong>.</p>

<p>I grabbed a Debian iso to showcase its live CD, and I created a VM from it:</p>

<p><img class="center" src="/images/sysadmin/kvm/1-new.png" title="&lsquo;new vm&rsquo; &lsquo;new vm&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/kvm/2-os.png" title="&lsquo;os&rsquo; &lsquo;os&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/kvm/3-hw.png" title="&lsquo;hardware&rsquo; &lsquo;hardware specs&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/kvm/4-space.png" title="&lsquo;disk&rsquo; &lsquo;disk&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/kvm/5-final.png" title="&lsquo;create vm&rsquo; &lsquo;create vm&rsquo;" ></p>

<p>I had to do one more step before getting rid of errors every time I finished with the VM creation. libvirt was pointing to the qemu-kvm binary, but I had no such file, so I created a symlink as specified in this <a href="https://bbs.archlinux.org/viewtopic.php?pid=1240205#p1240205">Arch Linux forum</a>:</p>

<p><code>
ln -s /usr/bin/qemu-{system-x86_64,kvm}
ls -la /usr/bin/qemu-kvm
lrwxrwxrwx 1 root root 27 Sep 17 13:19 /usr/bin/qemu-kvm -&gt; /usr/bin/qemu-system-x86_64
</code></p>

<p><img class="center" src="/images/sysadmin/kvm/vm.png" title="&lsquo;vm&rsquo; &lsquo;working vm&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/kvm/details.png" title="&lsquo;vm details&rsquo; &lsquo;vm details&rsquo;" ></p>

<p>KVM graphical interface is nice, but we are not limited to a GUI. We can create and interact with VMs from the command line!</p>

<p>First, let&rsquo;s see if what VMs we&rsquo;ve got:</p>

<p>```
virsh list &mdash;all</p>

<h2> Id    Name                           State</h2>

<ul>
<li>   generic                        shut off
```</li>
</ul>


<p>If we only wanted to list the running VMs, we could do it with <code>virsh list</code></p>

<p>Now, I&rsquo;m going to start a VM, which in virsh talk is called a domain, and look at some info about it:</p>

<p>```
virsh # start generic
Domain generic started</p>

<p>virsh # dominfo generic
Id:             1
Name:           generic
UUID:           c4982e35-ec8d-4b5f-9ad3-c8491bcd9181
OS Type:        hvm
State:          running
CPU(s):         1
CPU time:       0.4s
Max memory:     1048576 KiB
Used memory:    1048576 KiB
Persistent:     yes
Autostart:      disable
Managed save:   no
Security model: none
Security DOI:   0
```</p>

<p>Now we have a better grasp on Linux-based hypervisors, and we don&rsquo;t have to rely on VMware and Virtualbox only. In a future post I will show how to install a VM from the command line.</p>

<p>```</p>

<hr />

<p>/ Q: How did you get into artificial   \
| intelligence? A: Seemed logical &mdash; I |
\ didn&rsquo;t have any real intelligence.   /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NFS shares on CentOS 7]]></title>
    <link href="http://chousensha.github.io/blog/2017/09/10/nfs-shares-on-centos-7/"/>
    <updated>2017-09-10T07:45:30-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/09/10/nfs-shares-on-centos-7</id>
    <content type="html"><![CDATA[<p>Today we will go over an alternate way of setting up shares on CentOS 7. In an <a href="https://chousensha.github.io/blog/2017/06/09/quick-shares-with-samba-on-centos/">earlier post</a> we saw how we can share stuff with Samba, which is the preferred way, especially if you have mixed environments. But today I also wanted to go through the process using the veteran: NFS! For this example, we&rsquo;ll be looking at the newest version, NFS4, which adds performance and security features, but also operates a little bit differently than its predecessors.</p>

<!-- more -->


<p>The Network File System allows clients to mount remote filesystems as if they were present locally. By default, the NFS server is listening on port 2049. In version 4, NFS requires the use of TCP.</p>

<h3>Server configuration</h3>

<p>If you don&rsquo;t have it already, install the <code>nfs-utils</code> package. Next, start NFS with the command: <code>systemctl start nfs</code>. For the share, I created some directory and put a file in it:</p>

<p><code>
mkdir /var/nfs-share
chmod 777 /var/nfs-share/
</code></p>

<p>Now we have to edit the <code>/etc/exports</code> file, which contains the configuration for the shares. The format is as follows:</p>

<p><code>
/sharepath client(options)
</code></p>

<p>You can specify the client by hostname, domain name, IP address or network range. In this example, I will allow all hosts on my local subnet to have read write access to the share, and permit root users to retain their privileges:</p>

<p><code>
/var/nfs-share 192.168.217.0/24(rw,no_root_squash)
</code></p>

<p>Now restart the server for the configuration to take effect: <code>systemctl restart nfs</code>. You can see NFS statistics with <strong>nfstat</strong>:</p>

<p>```
nfsstat
Server rpc stats:
calls      badcalls   badclnt    badauth    xdrcall
91         0          0          0          0</p>

<p>Server nfs v4:
null         compound   <br/>
2         2% 89       97%</p>

<p>Server nfs v4 operations:
op0-unused   op1-unused   op2-future   access       close        commit     <br/>
0         0% 0         0% 0         0% 7         2% 1         0% 0         0%
create       delegpurge   delegreturn  getattr      getfh        link       <br/>
0         0% 0         0% 1         0% 52       20% 8         3% 0         0%
lock         lockt        locku        lookup       lookup_root  nverify    <br/>
0         0% 0         0% 0         0% 16        6% 0         0% 0         0%
open         openattr     open_conf    open_dgrd    putfh        putpubfh   <br/>
1         0% 0         0% 0         0% 0         0% 63       25% 0         0%
putrootfh    read         readdir      readlink     remove       rename     <br/>
4         1% 1         0% 2         0% 0         0% 0         0% 0         0%
renew        restorefh    savefh       secinfo      setattr      setcltid   <br/>
0         0% 0         0% 0         0% 0         0% 0         0% 0         0%
setcltidconf verify       write        rellockowner bc_ctl       bind_conn  <br/>
0         0% 0         0% 0         0% 0         0% 0         0% 0         0%
exchange_id  create_ses   destroy_ses  free_stateid getdirdeleg  getdevinfo <br/>
2         0% 2         0% 1         0% 0         0% 0         0% 0         0%
getdevlist   layoutcommit layoutget    layoutreturn secinfononam sequence   <br/>
0         0% 0         0% 0         0% 0         0% 2         0% 83       33%
set_ssv      test_stateid want_deleg   destroy_clid reclaim_comp
0         0% 0         0% 0         0% 1         0% 2         0%
```</p>

<p>To see the available exports and their options, use <strong>exportfs</strong>:</p>

<p><code>
exportfs -v
/var/nfs-share  192.168.217.0/24(rw,wdelay,no_root_squash,no_subtree_check,sec=sys,rw,secure,no_root_squash,no_all_squash)
</code></p>

<h3>Client configuration</h3>

<p>On the client, I first made a directory for the shares:</p>

<p><code>
mkdir /mnt/nfs
</code></p>

<p>To mount the share, the command looks like this:</p>

<p><code>
mount -t nfs -o options server:/export /mount/directory
</code></p>

<p>In my case, I mounted the exported share with:</p>

<p><code>
mount -t nfs 192.168.217.131:/var/nfs-share /mnt/nfs/
</code></p>

<p>Then I went to the directory and read the file:</p>

<p><code>
root@kali:/mnt/nfs# ls
file.txt
root@kali:/mnt/nfs# cat file.txt
something here
</code></p>

<p>When done, unmount the filesystem:</p>

<p><code>
umount /mnt/nfs
</code></p>

<p>If instead of manually mounting the share, we would want it automatically mounted at boot, we&rsquo;d have to edit <code>/etc/fstab</code>:</p>

<p>```</p>

<h1>/etc/fstab: static file system information.</h1>

<p>#</p>

<h1>Use &lsquo;blkid&rsquo; to print the universally unique identifier for a</h1>

<h1>device; this may be used with UUID= as a more robust way to name devices</h1>

<h1>that works even if disks are added and removed. See fstab(5).</h1>

<p>#</p>

<h1><file system> <mount point>   <type>  <options>       <dump>  <pass></h1>

<p>192.168.217.131:/var/nfs-share /mnt/nfs nfs rw 0 0
```</p>

<p>Now reboot the client and check that the share was mounted:</p>

<p><code>
mount | grep nfs
192.168.217.131:/var/nfs-share on /mnt/nfs type nfs4 (rw,relatime,vers=4.2,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=0.0.0.0,local_lock=none,addr=192.168.217.131)
</code></p>

<p>So, it&rsquo;s pretty easy and fast to set up NFS shares, but keep in mind this tutorial only scratched the surface of the available configuration options.</p>

<p>```</p>

<hr />

<p>/ Q: What&rsquo;s tiny and yellow and very,   \
| very, dangerous? A: A canary with the |
\ super-user password.                  /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
