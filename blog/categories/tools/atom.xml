<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-06-10T07:15:35-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Masscan - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/10/masscan-kali-linux-tools/"/>
    <updated>2017-06-10T04:17:42-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/10/masscan-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Nmap is our favorite port scanner, but if you want to scan billions of hosts, and still be relatively young when you get the results, there is a solid alternative focused entirely on speed: Masscan &ndash; the Mass IP port scanner</p>

<!-- more -->


<p>Homepage: <a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p>

<h2>masscan description</h2>

<blockquote><p>This is the fastest Internet port scanner. It can scan the entire Internet in under 6 minutes, transmitting 10
million packets per second.</p>

<p>It produces results similar to nmap, the most famous port scanner. Internally, it operates more like scanrand,
unicornscan, and ZMap, using asynchronous transmission. The major difference is that it&rsquo;s faster than these other
scanners. In addition, it&rsquo;s more flexible, allowing arbitrary address ranges and port ranges.</p>

<p>NOTE: masscan uses a custom TCP/IP stack. Anything other than simple port scans will cause conflict with the local
TCP/IP stack. This means you need to either use the -S option to use a separate IP address, or configure your
operating system to firewall the ports that masscan uses.</p>

<p>This program spews out packets very fast. On Windows, or from VMs, it can do 300,000 packets/second. On Linux (no
virtualization) it&rsquo;ll do 1.6 million packets-per-second. That&rsquo;s fast enough to melt most networks.</p>

<p>Note that it&rsquo;ll only melt your own network. It randomizes the target IP addresses so that it shouldn&rsquo;t overwhelm any
distant network.</p>

<p>By default, the rate is set to 100 packets/second.</p></blockquote>

<h2>masscan options</h2>

<p><code>
root@kali:~# masscan                                                         
usage:
masscan -p80,8000-8100 10.0.0.0/8 --rate=10000
 scan some web ports on 10.x.x.x at 10kpps
masscan --nmap
 list those options that are compatible with nmap
masscan -p80 10.0.0.0/8 --banners -oB &lt;filename&gt;
 save results of scan in binary format to &lt;filename&gt;
masscan --open --banners --readscan &lt;filename&gt; -oX &lt;savefile&gt;
 read binary scan results in &lt;filename&gt; and save them as xml in &lt;savefile&gt;
</code></p>

<p>More information:</p>

<p><code>
root@kali:~# masscan --help
MASSCAN is a fast port scanner. The primary input parameters are the
IP addresses/ranges you want to scan, and the port numbers. An example
is the following, which scans the 10.x.x.x network for web servers:
 masscan 10.0.0.0/8 -p80
The program auto-detects network interface/adapter settings. If this
fails, you'll have to set these manually. The following is an
example of all the parameters that are needed:
 --adapter-ip 192.168.10.123
 --adapter-mac 00-11-22-33-44-55
 --router-mac 66-55-44-33-22-11
Parameters can be set either via the command-line or config-file. The
names are the same for both. Thus, the above adapter settings would
appear as follows in a configuration file:
 adapter-ip = 192.168.10.123
 adapter-mac = 00-11-22-33-44-55
 router-mac = 66-55-44-33-22-11
All single-dash parameters have a spelled out double-dash equivalent,
so '-p80' is the same as '--ports 80' (or 'ports = 80' in config file).
To use the config file, type:
 masscan -c &lt;filename&gt;
To generate a config-file from the current settings, use the --echo
option. This stops the program from actually running, and just echoes
the current configuration instead. This is a useful way to generate
your first config file, or see a list of parameters you didn't know
about. I suggest you try it now:
 masscan -p1234 --echo
</code></p>

<p>Config file:</p>

<blockquote><p>By default, the program will read default configuration from  the  file
/etc/masscan/masscan.conf. This is useful for system-specific settings,
such as the &mdash;adapter-xxx options. This is also useful for excluded  IP
addresses,  so  that  you  can scan the entire Internet, while skipping
dangerous addresses, like those owned by the DoD, and not make an accidental mistake.</p></blockquote>

<p>Nmap compatible options:</p>

<p>```
root@kali:~# masscan &mdash;nmap                                                <br/>
Masscan (<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a>)
Usage: masscan [Options] -p{Target-Ports} {Target-IP-Ranges}
TARGET SPECIFICATION:
  Can pass only IPv4 address, CIDR networks, or ranges (non-nmap style)
  Ex: 10.0.0.0/8, 192.168.0.1, 10.0.0.1-10.0.0.254
  -iL <inputfilename>: Input from list of hosts/networks
  &mdash;exclude &lt;host1[,host2][,host3],&hellip;>: Exclude hosts/networks
  &mdash;excludefile &lt;exclude_file>: Exclude list from file
  &mdash;randomize-hosts: Randomize order of hosts (default)
HOST DISCOVERY:
  -Pn: Treat all hosts as online (default)
  -n: Never do DNS resolution (default)
SCAN TECHNIQUES:
  -sS: TCP SYN (always on, default)
SERVICE/VERSION DETECTION:
  &mdash;banners: get the banners of the listening service if available. The</p>

<pre><code>default timeout for waiting to recieve data is 30 seconds.
</code></pre>

<p>PORT SPECIFICATION AND SCAN ORDER:
  -p <port ranges>: Only scan specified ports</p>

<pre><code>Ex: -p22; -p1-65535; -p 111,137,80,139,8080
</code></pre>

<p>TIMING AND PERFORMANCE:
  &mdash;max-rate <number>: Send packets no faster than <number> per second
  &mdash;connection-timeout <number>: time in seconds a TCP connection will</p>

<pre><code>timeout while waiting for banner data from a port.
</code></pre>

<p>FIREWALL/IDS EVASION AND SPOOFING:
  -S/&mdash;source-ip &lt;IP_Address>: Spoof source address
  -e <iface>: Use specified interface
  -g/&mdash;source-port <portnum>: Use given port number
  &mdash;ttl <val>: Set IP time-to-live field
  &mdash;spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
OUTPUT:
  &mdash;output-format <format>: Sets output to binary/list/unicornscan/json/grepable/xml
  &mdash;output-file <file>: Write scan results to file. If &mdash;output-format is</p>

<pre><code> not given default is xml
</code></pre>

<p>  -oL/-oJ/-oG/-oB/-oX/-oU <file>: Output scan in List/JSON/Grepable/Binary/XML/Unicornscan format,</p>

<pre><code> respectively, to the given filename. Shortcut for
 --output-format &lt;format&gt; --output-file &lt;file&gt;
</code></pre>

<p>  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  &mdash;open: Only show open (or possibly open) ports
  &mdash;packet-trace: Show all packets sent and received
  &mdash;iflist: Print host interfaces and routes (for debugging)
  &mdash;append-output: Append to rather than clobber specified output files
  &mdash;resume <filename>: Resume an aborted scan
MISC:
  &mdash;send-eth: Send using raw ethernet frames (default)
  -V: Print version number
  -h: Print this help summary page.
EXAMPLES:
  masscan -v -sS 192.168.0.0/16 10.0.0.0/8 -p 80
  masscan 23.0.0.0/0 -p80 &mdash;banners -output-format binary &mdash;output-filename internet.scan
  masscan &mdash;open &mdash;banners &mdash;readscan internet.scan -oG internet_scan.grepable
SEE (<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a>) FOR MORE HELP
```</p>

<p>Manpage: <a href="http://manpages.org/masscan/8">http://manpages.org/masscan/8</a></p>

<h2>masscan usage</h2>

<ul>
<li>look at the current configuration</li>
</ul>


<p>```
root@kali:~# masscan &mdash;echo
rate =     100.00
randomize-hosts = true
seed = 9262294816069822464
shard = 1/1</p>

<h1>ADAPTER SETTINGS</h1>

<p>adapter =
adapter-ip = 0.0.0.0
adapter-mac = 00:00:00:00:00:00
router-mac = 00:00:00:00:00:00</p>

<h1>OUTPUT/REPORTING SETTINGS</h1>

<p>output-format = unknown(0)
show = open,,
output-filename =
rotate = 0
rotate-dir = .
rotate-offset = 0
rotate-filesize = 0
pcap =</p>

<h1>TARGET SELECTION (IP, PORTS, EXCLUDES)</h1>

<p>retries = 0
ports =</p>

<p>capture = cert
nocapture = html
nocapture = heartbleed</p>

<p>min-packet = 60
```</p>

<ul>
<li>check installation</li>
</ul>


<p><code>
masscan --regress
regression test: success!
</code></p>

<ul>
<li>full port scan on local subnet</li>
</ul>


<p>```
root@kali:~# masscan -p0-65535 192.168.217.0/24 &mdash;rate 100000</p>

<p>Starting masscan 1.0.3 (<a href="http://bit.ly/14GZzcT">http://bit.ly/14GZzcT</a>) at 2017-06-10 09:02:34 GMT
 &mdash; forced options: -sS -Pn -n &mdash;randomize-hosts -v &mdash;send-eth
Initiating SYN Stealth Scan
Scanning 256 hosts [65536 ports/host]
Discovered open port 443/tcp on 192.168.217.131                              <br/>
Discovered open port 139/tcp on 192.168.217.133                              <br/>
Discovered open port 139/tcp on 192.168.217.134                              <br/>
Discovered open port 139/tcp on 192.168.217.131                              <br/>
Discovered open port 111/tcp on 192.168.217.131                              <br/>
Discovered open port 23/tcp on 192.168.217.133                               <br/>
Discovered open port 21/tcp on 192.168.217.133                               <br/>
Discovered open port 22/tcp on 192.168.217.131                               <br/>
Discovered open port 22/tcp on 192.168.217.135                               <br/>
Discovered open port 5432/tcp on 192.168.217.133                             <br/>
Discovered open port 135/tcp on 192.168.217.134                              <br/>
Discovered open port 22/tcp on 192.168.217.133                               <br/>
Discovered open port 25/tcp on 192.168.217.133                               <br/>
Discovered open port 53/tcp on 192.168.217.133                               <br/>
Discovered open port 3632/tcp on 192.168.217.133                             <br/>
Discovered open port 80/tcp on 192.168.217.135                               <br/>
Discovered open port 80/tcp on 192.168.217.131                               <br/>
Discovered open port 80/tcp on 192.168.217.133                               <br/>
Discovered open port 445/tcp on 192.168.217.131                              <br/>
Discovered open port 445/tcp on 192.168.217.133                              <br/>
Discovered open port 445/tcp on 192.168.217.134                              <br/>
Discovered open port 8180/tcp on 192.168.217.133                             <br/>
Discovered open port 8009/tcp on 192.168.217.133                             <br/>
Discovered open port 3306/tcp on 192.168.217.133 <br/>
```</p>

<p>The scan was done in a couple of minutes. You might be wondering, how does this tool scan the entire internet in 3 minutes if it took the same length of time for a puny subnet? Well, there are some limitations. To get the most of its speed, you need the proper adapter and driver. Also notice that I rate-limited it to 100k packets per second, because I didn&rsquo;t want my local network to blow up! If you want to benchmark masscan&rsquo;s performance, look on its homepage, under the Performance testing section.</p>

<ul>
<li>grab banners of open ports</li>
</ul>


<p>```
root@kali:~# masscan 192.168.217.0/24 -p22,80,139,445,3306 &mdash;banners &mdash;source-ip 192.168.217.150 &mdash;rate 100000</p>

<p>Starting masscan 1.0.3 (<a href="http://bit.ly/14GZzcT">http://bit.ly/14GZzcT</a>) at 2017-06-10 09:18:27 GMT
 &mdash; forced options: -sS -Pn -n &mdash;randomize-hosts -v &mdash;send-eth
Initiating SYN Stealth Scan
Scanning 256 hosts [5 ports/host]
Discovered open port 80/tcp on 192.168.217.133                               <br/>
Discovered open port 139/tcp on 192.168.217.134                              <br/>
Discovered open port 22/tcp on 192.168.217.133                               <br/>
Discovered open port 139/tcp on 192.168.217.133                              <br/>
Discovered open port 22/tcp on 192.168.217.131                               <br/>
Discovered open port 80/tcp on 192.168.217.131                               <br/>
Discovered open port 445/tcp on 192.168.217.131                              <br/>
Discovered open port 139/tcp on 192.168.217.131                              <br/>
Discovered open port 22/tcp on 192.168.217.135                               <br/>
Discovered open port 80/tcp on 192.168.217.135                               <br/>
Banner on port 22/tcp on 192.168.217.135: [ssh] SSH-2.0-OpenSSH_5.5p1 Debian-6+squeeze2
Banner on port 22/tcp on 192.168.217.133: [ssh] SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1
Banner on port 22/tcp on 192.168.217.131: [ssh] SSH-2.0-OpenSSH_6.6.1        <br/>
Discovered open port 445/tcp on 192.168.217.134                              <br/>
Discovered open port 445/tcp on 192.168.217.133                              <br/>
Discovered open port 3306/tcp on 192.168.217.133                             <br/>
Banner on port 3306/tcp on 192.168.217.133: [unknown] \x3e\x00\x00\x00\x0a5.0.51a-3ubuntu5\x00\x07\x00\x00\x00M<code>yb]-d3\x00,\xaa\x08\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q^e</code>0o`r\x3crLb\x00
Banner on port 80/tcp on 192.168.217.131: [http] HTTP/1.1 200 OK\x0d\x0aDate: Sat, 10 Jun 2017 09:18:35 GMT\x0d\x0aServer: Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips\x0d\x0aLast-Modified: Tue, 02 Aug 2016 13:07:09 GMT\x0d\x0aETag: \x2211-5391664f1e697\x22\x0d\x0aAccept-Ranges: bytes\x0d\x0aContent-Length: 17\x0d\x0aConnection: close\x0d\x0aContent-Type: text/html; charset=UTF-8\x0d\x0a\x0d
Banner on port 80/tcp on 192.168.217.133: [http] HTTP/1.1 200 OK\x0d\x0aDate: Sat, 10 Jun 2017 09:18:36 GMT\x0d\x0aServer: Apache/2.2.8 (Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch\x0d\x0aLast-Modified: Wed, 17 Mar 2010 14:08:25 GMT\x0d\x0aETag: \x22107f7-2d-481ffa5ca8840\x22\x0d\x0aAccept-Ranges: bytes\x0d\x0aContent-Length: 45\x0d\x0aConnection: close\x0d\x0aContent-Type: text/html\x0d\x0a\x0d
```</p>

<p>For this option to work, you have to give masscan its own IP address on the local subnet, something unused by another device. In fact, the recommendation from its homepage is to use it with its separate IP address whenever possible.</p>

<p>And here is how the XML output of the previous scan would look in a spreadsheet:</p>

<p><img class="center" src="/images/tools/masscan-xml.png" title="&lsquo;masscan xml&rsquo; &lsquo;masscan xml output&rsquo;" ></p>

<p>Some other features are:</p>

<ul>
<li><p>output formats in xml, binary, grepable, list, or JSON</p></li>
<li><p>resume scans</p></li>
<li><p>exclude targets</p></li>
<li><p>runs in Linux, Windows, and Mac OS X</p></li>
</ul>


<h3>More resources</h3>

<ul>
<li><p><a href="http://blog.erratasec.com/2013/09/masscan-entire-internet-in-3-minutes.html">Robert Graham post on masscan</a></p></li>
<li><p><a href="https://josephpierini.blogspot.com/2016/06/using-masscan-with-top-ports.html">select common ports with Nmap and feed them to Masscan</a></p></li>
</ul>


<p>```
/ Your own qualities will help prevent \
\ your advancement in the world.       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lbd - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/07/lbd-kali-linux-tools/"/>
    <updated>2017-06-07T05:46:27-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/07/lbd-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Load balancing is the practice of distributing traffic across multiple servers, in order to increase performance and reliability. With multiple servers offering the same resources, single points of failure are eliminated, and availability is increased. Load balancers may be set up in a way that users from certain geographic locations are sent to specific servers, in order to increase the speed of access.</p>

<p>Load balancing introduces some issue in penetration tests, because it interferes with the accuracy of the testing. This is why it&rsquo;s important to establish whether load balancers are in place, and if there are, taking that into account when performing the tests and writing the reports.</p>

<!-- more -->


<p>lbd (load balancing detector) is a Kali tool that is useful for determining the presence of load balancing.</p>

<p>Author: Stefan Behte</p>

<h2>lbd description</h2>

<blockquote><p>lbd (load balancing detector) detects if a given domain uses DNS and/or HTTP Load-Balancing (via Server: and Date:
header and diffs between server answers).</p></blockquote>

<h3>DNS load balancing</h3>

<p>In DNS load balancing, a system has a list of IPs that can respond to requests. When you request a resource, you hit on one of these IPs, and you need to test further to identify the exact target. If your target is <em>example.com</em>, and 3 IPs are serving that, when you find a vulnerability, you still have to determine which of these addresses is the vulnerable one (or if all are).</p>

<h3>HTTP load balancing</h3>

<p>One of the ways HTTP load balancing can be achieved is through cookies. This comes in handy in online stores and other such web applications that need to identify a client and send it to the same specific resource</p>

<h2>lbd options</h2>

<p>```
lbd &ndash; load balancing detector 0.4 &ndash; Checks if a given domain uses load-balancing.</p>

<pre><code>                                Written by Stefan Behte (http://ge.mine.nu)
                                Proof-of-concept! Might give false positives.
</code></pre>

<p>usage: /usr/bin/lbd domain [port] {https}
```</p>

<h2>lbd usage</h2>

<p>Let&rsquo;s now check a bunch of domains and see what load balancers we can find, if at all</p>

<ul>
<li>DNS and HTTP load balancing</li>
</ul>


<p>```
lbd hackerone.com</p>

<p>lbd &ndash; load balancing detector 0.4 &ndash; Checks if a given domain uses load-balancing.</p>

<pre><code>                                Written by Stefan Behte (http://ge.mine.nu)
                                Proof-of-concept! Might give false positives.
</code></pre>

<p>Checking for DNS-Loadbalancing: FOUND
hackerone.com has address 104.16.100.52
hackerone.com has address 104.16.99.52</p>

<p>Checking for HTTP-Loadbalancing [Server]:
 cloudflare-nginx
 NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Date]: 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Diff]: FOUND
&lt; CF-RAY: 36b32c07c6bf2950-OTP</p>

<blockquote><p>CF-RAY: 36b32c0835d7292c-OTP</p></blockquote>

<p>hackerone.com does Load-balancing. Found via Methods: DNS HTTP[Diff]
```</p>

<ul>
<li>HTTP load balancing</li>
</ul>


<p>```
lbd cisco.com</p>

<p>lbd &ndash; load balancing detector 0.4 &ndash; Checks if a given domain uses load-balancing.</p>

<pre><code>                                Written by Stefan Behte (http://ge.mine.nu)
                                Proof-of-concept! Might give false positives.
</code></pre>

<p>Checking for DNS-Loadbalancing: NOT FOUND
Checking for HTTP-Loadbalancing [Server]:
 Apache
 NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Date]: 11:13:47, 11:13:47, 11:13:48, 11:13:49, 11:13:50, 11:13:51, 11:13:51, 11:13:52, 11:13:53, 11:13:54, 11:13:54, 11:13:55, 11:13:56, 11:13:57, 11:13:57, 11:13:58, 11:13:59, 11:14:00, 11:14:01, 11:14:01, 11:14:02, 11:14:03, 11:14:04, 11:14:04, 11:14:05, 11:14:06, 11:14:07, 11:14:07, 11:14:08, 11:14:09, 11:14:10, 11:14:11, 11:14:11, 11:14:12, 11:14:13, 11:14:14, 11:14:14, 11:14:15, 11:14:16, 11:14:17, 11:14:17, 11:14:18, 11:14:19, 11:14:20, 11:14:21, 11:14:21, 11:14:22, 11:14:23, 11:14:24, 11:14:24, NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Diff]: FOUND</p>

<blockquote><p>Cache-Control: max-age=0
Expires: Wed, 07 Jun 2017 11:14:27 GMT</p></blockquote>

<p>cisco.com does Load-balancing. Found via Methods: HTTP[Diff]
```</p>

<ul>
<li>no load balancing</li>
</ul>


<p>```
lbd nmap.org</p>

<p>lbd &ndash; load balancing detector 0.4 &ndash; Checks if a given domain uses load-balancing.</p>

<pre><code>                                Written by Stefan Behte (http://ge.mine.nu)
                                Proof-of-concept! Might give false positives.
</code></pre>

<p>Checking for DNS-Loadbalancing: NOT FOUND
Checking for HTTP-Loadbalancing [Server]:
 Apache/2.4.6 (CentOS)
 NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Date]: 11:17:00, 11:17:00, 11:17:01, 11:17:01, 11:17:02, 11:17:02, 11:17:03, 11:17:03, 11:17:03, 11:17:04, 11:17:04, 11:17:05, 11:17:05, 11:17:06, 11:17:06, 11:17:07, 11:17:07, 11:17:07, 11:17:08, 11:17:08, 11:17:09, 11:17:09, 11:17:10, 11:17:10, 11:17:10, 11:17:11, 11:17:11, 11:17:12, 11:17:12, 11:17:13, 11:17:13, 11:17:14, 11:17:14, 11:17:14, 11:17:15, 11:17:15, 11:17:16, 11:17:16, 11:17:17, 11:17:17, 11:17:17, 11:17:18, 11:17:18, 11:17:19, 11:17:19, 11:17:20, 11:17:20, 11:17:20, 11:17:21, 11:17:21, NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Diff]: NOT FOUND</p>

<p>nmap.org does NOT use Load-balancing.
```</p>

<h3>Key takeaways</h3>

<ul>
<li>when testing load balanced systems, you can try accessing them by IP instead of name (be advised that firewalls might pick up on this as suspicious activity)</li>
</ul>


<p>To learn more about load balancing and pentesting, check out this <a href="https://www.sans.org/reading-room/whitepapers/testing/identifying-load-balancers-penetration-testing-33313">SANS paper</a></p>

<p>```
/ Q: What is printed on the bottom of \
| beer bottles in Minnesota? A: Open  |
\ other end.                          /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dnsenum - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/29/dnsenum-kali-linux-tools/"/>
    <updated>2017-05-29T05:32:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/29/dnsenum-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll look at dnsenum, one of the tools that come preinstalled on Kali for DNS information gathering.</p>

<!-- more -->


<p>Homepage: <a href="https://github.com/fwaeytens/dnsenum">https://github.com/fwaeytens/dnsenum</a></p>

<h3>dnsenum description</h3>

<blockquote><p>multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.</p>

<p>OPERATIONS:</p>

<p>1) Get the host&rsquo;s addresse (A record).</p>

<p>2) Get the namservers (threaded).</p>

<p>3) Get the MX record (threaded).</p>

<p>4) Perform axfr queries on nameservers and get BIND VERSION (threaded).</p>

<p>5) Get extra names and subdomains via google scraping (google query = &ldquo;allinurl: -www site:domain&rdquo;).</p>

<p>6) Brute force subdomains from file, can also perform recursion on subdomain that have NS records (all threaded).</p>

<p>7) Calculate C class domain network ranges and perform whois queries on them (threaded).</p>

<p>8) Perform reverse lookups on netranges ( C class or/and whois netranges) (threaded).</p>

<p>9) Write to domain_ips.txt file ip-blocks.</p></blockquote>

<h3>dnsenum options</h3>

<p>``` plain
dnsenum -h
dnsenum.pl VERSION:1.2.3
Usage: dnsenum.pl <a href="">Options</a> <domain>
Note: the brute force -f switch is obligatory.
GENERAL OPTIONS:
  &mdash;dnsserver   <server></p>

<pre><code>        Use this DNS server for A, NS and MX queries.
</code></pre>

<p>  &mdash;enum        Shortcut option equivalent to &mdash;threads 5 -s 15 -w.
  -h, &mdash;help        Print this help message.
  &mdash;noreverse       Skip the reverse lookup operations.
  &mdash;nocolor     Disable ANSIColor output.
  &mdash;private     Show and save private ips at the end of the file domain_ips.txt.
  &mdash;subfile <file>  Write all valid subdomains to this file.
  -t, &mdash;timeout <value> The tcp and udp timeout values in seconds (default: 10s).
  &mdash;threads <value> The number of threads that will perform different queries.
  -v, &mdash;verbose     Be verbose: show all the progress and all the error messages.
GOOGLE SCRAPING OPTIONS:
  -p, &mdash;pages <value>   The number of google search pages to process when scraping names,</p>

<pre><code>        the default is 5 pages, the -s switch must be specified.
</code></pre>

<p>  -s, &mdash;scrap <value>   The maximum number of subdomains that will be scraped from Google (default 15).
BRUTE FORCE OPTIONS:
  -f, &mdash;file <file> Read subdomains from this file to perform brute force.
  -u, &mdash;update  &lt;a|g|r|z></p>

<pre><code>        Update the file specified with the -f switch with valid subdomains.
a (all)     Update using all results.
g       Update using only google scraping results.
r       Update using only reverse lookup results.
z       Update using only zonetransfer results.
</code></pre>

<p>  -r, &mdash;recursion   Recursion on subdomains, brute force all discovred subdomains that have an NS record.
WHOIS NETRANGE OPTIONS:
  -d, &mdash;delay <value>   The maximum value of seconds to wait between whois queries, the value is defined randomly, default: 3s.
  -w, &mdash;whois       Perform the whois queries on c class network ranges.</p>

<pre><code>         **Warning**: this can generate very large netranges and it will take lot of time to performe reverse lookups.
</code></pre>

<p>REVERSE LOOKUP OPTIONS:
  -e, &mdash;exclude <regexp></p>

<pre><code>        Exclude PTR records that match the regexp expression from reverse lookup results, useful on invalid hostnames.
</code></pre>

<p>OUTPUT OPTIONS:
  -o &mdash;output <file>    Output in XML format. Can be imported in MagicTree (www.gremwell.com)
```</p>

<h3>Fix dnsenum whois and autoloader errors</h3>

<p>First, some preliminary troubleshooting information: dnsenum relies on some Perl modules that may not be already on your system. When running it with certain flags, you might see some warnings like this one: Warning: can&rsquo;t load Net::Whois::IP module, whois queries disabled. To fix it, install the module by running <code>perl -MCPAN -e shell</code> and then at the prompt: <code>install Net::Whois::IP</code>. If you try again, you might get a different error, however: Can&rsquo;t locate package AutoLoader for @net::Whois::IP::ISA at /usr/bin/dnsenum line 536. I scoured the Internet for a bit before finding a workaround: you can make it go away by adding <code>require AutoLoader;</code> to the module source code, or by removing the Autuloader reference: changing <code>@ISA = qw(Exporter AutoLoader);</code> to <code>@ISA = qw(Exporter);</code>. To find out where the module is located, use the CPAN tool:</p>

<p>``` plain
cpan -D Net::Whois::IP
Loading internal null logger. Install Log::Log4perl for logging messages
Reading &lsquo;/root/.cpan/Metadata&rsquo;
  Database was generated on Wed, 17 May 2017 06:54:04 GMT</p>

<h2>Net::Whois::IP</h2>

<pre><code>(no description)
B/BS/BSCHMITZ/Net-Whois-IP-1.19.tar.gz
/usr/local/share/perl/5.24.1/Net/Whois/IP.pm
Installed: 1.19
CPAN:      1.19  up to date
Ben Schmitz (BSCHMITZ)
ben@foink.com
</code></pre>

<p>```</p>

<p>You can see the path here, now go apply the fix in the IP.pm file and the error should go away.</p>

<h3>dnsenum usage</h3>

<ul>
<li>default</li>
</ul>


<p>``` plain
dnsenum yahoo.com
dnsenum.pl VERSION:1.2.3</p>

<p>&mdash;&mdash;&ndash;   yahoo.com   &mdash;&mdash;&ndash;</p>

<p>Host&rsquo;s addresses:</p>

<hr />

<p>yahoo.com.                               5        IN    A        206.190.36.45
yahoo.com.                               5        IN    A        98.139.183.24
yahoo.com.                               5        IN    A        98.138.253.109</p>

<p>Name Servers:</p>

<hr />

<p>ns1.yahoo.com.                           5        IN    A        68.180.131.16
ns3.yahoo.com.                           5        IN    A        203.84.221.53
ns4.yahoo.com.                           5        IN    A        98.138.11.157
ns2.yahoo.com.                           5        IN    A        68.142.255.16
ns5.yahoo.com.                           5        IN    A        119.160.247.124</p>

<p>Mail (MX) Servers:</p>

<hr />

<p>mta7.am0.yahoodns.net.                   5        IN    A        98.138.112.32
mta7.am0.yahoodns.net.                   5        IN    A        98.138.112.37
mta7.am0.yahoodns.net.                   5        IN    A        63.250.192.45
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.34
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.37
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.240
mta7.am0.yahoodns.net.                   5        IN    A        98.136.216.26
mta7.am0.yahoodns.net.                   5        IN    A        98.136.217.202
mta5.am0.yahoodns.net.                   5        IN    A        98.138.112.33
mta5.am0.yahoodns.net.                   5        IN    A        98.138.112.34
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.33
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.34
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.35
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.36
mta5.am0.yahoodns.net.                   5        IN    A        98.136.216.25
mta5.am0.yahoodns.net.                   5        IN    A        98.136.217.202
mta6.am0.yahoodns.net.                   5        IN    A        98.136.216.25
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.38
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.37
mta6.am0.yahoodns.net.                   5        IN    A        98.136.217.203
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.35
mta6.am0.yahoodns.net.                   5        IN    A        66.196.118.36
mta6.am0.yahoodns.net.                   5        IN    A        63.250.192.46
mta6.am0.yahoodns.net.                   5        IN    A        66.196.118.37</p>

<p>Trying Zone Transfers and getting Bind Versions:</p>

<hr />

<p>Trying Zone Transfer for yahoo.com on ns4.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns5.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns2.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns3.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns1.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>brute force file not specified, bay.
```</p>

<p>From this output, you can see that the script performed DNS queries of the yahoo.com domain, enumerated the DNS and mail servers, and attempted zone transfers through the AXFR record type. Successful zone transfers are a misconfiguration that can have serious security impacts, because the DNS server sends its zone records to whoever requested them, thus revealing potentially sensitive information about the internal network topology, etc.</p>

<ul>
<li>with the &mdash;enum shortcut, which includes the flags: &mdash;threads 5 (5 threads), -s 15 (15 maximum subdomains to be scraped from Google), and -w (perform whois queries on class C ranges)</li>
</ul>


<p>``` plain
dnsenum &mdash;enum kali.org
dnsenum.pl VERSION:1.2.3</p>

<p>&mdash;&mdash;&ndash;   kali.org   &mdash;&mdash;&ndash;</p>

<p>Host&rsquo;s addresses:</p>

<hr />

<p>kali.org.                                5        IN    A        192.124.249.10</p>

<p>Name Servers:</p>

<hr />

<p>ns5.no-ip.com.                           5        IN    A        204.16.255.155
ns4.no-ip.com.                           5        IN    A        204.16.254.44
ns1.no-ip.com.                           5        IN    A        204.16.255.55
ns3.no-ip.com.                           5        IN    A        207.34.6.1
ns2.no-ip.com.                           5        IN    A        204.16.254.6</p>

<p>Mail (MX) Servers:</p>

<hr />

<p>aspmx.l.google.com.                      5        IN    A        108.177.15.27
alt3.aspmx.l.google.com.                 5        IN    A        74.125.23.26
alt4.aspmx.l.google.com.                 5        IN    A        74.125.28.26
alt1.aspmx.l.google.com.                 5        IN    A        108.177.14.27
alt2.aspmx.l.google.com.                 5        IN    A        74.125.200.27</p>

<p>Trying Zone Transfers and getting Bind Versions:</p>

<hr />

<p>Trying Zone Transfer for kali.org on ns2.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns4.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns3.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns1.no-ip.com &hellip;
AXFR record query failed: NOTAUTH</p>

<p>Trying Zone Transfer for kali.org on ns5.no-ip.com &hellip;
AXFR record query failed: NOTAUTH</p>

<p>Scraping kali.org subdomains from Google:</p>

<hr />

<p> &mdash;&mdash;   Google search page: 1   &mdash;&mdash;</p>

<p> &mdash;&mdash;   Google search page: 2   &mdash;&mdash;</p>

<p>  docs</p>

<p> &mdash;&mdash;   Google search page: 3   &mdash;&mdash;</p>

<p>  de.docs
  archive</p>

<p> &mdash;&mdash;   Google search page: 4   &mdash;&mdash;</p>

<p>  archive-4
  ja.docs</p>

<p> &mdash;&mdash;   Google search page: 5   &mdash;&mdash;</p>

<p>Google Results:</p>

<hr />

<p>de.docs.kali.org.                        5        IN    A        192.124.249.10
ja.docs.kali.org.                        5        IN    A        192.124.249.10
docs.kali.org.                           5        IN    A        192.124.249.10
archive.kali.org.                        5        IN    CNAME    hera.kali.org.
hera.kali.org.                           5        IN    A        192.99.45.140
archive-4.kali.org.                      5        IN    CNAME    hecate.kali.org.
hecate.kali.org.                         5        IN    A        149.202.201.51</p>

<p>brute force file not specified, bay.
```</p>

<p>One thing that you should keep in mind is that the Google scraping feature might not always work. In that case, you can check manually by using the same Google operator that dnsenum uses, with &ldquo;allinurl:-www site:target.com&rdquo;</p>

<ul>
<li>bruteforce subdomains and perform whois queries</li>
</ul>


<p>dnsenum has a domain bruteforce file located at <code>/usr/share/dnsenum/dns.txt</code>:</p>

<p><code>plain
wc -l /usr/share/dnsenum/dns.txt
1480 /usr/share/dnsenum/dns.txt
</code></p>

<p>Let&rsquo;s see some domain bruteforcing in action! Again, looking at kali.org:</p>

<p>``` plain
dnsenum -f /usr/share/dnsenum/dns.txt -w &mdash;noreverse kali.org
[&hellip;]
Brute forcing with /usr/share/dnsenum/dns.txt:</p>

<hr />

<p>archive.kali.org.                        5        IN    CNAME    hera.kali.org.
hera.kali.org.                           5        IN    A        192.99.45.140
bugs.kali.org.                           5        IN    A        198.50.203.236
bugs.kali.org.                           5        IN    A        198.50.203.235
forums.kali.org.                         5        IN    A        192.124.249.12
hermes.kali.org.                         5        IN    A        198.27.70.128
http.kali.org.                           5        IN    CNAME    hebe.kali.org.
hebe.kali.org.                           5        IN    A        192.99.200.113
mail.kali.org.                           5        IN    CNAME    apollo.kali.org.
apollo.kali.org.                         5        IN    A        23.239.31.82
old.kali.org.                            5        IN    CNAME    hermes.kali.org.
hermes.kali.org.                         5        IN    A        198.27.70.128
pan.kali.org.                            5        IN    A        167.114.101.148
shop.kali.org.                           5        IN    A        45.79.147.167
www.kali.org.                            5        IN    A        192.124.249.10</p>

<p>Launching Whois Queries:</p>

<hr />

<p> whois ip result:   23.239.31.0        &ndash;>      23.239.0.0/19
 whois ip result:   45.79.147.0        &ndash;>      45.79.0.0/16
 whois ip result:   167.114.101.0      &ndash;>      167.114.0.0/16
 whois ip result:   192.99.45.0        &ndash;>      192.99.0.0/16
 whois ip result:   192.124.249.0      &ndash;>      192.124.249.0/24
 whois ip result:   198.27.70.0        &ndash;>      198.27.64.0/18
 whois ip result:   198.50.203.0       &ndash;>      198.50.203.0/27</p>

<p>kali.org________</p>

<p> 192.99.0.0/16
 23.239.0.0/19
 45.79.0.0/16
 198.50.203.0/27
 192.124.249.0/24
 167.114.0.0/16
 198.27.64.0/18</p>

<p>kali.org ip blocks:</p>

<hr />

<p> 23.239.31.82/32
 45.79.147.167/32
 167.114.101.148/32
 192.99.45.140/32
 192.99.200.113/32
 192.124.249.10/32
 192.124.249.12/32
 198.27.70.128/32
 198.50.203.235/32
 198.50.203.236/32</p>

<p>done.
```</p>

<p>And today&rsquo;s cow saying is:</p>

<p>``` plain
/ Tomorrow, this will be part of the    \
| unchangeable past but fortunately, it |
\ can still be changed today.           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Burp Suite]]></title>
    <link href="http://chousensha.github.io/blog/2016/11/19/introduction-to-burp-suite/"/>
    <updated>2016-11-19T17:01:23-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/11/19/introduction-to-burp-suite</id>
    <content type="html"><![CDATA[<p>Yes, the time has come for a full post on Burp Suite! I have delayed it for too long!</p>

<p>Before starting, here are some resources for learning about Burp:</p>

<p><a href="https://portswigger.net/burp/help/contents.html">Burp Suite Documentation</a></p>

<p><a href="http://aetherlab.teachable.com/p/burp-suite">Free introductory course on Burp Suite</a></p>

<p><a href="https://vimeo.com/album/3510171">Burp Suite for Web Application Security</a></p>

<!-- more -->


<p>Burp Suite is the primary tool used for performing web application security assessments. It acts as a proxy between your browser and the target, and it comes packed with powerful features to assist in penetration testing: spidering fuctionality, web scanning for vulnerabilities (pro version only), tools that allow you to perform different actions with web requests (will be covered in detail below), and customization ability through plugins.</p>

<h1>Introduction to Burp Suite</h1>

<p>Burp is a Java application, so you need to have Java installed (version 1.6 or later) to run it. It comes pre-installed in Kali, where you can find it in the Web Application Analysis category.</p>

<p>To use Burp, you need to configure your browser&rsquo;s proxy settings. Burp&rsquo;s proxy is listening on 127.0.0.1:8080. If you want to manually configure your browser to use it, refer to this <a href="https://portswigger.net/burp/help/suite_gettingstarted.html">getting started post</a>. I recommend using a browser add-on like <a href="https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/">FoxyProxy</a> to set up your proxies and toggle them with a click.</p>

<p>For <strong>Burp to work with HTTPS</strong> requests, you need to add Burp&rsquo;s CA certificate to your browser. Go to <a href="http://burp/">http://burp/</a> and click on CA Certificate to download it to your computer. In this demo I&rsquo;m using Firefox, but the steps should be similar in the rest of the browsers. In the Firefox menu, select Options or Preferences, then go to Advanced &ndash;> Certificates &ndash;> View Certificates. Click on the Authorities tab and choose Import to select your CA certificate, and check the option &ldquo;Trust this CA to identify web sites&rdquo;. Then click Ok, and restart Firefox. Burp should work now with HTTPS traffic, without issuing any security warnings.</p>

<h1>Burp Suite components</h1>

<p>The power of Burp comes from the interaction between its components, which you can individually access from the application tabs. Let&rsquo;s see each of them in action!</p>

<h2>Target</h2>

<p>Here you can see information about your target. The site map constructs a hierarchical representation of your target. Items requested are shown in black, those that Burp inferred from links etc. are in gray. As you browse with the proxy on, Burp will keep building the site map.</p>

<p><img class="center" src="/images/tools/burp/sitemap.png" title="&lsquo;sitemap&rsquo; &lsquo;target sitemap&rsquo;" ></p>

<p>You can configure the scope of your targets from the Scope tab. Alternately, you can right-click on the sitemap entries to perform other actions:</p>

<p><img class="center" src="/images/tools/burp/sitemap-menu.png" title="&lsquo;sitemap menu&rsquo; &lsquo;target sitemap menu&rsquo;" ></p>

<p>Clicking on the Filter bar lets you customize filtering options. Before starting the demo, I added my target to the scope and selected to hide the out-of scope items for a clearer view.</p>

<p><img class="center" src="/images/tools/burp/sitemap-filter.png" title="&lsquo;sitemap filter&rsquo; &lsquo;target sitemap filter&rsquo;" ></p>

<h2>Proxy</h2>

<p>This is the component that allows you to intercept and modify the requests between your browser and the target. You will get familiar with the Intercept tab, where you can inspect each request and response, modify it, or send it to other tools. The history tabs keep records for the HTTP and WebSockets messages. In the Options tab you have a plethora of configuration options for your Proxy. Take special note of the Response Modification options, which you can use to automatically modify the responses HTML to remove client-side logic and controls, or perform SSL stripping.</p>

<p><img class="center" src="/images/tools/burp/proxy-options.png" title="&lsquo;proxy response options&rsquo; &lsquo;response modification options&rsquo;" ></p>

<p>Right-clicking in the Raw tab will give you more options, among which there are some very useful ones such as copying the request as a Curl command, or constructing selected strings in Javascript and SQL (MySQL, Oracle, MS-SQL)</p>

<h2>Spider</h2>

<p>You can use Burp&rsquo;s spider to automatically crawl target applications. After you&rsquo;ve manually browsed the application, right-click the host or URL that you want to crawl in the site map, and choose &ldquo;Spider this host / branch&rdquo;. Then watch the number of requests being made in the Control tab. You can customize the spider in the Options tab. Passive spidering is enabled by default, allowing Burp to update the site map while you are manually browsing. Also, you can specify what the spider should do when encountering forms (ignoring them, automatically submitting with pre-determined values, prompting for guidance etc.) Be careful, as the spider may perform actions with repercussions on the target application, so an initial manual assessment followed by a strict configuration of the spidering scope would be preferred.</p>

<h2>Scanner</h2>

<p>Burp has an automatic vulnerability scanner <em>uncontrolled drooling</em> that seems excellent from the reviews, but it&rsquo;s only available for Pro users. If you look in the Issue definitions tab, you can see the <a href="https://portswigger.net/KnowledgeBase/Issues/">vulnerabilites that Burp can detect</a>, among with a description for each of them <em>drooling intensifies</em></p>

<p><img class="center" src="/images/tools/burp/scanner.png" title="&lsquo;burp scanner&rsquo; &lsquo;burp web scanner&rsquo;" ></p>

<h2>Intruder</h2>

<p>With Burp Intruder you can perform highly-customized automated attacks against your targets, including brute forcing, fuzzing, enumeration etc. Usually, you select an interesting request and send it to Intruder. You can see the positions where payloads will be placed, marked in orange in this dummy request:</p>

<p><img class="center" src="/images/tools/burp/intruder-position.png" title="&lsquo;intruder positions&rsquo; &lsquo;intruder payload positions&rsquo;" ></p>

<h3>Attack types</h3>

<p>In the Position tab, you can also choose the type of attack you want to perform:</p>

<ul>
<li><p><strong>Sniper</strong> &ndash; single set of payloads, places each payload into each position in turn, useful for individual parameter fuzzing</p></li>
<li><p><strong>Battering ram</strong> &ndash; single set of payloads, places the the same payload into all positions at the same time</p></li>
<li><p><strong>Pitchfork</strong> &ndash; multiple payload sets, different payload set for each position</p></li>
<li><p><strong>Cluster bomb</strong> &ndash; multiple payload sets, tests all permutations of the payload combinations, so depending on your payloads, this attack might grow to gigantic proportions</p></li>
</ul>


<h3>Payload types</h3>

<p>You have lots of payload types available for testing, so choose what is appropriate for your target:</p>

<ul>
<li><p><strong>Simple list</strong> &ndash; list of strings</p></li>
<li><p><strong>Runtime file</strong> &ndash; read strings at runtime from a file (for very large lists)</p></li>
<li><p><strong>Custom iterator</strong> &ndash; permutations of characters in multiple lists</p></li>
<li><p><strong>Character substitution</strong> &ndash; substitute characters, for instance when you are testing for 53cur3 p455w0rd5</p></li>
<li><p><strong>Case modification</strong> &ndash; change the characters' case according to the pre-defined rules</p></li>
<li><p><strong>Recursive grep</strong> &ndash; recursively extract data from the responses of previous requests</p></li>
<li><p><strong>Illegal Unicode</strong> &ndash; by using illegal Unicode representations, it might be possible to bypass filters etc.</p></li>
<li><p><strong>Character blocks</strong> &ndash; creates blocks of characters of specified sizes, can aid in detecting buffer overflows</p></li>
<li><p><strong>Numbers</strong> &ndash; numeric payloads</p></li>
<li><p><strong>Dates</strong> &ndash; date values</p></li>
<li><p><strong>Brute forcer</strong> &ndash; sets of permutations generated from specified characters</p></li>
<li><p><strong>Null payloads</strong> &ndash; empty string payloads</p></li>
<li><p><strong>Character frobber</strong> &ndash; changes the value of each character in turn, useful for determining what characters are being used for session tokens etc.</p></li>
<li><p><strong>Bit flipper</strong> &ndash; flips individual bits in the payload</p></li>
<li><p><strong>Username generator</strong> &ndash; generates usernames from the given input</p></li>
<li><p><strong>ECB block shuffler</strong> &ndash; shuffles ECB-encrypted blocks</p></li>
<li><p><strong>Extension generated</strong> &ndash; uses an extension to create the payloads</p></li>
<li><p><strong>Copy other payload</strong> &ndash; copies the current payload value to a different position</p></li>
</ul>


<h2>Repeater</h2>

<p>This tool is useful for sending requests over and over to the target application.</p>

<p><img class="center" src="/images/tools/burp/repeater.png" title="&lsquo;repeater&rsquo; &lsquo;repeater&rsquo;" ></p>

<h2>Sequencer</h2>

<p>With the Sequencer tool you can test for the randomness of data tokens in an target application. The analysis is more accurate if the number of captured tokens is larger.</p>

<p><img class="center" src="/images/tools/burp/sequencer.png" title="&lsquo;Burp sequencer&rsquo; &lsquo;Burp sequencer&rsquo;" ></p>

<h2>Decoder</h2>

<p>The Decoder tool performs encoding and decoding of different data formats, such as HTML, URL, Base64, ASCII hex, Hex, Octal, Binary, Gzip, and it also has hashing functionality for MD2, SHA-224, MD5, SHA1, SHA-384, SHA, SHA-512 and SHA-256.</p>

<p><img class="center" src="/images/tools/burp/decoder.png" title="&lsquo;Burp decoder&rsquo; &lsquo;Burp decoder&rsquo;" ></p>

<h2>Comparer</h2>

<p>If you want to compare different responses, this tool gives you the options of words or bytes comparison</p>

<p><img class="center" src="/images/tools/burp/comparer.png" title="&lsquo;Burp comparer&rsquo; &lsquo;Burp comparer&rsquo;" ></p>

<h2>Extender</h2>

<p>Here you can add extensions to Burp that add more functionality than what is available by default. Take a look at what extensions you can find in the BApp Store:</p>

<p><img class="center" src="/images/tools/burp/extensions.png" title="&lsquo;burp extensions&rsquo; &lsquo;burp extensions&rsquo;" ></p>

<p>In this screenshot I am sorting by rating. There are many extensions available and I suggest looking at each and determining if you will need it before choosing to install.</p>

<h3>Burp Clickbandit</h3>

<p>We&rsquo;re done with the main tools, but Burp has more. It even includes a cool tool for creating clickjacking attacks.</p>

<p><img class="center" src="/images/tools/burp/clickbandit.png" title="&lsquo;burp clickbandit&rsquo; &lsquo;burp clickbandit&rsquo;" ></p>

<p>In a future post I will do a lab featuring Burp&rsquo;s capabilities that I&rsquo;ve enumerated so far. Expect some Mutillidae! :&ndash;)</p>

<p>``` plain</p>

<hr />

<p>/ Don&rsquo;t you wish you had more energy&hellip; \
\ or less ambition?                     /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest tools - Dirbuster]]></title>
    <link href="http://chousensha.github.io/blog/2016/09/12/pentest-tools-dirbuster/"/>
    <updated>2016-09-12T02:21:55-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/09/12/pentest-tools-dirbuster</id>
    <content type="html"><![CDATA[<p>Dirbuster is a <a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">multithreaded Java application</a> that tries to find hidden files and directories on a target web application by brute forcing their names. Dirbuster comes with <a href="https://github.com/digination/dirbuster-ng/tree/master/wordlists">9 lists</a> of common file and directory names that were crawled from the internet, but you can choose to use your own. Pure brute forcing is also available, but due to the time constraints, the filelist option is by far the most commonly used</p>

<!-- more -->


<p>As an aside, you might have probably noticed that lately I&rsquo;ve been writing less writeups and have been focusing more on tools and system administration fundamentals. I thought that in the long run, this approach would yield better and faster results, both in CTF challenges and in real-life hacking (bug bounties, I&rsquo;m looking at you). While I haven&rsquo;t used Dirbuster so much, I was inspired to write a post for it after reading <a href="https://blog.it-securityguard.com/bugbounty-decoding-a-%F0%9F%98%B1-00000-htpasswd-bounty/">this blog post on how it helped in acquiring a nice bounty</a></p>

<p>With that said, let&rsquo;s take a look at Dirbuster&rsquo;s interface:</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster.png" title="&lsquo;dirbuster&rsquo; &lsquo;dirbuster interface&rsquo;" ></p>

<p>This tool is not complicated to use, nor does it have tons of other functionality besides discovering hidden resources. However, from my (limited) experience with it, the default settings might not work in the majority of cases (causing crashes and so on). A bit of fine tuning is required to get the most of your dirbusting experience, and is this that I will be covering here.</p>

<h1>Dirbuster configuration</h1>

<p>The first thing you will do when starting Dirbuster is to select a wordlist to use. The lists that come with Dirbuster are located in <code>/usr/share/dirbuster/wordlists/</code> on a Kali machine.</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-lists.png" title="&lsquo;dirbuster lists&rsquo; &lsquo;dirbuster default lists&rsquo;" ></p>

<ul>
<li><p><strong>Work method</strong> &ndash; leave the Auto Switch selected for fastest results. Dirbuster will try a HEAD request first, saving more bandwidth and latency than it would with a straight on GET request.</p></li>
<li><p><strong>Number of threads</strong> &ndash; the default is 10, but in my own testing, I found this excessive, so I am now starting with 3-5 threads. Since the <em>Go Faster</em> option allows you to jump over 100 threads, you might think the faster the better, but I noticed that Dirbuster has a really thin line between slow but working and fast but crashed. Maybe it&rsquo;s the local vulnerable installations I tested against, but it seems logical to treat a live target with more caution than a lab..you don&rsquo;t want to DOS your target in your search for goodies.</p></li>
</ul>


<p>In your choice of wordlist, take a second to review the target and see if it uses case sensitive resources (for instance, try seeing if admin returns the same as Admin, use lowecase lists if target is a IIS web server etc.). This will help you decide what list is most appropriate for the job, and save you precious time.</p>

<p>Under the starting options, you will tweak things as needed, because there is no one-size-fits-all approach to these checkboxes. The <strong>standard start point</strong> considers directories as ending with a / slash, and files ending with the specified extension. It&rsquo;s best not to run with all the options checked at the same time, as this will take significant time and it may potentially crash the target. I separate the <em>Brute Force Directories</em> and <em>Brute Force Files</em> + <em>Use Blank Extension</em>. As always, the target dictates the weapon, so time constraints and the sensitivity of the target should also be taken into consideration for the <em>Be Recursive</em> option, which I toggle as necessary.</p>

<p>The <strong>URL fuzz</strong> option allows you to enter the words in the lists directly in the URL, in a template like manner. An example offered by Dirbuster is  <code>test.html?url={dir}.asp</code>, where the content in curly brackets will be substituted for the words in list.</p>

<h2>Dirbuster Options</h2>

<p>In the Options tab, you can further tweak your Dirbuster installation.</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-options.png" title="&lsquo;dirbuster options&rsquo; &lsquo;dirbuster options&rsquo;" ></p>

<ul>
<li><p><strong>Follow redirects</strong> &ndash; I check this, but it does come with an overhead increase, you might want to leave it unchecked and manually navigate to interesting places that were found</p></li>
<li><p><strong>Parse HTML</strong> is on by default, and it lets Dirbuster read the HTML and look there for other files and folders that it won&rsquo;t have to guess</p></li>
</ul>


<p>In the Advanced options, there a few more tabs you can configure. The Dirbuster Options tab allows you to set some default values so you don&rsquo;t have to change them each time you start the application.</p>

<p>In the HTML Parsing tab you can configure which HTML elements to extract links from, along with file extensions that should not be processed.</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-html.png" title="&lsquo;dirbuster html options&rsquo; &lsquo;dirbuster html parsing&rsquo;" ></p>

<p>The Authentication tabs covers authentication options for Basic, Digest and NTLM authentication. In the HTTP Options tab you might want to spend a few moments to change the blatantly conspicuous user agent. Also, note the <em>Run through a proxy</em> option, which is available if you want to..well, run Dirbuster through a proxy. It&rsquo;s also possible to add custom headers, maybe you want to add a cookie to use Dirbuster as an authenticated user. That might be risky if your user privileges allow you to perform certain actions on the target, so you might want to restrict other options in this case (maybe you don&rsquo;t want to follow all the links in case one of them does something you really wouldn&rsquo;t want to, and so on).</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-http.png" title="&lsquo;dirbuster http options&rsquo; &lsquo;dirbuster http options&rsquo;" ></p>

<p>Finally, there&rsquo;s the Scan options tab. I chose to decrease the default <em>Connection Timeout</em> value from 30 to 10 seconds and to limit the number of requests per second. You can also see the failcase string that Dirbuster uses to determine if a resource is actually there or not.</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-scan.png" title="&lsquo;dirbuster scan options&rsquo; &lsquo;dirbuster scan options&rsquo;" ></p>

<p>After running a scan, you can see the results found, including the HTTP response code and the size. I ran a test scan against Mutillidae with threads blazing for the demo:</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-results.png" title="&lsquo;dirbuster scan results&rsquo; &lsquo;dirbuster scan results&rsquo;" ></p>

<p>You can also see the results in a tree view, for better readability:</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-tree.png" title="&lsquo;dirbuster tree&rsquo; &lsquo;dirbuster tree results&rsquo;" ></p>

<p>This concludes the post on Dirbuster. Despite being unmaintained (not sure if that&rsquo;s a word), it&rsquo;s still the go-to application for files and folders discovery. Use it early in the recon process (after you took a look at the target to know which settings to apply) for best results!</p>

<p>``` plain</p>

<hr />

<p>/ Fine day for friends. So-so day for \
\ you.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
