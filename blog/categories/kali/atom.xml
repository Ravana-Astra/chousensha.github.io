<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kali | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/kali/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2015-04-10T17:01:39+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Password Attacks]]></title>
    <link href="http://chousensha.github.io/blog/2015/04/04/kali-tools-catalog-password-attacks/"/>
    <updated>2015-04-04T18:08:57+03:00</updated>
    <id>http://chousensha.github.io/blog/2015/04/04/kali-tools-catalog-password-attacks</id>
    <content type="html"><![CDATA[<p>Tools for password related attacks</p>

<!-- more -->


<h3>GPU Tools</h3>

<p><strong>oclhashcat</strong></p>

<p>``` plain</p>

<pre><code>Worlds fastest password cracker
Worlds first and only GPGPU based rule engine
Free
Multi-GPU (up to 128 gpus)
Multi-Hash (up to 100 million hashes)
Multi-OS (Linux &amp; Windows native binaries)
Multi-Platform (OpenCL &amp; CUDA support)
Multi-Algo (see below)
Low resource utilization, you can still watch movies or play games while cracking
Focuses highly iterated modern hashes
Focuses dictionary based attacks
Supports distributed cracking
Supports pause / resume while cracking
Supports sessions
Supports restore
Supports reading words from file
Supports reading words from stdin
Supports hex-salt
Supports hex-charset
Built-in benchmarking system
Integrated thermal watchdog
150+ Algorithms implemented with performance in mind
... and much more
</code></pre>

<p>```</p>

<p>Screenshot from the official <a href="http://hashcat.net/oclhashcat/">site</a> showing it in action:</p>

<p><img class="center" src="/images/kali/password/oclhashcat.png" title="&lsquo;oclhashcat&rsquo; &lsquo;oclhashcat&rsquo;" ></p>

<p><strong>pyrit</strong></p>

<p>Pyrit  exploits  the  computational power of many-core- and GPGPU-platforms  to  create  massive  databases,  pre-computing   part   of   the WPA/WPA2-PSK  authentication  phase  in  a space-time tradeoff. It is a
powerful attack against one of the world&rsquo;s  most  used  security protocols.</p>

<p>``` plain
Pyrit 0.4.0 &copy; 2008-2011 Lukas Lueg <a href="http://pyrit.googlecode.com">http://pyrit.googlecode.com</a>
This code is distributed under the GNU General Public License v3+</p>

<p>Usage: pyrit [options] command</p>

<p>Recognized options:
  -b               : Filters AccessPoint by BSSID
  -e               : Filters AccessPoint by ESSID
  -h               : Print help for a certain command
  -i               : Filename for input (&lsquo;&ndash;&rsquo; is stdin)
  -o               : Filename for output (&lsquo;&ndash;&rsquo; is stdout)
  -r               : Packet capture source in pcap-format
  -u               : URL of the storage-system to use
  &mdash;all-handshakes : Use all handshakes instead of the best one</p>

<p>Recognized commands:
  analyze                 : Analyze a packet-capture file
  attack_batch            : Attack a handshake with PMKs/passwords from the db
  attack_cowpatty         : Attack a handshake with PMKs from a cowpatty-file
  attack_db               : Attack a handshake with PMKs from the db
  attack_passthrough      : Attack a handshake with passwords from a file
  batch                   : Batchprocess the database
  benchmark               : Determine performance of available cores
  benchmark_long          : Longer and more accurate version of benchmark (~10 minutes)
  check_db                : Check the database for errors
  create_essid            : Create a new ESSID
  delete_essid            : Delete a ESSID from the database
  eval                    : Count the available passwords and matching results
  export_cowpatty         : Export results to a new cowpatty file
  export_hashdb           : Export results to an airolib database
  export_passwords        : Export passwords to a file
  help                    : Print general help
  import_passwords        : Import passwords from a file-like source
  import_unique_passwords : Import unique passwords from a file-like source
  list_cores              : List available cores
  list_essids             : List all ESSIDs but don&rsquo;t count matching results
  passthrough             : Compute PMKs and write results to a file
  relay                   : Relay a storage-url via RPC
  selftest                : Test hardware to ensure it computes correct results
  serve                   : Serve local hardware to other Pyrit clients
  strip                   : Strip packet-capture files to the relevant packets
  stripLive               : Capture relevant packets from a live capture-source
  verify                  : Verify 10% of the results by recomputation
```</p>

<h3>Offline Attacks</h3>

<p><strong>cachedump</strong></p>

<p>Recover Windows password cache entries</p>

<p><code>plain
usage: /usr/bin/cachedump &lt;system hive&gt; &lt;security hive&gt;
</code></p>

<p><strong>chntpw</strong></p>

<p>chntpw is a utility to view some information and change user passwords in a Windows NT/2000 SAM  userdatabase  file,  usually  located  at
\WINDOWS\system32\config\SAM on the Windows file system. It is not necessary to know the old passwords to reset them.  In addition it contains a simple registry editor (same size data writes) and hex-editor with which the information contained  in  a  registry  file  can  be
browsed and modified.</p>

<p><img class="center" src="/images/kali/password/chntpw.png" title="&lsquo;chntpw&rsquo; &lsquo;chntpw&rsquo;" ></p>

<p><strong>cmospwd</strong></p>

<p>A cmos/bios password recovery tool</p>

<p><img class="center" src="/images/kali/password/cmospwd.png" title="&lsquo;cmospwd&rsquo; &lsquo;cmospwd&rsquo;" ></p>

<p><strong>crunch</strong></p>

<p>Generate wordlists from a character set</p>

<p>``` plain
crunch version 3.6</p>

<p>Crunch can create a wordlist based on criteria you specify.  The outout from crunch can be sent to the screen, file, or to another program.</p>

<p>Usage: crunch <min> <max> [options]
where min and max are numbers</p>

<p>Please refer to the man page for instructions and examples on how to use crunch.
```</p>

<p><strong>dictstat</strong></p>

<p>Generate dictionary file statistics</p>

<p><img class="center" src="/images/kali/password/dictstat.png" title="&lsquo;dictstat&rsquo; &lsquo;dictstat&rsquo;" ></p>

<p><strong>fcrackzip</strong></p>

<p>Searches each zipfile given for encrypted files and tries  to
guess the password. All files must be encrypted with the same password,
the more files you provide, the better.</p>

<p><img class="center" src="/images/kali/password/fcrackzip.png" title="&lsquo;fcrackzip&rsquo; &lsquo;fcrackzip&rsquo;" ></p>

<p><strong>hashcat</strong></p>

<p>Advanced password recovery</p>

<p>``` plain
root@kali:~# hashcat &mdash;help
hashcat, advanced password recovery</p>

<p>Usage: hashcat [options] hashfile [mask|wordfiles|directories]</p>

<p>=======</p>

<h1>Options</h1>

<ul>
<li><p>General:</p>

<p>-m,  &mdash;hash-type=NUM               Hash-type, see references below
-a,  &mdash;attack-mode=NUM             Attack-mode, see references below
-V,  &mdash;version                     Print version
-h,  &mdash;help                        Print help
     &mdash;eula                        Print EULA
     &mdash;expire                      Print expiration date
     &mdash;quiet                       Suppress output</p></li>
<li><p>Benchmark:</p>

<p>-b,  &mdash;benchmark                   Run benchmark</p></li>
<li><p>Misc:</p>

<pre><code> --hex-salt                    Assume salt is given in hex
 --hex-charset                 Assume charset is given in hex
 --runtime=NUM                 Abort session after NUM seconds of runtime
</code></pre></li>
<li><p>Files:</p>

<p>-o,  &mdash;outfile=FILE                Define outfile for recovered hash
     &mdash;outfile-format=NUM          Define outfile-format for recovered hash, see references below
     &mdash;outfile-autohex-disable     Disable the use of $HEX[] in output plains
-p,  &mdash;separator=CHAR              Define separator char for hashlists/outfile
     &mdash;show                        Show cracked passwords only (see &mdash;username)
     &mdash;left                        Show uncracked passwords only (see &mdash;username)
     &mdash;username                    Enable ignoring of usernames in hashfile (Recommended: also use &mdash;show)
     &mdash;remove                      Enable remove of hash once it is cracked
     &mdash;stdout                      Stdout mode
     &mdash;potfile-disable             Do not write potfile
     &mdash;debug-mode=NUM              Defines the debug mode (hybrid only by using rules), see references below
     &mdash;debug-file=FILE             Output file for debugging rules (see &mdash;debug-mode)
-e,  &mdash;salt-file=FILE              Salts-file for unsalted hashlists</p></li>
<li><p>Resources:</p>

<p>-c,  &mdash;segment-size=NUM            Size in MB to cache from the wordfile
-n,  &mdash;threads=NUM                 Number of threads
-s,  &mdash;words-skip=NUM              Skip number of words (for resume)
-l,  &mdash;words-limit=NUM             Limit number of words (for distributed)</p></li>
<li><p>Rules:</p>

<p>-r,  &mdash;rules-file=FILE             Rules-file use: -r 1.rule
-g,  &mdash;generate-rules=NUM          Generate NUM random rules
     &mdash;generate-rules-func-min=NUM Force NUM functions per random rule min
     &mdash;generate-rules-func-max=NUM Force NUM functions per random rule max
     &mdash;generate-rules-seed=NUM     Force RNG seed to NUM</p></li>
<li><p>Custom charsets:</p>

<p>-1,  &mdash;custom-charset1=CS          User-defined charsets
-2,  &mdash;custom-charset2=CS          Example:
-3,  &mdash;custom-charset3=CS          &mdash;custom-charset1=?dabcdef : sets charset ?1 to 0123456789abcdef
-4,  &mdash;custom-charset4=CS          -2 mycharset.hcchr : sets charset ?2 to chars contained in file</p></li>
<li><p>Toggle-Case attack-mode specific:</p>

<pre><code> --toggle-min=NUM              Number of alphas in dictionary minimum
 --toggle-max=NUM              Number of alphas in dictionary maximum
</code></pre></li>
<li><p>Mask-attack attack-mode specific:</p>

<pre><code> --pw-min=NUM                  Password-length minimum
 --pw-max=NUM                  Password-length maximum
</code></pre></li>
<li><p>Permutation attack-mode specific:</p>

<pre><code> --perm-min=NUM                Filter words shorter than NUM
 --perm-max=NUM                Filter words larger than NUM
</code></pre></li>
<li><p>Table-Lookup attack-mode specific:</p>

<p>-t,  &mdash;table-file=FILE             Table file
     &mdash;table-min=NUM               Number of chars in dictionary minimum
     &mdash;table-max=NUM               Number of chars in dictionary maximum</p></li>
<li><p>Prince attack-mode specific:</p>

<pre><code> --pw-min=NUM                  Password-length minimum
 --pw-max=NUM                  Password-length maximum
 --elem-cnt-min=NUM            Minimum number of elements per chain
 --elem-cnt-max=NUM            Maximum number of elements per chain
</code></pre></li>
</ul>


<p>==========</p>

<h1>References</h1>

<ul>
<li><p>Outfile formats:</p>

<p>  1 = hash[:salt]
  2 = plain
  3 = hash[:salt]:plain
  4 = hex_plain
  5 = hash[:salt]:hex_plain
  6 = plain:hex_plain
  7 = hash[:salt]:plain:hex_plain
  8 = crackpos
  9 = hash[:salt]:crackpos
 10 = plain:crackpos
 11 = hash[:salt]:plain:crackpos
 12 = hex_plain:crackpos
 13 = hash[:salt]:hex_plain:crackpos
 14 = plain:hex_plain:crackpos
 15 = hash[:salt]:plain:hex_plain:crackpos</p></li>
<li><p>Debug mode output formats (for hybrid mode only, by using rules):</p>

<p>  1 = save finding rule
  2 = save original word
  3 = save original word and finding rule
  4 = save original word, finding rule and modified plain</p></li>
<li><p>Built-in charsets:</p>

<p> ?l = abcdefghijklmnopqrstuvwxyz
 ?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ
 ?d = 0123456789
 ?s =  !&ldquo;#$%&amp;&lsquo;()*+,&ndash;./:;&lt;=>?@[]^_`{|}~
 ?a = ?l?u?d?s
 ?b = 0x00 &ndash; 0xff</p></li>
<li><p>Attack modes:</p>

<p>  0 = Straight
  1 = Combination
  2 = Toggle-Case
  3 = Brute-force
  4 = Permutation
  5 = Table-Lookup
  6 = Prince</p></li>
<li><p>Hash types:</p>

<p>   0 = MD5
  10 = md5($pass.$salt)
  20 = md5($salt.$pass)
  30 = md5(unicode($pass).$salt)
  40 = md5($salt.unicode($pass))
  50 = HMAC-MD5 (key = $pass)
  60 = HMAC-MD5 (key = $salt)
 100 = SHA1
 110 = sha1($pass.$salt)
 120 = sha1($salt.$pass)
 130 = sha1(unicode($pass).$salt)
 140 = sha1($salt.unicode($pass))
 150 = HMAC-SHA1 (key = $pass)
 160 = HMAC-SHA1 (key = $salt)
 200 = MySQL323
 300 = MySQL4.1/MySQL5
 400 = phpass, MD5(Wordpress), MD5(phpBB3), MD5(Joomla)
 500 = md5crypt, MD5(Unix), FreeBSD MD5, Cisco-IOS MD5
 900 = MD4
1000 = NTLM
1100 = Domain Cached Credentials, mscash
1400 = SHA256
1410 = sha256($pass.$salt)
1420 = sha256($salt.$pass)
1430 = sha256(unicode($pass).$salt)
1440 = sha256($salt.unicode($pass))
1450 = HMAC-SHA256 (key = $pass)
1460 = HMAC-SHA256 (key = $salt)
1600 = md5apr1, MD5(APR), Apache MD5
1700 = SHA512
1710 = sha512($pass.$salt)
1720 = sha512($salt.$pass)
1730 = sha512(unicode($pass).$salt)
1740 = sha512($salt.unicode($pass))
1750 = HMAC-SHA512 (key = $pass)
1760 = HMAC-SHA512 (key = $salt)
1800 = SHA-512(Unix)
2400 = Cisco-PIX MD5
2410 = Cisco-ASA MD5
2500 = WPA/WPA2
2600 = Double MD5
3200 = bcrypt, Blowfish(OpenBSD)
3300 = MD5(Sun)
3500 = md5(md5(md5($pass)))
3610 = md5(md5($salt).$pass)
3710 = md5($salt.md5($pass))
3720 = md5($pass.md5($salt))
3810 = md5($salt.$pass.$salt)
3910 = md5(md5($pass).md5($salt))
4010 = md5($salt.md5($salt.$pass))
4110 = md5($salt.md5($pass.$salt))
4210 = md5($username.0.$pass)
4300 = md5(strtoupper(md5($pass)))
4400 = md5(sha1($pass))
4500 = Double SHA1
4600 = sha1(sha1(sha1($pass)))
4700 = sha1(md5($pass))
4710 = sha1($salt.$pass.$salt)
4800 = MD5(Chap), iSCSI CHAP authentication
5000 = SHA-3(Keccak)
5100 = Half MD5
5200 = Password Safe SHA-256
5300 = IKE-PSK MD5
5400 = IKE-PSK SHA1
5500 = NetNTLMv1-VANILLA / NetNTLMv1-ESS
5600 = NetNTLMv2
5700 = Cisco-IOS SHA256
5800 = Android PIN
6300 = AIX {smd5}
6400 = AIX {ssha256}
6500 = AIX {ssha512}
6700 = AIX {ssha1}
6900 = GOST, GOST R 34.11-94
7000 = Fortigate (FortiOS)
7100 = OS X v10.8 / v10.9
7200 = GRUB 2
7300 = IPMI2 RAKP HMAC-SHA1
7400 = sha256crypt, SHA256(Unix)
7900 = Drupal7
8400 = WBB3, Woltlab Burning Board 3
8900 = scrypt
9200 = Cisco $8$
9300 = Cisco $9$
9800 = Radmin2
10000 = Django (PBKDF2-SHA256)
10200 = Cram MD5
10300 = SAP CODVN H (PWDSALTEDHASH) iSSHA-1
99999 = Plaintext</p></li>
<li><p>Specific hash types:</p>

<p> 11 = Joomla &lt; 2.5.18
 12 = PostgreSQL
 21 = osCommerce, xt:Commerce
 23 = Skype
101 = nsldap, SHA-1(Base64), Netscape LDAP SHA
111 = nsldaps, SSHA-1(Base64), Netscape LDAP SSHA
112 = Oracle 11g/12c
121 = SMF > v1.1
122 = OS X v10.4, v10.5, v10.6
123 = EPi
124 = Django (SHA-1)
131 = MSSQL(2000)
132 = MSSQL(2005)
133 = PeopleSoft
141 = EPiServer 6.x &lt; v4
1421 = hMailServer
1441 = EPiServer 6.x > v4
1711 = SSHA-512(Base64), LDAP {SSHA512}
1722 = OS X v10.7
1731 = MSSQL(2012 &amp; 2014)
2611 = vBulletin &lt; v3.8.5
2612 = PHPS
2711 = vBulletin > v3.8.5
2811 = IPB2+, MyBB1.2+
3711 = Mediawiki B type
3721 = WebEdition CMS
7600 = Redmine Project Management Web App
```</p></li>
</ul>


<p><strong>hashid</strong></p>

<p>hashID  is  a tool written in Python 3.x which supports the identification of over 200 unique hash types using regular expressions.</p>

<p>Usage example from the project&rsquo;s <a href="https://github.com/psypanda/hashID">Github page</a>:</p>

<p>``` plain
$ ./hashid.py &lsquo;$P$8ohUJ.1sdFw09/bMaAQPTGDNi2BIUt1&rsquo;
Analyzing &lsquo;$P$8ohUJ.1sdFw09/bMaAQPTGDNi2BIUt1&rsquo;
[+] Wordpress ≥ v2.6.2
[+] Joomla ≥ v2.5.18
[+] PHPass' Portable Hash</p>

<p>$ ./hashid.py -mj &lsquo;$racf$<em>AAAAAAAA</em>3c44ee7f409c9a9b&rsquo;
Analyzing &lsquo;$racf$<em>AAAAAAAA</em>3c44ee7f409c9a9b&rsquo;
[+] RACF [Hashcat Mode: 8500][JtR Format: racf]</p>

<p>$ ./hashid.py hashes.txt
&mdash;File &lsquo;hashes.txt&rsquo;&mdash;
Analyzing &lsquo;*85ADE5DDF71E348162894C71D73324C043838751&rsquo;
[+] MySQL5.x
[+] MySQL4.1
Analyzing &lsquo;$2a$08$VPzNKPAY60FsAbnq.c.h5.XTCZtC1z.j3hnlDFGImN9FcpfR1QnLq&rsquo;
[+] Blowfish(OpenBSD)
[+] Woltlab Burning Board 4.x
[+] bcrypt
&mdash;End of file &lsquo;hashes.txt&rsquo;&mdash;
```</p>

<p><strong>hash-identifier</strong></p>

<p>Identify different types of hashes</p>

<p><code>`` plain
   #########################################################################
   #     __  __             __       ______    _____       #
   #    /\ \/\ \           /\ \     /\__  _\  /\  _</code>\     #
   #    \ \ _\ \     <strong>      </strong><strong> \ \ _</strong> \/<em>/\ \/  \ \ \/\ \    #
   #     \ \  _  \  /&lsquo;__<code>\   / ,__\ \ \  _</code>\      \ \ \   \ \ \ \ \       #
   #      \ \ \ \ \/\ _\ _/_</em>, `\ \ \ \ \ \      _\ _<em> \ \ _\ \      #
   #       \ _\ _\ _<strong> _\/_</strong></em>/  \ _\ _\     /_<em><strong><em>\ \ _</em></strong>/      #
   #        \/</em>/\/<em>/\/__/\/</em>/\/<strong><em>/    \/</em>/\/<em>/     \/</em></strong><strong>/  \/</strong>_/  v1.1 #
   #                                 By Zion3R #
   #                            www.Blackploit.com #
   #                               <a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#58;&#x52;&#111;&#x6f;&#x74;&#64;&#x42;&#108;&#x61;&#x63;&#107;&#112;&#x6c;&#111;&#x69;&#116;&#x2e;&#x63;&#x6f;&#109;">&#82;&#111;&#x6f;&#x74;&#x40;&#66;&#x6c;&#97;&#x63;&#107;&#112;&#x6c;&#x6f;&#105;&#116;&#46;&#x63;&#x6f;&#x6d;</a> #
   #########################################################################</p>

<hr />

<p> HASH:</p>

<p>```</p>

<p><strong>john</strong></p>

<p>John the Ripper is a tool to find weak passwords of users in a server. John can
use  a  dictionary or some search pattern as well as a password file to check for passwords. John supports different cracking modes and  understands  many  ciphertext  formats,  like  several DES variants, MD5 and
blowfish. It can also be used to extract AFS and Windows NT passwords.</p>

<p>``` plain
John the Ripper password cracker, ver: 1.7.9-jumbo-7_omp [linux-x86-64]
Copyright &copy; 1996-2012 by Solar Designer and others
Homepage: <a href="http://www.openwall.com/john/">http://www.openwall.com/john/</a></p>

<p>Usage: john [OPTIONS] [PASSWORD-FILES]
&mdash;config=FILE             use FILE instead of john.conf or john.ini
&mdash;single[=SECTION]        &ldquo;single crack&rdquo; mode
&mdash;wordlist[=FILE] &mdash;stdin wordlist mode, read words from FILE or stdin</p>

<pre><code>              --pipe  like --stdin, but bulk reads, and allows rules
</code></pre>

<p>&mdash;loopback[=FILE]         like &mdash;wordlist, but fetch words from a .pot file
&mdash;dupe-suppression        suppress all dupes in wordlist (and force preload)
&mdash;encoding=NAME           input data is non-ascii (eg. UTF-8, ISO-8859-1).</p>

<pre><code>                      For a full list of NAME use --list=encodings
</code></pre>

<p>&mdash;rules[=SECTION]         enable word mangling rules for wordlist modes
&mdash;incremental[=MODE]      &ldquo;incremental&rdquo; mode [using section MODE]
&mdash;markov[=OPTIONS]        &ldquo;Markov&rdquo; mode (see doc/MARKOV)
&mdash;external=MODE           external mode or word filter
&mdash;stdout[=LENGTH]         just output candidate passwords [cut at LENGTH]
&mdash;restore[=NAME]          restore an interrupted session [called NAME]
&mdash;session=NAME            give a new session the NAME
&mdash;status[=NAME]           print status of a session [called NAME]
&mdash;make-charset=FILE       make a charset file. It will be overwritten
&mdash;show[=LEFT]             show cracked passwords [if =LEFT, then uncracked]
&mdash;test[=TIME]             run tests and benchmarks for TIME seconds each
&mdash;users=[&ndash;]LOGIN|UID[,..] [do not] load this (these) user(s) only
&mdash;groups=[&ndash;]GID[,..]      load users [not] of this (these) group(s) only
&mdash;shells=[&ndash;]SHELL[,..]    load users with[out] this (these) shell(s) only
&mdash;salts=[&ndash;]COUNT[:MAX]    load salts with[out] COUNT [to MAX] hashes
&mdash;pot=NAME                pot file to use
&mdash;format=NAME             force hash type NAME: afs bf bfegg bsdi crc32 crypt</p>

<pre><code>                      des django dmd5 dominosec dragonfly3-32 dragonfly3-64
                      dragonfly4-32 dragonfly4-64 drupal7 dummy dynamic_n
                      epi episerver gost hdaa hmac-md5 hmac-sha1
                      hmac-sha224 hmac-sha256 hmac-sha384 hmac-sha512
                      hmailserver ipb2 keepass keychain krb4 krb5 lm lotus5
                      md4-gen md5 md5ns mediawiki mscash mscash2 mschapv2
                      mskrb5 mssql mssql05 mysql mysql-sha1 nethalflm netlm
                      netlmv2 netntlm netntlmv2 nsldap nt nt2 odf office
                      oracle oracle11 osc pdf phpass phps pix-md5 pkzip po
                      pwsafe racf rar raw-md4 raw-md5 raw-md5u raw-sha
                      raw-sha1 raw-sha1-linkedin raw-sha1-ng raw-sha224
                      raw-sha256 raw-sha384 raw-sha512 salted-sha1 sapb
                      sapg sha1-gen sha256crypt sha512crypt sip ssh
                      sybasease trip vnc wbb3 wpapsk xsha xsha512 zip
</code></pre>

<p>&mdash;list=WHAT               list capabilities, see &mdash;list=help or doc/OPTIONS
&mdash;save-memory=LEVEL       enable memory saving, at LEVEL 1..3
&mdash;mem-file-size=SIZE      size threshold for wordlist preload (default 5 MB)
&mdash;nolog                   disables creation and writing to john.log file
&mdash;crack-status            emit a status line whenever a password is cracked
&mdash;max-run-time=N          gracefully exit after this many seconds
&mdash;regen-lost-salts=N      regenerate lost salts (see doc/OPTIONS)
&mdash;plugin=NAME[,..]        load this (these) dynamic plugin(s)
```</p>

<p><strong>johnny</strong></p>

<p>GUI for the John the Ripper password cracking tool.</p>

<p><img class="center" src="/images/kali/password/johnny.png" title="&lsquo;johnny&rsquo; &lsquo;johnny&rsquo;" ></p>

<p><strong>lsadump</strong></p>

<p>Dump LSA secrets</p>

<p><a href="http://tools.kali.org/password-attacks/creddump">Usage example from Kali site</a>:</p>

<p>``` plain
root@kali:~# lsadump system security
_SC_ALG</p>

<p>_SC_Dnscache</p>

<p>_SC_upnphost</p>

<p>20ed87e2-3b82-4114-81f9-5e219ed4c481-SALEMHELPACCOUNT</p>

<p>_SC_WebClient</p>

<p>_SC_RpcLocator</p>

<p>0083343a-f925-4ed7-b1d6-d95d17a0b57b-RemoteDesktopHelpAssistantSID
0000   01 05 00 00 00 00 00 05 15 00 00 00 B6 44 E4 23    &hellip;&hellip;&hellip;&hellip;.D.#
0010   F4 50 BA 74 07 E5 3B 2B E8 03 00 00                .P.t..;+&hellip;.</p>

<p>0083343a-f925-4ed7-b1d6-d95d17a0b57b-RemoteDesktopHelpAssistantAccount
0000   00 38 00 48 00 6F 00 31 00 49 45 00 4A 00 26 00    E.J.&amp;.8.H.o.1.I.
0010   00 63 00 72 00 48 00 68 00 53 6B 00 00 00          h.S.c.r.H.k&hellip;</p>

<p>_SC_MSDTC</p>

<p>_SC_SSDPSRV</p>

<p>_SC_Alerter</p>

<p>_SC_RpcSs</p>

<p>_SC_LmHosts</p>

<p>_SC_BthServ
```</p>

<p><strong>maskgen</strong></p>

<p>Generate hashcat masks</p>

<p><img class="center" src="/images/kali/password/maskgen.png" title="&lsquo;maskgen&rsquo; &lsquo;maskgen&rsquo;" ></p>

<p><strong>multiforcer</strong></p>

<p>A CUDA &amp; OpenCL accelerated rainbow table implementation from the ground up, and a CUDA hash brute forcing tool with support for many hash types including MD5, SHA1, LM, NTLM, and lots more.</p>

<p><a href="http://www.cryptohaze.com/multiforcer.php">Basic command line parameters</a>:</p>

<p><code>plain
-h / --hashtype [hash type] (required) This specifies the hash type to search. See the wiki for a current list of supported hashes.
-c / --charsetfile &lt;filename&gt; This specifies the charset file for single charset use.
-u / --charsetfilemulti &lt;filename&gt; This specifies the charset file for per-position charset use.
-o / --outputfile (optional) This specifies the output for found hashes. The file will be appended, not overwritten.
-f / --hashfile (required) This specifies the file of hashes. Hashes should be in ASCII-hex format (as they are typically found), one per line. The file should end with a newline.
--min / --max (required) These set the minimum and maximum password lengths to search. Lengths of 0 through 14 are currently supported.
-m / --ms (optional) This specifies the target kernel time, in milliseconds (1/1000th of a second). When using a system with a GUI, lower times will allow better display response, but will lower performance. See below for more details. The default is 50ms, which should not interfere with general system use.
-l / --lookup (optional) Use a 512MB chunk of GPU RAM to improve performance on very large hashlists. Requires at least 768MB video RAM to use.
</code></p>

<p><strong>ophcrack</strong></p>

<p>A Microsoft Windows password cracker using rainbow tables</p>

<p><img class="center" src="/images/kali/password/ophcrack.png" title="&lsquo;ophcrack&rsquo; &lsquo;ophcrack&rsquo;" ></p>

<p><strong>ophcrack-cli</strong></p>

<p>Command line interface for ophcrack</p>

<p>``` plain
ophcrack 3.4.0 by Objectif Securite (<a href="http://www.objectif-securite.ch">http://www.objectif-securite.ch</a>)</p>

<p>Usage: ophcrack [OPTIONS]
Cracks Windows passwords with Rainbow tables</p>

<p>  -a              disable audit mode (default)
  -A              enable audit mode
  -b              disable bruteforce
  -B              enable bruteforce (default)
  -c config_file  specify the config file to use
  -D              display (lots of!) debugging information
  -d dir          specify tables base directory
  -e              do not display empty passwords
  -f file         load hashes from the specified file (pwdump or session)
  -g              disable GUI
  -h              display this information
  -i              hide usernames
  -I              show usernames (default)
  -l file         log all output to the specified file
  -n num          specify the number of threads to use
  -o file         write cracking output to file in pwdump format
  -p num          preload (0 none, 1 index, 2 index+end, 3 all default)
  -q              quiet mode
  -r              launch the cracking when ophcrack starts (GUI only)
  -s              disable session auto-saving
  -S session_file specify the file to use to automatically save the progress of the search
  -u              display statistics when cracking ends
  -t table1[,a[,b,&hellip;]][:table2[,a[,b,&hellip;]]]</p>

<pre><code>              specify which table to use in the directory given by -d
</code></pre>

<p>  -v              verbose
  -w dir          load hashes from encrypted SAM file in directory dir
  -x file         export data in CSV format to file</p>

<p>Example:    ophcrack -g -d /path/to/tables -t xp_free_fast,0,3:vista_free -f in.txt</p>

<pre><code>    Launch ophcrack in command line using tables 0 and 3 in
    /path/to/tables/xp_free_fast and all tables in /path/to/tables/vista_free
    and cracks hashes from pwdump file in.txt
</code></pre>

<p>```</p>

<p><strong>policygen</strong></p>

<p>Generate hashcat masks</p>

<p>``` plain
Usage: policygen [options]</p>

<p>Type &mdash;help for more options</p>

<p>Options:
  &mdash;version             show program&rsquo;s version number and exit
  -h, &mdash;help            show this help message and exit
  &mdash;length=8            Password length
  -o masks.txt, &mdash;output=masks.txt</p>

<pre><code>                    Save masks to a file
</code></pre>

<p>  &mdash;pps=1000000000      Passwords per Second
  -v, &mdash;verbose</p>

<p>  Password Policy:</p>

<pre><code>Define the minimum (or maximum) password strength policy that you
would like to test

--mindigits=1       Minimum number of digits
--minlower=1        Minimum number of lower-case characters
--minupper=1        Minimum number of upper-case characters
--minspecial=1      Minimum number of special characters
--maxdigits=3       Maximum number of digits
--maxlower=3        Maximum number of lower-case characters
--maxupper=3        Maximum number of upper-case characters
--maxspecial=3      Maximum number of special characters
</code></pre>

<p>```</p>

<p><strong>pwdump</strong></p>

<p>Dump password hashes</p>

<p><a href="http://tools.kali.org/password-attacks/creddump">Usage example from Kali site</a>:</p>

<p><code>plain
root@kali:~# pwdump system sam
Administrator:500:41aa818b512a8c0e72381e4c174e281b:1896d0a309184775f67c14d14b5c365a:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
HelpAssistant:1000:667d6c58d451dbf236ae37ab1de3b9f7:af733642ab69e156ba0c219d3bbc3c83:::
SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:8dffa305e2bee837f279c2c0b082affb:::
</code></p>

<p><strong>rainbowcrack</strong></p>

<p>Cracks hashes with rainbow tables.</p>

<p>``` plain
RainbowCrack 1.5
Copyright 2003-2010 RainbowCrack Project. All rights reserved.
Official Website: <a href="http://project-rainbowcrack.com/">http://project-rainbowcrack.com/</a></p>

<p>usage: rcrack rt_files [rt_files &hellip;] -h hash</p>

<pre><code>   rcrack rt_files [rt_files ...] -l hash_list_file
   rcrack rt_files [rt_files ...] -f pwdump_file
   rcrack rt_files [rt_files ...] -n pwdump_file
</code></pre>

<p>rt_files:               path to the rainbow table(s), wildchar(*, ?) supported
-h hash:                load single hash
-l hash_list_file:      load hashes from a file, each hash in a line
-f pwdump_file:         load lanmanager hashes from pwdump file
-n pwdump_file:         load ntlm hashes from pwdump file</p>

<p>hash algorithms implemented in alglib0.so:</p>

<pre><code>lm, plaintext_len limit: 0 - 7
ntlm, plaintext_len limit: 0 - 15
md5, plaintext_len limit: 0 - 15
sha1, plaintext_len limit: 0 - 20
mysqlsha1, plaintext_len limit: 0 - 20
halflmchall, plaintext_len limit: 0 - 7
ntlmchall, plaintext_len limit: 0 - 15
oracle-SYSTEM, plaintext_len limit: 0 - 10
md5-half, plaintext_len limit: 0 - 15
</code></pre>

<p>example: rcrack *.rt -h 5d41402abc4b2a76b9719d911017c592</p>

<pre><code>     rcrack *.rt -l hash.txt
</code></pre>

<p>```</p>

<p><strong>rcracki_mt</strong></p>

<p>A modified version of rcrack which supports hybrid and indexed tables. In addition to that, it also adds multi-core support.</p>

<p>``` plain
RainbowCrack (improved, multi-threaded) &ndash; Making a Faster Cryptanalytic Time-Memory Trade-Off
by Martin Westergaard <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#109;&#97;&#114;&#x74;&#x69;&#x6e;&#x77;&#106;&#50;&#48;&#48;&#53;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#x6d;&#x61;&#x72;&#x74;&#105;&#x6e;&#x77;&#x6a;&#x32;&#x30;&#x30;&#x35;&#64;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>
multi-threaded and enhanced by neinbrucke
*nix/64-bit compatibility and co-maintainer &ndash; James Nobis <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#113;&#117;&#x65;&#x6c;&#x40;&#113;&#x75;&#101;&#x6c;&#114;&#x6f;&#100;&#46;&#x6e;&#x65;&#116;">&#x71;&#x75;&#x65;&#108;&#x40;&#113;&#x75;&#101;&#108;&#114;&#111;&#x64;&#x2e;&#110;&#x65;&#x74;</a>
<a href="http://www.freerainbowtables.com/">http://www.freerainbowtables.com/</a>
All code/binaries are under GPL2 Copyright at a minimum
original code by Zhu Shuanglei <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#115;&#x68;&#x75;&#97;&#x6e;&#103;&#x6c;&#x65;&#x69;&#64;&#104;&#111;&#116;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x73;&#x68;&#117;&#x61;&#x6e;&#x67;&#108;&#101;&#105;&#x40;&#104;&#x6f;&#116;&#109;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;</a></p>

<p>usage: rcracki_mt -h hash rainbow_table_pathname</p>

<pre><code>   rcracki_mt -l hash_list_file rainbow_table_pathname
   rcracki_mt -f pwdump_file rainbow_table_pathname
   rcracki_mt -c lst_file rainbow_table_pathname
</code></pre>

<p>-h hash:                use raw hash as input
-l hash_list_file:      use hash list file as input, each hash in a line
-f pwdump_file:         use pwdump file as input, handles lanmanager hash only
-c lst_file:            use .lst (cain format) file as input
-r [-s session_name]:   resume from previous session, optional session name
rainbow_table_pathname: pathname(s) of the rainbow table(s)</p>

<p>Extra options:    -t [nr] use this amount of threads/cores, default is 1</p>

<pre><code>              -o [output_file] write (temporary) results to this file
              -s [session_name] write session data with this name
              -k keep precalculation on disk
              -d run sha1 hashes against mysqlsha1 tables
              -m [megabytes] limit memory usage
              -v show debug information
</code></pre>

<p>example: rcracki_mt -h 5d41402abc4b2a76b9719d911017c592 -t 2 [path]/MD5</p>

<pre><code>     rcracki_mt -l hash.txt [path_to_specific_table]/*
     rcracki_mt -f hash.txt -t 4 -o results.txt *.rti
</code></pre>

<p>```</p>

<p><strong>rsmangler</strong></p>

<p>RSMangler will take a wordlist and perform various manipulations on it similar to those done by John the Ripper, the main difference being that it will first take the input words and generate all permutations and the acronym of the words (in the order they appear in the file) before it applies the rest of the mangles.</p>

<p>``` plain
rsmangler v 1.4 Robin Wood (<a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#114;&#111;&#98;&#x69;&#x6e;&#x40;&#100;&#x69;&#103;&#105;&#x6e;&#105;&#x6e;&#x6a;&#x61;&#46;&#x6f;&#x72;&#103;">&#x72;&#x6f;&#98;&#105;&#x6e;&#64;&#100;&#x69;&#103;&#x69;&#x6e;&#x69;&#x6e;&#x6a;&#97;&#46;&#111;&#x72;&#103;</a>) &lt;www.randomstorm.com></p>

<p>To pass the initial words in on standard in do:</p>

<p>cat wordlist.txt | ./rsmangler.rb &mdash;file &ndash; > new_wordlist.rb</p>

<p>All options are ON by default, these parameters turn them OFF</p>

<p>Usage: rsmangler.rb [OPTION]</p>

<pre><code>--help, -h: show help
--file, -f: the input file, use - for STDIN
--max, -x: maximum word length
--min, -m: minimum word length
--perms, -p: permutate all the words
--double, -d: double each word
--reverse, -r: reverser the word
--leet, -t: l33t speak the word
--full-leet, -T: all posibilities l33t
--capital, -c: capitalise the word
--upper, -u: uppercase the word
--lower, -l: lowercase the word
--swap, -s: swap the case of the word
--ed, -e: add ed to the end of the word
--ing, -i: add ing to the end of the word
--punctuation: add common punctuation to the end of the word
--years, -y: add all years from 1990 to current year to start and end
--acronym, -a: create an acronym based on all the words entered in order and add to word list
--common, -C: add the following words to start and end: admin, sys, pw, pwd
--pna: add 01 - 09 to the end of the word
--pnb: add 01 - 09 to the beginning of the word
--na: add 1 - 123 to the end of the word
--nb: add 1 - 123 to the beginning of the word
--force - don't check ooutput size
--space - add spaces between words
</code></pre>

<p>```</p>

<p><strong>samdump2</strong></p>

<p>Dumps Windows 2k/NT/XP/Vista password hashes</p>

<p>``` plain
samdump2 1.1.1 by Objectif Securite
<a href="http://www.objectif-securite.ch">http://www.objectif-securite.ch</a>
original author: <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x6e;&#99;&#x75;&#x6f;&#109;&#111;&#64;&#x73;&#116;&#x75;&#x64;&#x65;&#110;&#x74;&#105;&#x2e;&#x75;&#110;&#105;&#x6e;&#97;&#x2e;&#105;&#x74;">&#110;&#x63;&#x75;&#x6f;&#x6d;&#x6f;&#64;&#x73;&#x74;&#x75;&#100;&#101;&#110;&#116;&#x69;&#46;&#x75;&#110;&#x69;&#x6e;&#97;&#46;&#x69;&#x74;</a></p>

<p>Usage:
samdump2 samhive keyfile
```</p>

<p><strong>sipcrack</strong></p>

<p>SIPcrack is a SIP login sniffer/cracker that contains 2 programs:  sipdump  to  capture  the digest authentication and sipcrack to bruteforce
the hash using a wordlist or standard input.</p>

<p>sipcrack bruteforces the user&rsquo;s password with the dump  file  generated
by  sipdump. If a password is found, the sniffed and cracked login will
be updated in the dump file.</p>

<p><img class="center" src="/images/kali/password/sipcrack.png" title="&lsquo;sipcrack&rsquo; &lsquo;sipcrack&rsquo;" ></p>

<p><strong>sucrack</strong></p>

<p>Multithreaded Linux/UNIX tool for brute-force cracking
of local user accounts via su.</p>

<p><code>plain
sucrack [options] wordlist
</code></p>

<p><strong>truecrack</strong></p>

<p>TrueCrack is a brute-force password cracker for TrueCrypt volumes. It works on Linux and it is optimized for Nvidia Cuda technology. It supports:</p>

<p>PBKDF2 (defined in PKCS5 v2.0) based on key derivation functions: Ripemd160, Sha512 and Whirlpool.</p>

<p>XTS block cipher mode for hard disk encryption based on encryption algorithms: AES, SERPENT, TWOFISH.</p>

<p>File-hosted (container) and Partition/device-hosted.</p>

<p>Hidden volumes and Backup headers.</p>

<p>TrueCrack is able to perform a brute-force attack based on:</p>

<p>Dictionary: read the passwords from a file of words.</p>

<p>Alphabet: generate all passwords of given length from given alphabet.</p>

<p>TrueCrack works on gpu and cpu</p>

<p>``` plain
TrueCrack v3.0
Website: <a href="http://code.google.com/p/truecrack">http://code.google.com/p/truecrack</a>
Contact us: <a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x69;&#x6e;&#x66;&#111;&#x74;&#114;&#117;&#101;&#99;&#114;&#97;&#99;&#107;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#105;&#110;&#x66;&#111;&#116;&#x72;&#117;&#101;&#99;&#114;&#x61;&#99;&#x6b;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>
Bruteforce password cracker for Truecrypt volume. Optimazed with Nvidia Cuda technology.
Based on TrueCrypt, freely available at <a href="http://www.truecrypt.org/">http://www.truecrypt.org/</a>
Copyright &copy; 2011 by Luca Vaccaro.</p>

<p>Usage:
 truecrack -t &lt;truecrypt_file> -k &lt;ripemd160|sha512|whirlpool> -w &lt;wordlist_file> [-b &lt;parallel_block>]
 truecrack -t &lt;truecrypt_file> -k &lt;ripemd160|sha512|whirlpool> -c <charset> [-s <minlength>] -m <maxlength> [-b &lt;parallel_block>]</p>

<p>Options:
 -h &mdash;help                      Display this information.
 -t &mdash;truecrypt &lt;truecrypt_file>    Truecrypt volume file.
 -k &mdash;key <ripemd160 | sha512 | whirlpool>      Key derivation function (default ripemd160).
 -b &mdash;blocksize &lt;parallel_blocks>       Number of parallel computations (board dependent).
 -w &mdash;wordlist &lt;wordlist_file>      File of words, for Dictionary attack.
 -c &mdash;charset <alphabet>        Alphabet generator, for Alphabet attack.
 -s &mdash;startlength <minlength>       Starting length of passwords, for Alphabet attack (default 1).
 -m &mdash;maxlength <maxlength>     Maximum length of passwords, for Alphabet attack.
 -r &mdash;restore <number>          Restore the computation.
 -v &mdash;verbose                   Show computation messages.</p>

<p>Sample:
 Dictionary mode: truecrack &mdash;truecrypt ./volume &mdash;wordlist ./dictionary.txt
 Charset mode: truecrack &mdash;truecrypt ./volume &mdash;charset ./dictionary.txt &mdash;maxlength 10
```</p>

<h3>Online Attacks</h3>

<p><strong>cewl</strong></p>

<p>CeWL is a ruby app which spiders a given url to a specified depth, optionally following external links, and returns a list of words which can then be used for password crackers such as John the Ripper.</p>

<p><img class="center" src="/images/kali/password/cewl.png" title="&lsquo;cewl&rsquo; &lsquo;cewl&rsquo;" ></p>

<p><strong>findmyhash</strong></p>

<p>Crack different types of hashes using free online services</p>

<p>``` plain
/usr/bin/findmyhash 1.1.2 ( <a href="http://code.google.com/p/findmyhash/">http://code.google.com/p/findmyhash/</a> )</p>

<h2>Usage: </h2>

<p>  python /usr/bin/findmyhash <algorithm> OPTIONS</p>

<h2>Accepted algorithms are:</h2>

<p>  MD4       &ndash; RFC 1320
  MD5       &ndash; RFC 1321
  SHA1      &ndash; RFC 3174 (FIPS 180-3)
  SHA224    &ndash; RFC 3874 (FIPS 180-3)
  SHA256    &ndash; FIPS 180-3
  SHA384    &ndash; FIPS 180-3
  SHA512    &ndash; FIPS 180-3
  RMD160    &ndash; RFC 2857
  GOST      &ndash; RFC 5831
  WHIRLPOOL &ndash; ISO/IEC 10118-3:2004
  LM        &ndash; Microsoft Windows hash
  NTLM      &ndash; Microsoft Windows hash
  MYSQL     &ndash; MySQL 3, 4, 5 hash
  CISCO7    &ndash; Cisco IOS type 7 encrypted passwords
  JUNIPER   &ndash; Juniper Networks $9$ encrypted passwords
  LDAP_MD5  &ndash; MD5 Base64 encoded
  LDAP_SHA1 &ndash; SHA1 Base64 encoded</p>

<p>  NOTE: for LM / NTLM it is recommended to introduce both values with this format:</p>

<pre><code>     python /usr/bin/findmyhash LM   -h 9a5760252b7455deaad3b435b51404ee:0d7f1f2bdeac6e574d6e18ca85fb58a7
     python /usr/bin/findmyhash NTLM -h 9a5760252b7455deaad3b435b51404ee:0d7f1f2bdeac6e574d6e18ca85fb58a7
</code></pre>

<h2>Valid OPTIONS are:</h2>

<p>  -h &lt;hash_value>  If you only want to crack one hash, specify its value with this option.</p>

<p>  -f <file>        If you have several hashes, you can specify a file with one hash per line.</p>

<pre><code>               NOTE: All of them have to be the same type.
</code></pre>

<p>  -g               If your hash cannot be cracked, search it in Google and show all the results.</p>

<pre><code>               NOTE: This option ONLY works with -h (one hash input) option.
</code></pre>

<h2>Examples:</h2>

<p>  &ndash;> Try to crack only one hash.</p>

<pre><code> python /usr/bin/findmyhash MD5 -h 098f6bcd4621d373cade4e832627b4f6
</code></pre>

<p>  &ndash;> Try to crack a JUNIPER encrypted password escaping special characters.</p>

<pre><code> python /usr/bin/findmyhash JUNIPER -h "\$9\$LbHX-wg4Z"
</code></pre>

<p>  &ndash;> If the hash cannot be cracked, it will be searched in Google.</p>

<pre><code> python /usr/bin/findmyhash LDAP_SHA1 -h "{SHA}cRDtpNCeBiql5KOQsKVyrA0sAiA=" -g
</code></pre>

<p>  &ndash;> Try to crack multiple hashes using a file (one hash per line).</p>

<pre><code> python /usr/bin/findmyhash MYSQL -f mysqlhashesfile.txt
</code></pre>

<h2>Contact:</h2>

<p>[Web]           <a href="http://laxmarcaellugar.blogspot.com/">http://laxmarcaellugar.blogspot.com/</a>
[Mail/Google+]  <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#98;&#108;&#x6f;&#x67;&#108;&#97;&#120;&#x6d;&#97;&#x72;&#x63;&#x61;&#x65;&#108;&#108;&#117;&#x67;&#97;&#x72;&#64;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x62;&#x6c;&#x6f;&#x67;&#108;&#97;&#120;&#109;&#x61;&#x72;&#99;&#97;&#101;&#x6c;&#x6c;&#117;&#103;&#97;&#x72;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a>
[twitter]       @laXmarcaellugar
```</p>

<p><strong>hydra</strong></p>

<p>Hydra  is a parallized login cracker which supports numerous protocols to attack. New modules are easy to add, beside that, it is flexible
and very fast.</p>

<p>Currently this tool supports:</p>

<pre><code>    AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP, FTPS,
    HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-PROXY,
    HTTP-PROXY-URLENUM, ICQ, IMAP, IRC, LDAP2, LDAP3, MS-SQL, MYSQL, NCP, NNTP,
    Oracle, Oracle-Listener, Oracle-SID, PC-Anywhere, PCNFS, POP3, POSTGRES,
    RDP, REXEC, RLOGIN, RSH, SAP/R3, SIP, SMB, SMTP, SMTP-Enum, SNMP,
    SOCKS5, SSH(v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet,
    VMware-Auth, VNC and XMPP.
    For most protocols, SSL mode is available (e.g. https-get, ftp-ssl, etc.)
</code></pre>

<p>``` plain
Hydra v8.1 &copy; 2014 by van Hauser/THC &ndash; Please do not use in military or secret service organizations, or for illegal purposes.</p>

<p>Syntax: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN:MAX:CHARSET] [-SuvVd46] [service://server[:PORT][/OPT]]</p>

<p>Options:
  -l LOGIN or -L FILE  login with LOGIN name, or load several logins from FILE
  -p PASS  or -P FILE  try password PASS, or load several passwords from FILE
  -C FILE   colon separated &ldquo;login:pass&rdquo; format, instead of -L/-P options
  -M FILE   list of servers to attack, one entry per line, &lsquo;:&rsquo; to specify port
  -t TASKS  run TASKS number of connects in parallel (per host, default: 16)
  -U        service module usage details
  -h        more command line options (COMPLETE HELP)
  server    the target: DNS, IP or 192.168.0.0/24 (this OR the -M option)
  service   the service to crack (see below for supported protocols)
  OPT       some service modules support additional input (-U for module help)</p>

<p>Supported services: asterisk cisco cisco-enable cvs firebird ftp ftps http[s]&ndash;{head|get} http[s]&ndash;{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[&ndash;{cram|digest}md5][s] mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres rdp redis rexec rlogin rsh s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd vnc xmpp</p>

<p>Hydra is a tool to guess/crack valid login/password pairs. Licensed under AGPL
v3.0. The newest version is always available at <a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>
Don&rsquo;t use in military or secret service organizations, or for illegal purposes.</p>

<p>Example:  hydra -l user -P passlist.txt <a href="ftp://192.168.0.1">ftp://192.168.0.1</a>
```</p>

<p><strong>hydra-gtk</strong></p>

<p>Hydra GUI</p>

<p><img class="center" src="/images/kali/password/xhydra.png" title="&lsquo;hydra gui&rsquo; &lsquo;xhydra&rsquo;" ></p>

<p><strong>keimpx</strong></p>

<p>keimpx is an open source tool, released under a modified version of Apache License 1.1.</p>

<p>It can be used to quickly check for valid credentials across a network over SMB. Credentials can be:</p>

<ul>
<li><p>Combination of user / plain-text password.</p></li>
<li><p>Combination of user / NTLM hash.</p></li>
<li><p>Combination of user / NTLM logon session token.</p></li>
</ul>


<p>If any valid credentials has been discovered across the network after its attack phase, the user is asked to choose which host to connect to and which valid credentials to use, then he will be prompted with an interactive SMB shell where the user can:</p>

<ul>
<li><p>Spawn an interactive command prompt.</p></li>
<li><p>Navigate through the remote SMB shares: list, upload, download files, create, remove files, etc.</p></li>
<li><p>Deploy and undeploy his own service, for instance, a backdoor listening on a TCP port for incoming connections.</p></li>
<li><p>List users details, domains and password policy.</p></li>
</ul>


<p>``` plain
keimpx 0.3-dev</p>

<pre><code>by Bernardo Damele A. G. &lt;bernardo.damele@gmail.com&gt;
</code></pre>

<p>Usage: keimpx.py [options]</p>

<p>Options:
  &mdash;version       show program&rsquo;s version number and exit
  -h, &mdash;help      show this help message and exit
  -v VERBOSE      Verbosity level: 0-2 (default: 0)
  -t TARGET       Target address
  -l LIST         File with list of targets
  -U USER         User
  -P PASSWORD     Password
  &mdash;nt=NTHASH     NT hash
  &mdash;lm=LMHASH     LM hash
  -c CREDSFILE    File with list of credentials
  -D DOMAIN       Domain
  -d DOMAINSFILE  File with list of domains
  -p PORT         SMB port: 139 or 445 (default: 445)
  -n NAME         Local hostname
  -T THREADS      Maximum simultaneous connections (default: 10)
  -b              Batch mode: do not ask to get an interactive SMB shell
  -x EXECUTELIST  Execute a list of commands against all hosts
```</p>

<p><strong>medusa</strong></p>

<p>Medusa  is  intended to be a speedy, massively parallel, modular, login brute-forcer.  The goal is to support as many services which allow
remote authentication as possible. The author considers following items to some of the key features of this application:</p>

<ul>
<li><p>Thread-based parallel testing. Brute-force testing can be performed against multiple hosts, users or passwords concurrently.</p></li>
<li><p>Flexible user input. Target information (host/user/password) can be specified in a variety of ways. For example, each item can be  either
a single entry or a file containing multiple entries. Additionally, a combination file format allows the user to refine their target listing.</p></li>
<li><p>Modular design. Each service module exists as an independent .mod file. This means that no modifications are necessary to the core application in order to extend the supported list of services for brute-forcing.</p></li>
</ul>


<p>``` plain
Medusa v2.0 [<a href="http://www.foofus.net">http://www.foofus.net</a>] &copy; JoMo-Kun / Foofus Networks <a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#106;&#109;&#x6b;&#x40;&#x66;&#111;&#x6f;&#x66;&#x75;&#x73;&#x2e;&#x6e;&#x65;&#116;">&#x6a;&#109;&#x6b;&#x40;&#102;&#x6f;&#111;&#102;&#117;&#115;&#46;&#x6e;&#x65;&#116;</a></p>

<p>ALERT: Host information must be supplied.</p>

<p>Syntax: Medusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]
  -h [TEXT]    : Target hostname or IP address
  -H [FILE]    : File containing target hostnames or IP addresses
  -u [TEXT]    : Username to test
  -U [FILE]    : File containing usernames to test
  -p [TEXT]    : Password to test
  -P [FILE]    : File containing passwords to test
  -C [FILE]    : File containing combo entries. See README for more information.
  -O [FILE]    : File to append log information to
  -e [n/s/ns]  : Additional password checks ([n] No Password, [s] Password = Username)
  -M [TEXT]    : Name of the module to execute (without the .mod extension)
  -m [TEXT]    : Parameter to pass to the module. This can be passed multiple times with a</p>

<pre><code>             different parameter each time and they will all be sent to the module (i.e.
             -m Param1 -m Param2, etc.)
</code></pre>

<p>  -d           : Dump all known modules
  -n [NUM]     : Use for non-default TCP port number
  -s           : Enable SSL
  -g [NUM]     : Give up after trying to connect for NUM seconds (default 3)
  -r [NUM]     : Sleep NUM seconds between retry attempts (default 3)
  -R [NUM]     : Attempt NUM retries before giving up. The total number of attempts will be NUM + 1.
  -t [NUM]     : Total number of logins to be tested concurrently
  -T [NUM]     : Total number of hosts to be tested concurrently
  -L           : Parallelize logins using one username per thread. The default is to process</p>

<pre><code>             the entire username before proceeding.
</code></pre>

<p>  -f           : Stop scanning host after first valid username/password found.
  -F           : Stop audit after first valid username/password found on any host.
  -b           : Suppress startup banner
  -q           : Display module&rsquo;s usage information
  -v [NUM]     : Verbose level [0 &ndash; 6 (more)]
  -w [NUM]     : Error debug level [0 &ndash; 10 (more)]
  -V           : Display version
  -Z [TEXT]    : Resume scan based on map of previous scan
```</p>

<p><strong>ncrack</strong></p>

<p>Ncrack is an open source tool for network authentication cracking. It was designed for high-speed parallel cracking using a dynamic engine
that can adapt to different network situations. Ncrack can also be extensively fine-tuned for special cases, though the default parameters
are generic enough to cover almost every situation. It is built on a modular architecture that allows for easy extension to support additional protocols. Ncrack is designed for companies and security professionals to audit large networks for default or weak passwords in
a rapid and reliable way. It can also be used to conduct fairly sophisticated and intensive brute force attacks against individual
services.</p>

<p>The output from Ncrack is a list of found credentials, if any, for each of the targets specified. Ncrack can also print an interactive
status report of progress so far and possibly additional debugging information that can help track problems, if the user selected that
option.</p>

<p>A typical Ncrack scan is shown in Example 1. The only Ncrack arguments used in this example are the two target IP addresses along with the
the corresponding ports for each of them. The two example ports 21 and 22 are automatically resolved to the default services listening on
them: ftp and ssh.</p>

<p>``` plain
Example 1. A representative Ncrack scan</p>

<pre><code>       $ ncrack 10.0.0.130:21 192.168.1.2:22

       Starting Ncrack 0.01ALPHA ( http://ncrack.org ) at 2009-07-24 23:05 EEST

       Discovered credentials for ftp on 10.0.0.130 21/tcp:
       10.0.0.130 21/tcp ftp: admin hello1
       Discovered credentials for ssh on 192.168.1.2 22/tcp:
       192.168.1.2 22/tcp ssh: guest 12345
       192.168.1.2 22/tcp ssh: admin money$

       Ncrack done: 2 services scanned in 156.03 seconds.

       Ncrack finished.
</code></pre>

<p>```</p>

<p><strong>patator</strong></p>

<p>A multi-purpose brute-forcer, with a modular design and a flexible usage.</p>

<p>``` plain
Patator v0.5 (<a href="http://code.google.com/p/patator/">http://code.google.com/p/patator/</a>)
Usage: patator.py module &mdash;help</p>

<p>Available modules:
  + ftp_login     : Brute-force FTP
  + ssh_login     : Brute-force SSH
  + telnet_login  : Brute-force Telnet
  + smtp_login    : Brute-force SMTP
  + smtp_vrfy     : Enumerate valid users using SMTP VRFY
  + smtp_rcpt     : Enumerate valid users using SMTP RCPT TO
  + finger_lookup : Enumerate valid users using Finger
  + http_fuzz     : Brute-force HTTP
  + pop_login     : Brute-force POP3
  + pop_passd     : Brute-force poppassd (<a href="http://netwinsite.com/poppassd/">http://netwinsite.com/poppassd/</a>)
  + imap_login    : Brute-force IMAP4
  + ldap_login    : Brute-force LDAP
  + smb_login     : Brute-force SMB
  + smb_lookupsid : Brute-force SMB SID-lookup
  + vmauthd_login : Brute-force VMware Authentication Daemon
  + mssql_login   : Brute-force MSSQL
  + oracle_login  : Brute-force Oracle
  + mysql_login   : Brute-force MySQL
  + mysql_query   : Brute-force MySQL queries
  + pgsql_login   : Brute-force PostgreSQL
  + vnc_login     : Brute-force VNC
  + dns_forward   : Forward lookup names
  + dns_reverse   : Reverse lookup subnets
  + snmp_login    : Brute-force SNMP v1/2/3
  + unzip_pass    : Brute-force the password of encrypted ZIP files
  + keystore_pass : Brute-force the password of Java keystore files
  + tcp_fuzz      : Fuzz TCP services
  + dummy_test    : Testing module
```</p>

<p><strong>phrasendrescher</strong></p>

<p>phrasen|drescher (p|d) is a modular and multi processing pass phrase cracking tool. It comes with a number of plugins but a simple plugin API allows an easy development of new plugins. The main features of p|d are:</p>

<ul>
<li><p>Modular with the use of plugins</p></li>
<li><p>Multi processing</p></li>
<li><p>Dictionary attack with or without permutations (uppercase, lowercase, l33t, etc.)</p></li>
<li><p>Incremental brute force attack with custom character maps</p></li>
<li><p>Runs on FreeBSD, NetBSD, OpenBSD, MacOS and Linux</p></li>
</ul>


<p>``` plain
phrasen|drescher 1.2.2 &ndash; the passphrase cracker
Copyright &copy; 2008 Nico Leidecker; <a href="http://www.leidecker.info">http://www.leidecker.info</a></p>

<p>Usage: pd plugin [options]</p>

<p> Available plugins:
   enc-file  pkey  ssh  mssql  http-raw</p>

<p> General Options:
   h           : print this message
   v           : verbose mode
   i from[:to] : incremental mode beginning with word length `from'</p>

<pre><code>             and going to `to'
</code></pre>

<p>   d file      : run dictionary based with words from `file'
   w number    : number of worker threads (default is one)
   r rules     : specify rewriting rules for the dictionary mode:</p>

<pre><code>               A = all characters upper case
               F = first character upper case
               L = last character upper case
               W = first letter of each word to upper case
               a = all characters lower case
               f = first character lower case
               l = last character lower case
               w = first letter of each word to lower case
               D = prepend digit
               d = append digit
               e = 1337 characters
               x = all rules
</code></pre>

<p> Environment Variables:
   PD_PLUGINS : the directory containing plugins</p>

<pre><code>            (current is /usr/lib/phrasendrescher)
</code></pre>

<p>   PD_CHARMAP : the characters for the incremental mode are</p>

<pre><code>            taken from a character list. A customized list
            can be specified in the environment variable
</code></pre>

<p>```</p>

<p><strong>thc-pptp-bruter</strong></p>

<p>Brute force program against pptp vpn endpoints (tcp port 1723). Fully standalone. Supports latest MSChapV2 authentication. Tested against Windows and Cisco gateways. Exploits a weakness in Microsoft’s anti-brute force implementation which makes it possible to try 300 passwords the second.</p>

<p>``` plain
Target IP missing.
thc-pptp-bruter [options] <remote host IP>
  -v        Verbose output / Debug output
  -W        Disable windows hack [default: enabled]
  -u <user> User [default: administrator]
  -w <file> Wordlist file [default: stdin]
  -p <n>    PPTP port [default: 1723]
  -n <n>    Number of parallel tries [default: 5]
  -l <n>    Limit to n passwords / sec [default: 100]</p>

<p>Windows-Hack reuses the LCP connection with the same caller-id. This
gets around MS&rsquo;s anti-brute forcing protection. It&rsquo;s enabled by default.
```</p>

<h3>Passing the Hash</h3>

<p><strong>Pass the Hash Toolkit</strong></p>

<p>This is a collection of scripts for pass-the-hash scenarios</p>

<p><strong>pth-curl</strong></p>

<p>``` plain
root@kali:~# pth-curl &mdash;help
Usage: curl [options&hellip;] <url>
Options: (H) means HTTP/HTTPS only, (F) means FTP only</p>

<pre><code> --anyauth       Pick "any" authentication method (H)
</code></pre>

<p> -a, &mdash;append        Append to target file when uploading (F/SFTP)</p>

<pre><code> --basic         Use HTTP Basic Authentication (H)
 --cacert FILE   CA certificate to verify peer against (SSL)
 --capath DIR    CA directory to verify peer against (SSL)
</code></pre>

<p> -E, &mdash;cert CERT[:PASSWD] Client certificate file and password (SSL)</p>

<pre><code> --cert-type TYPE Certificate file type (DER/PEM/ENG) (SSL)
 --ciphers LIST  SSL ciphers to use (SSL)
 --compressed    Request compressed response (using deflate or gzip)
</code></pre>

<p> -K, &mdash;config FILE   Specify which config file to read</p>

<pre><code> --connect-timeout SECONDS  Maximum time allowed for connection
</code></pre>

<p> -C, &mdash;continue-at OFFSET  Resumed transfer offset
 -b, &mdash;cookie STRING/FILE  String or file to read cookies from (H)
 -c, &mdash;cookie-jar FILE  Write cookies to this file after operation (H)</p>

<pre><code> --create-dirs   Create necessary local directory hierarchy
 --crlf          Convert LF to CRLF in upload
 --crlfile FILE  Get a CRL list in PEM format from the given file
</code></pre>

<p> -d, &mdash;data DATA     HTTP POST data (H)</p>

<pre><code> --data-ascii DATA  HTTP POST ASCII data (H)
 --data-binary DATA  HTTP POST binary data (H)
 --data-urlencode DATA  HTTP POST data url encoded (H)
 --delegation STRING GSS-API delegation permission
 --digest        Use HTTP Digest Authentication (H)
 --disable-eprt  Inhibit using EPRT or LPRT (F)
 --disable-epsv  Inhibit using EPSV (F)
</code></pre>

<p> -D, &mdash;dump-header FILE  Write the headers to this file</p>

<pre><code> --egd-file FILE  EGD socket path for random data (SSL)
 --engine ENGINGE  Crypto engine (SSL). "--engine list" for list
</code></pre>

<p> -f, &mdash;fail          Fail silently (no output at all) on HTTP errors (H)
 -F, &mdash;form CONTENT  Specify HTTP multipart POST data (H)</p>

<pre><code> --form-string STRING  Specify HTTP multipart POST data (H)
 --ftp-account DATA  Account data string (F)
 --ftp-alternative-to-user COMMAND  String to replace "USER [name]" (F)
 --ftp-create-dirs  Create the remote dirs if not present (F)
 --ftp-method [MULTICWD/NOCWD/SINGLECWD] Control CWD usage (F)
 --ftp-pasv      Use PASV/EPSV instead of PORT (F)
</code></pre>

<p> -P, &mdash;ftp-port ADR  Use PORT with given address instead of PASV (F)</p>

<pre><code> --ftp-skip-pasv-ip Skip the IP address for PASV (F)
 --ftp-pret      Send PRET before PASV (for drftpd) (F)
 --ftp-ssl-ccc   Send CCC after authenticating (F)
 --ftp-ssl-ccc-mode ACTIVE/PASSIVE  Set CCC mode (F)
 --ftp-ssl-control Require SSL/TLS for ftp login, clear for transfer (F)
</code></pre>

<p> -G, &mdash;get           Send the -d data with a HTTP GET (H)
 -g, &mdash;globoff       Disable URL sequences and ranges using {} and []
 -H, &mdash;header LINE   Custom header to pass to server (H)
 -I, &mdash;head          Show document info only
 -h, &mdash;help          This help text</p>

<pre><code> --hostpubmd5 MD5  Hex encoded MD5 string of the host public key. (SSH)
</code></pre>

<p> -0, &mdash;http1.0       Use HTTP 1.0 (H)</p>

<pre><code> --ignore-content-length  Ignore the HTTP Content-Length header
</code></pre>

<p> -i, &mdash;include       Include protocol headers in the output (H/F)
 -k, &mdash;insecure      Allow connections to SSL sites without certs (H)</p>

<pre><code> --interface INTERFACE  Specify network interface/address to use
</code></pre>

<p> -4, &mdash;ipv4          Resolve name to IPv4 address
 -6, &mdash;ipv6          Resolve name to IPv6 address
 -j, &mdash;junk-session-cookies Ignore session cookies read from file (H)</p>

<pre><code> --keepalive-time SECONDS  Interval between keepalive probes
 --key KEY       Private key file name (SSL/SSH)
 --key-type TYPE Private key file type (DER/PEM/ENG) (SSL)
 --krb LEVEL     Enable Kerberos with specified security level (F)
 --libcurl FILE  Dump libcurl equivalent code of this command line
 --limit-rate RATE  Limit transfer speed to this rate
</code></pre>

<p> -l, &mdash;list-only     List only names of an FTP directory (F)</p>

<pre><code> --local-port RANGE  Force use of these local port numbers
</code></pre>

<p> -L, &mdash;location      Follow redirects (H)</p>

<pre><code> --location-trusted like --location and send auth to other hosts (H)
</code></pre>

<p> -M, &mdash;manual        Display the full manual</p>

<pre><code> --mail-from FROM  Mail from this address
 --mail-rcpt TO  Mail to this receiver(s)
 --mail-auth AUTH  Originator address of the original email
 --max-filesize BYTES  Maximum file size to download (H/F)
 --max-redirs NUM  Maximum number of redirects allowed (H)
</code></pre>

<p> -m, &mdash;max-time SECONDS  Maximum time allowed for the transfer</p>

<pre><code> --negotiate     Use HTTP Negotiate Authentication (H)
</code></pre>

<p> -n, &mdash;netrc         Must read .netrc for user name and password</p>

<pre><code> --netrc-optional Use either .netrc or URL; overrides -n
 --netrc-file FILE  Set up the netrc filename to use
</code></pre>

<p> -N, &mdash;no-buffer     Disable buffering of the output stream</p>

<pre><code> --no-keepalive  Disable keepalive use on the connection
 --no-sessionid  Disable SSL session-ID reusing (SSL)
 --noproxy       List of hosts which do not use proxy
 --ntlm          Use HTTP NTLM authentication (H)
</code></pre>

<p> -o, &mdash;output FILE   Write output to <file> instead of stdout</p>

<pre><code> --pass PASS     Pass phrase for the private key (SSL/SSH)
 --post301       Do not switch to GET after following a 301 redirect (H)
 --post302       Do not switch to GET after following a 302 redirect (H)
 --post303       Do not switch to GET after following a 303 redirect (H)
</code></pre>

<p> &ndash;#, &mdash;progress-bar  Display transfer progress as a progress bar</p>

<pre><code> --proto PROTOCOLS  Enable/disable specified protocols
 --proto-redir PROTOCOLS  Enable/disable specified protocols on redirect
</code></pre>

<p> -x, &mdash;proxy [PROTOCOL://]HOST[:PORT] Use proxy on given port</p>

<pre><code> --proxy-anyauth Pick "any" proxy authentication method (H)
 --proxy-basic   Use Basic authentication on the proxy (H)
 --proxy-digest  Use Digest authentication on the proxy (H)
 --proxy-negotiate Use Negotiate authentication on the proxy (H)
 --proxy-ntlm    Use NTLM authentication on the proxy (H)
</code></pre>

<p> -U, &mdash;proxy-user USER[:PASSWORD]  Proxy user and password</p>

<pre><code> --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port
</code></pre>

<p> -p, &mdash;proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)</p>

<pre><code> --pubkey KEY    Public key file name (SSH)
</code></pre>

<p> -Q, &mdash;quote CMD     Send command(s) to server before transfer (F/SFTP)</p>

<pre><code> --random-file FILE  File for reading random data from (SSL)
</code></pre>

<p> -r, &mdash;range RANGE   Retrieve only the bytes within a range</p>

<pre><code> --raw           Do HTTP "raw", without any transfer decoding (H)
</code></pre>

<p> -e, &mdash;referer       Referer URL (H)
 -J, &mdash;remote-header-name Use the header-provided filename (H)
 -O, &mdash;remote-name   Write output to a file named as the remote file</p>

<pre><code> --remote-name-all Use the remote file name for all URLs
</code></pre>

<p> -R, &mdash;remote-time   Set the remote file&rsquo;s time on the local output
 -X, &mdash;request COMMAND  Specify request command to use</p>

<pre><code> --resolve HOST:PORT:ADDRESS  Force resolve of HOST:PORT to ADDRESS
 --retry NUM   Retry request NUM times if transient problems occur
 --retry-delay SECONDS When retrying, wait this many seconds between each
 --retry-max-time SECONDS  Retry only within this period
</code></pre>

<p> -S, &mdash;show-error    Show error. With -s, make curl show errors when they occur
 -s, &mdash;silent        Silent mode. Don&rsquo;t output anything</p>

<pre><code> --socks4 HOST[:PORT]  SOCKS4 proxy on given host + port
 --socks4a HOST[:PORT]  SOCKS4a proxy on given host + port
 --socks5 HOST[:PORT]  SOCKS5 proxy on given host + port
 --socks5-hostname HOST[:PORT] SOCKS5 proxy, pass host name to proxy
 --socks5-gssapi-service NAME  SOCKS5 proxy service name for gssapi
 --socks5-gssapi-nec  Compatibility with NEC SOCKS5 server
</code></pre>

<p> -Y, &mdash;speed-limit RATE  Stop transfers below speed-limit for &lsquo;speed-time&rsquo; secs
 -y, &mdash;speed-time SECONDS  Time for trig speed-limit abort. Defaults to 30</p>

<pre><code> --ssl           Try SSL/TLS (FTP, IMAP, POP3, SMTP)
 --ssl-reqd      Require SSL/TLS (FTP, IMAP, POP3, SMTP)
</code></pre>

<p> -2, &mdash;sslv2         Use SSLv2 (SSL)
 -3, &mdash;sslv3         Use SSLv3 (SSL)</p>

<pre><code> --ssl-allow-beast Allow security flaw to improve interop (SSL)
 --stderr FILE   Where to redirect stderr. - means stdout
 --tcp-nodelay   Use the TCP_NODELAY option
</code></pre>

<p> -t, &mdash;telnet-option OPT=VAL  Set telnet option</p>

<pre><code> --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be &gt;512)
</code></pre>

<p> -z, &mdash;time-cond TIME  Transfer based on a time condition
 -1, &mdash;tlsv1         Use TLSv1 (SSL)</p>

<pre><code> --trace FILE    Write a debug trace to the given file
 --trace-ascii FILE  Like --trace but without the hex output
 --trace-time    Add time stamps to trace/verbose output
 --tr-encoding   Request compressed transfer encoding (H)
</code></pre>

<p> -T, &mdash;upload-file FILE  Transfer FILE to destination</p>

<pre><code> --url URL       URL to work with
</code></pre>

<p> -B, &mdash;use-ascii     Use ASCII/text transfer
 -u, &mdash;user USER[:PASSWORD]  Server user and password</p>

<pre><code> --tlsuser USER  TLS username
 --tlspassword STRING TLS password
 --tlsauthtype STRING  TLS authentication type (default SRP)
</code></pre>

<p> -A, &mdash;user-agent STRING  User-Agent to send to server (H)
 -v, &mdash;verbose       Make the operation more talkative
 -V, &mdash;version       Show version number and quit
 -w, &mdash;write-out FORMAT  What to output after completion</p>

<pre><code> --xattr        Store metadata in extended file attributes
</code></pre>

<p> -q                 If used as the first parameter disables .curlrc
```</p>

<p><strong>pth-net</strong></p>

<p>``` plain
Usage:
net rpc             Run functions using RPC transport
net rap             Run functions using RAP transport
net ads             Run functions using ADS transport
net file            Functions on remote opened files
net share           Functions on shares
net session         Manage sessions
net server          List servers in workgroup
net domain          List domains/workgroups on network
net printq          Modify printer queue
net user            Manage users
net group           Manage groups
net groupmap        Manage group mappings
net sam             Functions on the SAM database
net validate        Validate username and password
net groupmember     Modify group memberships
net admin           Execute remote command on a remote OS/2 server
net service         List/modify running services
net password        Change user password on target server
net changetrustpw   Change the trust password
net changesecretpw  Change the secret password
net setauthuser     Set the winbind auth user
net getauthuser     Get the winbind auth user settings
net time            Show/set time
net lookup          Look up host names/IP addresses
net g_lock          Manipulate the global lock table
net join            Join a domain/AD
net dom             Join/unjoin (remote) machines to/from a domain/AD
net cache           Operate on the cache tdb file
net getlocalsid     Get the SID for the local domain
net setlocalsid     Set the SID for the local domain
net setdomainsid    Set domain SID on member servers
net getdomainsid    Get domain SID on member servers
net maxrid          Display the maximum RID currently used
net idmap           IDmap functions
net status          Display server status
net usershare       Manage user-modifiable shares
net usersidlist     Display list of all users with SID
net conf            Manage Samba registry based configuration
net registry        Manage the Samba registry
net eventlog        Process Win32 *.evt eventlog files
net printing        Process tdb printer files
net serverid        Manage the serverid tdb
net help            Print usage information
Valid targets: choose one (none defaults to localhost)</p>

<pre><code>-S or --server=&lt;server&gt;     server name
-I or --ipaddress=&lt;ipaddr&gt;  address of target server
-w or --workgroup=&lt;wg&gt;      target workgroup or domain
</code></pre>

<p>Valid miscellaneous options are:</p>

<pre><code>-p or --port=&lt;port&gt;     connection port on target
-W or --myworkgroup=&lt;wg&gt;    client workgroup
-d or --debuglevel=&lt;level&gt;  debug level (0-10)
-n or --myname=&lt;name&gt;       client name
-U or --user=&lt;name&gt;     user name
-s or --configfile=&lt;path&gt;   pathname of smb.conf file
-l or --long            Display full information
-V or --version         Print samba version information
-P or --machine-pass        Authenticate as machine account
-e or --encrypt         Encrypt SMB transport (UNIX extended servers only)
-k or --kerberos        Use kerberos (active directory) authentication
</code></pre>

<p>```</p>

<p><strong>pth-openchangeclient</strong></p>

<p>``` plain
Usage: openchangeclient [OPTION&hellip;]
  -f, &mdash;database=STRING           set the profile database path</p>

<pre><code>  --pf                        access public folders instead of mailbox
</code></pre>

<p>  -p, &mdash;profile=STRING            set the profile name
  -P, &mdash;password=STRING           set the profile password</p>

<pre><code>  --username=STRING           set the username of the mailbox to use
</code></pre>

<p>  -S, &mdash;sendmail                  send a mail</p>

<pre><code>  --sendappointment           send an appointment
  --sendcontact               send a contact
  --sendtask                  send a task
  --sendnote                  send a note
</code></pre>

<p>  -F, &mdash;fetchmail                 fetch user INBOX mails</p>

<pre><code>  --fetchsummary              fetch message summaries only
</code></pre>

<p>  -G, &mdash;storemail=STRING          retrieve a mail on the filesystem
  -i, &mdash;fetch-items=STRING        fetch specified user INBOX items</p>

<pre><code>  --freebusy=STRING           display free / busy information for the specified user
  --force                     force openchangeclient behavior in some circumstances
  --delete=STRING             delete a message given its unique ID
</code></pre>

<p>  -u, &mdash;update=STRING             update the specified item
  -m, &mdash;mailbox                   list mailbox folder summary
  -D, &mdash;deletemail                delete a mail from user INBOX
  -A, &mdash;attachments=STRING        send a list of attachments
  -I, &mdash;html-inline=STRING        send PR_HTML content
  -W, &mdash;html-file=STRING          use HTML file as content
  -t, &mdash;to=STRING                 set the To recipients
  -c, &mdash;cc=STRING                 set the Cc recipients
  -b, &mdash;bcc=STRING                set the Bcc recipients
  -s, &mdash;subject=STRING            set the mail subject
  -B, &mdash;body=STRING               set the mail body</p>

<pre><code>  --location=STRING           set the item location
  --label=STRING              set the event label
  --dtstart=STRING            set the event start date
  --dtend=STRING              set the event end date
  --busystatus=STRING         set the item busy status
  --taskstatus=STRING         set the task status
  --importance=STRING         Set the item importance
  --email=STRING              set the email address
  --fullname=STRING           set the full name
  --cardname=STRING           set a contact card name
  --color=STRING              set the note color
  --notifications             monitor INBOX newmail notifications
  --folder=STRING             set the folder to use instead of inbox
  --mkdir                     create a folder
  --rmdir                     delete a folder
  --userlist                  list Address Book entries
  --folder-name=STRING        set the folder name
  --folder-comment=STRING     set the folder comment
</code></pre>

<p>  -d, &mdash;debuglevel=STRING         set Debug Level</p>

<pre><code>  --dump-data                 dump the hex data
  --private                   set the private flag on messages
  --ocpf-file=STRING          set OCPF file
  --ocpf-dump=STRING          dump message into OCPF file
  --ocpf-syntax               check OCPF files syntax
  --ocpf-sender               send message using OCPF files contents
</code></pre>

<p>Help options:
  &ndash;?, &mdash;help                      Show this help message</p>

<pre><code>  --usage                     Display brief usage message
</code></pre>

<p>Common openchange options:
  -V, &mdash;version                   Print version
```</p>

<p><strong>pth-rpcclient</strong></p>

<p>``` plain
Usage: rpcclient [OPTION&hellip;]
  -c, &mdash;command=COMMANDS                 Execute semicolon separated cmds
  -I, &mdash;dest-ip=IP                       Specify destination IP address
  -p, &mdash;port=PORT                        Specify port number</p>

<p>Help options:
  &ndash;?, &mdash;help                             Show this help message</p>

<pre><code>  --usage                            Display brief usage message
</code></pre>

<p>Common samba options:
  -d, &mdash;debuglevel=DEBUGLEVEL            Set debug level
  -s, &mdash;configfile=CONFIGFILE            Use alternate configuration file
  -l, &mdash;log-basename=LOGFILEBASE         Base name for log files
  -V, &mdash;version                          Print version</p>

<pre><code>  --option=name=value                Set smb.conf option from command line
</code></pre>

<p>Connection options:
  -O, &mdash;socket-options=SOCKETOPTIONS     socket options to use
  -n, &mdash;netbiosname=NETBIOSNAME          Primary netbios name
  -W, &mdash;workgroup=WORKGROUP              Set the workgroup name
  -i, &mdash;scope=SCOPE                      Use this Netbios scope</p>

<p>Authentication options:
  -U, &mdash;user=USERNAME                    Set the network username
  -N, &mdash;no-pass                          Don&rsquo;t ask for a password
  -k, &mdash;kerberos                         Use kerberos (active directory)</p>

<pre><code>                                     authentication
</code></pre>

<p>  -A, &mdash;authentication-file=FILE         Get the credentials from a file
  -S, &mdash;signing=on|off|required          Set the client signing state
  -P, &mdash;machine-pass                     Use stored machine account password
  -e, &mdash;encrypt                          Encrypt SMB transport (UNIX extended</p>

<pre><code>                                     servers only)
</code></pre>

<p>  -C, &mdash;use-ccache                       Use the winbind ccache for</p>

<pre><code>                                     authentication
  --pw-nt-hash                       The supplied password is the NT hash
</code></pre>

<p>```</p>

<p><strong>pth-smbclient</strong></p>

<p>``` plain
Usage: smbclient [&ndash;?EgBVNkPeC] [&ndash;?|&mdash;help] [&mdash;usage]</p>

<pre><code>    [-R|--name-resolve=NAME-RESOLVE-ORDER] [-M|--message=HOST]
    [-I|--ip-address=IP] [-E|--stderr] [-L|--list=HOST]
    [-m|--max-protocol=LEVEL] [-T|--tar=&lt;c|x&gt;IXFqgbNan]
    [-D|--directory=DIR] [-c|--command=STRING] [-b|--send-buffer=BYTES]
    [-p|--port=PORT] [-g|--grepable] [-B|--browse]
    [-d|--debuglevel=DEBUGLEVEL] [-s|--configfile=CONFIGFILE]
    [-l|--log-basename=LOGFILEBASE] [-V|--version] [--option=name=value]
    [-O|--socket-options=SOCKETOPTIONS] [-n|--netbiosname=NETBIOSNAME]
    [-W|--workgroup=WORKGROUP] [-i|--scope=SCOPE] [-U|--user=USERNAME]
    [-N|--no-pass] [-k|--kerberos] [-A|--authentication-file=FILE]
    [-S|--signing=on|off|required] [-P|--machine-pass] [-e|--encrypt]
    [-C|--use-ccache] [--pw-nt-hash] service &lt;password&gt;
</code></pre>

<p>```</p>

<p><strong>pth-smbget</strong></p>

<p>``` plain
Usage: smbget [OPTION&hellip;]
  -a, &mdash;guest                 Work as user guest
  -e, &mdash;encrypt               Encrypt SMB transport (UNIX extended servers</p>

<pre><code>                          only)
</code></pre>

<p>  -r, &mdash;resume                Automatically resume aborted files
  -U, &mdash;update                Download only when remote file is newer than</p>

<pre><code>                          local file or local file is missing
</code></pre>

<p>  -R, &mdash;recursive             Recursively download files
  -u, &mdash;username=STRING       Username to use
  -p, &mdash;password=STRING       Password to use
  -w, &mdash;workgroup=STRING      Workgroup to use (optional)
  -n, &mdash;nonprompt             Don&rsquo;t ask anything (non-interactive)
  -d, &mdash;debuglevel=INT        Debuglevel to use
  -o, &mdash;outputfile=STRING     Write downloaded data to specified file
  -O, &mdash;stdout                Write data to stdout
  -D, &mdash;dots                  Show dots as progress indication
  -q, &mdash;quiet                 Be quiet
  -v, &mdash;verbose               Be verbose
  -P, &mdash;keep-permissions      Keep permissions
  -b, &mdash;blocksize=INT         Change number of bytes in a block
  -f, &mdash;rcfile=STRING         Use specified rc file</p>

<p>Help options:
  &ndash;?, &mdash;help                  Show this help message</p>

<pre><code>  --usage                 Display brief usage message
</code></pre>

<p>```</p>

<p><strong>pth-sqsh</strong></p>

<p>``` plain
Use: sqsh [-a count] [-A packet_size] [-b] [-B] [-c [cmdend]] [-C sql]</p>

<pre><code>      [-d severity] [-D database] [-e] [-E editor] [-f severity]
      [-G TDS version] [-h] [-H hostname] [-i filename] [-I interfaces]
      [-J charset] [-k keywords] [-K keytab] [-l level|flags]
      [-L var=value] [-m style] [-n {on|off}] [-N appname] [-o filename]
      [-p] [-P [password]] [-Q query_timeout] [-r [sqshrc]]
      [-R principal] [-s colsep] [-S server] [-t [filter]]
      [-T login_timeout] [-U username] [-v] [-V [bcdimoqru]] [-w width]
      [-X] [-y directory] [-z language] [-Z [secmech]]
</code></pre>

<p> -a  Max. # of errors before abort       -m  Set display mode
 -A  Adjust TDS packet size              -n  Set chained transaction mode
 -b  Suppress banner message on startup  -N  Set Application Name (sqsh)
 -B  Turn off file buffering on startup  -o  Direct all output to file
 -c  Alias for the &lsquo;go&rsquo; command          -p  Display performance stats
 -C  Send sql statement to server        -P  Sybase password (NULL)
 -d  Min. severity level to display      -Q  Query timeout period in seconds
 -D  Change database context on startup  -r  Specify name of .sqshrc
 -e  Echo batch prior to executing       -R  Network security server principal
 -E  Replace default editor (vi)         -s  Alternate column separator (\t)
 -f  Min. severity level for failure     -S  Name of Sybase server ($DSQUERY)
 -G  TDS version to use                  -t  Filter batches through program
 -h  Disable headers and footers         -T  Login timeout period in seconds
 -H  Set the client hostname             -U  Name of Sybase user
 -i  Read input from file                -v  Display current version and exit
 -I  Alternate interfaces file           -V  Request network security services
 -J  Client character set                -w  Adjust result display width
 -k  Specify alternate keywords file     -X  Enable client password encryption
 -K  Network security keytab file (DCE)  -y  Override value of $SYBASE
 -l  Set debugging level                 -z  Alternate display language
 -L  Set the value of a given variable   -Z  Network security mechanism
```</p>

<p><strong>pth-winexe</strong></p>

<p>``` plain
winexe version 1.1
This program may be freely redistributed under the terms of the GNU GPLv3
Usage: winexe [OPTION]&hellip; //HOST COMMAND
Options:
  &ndash;?, &mdash;help                                  Display help message
  -U, &mdash;user=[DOMAIN/]USERNAME[%PASSWORD]     Set the network username
  -A, &mdash;authentication-file=FILE              Get the credentials from a file
  -k, &mdash;kerberos=STRING                       Use Kerberos, -k [yes|no]
  -d, &mdash;debuglevel=DEBUGLEVEL                 Set debug level</p>

<pre><code>  --uninstall                             Uninstall winexe service after remote execution
  --reinstall                             Reinstall winexe service before remote execution
  --system                                Use SYSTEM account
  --profile                               Load user profile
  --convert                               Try to convert characters between local and remote code-pages
  --runas=[DOMAIN\]USERNAME%PASSWORD      Run as user (BEWARE: password is sent in cleartext over net)
  --runas-file=FILE                       Run as user options defined in a file
  --interactive=0|1                       Desktop interaction: 0 - disallow, 1 - allow. If you allow use also --system switch (Win
                                          requirement). Vista do not support this option.
  --ostype=0|1|2                          OS type: 0 - 32-bit, 1 - 64-bit, 2 - winexe will decide. Determines which version (32-bit or 64-bit)
                                          of service will be installed.
</code></pre>

<p>```</p>

<p><strong>pth-wmic</strong></p>

<p>``` plain
Usage: [&ndash;?|&mdash;help] [&mdash;usage] [-d|&mdash;debuglevel DEBUGLEVEL] [&mdash;debug-stderr]</p>

<pre><code>    [-s|--configfile CONFIGFILE] [--option=name=value]
    [-l|--log-basename LOGFILEBASE] [--leak-report] [--leak-report-full]
    [-R|--name-resolve NAME-RESOLVE-ORDER]
    [-O|--socket-options SOCKETOPTIONS] [-n|--netbiosname NETBIOSNAME]
    [-W|--workgroup WORKGROUP] [--realm=REALM] [-i|--scope SCOPE]
    [-m|--maxprotocol MAXPROTOCOL] [-U|--user [DOMAIN\]USERNAME[%PASSWORD]]
    [-N|--no-pass] [--password=STRING] [-A|--authentication-file FILE]
    [-S|--signing on|off|required] [-P|--machine-pass]
    [--simple-bind-dn=STRING] [-k|--kerberos STRING]
    [--use-security-mechanisms=STRING] [-V|--version] [--namespace=STRING]
    [--delimiter=STRING]
    //host query
</code></pre>

<p>Example: wmic -U [domain/]adminuser%password //host &ldquo;select * from Win32_ComputerSystem&rdquo;
```</p>

<p><strong>pth-wmis</strong></p>

<p>``` plain
Usage: [&ndash;?|&mdash;help] [&mdash;usage] [-d|&mdash;debuglevel DEBUGLEVEL] [&mdash;debug-stderr]</p>

<pre><code>    [-s|--configfile CONFIGFILE] [--option=name=value]
    [-l|--log-basename LOGFILEBASE] [--leak-report] [--leak-report-full]
    [-R|--name-resolve NAME-RESOLVE-ORDER]
    [-O|--socket-options SOCKETOPTIONS] [-n|--netbiosname NETBIOSNAME]
    [-W|--workgroup WORKGROUP] [--realm=REALM] [-i|--scope SCOPE]
    [-m|--maxprotocol MAXPROTOCOL] [-U|--user [DOMAIN\]USERNAME[%PASSWORD]]
    [-N|--no-pass] [--password=STRING] [-A|--authentication-file FILE]
    [-S|--signing on|off|required] [-P|--machine-pass]
    [--simple-bind-dn=STRING] [-k|--kerberos STRING]
    [--use-security-mechanisms=STRING] [-V|--version]
    //host
</code></pre>

<p>Example: wmis -U [domain/]adminuser%password //host cmd.exe /c dir c:\ > c:\windows\temp\output.txt
```</p>

<blockquote><p>People are beginning to notice you.  Try dressing before you leave the house.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Web Applications]]></title>
    <link href="http://chousensha.github.io/blog/2014/09/24/kali-tools-catalog-web-applications/"/>
    <updated>2014-09-24T13:35:03+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/09/24/kali-tools-catalog-web-applications</id>
    <content type="html"><![CDATA[<p>This post will focus on the Kali tools that target web applications.</p>

<!-- more -->


<h3>CMS Identification</h3>

<p><strong>blindelephant</strong></p>

<p>The BlindElephant Web Application Fingerprinter attempts to discover the version of a (known) web application by comparing static files at known locations against precomputed hashes for versions of those files in all all available releases. The technique is fast, low-bandwidth, non-invasive, generic, and highly automatable.</p>

<p><img class="center" src="/images/kali/webapp/blindelephant.png" title="&lsquo;blindelephant&rsquo; &lsquo;blindelephant&rsquo;" ></p>

<p><strong>plecost</strong></p>

<p>Wordpress finger printer tool</p>

<p><img class="center" src="/images/kali/webapp/plecost.png" title="&lsquo;plecost&rsquo; &lsquo;plecost&rsquo;" ></p>

<p><strong>wpscan</strong></p>

<p>WPScan is a black box WordPress vulnerability scanner.</p>

<p>``` plain</p>

<hr />

<pre><code>    __          _______   _____                  
    \ \        / /  __ \ / ____|                 
     \ \  /\  / /| |__) | (___   ___  __ _ _ __  
      \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \ 
       \  /\  /  | |     ____) | (__| (_| | | | |
        \/  \/   |_|    |_____/ \___|\__,_|_| |_|

    WordPress Security Scanner by the WPScan Team 
                    Version v2.4.1
 Sponsored by the RandomStorm Open Source Initiative
</code></pre>

<p>   @<em>WPScan</em>, @ethicalhack3r, @erwan_lr, pvdl, @<em>FireFart</em></p>

<hr />

<p>Help :</p>

<p>Some values are settable in a config file, see the example.conf.json</p>

<p>&mdash;update                            Update to the latest revision.
&mdash;url       | -u <target url>       The WordPress URL/domain to scan.
&mdash;force     | -f                    Forces WPScan to not check if the remote site is running WordPress.
&mdash;enumerate | -e [option(s)]        Enumeration.
  option :</p>

<pre><code>u        usernames from id 1 to 10
u[10-20] usernames from id 10 to 20 (you must write [] chars)
p        plugins
vp       only vulnerable plugins
ap       all plugins (can take a long time)
tt       timthumbs
t        themes
vt       only vulnerable themes
at       all themes (can take a long time)
</code></pre>

<p>  Multiple values are allowed : &ldquo;-e tt,p&rdquo; will enumerate timthumbs and plugins
  If no option is supplied, the default is &ldquo;vt,tt,u,vp&rdquo;</p>

<p>&mdash;exclude-content-based &ldquo;<regexp or string>&rdquo;</p>

<pre><code>                                Used with the enumeration option, will exclude all occurrences based on the regexp or string supplied.
                                You do not need to provide the regexp delimiters, but you must write the quotes (simple or double).
</code></pre>

<p>&mdash;config-file  | -c <config file>   Use the specified config file, see the example.conf.json.
&mdash;user-agent   | -a &lt;User-Agent>    Use the specified User-Agent.
&mdash;random-agent | -r                 Use a random User-Agent.
&mdash;follow-redirection                If the target url has a redirection, it will be followed without asking if you wanted to do so or not
&mdash;batch                             Never ask for user input, use the default behaviour.
&mdash;no-color                          Do not use colors in the output.
&mdash;wp-content-dir <wp content dir>   WPScan try to find the content directory (ie wp-content) by scanning the index page, however you can specified it.</p>

<pre><code>                                Subdirectories are allowed.
</code></pre>

<p>&mdash;wp-plugins-dir <wp plugins dir>   Same thing than &mdash;wp-content-dir but for the plugins directory.</p>

<pre><code>                                If not supplied, WPScan will use wp-content-dir/plugins. Subdirectories are allowed
</code></pre>

<p>&mdash;proxy &lt;[protocol://]host:port>    Supply a proxy. HTTP, SOCKS4 SOCKS4A and SOCKS5 are supported.</p>

<pre><code>                                If no protocol is given (format host:port), HTTP will be used.
</code></pre>

<p>&mdash;proxy-auth &lt;username:password>    Supply the proxy login credentials.
&mdash;basic-auth &lt;username:password>    Set the HTTP Basic authentication.
&mdash;wordlist | -w <wordlist>          Supply a wordlist for the password bruter and do the brute.
&mdash;username | -U <username>          Only brute force the supplied username.
&mdash;threads  | -t <number of threads> The number of threads to use when multi-threading requests.
&mdash;cache-ttl       &lt;cache-ttl>       Typhoeus cache TTL.
&mdash;request-timeout &lt;request-timeout> Request Timeout.
&mdash;connect-timeout &lt;connect-timeout> Connect Timeout.
&mdash;max-threads     &lt;max-threads>     Maximum Threads.
&mdash;help     | -h                     This help screen.
&mdash;verbose  | -v                     Verbose output.</p>

<p>Examples :</p>

<p>-Further help &hellip;
ruby ./wpscan.rb &mdash;help</p>

<p>-Do &lsquo;non-intrusive&rsquo; checks &hellip;
ruby ./wpscan.rb &mdash;url www.example.com</p>

<p>-Do wordlist password brute force on enumerated users using 50 threads &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;wordlist darkc0de.lst &mdash;threads 50</p>

<p>-Do wordlist password brute force on the &lsquo;admin&rsquo; username only &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;wordlist darkc0de.lst &mdash;username admin</p>

<p>-Enumerate installed plugins &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate p</p>

<p>-Enumerate installed themes &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate t</p>

<p>-Enumerate users &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate u</p>

<p>-Enumerate installed timthumbs &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate tt</p>

<p>-Use a HTTP proxy &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;proxy 127.0.0.1:8118</p>

<p>-Use a SOCKS5 proxy &hellip; (cURL >= v7.21.7 needed)
ruby ./wpscan.rb &mdash;url www.example.com &mdash;proxy socks5://127.0.0.1:9000</p>

<p>-Use custom content directory &hellip;
ruby ./wpscan.rb -u www.example.com &mdash;wp-content-dir custom-content</p>

<p>-Use custom plugins directory &hellip;
ruby ./wpscan.rb -u www.example.com &mdash;wp-plugins-dir wp-content/custom-plugins</p>

<p>-Update &hellip;
ruby ./wpscan.rb &mdash;update</p>

<p>-Debug output &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;debug-output 2>debug.log</p>

<p>See README for further information.
```</p>

<h3>Database Exploitation</h3>

<p>Covered in the VA section</p>

<h3>IDS/IPS Identification</h3>

<p><strong>ua-tester</strong></p>

<p>This tool is designed to automatically check a given URL using a list of standard and non-standard User Agent strings provided by the user (1 per line). The results of these checks are then reported to the user for further manual analysis where required.</p>

<p><img class="center" src="/images/kali/webapp/ua-tester.png" title="&lsquo;ua-tester&rsquo; &lsquo;ua-tester&rsquo;" ></p>

<h3>Web Application Fuzzers</h3>

<p><strong>burpsuite</strong></p>

<p>Burp Suite is an integrated platform for performing security testing of web applications. Its various tools work seamlessly together to support the entire testing process, from initial mapping and analysis of an application&rsquo;s attack surface, through to finding and exploiting security vulnerabilities.</p>

<p>Burp gives you full control, letting you combine advanced manual techniques with state-of-the-art automation, to make your work faster, more effective, and more fun.</p>

<p>Burp Suite contains the following key components:</p>

<ul>
<li><p>An intercepting Proxy, which lets you inspect and modify traffic between your browser and the target application.</p></li>
<li><p>An application-aware Spider, for crawling content and functionality.</p></li>
<li><p>An advanced web application Scanner, for automating the detection of numerous types of vulnerability.</p></li>
<li><p>An Intruder tool, for performing powerful customized attacks to find and exploit unusual vulnerabilities.</p></li>
<li><p>A Repeater tool, for manipulating and resending individual requests.</p></li>
<li><p>A Sequencer tool, for testing the randomness of session tokens.</p></li>
<li><p>The ability to save your work and resume working later.</p></li>
<li><p>Extensibility, allowing you to easily write your own plugins, to perform complex and highly customized tasks within Burp.</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/burp.png" title="&lsquo;burpsuite&rsquo; &lsquo;burp&rsquo;" ></p>

<p><strong>owasp-zap</strong></p>

<p>The OWASP Zed Attack Proxy (ZAP) is an easy to use integrated penetration testing tool for finding vulnerabilities in web applications.</p>

<p>ZAP provides automated scanners as well as a set of tools that allow you to find security vulnerabilities manually.</p>

<p><img class="center" src="/images/kali/webapp/owasp-zap.png" title="&lsquo;owasp-zap&rsquo; &lsquo;owasp-zap&rsquo;" ></p>

<p><strong>webscarab</strong></p>

<p>WebScarab is a framework for analysing applications that communicate using the HTTP and HTTPS protocols. It is written in Java, and is thus portable to many platforms. WebScarab has several modes of operation, implemented by a number of plugins. In its most common usage, WebScarab operates as an intercepting proxy, allowing the operator to review and modify requests created by the browser before they are sent to the server, and to review and modify responses returned from the server before they are received by the browser. WebScarab is able to intercept both HTTP and HTTPS communication. The operator can also review the conversations (requests and responses) that have passed through WebScarab.</p>

<p><img class="center" src="/images/kali/webapp/webscarab.png" title="&lsquo;webscarab&rsquo; &lsquo;webscarab&rsquo;" ></p>

<p><strong>webslayer</strong></p>

<p>WebSlayer is a tool designed for brute forcing Web Applications, it can be used to discover not linked resources (directories, servlets, scripts, etc), brute force GET and POST parameters, brute force Forms parameters (User/Password), Fuzzing, etc. The tools has a payload generator and a easy and powerful results analyzer to aid the tester in all the brute force tests.</p>

<p>It&rsquo;s possible to perform attacks like:</p>

<ul>
<li>Predictable resource locator (File and directories discovery)</li>
<li>Login forms brute force</li>
<li>Session brute force</li>
<li>Parameters brute force</li>
<li>Parameter fuzzing and Injection (XSS, SQL, etc)</li>
<li>Basic and Ntml brute forcing</li>
</ul>


<p><img class="center" src="/images/kali/webapp/webslayer.png" title="&lsquo;webslayer&rsquo; &lsquo;webslayer&rsquo;" ></p>

<p><strong>websploit</strong></p>

<p>``` plain
WebSploit Advanced MITM Framework</p>

<p>[+]Autopwn &ndash; Used From Metasploit For Scan and Exploit Target Service
[+]wmap &ndash; Scan,Crawler Target Used From Metasploit wmap plugin
[+]format infector &ndash; inject reverse &amp; bind payload into file format
[+]phpmyadmin Scanner
[+]CloudFlare resolver
[+]LFI Bypasser
[+]Apache Users Scanner
[+]Dir Bruter
[+]admin finder
[+]MLITM Attack &ndash; Man Left In The Middle, XSS Phishing Attacks
[+]MITM &ndash; Man In The Middle Attack
[+]Java Applet Attack
[+]MFOD Attack Vector
[+]ARP Dos Attack
[+]Web Killer Attack
[+]Fake Update Attack
[+]Fake Access point Attack
[+]Wifi Honeypot
[+]Wifi Jammer
[+]Wifi Dos
[+]Wifi Mass De-Authentication Attack
[+]Bluetooth POD Attack
```</p>

<p><strong>wfuzz</strong></p>

<p>Wfuzz is a tool designed for bruteforcing Web Applications, it can be used for finding resources not linked (directories, servlets, scripts, etc), bruteforce GET and POST parameters for checking different kind of injections (SQL, XSS, LDAP,etc), bruteforce Forms parameters (User/Password), Fuzzing,etc.</p>

<p><img class="center" src="/images/kali/webapp/wfuzz.png" title="&lsquo;wfuzz&rsquo; &lsquo;wfuzz&rsquo;" ></p>

<p><strong>xsser</strong></p>

<p>Cross Site &ldquo;Scripter&rdquo; is an automatic -framework- to detect, exploit and report XSS vulnerabilities in web-based applications. It contains several options to try to bypass certain filters, and various special techniques of code injection.</p>

<p>``` plain
Usage:</p>

<p>xsser [OPTIONS] [-u <url> |-i <file> |-d <dork>] [-g <get> |-p <post> |-c <crawl>] [Request(s)] [Vector(s)] [Bypasser(s)] [Technique(s)] [Final Injection(s)]</p>

<p>Cross Site &ldquo;Scripter&rdquo; is an automatic -framework- to detect, exploit and
report XSS vulnerabilities in web-based applications.</p>

<p>Options:
  &mdash;version             show program&rsquo;s version number and exit
  -h, &mdash;help            show this help message and exit
  -s, &mdash;statistics      show advanced statistics output results
  -v, &mdash;verbose         active verbose mode output results
  &mdash;gtk                 launch XSSer GTK Interface (Wizard included!)</p>

<p>  <em>Special Features</em>:</p>

<pre><code>You can choose Vector(s) and Bypasser(s) to inject code with this
extra special features:

--imx=IMX           create a false image with XSS code embedded
--fla=FLASH         create a false .swf file with XSS code embedded
</code></pre>

<p>  <em>Select Target(s)</em>:</p>

<pre><code>At least one of these options has to be specified to set the source to
get target(s) urls from. You need to choose to run XSSer:

-u URL, --url=URL   Enter target(s) to audit
-i READFILE         Read target urls from a file
-d DORK             Process search engine dork results as target urls
--De=DORK_ENGINE    Search engine to use for dorking (bing, altavista,
                    yahoo, baidu, yandex, youdao, webcrawler, google, etc.
                    See dork.py file to check for available engines)
</code></pre>

<p>  <em>Select type of HTTP/HTTPS Connection(s)</em>:</p>

<pre><code>These options can be used to specify which parameter(s) we want to use
like payload to inject code.

-g GETDATA          Enter payload to audit using GET (ex: '/menu.php?q=')
-p POSTDATA         Enter payload to audit using POST (ex: 'foo=1&amp;bar=')
-c CRAWLING         Number of urls to crawl on target(s): 1-99999
--Cw=CRAWLER_WIDTH  Deeping level of crawler: 1-5
--Cl                Crawl only local target(s) urls (default TRUE)
</code></pre>

<p>  <em>Configure Request(s)</em>:</p>

<pre><code>These options can be used to specify how to connect to target(s)
payload(s). You can choose multiple:

--cookie=COOKIE     Change your HTTP Cookie header
--drop-cookie       Ignore Set-Cookie header from response
--user-agent=AGENT  Change your HTTP User-Agent header (default SPOOFED)
--referer=REFERER   Use another HTTP Referer header (default NONE)
--xforw             Set your HTTP X-Forwarded-For with random IP values
--xclient           Set your HTTP X-Client-IP with random IP values
--headers=HEADERS   Extra HTTP headers newline separated
--auth-type=ATYPE   HTTP Authentication type (Basic, Digest, GSS or NTLM)
--auth-cred=ACRED   HTTP Authentication credentials (name:password)
--proxy=PROXY       Use proxy server (tor: http://localhost:8118)
--ignore-proxy      Ignore system default HTTP proxy
--timeout=TIMEOUT   Select your timeout (default 30)
--retries=RETRIES   Retries when the connection timeouts (default 1)
--threads=THREADS   Maximum number of concurrent HTTP requests (default 5)
--delay=DELAY       Delay in seconds between each HTTP request (default 0)
--tcp-nodelay       Use the TCP_NODELAY option
--follow-redirects  XSSer will follow server redirection responses (302)
--follow-limit=FLI  Set how many times XSSer will follow redirections
                    (default 50)
</code></pre>

<p>  <em>Checker Systems</em>:</p>

<pre><code>This options are usefull to know if your target(s) have some filters
against XSS attacks, to reduce 'false positive' results and to perform
more advanced tests:

--no-head           NOT verify the stability of the url (codes: 200|302)
                    with a HEAD pre-check request
--alive=ISALIVE     set limit of every how much errors XSSer must to
                    verify that target is alive
--hash              send an unique hash, without vectors, to pre-check if
                    target(s) repeats all content recieved
--heuristic         launch a heuristic testing to discover which
                    parameters are filtered on target(s) code: ;\/&lt;&gt;"'=
--checkaturl=ALT    check for a valid XSS response from target(s) at an
                    alternative url. 'blind XSS'
--checkmethod=ALTM  check responses from target(s) using a different
                    connection type: GET or POST (default: GET)
--checkatdata=ALD   check responses from target(s) using an alternative
                    payload (default: same than first injection)
--reverse-check     establish a reverse connection from target(s) to XSSer
                    to certificate that is 100% vulnerable
</code></pre>

<p>  <em>Select Vector(s)</em>:</p>

<pre><code>These options can be used to specify a XSS vector source code to
inject in each payload. Important, if you don't want to try to inject
a common XSS vector, used by default. Choose only one option:

--payload=SCRIPT    OWN  - Insert your XSS construction -manually-
--auto              AUTO - Insert XSSer 'reported' vectors from file
                    (HTML5 vectors included!)
</code></pre>

<p>  <em>Select Bypasser(s)</em>:</p>

<pre><code>These options can be used to encode selected vector(s) to try to
bypass possible anti-XSS filters on target(s) code and possible IPS
rules, if the target use it. Also, can be combined with other
techniques to provide encoding:

--Str               Use method String.FromCharCode()
--Une               Use Unescape() function
--Mix               Mix String.FromCharCode() and Unescape()
--Dec               Use Decimal encoding
--Hex               Use Hexadecimal encoding
--Hes               Use Hexadecimal encoding, with semicolons
--Dwo               Encode vectors IP addresses in DWORD
--Doo               Encode vectors IP addresses in Octal
--Cem=CEM           Try -manually- different Character Encoding Mutations
                    (reverse obfuscation: good) -&gt; (ex: 'Mix,Une,Str,Hex')
</code></pre>

<p>  <em>Special Technique(s)</em>:</p>

<pre><code>These options can be used to try to inject code using different type
of XSS techniques. You can choose multiple:

--Coo               COO - Cross Site Scripting Cookie injection
--Xsa               XSA - Cross Site Agent Scripting
--Xsr               XSR - Cross Site Referer Scripting
--Dcp               DCP - Data Control Protocol injections
--Dom               DOM - Document Object Model injections
--Ind               IND - HTTP Response Splitting Induced code
--Anchor            ANC - Use Anchor Stealth payloader (DOM shadows!)
--Phpids            PHP - Exploit PHPIDS bug (0.6.5) to bypass filters
</code></pre>

<p>  <em>Select Final injection(s)</em>:</p>

<pre><code>These options can be used to specify the final code to inject in
vulnerable target(s). Important, if you want to exploit on-the-wild
your discovered vulnerabilities. Choose only one option:

--Fp=FINALPAYLOAD   OWN    - Insert your final code to inject -manually-
--Fr=FINALREMOTE    REMOTE - Insert your final code to inject -remotelly-
--Doss              DOSs   - XSS Denial of service (server) injection
--Dos               DOS    - XSS Denial of service (client) injection
--B64               B64    - Base64 code encoding in META tag (rfc2397)
</code></pre>

<p>  <em>Special Final injection(s)</em>:</p>

<pre><code>These options can be used to execute some 'special' injection(s) in
vulnerable target(s). You can select multiple and combine with your
final code (except with DCP code):

--Onm               ONM - Use onMouseMove() event to inject code
--Ifr               IFR - Use &lt;iframe&gt; source tag to inject code
</code></pre>

<p>  <em>Miscellaneous</em>:</p>

<pre><code>--silent            inhibit console output results
--update            check for XSSer latest stable version
--save              output all results directly to template (XSSlist.dat)
--xml=FILEXML       output 'positives' to aXML file (--xml filename.xml)
--short=SHORTURLS   display -final code- shortered (tinyurl, is.gd)
--launch            launch a browser at the end with each XSS discovered
--tweet             publish each XSS discovered into the 'Grey Swarm!'
--tweet-tags=TT     add more tags to your XSS discovered publications
                    (default: #xss) - (ex: #xsser #vulnerability)
</code></pre>

<p>```</p>

<h3>Web Application Proxies</h3>

<p><strong>paros</strong></p>

<p>A Java based HTTP/HTTPS proxy for assessing web application vulnerability. It supports editing/viewing HTTP messages on-the-fly. Other featuers include spiders, client certificate, proxy-chaining, intelligent scanning for XSS and SQL injections etc.</p>

<p><img class="center" src="/images/kali/webapp/paros.png" title="&lsquo;paros proxy&rsquo; &lsquo;paros&rsquo;" ></p>

<p><strong>proxystrike</strong></p>

<p>ProxyStrike is an active Web Application Proxy. It’s a tool designed to find vulnerabilities while browsing an application.</p>

<p>Right now it has available Sql injection and XSS plugins.</p>

<p><img class="center" src="/images/kali/webapp/proxystrike.png" title="&lsquo;proxystrike&rsquo; &lsquo;proxystrike&rsquo;" ></p>

<p><strong>vega</strong></p>

<p> Vega is a free and open source scanner and testing platform to test the security of web applications. Vega can help you find and validate SQL Injection, Cross-Site Scripting (XSS), inadvertently disclosed sensitive information, and other vulnerabilities. It is written in Java, GUI based, and runs on Linux, OS X, and Windows.</p>

<p>Vega includes an automated scanner for quick tests and an intercepting proxy for tactical inspection. The Vega scanner finds XSS (cross-site scripting), SQL injection, and other vulnerabilities. Vega can be extended using a powerful API in the language of the web: Javascript.</p>

<p><img class="center" src="/images/kali/webapp/vega.png" title="&lsquo;vega&rsquo; &lsquo;vega&rsquo;" ></p>

<h3>Web Crawlers</h3>

<p><strong>apache-users</strong></p>

<p>This Perl script will enumerate the usernames on any system that uses Apache with the UserDir module.</p>

<p><strong>cutycapt</strong></p>

<p>CutyCapt is a small cross-platform command-line utility to capture WebKit’s rendering of a web page into a variety of vector and bitmap formats, including SVG, PDF, PS, PNG, JPEG, TIFF, GIF, and BMP.</p>

<p><img class="center" src="/images/kali/webapp/cutycapt.png" title="&lsquo;cutycapt&rsquo; &lsquo;cutycapt&rsquo;" ></p>

<p><strong>dirb</strong></p>

<p>DIRB  IS  a  Web Content Scanner. It looks for existing (and/or hidden)
Web Objects. It basically works by launching a dictionary basesd attack
against a web server and analizing the response.</p>

<p><img class="center" src="/images/kali/webapp/dirb.png" title="&lsquo;dirb&rsquo; &lsquo;dirb&rsquo;" ></p>

<p><strong>dirbuster</strong></p>

<p>DirBuster is a multi threaded java application designed to brute force directories and files names on web/application servers.</p>

<p><img class="center" src="/images/kali/webapp/dirbuster.png" title="&lsquo;dirbuster&rsquo; &lsquo;dirbuster&rsquo;" ></p>

<h3>Web Vulnerability Scanners</h3>

<p><strong>cadaver</strong></p>

<p>A command-line WebDAV client for Unix.</p>

<p>cadaver supports file upload, download,  on-screen  display,  namespace
operations (move and copy), collection creation and deletion, and locking operations.</p>

<p><strong>davtest</strong></p>

<p>DAVTest tests WebDAV enabled servers by uploading test executable files, and then (optionally) uploading files which allow for command execution or other actions directly on the target.</p>

<p>DAVTest supports:</p>

<ul>
<li><p>Automatically send exploit files</p></li>
<li><p>Automatic randomization of directory to help hide files</p></li>
<li><p>Send text files and try MOVE to executable name</p></li>
<li><p>Basic and Digest authorization</p></li>
<li><p>Automatic clean-up of uploaded files</p></li>
<li><p>Send an arbitrary file</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/davtest.png" title="&lsquo;davtest&rsquo; &lsquo;davtest&rsquo;" ></p>

<p><strong>deblaze</strong></p>

<p>A remote method enumeration tool for flex servers</p>

<p>Deblaze provides the following functionality:</p>

<ul>
<li><p>Brute Force Service and Method Names</p></li>
<li><p>Method Interrogation</p></li>
<li><p>Flex Technology Fingerprinting</p></li>
<li><p>Parameter detection</p></li>
<li><p>Basic parameter fuzzing</p></li>
<li><p>Proxy AMF requests/responses</p></li>
<li><p>HTML reporting</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/deblaze.png" title="&lsquo;deblaze&rsquo; &lsquo;deblaze&rsquo;" ></p>

<p><strong>fimap</strong></p>

<p>Automatic LFI/RFI scanner and exploiter</p>

<p>``` plain
fimap v.09 (For the Swarm)
:: Automatic LFI/RFI scanner and exploiter
:: by Iman Karim (<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x66;&#x69;&#109;&#x61;&#112;&#x2e;&#100;&#101;&#118;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;">&#x66;&#105;&#x6d;&#97;&#112;&#46;&#x64;&#101;&#118;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#109;</a>)</p>

<p>Usage: ./fimap.py [options]</p>

<h2>Operating Modes:</h2>

<p>   -s , &mdash;single                 Mode to scan a single URL for FI errors.</p>

<pre><code>                             Needs URL (-u). This mode is the default.
</code></pre>

<p>   -m , &mdash;mass                   Mode for mass scanning. Will check every URL</p>

<pre><code>                             from a given list (-l) for FI errors.
</code></pre>

<p>   -g , &mdash;google                 Mode to use Google to aquire URLs.</p>

<pre><code>                             Needs a query (-q) as google search query.
</code></pre>

<p>   -H , &mdash;harvest                Mode to harvest a URL recursivly for new URLs.</p>

<pre><code>                             Needs a root url (-u) to start crawling there.
                             Also needs (-w) to write a URL list for mass mode.
</code></pre>

<p>   -4 , &mdash;autoawesome            With the AutoAwesome mode fimap will fetch all</p>

<pre><code>                             forms and headers found on the site you defined
                             and tries to find file inclusion bugs thru them. Needs an
                             URL (-u).
</code></pre>

<h2>Techniques:</h2>

<p>   -b , &mdash;enable-blind           Enables blind FI-Bug testing when no error messages are printed.</p>

<pre><code>                             Note that this mode will cause lots of requests compared to the
                             default method. Can be used with -s, -m or -g.
</code></pre>

<p>   -D , &mdash;dot-truncation         Enables dot truncation technique to get rid of the suffix if</p>

<pre><code>                             the default mode (nullbyte poison) failed. This mode can cause
                             tons of requests depending how you configure it.
                             By default this mode only tests windows servers.
                             Can be used with -s, -m or -g. Experimental.
</code></pre>

<p>   -M , &mdash;multiply-term=X        Multiply terminal symbols like &lsquo;.&rsquo; and &lsquo;/&rsquo; in the path by X.</p>

<h2>Variables:</h2>

<p>   -u , &mdash;url=URL                The URL you want to test.</p>

<pre><code>                             Needed in single mode (-s).
</code></pre>

<p>   -l , &mdash;list=LIST              The URL-LIST you want to test.</p>

<pre><code>                             Needed in mass mode (-m).
</code></pre>

<p>   -q , &mdash;query=QUERY            The Google Search QUERY.</p>

<pre><code>                             Example: 'inurl:include.php'
                             Needed in Google Mode (-g)
    --skip-pages=X           Skip the first X pages from the Googlescanner.
</code></pre>

<p>   -p , &mdash;pages=COUNT            Define the COUNT of pages to search (-g).</p>

<pre><code>                             Default is 10.
    --results=COUNT          The count of results the Googlescanner should get per page.
                             Possible values: 10, 25, 50 or 100(default).
    --googlesleep=TIME       The time in seconds the Googlescanner should wait befor each
                             request to google. fimap will count the time between two requests
                             and will sleep if it's needed to reach your cooldown. Default is 5.
</code></pre>

<p>   -w , &mdash;write=LIST             The LIST which will be written if you have choosen</p>

<pre><code>                             harvest mode (-H). This file will be opened in APPEND mode.
</code></pre>

<p>   -d , &mdash;depth=CRAWLDEPTH       The CRAWLDEPTH (recurse level) you want to crawl your target site</p>

<pre><code>                             in harvest mode (-H). Default is 1.
</code></pre>

<p>   -P , &mdash;post=POSTDATA          The POSTDATA you want to send. All variables inside</p>

<pre><code>                             will also be scanned for file inclusion bugs.
    --cookie=COOKIES         Define the cookie which should be send with each request.
                             Also the cookies will be scanned for file inclusion bugs.
                             Concatenate multiple cookies with the ';' character.
    --ttl=SECONDS            Define the TTL (in seconds) for requests. Default is 30 seconds.
    --no-auto-detect         Use this switch if you don't want to let fimap automaticly detect
                             the target language in blind-mode. In that case you will get some
                             options you can choose if fimap isn't sure which lang it is.
    --bmin=BLIND_MIN         Define here the minimum count of directories fimap should walk thru
                             in blind mode. The default number is defined in the generic.xml
    --bmax=BLIND_MAX         Define here the maximum count of directories fimap should walk thru.
    --dot-trunc-min=700      The count of dots to begin with in dot-truncation mode.
    --dot-trunc-max=2000     The count of dots to end with in dot-truncation mode.
    --dot-trunc-step=50      The step size for each round in dot-truncation mode.
    --dot-trunc-ratio=0.095  The maximum ratio to detect if dot truncation was successfull.
    --dot-trunc-also-unix    Use this if dot-truncation should also be tested on unix servers.
    --force-os=OS            Forces fimap to test only files for the OS.
                             OS can be 'unix' or 'windows'
</code></pre>

<h2>Attack Kit:</h2>

<p>   -x , &mdash;exploit                Starts an interactive session where you can</p>

<pre><code>                             select a target and do some action.
</code></pre>

<p>   -T , &mdash;tab-complete           Enables TAB-Completation in exploit mode. Needs readline module.</p>

<pre><code>                             Use this if you want to be able to tab-complete thru remote
                             files\dirs. Eats an extra request for every 'cd' command.
</code></pre>

<h2>Disguise Kit:</h2>

<p>   -A , &mdash;user-agent=UA          The User-Agent which should be sent.</p>

<pre><code>    --http-proxy=PROXY       Setup your proxy with this option. But read this facts:
                               * The googlescanner will ignore the proxy to get the URLs,
                                 but the pentest\attack itself will go thru proxy.
                               * PROXY should be in format like this: 127.0.0.1:8080
                               * It's experimental
    --show-my-ip             Shows your internet IP, current country and user-agent.
                             Useful if you want to test your vpn\proxy config.
</code></pre>

<h2>Plugins:</h2>

<pre><code>    --plugins                List all loaded plugins and quit after that.
</code></pre>

<p>   -I , &mdash;install-plugins        Shows some official exploit-mode plugins you can install</p>

<pre><code>                             and\or upgrade.
</code></pre>

<h2>Other:</h2>

<pre><code>    --update-def             Checks and updates your definition files found in the
                             config directory.
    --test-rfi               A quick test to see if you have configured RFI nicely.
    --merge-xml=XMLFILE      Use this if you have another fimap XMLFILE you want to
                             include to your own fimap_result.xml.
</code></pre>

<p>   -C , &mdash;enable-color           Enables a colorful output. Works only in linux!</p>

<pre><code>    --force-run              Ignore the instance check and just run fimap even if a lockfile
                             exists. WARNING: This may erase your fimap_results.xml file!
</code></pre>

<p>   -v , &mdash;verbose=LEVEL          Verbose level you want to receive.</p>

<pre><code>                             LEVEL=3 -&gt; Debug
                             LEVEL=2 -&gt; Info(Default)
                             LEVEL=1 -&gt; Messages
                             LEVEL=0 -&gt; High-Level
    --credits                Shows some credits.
    --greetings              Some greetings ;)
</code></pre>

<p>   -h , &mdash;help                   Shows this cruft.</p>

<h2>Examples:</h2>

<ol>
<li> Scan a single URL for FI errors:
    ./fimap.py -u &lsquo;<a href="http://localhost/test.php?file=bang&amp;id=23">http://localhost/test.php?file=bang&amp;id=23</a>&rsquo;</li>
<li> Scan a list of URLS for FI errors:
    ./fimap.py -m -l &lsquo;/tmp/urllist.txt&rsquo;</li>
<li> Scan Google search results for FI errors:
    ./fimap.py -g -q &lsquo;inurl:include.php&rsquo;</li>
<li> Harvest all links of a webpage with recurse level of 3 and
 write the URLs to /tmp/urllist
    ./fimap.py -H -u &lsquo;<a href="http://localhost">http://localhost</a>&rsquo; -d 3 -w /tmp/urllist
```</li>
</ol>


<p><strong>grabber</strong></p>

<p>Grabber is a web application scanner. Basically it detects some kind of vulnerabilities in your website. Grabber is simple, not fast but portable and really adaptable. This software is designed to scan small websites such as personals, forums etc. absolutely not big application: it would take too long time and flood your network.</p>

<p>Features:</p>

<ul>
<li><p>Cross-Site Scripting</p></li>
<li><p>SQL Injection (there is also a special Blind SQL Injection module)</p></li>
<li><p>File Inclusion</p></li>
<li><p>Backup files check</p></li>
<li><p>Simple AJAX check (parse every JavaScript and get the URL and try to get the parameters)</p></li>
<li><p>Hybrid analysis/Crystal ball testing for PHP application using PHP-SAT</p></li>
<li><p>JavaScript source code analyzer: Evaluation of the quality/correctness of the JavaScript with JavaScript Lint</p></li>
<li><p>Generation of a file [session_id, time(t)] for next stats analysis.</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/grabber.png" title="&lsquo;grabber&rsquo; &lsquo;grabber&rsquo;" ></p>

<p><strong>joomscan</strong></p>

<p>Joomla! is probably the most widely-used CMS out there due to its flexibility, user-friendlinesss, extensibility to name a few. So, watching its vulnerabilities and adding such vulnerabilities as KB to Joomla scanner takes ongoing activity. It will help web developers and web masters to help identify possible security weaknesses on their deployed Joomla! sites.</p>

<p>The following features are currently available:</p>

<ul>
<li><p>Exact version Probing (the scanner can tell whether a target is running version 1.5.12)</p></li>
<li><p>Common Joomla! based web application firewall detection</p></li>
<li><p>Searching known vulnerabilities of Joomla! and its components</p></li>
<li><p>Reporting to Text &amp; HTML output</p></li>
<li><p>Immediate update capability via scanner or svn</p></li>
</ul>


<p><img class="center" src="/images/kali/webapp/joomscan.png" title="&lsquo;joomscan&rsquo; &lsquo;joomscan&rsquo;" ></p>

<p><strong>padbuster</strong></p>

<p>PadBuster is a Perl script for automating Padding Oracle Attacks. PadBuster provides the capability to decrypt arbitrary ciphertext, encrypt arbitrary plaintext, and perform automated response analysis to determine whether a request is vulnerable to padding oracle attacks.</p>

<p>``` plain
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| PadBuster &ndash; v0.3.3                        |
| Brian Holyfield &ndash; Gotham Digital Science  |
| <a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#108;&#97;&#x62;&#115;&#64;&#103;&#100;&#115;&#115;&#101;&#99;&#117;&#114;&#105;&#x74;&#x79;&#x2e;&#99;&#x6f;&#x6d;">&#108;&#97;&#98;&#x73;&#64;&#x67;&#100;&#115;&#115;&#101;&#x63;&#117;&#114;&#105;&#116;&#x79;&#x2e;&#99;&#x6f;&#x6d;</a>                      |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<pre><code>Use: padBuster.pl URL EncryptedSample BlockSize [options]
</code></pre>

<p>  Where: URL = The target URL (and query string if applicable)</p>

<pre><code>     EncryptedSample = The encrypted value you want to test. Must
                       also be present in the URL, PostData or a Cookie
     BlockSize = The block size being used by the algorithm
</code></pre>

<p>Options:</p>

<pre><code> -auth [username:password]: HTTP Basic Authentication 
 -bruteforce: Perform brute force against the first block 
 -ciphertext [Bytes]: CipherText for Intermediate Bytes (Hex-Encoded)
     -cookies [HTTP Cookies]: Cookies (name1=value1; name2=value2)
     -encoding [0-4]: Encoding Format of Sample (Default 0)
                      0=Base64, 1=Lower HEX, 2=Upper HEX
                      3=.NET UrlToken, 4=WebSafe Base64
     -encodedtext [Encoded String]: Data to Encrypt (Encoded)
     -error [Error String]: Padding Error Message
     -headers [HTTP Headers]: Custom Headers (name1::value1;name2::value2)
 -interactive: Prompt for confirmation on decrypted bytes
 -intermediate [Bytes]: Intermediate Bytes for CipherText (Hex-Encoded)
 -log: Generate log files (creates folder PadBuster.DDMMYY)
 -noencode: Do not URL-encode the payload (encoded by default)
 -noiv: Sample does not include IV (decrypt first block) 
     -plaintext [String]: Plain-Text to Encrypt
     -post [Post Data]: HTTP Post Data String
 -prefix [Prefix]: Prefix bytes to append to each sample (Encoded) 
 -proxy [address:port]: Use HTTP/S Proxy
 -proxyauth [username:password]: Proxy Authentication
 -resume [Block Number]: Resume at this block number
 -usebody: Use response body content for response analysis phase
     -verbose: Be Verbose
     -veryverbose: Be Very Verbose (Debug Only)
</code></pre>

<p>```</p>

<p><strong>skipfish</strong></p>

<p>Skipfish is an active web application security reconnaissance tool. It prepares an interactive sitemap for the targeted site by carrying out a recursive crawl and dictionary-based probes. The resulting map is then annotated with the output from a number of active (but hopefully non-disruptive) security checks. The final report generated by the tool is meant to serve as a foundation for professional web application security assessments.</p>

<p>Key features:</p>

<ul>
<li><p>High speed: pure C code, highly optimized HTTP handling, minimal CPU footprint – easily achieving 2000 requests per second with responsive targets.</p></li>
<li><p>Ease of use: heuristics to support a variety of quirky web frameworks and mixed-technology sites, with automatic learning capabilities, on-the-fly wordlist creation, and form autocompletion.</p></li>
<li><p>Cutting-edge security logic: high quality, low false positive, differential security checks, capable of spotting a range of subtle flaws, including blind injection vectors.</p></li>
</ul>


<p>``` plain
skipfish web application scanner &ndash; version 2.10b
Usage: skipfish [ options &hellip; ] -W wordlist -o output_dir start_url [ start_url2 &hellip; ]</p>

<p>Authentication and access options:</p>

<p>  -A user:pass      &ndash; use specified HTTP authentication credentials
  -F host=IP        &ndash; pretend that &lsquo;host&rsquo; resolves to &lsquo;IP&rsquo;
  -C name=val       &ndash; append a custom cookie to all requests
  -H name=val       &ndash; append a custom HTTP header to all requests
  -b (i|f|p)        &ndash; use headers consistent with MSIE / Firefox / iPhone
  -N                &ndash; do not accept any new cookies
  &mdash;auth-form url   &ndash; form authentication URL
  &mdash;auth-user user  &ndash; form authentication user
  &mdash;auth-pass pass  &ndash; form authentication password
  &mdash;auth-verify-url &ndash;  URL for in-session detection</p>

<p>Crawl scope options:</p>

<p>  -d max_depth     &ndash; maximum crawl tree depth (16)
  -c max_child     &ndash; maximum children to index per node (512)
  -x max_desc      &ndash; maximum descendants to index per branch (8192)
  -r r_limit       &ndash; max total number of requests to send (100000000)
  -p crawl%        &ndash; node and link crawl probability (100%)
  -q hex           &ndash; repeat probabilistic scan with given seed
  -I string        &ndash; only follow URLs matching &lsquo;string&rsquo;
  -X string        &ndash; exclude URLs matching &lsquo;string&rsquo;
  -K string        &ndash; do not fuzz parameters named &lsquo;string&rsquo;
  -D domain        &ndash; crawl cross-site links to another domain
  -B domain        &ndash; trust, but do not crawl, another domain
  -Z               &ndash; do not descend into 5xx locations
  -O               &ndash; do not submit any forms
  -P               &ndash; do not parse HTML, etc, to find new links</p>

<p>Reporting options:</p>

<p>  -o dir          &ndash; write output to specified directory (required)
  -M              &ndash; log warnings about mixed content / non-SSL passwords
  -E              &ndash; log all HTTP/1.0 / HTTP/1.1 caching intent mismatches
  -U              &ndash; log all external URLs and e-mails seen
  -Q              &ndash; completely suppress duplicate nodes in reports
  -u              &ndash; be quiet, disable realtime progress stats
  -v              &ndash; enable runtime logging (to stderr)</p>

<p>Dictionary management options:</p>

<p>  -W wordlist     &ndash; use a specified read-write wordlist (required)
  -S wordlist     &ndash; load a supplemental read-only wordlist
  -L              &ndash; do not auto-learn new keywords for the site
  -Y              &ndash; do not fuzz extensions in directory brute-force
  -R age          &ndash; purge words hit more than &lsquo;age&rsquo; scans ago
  -T name=val     &ndash; add new form auto-fill rule
  -G max_guess    &ndash; maximum number of keyword guesses to keep (256)</p>

<p>  -z sigfile      &ndash; load signatures from this file</p>

<p>Performance settings:</p>

<p>  -g max_conn     &ndash; max simultaneous TCP connections, global (40)
  -m host_conn    &ndash; max simultaneous connections, per target IP (10)
  -f max_fail     &ndash; max number of consecutive HTTP errors (100)
  -t req_tmout    &ndash; total request response timeout (20 s)
  -w rw_tmout     &ndash; individual network I/O timeout (10 s)
  -i idle_tmout   &ndash; timeout on idle HTTP connections (10 s)
  -s s_limit      &ndash; response size limit (400000 B)
  -e              &ndash; do not keep binary responses for reporting</p>

<p>Other settings:</p>

<p>  -l max_req      &ndash; max requests per second (0.000000)
  -k duration     &ndash; stop scanning after the given duration h:m:s
  &mdash;config file   &ndash; load the specified configuration file</p>

<p>Send comments and complaints to <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x68;&#x65;&#105;&#110;&#101;&#110;&#110;&#x40;&#103;&#111;&#x6f;&#x67;&#108;&#101;&#46;&#99;&#111;&#109;">&#104;&#x65;&#x69;&#110;&#101;&#x6e;&#110;&#64;&#103;&#x6f;&#111;&#x67;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;</a>.
```</p>

<p><strong>uniscan-gui</strong></p>

<p>Uniscan is a simple Remote File Include, Local File Include and Remote Command Execution vulnerability scanner.</p>

<p><img class="center" src="/images/kali/webapp/uniscan-gui.png" title="&lsquo;uniscan-gui&rsquo; &lsquo;uniscan-gui&rsquo;" ></p>

<p><strong>w3af</strong></p>

<p>w3af is a Web Application Attack and Audit Framework which aims to identify and exploit all web application vulnerabilities. This package provides a graphical user interface (GUI) for the framework. If you want a command-line application only, install w3af-console. The framework has been called the “metasploit for the web”, but it’s actually much more than that, because it also discovers the web application vulnerabilities using black-box scanning techniques!. The w3af core and it’s plugins are fully written in Python. The project has more than 130 plugins, which identify and exploit SQL injection, cross site scripting (XSS), remote file inclusion and more.</p>

<p><img class="center" src="/images/kali/webapp/w3af.png" title="&lsquo;w3af&rsquo; &lsquo;w3af&rsquo;" ></p>

<p><strong>wapiti</strong></p>

<p>It  performs &ldquo;black-box&rdquo; scans, i.e. it does not study the source code of the
application but will scans the webpages of the deployed webapp,  looking  for
scripts and forms where it can inject data.
Once  it gets this list, Wapiti acts like a fuzzer, injecting payloads to see
if a script is vulnerable.</p>

<p>``` plain
Wapiti-SVN &ndash; A web application vulnerability scanner</p>

<p> Usage: python wapiti.py <a href="http://server.com/base/url/">http://server.com/base/url/</a> [options]</p>

<p> Supported options are:
 -s <url>
 &mdash;start <url></p>

<pre><code>To specify an url to start with 
</code></pre>

<p> -x <url>
 &mdash;exclude <url></p>

<pre><code>To exclude an url from the scan (for example logout scripts) 
You can also use a wildcard (*) 
Example : -x http://server/base/?page=*&amp;module=test 
or -x http://server/base/admin/* to exclude a directory 
</code></pre>

<p> -p &lt;url_proxy>
 &mdash;proxy &lt;url_proxy></p>

<pre><code>To specify a proxy 
Example: -p http://proxy:port/ 
</code></pre>

<p> -c &lt;cookie_file>
 &mdash;cookie &lt;cookie_file></p>

<pre><code>To use a cookie 
</code></pre>

<p> -t <timeout>
 &mdash;timeout <timeout></p>

<pre><code>To fix the timeout (in seconds) 
</code></pre>

<p> -a &lt;login%password>
 &mdash;auth &lt;login%password></p>

<pre><code>Set credentials for HTTP authentication 
Doesn't work with Python 2.4 
</code></pre>

<p> -r &lt;parameter_name>
 &mdash;remove &lt;parameter_name></p>

<pre><code>Remove a parameter from URLs 
</code></pre>

<p> -n <limit>
 &mdash;nice <limit></p>

<pre><code>Define a limit of urls to read with the same pattern 
Use this option to prevent endless loops 
Must be greater than 0 
</code></pre>

<p>-m &lt;module_options>
&mdash;module &lt;module_options></p>

<pre><code>Set the modules and HTTP methods to use for attacks.
Example: -m "-all,xss:get,exec:post"
</code></pre>

<p> -u
 &mdash;underline</p>

<pre><code>Use color to highlight vulnerables parameters in output 
</code></pre>

<p> -v <level>
 &mdash;verbose <level></p>

<pre><code>Set the verbosity level 
0: quiet (default), 1: print each url, 2: print every attack 
</code></pre>

<p> -b <scope>
 &mdash;scope <scope></p>

<pre><code>Set the scope of the scan:
    + "page":  to analyse only the page passed in the URL
    + "folder":to analyse all the links to the pages which are in the same folder as the URL passed to Wapiti.
    + "domain":to analyse all the links to the pages which are in the same domain as the URL passed to Wapiti.
If no scope is set, Wapiti scans all the tree under the given URL.
</code></pre>

<p> -f &lt;type_file>
 &mdash;reportType &lt;type_file></p>

<pre><code>Set the type of the report 
xml: Report in XML format 
html: Report in HTML format 
txt: Report in plain text 
</code></pre>

<p> -o <output>
 &mdash;output &lt;output_file></p>

<pre><code>Set the name of the report file 
If the selected report type is 'html', this parameter must be a directory 
</code></pre>

<p> -i <file>
 &mdash;continue <file></p>

<pre><code>This parameter indicates Wapiti to continue with the scan from the specified file, this file should contain data from a previous scan.
The file is optional, if it is not specified, Wapiti takes the default file from the "scans" folder.
</code></pre>

<p> -k <file>
 &mdash;attack <file></p>

<pre><code>This parameter indicates Wapiti to perform attacks without scanning again the website and following the data of this file.
The file is optional, if it is not specified, Wapiti takes the default file from the "scans" folder.
</code></pre>

<p> -h
 &mdash;help</p>

<pre><code>To print this usage message
</code></pre>

<p>```</p>

<p><strong>webshag-gui</strong></p>

<p>Webshag is a multi-threaded, multi-platform web server audit tool. Written in Python, it gathers commonly useful functionalities for web server auditing like website crawling, URL scanning or file fuzzing.
Webshag can be used to scan a web server in HTTP or HTTPS, through a proxy and using HTTP authentication (Basic and Digest). In addition to that it proposes innovative IDS evasion functionalities aimed at making correlation between request more complicated (e.g. use a different random per request HTTP proxy server).</p>

<p><img class="center" src="/images/kali/webapp/webshag-gui.png" title="&lsquo;webshag-gui&rsquo; &lsquo;webshag-gui&rsquo;" ></p>

<p><strong>whatweb</strong></p>

<p>WhatWeb identifies websites. Its goal is to answer the question, “What is that Website?”. WhatWeb recognises web technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 900 plugins, each to recognise something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.</p>

<p>WhatWeb can be stealthy and fast, or thorough but slow. WhatWeb supports an aggression level to control the trade off between speed and reliability. When you visit a website in your browser, the transaction includes many hints of what web technologies are powering that website. Sometimes a single webpage visit contains enough information to identify a website but when it does not, WhatWeb can interrogate the website further. The default level of aggression, called ‘passive’, is the fastest and requires only one HTTP request of a website. This is suitable for scanning public websites. More aggressive modes were developed for in penetration tests.</p>

<p>Most WhatWeb plugins are thorough and recognise a range of cues from subtle to obvious. For example, most WordPress websites can be identified by the meta HTML tag, e.g. ‘‘, but a minority of WordPress websites remove this identifying tag but this does not thwart WhatWeb. The WordPress WhatWeb plugin has over 15 tests, which include checking the favicon, default installation files, login pages, and checking for “/wp-content/” within relative links.</p>

<p>Features:
* Over 900 plugins</p>

<ul>
<li><p>Control the trade off between speed/stealth and reliability</p></li>
<li><p>Plugins include example URLs</p></li>
<li><p>Performance tuning. Control how many websites to scan concurrently.</p></li>
<li><p>Multiple log formats: Brief (greppable), Verbose (human readable), XML, JSON, MagicTree, RubyObject, MongoDB.</p></li>
<li><p>Recursive web spidering</p></li>
<li><p>Proxy support including TOR</p></li>
<li><p>Custom HTTP headers</p></li>
<li><p>Basic HTTP authentication</p></li>
<li><p>Control over webpage redirection</p></li>
<li><p>Nmap-style IP ranges</p></li>
<li><p>Fuzzy matching</p></li>
<li><p>Result certainty awareness</p></li>
<li><p>Custom plugins defined on the command line</p></li>
</ul>


<p><code>`` plain
.$$$     $.                                   .$$$     $.         
$$$$     $$. .$$$  $$$ .$$$$$$.  .$$$$$$$$$$. $$$$     $$. .$$$$$$$. .$$$$$$.
$ $$     $$$ $ $$  $$$ $ $$$$$$. $$$$$ $$$$$$ $ $$     $$$ $ $$   $$ $ $$$$$$.
$</code>$     $$$ $ <code>$  $$$ $</code>$  $$$ $$&lsquo; $ <code>$</code>$$ $ <code>$     $$$ $</code>$      $ <code>$  $$$'
$. $     $$$ $. $$$$$$ $. $$$$$$</code>$  $. $  :&rsquo; $. $     $$$ $. $$$$   $. $$$$$.
$::$  .  $$$ $::$  $$$ $::$  $$$     $::$     $::$  .  $$$ $::$      $::$  $$$$
$;;$ $$$ $$$ $;;$  $$$ $;;$  $$$     $;;$     $;;$ $$$ $$$ $;;$      $;;$  $$$$
$$$$$$ $$$$$ $$$$  $$$ $$$$  $$$     $$$$     $$$$$$ $$$$$ $$$$$$$$$ $$$$$$$$$'</p>

<p>WhatWeb &ndash; Next generation web scanner.
Version 0.4.8-dev by Andrew Horton aka urbanadventurer
Homepage: <a href="http://www.morningstarsecurity.com/research/whatweb">http://www.morningstarsecurity.com/research/whatweb</a></p>

<p>Usage: whatweb [options] <URLs></p>

<p>TARGET SELECTION:
  <URLs>        Enter URLs, filenames or nmap-format IP ranges.</p>

<pre><code>        Use /dev/stdin to pipe HTML directly
</code></pre>

<p>  &mdash;input-file=FILE, -i Identify URLs found in FILE, eg. -i /dev/stdin</p>

<p>TARGET MODIFICATION:
  &mdash;url-prefix      Add a prefix to target URLs
  &mdash;url-suffix      Add a suffix to target URLs
  &mdash;url-pattern     Insert the targets into a URL. Requires &mdash;input-file,</p>

<pre><code>        eg. www.example.com/%insert%/robots.txt 
</code></pre>

<p>AGGRESSION:
  The aggression level controls the trade-off between speed/stealth and
  reliability.
  &mdash;aggression, -a=LEVEL Set the aggression level. Default: 1
  Aggression levels are:
  1. Stealthy   Makes one HTTP request per target. Also follows redirects.
  2. Unused
  3. Aggressive Can make a handful of HTTP requests per target. This triggers</p>

<pre><code>    aggressive plugins for targets only when those plugins are
    identified with a level 1 request first.
</code></pre>

<ol>
<li> Heavy  Makes a lot of HTTP requests per target. Aggressive tests from
    all plugins are used for all URLs.</li>
</ol>


<p>HTTP OPTIONS:
  &mdash;user-agent, -U=AGENT Identify as AGENT instead of WhatWeb/0.4.8-dev.
  &mdash;header, -H      Add an HTTP header. eg &ldquo;Foo:Bar&rdquo;. Specifying a default</p>

<pre><code>        header will replace it. Specifying an empty value, eg.
        "User-Agent:" will remove the header.
</code></pre>

<p>  &mdash;follow-redirect=WHEN Control when to follow redirects. WHEN may be `never',</p>

<pre><code>        `http-only', `meta-only', `same-site', `same-domain'
        or `always'. Default: always
</code></pre>

<p>  &mdash;max-redirects=NUM   Maximum number of contiguous redirects. Default: 10</p>

<p>AUTHENTICATION:
  &mdash;user, -u=&lt;user:password> HTTP basic authentication
  Add session cookies with &mdash;header, e.g. &mdash;header &ldquo;Cookie: SESSID=1a2b3c;&rdquo;</p>

<p>PROXY:
  &mdash;proxy       &lt;hostname[:port]> Set proxy hostname and port</p>

<pre><code>        Default: 8080
</code></pre>

<p>  &mdash;proxy-user      &lt;username:password> Set proxy user and password</p>

<p>PLUGINS:
  &mdash;list-plugins, -l    List all plugins
  &mdash;plugins, -p=LIST    Select plugins. LIST is a comma delimited set of</p>

<pre><code>        selected plugins. Default is all.
        Each element can be a directory, file or plugin name and
        can optionally have a modifier, eg. + or -
        Examples: +/tmp/moo.rb,+/tmp/foo.rb
        title,md5,+./plugins-disabled/
        ./plugins-disabled,-md5
        -p + is a shortcut for -p +plugins-disabled
</code></pre>

<p>  &mdash;info-plugins, -I=PLUGINS    Display detailed information for plugins.</p>

<pre><code>        Optionally search with keywords in a comma delimited
        list.
</code></pre>

<p>  &mdash;grep, -g=STRING Search for STRING in HTTP responses. Reports with a</p>

<pre><code>        plugin named Grep
</code></pre>

<p>  &mdash;custom-plugin=DEFINITION    Define a custom plugin named Custom-Plugin,</p>

<pre><code>        Examples: ":text=&gt;'powered by abc'"
        ":version=&gt;/powered[ ]?by ab[0-9]/"
        ":ghdb=&gt;'intitle:abc \"powered by abc\"'"
        ":md5=&gt;'8666257030b94d3bdb46e05945f60b42'"
        "{:text=&gt;'powered by abc'},{:regexp=&gt;/abc [ ]?1/i}"
</code></pre>

<p>  &mdash;dorks=PLUGIN    List google dorks for the selected plugin
  &mdash;example-urls, -e=PLUGIN Update the target list with example URLs from</p>

<pre><code>        the selected plugins.
</code></pre>

<p>OUTPUT:
  &mdash;verbose, -v     Verbose output includes plugin descriptions. Use twice</p>

<pre><code>        for debugging.
</code></pre>

<p>  &mdash;colour,&mdash;color=WHEN control whether colour is used. WHEN may be `never',</p>

<pre><code>        `always', or `auto'
</code></pre>

<p>  &mdash;quiet, -q       Do not display brief logging to STDOUT
  &mdash;no-errors       Suppress error messages</p>

<p>LOGGING:
  &mdash;log-brief=FILE  Log brief, one-line output
  &mdash;log-verbose=FILE    Log verbose output
  &mdash;log-xml=FILE    Log XML format
  &mdash;log-json=FILE   Log JSON format
  &mdash;log-json-verbose=FILE Log JSON Verbose format
  &mdash;log-magictree=FILE  Log MagicTree XML format
  &mdash;log-object=FILE Log Ruby object inspection format
  &mdash;log-mongo-database  Name of the MongoDB database
  &mdash;log-mongo-collection Name of the MongoDB collection. Default: whatweb
  &mdash;log-mongo-host  MongoDB hostname or IP address. Default: 0.0.0.0
  &mdash;log-mongo-username  MongoDB username. Default: nil
  &mdash;log-mongo-password  MongoDB password. Default: nil
  &mdash;log-errors=FILE Log errors</p>

<p>PERFORMANCE &amp; STABILITY:
  &mdash;max-threads, -t Number of simultaneous threads. Default: 25.
  &mdash;open-timeout    Time in seconds. Default: 15
  &mdash;read-timeout    Time in seconds. Default: 30
  &mdash;wait=SECONDS    Wait SECONDS between connections</p>

<pre><code>        This is useful when using a single thread.
</code></pre>

<p>HELP &amp; MISCELLANEOUS:
  &mdash;help, -h        This help
  &mdash;debug       Raise errors in plugins
  &mdash;version     Display version information. (WhatWeb 0.4.8-dev)</p>

<p>EXAMPLE USAGE:
* Scan example.com
  whatweb example.com
* Scan reddit.com slashdot.org with verbose plugin descriptions
  whatweb -v reddit.com slashdot.org
* An aggressive scan of mashable.com detects the exact version of Wordpress
  whatweb -a 3 mashable.com
* Scan the local network quickly with 255 threads and suppress errors
  whatweb &mdash;no-errors -t 255 192.168.0.0/24</p>

<h2>OPTIONAL DEPENDENCIES</h2>

<p>To enable MongoDB logging install the mongo gem.
```</p>

<p>This was the Web Applications section. Don&rsquo;t forget that you can check tools usage examples and descriptions on <a href="http://tools.kali.org/tools-listing">http://tools.kali.org/tools-listing</a></p>

<blockquote><p>Q:    How did you get into artificial intelligence?</p>

<p>A:    Seemed logical &mdash; I didn&rsquo;t have any real intelligence.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Vulnerability Analysis]]></title>
    <link href="http://chousensha.github.io/blog/2014/09/17/kali-tools-catalog-vulnerability-analysis/"/>
    <updated>2014-09-17T21:36:25+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/09/17/kali-tools-catalog-vulnerability-analysis</id>
    <content type="html"><![CDATA[<p>Today I am going to continue with cataloguing the security tools that are installed on Kali. Next is the Vulnerability Analysis section.</p>

<!-- more -->


<h3>Cisco Tools</h3>

<p><strong>cisco-global-exploiter</strong></p>

<p>Cisco Global Exploiter (CGE), is an advanced, simple and fast security testing tool/ exploit engine, that is able to exploit 14 vulnerabilities in disparate Cisco switches and routers.</p>

<p><img class="center" src="/images/kali/vuln/cge.png" title="&lsquo;cge&rsquo; &lsquo;cge&rsquo;" ></p>

<p><strong>cisco-ocs</strong></p>

<p>Compact mass scanner for Cisco routers with default telnet/enable passwords.</p>

<p><img class="center" src="/images/kali/vuln/cisco-ocs.png" title="&lsquo;cisco-ocs&rsquo; &lsquo;cisco-ocs&rsquo;" ></p>

<p><strong>yersinia</strong></p>

<p>yersinia is a framework for performing layer 2 attacks. The following protocols have
been implemented in Yersinia current version: Spanning  Tree  Protocol  (STP),  VLAN
Trunking Protocol (VTP), Hot Standby Router Protocol (HSRP), Dynamic Trunking Protocol (DTP), IEEE 802.1Q, IEEE 802.1X, Cisco Discovery Protocol  (CDP),  Dynamic  Host
Configuration  Protocol  (DHCP),  Inter-Switch Link Protocol (ISL) and MultiProtocol Label Switching (MPLS).</p>

<p>Some of the attacks implemented will cause a DoS in a network, other  will  help  to
perform  any  other more advanced attack, or both. In addition, some of them will be
first released to the public since there isn&rsquo;t any public implementation.</p>

<p><img class="center" src="/images/kali/vuln/yersinia.png" title="&lsquo;yersinia&rsquo; &lsquo;yersinia&rsquo;" ></p>

<h3>Database Assessment</h3>

<p><strong>bbqsql</strong></p>

<p>BBQSQL is a blind SQL injection framework written in Python.</p>

<p><img class="center" src="/images/kali/vuln/bbqsql.png" title="&lsquo;bbqsql&rsquo; &lsquo;bbqsql&rsquo;" ></p>

<p><strong>dbpwaudit</strong></p>

<p>DBPwAudit is a Java tool that allows you to perform online audits of password quality for several database engines.</p>

<p><img class="center" src="/images/kali/vuln/dbpwaudit.png" title="&lsquo;dbpwaudit&rsquo; &lsquo;dbpwaudit&rsquo;" ></p>

<p><strong>hexorbase</strong></p>

<p>HexorBase is a database application designed for administering and auditing multiple database servers simultaneously from a centralized location, it is capable of performing SQL queries and bruteforce attacks against common database servers (MySQL, SQLite, Microsoft SQL Server, Oracle, PostgreSQL ).HexorBase allows packet routing through proxies or even metasploit pivoting antics to communicate with remotely inaccessible servers which are hidden within local subnets.</p>

<p><img class="center" src="/images/kali/vuln/hexorbase.png" title="&lsquo;hexorbase&rsquo; &lsquo;hexorbase&rsquo;" ></p>

<p><strong>jsql</strong></p>

<p>jSQL Injection is a lightweight application used to find database information from a distant server.</p>

<p><img class="center" src="/images/kali/vuln/jsql.png" title="&lsquo;jsql&rsquo; &lsquo;jsql&rsquo;" ></p>

<p><strong>mdb-export</strong></p>

<p>Export data in an MDB database table to CSV format.</p>

<p><img class="center" src="/images/kali/vuln/mdb-export.png" title="&lsquo;mdb-export&rsquo; &lsquo;mdb-export&rsquo;" ></p>

<p><strong>mdb-hexdump</strong></p>

<p>makes a hex dump of a binary file</p>

<p><strong>mdb-parsecsv</strong></p>

<p>mdb-parsecsv  takes  a CSV file representing a database table, and converts it into a C array.</p>

<p><strong>mdb-sql</strong></p>

<p>mdb-sql  allows  querying of an MDB database using a limited SQL subset language.</p>

<p><strong>mdb-tables</strong></p>

<p>It produces a list of tables contained within an MDB database in a format suitable for use in shell scripts.</p>

<p><strong>oscanner</strong></p>

<p>Oscanner is an Oracle assessment framework developed in Java. It has a plugin-based architecture and comes with a couple of plugins that currently do:</p>

<p>– Sid Enumeration
– Passwords tests (common &amp; dictionary)
– Enumerate Oracle version
– Enumerate account roles
– Enumerate account privileges
– Enumerate account hashes
– Enumerate audit information
– Enumerate password policies
– Enumerate database links</p>

<p>The results are given in a graphical java tree.</p>

<p><strong>sidguesser</strong></p>

<p>Guesses sids/instances against an Oracle database according to a predefined dictionary file.</p>

<p><strong>sqldict</strong></p>

<p>SQLdict is a basic single ip brute-force MS SQL Server password utility that can carry out a dictionary attack against a named SQL account.</p>

<p><img class="center" src="/images/kali/vuln/sqldict.png" title="&lsquo;sqldict&rsquo; &lsquo;sqldict&rsquo;" ></p>

<p><strong>sqlmap</strong></p>

<p>sqlmap  is  an automatic SQL injection tool entirely developed in Python.  Its goal is to detect and take advantage of SQL injection vulnerabilities on web applications. Once it
detects one or more SQL injections on the target host, the user can choose among a variety of options to perform an extensive back-end database  management  system  fingerprint,
retrieve  DBMS  session  user  and  database, enumerate users, password hashes, privileges, databases, dump entire or user&rsquo;s specific DBMS tables/columns, run his own SQL SELECT
statement, read specific files on the file system and much more.</p>

<p>``` plain
Usage: python sqlmap [options]</p>

<p>Options:
  -h, &mdash;help            Show basic help message and exit
  -hh                   Show advanced help message and exit
  &mdash;version             Show program&rsquo;s version number and exit
  -v VERBOSE            Verbosity level: 0-6 (default 1)</p>

<p>  Target:</p>

<pre><code>At least one of these options has to be provided to define the
target(s)

-u URL, --url=URL   Target URL (e.g. "http://www.site.com/vuln.php?id=1")
-g GOOGLEDORK       Process Google dork results as target URLs
</code></pre>

<p>  Request:</p>

<pre><code>These options can be used to specify how to connect to the target URL

--data=DATA         Data string to be sent through POST
--cookie=COOKIE     HTTP Cookie header value
--random-agent      Use randomly selected HTTP User-Agent header value
--proxy=PROXY       Use a proxy to connect to the target URL
--tor               Use Tor anonymity network
--check-tor         Check to see if Tor is used properly
</code></pre>

<p>  Injection:</p>

<pre><code>These options can be used to specify which parameters to test for,
provide custom injection payloads and optional tampering scripts

-p TESTPARAMETER    Testable parameter(s)
--dbms=DBMS         Force back-end DBMS to this value
</code></pre>

<p>  Detection:</p>

<pre><code>These options can be used to customize the detection phase

--level=LEVEL       Level of tests to perform (1-5, default 1)
--risk=RISK         Risk of tests to perform (0-3, default 1)
</code></pre>

<p>  Techniques:</p>

<pre><code>These options can be used to tweak testing of specific SQL injection
techniques

--technique=TECH    SQL injection techniques to use (default "BEUSTQ")
</code></pre>

<p>  Enumeration:</p>

<pre><code>These options can be used to enumerate the back-end database
management system information, structure and data contained in the
tables. Moreover you can run your own SQL statements

-a, --all           Retrieve everything
-b, --banner        Retrieve DBMS banner
--current-user      Retrieve DBMS current user
--current-db        Retrieve DBMS current database
--passwords         Enumerate DBMS users password hashes
--tables            Enumerate DBMS database tables
--columns           Enumerate DBMS database table columns
--schema            Enumerate DBMS schema
--dump              Dump DBMS database table entries
--dump-all          Dump all DBMS databases tables entries
-D DB               DBMS database to enumerate
-T TBL              DBMS database table(s) to enumerate
-C COL              DBMS database table column(s) to enumerate
</code></pre>

<p>  Operating system access:</p>

<pre><code>These options can be used to access the back-end database management
system underlying operating system

--os-shell          Prompt for an interactive operating system shell
--os-pwn            Prompt for an OOB shell, Meterpreter or VNC
</code></pre>

<p>  General:</p>

<pre><code>These options can be used to set some general working parameters

--batch             Never ask for user input, use the default behaviour
--flush-session     Flush session files for current target
</code></pre>

<p>  Miscellaneous:</p>

<pre><code>--sqlmap-shell      Prompt for an interactive sqlmap shell
--wizard            Simple wizard interface for beginner users
</code></pre>

<p>[!] to see full list of options run with &lsquo;-hh&rsquo;
```</p>

<p><strong>sqlninja</strong></p>

<p>Sqlninja is a tool targeted to exploit SQL Injection vulnerabilities on a web application that uses Microsoft SQL Server as its back-end.</p>

<p>Features:</p>

<p>Fingerprint of the remote SQL Server (version, user performing the queries, user privileges, xp_cmdshell availability, DB authentication mode)</p>

<p>Data extraction, time-based or via a DNS tunnel</p>

<p>Integration with Metasploit3, to obtain a graphical access to the remote DB server through a VNC server injection or just to upload Meterpreter</p>

<p>Upload of executables using only normal HTTP requests (no FTP/TFTP needed), via vbscript or debug.exe</p>

<p>Direct and reverse bindshell, both TCP and UDP</p>

<p>DNS-tunneled pseudo-shell, when no TCP/UDP ports are available for a direct/reverse shell, but the DB server can resolve external hostnames</p>

<p>ICMP-tunneled shell, when no TCP/UDP ports are available for a direct/reverse shell but the DB can ping your box</p>

<p>Bruteforce of &lsquo;sa&rsquo; password (in 2 flavors: dictionary-based and incremental)</p>

<p>Privilege escalation to sysadmin group if &lsquo;sa&rsquo; password has been found</p>

<p>Creation of a custom xp_cmdshell if the original one has been removed</p>

<p>TCP/UDP portscan from the target SQL Server to the attacking machine, in order to find a port that is allowed by the firewall of the target network and use it for a reverse shell</p>

<p>Evasion techniques to confuse a few IDS/IPS/WAF</p>

<p>Integration with churrasco.exe, to escalate privileges to SYSTEM on w2k3 via token kidnapping</p>

<p>Support for CVE-2010-0232, to escalate the privileges of sqlservr.exe to SYSTEM</p>

<p><img class="center" src="/images/kali/vuln/sqlninja.png" title="&lsquo;sqlninja&rsquo; &lsquo;sqlninja&rsquo;" ></p>

<p><strong>sqlsus</strong></p>

<p>sqlsus is an open source MySQL injection and takeover tool, written in perl.</p>

<p><strong>tnscmd10g</strong></p>

<p>Tnscmd can be used to communicate directly with Oracle&rsquo;s TNS listener, (no client is needed).  Unlike the Oracle
listener control utility LSNRCTL.exe, TNSCmd.pl does not need any connection strings and a direct
bi-directional conversation can be immediately established.</p>

<p><img class="center" src="/images/kali/vuln/tnscmd10g.png" title="&lsquo;tnscmd10g&rsquo; &lsquo;tnscmd10g&rsquo;" ></p>

<h3>Fuzzing Tools</h3>

<p><strong>bed</strong></p>

<p>Bruteforce Exploit Detector is a plain-text protocol fuzzer that checks software for common vulnerabilities like buffer overflows, format string bugs, integer overflows, etc.</p>

<p><img class="center" src="/images/kali/vuln/bed.png" title="&lsquo;bed&rsquo; &lsquo;bed&rsquo;" ></p>

<p><strong>fuzz_ip6</strong></p>

<p>The name is self explanatory.</p>

<p><img class="center" src="/images/kali/vuln/fuzz_ip6.png" title="&lsquo;fuzz_ip6&rsquo; &lsquo;fuzz_ip6&rsquo;" ></p>

<p><strong>ohrwurm</strong></p>

<p>RTP fuzzer</p>

<p><img class="center" src="/images/kali/vuln/ohrwurm.png" title="&lsquo;ohrwurm&rsquo; &lsquo;ohrwurm&rsquo;" ></p>

<p><strong>powerfuzzer</strong></p>

<p>highly automated and fully customizable web fuzzer (HTTP protocol based application fuzzer)</p>

<p><img class="center" src="/images/kali/vuln/powerfuzzer.png" title="&lsquo;powerfuzzer&rsquo; &lsquo;powerfuzzer&rsquo;" ></p>

<p><strong>sfuzz</strong></p>

<p>Simple Fuzz(sfuzz) is a simple fuzzer. It has two network modes of operation, an output mode for developing command line fuzzing scripts, as well as taking fuzzing strings from literals and building strings from sequences.</p>

<p><img class="center" src="/images/kali/vuln/sfuzz.png" title="&lsquo;sfuzz&rsquo; &lsquo;sfuzz&rsquo;" ></p>

<p><strong>siparmyknife</strong></p>

<p>SIP Army Knife is a fuzzer that searches for cross site scripting, SQL injection, log injection, format strings, buffer overflows, and more.</p>

<p><strong>spike generic_chunked &amp; generic_listen_tcp &amp; generic_send_tcp &amp; generic_send_udp</strong></p>

<p>SPIKE is a Fuzzer Creation Kit. You can use it for fuzzing or leverage its API to write your own fuzzers.</p>

<h3>Misc Scanners</h3>

<p><strong>golismero</strong></p>

<p>GoLismero is an open source framework for security testing. It&rsquo;s currently geared towards web security, but it can easily be expanded to other kinds of scans.</p>

<p>``` plain
/&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;\
| GoLismero 2.0.0b3 &ndash; The Web Knife            |
| Contact: golismero.project&lt;@>gmail.com       |
|                                              |
| Daniel Garcia Garcia a.k.a cr0hn (@ggdaniel) |
| Mario Vilas (@Mario_Vilas)                   |
-&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;/</p>

<p>usage: golismero.py COMMAND [TARGETS&hellip;] [&mdash;options]</p>

<p>  SCAN:</p>

<pre><code>Perform a vulnerability scan on the given targets. Optionally import
results from other tools and write a report. The arguments that follow may
be domain names, IP addresses or web pages.
</code></pre>

<p>  PROFILES:</p>

<pre><code>Show a list of available config profiles. This command takes no arguments.
</code></pre>

<p>  PLUGINS:</p>

<pre><code>Show a list of available plugins. This command takes no arguments.
</code></pre>

<p>  INFO:</p>

<pre><code>Show detailed information on a given plugin. The arguments that follow are
the plugin IDs. You can use glob-style wildcards.
</code></pre>

<p>  REPORT:</p>

<pre><code>Write a report from an earlier scan. This command takes no arguments.
To specify output files use the -o switch.
</code></pre>

<p>  IMPORT:</p>

<pre><code>Import results from other tools and optionally write a report, but don't
scan the targets. This command takes no arguments. To specify input files
use the -i switch.
</code></pre>

<p>  DUMP:</p>

<pre><code>Dump the database from an earlier scan in SQL format. This command takes no
arguments. To specify output files use the -o switch.
</code></pre>

<p>  UPDATE:</p>

<pre><code>Update GoLismero to the latest version. Requires Git to be installed and
available in the PATH. This command takes no arguments.
</code></pre>

<p>examples:</p>

<p>  scan a website and show the results on screen:</p>

<pre><code>golismero.py scan http://www.example.com
</code></pre>

<p>  grab Nmap results, scan all hosts found and write an HTML report:</p>

<pre><code>golismero.py scan -i nmap_output.xml -o report.html
</code></pre>

<p>  grab results from OpenVAS and show them on screen, but don&rsquo;t scan anything:</p>

<pre><code>golismero.py import -i openvas_output.xml
</code></pre>

<p>  show a list of all available configuration profiles:</p>

<pre><code>golismero.py profiles
</code></pre>

<p>  show a list of all available plugins:</p>

<pre><code>golismero.py plugins
</code></pre>

<p>  show information on all bruteforcer plugins:</p>

<pre><code>golismero.py info brute_*
</code></pre>

<p>  dump the database from a previous scan:</p>

<pre><code>golismero.py dump -db example.db -o dump.sql
</code></pre>

<p>```</p>

<p><strong>lynis</strong></p>

<p>Run a system and security audit on the system</p>

<p>The following system areas may be checked:</p>

<ul>
<li><p>Boot loader files</p></li>
<li><p>Configuration files</p></li>
<li><p>Common files by software packages</p></li>
<li><p>Directories and files related to logging and auditing</p></li>
</ul>


<p><img class="center" src="/images/kali/vuln/lynis.png" title="&lsquo;lynis&rsquo; &lsquo;lynis&rsquo;" ></p>

<p><strong>nikto</strong></p>

<p>Examine a web server to find potential problems and security vulnerabilities, including:</p>

<p>·   Server and software misconfigurations</p>

<p>·   Default files and programs</p>

<p>·   Insecure files and programs</p>

<p>·   Outdated servers and programs</p>

<p>Nikto is built on LibWhisker (by RFP) and can run on any platform which has a Perl
environment. It supports SSL, proxies, host authentication, IDS evasion and more. It
can be updated automatically from the command-line, and supports the optional
submission of updated version data back to the maintainers.</p>

<p><img class="center" src="/images/kali/vuln/nikto.png" title="&lsquo;nikto&rsquo; &lsquo;nikto&rsquo;" ></p>

<p><strong>unix-privesc-check</strong></p>

<p>This script checks file permissions and other settings that could allow local users to escalate privileges.</p>

<p><img class="center" src="/images/kali/vuln/unix-privesc-check.png" title="&lsquo;unix-privesc-check&rsquo; &lsquo;unix-privesc-check&rsquo;" ></p>

<h3>Open Source Assessment</h3>

<p>Covered in other categories.</p>

<h3>OpenVAS</h3>

<p>OpenVAS is a framework of several services and tools offering a comprehensive and powerful vulnerability scanning and vulnerability management solution.</p>

<p><strong>openvas-check-setup</strong></p>

<p>analyzes the state of your OpenVAS installation and proposes fixes should it detect any errors or misconfigurations. It will also check if all required OpenVAS services are running and listening on the correct ports.</p>

<p><strong>openvas-gsd</strong></p>

<p>The Greenbone Security Desktop (GSD) is a Qt-based desktop client for the OpenVAS Management Protocol</p>

<p><img class="center" src="/images/kali/vuln/openvas.png" title="&lsquo;openvas&rsquo; &lsquo;openvas&rsquo;" ></p>

<p>Let&rsquo;s see what fortune has in store for today:</p>

<blockquote><p>Don&rsquo;t look now, but there is a multi-legged creature on your shoulder.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Information Gathering]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/17/kali-tools-catalog-information-gathering/"/>
    <updated>2014-07-17T21:25:37+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/17/kali-tools-catalog-information-gathering</id>
    <content type="html"><![CDATA[<p>Kali is an awesome distribution for pentesting. But with so many choices, one may find it daunting to find a specific tool for a task without having used it before. Or maybe you&rsquo;re wondering about some tools but don&rsquo;t feel like testing every single one. So I decided to briefly go over the tools provided by Kali and provide a quick description. Where available, I will use the ones presented on their respective websites / manpages etc.</p>

<p>So, let&rsquo;s begin!</p>

<!-- more -->


<h3>DNS Analysis</h3>

<p><strong>dnsdict6</strong></p>

<p>Enumerates a domain for DNS entries, it uses a dictionary file if supplied or a built-in list otherwise. This tool is based on dnsmap by gnucitizen.org.</p>

<p><img class="center" src="/images/kali/recon/dnsdict6.png" title="&lsquo;dnsdict6&rsquo; &lsquo;dnsdict6&rsquo;" ></p>

<p><strong>dnsenum</strong></p>

<p>Multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.</p>

<p><img class="center" src="/images/kali/recon/dnsenum.png" title="&lsquo;dnsenum&rsquo; &lsquo;dnsenum&rsquo;" ></p>

<p><strong>dnsmap</strong></p>

<p>dnsmap is mainly meant to be used by pentesters during the informatio ngathering/enumeration phase of infrastructure security assessments. During the enumeration stage, the security consultant would typically discover the target company&rsquo;s IP netblocks, domain names, phone numbers, etc &hellip;</p>

<p>Subdomain brute-forcing is another technique that should be used in the enumeration stage, as it&rsquo;s especially useful when other domain enumeration techniques such as zone transfers don&rsquo;t work (I rarely see zone transfers being <em>publicly</em> allowed these days by the way).</p>

<p><img class="center" src="/images/kali/recon/dnsmap.png" title="&lsquo;dnsmap&rsquo; &lsquo;dnsmap&rsquo;" ></p>

<p><strong>dnsrecon</strong></p>

<p>DNS Enumueration and Scanning Tool</p>

<p>The script will perform the following:</p>

<p>Standard  Record  Enumeration for a given domain (A, NS, SOA and MX).</p>

<p>Top Leven Domain Expansion for a given domain.</p>

<p>Zone Transfer against all  NS records of a given domain.</p>

<p>Reverse Lookup against a given IP Range given a start and end IP.</p>

<p>SRV Record enumeration</p>

<p>Brute force hostnames and subdomains of a given target domain  using  a wordlist.</p>

<p>``` plain
Version: 0.8.8
Usage: dnsrecon.py <options></p>

<p>Options:
   -h, &mdash;help                  Show this help message and exit
   -d, &mdash;domain      <domain>  Domain to Target for enumeration.
   -r, &mdash;range       <range>   IP Range for reverse look-up brute force in formats (first-last)</p>

<pre><code>                           or in (range/bitmask).
</code></pre>

<p>   -n, &mdash;name_server <name>    Domain server to use, if none is given the SOA of the</p>

<pre><code>                           target will be used
</code></pre>

<p>   -D, &mdash;dictionary  <file>    Dictionary file of sub-domain and hostnames to use for</p>

<pre><code>                           brute force.
</code></pre>

<p>   -f                          Filter out of Brute Force Domain lookup records that resolve to</p>

<pre><code>                           the wildcard defined IP Address when saving records.
</code></pre>

<p>   -t, &mdash;type        <types>   Specify the type of enumeration to perform:</p>

<pre><code>                           std      To Enumerate general record types, enumerates.
                                    SOA, NS, A, AAAA, MX and SRV if AXRF on the
                                    NS Servers fail.

                           rvl      To Reverse Look Up a given CIDR IP range.

                           brt      To Brute force Domains and Hosts using a given
                                    dictionary.

                           srv      To Enumerate common SRV Records for a given 

                                    domain.

                           axfr     Test all NS Servers in a domain for misconfigured
                                    zone transfers.

                           goo      Perform Google search for sub-domains and hosts.

                           snoop    To Perform a Cache Snooping against all NS 
                                    servers for a given domain, testing all with
                                    file containing the domains, file given with -D
                                    option.

                           tld      Will remove the TLD of given domain and test against
                                    all TLD's registered in IANA

                           zonewalk Will perform a DNSSEC Zone Walk using NSEC Records.
</code></pre>

<p>   -a                          Perform AXFR with the standard enumeration.
   -s                          Perform Reverse Look-up of ipv4 ranges in the SPF Record of the</p>

<pre><code>                           targeted domain with the standard enumeration.
</code></pre>

<p>   -g                          Perform Google enumeration with the standard enumeration.
   -w                          Do deep whois record analysis and reverse look-up of IP</p>

<pre><code>                           ranges found thru whois when doing standard query.
</code></pre>

<p>   -z                          Performs a DNSSEC Zone Walk with the standard enumeration.
   &mdash;threads          <number> Number of threads to use in Range Reverse Look-up, Forward</p>

<pre><code>                           Look-up Brute force and SRV Record Enumeration
</code></pre>

<p>   &mdash;lifetime         <number> Time to wait for a server to response to a query.
   &mdash;db               <file>   SQLite 3 file to save found records.
   &mdash;xml              <file>   XML File to save found records.
   &mdash;iw                        Continua bruteforcing a domain even if a wildcard record resolution is</p>

<pre><code>                           discovered.
</code></pre>

<p>   -c, &mdash;csv          <file>   Comma separated value file.
   -j, &mdash;json         <file>   JSON file.
   -v                          Show attempts in the bruteforce modes.
```</p>

<p><strong>dnsrevenum6</strong></p>

<p>Performs a fast reverse DNS enumeration and is able to cope with slow servers.</p>

<p><img class="center" src="/images/kali/recon/dnsrevenum6.png" title="&lsquo;dnsrevenum6&rsquo; &lsquo;dnsrevenum6&rsquo;" ></p>

<p><strong>dnstracer</strong></p>

<p>Determines where a given Domain Name Server (DNS) gets its information from, and follows the chain of DNS servers back to the servers which know the data.</p>

<p><img class="center" src="/images/kali/recon/dnstracer.png" title="&lsquo;dnstracer&rsquo; &lsquo;dnstracer&rsquo;" ></p>

<p><strong>dnswalk</strong></p>

<p>DNS  debugger.  It performs zone transfers of specified domains, and checks the database in numerous ways for internal  consistency,  as well as for correctness according to accepted practices with the Domain Name System.</p>

<p><strong>fierce</strong></p>

<p>Fierce is a semi-lightweight scanner that helps locate non-contiguous
IP space and hostnames against specified domains.  It&rsquo;s really meant
as a pre-cursor to nmap, unicornscan, nessus, nikto, etc, since all
of those require that you already know what IP space you are looking
for.  This does not perform exploitation and does not scan the whole
internet indiscriminately.  It is meant specifically to locate likely
targets both inside and outside a corporate network.  Because it uses
DNS primarily you will often find mis-configured networks that leak
internal address space. That&rsquo;s especially useful in targeted malware.</p>

<p><strong>urlcrazy</strong></p>

<p>Generate and test domain typos and variations to detect and perform typo squatting, URL hijacking,
phishing, and corporate espionage.</p>

<p><img class="center" src="/images/kali/recon/urlcrazy.png" title="&lsquo;urlcrazy&rsquo; &lsquo;urlcrazy&rsquo;" ></p>

<h3>IDS/IPS Identification</h3>

<p><strong>fragroute</strong></p>

<p>intercept, modify, and rewrite egress traffic</p>

<p><img class="center" src="/images/kali/recon/fragroute.png" title="&lsquo;fragroute&rsquo; &lsquo;fragroute&rsquo;" ></p>

<p><strong>fragrouter</strong></p>

<p>network intrusion detection evasion toolkit</p>

<p><img class="center" src="/images/kali/recon/fragrouter.png" title="&lsquo;fragrouter&rsquo; &lsquo;fragrouter&rsquo;" ></p>

<p><strong>ftest</strong></p>

<p>FTester is a tool designed for testing firewalls filtering policies and Intrusion Detection System (IDS) capabilities.</p>

<p><img class="center" src="/images/kali/recon/ftest.png" title="&lsquo;ftest&rsquo; &lsquo;ftest&rsquo;" ></p>

<p><strong>lbd</strong></p>

<p>load balancing detector &ndash; Checks if a given domain uses load-balancing</p>

<p><strong>wafw00f</strong></p>

<p>Web Application Firewall Detection Tool</p>

<p><img class="center" src="/images/kali/recon/wafw00f.png" title="&lsquo;wafw00f&rsquo; &lsquo;wafw00f&rsquo;" ></p>

<h3>Live Host Identification</h3>

<p><strong>alive6</strong></p>

<p>an effective alive scanner, which will detect all systems listening to this address</p>

<p><img class="center" src="/images/kali/recon/alive6.png" title="&lsquo;alive6&rsquo; &lsquo;alive6&rsquo;" ></p>

<p><strong>arping</strong></p>

<p>sends ARP and/or ICMP requests to the specified host and  displays  the  replies.</p>

<p>``` plain
ARPing 2.11, by Thomas Habets <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#116;&#x68;&#x6f;&#109;&#97;&#115;&#64;&#x68;&#x61;&#98;&#101;&#116;&#x73;&#46;&#x73;&#101;">&#116;&#104;&#111;&#x6d;&#x61;&#115;&#x40;&#104;&#97;&#98;&#101;&#x74;&#115;&#46;&#115;&#x65;</a>
usage: arping [ -0aAbdDeFpqrRuv ] [ -w <us> ] [ -S <host/ip> ]</p>

<pre><code>          [ -T &lt;host/ip ] [ -s &lt;MAC&gt; ] [ -t &lt;MAC&gt; ] [ -c &lt;count&gt; ]
          [ -i &lt;interface&gt; ] &lt;host/ip/MAC | -B&gt;
</code></pre>

<p>Options:</p>

<pre><code>-0     Use this option to ping with source IP address 0.0.0.0. Use this
       when you haven't configured your interface yet.  Note that  this
       may  get  the  MAC-ping  unanswered.   This  is  an alias for -S
       0.0.0.0.
-a     Audiable ping.
-A     Only count addresses matching  requested  address  (This  *WILL*
       break  most things you do. Only useful if you are arpinging many
       hosts at once. See arping-scan-net.sh for an example).
-b     Like -0 but source broadcast source  address  (255.255.255.255).
       Note that this may get the arping unanswered since it's not nor-
       mal behavior for a host.
-B     Use instead of host if you want to address 255.255.255.255.
-c count
       Only send count requests.
-d     Find duplicate replies. Exit with 1 if there are answers from
       two different MAC addresses.
-D     Display answers as exclamation points and missing packets as dots.
-e     Like -a but beep when there is no reply.
-F     Don't try to be smart about the interface name.  (even  if  this
       switch is not given, -i overrides smartness)
-h     Displays a help message and exits.
-i interface
       Use the specified interface.
-q     Does not display messages, except error messages.
-r     Raw output: only the MAC/IP address is displayed for each reply.
-R     Raw output: Like -r but shows "the other one", can  be  combined
       with -r.
-s MAC Set source MAC address. You may need to use -p with this.
-S IP  Like  -b and -0 but with set source address.  Note that this may
       get the arping unanswered if the target does not have routing to
       the  IP.  If you don't own the IP you are using, you may need to
       turn on promiscious mode on the interface (with -p).  With  this
       switch  you can find out what IP-address a host has without tak-
       ing an IP-address yourself.
-t MAC Set target MAC address to use when pinging IP address.
-T IP  Use -T as target address when pinging MACs that won't respond to
       a broadcast ping but perhaps to a directed broadcast.
       Example:
       To check the address of MAC-A, use knowledge of MAC-B and  IP-B.
       $ arping -S &lt;IP-B&gt; -s &lt;MAC-B&gt; -p &lt;MAC-A&gt;
-p     Turn  on  promiscious  mode  on interface, use this if you don't
       "own" the MAC address you are using.
-u     Show index=received/sent instead  of  just  index=received  when
       pinging MACs.
-v     Verbose output. Use twice for more messages.
-w     Time to wait between pings, in microseconds.
</code></pre>

<p>Report bugs to: <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x74;&#104;&#x6f;&#109;&#x61;&#x73;&#x40;&#104;&#x61;&#x62;&#101;&#116;&#x73;&#x2e;&#115;&#x65;">&#x74;&#104;&#111;&#109;&#97;&#115;&#x40;&#x68;&#x61;&#x62;&#x65;&#x74;&#x73;&#x2e;&#115;&#101;</a>
Arping home page: <a href="http://www.habets.pp.se/synscan/">http://www.habets.pp.se/synscan/</a>
Development repo: <a href="http://github.com/ThomasHabets/arping">http://github.com/ThomasHabets/arping</a>
```</p>

<p><strong>cdpsnarf</strong></p>

<p>Cisco Discovery Protocol Sniffer</p>

<p>CDPSnarf is a network sniffer exclusively written to extract
information from CDP packets.
It provides all the information a &ldquo;show cdp neighbors detail&rdquo;
command would return on a Cisco router and even more.</p>

<p><img class="center" src="/images/kali/recon/cdpsnarf.png" title="&lsquo;cdpsnarf&rsquo; &lsquo;cdpsnarf&rsquo;" ></p>

<p><strong>detect-new-ip6</strong></p>

<p>This tool detects new IPv6 addresses joining the local network.</p>

<p><img class="center" src="/images/kali/recon/detect-new-ip6.png" title="&lsquo;detect-new-ip6&rsquo; &lsquo;detect-new-ip6&rsquo;" ></p>

<p><strong>detect_sniffer6</strong></p>

<p>Tests if systems on the local LAN are sniffing.
Works against Windows, Linux, OS/X and *BSD
If no target is given, the link-local-all-nodes address is used, which
however not always works.</p>

<p><strong>dmitry</strong></p>

<p>DMitry (Deepmagic Information Gathering Tool) is a UNIX/(GNU)Linux command line application with the ability to gather as much information as possible about a host.</p>

<p>Basic  functionality  of  DMitry  allows for information to be gathered
about a target host from a simple whois lookup on the target to  uptime
reports and TCP portscans.</p>

<p>The application is considered a tool to assist in information gathering
when information is required quickly by removing the need to enter multiple  commands  and  the timely process of searching through data from multiple sources.</p>

<p><img class="center" src="/images/kali/recon/dmitry.png" title="&lsquo;dmitry&rsquo; &lsquo;dmitry&rsquo;" ></p>

<p><strong>dnmap-client</strong> &amp; <strong>dnmap-server</strong></p>

<p>dnmap is a framework to distribute nmap scans among several clients. It reads an already created file with nmap commands and send those commands to each client connected to it. The framework use a client/server architecture. The server knows what to do and the clients do it. All the logic and statistics are managed in the server. Nmap output is stored on both server and client. Usually you would want this if you have to scan a large group of hosts and you have several different internet connections (or friends that want to help you)</p>

<p><code>plain
usage: /usr/bin/dnmap_client &lt;options&gt;
options:
  -s, --server-ip        IP address of dnmap server.
  -p, --server-port      Port of dnmap server. Dnmap port defaults to 46001
  -a, --alias      Your name alias so we can give credit to you for your help. Optional
  -d, --debug      Debuging.
  -m, --max-rate      Force nmaps commands to use at most this rate. Useful to slow nmap down. Adds the --max-rate parameter.
</code></p>

<p>``` plain
usage: /usr/bin/dnmap_server <options>
options:
  -f, &mdash;nmap-commands        Nmap commands file
  -p, &mdash;port        TCP port where we listen for connections.
  -L, &mdash;log-file        Log file. Defaults to /var/log/dnmap_server.conf.
  -l, &mdash;log-level       Log level. Defaults to info.
  -v, &mdash;verbose_level         Verbose level. Give a number between 1 and 5. Defaults to 1. Level 0 means be quiet.
  -t, &mdash;client-timeout         How many time should we wait before marking a client Offline. We still remember its values just in case it cames back.
  -s, &mdash;sort            Field to sort the statical value. You can choose from: Alias, #Commands, UpTime, RunCmdXMin, AvrCmdXMin, Status
  -P, &mdash;pem-file         pem file to use for TLS connection. By default we use the server.pem file provided with the server in the current directory.</p>

<p>dnmap_server uses a &lsquo;&lt;nmap-commands-file-name>.dnmaptrace&rsquo; file to know where it must continue reading the nmap commands file. If you want to start over again,
just delete the &lsquo;&lt;nmap-commands-file-name>.dnmaptrace&rsquo; file
```</p>

<p><strong>fping</strong></p>

<p>send ICMP ECHO_REQUEST packets to network hosts</p>

<p><img class="center" src="/images/kali/recon/fping.png" title="&lsquo;fping&rsquo; &lsquo;fping&rsquo;" ></p>

<p><strong>hping3</strong></p>

<p>hping3 is a network tool able to send custom TCP/IP packets and to display target replies like ping program does with  ICMP  replies.  hping3 handle  fragmentation,  arbitrary packets body and size and can be used in order to transfer  files  encapsulated  under  supported  protocols.
Using hping3 you are able to perform at least the following stuff:</p>

<ul>
<li>Test firewall rules</li>
<li>Advanced port scanning</li>
<li>Test net performance using different protocols, packet size, TOS (type of service) and fragmentation.</li>
<li>Path MTU discovery</li>
<li>Transferring files between even really fascist firewall rules.</li>
<li>Traceroute-like under different protocols.</li>
<li>Firewalk-like usage.</li>
<li>Remote OS fingerprinting.</li>
<li>TCP/IP stack auditing.</li>
<li>A lot of others.</li>
</ul>


<p>``` plain
usage: hping3 host [options]
  -h  &mdash;help      show this help
  -v  &mdash;version   show version
  -c  &mdash;count     packet count
  -i  &mdash;interval  wait (uX for X microseconds, for example -i u1000)</p>

<pre><code>  --fast      alias for -i u10000 (10 packets for second)
  --faster    alias for -i u1000 (100 packets for second)
  --flood      sent packets as fast as possible. Don't show replies.
</code></pre>

<p>  -n  &mdash;numeric   numeric output
  -q  &mdash;quiet     quiet
  -I  &mdash;interface interface name (otherwise default routing interface)
  -V  &mdash;verbose   verbose mode
  -D  &mdash;debug     debugging info
  -z  &mdash;bind      bind ctrl+z to ttl           (default to dst port)
  -Z  &mdash;unbind    unbind ctrl+z</p>

<pre><code>  --beep      beep for every matching packet received
</code></pre>

<p>Mode
  default mode     TCP
  -0  &mdash;rawip      RAW IP mode
  -1  &mdash;icmp       ICMP mode
  -2  &mdash;udp        UDP mode
  -8  &mdash;scan       SCAN mode.</p>

<pre><code>               Example: hping --scan 1-30,70-90 -S www.target.host
</code></pre>

<p>  -9  &mdash;listen     listen mode
IP
  -a  &mdash;spoof      spoof source address
  &mdash;rand-dest      random destionation address mode. see the man.
  &mdash;rand-source    random source address mode. see the man.
  -t  &mdash;ttl        ttl (default 64)
  -N  &mdash;id         id (default random)
  -W  &mdash;winid      use win* id byte ordering
  -r  &mdash;rel        relativize id field          (to estimate host traffic)
  -f  &mdash;frag       split packets in more frag.  (may pass weak acl)
  -x  &mdash;morefrag   set more fragments flag
  -y  &mdash;dontfrag   set don&rsquo;t fragment flag
  -g  &mdash;fragoff    set the fragment offset
  -m  &mdash;mtu        set virtual mtu, implies &mdash;frag if packet size > mtu
  -o  &mdash;tos        type of service (default 0x00), try &mdash;tos help
  -G  &mdash;rroute     includes RECORD_ROUTE option and display the route buffer
  &mdash;lsrr           loose source routing and record route
  &mdash;ssrr           strict source routing and record route
  -H  &mdash;ipproto    set the IP protocol field, only in RAW IP mode
ICMP
  -C  &mdash;icmptype   icmp type (default echo request)
  -K  &mdash;icmpcode   icmp code (default 0)</p>

<pre><code>  --force-icmp send all icmp types (default send only supported types)
  --icmp-gw    set gateway address for ICMP redirect (default 0.0.0.0)
  --icmp-ts    Alias for --icmp --icmptype 13 (ICMP timestamp)
  --icmp-addr  Alias for --icmp --icmptype 17 (ICMP address subnet mask)
  --icmp-help  display help for others icmp options
</code></pre>

<p>UDP/TCP
  -s  &mdash;baseport   base source port             (default random)
  -p  &mdash;destport   [+][+]<port> destination port(default 0) ctrl+z inc/dec
  -k  &mdash;keep       keep still source port
  -w  &mdash;win        winsize (default 64)
  -O  &mdash;tcpoff     set fake tcp data offset     (instead of tcphdrlen / 4)
  -Q  &mdash;seqnum     shows only tcp sequence number
  -b  &mdash;badcksum   (try to) send packets with a bad IP checksum</p>

<pre><code>               many systems will fix the IP checksum sending the packet
               so you'll get bad UDP/TCP checksum instead.
</code></pre>

<p>  -M  &mdash;setseq     set TCP sequence number
  -L  &mdash;setack     set TCP ack
  -F  &mdash;fin        set FIN flag
  -S  &mdash;syn        set SYN flag
  -R  &mdash;rst        set RST flag
  -P  &mdash;push       set PUSH flag
  -A  &mdash;ack        set ACK flag
  -U  &mdash;urg        set URG flag
  -X  &mdash;xmas       set X unused flag (0x40)
  -Y  &mdash;ymas       set Y unused flag (0x80)
  &mdash;tcpexitcode    use last tcp->th_flags as exit code
  &mdash;tcp-mss        enable the TCP MSS option with the given value
  &mdash;tcp-timestamp  enable the TCP timestamp option to guess the HZ/uptime
Common
  -d  &mdash;data       data size                    (default is 0)
  -E  &mdash;file       data from file
  -e  &mdash;sign       add &lsquo;signature&rsquo;
  -j  &mdash;dump       dump packets in hex
  -J  &mdash;print      dump printable characters
  -B  &mdash;safe       enable &lsquo;safe&rsquo; protocol
  -u  &mdash;end        tell you when &mdash;file reached EOF and prevent rewind
  -T  &mdash;traceroute traceroute mode              (implies &mdash;bind and &mdash;ttl 1)
  &mdash;tr-stop        Exit when receive the first not ICMP in traceroute mode
  &mdash;tr-keep-ttl    Keep the source TTL fixed, useful to monitor just one hop
  &mdash;tr-no-rtt       Don&rsquo;t calculate/show RTT information in traceroute mode
ARS packet description (new, unstable)
  &mdash;apd-send       Send the packet described with APD (see docs/APD.txt)
```</p>

<p><strong>inverse_lookup6</strong></p>

<p>Performs an inverse address query, to get the IPv6 addresses that are assigned
to a MAC address. Note that only few systems support this yet.</p>

<p><strong>miranda</strong></p>

<p>Miranda can discover UPnP hosts either passively or actively, and all of a host’s reported devices types, services, actions and variables can be enumerated with a single command.</p>

<p><img class="center" src="/images/kali/recon/miranda.png" title="&lsquo;miranda&rsquo; &lsquo;miranda&rsquo;" ></p>

<p><strong>ncat</strong></p>

<p>Ncat is a feature-packed networking utility which reads and writes data
across networks from the command line. Ncat was written for the Nmap
Project and is the culmination of the currently splintered family of
Netcat incarnations. It is designed to be a reliable back-end tool to
instantly provide network connectivity to other applications and users.
Ncat will not only work with IPv4 and IPv6 but provides the user with a
virtually limitless number of potential uses.</p>

<p>Among Ncat&rsquo;s vast number of features there is the ability to chain
Ncats together; redirection of TCP, UDP, and SCTP ports to other sites;
SSL support; and proxy connections via SOCKS4 or HTTP proxies (with
optional proxy authentication as well).</p>

<p><img class="center" src="/images/kali/recon/ncat.png" title="&lsquo;ncat&rsquo; &lsquo;ncat&rsquo;" ></p>

<p><strong>netdiscover</strong></p>

<p>an active/passive arp reconnaissance tool.</p>

<p><img class="center" src="/images/kali/recon/netdiscover.png" title="&lsquo;netdiscover&rsquo; &lsquo;netdiscover&rsquo;" ></p>

<p><strong>passive_discovery6</strong></p>

<p>Passivly sniffs the network and dump all client&rsquo;s IPv6 addresses detected.</p>

<p><img class="center" src="/images/kali/recon/passive_discovery6.png" title="&lsquo;passive_discovery6&rsquo; &lsquo;passive_discovery6&rsquo;" ></p>

<p><strong>thcping6</strong></p>

<p>Craft a ICMPv6/TCP/UDP packet with special IPv6 or EH header options.</p>

<p><img class="center" src="/images/kali/recon/thcping6.png" title="&lsquo;thcping6&rsquo; &lsquo;thcping6&rsquo;" ></p>

<p><strong>wol-e</strong></p>

<p>WOL-E is a suite of tools for the Wake on LAN feature of network attached computers, this is now enabled by default on many Apple computers. These tools include:</p>

<p>Bruteforcing the MAC address to wake up clients
Sniffing WOL attempts on the network and saving them to disk
Sniffing WOL passwords on the network and saving them to disk
Waking up single clients (post sniffing attack)
Scanning for Apple devices on the network for WOL enabling
Sending bulk WOL requests to all detected Apple clients.</p>

<p><img class="center" src="/images/kali/recon/wol-e.png" title="&lsquo;wol-e&rsquo; &lsquo;wol-e&rsquo;" ></p>

<p><strong>xprobe2</strong></p>

<p>xprobe2 is an active operating system fingerprinting tool with  a  different  approach  to operating system fingerprinting. xprobe2 relies on fuzzy  signature  matching,  probabilistic  guesses,  multiple  matches simultaneously, and a signature database.</p>

<p><img class="center" src="/images/kali/recon/xprobe2.png" title="&lsquo;xprobe2&rsquo; &lsquo;xprobe2&rsquo;" ></p>

<h3>Network Scanners</h3>

<p><strong>nmap</strong></p>

<p>Nmap (“Network Mapper”) is an open source tool for network exploration
and security auditing. It was designed to rapidly scan large networks,
although it works fine against single hosts. Nmap uses raw IP packets
in novel ways to determine what hosts are available on the network,
what services (application name and version) those hosts are offering,
what operating systems (and OS versions) they are running, what type of
packet filters/firewalls are in use, and dozens of other
characteristics. While Nmap is commonly used for security audits, many
systems and network administrators find it useful for routine tasks
such as network inventory, managing service upgrade schedules, and
monitoring host or service uptime.</p>

<p>``` plain
Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> )
Usage: nmap [Scan Type(s)] [Options] {target specification}
TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL <inputfilename>: Input from list of hosts/networks
  -iR <num hosts>: Choose random targets
  &mdash;exclude &lt;host1[,host2][,host3],&hellip;>: Exclude hosts/networks
  &mdash;excludefile &lt;exclude_file>: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan &ndash; simply list targets to scan
  -sn: Ping Scan &ndash; disable port scan
  -Pn: Treat all hosts as online &mdash; skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  &mdash;dns-servers &lt;serv1[,serv2],&hellip;>: Specify custom DNS servers
  &mdash;system-dns: Use OS&rsquo;s DNS resolver
  &mdash;traceroute: Trace hop path to each host
SCAN TECHNIQUES:
  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  &mdash;scanflags <flags>: Customize TCP scan flags
  -sI <zombie host[:probeport]>: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b <FTP relay host>: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
  -p <port ranges>: Only scan specified ports</p>

<pre><code>Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
</code></pre>

<p>  -F: Fast mode &ndash; Scan fewer ports than the default scan
  -r: Scan ports consecutively &ndash; don&rsquo;t randomize
  &mdash;top-ports <number>: Scan <number> most common ports
  &mdash;port-ratio <ratio>: Scan ports more common than <ratio>
SERVICE/VERSION DETECTION:
  -sV: Probe open ports to determine service/version info
  &mdash;version-intensity <level>: Set from 0 (light) to 9 (try all probes)
  &mdash;version-light: Limit to most likely probes (intensity 2)
  &mdash;version-all: Try every single probe (intensity 9)
  &mdash;version-trace: Show detailed version scan activity (for debugging)
SCRIPT SCAN:
  -sC: equivalent to &mdash;script=default
  &mdash;script=<Lua scripts>: <Lua scripts> is a comma separated list of</p>

<pre><code>       directories, script-files or script-categories
</code></pre>

<p>  &mdash;script-args=&lt;n1=v1,[n2=v2,&hellip;]>: provide arguments to scripts
  &mdash;script-args-file=filename: provide NSE script args in a file
  &mdash;script-trace: Show all data sent and received
  &mdash;script-updatedb: Update the script database.
  &mdash;script-help=<Lua scripts>: Show help about scripts.</p>

<pre><code>       &lt;Lua scripts&gt; is a comma-separated list of script-files or
       script-categories.
</code></pre>

<p>OS DETECTION:
  -O: Enable OS detection
  &mdash;osscan-limit: Limit OS detection to promising targets
  &mdash;osscan-guess: Guess OS more aggressively
TIMING AND PERFORMANCE:
  Options which take <time> are in seconds, or append &lsquo;ms&rsquo; (milliseconds),
  &rsquo;s' (seconds), &rsquo;m' (minutes), or &lsquo;h&rsquo; (hours) to the value (e.g. 30m).
  -T&lt;0-5>: Set timing template (higher is faster)
  &mdash;min-hostgroup/max-hostgroup <size>: Parallel host scan group sizes
  &mdash;min-parallelism/max-parallelism <numprobes>: Probe parallelization
  &mdash;min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>: Specifies</p>

<pre><code>  probe round trip time.
</code></pre>

<p>  &mdash;max-retries <tries>: Caps number of port scan probe retransmissions.
  &mdash;host-timeout <time>: Give up on target after this long
  &mdash;scan-delay/&mdash;max-scan-delay <time>: Adjust delay between probes
  &mdash;min-rate <number>: Send packets no slower than <number> per second
  &mdash;max-rate <number>: Send packets no faster than <number> per second
FIREWALL/IDS EVASION AND SPOOFING:
  -f; &mdash;mtu <val>: fragment packets (optionally w/given MTU)
  -D &lt;decoy1,decoy2[,ME],&hellip;>: Cloak a scan with decoys
  -S &lt;IP_Address>: Spoof source address
  -e <iface>: Use specified interface
  -g/&mdash;source-port <portnum>: Use given port number
  &mdash;proxies &lt;url1,[url2],&hellip;>: Relay connections through HTTP/SOCKS4 proxies
  &mdash;data-length <num>: Append random data to sent packets
  &mdash;ip-options <options>: Send packets with specified ip options
  &mdash;ttl <val>: Set IP time-to-live field
  &mdash;spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
  &mdash;badsum: Send packets with a bogus TCP/UDP/SCTP checksum
OUTPUT:
  -oN/-oX/-oS/-oG <file>: Output scan in normal, XML, s|&lt;rIpt kIddi3,</p>

<pre><code> and Grepable format, respectively, to the given filename.
</code></pre>

<p>  -oA <basename>: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  &mdash;reason: Display the reason a port is in a particular state
  &mdash;open: Only show open (or possibly open) ports
  &mdash;packet-trace: Show all packets sent and received
  &mdash;iflist: Print host interfaces and routes (for debugging)
  &mdash;log-errors: Log errors/warnings to the normal-format output file
  &mdash;append-output: Append to rather than clobber specified output files
  &mdash;resume <filename>: Resume an aborted scan
  &mdash;stylesheet <path/URL>: XSL stylesheet to transform XML output to HTML
  &mdash;webxml: Reference stylesheet from Nmap.Org for more portable XML
  &mdash;no-stylesheet: Prevent associating of XSL stylesheet w/XML output
MISC:
  -6: Enable IPv6 scanning
  -A: Enable OS detection, version detection, script scanning, and traceroute
  &mdash;datadir <dirname>: Specify custom Nmap data file location
  &mdash;send-eth/&mdash;send-ip: Send using raw ethernet frames or IP packets
  &mdash;privileged: Assume that the user is fully privileged
  &mdash;unprivileged: Assume the user lacks raw socket privileges
  -V: Print version number
  -h: Print this help summary page.
EXAMPLES:
  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80
SEE THE MAN PAGE (<a href="http://nmap.org/book/man.html">http://nmap.org/book/man.html</a>) FOR MORE OPTIONS AND EXAMPLES
```</p>

<p><strong>unicornscan</strong></p>

<p>asynchronous network stimulus delivery/response recoring tool.</p>

<p><img class="center" src="/images/kali/recon/unicornscan.png" title="&lsquo;unicornscan&rsquo; &lsquo;unicornscan&rsquo;" ></p>

<p><strong>zenmap</strong></p>

<p>Zenmap is a multi-platform graphical Nmap frontend and results viewer.
Zenmap aims to make Nmap easy for beginners to use while giving
experienced Nmap users advanced features. Frequently used scans can be
saved as profiles to make them easy to run repeatedly. A command
creator allows interactive creation of Nmap command lines. Scan results
can be saved and viewed later. Saved scan results can be compared with
one another to see how they differ. The results of recent scans are
stored in a searchable database.</p>

<p><img class="center" src="/images/kali/recon/zenmap.png" title="&lsquo;zenmap&rsquo; &lsquo;zenmap&rsquo;" ></p>

<h3>OS Fingerprinting</h3>

<p>Covered in the above</p>

<h3>OSINT Analysis</h3>

<p><strong>casefile</strong></p>

<p>CaseFile is the little brother to Maltego. It targets a unique market of &lsquo;offline&rsquo; analysts whose primary sources of information are not gained from the open-source intelligence side or can be programmatically queried. We see these people as investigators and analysts who are working &lsquo;on the ground&rsquo;, getting intelligence from other people in the team and building up an information map of their investigation.</p>

<p>CaseFile gives you the ability to quickly add, link and analyze data having the same graphing flexibility and performance as Maltego without the use of transforms.</p>

<p><img class="center" src="/images/kali/recon/casefile.png" title="&lsquo;casefile&rsquo; &lsquo;casefile&rsquo;" ></p>

<p><strong>creepy</strong></p>

<p>creepy  is an application that allows you to gather geolocation related
information about users from  social  networking  platforms  and  image
hosting  services.  The  information  is  presented in a map inside the
application where all the retrieved data is shown accompanied with relevant information (i.e. what was posted from that specific location) to
provide context to the presentation.</p>

<p><img class="center" src="/images/creepy.png" title="&lsquo;creepy&rsquo; &lsquo;creepy&rsquo;" ></p>

<p><strong>jigsaw</strong></p>

<p>Email harvesting, can search on jigsaw.com</p>

<p><strong>maltego</strong></p>

<p>Maltego is a program that can be used to determine the relationships and real world links between:</p>

<p>People</p>

<p>Groups of people (social networks)</p>

<p>Companies</p>

<p>Organizations</p>

<p>Web sites</p>

<p>Internet infrastructure such as:</p>

<p>Domains</p>

<p>DNS names</p>

<p>Netblocks</p>

<p>IP addresses</p>

<p>Phrases</p>

<p>Affiliations</p>

<p>Documents and files</p>

<p>These entities are linked using open source intelligence.</p>

<p><img class="center" src="/images/kali/recon/maltego.png" title="&lsquo;maltego&rsquo; &lsquo;maltego&rsquo;" ></p>

<p><strong>metagoofil</strong></p>

<p>Metagoofil is an information gathering tool designed for extracting metadata of public documents (pdf,doc,xls,ppt,docx,pptx,xlsx) belonging to a target company.</p>

<p>Metagoofil will perform a search in Google to identify and download the documents to local disk and then will extract the metadata with different libraries like Hachoir, PdfMiner? and others. With the results it will generate a report with usernames, software versions and servers or machine names that will help Penetration testers in the information gathering phase.</p>

<p><img class="center" src="/images/kali/recon/maltego.png" title="&lsquo;metagoofil&rsquo; &lsquo;metagoofil&rsquo;" ></p>

<p><strong>recon-ng</strong></p>

<p>Recon-ng is a full-featured Web Reconnaissance framework written in Python. Complete with independent modules, database interaction, built in convenience functions, interactive help, and command completion, Recon-ng provides a powerful environment in which open source web-based reconnaissance can be conducted quickly and thoroughly.</p>

<p><img class="center" src="/images/kali/recon/recon-ng.png" title="&lsquo;recon-ng&rsquo; &lsquo;recon-ng&rsquo;" ></p>

<p><strong>theharvester</strong></p>

<p>The objective of this program is to gather emails, subdomains, hosts, employee names, open ports and banners from different public sources like search engines, PGP key servers and SHODAN computer database.</p>

<p><img class="center" src="/images/kali/recon/theharvester.png" title="&lsquo;theharvester&rsquo; &lsquo;theharvester&rsquo;" ></p>

<p><strong>twofi</strong></p>

<p>Twitter Words Of Interest</p>

<p>Build a custom wordlist based on Twitter keywords</p>

<p><img class="center" src="/images/kali/recon/twofi.png" title="&lsquo;twofi&rsquo; &lsquo;twofi&rsquo;" ></p>

<h3>Route analysis</h3>

<p><strong>0trace</strong></p>

<p>Trace route to target</p>

<p><strong>intrace</strong></p>

<p>InTrace is a traceroute-like application that enables users to enumerate IP hops exploiting existing TCP connections, both initiated from local network (local system) or from remote hosts.</p>

<p><strong>netmask</strong></p>

<p>This  program  accepts and produces a variety of common network address
and netmask formats.  Not only can it convert address and netmask notations,  but it will optimize the masks to generate the smallest list of
rules.  This is very handy if you&rsquo;ve  ever  configured  a  firewall  or
router  and  some  nasty  network administrator before you decided that
base 10 numbers were good places to start and end groups of machines.</p>

<p><img class="center" src="/images/kali/recon/netmask.png" title="&lsquo;netmask&rsquo; &lsquo;netmask&rsquo;" ></p>

<p><strong>trace6</strong></p>

<p>A basic but very fast traceroute6 program.
If no port is specified, ICMP6 Ping requests are used, otherwise TCP SYN
packets to the specified port.</p>

<p><img class="center" src="/images/kali/recon/trace6.png" title="&lsquo;trace6&rsquo; &lsquo;trace6&rsquo;" ></p>

<h3>Service Fingerprinting</h3>

<p><strong>implementation6</strong></p>

<p>Performs some IPv6 implementation checks, can be used to test some
firewall features too. Takes approx. 2 minutes to complete.</p>

<p><img class="center" src="/images/kali/recon/implementation6.png" title="&lsquo;implementation6&rsquo; &lsquo;implementation6&rsquo;" ></p>

<p><strong>implementation6d</strong></p>

<p>Identifies test packets by the implementation6 tool, useful to check what
packets passed a firewall</p>

<p><strong>sslscan</strong></p>

<p>SSLScan is a fast SSL port scanner. SSLScan connects to SSL
ports and determines what  ciphers are supported, which are
the servers  preferred  ciphers,  which  SSL  protocols  are
supported  and   returns  the   SSL   certificate.   Client
certificates /  private key can be configured and output is
to text / XML.</p>

<p><img class="center" src="/images/kali/recon/sslscan.png" title="&lsquo;sslscan&rsquo; &lsquo;sslscan&rsquo;" ></p>

<p><strong>sslyze</strong></p>

<p>SSLyze is a Python tool that can analyze the SSL configuration of a server by connecting to it. It is designed to be fast and comprehensive, and should help organizations and testers identify misconfigurations affecting their SSL servers.</p>

<p>``` plain
Usage: sslyze [options] target1.com target2.com:443 etc&hellip;</p>

<p>Options:
  &mdash;version             show program&rsquo;s version number and exit
  -h, &mdash;help            show this help message and exit
  &mdash;xml_out=XML_FILE    Writes the scan results as an XML document to the file</p>

<pre><code>                    XML_FILE.
</code></pre>

<p>  &mdash;targets_in=TARGETS_IN</p>

<pre><code>                    Reads the list of targets to scan from the file
                    TARGETS_IN. It should contain one host:port per line.
</code></pre>

<p>  &mdash;timeout=TIMEOUT     Sets the timeout value in seconds used for every</p>

<pre><code>                    socket connection made to the target server(s).
                    Default is 5s.
</code></pre>

<p>  &mdash;https_tunnel=HTTPS_TUNNEL</p>

<pre><code>                    Sets an HTTP CONNECT proxy to tunnel SSL traffic to
                    the target server(s). HTTP_TUNNEL should be
                    'host:port'. Requires Python 2.7
</code></pre>

<p>  &mdash;starttls=STARTTLS   Identifies the target server(s) as a SMTP or an XMPP</p>

<pre><code>                    server(s) and scans the server(s) using STARTTLS.
                    STARTTLS should be 'smtp' or 'xmpp'.
</code></pre>

<p>  &mdash;xmpp_to=XMPP_TO     Optional setting for STARTTLS XMPP.  XMPP_TO should be</p>

<pre><code>                    the hostname to be put in the 'to' attribute of the
                    XMPP stream. Default is the server's hostname.
</code></pre>

<p>  &mdash;regular             Regular HTTPS scan; shortcut for &mdash;sslv2 &mdash;sslv3</p>

<pre><code>                    --tlsv1 --reneg --resum --certinfo --http_get
                    --hide_rejected_ciphers --compression --tlsv1_1
                    --tlsv1_2
</code></pre>

<p>  Client certificate support:</p>

<pre><code>--cert=CERT         Client certificate filename.
--certform=CERTFORM
                    Client certificate format. DER or PEM (default).
--key=KEY           Client private key filename.
--keyform=KEYFORM   Client private key format. DER or PEM (default).
--pass=KEYPASS      Client private key passphrase.
</code></pre>

<p>  PluginOpenSSLCipherSuites:</p>

<pre><code>Scans the target server for supported OpenSSL cipher suites.

--sslv2             Lists the SSL 2.0 OpenSSL cipher suites supported by
                    the server.
--sslv3             Lists the SSL 3.0 OpenSSL cipher suites supported by
                    the server.
--tlsv1             Lists the TLS 1.0 OpenSSL cipher suites supported by
                    the server.
--tlsv1_1           Lists the TLS 1.1 OpenSSL cipher suites supported by
                    the server.
--tlsv1_2           Lists the TLS 1.2 OpenSSL cipher suites supported by
                    the server.
--http_get          Option - For each cipher suite, sends an HTTP GET
                    request after completing the SSL handshake and returns
                    the HTTP status code.
--hide_rejected_ciphers
                    Option - Hides the (usually long) list of cipher
                    suites that were rejected by the server.
</code></pre>

<p>  PluginCertInfo:</p>

<pre><code>--certinfo=CERTINFO
                    Verifies the target server's certificate validity
                    against Mozilla's trusted root store, and prints
                    relevant fields of the certificate. CERTINFO should be
                    'basic' or 'full'.
</code></pre>

<p>  PluginSessionRenegotiation:</p>

<pre><code>--reneg             Tests the target server's support for client-initiated
                    renegotiations and secure renegotiations.
</code></pre>

<p>  PluginCompression:</p>

<pre><code>--compression       Tests the server for Zlib compression support.
</code></pre>

<p>  PluginSessionResumption:</p>

<pre><code>Analyzes the target server's SSL session resumption capabilities.

--resum             Tests the server for session ressumption support,
                    using session IDs and TLS session tickets (RFC 5077).
--resum_rate        Performs 100 session resumptions with the target
                    server, in order to estimate the session resumption
                    rate.
</code></pre>

<p>```</p>

<p><strong>tlssled</strong></p>

<p>ssl tls scanner</p>

<h3>SMB Analysis</h3>

<p><strong>acccheck</strong></p>

<p>Attempts to connect to the IPC$ and ADMIN$ shares depending on which flags have been
chosen, and tries a combination of usernames and passwords in the hope to identify
the password to a given account via a dictionary password guessing attack.</p>

<p><img class="center" src="/images/kali/recon/acccheck.png" title="&lsquo;acccheck&rsquo; &lsquo;acccheck&rsquo;" ></p>

<p><strong>nbtscan</strong></p>

<p>nbtscan is a program for scanning IP networks for NetBIOS name information.  It  sends NetBIOS status query to each address in supplied range and lists  received  information  in  human  readable  form.  For  each responded  host  it  lists IP address, NetBIOS computer name, logged-in user name and MAC address (such as Ethernet).</p>

<p><img class="center" src="/images/kali/recon/nbtscan.png" title="&lsquo;nbtscan&rsquo; &lsquo;nbtscan&rsquo;" ></p>

<h3>SMTP Analysis</h3>

<p><strong>smtp-user-enum</strong></p>

<p>Username guessing tool primarily for use against the default Solaris SMTP service. Can use either EXPN, VRFY or RCPT TO</p>

<p><img class="center" src="/images/kali/recon/smtp-user-enum.png" title="&lsquo;smtp-user-enum&rsquo; &lsquo;smtp-user-enum&rsquo;" ></p>

<p><strong>swaks</strong></p>

<p>Swiss Army Knife SMTP, the all-purpose smtp transaction tester</p>

<p>swaks' primary design goal is to be a flexible, scriptable,
transaction-oriented SMTP test tool.  It handles SMTP features and
extensions such as TLS, authentication, and pipelining; multiple
version of the SMTP protocol including SMTP, ESMTP, and LMTP; and
multiple transport methods including unix-domain sockets, internet-
domain sockets, and pipes to spawned processes.  Options can be
specified in environment variables, configuration files, and the
command line allowing maximum configurability and ease of use for
operators and scripters.</p>

<h3>SNMP Analysis</h3>

<p><strong>braa</strong></p>

<p>Braa is a tool for making SNMP queries. It is able to query hundreds or thousands of hosts simultaneously, while being completely single-threaded. It does not need any SNMP libraries, as it is equipped with its own SNMP engine</p>

<p><img class="center" src="/images/kali/recon/braa.png" title="&lsquo;braa&rsquo; &lsquo;braa&rsquo;" ></p>

<p><strong>cisco-auditing-tool</strong></p>

<p>Perl script which scans cisco routers for common vulnerabilities. Checks for default passwords, easily guessable community names, and the IOS history bug. Includes support for plugins and scanning multiple hosts.</p>

<p><img class="center" src="/images/kali/recon/cisco-auditing-tool.png" title="&lsquo;cisco-auditing-tool&rsquo; &lsquo;cisco-auditing-tool&rsquo;" ></p>

<p><strong>cisco-torch</strong></p>

<p>mass scanning, application layer fingerprinting, and exploitation tool to discover and attack remote Cisco hosts running Telnet, SSH, Web, TFTP, NTP and SNMP services. Useful in auditing large networks for misconfigured/un-updated Ciscos.</p>

<p><img class="center" src="/images/kali/recon/cisco-torch.png" title="&lsquo;cisco-torch&rsquo; &lsquo;cisco-torch&rsquo;" ></p>

<p><strong>copy-router-config</strong></p>

<p>copy an entire router configuration file from a Cisco device</p>

<p><img class="center" src="/images/kali/recon/copy-router-config.png" title="&lsquo;copy-router-config&rsquo; &lsquo;copy-router-config&rsquo;" ></p>

<p><strong>merge-router-config</strong></p>

<p>make changes to a Cisco router configuration file and merge those changes to a Cisco router</p>

<p><strong>onesixtyone</strong></p>

<p>simple SNMP scanner which sends requests for the  sys‐Descr value asynchronously with user-adjustable sending times.</p>

<p><img class="center" src="/images/kali/recon/onesixtyone.png" title="&lsquo;onesixtyone&rsquo; &lsquo;onesixtyone&rsquo;" ></p>

<p><strong>snmpcheck</strong></p>

<p>SNMP device enumerator</p>

<p><img class="center" src="/images/kali/recon/snmpcheck.png" title="&lsquo;snmpcheck&rsquo; &lsquo;snmpcheck&rsquo;" ></p>

<h3>SSL Analysis</h3>

<p><strong>sslcaudit</strong></p>

<p>This tool is designed to automate testing SSL/TLS clients for resistance against MITM attacks</p>

<p><img class="center" src="/images/kali/recon/sslcaudit.png" title="&lsquo;sslcaudit&rsquo; &lsquo;sslcaudit&rsquo;" ></p>

<p><strong>ssldump</strong></p>

<p>ssldump is an SSL/TLS network protocol analyzer. It identifies TCP connections on the chosen network interface and attempts to interpret them as  SSL/TLS traffic. When it identifies SSL/TLS traffic, it decodes the records and displays them in a textual form to stdout. If provided with the  appropriate  keying material, it will also decrypt the connections and display the application data traffic.</p>

<p><strong>sslh</strong></p>

<p>ssl/ssh multiplexer</p>

<p><img class="center" src="/images/kali/recon/sslh.png" title="&lsquo;sslh&rsquo; &lsquo;sslh&rsquo;" ></p>

<p><strong>sslsniff</strong></p>

<p>sslsniff  is  designed  to  create man-in-the-middle (MITM) attacks for
SSL/TLS connections, and dynamically generates certs  for  the  domains
that  are  being  accessed  on  the  fly. The new certificates are constructed in a certificate chain that is signed by any certificate  that is provided.
sslsniff  also  supports other attacks like null-prefix or OCSP attacks
to achieve silent interceptions of connections when possible.</p>

<p><img class="center" src="/images/kali/recon/sslsniff.png" title="&lsquo;sslsniff&rsquo; &lsquo;sslsniff&rsquo;" ></p>

<p><strong>sslsplit</strong></p>

<p>SSLsplit  is  a  tool  for  man-in-the-middle  attacks  against SSL/TLS
encrypted network connections.  Connections  are  transparently  intercepted  through  a network address translation engine and redirected to
SSLsplit.  SSLsplit terminates SSL/TLS and initiates a new SSL/TLS connection  to  the  original  destination address, while logging all data
transmitted.  SSLsplit is intended to be useful for  network  forensics
and penetration testing.</p>

<p><img class="center" src="/images/kali/recon/sslsplit.png" title="&lsquo;sslsplit&rsquo; &lsquo;sslsplit&rsquo;" ></p>

<p><strong>sslstrip</strong></p>

<p>SSL/TLS man-in-the-middle attack tool</p>

<p><img class="center" src="/images/kali/recon/sslstrip.png" title="&lsquo;sslstrip&rsquo; &lsquo;sslstrip&rsquo;" ></p>

<p><strong>stunnel</strong></p>

<p>The stunnel program is designed to work as SSL encryption wrapper
between remote clients and local (inetd-startable) or remote servers.
The concept is that having non-SSL aware daemons running on your system
you can easily set them up to communicate with clients over secure SSL channels.</p>

<p><img class="center" src="/images/kali/recon/stunnel.png" title="&lsquo;stunnel&rsquo; &lsquo;stunnel&rsquo;" ></p>

<h3>Telephony Analysis</h3>

<p><strong>ace</strong></p>

<p>Automated Corporate (Data) Enumerator</p>

<p><img class="center" src="/images/kali/recon/ace.png" title="&lsquo;ace&rsquo; &lsquo;ace&rsquo;" ></p>

<h3>Traffic Analysis</h3>

<p><strong>irpas-ass</strong></p>

<p>Autonomous System Scanner</p>

<p><strong>irpass-cdp</strong></p>

<p>This program is for sending CDP (Cisco router Discovery Protocol) messages to the wire.</p>

<p><img class="center" src="/images/kali/recon/irpass-cdp.png" title="&lsquo;irpass-cdp&rsquo; &lsquo;irpass-cdp&rsquo;" ></p>

<p><strong>p0f</strong></p>

<p>P0f is a tool that utilizes an array of sophisticated, purely passive traffic
fingerprinting mechanisms to identify the players behind any incidental TCP/IP
communications (often as little as a single normal SYN) without interfering in
any way.</p>

<p>Some of its capabilities include:</p>

<ul>
<li><p>Highly scalable and extremely fast identification of the operating system
and software on both endpoints of a vanilla TCP connection &ndash; especially in
settings where NMap probes are blocked, too slow, unreliable, or would
simply set off alarms,</p></li>
<li><p>Measurement of system uptime and network hookup, distance (including
topology behind NAT or packet filters), and so on.</p></li>
<li><p>Automated detection of connection sharing / NAT, load balancing, and
application-level proxying setups.</p></li>
<li><p>Detection of dishonest clients / servers that forge declarative statements
such as X-Mailer or User-Agent.</p></li>
</ul>


<p><img class="center" src="/images/kali/recon/p0f.png" title="&lsquo;p0f&rsquo; &lsquo;p0f&rsquo;" ></p>

<p><strong>tcpflow</strong></p>

<p>tcpflow is a program that captures data transmitted as part of TCP connections (flows), and stores the data in a way that is convenient for protocol analysis or debugging.</p>

<p><img class="center" src="/images/kali/recon/tcpflow.png" title="&lsquo;tcpflow&rsquo; &lsquo;tcpflow&rsquo;" ></p>

<p><strong>wireshark</strong></p>

<p>Wireshark is a GUI network protocol analyzer.  It lets you
interactively browse packet data from a live network or from a
previously saved capture file.</p>

<p><img class="center" src="/images/kali/recon/wireshark.png" title="&lsquo;wireshark&rsquo; &lsquo;wireshark&rsquo;" ></p>

<h3>VoIP Analysis</h3>

<p><strong>enumiax</strong></p>

<p>enumIAX is an Inter Asterisk Exchange version 2 (IAX2) protocol username brute-force enumerator.</p>

<p><img class="center" src="/images/kali/recon/enumiax.png" title="&lsquo;enumiax&rsquo; &lsquo;enumiax&rsquo;" ></p>

<h3>VPN Analysis</h3>

<p><strong>ike-scan</strong></p>

<p>Discover and fingerprint IKE hosts (IPsec VPN servers)</p>

<p>``` plain
Target hosts must be specified on the command line unless the &mdash;file option is
given, in which case the targets are read from the specified file instead.</p>

<p>The target hosts can be specified as IP addresses or hostnames.  You can also
specify IPnetwork/bits (e.g. 192.168.1.0/24) to specify all hosts in the given
network (network and broadcast addresses included), and IPstart-IPend
(e.g. 192.168.1.3-192.168.1.27) to specify all hosts in the inclusive range.</p>

<p>These different options for specifying target hosts may be used both on the
command line, and also in the file specified with the &mdash;file option.
```</p>

<p>Ok, that took forever. I will make posts with the other categories as well.</p>

<blockquote><p>The only way to keep your health is to eat what you don&rsquo;t want, drink what
you don&rsquo;t like, and do what you&rsquo;d rather not.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
</feed>
