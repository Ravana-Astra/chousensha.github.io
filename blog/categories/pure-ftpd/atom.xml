<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pure-ftpd | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/pure-ftpd/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2015-12-20T07:44:04-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Pure-FTPd up and running]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/09/getting-pure-ftpd-up-and-running/"/>
    <updated>2014-06-09T16:20:06-04:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/09/getting-pure-ftpd-up-and-running</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll present the steps I took to set up Pure-FTPd on a Backtrack system. There might be slight differences for other distributions, particularly where file names and locations are concerned.</p>

<!-- more -->


<p>First, a brief description of Pure-FTPd, from the official documentation:</p>

<blockquote><p>Pure-FTPd is a fast, production-quality, standard-conformant FTP server, based upon
Troll-FTPd.</p>

<p>Features include chroot()ed and/or virtual chroot()ed home directories, virtual
domains, built-in &lsquo;ls&rsquo;, anti warez system, configurable ports for passive
downloads, FXP protocol, bandwidth throttling, ratios, LDAP / MySQL / PostgreSQL-
based authentication, fortune files, Apache-like log files, fast standalone mode,
text / HTML / XML real-time status report, virtual users, virtual quotas, privilege > separation, SSL/TLS and more.</p></blockquote>

<p>Something to keep in mind is that, unlike other FTP servers, Pure-FTPd is controlled through command line arguments, rather than a configuration file. The latter is possible, but I won&rsquo;t cover it here.</p>

<p>Before going into the commands, I want to explain the concept of <strong>virtual users</strong>. These are FTP-only accounts that don&rsquo;t have to exit on the system, since they&rsquo;re used only for FTP. They have to be associated with a system user, so a good practice which I&rsquo;ll follow here is to create a dedicated system account just for FTP. Thousands of virtual users can share the same system user, as long as they all are chrooted and they have their own home directory.</p>

<p>Now, on to getting the server ready to..serve. First, create a group for FTP activities:</p>

<p><code>plain
groupadd ftpgroup
</code></p>

<p>Now, create a system user that will be used for FTP only:</p>

<p><code>plain
useradd -g ftpgroup -d /dev/null -s /etc ftpuser
</code></p>

<p>The name of the user is ftpuser. The -g flag associates it with the previously created group. Since I don&rsquo;t want the user to have a home directory or a login shell for security reasons, the -d option nukes the home directory by assigning it to /dev/null, and -s option sets /etc as a  fake shell.</p>

<p>Next, make a directory for FTP users:</p>

<p><code>plain
mkdir /home/ftpusers
</code></p>

<p>Now we want to create our first virtual user. First, make a home directory for that user (note that there is a switch to automate this, but I use the manual approach here):</p>

<p><code>plain
mkdir /home/ftpusers/testuser
</code></p>

<p>The <strong>pure-pw</strong> utility is what we&rsquo;ll use for managing virtual users. We could manually edit files instead, but who would want that when there&rsquo;s a nice, clean way?</p>

<p><code>plain
pure-pw useradd testuser -u ftpuser -d /home/ftpusers/testuser
</code></p>

<p>This creates a virtual user named testuser, with the same UID as ftpuser, and that is chrooted to its home directory.</p>

<p>Next step is to commit all the virtual users changes to a PureDB file. Without committing changes to the database, the accounts won&rsquo;t be activated, and unusable.</p>

<p><code>plain
pure-pw mkdb
</code></p>

<p>We then have to set up some symbolic links to add PureDB to the authentication methods:</p>

<p><code>plain
ln -s /etc/pure-ftpd/pureftpd.passwd /etc/pureftpd.passwd
ln -s /etc/pure-ftpd/pureftpd.pdb /etc/pureftpd.pdb
ln -s /etc/pure-ftpd/conf/PureDB /etc/pure-ftpd/auth/PureDB
</code></p>

<p>If you don&rsquo;t need Unix and PAM authentication, you can do the following:</p>

<p><code>plain
echo no &gt; /etc/pure-ftpd/conf/UnixAuthentication
echo no &gt; /etc/pure-ftpd/conf/PAMAuthentication
</code></p>

<p>Lastly, change the permissions of /home/ftpusers and its subdirectories to have ftpuser as owner and ftpgroup as group:</p>

<p><code>plain
chown -R ftpuser /home/ftpusers
chgrp -R ftpgroup /home/ftpusers
</code></p>

<p>From here on there are a lot of options which you can use to customize your FTP server to suit your needs. As always, a good place to start looking for more advanced options is in the man pages and official documentation.</p>

<p>Cookie:</p>

<blockquote><p>You don&rsquo;t become a failure until you&rsquo;re satisfied with being one.</p></blockquote>
]]></content>
  </entry>
  
</feed>
