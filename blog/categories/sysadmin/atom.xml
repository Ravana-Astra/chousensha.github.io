<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sysadmin | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/sysadmin/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2018-02-15T13:39:09-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Changing kernel parameters]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/15/lfcs-prep-changing-kernel-parameters/"/>
    <updated>2018-02-15T13:28:47-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/15/lfcs-prep-changing-kernel-parameters</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll look at changing kernel parameters both at runtime and at boot. Such changes can be made with the <strong>sysctl</strong> command or by inputting values in different files inside <code>/proc/sys</code></p>

<!-- more -->


<p>Let&rsquo;s see a sample /proc/sys folder, which can differ between systems:</p>

<p><code>
ls /proc/sys
abi  crypto  debug  dev  fs  kernel  net  sunrpc  vm
</code></p>

<p>The most important entries are:</p>

<ul>
<li><p>dev contains parameters for system devices</p></li>
<li><p>fs contains filesystem parameters</p></li>
<li><p>kernel is used for kernel parameters</p></li>
<li><p>net contains network parameters</p></li>
<li><p>vm contains virtual memory parameters</p></li>
</ul>


<p>To modify runtime parameters, we can use <strong>sysctl</strong>. Let&rsquo;s take a look at all the available parameters:</p>

<p><code>
sysctl -a | wc -l
951
</code></p>

<p>Too many to list here, so let&rsquo;s glance over a few random ipv4 parameters:</p>

<p><code>
sysctl -a | grep net.ipv4 | tail
net.ipv4.tcp_tso_win_divisor = 3
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 0
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_wmem = 4096    16384    4194304
net.ipv4.tcp_workaround_signed_windows = 0
net.ipv4.udp_mem = 43428    57905    86856
net.ipv4.udp_rmem_min = 4096
net.ipv4.udp_wmem_min = 4096
net.ipv4.xfrm4_gc_thresh = 32768
</code></p>

<p>The dots in the options represent actual slashes in the directory structure under /proc/sys. Now let&rsquo;s take a value and modify it. I will use the packet forwarding feature for this example</p>

<p><code>
cat /proc/sys/net/ipv4/ip_forward
1
</code></p>

<p>So the system is configured to forward packets as a router. To change this, we can put a 0 value in the file:</p>

<p><code>
echo 0 &gt; /proc/sys/net/ipv4/ip_forward
</code></p>

<p>Another option is to write a value with sysctl. Here I enable IP forwarding again:</p>

<p><code>
sysctl -w net.ipv4.ip_forward=1
net.ipv4.ip_forward = 1
</code></p>

<p>Changes made in this way won&rsquo;t persist a reboot. To make them permanent, you have to edit the configuration file.
This used to be <code>/etc/sysctl.conf</code> , and can still be used, but newer systems look for config files inside <strong>/etc/sysctl.d/</strong>, <strong>/run/sysctl.d/</strong>, and <strong>/usr/lib/sysctl.d/</strong> (in order of precedence). On such systems, you can modify the <code>/usr/lib/sysctl.d/00-system</code> file for your kernel settings.</p>

<p>I edited mine to disable IP forwarding:</p>

<p>```</p>

<h1>Disable IP forwarding</h1>

<p>net.ipv4.ip_forward = 0
```</p>

<p>If you don&rsquo;t want to reboot, you can have sysctl re-read its config files by doing <strong>sysctl -p</strong> with the config file of your choice (by default, it will read <strong>/etc/sysctl.conf</strong>)</p>

<p><code>
 sysctl -p /usr/lib/sysctl.d/00-system.conf
net.ipv4.ip_forward = 0
cat /proc/sys/net/ipv4/ip_forward
0
</code></p>

<p>```</p>

<hr />

<p>/ You&rsquo;re definitely on their list. The \
| question to ask next is what list it |
\ is.                                  /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - NTP configuration]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/14/lfcs-prep-ntp-configuration/"/>
    <updated>2018-02-14T14:50:41-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/14/lfcs-prep-ntp-configuration</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll look at NTP configuration by using chrony, which is installed by default on newer RedHat systems.</p>

<!-- more -->


<p>Ensure that the <strong>chronyd</strong> service is started and let&rsquo;s take a look at the current time setttings:</p>

<p>```
timedatectl</p>

<pre><code>  Local time: Thu 2018-02-15 02:15:51 JST
</code></pre>

<p>  Universal time: Wed 2018-02-14 17:15:51 UTC</p>

<pre><code>    RTC time: Wed 2018-02-14 17:15:52
   Time zone: Asia/Tokyo (JST, +0900)
 NTP enabled: no
</code></pre>

<p>NTP synchronized: no
 RTC in local TZ: no</p>

<pre><code>  DST active: n/a
</code></pre>

<p>```</p>

<p>Now look inside chrony&rsquo;s config file, which is <code>/etc/chrony.conf</code>:</p>

<p>```</p>

<h1>Use public servers from the pool.ntp.org project.</h1>

<h1>Please consider joining the pool (<a href="http://www.pool.ntp.org/join.html">http://www.pool.ntp.org/join.html</a>).</h1>

<p>server 0.rhel.pool.ntp.org iburst
server 1.rhel.pool.ntp.org iburst
server 2.rhel.pool.ntp.org iburst
server 3.rhel.pool.ntp.org iburst</p>

<h1>Ignore stratum in source selection.</h1>

<p>stratumweight 0</p>

<h1>Record the rate at which the system clock gains/losses time.</h1>

<p>driftfile /var/lib/chrony/drift</p>

<h1>Enable kernel RTC synchronization.</h1>

<p>rtcsync</p>

<h1>In first three updates step the system clock instead of slew</h1>

<h1>if the adjustment is larger than 10 seconds.</h1>

<p>makestep 10 3</p>

<h1>Allow NTP client access from local network.</h1>

<h1>allow 192.168/16</h1>

<h1>Listen for commands only on localhost.</h1>

<p>bindcmdaddress 127.0.0.1
bindcmdaddress ::1</p>

<h1>Serve time even if not synchronized to any NTP server.</h1>

<h1>local stratum 10</h1>

<p>keyfile /etc/chrony.keys</p>

<h1>Specify the key used as password for chronyc.</h1>

<p>commandkey 1</p>

<h1>Generate command key if missing.</h1>

<p>generatecommandkey</p>

<h1>Disable logging of client accesses.</h1>

<p>noclientlog</p>

<h1>Send a message to syslog if a clock adjustment is larger than 0.5 seconds.</h1>

<p>logchange 0.5</p>

<p>logdir /var/log/chrony</p>

<h1>log measurements statistics tracking</h1>

<p>```</p>

<p>There is a set of default servers configured, but you can add your own. You can also allow NTP client access in the local network by uncommenting or adding the <strong>allow</strong> directive with a range.</p>

<p>In the previous timedatectl output we saw that NTP and synchronization weren&rsquo;t enabled, so let&rsquo;s enable them:</p>

<p>```
timedatectl set-ntp 1
timedatectl | grep -i ntp</p>

<pre><code> NTP enabled: yes
</code></pre>

<p>NTP synchronized: no
```</p>

<p>We still have to manage the NTP synchronization. In the config file we have some server pools enabled, but we want to know exact names for the servers:</p>

<p>```
chronyc sources -v
210 Number of sources = 4</p>

<p>  .&mdash; Source mode  &lsquo;^&rsquo; = server, &lsquo;=&rsquo; = peer, &lsquo;#&rsquo; = local clock.
 / .&ndash; Source state &lsquo;*&rsquo; = current synced, &lsquo;+&rsquo; = combined , &lsquo;&ndash;&rsquo; = not combined,
| /   &lsquo;?&rsquo; = unreachable, &lsquo;x&rsquo; = time may be in error, &lsquo;~&rsquo; = time too variable.
||                                                 .&ndash; xxxx [ yyyy ] +/&ndash; zzzz
||      Reachability register (octal) &ndash;.           |  xxxx = adjusted offset,
||      Log2(Polling interval) &mdash;.      |          |  yyyy = measured offset,
||                                \     |          |  zzzz = estimated error.
||                                 |    |           \</p>

<h1>MS Name/IP address         Stratum Poll Reach LastRx Last sample</h1>

<p>^? ts1.sct.de                    0   8     0   10y     +0ns[   +0ns] +/&ndash;    0ns
^? greenstone-quarry.the-jad     0   8     0   10y     +0ns[   +0ns] +/&ndash;    0ns
^? 1b.ncomputers.org             0   8     0   10y     +0ns[   +0ns] +/&ndash;    0ns
^? shout.ovh                     0   8     0   10y     +0ns[   +0ns] +/&ndash;    0ns
```</p>

<p>Now we can pick a server to synchronize with:</p>

<p>```
ntpdate -vd ts1.sct.de
15 Feb 02:37:52 ntpdate[9511]: ntpdate 4.2.6<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x70;&#53;&#x40;&#49;&#x2e;&#x32;&#51;&#52;&#x39;&#x2d;&#x6f;">&#112;&#53;&#64;&#x31;&#x2e;&#50;&#x33;&#x34;&#x39;&#x2d;&#x6f;</a> Wed Mar  1 09:00:52 UTC 2017 (1)
Looking for host ts1.sct.de and service ntp
host found : ts1.sct.de
transmit(193.141.27.1)
receive(193.141.27.1)
transmit(193.141.27.1)
receive(193.141.27.1)
transmit(193.141.27.1)
receive(193.141.27.1)
transmit(193.141.27.1)
receive(193.141.27.1)
server 193.141.27.1, port 123
stratum 2, precision -24, leap 00, trust 000
refid [193.141.27.1], delay 0.07736, dispersion 0.00209
transmitted 4, in filter 4
reference time:    de2ec48b.aba7efb5  Wed, Feb 14 2018 23:22:03.670
originate timestamp: de2ec847.3cbf5eb1  Wed, Feb 14 2018 23:37:59.237
transmit timestamp:  de2ef276.d94d8084  Thu, Feb 15 2018  2:37:58.848
filter delay:  0.07916  0.07736  0.08383  0.07954</p>

<pre><code>     0.00000  0.00000  0.00000  0.00000 
</code></pre>

<p>filter offset: -10799.6 -10799.6 -10799.6 -10799.6</p>

<pre><code>     0.000000 0.000000 0.000000 0.000000
</code></pre>

<p>delay 0.07736, dispersion 0.00209
offset -10799.642908</p>

<p>15 Feb 02:37:58 ntpdate[9511]: step time server 193.141.27.1 offset -10799.642908 sec
```</p>

<p>To get more information about the NTP status, check the tracking:</p>

<p><code>
chronyc tracking
Reference ID    : 193.141.27.1 (ts1.sct.de)
Stratum         : 3
Ref time (UTC)  : Wed Feb 14 14:41:11 2018
System time     : 0.000000000 seconds fast of NTP time
Last offset     : +10799.637695312 seconds
RMS offset      : 10799.637695312 seconds
Frequency       : 0.000 ppm fast
Residual freq   : -1.456 ppm
Skew            : 1000000.000 ppm
Root delay      : 0.069487 seconds
Root dispersion : 1528.844971 seconds
Update interval : 0.0 seconds
Leap status     : Normal
</code></p>

<p>You can see the server in the Reference ID and the Leap status that confirms the synchronization. Also re-check with timedatectl that NTP is working:</p>

<p>```
timedatectl | grep -i ntp</p>

<pre><code> NTP enabled: yes
</code></pre>

<p>NTP synchronized: yes
```</p>

<p>```</p>

<hr />

<p>/ Give thought to your reputation.       \
| Consider changing name and moving to a |
\ new town.                              /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Configuring SGID directories]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/13/lfcs-prep-configuring-sgid-directories/"/>
    <updated>2018-02-13T12:39:42-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/13/lfcs-prep-configuring-sgid-directories</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll see how to configure SGID directories to share files between members of the same group.</p>

<!-- more -->


<p>I created a group called saiyans with a GID of 9000 to separate it from the rest of the groups:</p>

<p><code>
groupadd -g 9000 saiyans
</code></p>

<p>I made a directory that will be used to share files within the group:</p>

<p><code>
mkdir /opt/invasion_plans
</code></p>

<p>Changed the ownership of the directory to the nobody user and the saiyans group.</p>

<p><code>
chown nobody:saiyans /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxr-xr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Set Group ID:</p>

<p><code>
chmod g+s /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxr-sr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>There are no write permissions yet, so have to assign them:</p>

<p><code>
chmod g+w /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxrwsr-x. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Removed the permissions for the other users:</p>

<p><code>
chmod o-rwx /opt/invasion_plans/
ls -ld /opt/invasion_plans/
drwxrws---. 2 nobody saiyans 6 Feb 13 12:57 /opt/invasion_plans/
</code></p>

<p>Now I added 2 users to the saiyans group:</p>

<p><code>
useradd -G saiyans kakarot
useradd -G saiyans vegeta
cat /etc/group | grep saiyans
saiyans:x:9000:kakarot,vegeta
</code></p>

<p>And tested it:</p>

<p><code>
su - kakarot
echo kamehameha &gt; /opt/invasion_plans/boom
su - vegeta
echo 'final flash' &gt; /opt/invasion_plans/bang
[kakarot@rhel7 ~]$ cat /opt/invasion_plans/bang
final flash
[vegeta@rhel7 ~]$ cat /opt/invasion_plans/boom
kamehameha
</code></p>

<p>In case users need to be restricted from deleting files they didn&rsquo;t create, you can set the sticky bit with <code>chmod +t /opt/invasion_plans</code></p>

<p>```</p>

<hr />

<p>/ Your lucky number is 3552664958674928. \
\ Watch for it everywhere.               /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - Managing encrypted partitions]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/12/lfcs-prep-managing-encrypted-partitions/"/>
    <updated>2018-02-12T12:39:28-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/12/lfcs-prep-managing-encrypted-partitions</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll go over creating LUKS-encrypted partitions with <strong>cryptsetup</strong>. LUKS (Linux Unified Key Setup) is a block device encryption format that is the standard on Linux systems. Also, because it stores all the necessary data in the partition header, it&rsquo;s easy to migrate partitions.</p>

<!-- more -->


<p>To get an overview of all the cryptographic ciphers that the system can use, look in <code>/proc/crypto</code>:</p>

<p><code>
 cat /proc/crypto | grep name
name         : crc32
name         : __ghash
name         : ghash
name         : __ghash
name         : xts(aes)
name         : lrw(aes)
name         : __xts-aes-aesni
name         : __lrw-aes-aesni
name         : pcbc(aes)
name         : rfc4106(gcm(aes))
name         : __gcm-aes-aesni
name         : ctr(aes)
name         : __ctr-aes-aesni
name         : cbc(aes)
name         : __ecb-aes-aesni
name         : ecb(aes)
name         : __cbc-aes-aesni
name         : __ecb-aes-aesni
name         : __aes-aesni
name         : aes
name         : crct10dif
name         : crct10dif
name         : crc32c
name         : hmac(sha256)
name         : hmac(sha1)
name         : lzo
name         : crc32c
name         : aes
name         : sha224
name         : sha256
name         : sha1
name         : md5
name         : sha224
name         : sha256
name         : sha1
name         : aes
</code></p>

<p>For this demo, I will be using a 200MB partition called /dev/sdb1. The below command initializes the partition as a LUKS device and you have to configure a passphrase at this step.</p>

<p>```
cryptsetup luksFormat /dev/sdb1</p>

<h1>WARNING!</h1>

<p>This will overwrite data on /dev/sdb1 irrevocably.</p>

<p>Are you sure? (Type uppercase yes): YES
Enter passphrase:
Verify passphrase:
```</p>

<p>You can check out the header:</p>

<p>```
cryptsetup luksDump /dev/sdb1
LUKS header information for /dev/sdb1</p>

<p>Version:           1
Cipher name:       aes
Cipher mode:       xts-plain64
Hash spec:         sha256
Payload offset:    4096
MK bits:           256
MK digest:         6b 5e c2 bb 77 f9 0a 0d d4 67 4d 6f 01 a1 df 33 ce d7 94 b2
MK salt:           42 9d d7 5f 3b 6c c1 0b 55 53 d1 fd 28 bd 73 27</p>

<pre><code>               64 63 bb 70 02 de 33 46 0c 4f 2e 07 a9 a7 28 52 
</code></pre>

<p>MK iterations:     68500
UUID:              85b6a404-b24e-4c31-baf3-75cb3f041054</p>

<p>Key Slot 0: ENABLED</p>

<pre><code>Iterations:             547007
Salt:                   4d 13 8b 20 74 cb 88 dd 8e dc b3 b0 2c ca 83 4b 
                          bd ab 12 2d 95 57 72 06 00 25 11 0e 43 b8 dc 81 
Key material offset:    8
AF stripes:                4000
</code></pre>

<p>Key Slot 1: DISABLED
Key Slot 2: DISABLED
Key Slot 3: DISABLED
Key Slot 4: DISABLED
Key Slot 5: DISABLED
Key Slot 6: DISABLED
Key Slot 7: DISABLED
```</p>

<p>Next, create a mapping between the opened LUKS partition and the device mapper.</p>

<p><code>
cryptsetup --verbose luksOpen /dev/sdb1 hidden
Enter passphrase for /dev/sdb1:
Key slot 0 unlocked.
Command successful.
</code></p>

<p>View the mapping details:</p>

<p><code>
ls -l /dev/mapper/hidden
lrwxrwxrwx. 1 root root 7 Feb  9 18:29 /dev/mapper/hidden -&gt; ../dm-2
</code></p>

<p>If you want to have more insight into the status of the mapping:</p>

<p><code>
cryptsetup -v status hidden
/dev/mapper/hidden is active.
  type:    LUKS1
  cipher:  aes-xts-plain64
  keysize: 256 bits
  device:  /dev/sdb1
  offset:  4096 sectors
  size:    405504 sectors
  mode:    read/write
Command successful.
</code></p>

<p>Format the partition with the filesystem of your choice:</p>

<p>```
mkfs -t ext4 /dev/mapper/hidden
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
50800 inodes, 202752 blocks
10137 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=33816576
25 block groups
8192 blocks per group, 8192 fragments per group
2032 inodes per group
Superblock backups stored on blocks:</p>

<pre><code>8193, 24577, 40961, 57345, 73729
</code></pre>

<p>Allocating group tables: done                          <br/>
Writing inode tables: done                          <br/>
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done
```</p>

<p>I made a folder for mounting the new encrypted partition and mounted it:</p>

<p>```
mount -v /dev/mapper/hidden /mnt/hidden
mount: /mnt/hidden does not contain SELinux labels.</p>

<pre><code>   You just mounted an file system that supports labels which does not
   contain labels, onto an SELinux box. It is likely that confined
   applications will generate AVC messages and not be allowed access to
   this file system.  For more details see restorecon(8) and mount(8).
</code></pre>

<p>mount: /dev/mapper/hidden mounted on /mnt/hidden.
```</p>

<p>When done working on it, you can unmount it:</p>

<p><code>
umount -v /mnt/hidden
umount: /mnt/hidden (/dev/mapper/hidden) unmounted
</code></p>

<p>And then remove the mapping:</p>

<p><code>
cryptsetup --verbose luksClose hidden
Command successful.
</code></p>

<p>To remount it, just go through the above steps again. If you want to mount it at boot, you need to take note of some UUIDS:</p>

<p><code>
lsblk -o name,uuid,mountpoint
NAME          UUID                                   MOUNTPOINT
sda                                                  
├─sda1        b8e2fb99-bf4c-4632-883b-8ed5c2350b1e   /boot
└─sda2        PLxZXl-aHBf-9VPQ-XOd1-eLMH-cWOW-NhjdcP
  ├─rhel-root 2c0268ac-c31a-462d-b5b9-41bdfbecd75d   /
  └─rhel-swap 6544d880-b634-4566-a68d-d3a58cec4cf6   [SWAP]
sdb                                                  
└─sdb1        85b6a404-b24e-4c31-baf3-75cb3f041054   
  └─hidden    ab98b274-9d34-41f0-9178-4f8c4b7e8a77   
sr0                                                  
</code></p>

<p>Then you need to edit <code>/etc/crypttab</code>:</p>

<p><code>
name device &lt;password&gt; &lt;options&gt;
</code></p>

<p>Device refers to the block device or its UUID. The entries between tags are optional. In my case, the entry would look like this (the UUID is of /dev/sdb1)</p>

<p><code>
cat /etc/crypttab
hidden UUID=85b6a404-b24e-4c31-baf3-75cb3f041054
</code></p>

<p>And edit /etc/fstab like you would for any other partition (UUID refers to the hidden mapping):</p>

<p><code>
UUID=ab98b274-9d34-41f0-9178-4f8c4b7e8a77 /mnt/hidden ext4 defaults 0 0
</code></p>

<p>Now you will be prompted at boot for the password. If you want to use a key for automatic unlocking, create a key file (here a random key of 4096 bytes length):</p>

<p><code>
dd if=/dev/urandom of=/root/key bs=1024 count=4
4+0 records in
4+0 records out
4096 bytes (4.1 kB) copied, 0.00100253 s, 4.1 MB/s
</code></p>

<p>Make it only readable by root with <code>chmod 400 /root/key</code></p>

<p>Add the key for the encrypted volume:</p>

<p><code>
cryptsetup -v luksAddKey /dev/sdb1 /root/key
Enter any existing passphrase:
Key slot 0 unlocked.
Key slot 0 unlocked.
Command successful.
</code></p>

<p>And add the path of the key file to /etc/crypttab</p>

<p><code>
cat /etc/crypttab
hidden UUID=85b6a404-b24e-4c31-baf3-75cb3f041054 /root/key
</code></p>

<p>Now the volume will be unlocked automatically without the need of entering a passphrase.</p>

<p>```</p>

<hr />

<p>/ You definitely intend to start living \
\ sometime soon.                        /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFCS prep - LDAP server and client configuration]]></title>
    <link href="http://chousensha.github.io/blog/2018/02/11/lfcs-prep-ldap-server-and-client-configuration/"/>
    <updated>2018-02-11T10:37:49-05:00</updated>
    <id>http://chousensha.github.io/blog/2018/02/11/lfcs-prep-ldap-server-and-client-configuration</id>
    <content type="html"><![CDATA[<p>Something that you may come up with in the exam and that I&rsquo;ve been avoiding is the LDAP topic. In this post we&rsquo;ll look at server and client configuration for LDAP.</p>

<p>For this scenario, the hostname of my LDAP server is centos.example.com. The domain is example.com and the entry is inside /etc/hosts</p>

<p>I used <a href="https://www.certdepot.net/rhel7-configure-ldap-directory-service-user-connection/">CertDepot</a> as inspiration..the LDAP syntax and topic really keeps me away from approaching it.</p>

<!-- more -->


<h2>Server configuration</h2>

<p>To get started, install these packages:</p>

<p><code>
yum install -y openldap openldap-clients openldap-servers migrationtools
</code></p>

<p>Some info about them:</p>

<ul>
<li><p>openldap is the open source implementation of LDAP</p></li>
<li><p>openldap-clients contains LDAP client utilities</p></li>
<li><p>openldap-servers is the server package</p></li>
<li><p>The MigrationTools are a set of Perl scripts for migrating users, groups, aliases, hosts, netgroups, networks, protocols, RPCs, and services from existing nameservices (flat files, NIS, and NetInfo) to LDAP.</p></li>
</ul>


<p>Create LDAP password from a key, (the string secret below):</p>

<p><code>
slappasswd -s secret -n &gt; /etc/openldap/passwd
</code></p>

<p>Inside the file take note of the generated password: <code>{SSHA}T4srVIBK+rJ9DXlVG7dvZnnAQhAZuO07</code></p>

<p>Generate an X509 certificate valid for 1 year (note the paths of the certificate and private key):</p>

<p><code>
openssl req -new -x509 -nodes -out /etc/openldap/certs/cert.pem -keyout /etc/openldap/certs/key.pem -days 365
</code></p>

<p>At the prompt, you can leave as blank the values except the below, where you put your server&rsquo;s hostname:</p>

<p><code>
Common Name (eg, your name or your server's hostname) []:centos.example.com
</code></p>

<p>Change the ownership of the files inside <code>/etc/openldap/certs</code> and change the permissions of the private key:</p>

<p><code>
cd /etc/openldap/certs
chown ldap:ldap *
chmod 600 key.pem
ll
total 88
-rw-r--r--. 1 ldap ldap 65536 Feb 11 14:08 cert8.db
-rw-r--r--. 1 ldap ldap  1298 Feb 11 14:27 cert.pem
-rw-r--r--. 1 ldap ldap 16384 Feb 11 14:08 key3.db
-rw-------. 1 ldap ldap  1704 Feb 11 14:27 key.pem
-r--r-----. 1 ldap ldap    45 Apr 26  2016 password
-rw-r--r--. 1 ldap ldap 16384 Apr 26  2016 secmod.db
</code></p>

<p>Copy the LDAP database:</p>

<p><code>
cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
</code></p>

<p>Check the slapd configuration (below errors are safe):</p>

<p><code>
slaptest
5a8038c4 hdb_db_open: database "dc=my-domain,dc=com": db_open(/var/lib/ldap/id2entry.bdb) failed: No such file or directory (2).
5a8038c4 backend_startup_one (type=hdb, suffix="dc=my-domain,dc=com"): bi_db_open failed! (2)
slap_startup failed (test would succeed using the -u switch)
</code></p>

<p>Change the ownership of the DB to ldap:</p>

<p><code>
chown ldap:ldap /var/lib/ldap/*
</code></p>

<p>Now start the service</p>

<p><code>
systemctl start slapd
</code></p>

<p>Check that the LDAP service is listening:</p>

<p><code>
netstat -lpt | grep ldap
tcp        0      0 0.0.0.0:ldap            0.0.0.0:*               LISTEN      5558/slapd          
tcp6       0      0 [::]:ldap               [::]:*                  LISTEN      5558/slapd    
</code></p>

<p>Next you have to add some LDAP schemas</p>

<p><code>
cd /etc/openldap/schema
</code></p>

<p>Mainly, add the following:</p>

<ul>
<li>cosine (Cosine and Internet X.500)</li>
</ul>


<p><code>
ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f cosine.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=cosine,cn=schema,cn=config"
</code></p>

<ul>
<li>nis (Network Information Services)</li>
</ul>


<p><code>
ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f nis.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=nis,cn=schema,cn=config"
</code></p>

<p>Create the <code>/etc/openldap/changes.ldif</code> file with the below content and remember the password value from earlier:</p>

<p>```
dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=example,dc=com</p>

<p>dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=example,dc=com</p>

<p>dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: {SSHA}T4srVIBK+rJ9DXlVG7dvZnnAQhAZuO07</p>

<p>dn: cn=config
changetype: modify
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/cert.pem</p>

<p>dn: cn=config
changetype: modify
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/key.pem</p>

<p>dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: -1</p>

<p>dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base=&ldquo;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&rdquo; read by dn.base=&ldquo;cn=Manager,dc=example,dc=com&rdquo; read by * none
```</p>

<p>In summary, here you have to be mindful of the certificate and key paths, and of your previously generated password.</p>

<p>Now create the configuration:</p>

<p>```
ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/openldap/changes.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry &ldquo;olcDatabase={2}hdb,cn=config&rdquo;</p>

<p>modifying entry &ldquo;olcDatabase={2}hdb,cn=config&rdquo;</p>

<p>modifying entry &ldquo;olcDatabase={2}hdb,cn=config&rdquo;</p>

<p>modifying entry &ldquo;cn=config&rdquo;</p>

<p>modifying entry &ldquo;cn=config&rdquo;</p>

<p>modifying entry &ldquo;cn=config&rdquo;</p>

<p>modifying entry &ldquo;olcDatabase={1}monitor,cn=config&rdquo;
```</p>

<p>Create the file <code>/etc/openldap/base.ldif</code> with the following content:</p>

<p>```
dn: dc=example,dc=com
dc: example
objectClass: top
objectClass: domain</p>

<p>dn: ou=People,dc=example,dc=com
ou: People
objectClass: top
objectClass: organizationalUnit</p>

<p>dn: ou=Group,dc=example,dc=com
ou: Group
objectClass: top
objectClass: organizationalUnit
```</p>

<p>Create the directory structure:</p>

<p>```
ldapadd -x -w secret -D cn=Manager,dc=example,dc=com -f /etc/openldap/base.ldif
adding new entry &ldquo;dc=example,dc=com&rdquo;</p>

<p>adding new entry &ldquo;ou=People,dc=example,dc=com&rdquo;</p>

<p>adding new entry &ldquo;ou=Group,dc=example,dc=com&rdquo;
```</p>

<p>This command uses simple authentication and reads the previously created file.</p>

<p>Now it&rsquo;s time to create a sample user account and see if things are working:</p>

<p><code>
mkdir /home/ldap
useradd -d /home/ldap/sam sam
passwd sam
</code></p>

<p>Some additional steps are needed for user account migration:</p>

<p><code>
cd /usr/share/migrationtools
</code></p>

<p>Edit <strong>migrate_common.ph</strong> to have your domain values:</p>

<p>```</p>

<h1>Default DNS domain</h1>

<p>$DEFAULT_MAIL_DOMAIN = &ldquo;example.com&rdquo;;</p>

<h1>Default base</h1>

<p>$DEFAULT_BASE = &ldquo;dc=example,dc=com&rdquo;;
```</p>

<p>Add the user to the directory:</p>

<p><code>
cat /etc/passwd | grep sam &gt; passwd
cat passwd
sam:x:1004:1004::/home/ldap/sam:/bin/bash
ldapadd -x -w secret -D cn=Manager,dc=example,dc=com -f users.ldif
./migrate_passwd.pl passwd users.ldif
</code></p>

<p>Check out the <em>users.ldif</em> file:</p>

<p><code>
cat users.ldif
dn: uid=sam,ou=People,dc=example,dc=com
uid: sam
cn: sam
objectClass: account
objectClass: posixAccount
objectClass: top
objectClass: shadowAccount
userPassword: {crypt}$6$L49gzmY1$n0RNoX86rhT4QMvmsKWkMruHT/BCh7yBm2cQOdb4pbOA7XM0RB4d4GsoDpSILQSjYduiPponzFDb8O7bIb1kA.
shadowLastChange: 17573
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
loginShell: /bin/bash
uidNumber: 1004
gidNumber: 1004
homeDirectory: /home/ldap/sam
</code></p>

<p>Add the user entry:</p>

<p><code>
ldapadd -x -w secret -D cn=Manager,dc=example,dc=com -f users.ldif
adding new entry "uid=sam,ou=People,dc=example,dc=com"
</code></p>

<p>Do the same for group:</p>

<p><code>
cat /etc/group | grep sam &gt; group
cat group
sam:x:1004:
</code></p>

<p>Migrate the group:</p>

<p><code>
./migrate_group.pl group groups.ldif
</code></p>

<p>Check the groups.ldif file:</p>

<p><code>
cat groups.ldif
dn: cn=sam,ou=Group,dc=example,dc=com
objectClass: posixGroup
objectClass: top
cn: sam
userPassword: {crypt}x
gidNumber: 1004
</code></p>

<p>Add the group:</p>

<p><code>
ldapadd -x -w secret -D cn=Manager,dc=example,dc=com -f groups.ldif
adding new entry "cn=sam,ou=Group,dc=example,dc=com"
</code></p>

<p>Now search for the user:</p>

<p>```
ldapsearch -x cn=sam -b dc=example,dc=com</p>

<h1>extended LDIF</h1>

<p>#</p>

<h1>LDAPv3</h1>

<h1>base &lt;dc=example,dc=com> with scope subtree</h1>

<h1>filter: cn=sam</h1>

<h1>requesting: ALL</h1>

<p>#</p>

<h1>sam, People, example.com</h1>

<p>dn: uid=sam,ou=People,dc=example,dc=com
uid: sam
cn: sam
objectClass: account
objectClass: posixAccount
objectClass: top
objectClass: shadowAccount
userPassword:: e2NyeXB0fSQ2JEw0OWd6bVkxJG4wUk5vWDg2cmhUNFFNdm1zS1drTXJ1SFQvQkN
 oN3lCbTJjUU9kYjRwYk9BN1hNMFJCNGQ0R3NvRHBTSUxRU2pZZHVpUHBvbnpGRGI4TzdiSWIxa0Eu
shadowLastChange: 17573
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
loginShell: /bin/bash
uidNumber: 1004
gidNumber: 1004
homeDirectory: /home/ldap/sam</p>

<h1>sam, Group, example.com</h1>

<p>dn: cn=sam,ou=Group,dc=example,dc=com
objectClass: posixGroup
objectClass: top
cn: sam
userPassword:: e2NyeXB0fXg=
gidNumber: 1004</p>

<h1>search result</h1>

<p>search: 2
result: 0 Success</p>

<h1>numResponses: 3</h1>

<h1>numEntries: 2</h1>

<p>```</p>

<p>You might also need to allow ldap in the firewall.</p>

<h2>Client configuration</h2>

<p>If you hoped it was over, we still have to verify the authentication from a client machine. On my client, I also added the server in /etc/hosts:</p>

<p><code>
192.168.217.131 centos.example.com
</code></p>

<p>The interface used for configuring authentication is <code>authconfig</code>. For this example I will go over the <strong>nslcd</strong> route.</p>

<p>On the client, install the needed packages:</p>

<p><code>
yum install -y openldap-clients nss-pam-ldapd
</code></p>

<p>Run the following:</p>

<p><code>
authconfig --enableforcelegacy --update
authconfig --enableldap --enableldapauth --ldapserver="centos.example.com" --ldapbasedn="dc=example,dc=com" --update
</code></p>

<p>Download the certificate:</p>

<p><code>
scp root@centos.example.com:/etc/openldap/certs/cert.pem /etc/openldap/cacerts/cert.pem
root@centos.example.com's password:
cert.pem                                      100% 1298   107.3KB/s   00:00    
</code></p>

<p>Enable TLS:</p>

<p><code>
authconfig --enableldaptls --update
</code></p>

<p>You can do a getent or try to login as the LDAP user to see if it works.</p>

<p>```</p>

<hr />

<p>/ Your temporary financial embarrassment \
| will be relieved in a surprising       |
\ manner.                                /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
