<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sysadmin | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/sysadmin/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2017-07-01T10:17:59-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick shares with Samba on CentOS]]></title>
    <link href="http://chousensha.github.io/blog/2017/06/09/quick-shares-with-samba-on-centos/"/>
    <updated>2017-06-09T05:47:05-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/06/09/quick-shares-with-samba-on-centos</id>
    <content type="html"><![CDATA[<p>The interwebz is thundering with doomsday predictions about the <a href="https://blog.qualys.com/securitylabs/2017/05/26/samba-vulnerability-cve-2017-7494">Samba CVE-2017-7494 exploit</a>, and here I am, deciding that now is the best time to make a post on setting up Samba shares! xD</p>

<p>On a related note, if for some reason you can&rsquo;t patch the vulnerability yet, there is a workaround (with some drawbacks). Edit the global section in smb.conf and add the line <code>nt pipe support = no</code>.</p>

<!-- more -->


<p>Back to the matter at hand. First, let&rsquo;s verify if Samba is installed on the CentOS system:</p>

<p><code>
rpm -q samba
package samba is not installed
</code></p>

<p>Since it&rsquo;s not installed on my machine, I installed it with <code>yum install samba</code>, and then ran the previous command again, to check the version:</p>

<p><code>
rpm -q samba
samba-4.4.4-14.el7_3.x86_64
</code></p>

<p>Now, let&rsquo;s start Samba and see it running:</p>

<p>```
service smb start
Redirecting to /bin/systemctl start  smb.service
service smb status
Redirecting to /bin/systemctl status  smb.service
● smb.service &ndash; Samba SMB Daemon
   Loaded: loaded (/usr/lib/systemd/system/smb.service; disabled; vendor preset: disabled)
   Active: active (running) since Thu 2017-06-08 10:56:54 EEST; 5s ago
 Main PID: 61874 (smbd)
   Status: &ldquo;smbd: ready to serve connections&hellip;&rdquo;
   CGroup: /system.slice/smb.service</p>

<pre><code>       ├─61874 /usr/sbin/smbd
       ├─61875 /usr/sbin/smbd
       ├─61876 /usr/sbin/smbd
       └─61879 /usr/sbin/smbd
</code></pre>

<p>Jun 08 10:56:52 localhost.localdomain systemd[1]: Starting Samba SMB Daemon&hellip;
Jun 08 10:56:54 localhost.localdomain smbd[61874]: [2017/06/08 10:56:54.513901,  0] ../lib/util/become_daemon.c:124(daemon_ready)
Jun 08 10:56:54 localhost.localdomain smbd[61874]:   STATUS=daemon &lsquo;smbd&rsquo; finished starting up and ready to serve connections
Jun 08 10:56:54 localhost.localdomain systemd[1]: Started Samba SMB Daemon.
```</p>

<h2>Samba daemons</h2>

<p>The Samba functionality is contained within 3 daemons:</p>

<ul>
<li><p><strong>smbd</strong> &ndash; file sharing, printing services, authentication. Default ports are 139 and 445</p></li>
<li><p><strong>nmbd</strong> &ndash; NetBIOS name service requests and browsing protocols</p></li>
<li><p><strong>winbindd</strong> &ndash; used for Windows domains membership</p></li>
</ul>


<h2>Samba configuration</h2>

<p>The Samba configuration file is <code>/etc/samba/smb.conf</code>. Here is how a fresh config file looks after installation:</p>

<p>```</p>

<h1>See smb.conf.example for a more detailed config file or</h1>

<h1>read the smb.conf manpage.</h1>

<h1>Run &lsquo;testparm&rsquo; to verify the config is correct after</h1>

<h1>you modified it.</h1>

<p>[global]</p>

<pre><code>workgroup = SAMBA
security = user

passdb backend = tdbsam

printing = cups
printcap name = cups
load printers = yes
cups options = raw
</code></pre>

<p>[homes]</p>

<pre><code>comment = Home Directories
valid users = %S, %D%w%S
browseable = No
read only = No
inherit acls = Yes
</code></pre>

<p>[printers]</p>

<pre><code>comment = All Printers
path = /var/tmp
printable = Yes
create mask = 0600
browseable = No
</code></pre>

<p>[print$]</p>

<pre><code>comment = Printer Drivers
path = /var/lib/samba/drivers
write list = root
create mask = 0664
directory mask = 0775
</code></pre>

<p>```</p>

<p>For much more detailed information and examples, see the <a href="/downloads/code/smb.conf.example">smb.conf.example file</a></p>

<h2>Create Samba share</h2>

<p>In this example, let&rsquo;s create a share that users can also write to. First, create the directory that you will share: <code>mkdir -p /srv/samba/myshare</code>. I placed a text file with some random stuff inside. Then I gave full access to the path and its subfolders with <code>chmod -R 777 /srv/samba</code></p>

<p>Next, we need to create a Samba user, but this account is not the same as a user account on the system. We have to make a user account on the system before assigning it to Samba:</p>

<p><code>
adduser smbuser -s /sbin/nologin
</code></p>

<p>Here I created a user just for Samba, with no login shell. Attempting to login will give the user a message that they are not allowed to login. If you prefer that the user is disconnected with no message, you can specify <code>/bin/false</code> instead.</p>

<p>Then, I gave the user account a description, which you can find inside <em>/etc/passwd</em>:</p>

<p><code>
usermod -c 'Samba access is allowed for this user' smbuser
[root@localhost ~]# cat /etc/passwd | grep smbuser
smbuser:x:1001:1001:Samba access is allowed for this user:/home/smbuser:/sbin/nologin
</code></p>

<p>Have to give the user account a password:</p>

<p><code>
[root@localhost ~]# passwd smbuser
Changing password for user smbuser.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.
</code></p>

<p>Next, we create a Samba user, by using the previously created account:</p>

<p><code>
[root@localhost ~]# smbpasswd -a smbuser
New SMB password:
Retype new SMB password:
Added user smbuser.
</code></p>

<p>To be safe, check that the Samba user was created:</p>

<p><code>
[root@localhost ~]# pdbedit -L
smbuser:1001:Samba access is allowed for this user
</code></p>

<p>We have the share location and the user, now we need to edit the smb.conf file with the relevant information:</p>

<p>```
[global]</p>

<pre><code># workgroup name or Windows NT domain name
workgroup = SAMBA
# default: user and password authentication
security = user
# optional comment for Windows
server string = Samba File Server
# default backend for user information
passdb backend = tdbsam
</code></pre>

<p>[sharename]</p>

<pre><code>path = /srv/samba/myshare
comment = Only authorized users
# allow these users
valid users = smbuser
# same can be achieved with writable = yes
read only = no  
# allow subnet range
allow hosts = 192.168.217.
# deny access
invalid users = root  
</code></pre>

<p>```</p>

<p>I used comments for easier understanding, but for performance reasons, you might want to keep your file to minimum size, by removing all those comment lines. You can do that by keeping a configuration file with all the additional remarks, while using a smb.conf with only the required configuration. All the comments will be stripped from the config file:</p>

<p><code>
[root@localhost samba]# testparm -s smb.conf.old &gt; smb.conf
Load smb config files from smb.conf.old
rlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)
Processing section "[sharename]"
Loaded services file OK.
Server role: ROLE_STANDALONE
</code></p>

<p>We checked that our config file is valid, so now it&rsquo;s time to test it. Restart Samba for the configurations to take effect with <code>service smb restart</code>. And now let&rsquo;s access the share! From another machine, I used <strong>smbclient</strong> to list the available services on the Samba server:</p>

<p>```
smbclient -L 192.168.217.131 -U smbuser
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Enter smbuser&rsquo;s password:
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]</p>

<pre><code>Sharename       Type      Comment
---------       ----      -------
sharename       Disk      Only authorized users
IPC$            IPC       IPC Service (Samba File Server)
</code></pre>

<p>Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]</p>

<pre><code>Server               Comment
---------            -------

Workgroup            Master
---------            -------
</code></pre>

<p>```</p>

<p>There is one last step that you need to accomplish if you have SELinux enabled. You have to label the directory you&rsquo;re sharing with the <strong>samba_share_t</strong> label:</p>

<p><code>
chcon -R -t samba_share_t /srv/samba
</code></p>

<p>Now the /srv/samba directory and everything it contains is labeled correctly, and SELinux won&rsquo;t interfere. View the security context of the path with:</p>

<p><code>
ls -ldZ /srv/samba/
drwxr-xr-x. root root unconfined_u:object_r:samba_share_t:s0 /srv/samba/
</code></p>

<p>Changes made with chcon are temporary. To survive a relabel or running <em>restorerecon</em>, make the changes permanent with:</p>

<p><code>
semanage fcontext -a -t samba_share_t "path(/.*)?"
</code></p>

<p>Then apply them with <code>restorecon -R -v /path</code>.</p>

<p>Finally, to connect to a share, use the syntax: <code>smbclient  //host/sharename -U username</code> (in the below examle, the name of my share is sharename, because laziness):</p>

<p>```
smbclient  //192.168.217.131/sharename -U smbuser
WARNING: The &ldquo;syslog&rdquo; option is deprecated
Enter smbuser&rsquo;s password:
Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4]
smb: > ls</p>

<pre><code>  .                                   D        0  Thu Jun  8 09:39:42 2017
  ..                                  D        0  Thu Jun  8 09:26:38 2017
  read.txt                            N       11  Thu Jun  8 09:39:42 2017

        18307072 blocks of size 1024. 13091600 blocks available
</code></pre>

<p>```</p>

<p>List available commands:</p>

<p>```</p>

<pre><code>smb: \&gt; ?
?              allinfo        altname        archive        backup         
blocksize      cancel         case_sensitive cd             chmod          
chown          close          del            dir            du             
echo           exit           get            getfacl        geteas         
hardlink       help           history        iosize         lcd            
link           lock           lowercase      ls             l              
mask           md             mget           mkdir          more           
mput           newer          notify         open           posix          
posix_encrypt  posix_open     posix_mkdir    posix_rmdir    posix_unlink   
posix_whoami   print          prompt         put            pwd            
q              queue          quit           readlink       rd             
recurse        reget          rename         reput          rm             
rmdir          showacls       setea          setmode        scopy          
stat           symlink        tar            tarmode        timeout        
translate      unlock         volume         vuid           wdel           
logon          listconnect    showconnect    tcon           tdis           
tid            logoff         ..             !              
</code></pre>

<p>```</p>

<p>Download file:</p>

<p><code>
smb: \&gt; get read.txt
getting file \read.txt of size 11 as read.txt (3.6 KiloBytes/sec) (average 3.6 KiloBytes/sec)
</code></p>

<p>Delete file:</p>

<p><code>
smb: \&gt; del read.txt
</code></p>

<p>Upload file:</p>

<p>```
smb: > put test.png
putting file test.png as \test.png (0.2 kb/s) (average 0.2 kb/s)
smb: > ls
  .                                   D        0  Thu Jun  8 13:24:14 2017
  ..                                  D        0  Thu Jun  8 09:26:38 2017
  test.png                            A       35  Thu Jun  8 13:22:09 2017</p>

<pre><code>    18307072 blocks of size 1024. 13091480 blocks available
</code></pre>

<p>```</p>

<p>From a Windows system, you can run <code>\192.168.217.131\sharename</code> to connect to the share, or use the <em>net use</em> command.</p>

<p>View shares:</p>

<p>```
C:\Documents and Settings\admin>net use
New connections will be remembered.</p>

<p>Status       Local     Remote                    Network</p>

<hr />

<p>OK                     \192.168.217.131\sharename</p>

<pre><code>                                             Microsoft Windows Network
</code></pre>

<p>The command completed successfully.
```</p>

<p>Connect to shares:</p>

<p>```
C:\Documents and Settings\admin>net use S: \192.168.217.131\sharename
The command completed successfully.</p>

<p>C:\Documents and Settings\admin>s:</p>

<p>S:>dir
 Volume in drive S is sharename
 Volume Serial Number is DCCC-194F</p>

<p> Directory of S:\</p>

<p>06/09/2017  02:24 AM    <DIR>          .
06/08/2017  10:26 PM    <DIR>          ..
06/09/2017  02:22 AM                35 test.png</p>

<pre><code>           1 File(s)             35 bytes
           2 Dir(s)  13,405,708,288 bytes free
</code></pre>

<p>```</p>

<h3>Other useful options</h3>

<p>You can drill down into the smb.conf file and customize it to your liking. Here are a few options:</p>

<ul>
<li><p>read list = user1, user2 &ndash; set read only users on a writable share</p></li>
<li><p>write list = user1, user2 &ndash; set write access for users on a read only share</p></li>
<li><p>deny hosts  = ip &ndash; deny access to the specified IPs</p></li>
<li><p>hide unreadable = yes &ndash; don&rsquo;t let users see files they don&rsquo;t have access to</p></li>
<li><p>browseable = no &ndash; hide shares from Windows network</p></li>
</ul>


<p>Key takeaways:</p>

<ul>
<li><p>server and share security levels are deprecated, so best to avoid them</p></li>
<li><p>specifying a share in the smb.conf file is not enough. Ensure that you have created the path and gave it sufficient permissins</p></li>
<li><p>Samba users need to already exist on the system</p></li>
<li><p>you can have both a well documented config file and a minimal size one for performance, by using <code>testparm -s</code></p></li>
<li><p>if you use SELinux, don&rsquo;t forget to label your share with <code>samba_share_t</code></p></li>
</ul>


<p>Learn more:</p>

<ul>
<li><p><a href="http://linux-training.be/linuxsrv.pdf">Samba section in Paul Cobbaut&rsquo;s Linux Servers course</a></p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/smb.conf.5.html">smb.conf manpage</a> &ndash; The configuration file for the Samba suite</p></li>
<li><p><a href="https://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-samba.html">CentOS Samba guide</a></p></li>
<li><p><a href="smbpasswd%20-%20The%20Samba%20encrypted%20password%20file">smbpasswd man page</a> &ndash; The Samba encrypted password file</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages/pdbedit.8.html">pdbedit manpage</a> &ndash; manage the SAM database (Database of Samba Users)</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/testparm.1.html">testparm manpage</a> &ndash; check an smb.conf configuration file for internal correctness</p></li>
<li><p><a href="https://www.samba.org/samba/docs/man/manpages-3/smbclient.1.html">smbclient manpage</a> &ndash; ftp-like client to access SMB/CIFS resources on servers</p></li>
</ul>


<p>```
/ Nothing so needs reforming as other \
| people&rsquo;s habits.                    |
|                                     |
\ &mdash; Mark Twain                       /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iptables firewall]]></title>
    <link href="http://chousensha.github.io/blog/2017/05/23/iptables-firewall/"/>
    <updated>2017-05-23T12:27:45-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/05/23/iptables-firewall</id>
    <content type="html"><![CDATA[<p>iptables is a CLI tool for configuring firewall functionality in Linux. It operates on a series of tables, which on a CentOS 7 system are:</p>

<!-- more -->


<ul>
<li><p><strong>filter</strong> &ndash; the default table used for packet filtering</p></li>
<li><p><strong>nat</strong> &ndash; for nat</p></li>
<li><p><strong>mangle</strong> &ndash; specialized packet alteration</p></li>
<li><p><strong>raw</strong> &ndash; used mainly for configuring connection exemptions</p></li>
<li><p><strong>security</strong> &ndash; Mandatory Access Control networking rules</p></li>
</ul>


<p>For the purpose of this post, we will be focusing on the filter table, which uses sets of rules to send (or not) packets on their merry way. These rules are called chains and they are as follows:</p>

<ul>
<li><p>INPUT &ndash; incoming connections</p></li>
<li><p>OUTPUT &ndash; outbound connections</p></li>
<li><p>FORWARD &ndash; packets being forwarded through the system</p></li>
</ul>


<p>Let&rsquo;s see the currently configured rules:</p>

<p><code>plain
iptables -t filter -L | grep policy
Chain INPUT (policy ACCEPT)
Chain FORWARD (policy ACCEPT)
Chain OUTPUT (policy ACCEPT)
</code></p>

<p>Well, everything is set to ACCEPT. The opposite of accepting connections is DROP, where the packets are silently dropped. Let&rsquo;s see it in action. First, change the policy to drop the packets: <code>iptables -P INPUT DROP</code>. Then try to ping the machine:</p>

<p>``` plain
ping 192.168.217.131</p>

<p>Pinging 192.168.217.131 with 32 bytes of data:
Request timed out.
Request timed out.
Request timed out.
Request timed out.</p>

<p>Ping statistics for 192.168.217.131:</p>

<pre><code>Packets: Sent = 4, Received = 0, Lost = 4 (100% loss),
</code></pre>

<p>```</p>

<p>It is possible to also use the REJECT extension,  where packets are being dropped but the source host receives an error, thereby being notified that there may be filtering in place: <code>iptables -I INPUT -j REJECT</code>. Here the REJECT was inserted at the beginning of the INPUT chain, to ensure that it will be matched before anything else:</p>

<p>``` plain
ping 192.168.217.131</p>

<p>Pinging 192.168.217.131 with 32 bytes of data:
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.
Reply from 192.168.217.131: Destination port unreachable.</p>

<p>Ping statistics for 192.168.217.131:</p>

<pre><code>Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
</code></pre>

<p>```</p>

<p>Some example scenarios:</p>

<h3>only allow SSH connections from specific IP</h3>

<p>Let&rsquo;s assume that a computer has to be locked down, and only accept SSH connections from a certain IP:</p>

<p><code>plain
iptables -I INPUT -p tcp --dport 22 -s 192.168.217.137 -j ACCEPT
</code></p>

<p>With a policy of dropping packets, running the above will allow TCP connections for port 22, from the 192.168.217.137 source address, while still denying everything else.</p>

<h3>traffic forwarding</h3>

<p>Next, we have a machine with the IP 192.168.217.131 that we want to use to forward traffic to 192.168.217.137. How would we accomplish that?</p>

<p>First, we enable forwarding in the forwarding machine&rsquo;s kernel by putting a 1 inside <code>/proc/sys/net/ipv4/ip_forward</code>. On the .137 machine, I have a netcat listener on port 8000. On the .131 box, I also have netcat listening on port 4444. All connections coming to port 4444 on this machine will be routed to port 8000 on .137. The iptables rules to make that happen are:</p>

<ul>
<li><p><code>iptables -t nat -A PREROUTING -p tcp &mdash;dport 4444 -j DNAT &mdash;to-destination 192.168.217.137:8000</code> &ndash; we operate on the nat table. PREROUTING is used for altering packets as soon as they  come  in. We append a rule to this chain, stating that for TCP packets coming to port 4444 on this host, the destination IP will be changed to 192.168.217.137, on port 8000</p></li>
<li><p><code>iptables -t nat -A POSTROUTING -j MASQUERADE</code> &ndash; next we append to the POSTROUTING chain, that alters packets as they are about to go out, telling iptables to masquerate packets: replacing the IP of the sender to the IP of the forwarding machine</p></li>
</ul>


<p>Now I connect to port 4444 on 192.168.217.131 and send some random text, and checking my 192.168.217.137 listener, I see the traffic:</p>

<p><code>plain
c -vnlp 8000
listening on [any] 8000 ...
connect to [192.168.217.137] from (UNKNOWN) [192.168.217.131] 1859
dasa
knock kncok
</code></p>

<h3>list rules of a table</h3>

<ul>
<li><code>iptables -L -n -v</code> &ndash; display the rules of the default filter table, also printing the number of packets and bytes processed by each chain, and use numerical format for ports and addresses</li>
</ul>


<p>``` plain
Chain INPUT (policy ACCEPT 172 packets, 21210 bytes)
 pkts bytes target     prot opt in     out     source               destination</p>

<p>Chain FORWARD (policy ACCEPT 37 packets, 1523 bytes)
 pkts bytes target     prot opt in     out     source               destination</p>

<p>Chain OUTPUT (policy ACCEPT 82 packets, 6554 bytes)
 pkts bytes target     prot opt in     out     source               destination <br/>
```</p>

<h3>flush all the rules</h3>

<ul>
<li><code>iptables -F</code> &ndash; delete your rules and start anew</li>
</ul>


<h3>save rules to survive reboots</h3>

<p><code>plain
service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]
</code></p>

<h3>block specific IP</h3>

<ul>
<li><code>iptables -A INPUT -s 192.168.217.137 -j DROP</code> &ndash; packets from .137 will be dropped</li>
</ul>


<h3>block outgoing connections to a host or range</h3>

<p>Let&rsquo;s imagine that you are tired of your users spending all their day on Twitter. First, find out Twitter&rsquo;s IPs:</p>

<p><code>plain
host twitter.com
twitter.com has address 104.244.42.65
twitter.com has address 104.244.42.1
twitter.com mail is handled by 20 alt1.aspmx.l.google.com.
twitter.com mail is handled by 30 aspmx2.googlemail.com.
twitter.com mail is handled by 20 alt2.aspmx.l.google.com.
twitter.com mail is handled by 10 aspmx.l.google.com.
twitter.com mail is handled by 30 aspmx3.googlemail.com.
</code></p>

<p>Next, do a whois lookup on the IP, looking for the CIDR range it belongs to:</p>

<p><code>plain
hois 104.244.42.65 | grep CIDR
CIDR:           104.244.40.0/21
</code></p>

<p>Block access to Twitter&rsquo;s IP range: <code>iptables -A OUTPUT -p tcp -d 66.220.144.0/20 -j DROP</code></p>

<h3>log dropped packets</h3>

<ul>
<li><code>iptables -A INPUT -i eth0 -j LOG &mdash;log-prefix &ldquo;Packets dropped by firewall:&rdquo;</code> &ndash; turn on kernel logging for matching packets and prefix the log messages with some text to make them stand out</li>
</ul>


<p><code>plain
root@pwnbox:~#grep "Packets dropped by firewall:" /var/log/messages
May 23 12:11:34 pwnbox kernel: [ 3285.154203] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=288 TOS=0x00 PREC=0x00 TTL=128 ID=20858 PROTO=UDP SPT=53 DPT=57477 LEN=268
May 23 12:11:34 pwnbox kernel: [ 3285.158231] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=356 TOS=0x00 PREC=0x00 TTL=128 ID=20859 PROTO=UDP SPT=53 DPT=36464 LEN=336
May 23 12:11:34 pwnbox kernel: [ 3285.162645] Packets dropped by firewall:IN=eth0 OUT= MAC=00:0c:29:22:f9:ae:00:50:56:ed:cb:c0:08:00 SRC=192.168.217.2 DST=192.168.217.137 LEN=360 TOS=0x00 PREC=0x00 TTL=128 ID=20860 PROTO=UDP SPT=53 DPT=47777 LEN=340
...
</code></p>

<p>This post only scratched the tip of the iceberg when it comes to Linux firewalls. The key takeaway should be that iptables is a very powerful utility that can be customized to meet your specific networking needs.</p>

<p>``` plain</p>

<hr />

<p>&lt; You will wish you hadn&rsquo;t. ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DHCP server on CentOS]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/13/dhcp-server-on-centos/"/>
    <updated>2017-04-13T13:59:25-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/13/dhcp-server-on-centos</id>
    <content type="html"><![CDATA[<p>In this post I will continue the series on configuring various servers on the CentOS 7 distribution. Let&rsquo;s see how we can get a DHCP server up and running!</p>

<!-- more -->


<h2>Installing DHCP server</h2>

<p>First, we need to intall the server component, which can be done with the <code>yum install dhcp</code> command:</p>

<h1>``` plain</h1>

<h1> Package                       Arch                            Version                                           Repository                     Size</h1>

<p>Installing:
 dhcp                          x86_64                          12:4.2.5-47.el7.centos                            base                          511 k</p>

<h1>Transaction Summary</h1>

<p>Install  1 Package</p>

<p>Total download size: 511 k
Installed size: 1.4 M
Is this ok [y/d/N]: y
Downloading packages:
dhcp-4.2.5-47.el7.centos.x86_64.rpm                                                                                           | 511 kB  00:00:00   <br/>
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : 12:dhcp-4.2.5-47.el7.centos.x86_64                                                                                                1/1
  Verifying  : 12:dhcp-4.2.5-47.el7.centos.x86_64                                                                                                1/1</p>

<p>Installed:
  dhcp.x86_64 12:4.2.5-47.el7.centos</p>

<p>Complete!
```</p>

<p>We now have a <code>/etc/dhcp/dhcpd.conf</code> file for configuring the server. There isn&rsquo;t much in it to start with, except pointers to the <code>dhcpd.conf</code> man page and a sample config file in <code>/usr/share/doc/dhcp*/dhcpd.conf.example</code>:</p>

<p>``` plain</p>

<h1>dhcpd.conf</h1>

<p>#</p>

<h1>Sample configuration file for ISC dhcpd</h1>

<p>#</p>

<h1>option definitions common to all supported networks&hellip;</h1>

<p>option domain-name &ldquo;example.org&rdquo;;
option domain-name-servers ns1.example.org, ns2.example.org;</p>

<p>default-lease-time 600;
max-lease-time 7200;</p>

<h1>Use this to enble / disable dynamic dns updates globally.</h1>

<h1>ddns-update-style none;</h1>

<h1>If this DHCP server is the official DHCP server for the local</h1>

<h1>network, the authoritative directive should be uncommented.</h1>

<h1>authoritative;</h1>

<h1>Use this to send dhcp log messages to a different log file (you also</h1>

<h1>have to hack syslog.conf to complete the redirection).</h1>

<p>log-facility local7;</p>

<h1>No service will be given on this subnet, but declaring it helps the</h1>

<h1>DHCP server to understand the network topology.</h1>

<p>subnet 10.152.187.0 netmask 255.255.255.0 {
}</p>

<h1>This is a very basic subnet declaration.</h1>

<p>subnet 10.254.239.0 netmask 255.255.255.224 {
  range 10.254.239.10 10.254.239.20;
  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
}</p>

<h1>This declaration allows BOOTP clients to get dynamic addresses,</h1>

<h1>which we don&rsquo;t really recommend.</h1>

<p>subnet 10.254.239.32 netmask 255.255.255.224 {
  range dynamic-bootp 10.254.239.40 10.254.239.60;
  option broadcast-address 10.254.239.31;
  option routers rtr-239-32-1.example.org;
}</p>

<h1>A slightly different configuration for an internal subnet.</h1>

<p>subnet 10.5.5.0 netmask 255.255.255.224 {
  range 10.5.5.26 10.5.5.30;
  option domain-name-servers ns1.internal.example.org;
  option domain-name &ldquo;internal.example.org&rdquo;;
  option routers 10.5.5.1;
  option broadcast-address 10.5.5.31;
  default-lease-time 600;
  max-lease-time 7200;
}</p>

<h1>Hosts which require special configuration options can be listed in</h1>

<h1>host statements.   If no address is specified, the address will be</h1>

<h1>allocated dynamically (if possible), but the host-specific information</h1>

<h1>will still come from the host declaration.</h1>

<p>host passacaglia {
  hardware ethernet 0:0:c0:5d:bd:95;
  filename &ldquo;vmunix.passacaglia&rdquo;;
  server-name &ldquo;toccata.fugue.com&rdquo;;
}</p>

<h1>Fixed IP addresses can also be specified for hosts.   These addresses</h1>

<h1>should not also be listed as being available for dynamic assignment.</h1>

<h1>Hosts for which fixed IP addresses have been specified can boot using</h1>

<h1>BOOTP or DHCP.   Hosts for which no fixed address is specified can only</h1>

<h1>be booted with DHCP, unless there is an address range on the subnet</h1>

<h1>to which a BOOTP client is connected which has the dynamic-bootp flag</h1>

<h1>set.</h1>

<p>host fantasia {
  hardware ethernet 08:00:07:26:c0:a5;
  fixed-address fantasia.fugue.com;
}</p>

<h1>You can declare a class of clients and then do address allocation</h1>

<h1>based on that.   The example below shows a case where all clients</h1>

<h1>in a certain class get addresses on the 10.17.224/24 subnet, and all</h1>

<h1>other clients get addresses on the 10.0.29/24 subnet.</h1>

<p>class &ldquo;foo&rdquo; {
  match if substring (option vendor-class-identifier, 0, 4) = &ldquo;SUNW&rdquo;;
}</p>

<p>shared-network 224-29 {
  subnet 10.17.224.0 netmask 255.255.255.0 {</p>

<pre><code>option routers rtr-224.example.org;
</code></pre>

<p>  }
  subnet 10.0.29.0 netmask 255.255.255.0 {</p>

<pre><code>option routers rtr-29.example.org;
</code></pre>

<p>  }
  pool {</p>

<pre><code>allow members of "foo";
range 10.17.224.10 10.17.224.250;
</code></pre>

<p>  }
  pool {</p>

<pre><code>deny members of "foo";
range 10.0.29.10 10.0.29.230;
</code></pre>

<p>  }
}
```</p>

<p>This is how the config file looks like. We&rsquo;ll use this example as a basis for making our own. Copy the example file and name it <strong>dhcpd.conf</strong> file:</p>

<p><code>plain
cp /usr/share/doc/dhcp*/dhcpd.conf.example /etc/dhcp/dhcpd.conf
</code></p>

<p>Now edit it and make changes according to your network:</p>

<p>``` plain</p>

<h1>option definitions common to all supported networks&hellip;</h1>

<p>option domain-name &ldquo;localdomain.com&rdquo;;</p>

<h1>DNS server address &ndash; look in your /etc/resolv.conf</h1>

<p>option domain-name-servers 192.168.217.2;</p>

<p>default-lease-time 600;
max-lease-time 7200;</p>

<h1>declare your subnet config</h1>

<p>subnet 192.168.217.0 netmask 255.255.255.0 {
  # range of IPs to serve
  range 192.168.217.10 192.168.217.20;
  # the address of the routers &ndash; look for the gateway address in the route -n # command (entry containing UG)
  option routers 192.168.217.2;
}</p>

<p>host kaliclient {
hardware ethernet 00:0c:29:22:f9:ae;
fixed-address 192.168.217.12;
}
```</p>

<p>Here I declared the subnet for which the server would handle addresses, and I reserved an IP address for a client. For more options, you can look at the <code>dhcpd-options</code> man page.</p>

<p>Time to start the server. First, verify that the <code>/var/lib/dhcpd/dhcpd.leases</code> file exists, otherwise you will need to create an empty one before starting the server with the command <code>systemctl start dhcpd</code>. I changed my VMs connection settings to host-only, and then looked at the new IP configuration:</p>

<p>``` plain</p>

<h1>ifconfig on the host running the DHCP server</h1>

<p>inet 192.168.217.10  netmask 255.255.255.0  broadcast 192.168.217.255</p>

<h1>ifconfig on the kali client</h1>

<p>inet 192.168.217.12  netmask 255.255.255.0  broadcast 192.168.217.255
```</p>

<p>Success! Our DHCP server kicked in and gave addresses to 2 machines on the network!</p>

<p>``` plain
/ F.S. Fitzgerald to Hemingway:        \
|                                      |
| &ldquo;Ernest, the rich are different from |
| us.&rdquo; Hemingway:                      |
|                                      |
\ &ldquo;Yes. They have more money.&rdquo;         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote task automation with Fabric]]></title>
    <link href="http://chousensha.github.io/blog/2017/04/03/remote-task-automation-with-fabric/"/>
    <updated>2017-04-03T03:01:29-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/04/03/remote-task-automation-with-fabric</id>
    <content type="html"><![CDATA[<p>Today I will go over the use of <a href="http://docs.fabfile.org/en/1.13/">Fabric</a>, a Python library and CLI tool for executing local / remote tasks via SSH.</p>

<p><strong>Requirements</strong>:</p>

<ul>
<li>Python 2.5 or 2.7</li>
<li>Paramiko</li>
<li>SSH</li>
</ul>


<p><strong>Features at a glance</strong>:</p>

<ul>
<li>run local or remote shell commands (also with the sudo option)</li>
<li>upload / download files</li>
<li>prompt for input</li>
<li>run Python functions</li>
<li>abort execution when encountering errors by default, but also allow for error handling</li>
</ul>


<p>Install Fabric with <code>pip install fabric</code></p>

<!-- more -->


<h2>Usage</h2>

<p>The way Fabric works is by creating a file named <code>fabfile.py</code>, containing some functions, and then using the <strong>fab</strong> CLI tool to run them.</p>

<p>Let&rsquo;s look at the options available with the <strong>fab</strong> tool:</p>

<p>``` plain
fab &mdash;help
Usage: fab [options] <command>[:arg1,arg2=val2,host=foo,hosts=&lsquo;h1;h2&rsquo;,&hellip;] &hellip;</p>

<p>Options:
  -h, &mdash;help            show this help message and exit
  -d NAME, &mdash;display=NAME</p>

<pre><code>                    print detailed info about command NAME
</code></pre>

<p>  -F FORMAT, &mdash;list-format=FORMAT</p>

<pre><code>                    formats --list, choices: short, normal, nested
</code></pre>

<p>  -I, &mdash;initial-password-prompt</p>

<pre><code>                    Force password prompt up-front
</code></pre>

<p>  &mdash;initial-sudo-password-prompt</p>

<pre><code>                    Force sudo password prompt up-front
</code></pre>

<p>  -l, &mdash;list            print list of possible commands and exit
  &mdash;set=KEY=VALUE,&hellip;   comma separated KEY=VALUE pairs to set Fab env vars
  &mdash;shortlist           alias for -F short &mdash;list
  -V, &mdash;version         show program&rsquo;s version number and exit
  -a, &mdash;no_agent        don&rsquo;t use the running SSH agent
  -A, &mdash;forward-agent   forward local agent to remote end
  &mdash;abort-on-prompts    abort instead of prompting (for password, host, etc)
  -c PATH, &mdash;config=PATH</p>

<pre><code>                    specify location of config file to use
</code></pre>

<p>  &mdash;colorize-errors     Color error output
  -D, &mdash;disable-known-hosts</p>

<pre><code>                    do not load user known_hosts file
</code></pre>

<p>  -e, &mdash;eagerly-disconnect</p>

<pre><code>                    disconnect from hosts as soon as possible
</code></pre>

<p>  -f PATH, &mdash;fabfile=PATH</p>

<pre><code>                    python module file to import, e.g. '../other.py'
</code></pre>

<p>  -g HOST, &mdash;gateway=HOST</p>

<pre><code>                    gateway host to connect through
</code></pre>

<p>  &mdash;gss-auth            Use GSS-API authentication
  &mdash;gss-deleg           Delegate GSS-API client credentials or not
  &mdash;gss-kex             Perform GSS-API Key Exchange and user authentication
  &mdash;hide=LEVELS         comma-separated list of output levels to hide
  -H HOSTS, &mdash;hosts=HOSTS</p>

<pre><code>                    comma-separated list of hosts to operate on
</code></pre>

<p>  -i PATH               path to SSH private key file. May be repeated.
  -k, &mdash;no-keys         don&rsquo;t load private key files from ~/.ssh/
  &mdash;keepalive=N         enables a keepalive every N seconds
  &mdash;linewise            print line-by-line instead of byte-by-byte
  -n M, &mdash;connection-attempts=M</p>

<pre><code>                    make M attempts to connect before giving up
</code></pre>

<p>  &mdash;no-pty              do not use pseudo-terminal in run/sudo
  -p PASSWORD, &mdash;password=PASSWORD</p>

<pre><code>                    password for use with authentication and/or sudo
</code></pre>

<p>  -P, &mdash;parallel        default to parallel execution method
  &mdash;port=PORT           SSH connection port
  -r, &mdash;reject-unknown-hosts</p>

<pre><code>                    reject unknown hosts
</code></pre>

<p>  &mdash;sudo-password=SUDO_PASSWORD</p>

<pre><code>                    password for use with sudo only
</code></pre>

<p>  &mdash;system-known-hosts=SYSTEM_KNOWN_HOSTS</p>

<pre><code>                    load system known_hosts file before reading user
                    known_hosts
</code></pre>

<p>  -R ROLES, &mdash;roles=ROLES</p>

<pre><code>                    comma-separated list of roles to operate on
</code></pre>

<p>  -s SHELL, &mdash;shell=SHELL</p>

<pre><code>                    specify a new shell, defaults to '/bin/bash -l -c'
</code></pre>

<p>  &mdash;show=LEVELS         comma-separated list of output levels to show
  &mdash;skip-bad-hosts      skip over hosts that can&rsquo;t be reached
  &mdash;skip-unknown-tasks  skip over unknown tasks
  &mdash;ssh-config-path=PATH</p>

<pre><code>                    Path to SSH config file
</code></pre>

<p>  -t N, &mdash;timeout=N     set connection timeout to N seconds
  -T N, &mdash;command-timeout=N</p>

<pre><code>                    set remote command timeout to N seconds
</code></pre>

<p>  -u USER, &mdash;user=USER  username to use when connecting to remote hosts
  -w, &mdash;warn-only       warn, instead of abort, when commands fail
  -x HOSTS, &mdash;exclude-hosts=HOSTS</p>

<pre><code>                    comma-separated list of hosts to exclude
</code></pre>

<p>  -z INT, &mdash;pool-size=INT</p>

<pre><code>                    number of concurrent processes to use in parallel mode
</code></pre>

<p>```</p>

<p>The <strong>fab</strong> tool can execute functions from a fabfile.py by passing the function name, like so: <code>fab func-name</code></p>

<h2>Examples</h2>

<p>Let&rsquo;s take a look at a couple of simple fabfiles, before making a more contrived one:</p>

<h3>Run commands on the local host</h3>

<p>``` python
from fabric.api import *</p>

<p>@task
def local_info():</p>

<pre><code>    local('whoami')
</code></pre>

<p>```</p>

<p>Run it:</p>

<p>``` plain
fab local_info          <br/>
[localhost] local: whoami
root</p>

<p>Done.
```</p>

<h3>Run commands on remote host &ndash; password authentication</h3>

<p>Next, let&rsquo;s use SSH with a password to log in to a remote host and do something on it:</p>

<p>``` python
from fabric.api import *</p>

<p>env.hosts = [&lsquo;192.168.216.128&rsquo;]
env.user = &lsquo;root&rsquo; # default is the local user
env.password = &lsquo;password&rsquo; # can be used both for SSH authentication and sudo</p>

<p>@task
def remote_info():</p>

<pre><code>    run('uname -a')
</code></pre>

<p>```</p>

<p>And the output:</p>

<p>``` plain
fab remote_info
[192.168.216.128] Executing task &lsquo;remote_info&rsquo;
[192.168.216.128] run: uname -a
[192.168.216.128] out: Linux localhost.localdomain 3.10.0-514.2.2.el7.x86_64 #1 SMP Tue Dec 6 23:06:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
[192.168.216.128] out:</p>

<p>Done.
Disconnecting from 192.168.216.128&hellip; done.
```</p>

<h3>Run commands on remote host &ndash; key authentication</h3>

<p>SSH with a password might be ok for demonstration purposes, but we will most likely want to use public key authentication. First, generate the key that we&rsquo;ll use later:</p>

<p><code>plain
ssh-keygen -t rsa -b 2048 -v
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): mykey.pem
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in mykey.pem.
Your public key has been saved in mykey.pem.pub.
</code></p>

<p>Next, copy the key to the remote host&rsquo;s <code>~/.ssh/authorized_keys</code> location:</p>

<p>``` plain
ssh-copy-id -i ~/mykey.pem.pub <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x72;&#111;&#111;&#x74;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#56;&#x2e;&#x32;&#49;&#x36;&#x2e;&#x31;&#50;&#x38;">&#x72;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x32;&#49;&#x36;&#46;&#x31;&#x32;&#56;</a>
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &ldquo;/root/mykey.pem.pub&rdquo;
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed &mdash; if you are prompted now it is to install the new keys
<a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#x32;&#49;&#x36;&#46;&#49;&#x32;&#56;">&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#x32;&#46;&#49;&#x36;&#56;&#x2e;&#50;&#x31;&#x36;&#x2e;&#49;&#x32;&#x38;</a>&rsquo;s password:</p>

<p>Number of key(s) added: 1</p>

<p>Now try logging into the machine, with:   &ldquo;ssh &lsquo;<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x72;&#x6f;&#111;&#x74;&#x40;&#x31;&#57;&#x32;&#46;&#x31;&#x36;&#56;&#x2e;&#x32;&#x31;&#x36;&#46;&#x31;&#50;&#x38;">&#x72;&#x6f;&#111;&#116;&#x40;&#49;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#46;&#x32;&#49;&#x36;&#46;&#x31;&#50;&#56;</a>&rsquo;&rdquo;
and check to make sure that only the key(s) you wanted were added.
```</p>

<p>Make the .pem key read-only and then try logging in by passing it to the ssh -i option:</p>

<p><code>plain
chmod 400 mykey.pem
ssh -i mykey.pem root@192.168.216.128
Last failed login: Tue Mar 28 12:28:43 EEST 2017 from 192.168.216.1 on ssh:notty
There were 2 failed login attempts since the last successful login.
Last login: Tue Mar 28 11:30:19 2017 from 192.168.216.1
[root@localhost ~]#
</code></p>

<p>Now add the key file in Fabric:</p>

<p>``` python
from fabric.api import *</p>

<p>env.hosts = [&lsquo;192.168.217.131&rsquo;]
env.user = &lsquo;root&rsquo;
env.key_filename = &lsquo;~/.ssh/mykey.pem&rsquo;</p>

<p>@task
def remote_info():</p>

<pre><code>    run('uptime')
</code></pre>

<p>```</p>

<h3>Run commands on multiple hosts</h3>

<p>If you want to run a command on a host, and a different command on another host, you can do so by specifying which host you want to run a command on:</p>

<p>``` python
from fabric.api import *</p>

<p>env.user = &lsquo;root&rsquo;
env.key_filename = &lsquo;~/mykey.pem&rsquo;</p>

<p>@task
def local_info():</p>

<pre><code>print('This runs only on the localhost')
</code></pre>

<p>@hosts(&lsquo;192.168.216.128&rsquo;)
@task
def remote_info():</p>

<pre><code>    print('This runs only on the remote host')
</code></pre>

<p>```</p>

<p>Here is how it would look like:</p>

<p>``` plain
fab local_info remote_info
This runs only on the localhost
[192.168.216.128] Executing task &lsquo;remote_info&rsquo;
This runs only on the remote host</p>

<p>Done.
```</p>

<h3>Download / upload files</h3>

<p>Fabric also has built-in functionality for downloading and uploading files:</p>

<p>``` python
@task
def download():</p>

<pre><code>    get('~/Desktop/ssh.sh')
</code></pre>

<p>```</p>

<p>Result:</p>

<p>``` plain
fab download
[192.168.23.128] Executing task &lsquo;download&rsquo;
[192.168.23.128] download: path/192.168.23.128/ssh.sh &lt;&ndash; /root/Desktop/ssh.sh</p>

<p>Done.
Disconnecting from 192.168.23.128&hellip; done.
```</p>

<p>And the upload:</p>

<p>``` python
@task
def upload():</p>

<pre><code>    put('file.txt', '~/Desktop')
</code></pre>

<p>```</p>

<p>Output:</p>

<p>``` plain
fab upload
[192.168.23.128] Executing task &lsquo;upload&rsquo;
[192.168.23.128] put: file.txt &ndash;> /root/Desktop/file.txt</p>

<p>Done.
Disconnecting from 192.168.23.128&hellip; done.
```</p>

<h3>Run sudo commands</h3>

<p>We saw some examples of using the root user, but Fabric allows running sudo commands from users with lower privileges:</p>

<p>``` python
from fabric.api import *</p>

<p>env.hosts = [&lsquo;192.168.217.131&rsquo;]
env.user = &lsquo;nixhat&rsquo;</p>

<p>@task
def cfg_test():</p>

<pre><code>    sudo('apachectl configtest')
</code></pre>

<p>```</p>

<p>And here it is in action:</p>

<p>``` plain
fab cfg_test
[192.168.217.131] Executing task &lsquo;cfg_test&rsquo;
[192.168.217.131] sudo: apachectl configtest
[192.168.217.131] Login password for &lsquo;nixhat&rsquo;:
[192.168.217.131] out: sudo password:
[192.168.217.131] out: AH00558: httpd: Could not reliably determine the server&rsquo;s
 fully qualified domain name, using localhost.localdomain. Set the &lsquo;ServerName&rsquo;
directive globally to suppress this message
[192.168.217.131] out: Syntax OK
[192.168.217.131] out:</p>

<p>Done.
Disconnecting from 192.168.217.131&hellip; done.
```</p>

<h3>Specifying multiple hosts with different users and passwords</h3>

<p>In case you have many hosts that you would like to run commands on as different users, you can do so:</p>

<p><code>python
env.hosts = ['root@192.168.217.130', 'nixhat@192.168.216.128'] # hosts to run cmds on
env.passwords = {'root@192.168.217.130':'password1', 'nixhat@192.168.216.128':'password2'}
</code></p>

<h3>Running tasks on predefined hosts</h3>

<p>If you have tasks that you want to run on certain hosts only, you can specify that:</p>

<p>``` python
@hosts(&lsquo;host1&rsquo;, &lsquo;host2&rsquo;)
def mytask():</p>

<pre><code>run('cmd')
</code></pre>

<p>```</p>

<h3>Classifying hosts into roles</h3>

<p>In a large environment, you are most likely to have many hosts that fulfill some roles, such as development machines and production servers. You can organize them in the Fabric code:</p>

<p>``` python
env.roledefs = {</p>

<pre><code>'production': ['prod1', 'prod2'],
'development': ['dev1', 'dev2']
</code></pre>

<p>}
```</p>

<h3>Automating code deployment</h3>

<p>In a <a href="https://chousensha.github.io/blog/2017/03/30/using-git-for-code-deployment/">previous post</a>, we used Git for updating the code on a live server from a development machine. This time, we&rsquo;ll use Fabric to automate the process!</p>

<p>Besides the development and production servers we had before, we&rsquo;ll use a third computer to run the Fabric commands from. Let&rsquo;s assume this is your sysadmin machine, from which magic happens on the network. The developers made some changes to the code on the dev server, and you want to push them to production:</p>

<p>``` python
from fabric.api import *</p>

<h1>script must be called fabfile.py</h1>

<h1>fab -l &ndash; list available cmds</h1>

<h1>fab CMDNAME &ndash; run cmd</h1>

<h1>the env dictionary allows for setting different variables for customizing the configuration</h1>

<p>env.colorize_errors = &lsquo;true&rsquo; # color errors in red and warnings in magenta</p>

<p>env.roledefs = {</p>

<pre><code>'dev': ['root@192.168.217.130:22 '],
'prod': ['root@192.168.217.131:22'],
}
</code></pre>

<p>env.passwords = {&lsquo;root@192.168.217.130:22&rsquo;:&lsquo;5t0rm80rn&rsquo;, &lsquo;root@192.168.217.131:22&rsquo;:&lsquo;hakubo10&rsquo;}</p>

<p>@roles(&lsquo;dev&rsquo;)
@task
def prep():</p>

<pre><code>'''
Stage and commit new and modified files
:return:
'''
with settings(warn_only=True): # continue executing even if errors were encountered
    with cd('/root/Testing/Dev'):
        run('git add . &amp;&amp; git commit -m "Add changes"')
</code></pre>

<p>@roles(&lsquo;dev&rsquo;)
@task
def push():</p>

<pre><code>with cd('/root/Testing/Dev'):
    run('git push production')
</code></pre>

<p>@roles(&lsquo;prod&rsquo;)
@task
def chk():</p>

<pre><code>'''
Confirm that files have been updated on the web server
:return:
'''
run('ls /var/www/html/myweb/site')
</code></pre>

<p>```</p>

<p>Now list the available commands:</p>

<p>``` plain
fab -l
Available commands:</p>

<pre><code>chk   Confirm that files have been updated on the web server
prep  Stage and commit new and modified files
push
</code></pre>

<p>```</p>

<p>And run them:</p>

<p>``` plain
fab prep push chk
[root@192.168.217.130:22] Executing task &lsquo;prep&rsquo;
[root@192.168.217.130:22] run: git add . &amp;&amp; git commit -m &ldquo;Add changes&rdquo;
[root@192.168.217.130:22] out: [master 5719a02] Add changes
[root@192.168.217.130:22] out:  1 file changed, 1 insertion(+), 1 deletion(&ndash;)
[root@192.168.217.130:22] out:</p>

<p>[root@192.168.217.130:22] Executing task &lsquo;push&rsquo;
[root@192.168.217.130:22] run: git push production
[root@192.168.217.130:22] out: <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#114;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#49;&#54;&#56;&#46;&#50;&#x31;&#55;&#46;&#49;&#51;&#49;">&#114;&#x6f;&#111;&#116;&#x40;&#49;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#x32;&#49;&#x37;&#46;&#49;&#x33;&#x31;</a>&rsquo;s password:
[root@192.168.217.130:22] out: Counting objects: 3, done.
[root@192.168.217.130:22] out: Compressing objects:  33% (1/3)
[root@192.168.217.130:22] out: Compressing objects:  66% (2/3)
[root@192.168.217.130:22] out: Compressing objects: 100% (3/3)
[root@192.168.217.130:22] out: Compressing objects: 100% (3/3), done.
[root@192.168.217.130:22] out: Writing objects:  33% (1/3)
[root@192.168.217.130:22] out: Writing objects:  66% (2/3)
[root@192.168.217.130:22] out: Writing objects: 100% (3/3)
[root@192.168.217.130:22] out: Writing objects: 100% (3/3), 294 bytes | 0 bytes/
s, done.
[root@192.168.217.130:22] out: Total 3 (delta 2), reused 0 (delta 0)
[root@192.168.217.130:22] out: To 192.168.217.131:Prod
[root@192.168.217.130:22] out:    39e598d..5719a02  master &ndash;> master
[root@192.168.217.130:22] out:</p>

<p>[root@192.168.217.131:22] Executing task &lsquo;chk&rsquo;
[root@192.168.217.131:22] run: ls /var/www/html/myweb/site
[root@192.168.217.131:22] out: index.html  new.html  updates.html
[root@192.168.217.131:22] out:</p>

<p>Done.
Disconnecting from <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#x2e;&#50;&#x31;&#55;&#46;&#x31;&#x33;&#x30;&#x2e;&#x2e;&#x2e;">&#114;&#111;&#x6f;&#116;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#50;&#x31;&#55;&#x2e;&#49;&#51;&#48;&#x2e;&#x2e;&#46;</a> done.
Disconnecting from <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#x72;&#111;&#111;&#116;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#x38;&#x2e;&#x32;&#x31;&#55;&#46;&#49;&#51;&#49;&#x2e;&#x2e;&#x2e;">&#x72;&#x6f;&#111;&#116;&#64;&#x31;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#x2e;&#x32;&#49;&#55;&#46;&#x31;&#51;&#x31;&#46;&#x2e;&#x2e;</a> done.
```</p>

<p>In a file with many tasks, it will get tiresome to always specify them on the command line. You can organize your code to have a function that calls other tasks, respecting the roles and settings for each. Add this to the previous code:</p>

<p>``` python
@task
def deploy():</p>

<pre><code>'''
Execute previous tasks by taking into account the defined roles 
:return:
'''
execute(prep) # on dev
execute (push) # on dev
execute(chk) # on prod
</code></pre>

<p>```</p>

<p>Now you can run only <code>fab deploy</code> to get the same results!</p>

<p>``` plain
/ In the stairway of life, you&rsquo;d best \
\ take the elevator.                  /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Git for code deployment]]></title>
    <link href="http://chousensha.github.io/blog/2017/03/30/using-git-for-code-deployment/"/>
    <updated>2017-03-30T07:09:46-04:00</updated>
    <id>http://chousensha.github.io/blog/2017/03/30/using-git-for-code-deployment</id>
    <content type="html"><![CDATA[<p>Imagine you have a local server where you work on developing the code for a web application. After doing your magic, you want to upload it to the web server so the rest of the world can access your shiny new web app. To do that, you have to place your code on another server, which serves as the production environment. Moreover, when making changes to your code, you only want to update the modified files, not everything.</p>

<!-- more -->


<p>You could keep track of what files have been changed on your dev server, and then manually transfer them to the web server in production. Now that we have established how much time and sanity you would lose, especially with a big app, let&rsquo;s see how Git can make this kind of code deployment not only possible, but also smooth and efficient.</p>

<p>I will be using the root account for this demo, which is of course a bad idea in a live environment, so keep that in mind =D</p>

<p>On the server side, say we have a folder named Prod. Here we will push the code for a website, and then we&rsquo;ll transfer it to the web directory.</p>

<p>First, initialize a bare repository inside the Prod folder:</p>

<p><code>plain
git init --bare
Initialized empty Git repository in /root/Prod/
</code></p>

<p>For better security, we&rsquo;ll keep the git repository outside the web root directory. To automatically update the code, we&rsquo;ll use a git hook, which is a script that runs when a certain event occurs. In this case, we&rsquo;ll create a <code>post-receive</code> hook, which runs on a remote repository after a git push</p>

<p>In the hooks directory, I created a hook called post-receive, with the following code in it:</p>

<p>``` plain</p>

<h1>!/bin/sh</h1>

<p>GIT_WORK_TREE=/var/www/html/myweb/site git checkout -f # path to the web root, it has to be created beforehand
```</p>

<p>Looking inside the hooks directory, you will see the samples are executable. We also have to make ours executable, so use <code>chmod +x</code></p>

<p>With that, the production server setup is complete. On the local development server, make a repository and add some files that you want to end up in production:</p>

<p>``` plain
root@pwnbox:~/Testing/Dev#git add .
root@pwnbox:~/Testing/Dev#git status
On branch master</p>

<p>Initial commit</p>

<p>Changes to be committed:
  (use &ldquo;git rm &mdash;cached <file>&hellip;&rdquo; to unstage)</p>

<pre><code>new file:   index.html
new file:   updates.html
</code></pre>

<p>```</p>

<p>Now add a remote, which will point to the production repository:</p>

<p><code>plain
git remote add production root@192.168.217.131:Prod
</code></p>

<p>Make a commit:</p>

<p><code>plain
git commit -m '1st commit'
[master (root-commit) bac80ea] 1st commit
 2 files changed, 2 insertions(+)
 create mode 100644 index.html
 create mode 100644 updates.html
</code></p>

<p>And now push the changes to production &mdash; note the use of the <a href="https://www.git-scm.com/book/tr/v2/Git-Internals-The-Refspec">refspec</a>:</p>

<p><code>plain
git push production +master:refs/heads/master
root@192.168.217.131's password:
Counting objects: 4, done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (4/4), 331 bytes | 0 bytes/s, done.
Total 4 (delta 0), reused 0 (delta 0)
To 192.168.217.131:Prod
 * [new branch]      master -&gt; master
</code></p>

<p>Let&rsquo;s see if it worked! On my production server:</p>

<p><img class="center" src="/images/sysadmin/git1.png" title="&lsquo;Code updated&rsquo; &lsquo;Code was pushed to web server&rsquo;" ></p>

<p><img class="center" src="/images/sysadmin/git2.png" title="&lsquo;Code updated&rsquo; &lsquo;Code was pushed to web server&rsquo;" ></p>

<p>It did work! Now let&rsquo;s update a file, and only push this file which has been modified. After making the modifications, look at the current status:</p>

<p>``` plain
git status
On branch master
Changes not staged for commit:
  (use &ldquo;git add <file>&hellip;&rdquo; to update what will be committed)
  (use &ldquo;git checkout &mdash; <file>&hellip;&rdquo; to discard changes in working directory)</p>

<pre><code>modified:   updates.html
</code></pre>

<p>no changes added to commit (use &ldquo;git add&rdquo; and/or &ldquo;git commit -a&rdquo;)
```</p>

<p>Commit the modified file:</p>

<p><code>plain
git commit -a -m 'Update to 1 file'
</code></p>

<p>And now push to production and also set the remote branch so next time you can do it with a simple <code>git push production</code>:</p>

<p><code>plain
git push --set-upstream production master
root@192.168.217.131's password:
Counting objects: 3, done.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 345 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To 192.168.217.131:Prod
   bac80ea..6fcdb86  master -&gt; master
Branch master set up to track remote branch master from production.
</code></p>

<p><img class="center" src="/images/sysadmin/git3.png" title="&lsquo;Changed file uploaded&rsquo; &lsquo;The modified file was successfully updated&rsquo;" ></p>

<p>And to confirm that on the production environment, only the modified file was updated, but the unchanged one remained the same:</p>

<p><code>plain
[root@localhost site]# ls -la
total 8
drwxr-xr-x. 2 root root 42 Mar 30 14:03 .
drwxr-xr-x. 3 root root 76 Mar 30 13:30 ..
-rw-r--r--. 1 root root 26 Mar 30 13:21 index.html
-rw-r--r--. 1 root root 71 Mar 30 14:03 updates.html
</code></p>

<p>It might not look like much for the 2 small files I have here, but in a huge code environment, you will feel the difference!</p>

<p>``` plain</p>

<hr />

<p>/ Your boss climbed the corporate ladder, \
\ wrong by wrong.                         /</p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
